<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java中异常的相关知识</title>
    <url>/2022/10/15/10-15/</url>
    <content><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="因为一些原因导致开发的程序出现问题"><a href="#因为一些原因导致开发的程序出现问题" class="headerlink" title="因为一些原因导致开发的程序出现问题"></a>因为一些原因导致开发的程序出现问题</h3><p>Throwable是error和Exception的父类，是Java里所有异常的父类<br>##error<br>如果出现了error，则代表计算机出现了重大的错误，比如jvm无法解决的问题等。</p>
<h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p>如果出现了Exception，则代表计算机代码出现了问题，编译或者运行的时候出现了问题。但是Exception还分为运行时异常和编译时异常</p>
<h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p>运行时异常比如：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ArrayIndexOutOfBoundsException<span class="regexp">//</span>这就是个数组越界的异常</span><br></pre></td></tr></table></figure>

<p>这些都是运行的时候产生的异常，编译可以通过的，其中最常见的就是数组越界，下表越剧等</p>
<h3 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h3><p>编译时异常比如：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">The final <span class="built_in">local</span> <span class="built_in">variable</span> m cannot be assigned. It must be blank <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">using</span> <span class="keyword">a</span> <span class="built_in">compound</span> assignment<span class="comment"> //这个就是个简单的final修饰的变量不可被改变的异常</span></span><br></pre></td></tr></table></figure>

<p>这些是在程序未被运行之前就报出的错误。会被编译器会进行优先的处理。<br>最常见的就是作用域的问题，比如static变量和非static的变量等。</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><p>我们可以通过try catch的方法进行捕获异常，让异常出现的时候不至于停止程序的运行<br>代码如下：</p>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line"><span class="title function_">try</span> &#123;<span class="comment">//放会报错的语句，这个是个简单数组越界</span></span><br><span class="line">	<span class="variable">a</span>[<span class="variable">m</span>] <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">	<span class="title class_">System</span>.<span class="property">out</span>.<span class="property">println</span>(<span class="string">&quot;输入正确&quot;</span>);	</span><br><span class="line">	&#125; <span class="title function_">catch</span> (<span class="title class_">Exception</span> <span class="variable">e</span>) &#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">	<span class="comment">// 在错误发生时怎么处理</span></span><br><span class="line">	<span class="title class_">System</span>.<span class="property">out</span>.<span class="property">println</span>(<span class="string">&quot;成功抛出异常&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="title function_">catch</span>(<span class="params">xxxxx</span>) &#123;</span><br><span class="line">	&#125;<span class="comment">// 这里的catch还可以继续往下写，但是要注意其中异常的类型必须是越在后面类型越大的，因为Exception还分多个子类异常，这样可以更精确的分辨是什么异常，不过直接写Exception也不算错</span></span><br><span class="line">	<span class="title function_">finally</span> &#123;</span><br><span class="line">		<span class="comment">// finally里放一定会执行的代码，不过不写finally也不算错</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是要注意，我们不可以捕获error异常，因为error异常已经超出了代码捕获的范围，我们一般都要进行硬件及软件的处理</p>
<h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p>我们可以通过throws把异常向上抛出，让他们的上层去处理，可是一般上层如果不能处理，还会继续向上抛出，这种方法我简称为逃避，我们，一般使用try catch语句较多，一般是抛到main方法里进行try catch处理，<br>如果异常一直不处理，那编译器最后会报错</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>数字及big类</title>
    <url>/2022/10/17/10-17/</url>
    <content><![CDATA[<h1 id="关于数学包里常用的几个类"><a href="#关于数学包里常用的几个类" class="headerlink" title="关于数学包里常用的几个类"></a>关于数学包里常用的几个类</h1><h2 id="abs"><a href="#abs" class="headerlink" title="abs"></a>abs</h2><p>abs是取绝对值</p>
<h2 id="cell"><a href="#cell" class="headerlink" title="cell"></a>cell</h2><p>向上（正方向）取整</p>
<h2 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h2><p>向下（负方向）取整</p>
<h2 id="round"><a href="#round" class="headerlink" title="round"></a>round</h2><p> 四舍五入</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 简单的例子 ，5舍6入</span></span><br><span class="line">可以通过<span class="built_in">floor</span>进行</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h1><p>BigInteger类型的数字范围较Integer，Long类型的数字范围要大得多，它支持任意精度的整数，也就是说在运算中 BigInteger 类型可以准确地表示任何大小的整数值而不会丢失任何信息。</p>
<h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="regexp">//</span><span class="number">1</span>.加</span><br><span class="line">BigInteger bigNum1 = a.add(b);			<span class="regexp">//</span><span class="number">17</span></span><br><span class="line"><span class="regexp">//</span><span class="number">2</span>.减</span><br><span class="line">BigInteger bigNum2 = a.subtract(b);		<span class="regexp">//</span><span class="number">9</span></span><br><span class="line"><span class="regexp">//</span><span class="number">3</span>.乘</span><br><span class="line">BigInteger bigNum3 = a.multiply(b);		<span class="regexp">//</span><span class="number">52</span></span><br><span class="line"><span class="regexp">//</span><span class="number">4</span>.除</span><br><span class="line">BigInteger bigNum4 = a.divide(b);		<span class="regexp">//</span><span class="number">3</span></span><br><span class="line"><span class="regexp">//</span><span class="number">5</span>.取模(需 b &gt; <span class="number">0</span>，否则出现异常：ArithmeticException(<span class="string">&quot;BigInteger: modulus not positive&quot;</span>))</span><br><span class="line">BigInteger bigNum5 = a.mod(b);			<span class="regexp">//</span><span class="number">1</span></span><br><span class="line"><span class="regexp">//</span><span class="number">6</span>.求余</span><br><span class="line">BigInteger bigNum6 = a.remainder(b);	<span class="regexp">//</span><span class="number">1</span></span><br><span class="line"><span class="regexp">//</span><span class="number">7</span>.平方(需 n &gt;= <span class="number">0</span>，否则出现异常：ArithmeticException(<span class="string">&quot;Negative exponent&quot;</span>))</span><br><span class="line">BigInteger bigNum7 = a.pow(n);			<span class="regexp">//</span><span class="number">2197</span></span><br><span class="line"><span class="regexp">//</span><span class="number">8</span>.取绝对值</span><br><span class="line">BigInteger bigNum8 = a.abs();			<span class="regexp">//</span><span class="number">13</span></span><br><span class="line"><span class="regexp">//</span><span class="number">9</span>.取相反数</span><br><span class="line">BigInteger bigNum9 = a.negate();		<span class="regexp">//</span>-<span class="number">13</span></span><br></pre></td></tr></table></figure>

<h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读入方法：nextBigInteger()</span></span><br><span class="line">@Test</span><br><span class="line">public void test5<span class="literal">()</span> &#123;</span><br><span class="line">	Scanner scan = <span class="keyword">new</span> <span class="constructor">Scanner(System.<span class="params">in</span>)</span>;				<span class="comment">// 读入</span></span><br><span class="line">	<span class="built_in">int</span> n = scan.next<span class="constructor">Int()</span>; 							<span class="comment">// 读入一个int;</span></span><br><span class="line">	BigInteger m = scan.next<span class="constructor">BigInteger()</span>;				<span class="comment">// 读入一个BigInteger;</span></span><br><span class="line">	<span class="keyword">while</span>(scan.has<span class="constructor">Next()</span>)&#123;	</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;scan.hasNext()=&quot;</span> + scan.has<span class="constructor">Next()</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中除了这个还有big浮点型，用法和上面一样</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>java里的日期和Object的一些方法</title>
    <url>/2022/10/18/10-18/</url>
    <content><![CDATA[<h1 id="Java-util-Date"><a href="#Java-util-Date" class="headerlink" title="Java.util.Date"></a>Java.util.Date</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> d = <span class="built_in">new</span> <span class="type">Date</span>();</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.Println(d);</span><br></pre></td></tr></table></figure>
<p>一般这样直接打印出，是中国国际化标准化时间<br>但是一般除了getTime别的都过时了，保不准会在什么时候就舍弃</p>
<h2 id="getmonth"><a href="#getmonth" class="headerlink" title="getmonth"></a>getmonth</h2><p>他是用农历算的，范围是0-11</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">d.<span class="keyword">get</span><span class="built_in">Month</span>();</span><br></pre></td></tr></table></figure>
<h2 id="getYear"><a href="#getYear" class="headerlink" title="getYear"></a>getYear</h2><p>获取从1900年到现在的年数</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">d.<span class="keyword">get</span><span class="built_in">Year</span>();</span><br></pre></td></tr></table></figure>
<h2 id="getDate"><a href="#getDate" class="headerlink" title="getDate"></a>getDate</h2><p>获取到现在的日期</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">d.<span class="keyword">get</span><span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure>
<h2 id="getHours"><a href="#getHours" class="headerlink" title="getHours"></a>getHours</h2><p>获取现在的小时</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">d.getHours()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="getMinutes"><a href="#getMinutes" class="headerlink" title="getMinutes"></a>getMinutes</h2><p>获取现在的分钟数</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">d.getMinutes()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="getSeconds"><a href="#getSeconds" class="headerlink" title="getSeconds"></a>getSeconds</h2><p>获取当前的秒数</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">d.getSeconds()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="getDays"><a href="#getDays" class="headerlink" title="getDays"></a>getDays</h2><p>获取当前日期范围是0-6，周一到周六</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">d.<span class="keyword">get</span><span class="built_in">Day</span>();</span><br></pre></td></tr></table></figure>
<h2 id="getTime"><a href="#getTime" class="headerlink" title="getTime"></a>getTime</h2><p>获取从1970年到现在时间</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">d.<span class="keyword">get</span><span class="built_in">Time</span>();</span><br></pre></td></tr></table></figure>
<h2 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo"></a>compareTo</h2><p>自动排序：正数是大于 ， 0是相等 ， -1 是小于</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">d.compare<span class="constructor">To(<span class="params">d</span>)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"> 代表过时的，会让方法上面画上横线</span><br></pre></td></tr></table></figure>
<h1 id="java-sql-Date"><a href="#java-sql-Date" class="headerlink" title="java.sql.Date"></a>java.sql.Date</h1><h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">java.<span class="keyword">sql</span>.Date d = <span class="built_in">new</span> java.<span class="keyword">sql</span>.Date(<span class="type">date</span>.getTime);</span><br><span class="line">// 获取时间,包含天月的</span><br></pre></td></tr></table></figure>
<h2 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">java.<span class="keyword">sql</span>.Time d  = <span class="built_in">new</span> java.<span class="keyword">sql</span>.Time(<span class="type">date</span>.getTime);</span><br><span class="line">// 获取时间</span><br></pre></td></tr></table></figure>

<h2 id="Timestamp"><a href="#Timestamp" class="headerlink" title="Timestamp"></a>Timestamp</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">java.<span class="keyword">sql</span>.Timestamp d = <span class="built_in">new</span> java.<span class="keyword">sql</span>.Timestamp(<span class="type">date</span>.getTime);</span><br><span class="line">// 获取精确到毫秒数的时间</span><br></pre></td></tr></table></figure>

<h1 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h1><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat s <span class="operator">=</span> new SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd:mm:ss.SSS&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="format日期变字符串"><a href="#format日期变字符串" class="headerlink" title="format日期变字符串"></a>format日期变字符串</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="keyword">string</span> s.format(<span class="keyword">date</span>);</span><br></pre></td></tr></table></figure>

<h2 id="字符串变日期"><a href="#字符串变日期" class="headerlink" title="字符串变日期"></a>字符串变日期</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">s.parse(<span class="string">&quot;2000-11-12 13:14:15.000&quot;</span>);</span><br><span class="line"><span class="regexp">//</span> 但是这个可能会有错误，所以，我们需要用try catch包住他</span><br></pre></td></tr></table></figure>
<h1 id="Ccalender"><a href="#Ccalender" class="headerlink" title="Ccalender"></a>Ccalender</h1><p>用静态方法实例化，new 不了</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">Calendar c <span class="operator">=</span> Calendar.getLnstance()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="set设置"><a href="#set设置" class="headerlink" title="set设置"></a>set设置</h2><p>set和get基本相同</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">c1.<span class="keyword">set</span>(Calendar.MONTH ， xxx)；</span><br><span class="line">c1.<span class="keyword">set</span>(Calendar.HOURS , xxx)<span class="comment">;等</span></span><br><span class="line"><span class="comment">// 这里xxx代表一个int型的数字，会自动进位，如果xxx超过11则会自动进位，对其他的小时，秒数也同样是适用</span></span><br></pre></td></tr></table></figure>

<h2 id="get获取"><a href="#get获取" class="headerlink" title="get获取"></a>get获取</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">c.<span class="built_in">get</span>(Calendar.MONTH);</span><br><span class="line">c.<span class="built_in">get</span>(Calendar.DATE);</span><br><span class="line">等,要通过一系列常量来控制他</span><br></pre></td></tr></table></figure>
<h2 id="add计算"><a href="#add计算" class="headerlink" title="add计算"></a>add计算</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">c.add(Calendar.<span class="built_in">MONTH</span> , <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 单纯是加到其中前一个变量上，可以进位。还有其他的方法，比如huors等</span></span><br></pre></td></tr></table></figure>
<h2 id="getTime-1"><a href="#getTime-1" class="headerlink" title="getTime"></a>getTime</h2><p>转换成Date型，然后就可以用SimpleDateFormat了</p>
<h1 id="Localdate"><a href="#Localdate" class="headerlink" title="Localdate"></a>Localdate</h1><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">LocalDate l <span class="operator">=</span> LocalDate.now()<span class="comment">; // 获取当前日期</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>最大支持999999999-12-31</p>
</li>
<li><p>最小支持-999999999-01-01</p>
</li>
</ul>
<h2 id="adjiustInto"><a href="#adjiustInto" class="headerlink" title="adjiustInto"></a>adjiustInto</h2><p>调整指定的时间对象与此对象时间相同</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">l.adjust<span class="constructor">Into(<span class="params">l</span>)</span></span><br></pre></td></tr></table></figure>
<h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><p>检查这个日期是不是等于另外一个日期</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">l.<span class="keyword">equals</span>(d)</span><br></pre></td></tr></table></figure>
<h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><p>使用指定格式格式化日期</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">l.format(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h2 id="getDayofMonth"><a href="#getDayofMonth" class="headerlink" title="getDayofMonth"></a>getDayofMonth</h2><p>获取月份字段</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.getDayofMonth()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="getDayofWeek"><a href="#getDayofWeek" class="headerlink" title="getDayofWeek"></a>getDayofWeek</h2><p>同上只是获取星期几，这个是个枚举</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.getDayOfWeek()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="getDayofYear"><a href="#getDayofYear" class="headerlink" title="getDayofYear"></a>getDayofYear</h2><p>同上只是获取日期字段</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.getDayofYear()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="getChronology"><a href="#getChronology" class="headerlink" title="getChronology"></a>getChronology</h2><p>获取ios的日历系统的</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.getChronology()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="hashcode"><a href="#hashcode" class="headerlink" title="hashcode"></a>hashcode</h2><p>返回这个日期的哈希码</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.hashcode()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="isAfter"><a href="#isAfter" class="headerlink" title="isAfter"></a>isAfter</h2><p>检查日期是不是在这个日期之后</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">l.is<span class="constructor">After(<span class="params">l</span>)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="isBefore"><a href="#isBefore" class="headerlink" title="isBefore"></a>isBefore</h2><p>同上</p>
<h2 id="isEqual"><a href="#isEqual" class="headerlink" title="isEqual"></a>isEqual</h2><p>检查这个日期是不是等于指定日期</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">l.is<span class="constructor">Equal(<span class="params">l</span>)</span>;</span><br></pre></td></tr></table></figure>
<h2 id="isLeapYear"><a href="#isLeapYear" class="headerlink" title="isLeapYear"></a>isLeapYear</h2><p>根据ios日历，检查是不是闰年</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.isLeapYear()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="now"><a href="#now" class="headerlink" title="now"></a>now</h2><p>获取当前的时间<br>初始化方法</p>
<h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><p>同上面的parse</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">l.<span class="built_in">parse</span>(<span class="built_in">null</span>);</span><br></pre></td></tr></table></figure>
<h2 id="plus"><a href="#plus" class="headerlink" title="plus"></a>plus</h2><p>返回此日期的副本，并添加指定的金额。 </p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">l.<span class="keyword">plus</span>(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<h2 id="plusDays"><a href="#plusDays" class="headerlink" title="plusDays"></a>plusDays</h2><p>返回指定天数的副本</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.plusDays(<span class="number">0</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="plusMonths"><a href="#plusMonths" class="headerlink" title="plusMonths"></a>plusMonths</h2><p>返回这个LocalDate的副本，其指定的时间段以月为单位</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.plusMonths(<span class="number">0</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="plusweeks"><a href="#plusweeks" class="headerlink" title="plusweeks"></a>plusweeks</h2><p>返回这个LocalDate的副本并以指定周期添加周数</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.plusWeeks(<span class="number">0</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="plusYears"><a href="#plusYears" class="headerlink" title="plusYears"></a>plusYears</h2><p>返回这个LocalDate的副本其中指定的时间段以添加的年数访问</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.plusYears(<span class="number">0</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="query"><a href="#query" class="headerlink" title="query"></a>query</h2><p>返回指定的查询查询日期</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">l.query(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>返回此日期的调整的副本</p>
<ul>
<li>其和上面一样有对单独地方调整的函数，比如日期月份等<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">l.<span class="keyword">with</span>(l);</span><br><span class="line">		l.<span class="keyword">with</span><span class="constructor">DayOfMonth(0)</span>;</span><br><span class="line">		l.<span class="keyword">with</span><span class="constructor">DayOfYear(0)</span>;</span><br><span class="line">		l.<span class="keyword">with</span><span class="constructor">Month(0)</span>;</span><br><span class="line">		l.<span class="keyword">with</span><span class="constructor">Year(0)</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>将日期转换为字符串</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">l.<span class="keyword">to</span><span class="constructor">String()</span>;</span><br></pre></td></tr></table></figure>
<h1 id="方法的综合应用"><a href="#方法的综合应用" class="headerlink" title="方法的综合应用"></a>方法的综合应用</h1><h2 id="计算每个月的天数通过Calendar运行"><a href="#计算每个月的天数通过Calendar运行" class="headerlink" title="计算每个月的天数通过Calendar运行"></a>计算每个月的天数通过Calendar运行</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">C1</span>.</span></span>add(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">C1</span>.</span></span>add(Calendar.DAY_OF_MONTH, -(当前天数));</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">C1</span>.</span></span>get<span class="constructor">Time()</span>);</span><br></pre></td></tr></table></figure>
<h2 id="LocalDateTime的实际应用"><a href="#LocalDateTime的实际应用" class="headerlink" title="LocalDateTime的实际应用"></a>LocalDateTime的实际应用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalField;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain4</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//		LocalTime</span></span><br><span class="line"><span class="comment">//		LocalDate</span></span><br><span class="line">		<span class="type">LocalDateTime</span> <span class="variable">ldtDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">		System.out.println(ldtDateTime);</span><br><span class="line">		System.out.println(ldtDateTime.getDayOfWeek().getValue()); <span class="comment">// 2</span></span><br><span class="line">		System.out.println(ldtDateTime.getMonth()); <span class="comment">// 10不会走 国外的历法</span></span><br><span class="line">		System.out.println(ldtDateTime.getMonthValue()); </span><br><span class="line">		</span><br><span class="line">		<span class="type">LocalDateTime</span> <span class="variable">ldtDateTime2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2022</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>);</span><br><span class="line">		System.out.println(ldtDateTime2);</span><br><span class="line">		</span><br><span class="line">		<span class="type">DateTimeFormatter</span> <span class="variable">dFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> dFormatter.format(ldtDateTime);</span><br><span class="line">		System.out.println(string);</span><br><span class="line">		</span><br><span class="line">		<span class="type">LocalDateTime</span> <span class="variable">ldtDateTime3</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2022-10-18 15:21:30&quot;</span>, dFormatter);</span><br><span class="line">		System.out.println(ldtDateTime3);</span><br><span class="line">		</span><br><span class="line">		<span class="type">LocalDateTime</span> <span class="variable">ldtDateTime4</span> <span class="operator">=</span> LocalDateTime.from(dFormatter.parse(<span class="string">&quot;2022-10-18 15:21:30&quot;</span>));</span><br><span class="line">		System.out.println(ldtDateTime4);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h2 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h2><p>获取反射</p>
<h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><p>获取hash值，约等于地址</p>
<h2 id="equals-1"><a href="#equals-1" class="headerlink" title="equals"></a>equals</h2><ul>
<li>比较对象的值</li>
<li>&#x3D;&#x3D;对比的是地址</li>
</ul>
<h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>暂时不让用，意义是克隆属性,但是对于引用类型直接克隆是克隆地址，就会造成改一个进而全部都改变，但是有办法，可以进行深克隆进而解决</p>
<ul>
<li>浅克隆：就是只用一次克隆</li>
<li>深克隆：通过多次克隆进而使每个被克隆出来的个体都有不同地址的相同引用类型</li>
</ul>
<h3 id="使用克隆的方法"><a href="#使用克隆的方法" class="headerlink" title="使用克隆的方法"></a>使用克隆的方法</h3><ul>
<li><p>Cloneable:  标记型接口，先实现标记性接口 。 JDK就2个标记接口Serializable和Cloneable</p>
<ul>
<li><ol>
<li>覆盖Object的clone方法;</li>
<li>实现标记Cloneable;</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h2><p>finalize代表GC回调，就是让垃圾回收不要回收他，但是一般不让用，因为会容易造成卡死，或者因为有关联关系的对象而无法进行进行回收</p>
  <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">java</span><br><span class="line">  package lesson12;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestMain6</span> &#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">  		Student student = <span class="keyword">new</span> Student(<span class="string">&quot;jerry&quot;</span>, <span class="number">2</span>);</span><br><span class="line">  		abc();</span><br><span class="line">  		student = <span class="literal">null</span>;</span><br><span class="line">  		System.<span class="keyword">out</span>.println(<span class="number">111</span>);</span><br><span class="line">  		</span><br><span class="line">  		<span class="comment">// 通知jvm在适当时候进行GC</span></span><br><span class="line">  		System.gc();</span><br><span class="line">  		System.<span class="keyword">out</span>.println(<span class="number">222</span>);</span><br><span class="line">  		<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  			</span><br><span class="line">  		&#125;</span><br><span class="line">  		</span><br><span class="line">  	&#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">abc</span>()</span> &#123;</span><br><span class="line">  		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  		Student student = <span class="keyword">new</span> Student(<span class="string">&quot;tom&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  	&#125;</span><br><span class="line">  	</span><br><span class="line">  &#125;</span><br><span class="line">  Student &#123;</span><br><span class="line">  	@Override</span><br><span class="line">  	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span>() throws Throwable</span> &#123;</span><br><span class="line">  		System.<span class="keyword">out</span>.println(<span class="keyword">this</span> + <span class="string">&quot;被回收了&quot;</span>);</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="static-代码块和非static代码块"><a href="#static-代码块和非static代码块" class="headerlink" title="static 代码块和非static代码块"></a>static 代码块和非static代码块</h1><ul>
<li><p>static 静态代码块。  运行时记载类，只调用一次。</p>
<ul>
<li>一次性的操作。例如： 加载资源，加载驱动。</li>
</ul>
</li>
<li><p>非静态代码块，       每次实例化都会调用</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain7</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是静态代码块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是非静态代码块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">TestMain7</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestMain7</span>();</span><br><span class="line">		<span class="type">TestMain7</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestMain7</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式和反射</title>
    <url>/2022/10/19/10-19/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><ul>
<li>一个类只有一个实例</li>
<li>通过private ， 构造方法</li>
<li>static方法</li>
<li>饿汉式</li>
</ul>
<hr>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testmain1</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		A a1 = A.<span class="title function_">getInstance</span>();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> A a1 = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> A <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> a1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>懒汉式</li>
</ul>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testmain1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	<span class="type">A</span> <span class="variable">a1</span> <span class="operator">=</span> A.getInstance();</span><br><span class="line">	<span class="type">B</span> <span class="variable">a2</span> <span class="operator">=</span> B.getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> B ai;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> B <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(ai == <span class="literal">null</span>) &#123;</span><br><span class="line">		ai = <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ai;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>开发的时候懒汉式用的比较多，因为可控</li>
<li>但是一般都在懒汉式哪里添加一个线程锁，为了线程安全，就是synchronized</li>
</ul>
<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><ul>
<li>创建型设计模式</li>
<li>通过方法创建对象</li>
</ul>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul>
<li>静态工厂方法模式，例如单例模式，单例模式是特殊的工厂模式</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Diver</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Car driverCar(<span class="keyword">String</span> s) &#123;</span><br><span class="line">		<span class="keyword">if</span>(s.equalsIgnoreCase(<span class="string">&quot;宝马&quot;</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Car</span>(<span class="string">&quot;宝马&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(s.equalsIgnoreCase(<span class="string">&quot;奔驰&quot;</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Car</span>(<span class="string">&quot;奔驰&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(s.equalsIgnoreCase(<span class="string">&quot;奥迪&quot;</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Car</span>(<span class="string">&quot;奥迪&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><ul>
<li>非静态方法，不同的工厂生成不同的产品</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> factory;</span><br><span class="line">public  <span class="class"><span class="keyword">class</span> <span class="title">bzfactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">public  <span class="type">Car</span> product() &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Car</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzCar</span> <span class="keyword">extends</span> <span class="title">bzfactory</span></span>&#123;</span><br><span class="line">public <span class="type">Car</span> product() &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> bz();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bmwfactory</span> <span class="keyword">extends</span> <span class="title">bzfactory</span></span>&#123;</span><br><span class="line">public <span class="type">Car</span> product() &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> bmw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bz</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bmw</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">audi</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这样可以不用动代码，可以直接加类，进而直接引</li>
<li>而第一种要把别的人已经打包好的解包进而对其代码进行操作</li>
<li>而这种不用，只要新加几个类就可以</li>
</ul>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ul>
<li>工厂的工厂模式</li>
<li>给用户提供一个接口，可以创建多个产品族中的对象</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">	package com.<span class="property">icss</span>.<span class="property">javasechapter</span>.<span class="property">factory</span>;</span><br><span class="line"><span class="comment">//抽象工厂模式</span></span><br><span class="line">	<span class="keyword">interface</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">drive</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">interface</span> <span class="title class_">SportsCar</span> <span class="keyword">extends</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">isConvertible</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">interface</span> <span class="title class_">BussinessCar</span> <span class="keyword">extends</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">isAutoDoor</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 具体产品角色</span></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BenzSprotsCar</span> <span class="keyword">implements</span> <span class="title class_">SportsCar</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;Driving Benz S&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">isConvertible</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BenzBussinessCar</span> <span class="keyword">implements</span> <span class="title class_">BussinessCar</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;Driving Benz B&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">isAutoDoor</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BmwSprotsCar</span> <span class="keyword">implements</span> <span class="title class_">SportsCar</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;Driving Bmw S &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">isConvertible</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BmwBussinessCar</span> <span class="keyword">implements</span> <span class="title class_">BussinessCar</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;Driving Bmw B &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">isAutoDoor</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">interface</span> <span class="title class_">CarFactory</span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="title class_">SportsCar</span> <span class="title function_">getSportsCar</span>();</span><br><span class="line">		<span class="keyword">public</span> <span class="title class_">BussinessCar</span> <span class="title function_">getBussinessCar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BenzCarFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="title class_">SportsCar</span> <span class="title function_">getSportsCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BenzSprotsCar</span>();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">BussinessCar</span> <span class="title function_">getBussinessCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BenzBussinessCar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BmwCarFactroy</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="title class_">SportsCar</span> <span class="title function_">getSportsCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BmwSprotsCar</span>();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="title class_">BussinessCar</span> <span class="title function_">getBussinessCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BmwBussinessCar</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 抽象产品角色，具体产品角色与简单工厂模式类似，只是变得复杂了些，这里略。</span></span><br><span class="line">	<span class="comment">// 抽象工厂角色</span></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">AbstractCarFactory</span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="title class_">CarFactory</span> <span class="title function_">getCarFactory</span>(<span class="params"><span class="built_in">String</span> name</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">&quot;Benz&quot;</span>.<span class="title function_">equals</span>(name))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BenzCarFactory</span>();</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;Bmw&quot;</span>.<span class="title function_">equals</span>(name))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BmwCarFactroy</span>();</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MagnateAbstractFactory</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="title class_">CarFactory</span> factory = <span class="title class_">AbstractCarFactory</span>.<span class="title function_">getCarFactory</span>(<span class="string">&quot;Bmw&quot;</span>);</span><br><span class="line">				<span class="title class_">BussinessCar</span> car = factory.<span class="title function_">getBussinessCar</span>();</span><br><span class="line">				car.<span class="title function_">drive</span>();</span><br><span class="line">				<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(car.<span class="title function_">isAutoDoor</span>());</span><br><span class="line">			&#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul>
<li>订阅与发布</li>
<li>java通过Observable和Observer来实现<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> lesson13 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> aaa =<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">public</span> MyObsever[] <span class="keyword">array</span> = <span class="built_in">new</span> MyObsever[<span class="number">10</span>];</span><br><span class="line">	<span class="type">int</span> <span class="keyword">index</span> = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> addObsever(MyObsever obs) &#123;</span><br><span class="line">			<span class="keyword">array</span>[++<span class="keyword">index</span> &gt; <span class="number">9</span> ? <span class="keyword">index</span> = <span class="number">0</span> : <span class="keyword">index</span>] =obs;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> setAaa(<span class="type">int</span> newvalue) &#123;</span><br><span class="line">		this.aaa = newvalue;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>; i &lt; <span class="keyword">array</span>.length ; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">array</span>[i] == <span class="keyword">null</span>)break;</span><br><span class="line">				<span class="keyword">array</span>[i].<span class="keyword">update</span>(this.aaa , newvalue);</span><br><span class="line">			&#125;</span><br><span class="line">		this.aaa = newvalue;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		MyObsever ob = <span class="built_in">new</span> MyObsever();</span><br><span class="line">		lesson13 data = <span class="built_in">new</span> lesson13();</span><br><span class="line">		data.addObsever(ob);</span><br><span class="line">		data.setAaa(<span class="number">10000</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MyObsever &#123;</span><br><span class="line">	String <span class="type">name</span>;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> <span class="keyword">update</span>(<span class="type">int</span> aaa , <span class="type">int</span> newvalue) &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;观察者&quot; + this.name + &quot;,&quot; + aaa + &quot;变成&quot; + newvalue);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>简单来说就是群发消息，或者说是改变github上的代码的那种改变</li>
</ul>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ul>
<li>代理模式给一个对象提供代理对象，比如代打，比如代刷xxx等<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestMain4</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Target t = <span class="keyword">new</span> Target();</span><br><span class="line">		Proxy proxy = <span class="keyword">new</span> Proxy();</span><br><span class="line">		proxy.target = t;</span><br><span class="line">		proxy.price();</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Target</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">price</span>()</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">&quot;---100--&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Proxy</span> &#123;</span><br><span class="line">	Target target;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">price</span>()</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">			target.price();</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">&quot;50&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>就相当于中间商赚差价，商家会把货发送到代理这里，代理再提高价格发送出去，上面的这个叫静态代理</li>
</ul>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul>
<li>动态代理要用接口来实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson13;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.NonWritableChannelException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain4</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="comment">// 主方法调用代理的 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">DynamicTargetInf</span> <span class="variable">inf</span> <span class="operator">=</span> DynamicProxFactory.getInstance();	</span><br><span class="line">		inf.price();</span><br><span class="line">		<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> inf.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">		System.out.println(r);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DynamicTargetInf</span> <span class="comment">// 要代理的接口 </span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicTarget</span> <span class="keyword">implements</span> <span class="title class_">DynamicTargetInf</span> <span class="comment">// 要代理的目标类，我们接下来要代理这里的方法</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">price</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;--target-100--&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;--target-i + j--&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> i + j;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// invocationHandle   invoke执行 handle句柄    welcome,xxx</span></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">DynamicProxFactory</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> <span class="comment">// 代理控制器，就是代理对象每次要运行方法都要经过他</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="type">DynamicTargetInf</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DynamicTarget</span>();	<span class="comment">// 一般这个地方是要传值进来的，不过这里为了方便，我们就直接赋值了</span></span><br><span class="line">	<span class="comment">// 代理对象每次运行方法的时候会执行</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable <span class="comment">// invoke方法是InvocationHandler接口的方法，这个方法是执行的意思</span></span><br><span class="line">	&#123;</span><br><span class="line">			<span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 定义一个返回值 ，Object类代表可以转化成任何类型</span></span><br><span class="line">		<span class="keyword">try</span> &#123;  <span class="comment">// try catch包裹，一是为了判断是不是出错，二是为了安全性</span></span><br><span class="line">		System.out.println(<span class="string">&quot;-之前-100---&quot;</span>);</span><br><span class="line">		<span class="comment">// 反射。当前方法执行。target对象的当前方法， args方法的参数</span></span><br><span class="line">		result = method.invoke(target, args);</span><br><span class="line">		<span class="comment">//	target.price();</span></span><br><span class="line">		System.out.println(<span class="string">&quot;-之后-50---&quot;</span>);	</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;-异常-10---&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> DynamicTargetInf <span class="title function_">getInstance</span><span class="params">()</span> <span class="comment">// 要代理的目标的接口的实例化方法 ， 通过这个方法会把要代理对象的接口和代理工厂连接到一起</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> java.lang.reflect.Proxy.newProxyInstance(DynamicProxFactory.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;DynamicTargetInf.class&#125;, <span class="keyword">new</span> <span class="title class_">DynamicProxFactory</span>()); <span class="comment">// 这里的三个参数其实是，第一个是类加载器 ， 第二个是目标接口的类数组 ， 第三个是代理工厂的句柄，也就是句柄</span></span><br><span class="line">	<span class="keyword">return</span> (DynamicTargetInf) object;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>对于静态的代理，每一个方法都要写一个代理，于是就很麻烦，可是对于动态的代理，他会自动的把那个方法里的方法都代理一边，只要在主函数里调用就行，</li>
<li>其实基本上思想就是，把要代理的目标变成一个接口，然后通过实例化这个接口，再通过接口的特性，让代理去实现目标的方法</li>
<li>私有的方法无法代理</li>
</ul>
<h1 id="反射，类的类型"><a href="#反射，类的类型" class="headerlink" title="反射，类的类型"></a>反射，类的类型</h1><p>类的类型，就是所有类都可以有的东西比如：属性，构造方法，方法。</p>
<ul>
<li>可以用这些类的类型去创建一个新类</li>
<li>而我们如果想获取这个类的类型，就要用到反射，</li>
<li>他可以获取这个类的类型，就是上面说的属性，构造方法，方法</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> wjw1 &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">	<span class="comment">// 获取反射的三种方式 第一种</span></span><br><span class="line">	<span class="keyword">Class</span> clzz1 = student.<span class="keyword">class</span>;</span><br><span class="line">	<span class="comment">// 第二中 </span></span><br><span class="line">	student student = <span class="keyword">new</span> student();</span><br><span class="line">	<span class="keyword">Class</span> a = student.getClass();</span><br><span class="line">	<span class="comment">// 第三种</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">Class</span> ae = <span class="keyword">Class</span>.forName(<span class="string">&quot;作业.student&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Constructor[] cons = clzz1.getConstructors(); <span class="comment">// 查看构造器</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cons.length; i++) &#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(cons[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	Field[] d = a.getFields(); <span class="comment">// 查看变量，非私有的</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d.length; i++) &#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(d[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	Field[] f = a.getDeclaredFields(); <span class="comment">// 私有变量只能这样查看</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; f.length; i++) &#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(f[i]);</span><br><span class="line">	&#125;</span><br><span class="line">		Constructor Con; <span class="comment">// 获取有特定参数的构造器</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Con = clzz1.getConstructor(<span class="keyword">new</span> <span class="keyword">Class</span>[] &#123;String.<span class="keyword">class</span> , <span class="keyword">int</span>.<span class="keyword">class</span>&#125;);<span class="comment">//里面放那个类型的对应的.class</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (NoSuchMethodException | SecurityException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">try</span> &#123; <span class="comment">// 通过反射进行实例化，证明了，实例化不一定非要用new</span></span><br><span class="line">		Object object = Con.newInstance(<span class="keyword">new</span> Object[] &#123;<span class="number">343</span>,<span class="string">&quot;sdajkdha&quot;</span>&#125;);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | IllegalArgumentException</span><br><span class="line">			| InvocationTargetException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面，是我们要运行的方法里如何写</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line"><span class="keyword">private</span> <span class="title class_">String</span> num;</span><br><span class="line"><span class="keyword">private</span> <span class="title class_">String</span> sex;</span><br><span class="line"><span class="keyword">public</span> int age;</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setName</span>(<span class="params"><span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setNum</span>(<span class="params"><span class="built_in">String</span> num</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getSex</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setSex</span>(<span class="params"><span class="built_in">String</span> sex</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> int <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setAge</span>(<span class="params">int age</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">student</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">super</span>();</span><br><span class="line">	<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">student</span>(<span class="params"> int x , <span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = x;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line">clzz1.<span class="title function_">getMethods</span>() <span class="comment">// 获取里面所有可以访问的方法</span></span><br><span class="line">clzz1.<span class="title function_">getMethod</span>(name, parameterTypes) <span class="comment">// 获取特定的可以访问的方法</span></span><br><span class="line">clzz1.<span class="title function_">getDeclaredMethod</span>(name, parameterTypes); <span class="comment">// 查找特定参数的自己定义的方法</span></span><br><span class="line">clzz1.<span class="title function_">getDeclaredMethods</span>(); <span class="comment">// 查询所有自己定义的方法</span></span><br><span class="line"><span class="title class_">Method</span> m = clzz1.<span class="title function_">getDeclaredMethod</span>(name, parameterTypes);</span><br><span class="line"><span class="title class_">Object</span> r = m.<span class="title function_">invoke</span>(obj, args); <span class="comment">// 执行前面一个参数里的方法m方法 ， 后面的一个是这个方法的参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="title class_">Field</span> f1 =	clzz1.<span class="title function_">getField</span>(<span class="string">&quot;name&quot;</span>); <span class="comment">// 获取单独的与里面字符串匹配的变量 ， 如果是私有的要用declaer方法，比如</span></span><br><span class="line"> <span class="title class_">Field</span> f2 = clzz1.<span class="title function_">getDeclaredField</span>(<span class="string">&quot;name&quot;</span>); <span class="comment">// 可以获取私有的变量</span></span><br><span class="line"> f1.<span class="title function_">setAccessible</span>(<span class="literal">true</span>); <span class="comment">// 修改访问权限修饰符，true代表public false代表private</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>下面只是个普通的方法</li>
<li>这是两个class，要注意，因为都是public，所以必须单独建立两个class，才可以</li>
</ul>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ul>
<li><p>用@interface</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"><span class="meta">@Target</span> (value = &#123;ElementType.CONSTRUCTOR,ElementType.FIELD,ElementType.METHOD,ElementType.TYPE&#125;) <span class="comment">// target是代表要修饰的目标种类，比如方法，构造器，属性等</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.SOURCE)</span> <span class="comment">// 代表这个存活的位置，一般我们用不到，这个是存活于源码里，编译之后就无了</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.CLASS)</span> <span class="comment">// 这个是存活与class中</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span> <span class="comment">// 这个是存活在运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> lesson14 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>上面的@Retention只能用一个，而且只能选择一个</p>
</li>
<li><p>而后再有一个类</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"><span class="meta">@lesson14</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">try1</span> &#123;</span><br><span class="line">	<span class="meta">@lesson14</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>上面是一般用法。</li>
<li>如果在接口上面增加@Target，就是代表让你可以修饰的东西</li>
<li>@Retention 代表设置其存活的地方</li>
</ul>
<h2 id="value"><a href="#value" class="headerlink" title="value"></a>value</h2><p>可以在接口内写value，如果加上了value则在引用的时候要在括号内写上内容<br>如下：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">lesson14</span> </span>&#123;</span><br><span class="line"><span class="keyword">String</span> value()</span><br><span class="line"><span class="keyword">default</span> <span class="string">&quot;默认信息&quot;</span>; <span class="comment">// 代表默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@lesson14</span>(<span class="string">&quot;klsdajhal&quot;</span>)</span><br><span class="line">或者<span class="variable">@lesson14</span>(value = <span class="string">&quot;sadajd&quot;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>io流</title>
    <url>/2022/10/20/10-20/</url>
    <content><![CDATA[<h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><ul>
<li>字节流的结尾一般都是InputStream ， OutputStream</li>
<li>是个抽象类</li>
<li>可以自动关闭</li>
<li>顶层类，上面就是Object</li>
<li>这个东西是要有参照物的</li>
</ul>
<h2 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sd3333sdfse</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		OutputStream os1;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			os1 = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>( <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\a.txt&quot;</span>), <span class="literal">false</span>); <span class="comment">// 这个false代表是覆盖源文件，如果是true就是把字符串加入</span></span><br><span class="line">			<span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello word&quot;</span>;</span><br><span class="line">			os1.write(s.getBytes());</span><br><span class="line">			os1.flush();  <span class="comment">// 落盘到磁盘上</span></span><br><span class="line">			os1.close(); <span class="comment">// 关闭文件输出流</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e1) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">read</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line"><span class="comment">//			while(is.available() != 0) &#123;</span></span><br><span class="line"><span class="comment">//				System.out.println((char)is.read()); // 默认一次只读一个字符</span></span><br><span class="line"><span class="comment">//			&#125;</span></span><br><span class="line">		</span><br><span class="line">		<span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>]; <span class="comment">// 通过设置缓冲区进行扩展一次可读的字符数量，如果是字符型，那这个byte要变char</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 设置个长度</span></span><br><span class="line">		<span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>) <span class="comment">// 判断我是不是超出缓冲区的限定，如果超出，就只读取超出的部分</span></span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buffer , <span class="number">0</span> , len)); </span><br><span class="line">		&#125;</span><br><span class="line">		is.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li>定义：File d &#x3D; new File(“XXxxx”，”name”); &#x2F;&#x2F; 这里XXxxx是文件目录 , 第二个是文件名字</li>
<li>文件或者目录</li>
</ul>
<h2 id="exist（）"><a href="#exist（）" class="headerlink" title="exist（）"></a>exist（）</h2><ul>
<li>文件是有大小的，目录是无大小</li>
<li>判断文件&#x2F;目录是不是存在</li>
</ul>
<h2 id="isFile"><a href="#isFile" class="headerlink" title="isFile"></a>isFile</h2><ul>
<li>代表判断是不是文件</li>
</ul>
<h2 id="isDirectory"><a href="#isDirectory" class="headerlink" title="isDirectory"></a>isDirectory</h2><ul>
<li>代表是不是文件夹</li>
</ul>
<h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><ul>
<li>代表查看其字节的长度，大小，但是文件有大小，目录无大小</li>
</ul>
<h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><ul>
<li>代表删除文件，注意这里删除的文件不是送进回收站里的，如果要删除目录，要先把里面的文件清空</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> file &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">	// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line"></span><br><span class="line">	File m = <span class="built_in">new</span> File(&quot;D:\\&quot; , &quot;a.txt&quot;);</span><br><span class="line">	File k = <span class="built_in">new</span> File(&quot;D//&quot;);</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println(m.<span class="keyword">exists</span>());</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println(k.<span class="keyword">exists</span>());</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println(k.isFile());</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println(m.isDirectory());</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println(k.length());</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println(k.<span class="keyword">delete</span>());</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h2><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">public static void SHANCHU(File k) &#123;</span><br><span class="line">	File[] ds <span class="operator">=</span>	k.listFiles()<span class="comment">; </span></span><br><span class="line">	for (int i <span class="operator">=</span> <span class="number">0</span><span class="comment">; i &lt; ds.length ; i++ ) &#123;</span></span><br><span class="line">		File[] h <span class="operator">=</span> ds[i].listFiles()<span class="comment">;</span></span><br><span class="line">		if(h <span class="operator">=</span><span class="operator">=</span> null) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;这个是个文件&quot;</span>)<span class="comment">;</span></span><br><span class="line">			ds[i].delete()<span class="comment">;</span></span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			k.delete()<span class="comment">;</span></span><br><span class="line">			SHANCHU(ds[i])<span class="comment">;</span></span><br><span class="line">				&#125;</span><br><span class="line">		k.delete()<span class="comment">;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="makedir"><a href="#makedir" class="headerlink" title="makedir"></a>makedir</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> adsgqjd &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;D:/a/abc.txt&quot;</span>);</span><br><span class="line">	System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.exists());</span><br><span class="line">	System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.mkdir());</span><br><span class="line">	<span class="keyword">File</span> file2 =<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;D:/a/c/v/bv/nb&quot;</span>);</span><br><span class="line">	System.out.<span class="keyword">println</span>(file2.mkdirs());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>我们通过mkdirs可以直接深度创建</li>
<li>但是如果没有父目录，一般的文件就无法创建</li>
</ul>
<h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> File getCopy(File f1) &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="keyword">String</span> sufString = f1.getName().substring(f1.getName().lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">	<span class="keyword">String</span> qi = f1.getName().substring(<span class="number">0</span>, f1.getName().lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">	<span class="keyword">String</span> use = qi + <span class="string">&quot;-副本&quot;</span> + sufString;</span><br><span class="line">	File <span class="keyword">new</span><span class="type">f</span> = <span class="keyword">new</span> <span class="type">File</span>(f1.getParent() , use);</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">new</span><span class="type">f</span>.exists()) &#123;</span><br><span class="line">	<span class="keyword">return</span>	getCopy(<span class="keyword">new</span><span class="type">f</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span><span class="type">f</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>字符流</title>
    <url>/2022/10/21/10-21/</url>
    <content><![CDATA[<h1 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h1><ul>
<li>Write是抽象方法</li>
<li>其里面定义了传输大小（在源码中）</li>
<li>在write里<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">static</span> <span class="keyword">final</span> <span class="type">int</span> WRITE_BUFFER_SIZE = <span class="number">1024</span>;</span><br></pre></td></tr></table></figure></li>
<li>所谓的字符流只是把字节流包装起来，证据在源码里<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line">	<span class="keyword">import</span> java.io.IOException;</span><br><span class="line">	<span class="keyword">import</span> java.io.Writer;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">char</span>流 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">Writer</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line">		w.write(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">		w.append(<span class="string">&quot;hello Bgido&quot;</span>);</span><br><span class="line">		w.write(<span class="string">&quot;hello java&quot;</span>.toCharArray());</span><br><span class="line">		w.flush();</span><br><span class="line">		w.close();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li>注意这里的write是直接在文件里重写数据，而append是增加数据，因为write底层调用的是write方法</li>
</ul>
<h1 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h1><ul>
<li>出现的原因，是因为字节流可能存不住，所以才出现，会造成乱码</li>
</ul>
<h2 id="字符分类以及编码格式"><a href="#字符分类以及编码格式" class="headerlink" title="字符分类以及编码格式"></a>字符分类以及编码格式</h2><ul>
<li><p>一般在英文状态下一个字母或字符占用一个字节，一个汉字用两个字节表示。</p>
</li>
<li><p>ASCII 码中，一个英文字母(不分大小写)为一个字节，一个中文汉字为两个字节。</p>
</li>
<li><p>UTF-8 编码中，一个英文字为一个字节，一个中文为三个字节。</p>
</li>
<li><p>Unicode 编码中，一个英文为一个字节，一个中文为两个字节。</p>
</li>
<li><p>符号：英文标点为一个字节，中文标点为两个字节。例如：英文句号 . 占1个字节的大小，中文句号 。占2个字节的大小。</p>
</li>
<li><p>UTF-16 编码中，一个英文字母字符或一个汉字字符存储都需要 2 个字节(Unicode 扩展区的一些汉字存储需要 4 个字节)。</p>
</li>
<li><p>UTF-32 编码中，世界上任何字符的存储都需要 4 个字节。</p>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">inputchar1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line">		reader.close();</span><br><span class="line">		<span class="comment">// 这个也可以读取文件</span></span><br><span class="line">		<span class="type">Reader</span> <span class="variable">reader1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/a.txt&quot;</span>) , <span class="string">&quot;UTF-8&quot;</span>); <span class="comment">// 古老的方式，不过可以直接改代码的编码格式</span></span><br><span class="line">		<span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>((len = reader1.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buffer , <span class="number">0</span> ,len));</span><br><span class="line">		&#125;</span><br><span class="line">		reader1.close();</span><br><span class="line">		<span class="keyword">while</span>((len = reader.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len));</span><br><span class="line">		&#125;</span><br><span class="line">		reader.close();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="具体的流"><a href="#具体的流" class="headerlink" title="具体的流"></a>具体的流</h1><h2 id="buffered系类"><a href="#buffered系类" class="headerlink" title="buffered系类"></a>buffered系类</h2><ul>
<li>代表缓冲区系类</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sdahasdk</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">BufferedInputStream</span> <span class="variable">us</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/a.txt&quot;</span>)); <span class="comment">// 要自己定义缓冲区</span></span><br><span class="line">		us.skip(<span class="number">1</span>);</span><br><span class="line">		<span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>((len = us.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println( <span class="keyword">new</span> <span class="title class_">String</span>(buffer , <span class="number">0</span> ,len ));</span><br><span class="line">		&#125;</span><br><span class="line">		us.close();</span><br><span class="line">		</span><br><span class="line">		<span class="type">BufferedReader</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:/a.txt&quot;</span>)); <span class="comment">// 里面有设置默认的缓冲区在源码里可以点进去查看</span></span><br><span class="line">		<span class="keyword">while</span>(r.ready()) <span class="comment">// ready是可读性，可读就true，不可读就fasle</span></span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(	r.readLine());</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>只有顶层类的方法是没有线程锁的</li>
<li>同样也有writer的方法<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">BufferedWriter wwe = <span class="keyword">new</span> <span class="type">BufferedWriter</span>( <span class="keyword">new</span> <span class="type">FileWriter</span>(<span class="string">&quot;D:/a.txt&quot;</span>));</span><br></pre></td></tr></table></figure></li>
<li>然后通过wwe.xxx访问方法</li>
</ul>
<h1 id="InputStreamReader-x2F-Writer"><a href="#InputStreamReader-x2F-Writer" class="headerlink" title="InputStreamReader&#x2F;Writer"></a>InputStreamReader&#x2F;Writer</h1><ul>
<li>比较古老</li>
<li>因为可以设置编码格式</li>
<li>在构造方法里</li>
<li>和上面的FileInputStream一样</li>
</ul>
<h1 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">io</span>.<span class="property">Serializable</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">stu</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">super</span>();</span><br><span class="line">	<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params">int x , <span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = x;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line"><span class="keyword">private</span> transient int age;</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setName</span>(<span class="params"><span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> int <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setAge</span>(<span class="params">int age</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;stu [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这个是个学生类，代表我们要实例化的类，要加个可序列化的标记性接口</li>
<li>transient是不参与序列化的</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lesson15</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">ObjectOutputStream</span> <span class="variable">oo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:/student.dat&quot;</span>));</span><br><span class="line">			<span class="type">stu</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">stu</span>(<span class="number">15</span> , <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">			oo.writeObject(s);</span><br><span class="line">			oo.flush();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lesson15</span> &#123;	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		</span><br><span class="line">		<span class="type">ObjectInputStream</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/student.dat&quot;</span>));</span><br><span class="line">		<span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> d.readObject();</span><br><span class="line">		System.out.println(o);</span><br><span class="line">		d.close();</span><br><span class="line">		</span><br><span class="line">	&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">scanner</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>( <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/a.txt&quot;</span>) , <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">			System.out.println(scanner.nextLine());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Channnel流"><a href="#Channnel流" class="headerlink" title="Channnel流"></a>Channnel流</h1><ul>
<li>其是新io包里的</li>
<li>是nio里的，用的是堆外内存</li>
<li>就是jvm内存，所以效率会比在堆里的数组缓冲区效率更高</li>
<li>追主要的是对接，管道分为输入管道和输出管道</li>
<li>当他们对接上就可以实现复制等操作了</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Channel</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line">	FileInputStream ii;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		ii = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">		<span class="type">FileChannel</span> <span class="variable">cha</span> <span class="operator">=</span> ii.getChannel();</span><br><span class="line">		<span class="type">FileChannel</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:/a1.txt&quot;</span>).getChannel();		</span><br><span class="line">		cha.transferTo(<span class="number">0</span>, file.length(), out); <span class="comment">// 这个输入管道的对接口 三个参数 ，第一个是开始复制的起始下标，第二个是文件长度 ，第三个是输出管道</span></span><br><span class="line">		out.transferFrom(cha, <span class="number">0</span>, file.length()); <span class="comment">// 这个是输出管道的接口 三个参数 ，第一个是输入管道，第二个是起始下标 ，第三个是文件长度</span></span><br><span class="line">	&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>两种管道对接的方式造成的结果是一样的，都是复制文件，但是如果这两个代码要制作的文件存在，则进行覆盖</li>
</ul>
<h1 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h1><ul>
<li>解决字符串的加法的问题，</li>
<li>字符串的+是方法的重载，每次都会返回一个对象</li>
<li>而下面两个则是用堆运存运算省区了一个变量</li>
<li>而builder无线程锁，所以比buffer要快<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package 项目实训;</span><br><span class="line">public <span class="keyword">class</span> sr &#123;</span><br><span class="line">public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">	String s = <span class="string">&quot;shdghgsg&quot;</span>;</span><br><span class="line">	long start = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">	 <span class="comment">// 拼接太费事</span></span><br><span class="line">	String h = s + <span class="string">&quot;shak&quot;</span>;</span><br><span class="line">	long <span class="keyword">end</span> = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">	StringBuffer sb =<span class="keyword">new</span> <span class="constructor">StringBuffer()</span>;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="keyword">end</span> - start);</span><br><span class="line">	sb.append(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">	long start1 = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">	 <span class="comment">// 拼接太费事</span></span><br><span class="line">	sb.append(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">	long end1 = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(end1 - start1);</span><br><span class="line">	 <span class="comment">// 更快的</span></span><br><span class="line">	StringBuilder sd = <span class="keyword">new</span> <span class="constructor">StringBuilder()</span>;</span><br><span class="line">	long start2 = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">	 <span class="comment">// 拼接太费事</span></span><br><span class="line">	sd.append(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">	long end2 = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(end2 - start2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="比较快的排序方式"><a href="#比较快的排序方式" class="headerlink" title="比较快的排序方式"></a>比较快的排序方式</h2><ul>
<li>Arrays.sort(要排序的数组)默认是正序</li>
<li>也可以变成倒序，但是要是泛型数组就可以</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line">Arrays.<span class="keyword">sort</span>(a);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">	System.out.<span class="keyword">println</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ul>
<li>进程是程序对应的资源</li>
<li>线程是cpu运行的最小单位</li>
<li>线程是随机切换，一个程序中</li>
</ul>
<h2 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xiancheng</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	System.out.println(Thread.currentThread());</span><br><span class="line"></span><br><span class="line">	<span class="type">Task1</span> <span class="variable">task1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task1</span>();</span><br><span class="line">	<span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task1);</span><br><span class="line">	t1.setName(<span class="string">&quot;第一个线程&quot;</span>); <span class="comment">// 线程的名字</span></span><br><span class="line">	t1.start(); <span class="comment">// 线程开始</span></span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">Thread</span>(task1).start(); <span class="comment">// 这种方式也可以进行线程启动</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> <span class="comment">// 任务</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">101</span>; i++) &#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(Thread.currentThread() + <span class="string">&quot;@&quot;</span> +i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>在做一件事的时候还是单线程比较快，多线程可以一起干很多事情，所以就相当于一个人和多个人的差距</li>
<li>意思就是单线程不一定比多线程慢，因为多线程存在上下文切换</li>
<li>首先分配cpu资源的单位是进程。一个进程所获得到的cpu资源是一定的。程序在执行的过程中消耗的是cpu，比如一个单核cpu，多个线程同时执行工作时，需要不断切换执行(上下文切换)，单个线程时间耗费更多了，而单线程只是一个线程跑。</li>
<li>多线程的总体执行时间和单线程是一样的，但是多线程中单个线程的执行时间是单线程的多倍。<br>多线程提高的是并发数量，比如现在有一个4核cpu的服务器，同一时间可执行4个线程，这样处理线程任务的速度比较快。但是多出来的线程，5个，6个，7个，多出的线程还是要等待。</li>
</ul>
<h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。</p>
<p>概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换会这个任务时，可以再加载这个任务的状态。任务从保存到再加载的过程就是一次上下文切换。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以说其实多线程不一定能够比单线程快是因为上下文切换，以及线程等待的问题</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>线程</title>
    <url>/2022/10/24/10-24/</url>
    <content><![CDATA[<h1 id="线程的概念以及原理"><a href="#线程的概念以及原理" class="headerlink" title="线程的概念以及原理"></a>线程的概念以及原理</h1><h2 id="操作系统中线程和进程的概念"><a href="#操作系统中线程和进程的概念" class="headerlink" title="操作系统中线程和进程的概念"></a>操作系统中线程和进程的概念</h2><ul>
<li>进程是指一个内存中运行的应用程序，每个进程都有自己的独立空间，一个进程中可以启动多个线程，比如在windows里一个运行的exe就是一个进程</li>
<li>线程是指进程中的一个执行流程，一个进程中可以用运行多个线程。线程总是属于某个进程的，进程中多个线程共享进程的内存</li>
</ul>
<h2 id="java中的线程"><a href="#java中的线程" class="headerlink" title="java中的线程"></a>java中的线程</h2><ul>
<li>在java中，线程是指两件不同的事</li>
<li>java.lang.Thread类的一个实例</li>
<li>线程的执行</li>
<li>使用java.lang.Thread类或者java.lang.Runnable接口编写代码来定义实例化，和启动新线程。</li>
<li>一个Thread类实例只是一个对象，像java和其他对象一样，有变量和方法，生死于堆上</li>
<li>在java里每个线程都拥有一个调用栈，即使不在程序中创建任何的新线程，线程也会在后台运行着</li>
<li>一个java应用总是从main方法开始，main方法运行在一个线程里，他被称为主线程</li>
<li>一旦创建一个线程，就会产生一个新的栈调用。</li>
<li>线程总体分为两类，用户线程和守护线程</li>
<li>当所有用户距线程执行完毕，jvm自己关闭，守护线程一般是由操作系统或者或者用户自己创建</li>
</ul>
<h1 id="创建与启动"><a href="#创建与启动" class="headerlink" title="创建与启动"></a>创建与启动</h1><ul>
<li><p>扩展java.lang.Thread</p>
</li>
<li><p>这个类中有个run方法，应该注意其用法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果该线程是使用独立的Runnable运行对象构造的，则调用该Runnable对象的run方法，要不然，该方法不执行任何操作并返回</p>
</li>
<li><p>Thread的子类应该重写这个方法，因为其底层也是继承的Runnable接口</p>
</li>
<li><p>run操作里是他会执行的事情</p>
</li>
</ul>
<h2 id="实例化线程"><a href="#实例化线程" class="headerlink" title="实例化线程"></a>实例化线程</h2><ul>
<li>如果是用Thread，则直接new就行</li>
<li>如果是实现了，java.lang.Runnable接口的类，则用Thread的构造方法:</li>
<li><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="constructor">Thread(Runnable <span class="params">target</span>)</span></span><br><span class="line"><span class="constructor">Thread(Runnable <span class="params">target</span> , String <span class="params">name</span>)</span></span><br><span class="line"><span class="constructor">Thread(ThreadGroup <span class="params">group</span>, Runnable <span class="params">target</span>)</span></span><br><span class="line"><span class="constructor">Thread(ThreadGroup <span class="params">group</span>, Runnable <span class="params">target</span>, String <span class="params">name</span>)</span></span><br><span class="line"><span class="constructor">Thread(ThreadGroup <span class="params">group</span>, Runnable <span class="params">target</span>, String <span class="params">name</span>, <span class="params">long</span> <span class="params">stackSize</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h2><ul>
<li>在线程的Thread对象上调用Start（）方法而不是用run或者别的</li>
<li>在调用start之前线程处于新状态中，新状态指有一个Thread对象，但是还没有一个真正的线程</li>
<li>调用了之后发生了一系列复杂的事情</li>
<li>尝试启动新的线程（具有新的调用栈）</li>
<li>该线程从新状态转移到可运行状态</li>
<li>当线程获得执行机会，就会调用run</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实现Runnable接口的类</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> leizhimin 2008-9-13 18:12:10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span><span class="keyword">class</span> <span class="title class_">DoSomethingimplements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">DoSomething</span>(<span class="title class_">String</span> name) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoid <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (long k = <span class="number">0</span>; k &lt; <span class="number">100000000</span>; k++) ;</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(name + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试Runnable类实现的多线程程序</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> leizhimin 2008-9-13 18:15:02</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span><span class="keyword">class</span> <span class="title class_">TestRunnable</span> &#123;</span><br><span class="line">    publicstaticvoid <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">DoSomething</span> ds1 = <span class="keyword">new</span> <span class="title class_">DoSomething</span>(<span class="string">&quot;阿三&quot;</span>);</span><br><span class="line">        <span class="title class_">DoSomething</span> ds2 = <span class="keyword">new</span> <span class="title class_">DoSomething</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Thread</span> t1 = <span class="keyword">new</span> <span class="title class_">Thread</span>(ds1);</span><br><span class="line">        <span class="title class_">Thread</span> t2 = <span class="keyword">new</span> <span class="title class_">Thread</span>(ds2);</span><br><span class="line"></span><br><span class="line">        t1.<span class="title function_">start</span>();</span><br><span class="line">        t2.<span class="title function_">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="扩展Thread类实现多线程的例子"><a href="#扩展Thread类实现多线程的例子" class="headerlink" title="扩展Thread类实现多线程的例子"></a>扩展Thread类实现多线程的例子</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试扩展Thread类实现的多线程程序</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> leizhimin 2008-9-13 18:22:13</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span><span class="keyword">class</span> <span class="title class_">TestThreadextends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">TestThread</span>(<span class="title class_">String</span> name) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoid <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(long k= <span class="number">0</span>; k &lt;<span class="number">100000000</span>;k++);</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="variable language_">this</span>.<span class="title function_">getName</span>()+<span class="string">&quot; :&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicstaticvoid <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">Thread</span> t1 = <span class="keyword">new</span> <span class="title class_">TestThread</span>(<span class="string">&quot;阿三&quot;</span>);</span><br><span class="line">        <span class="title class_">Thread</span> t2 = <span class="keyword">new</span> <span class="title class_">TestThread</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        t1.<span class="title function_">start</span>();</span><br><span class="line">        t2.<span class="title function_">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul>
<li>线程的名字，一个运行中的线程总是有名字的，名字有两个来源，第一是自己，第二是虚拟机</li>
<li>而且主线程的名字总是mian，非主线程的名字不确定</li>
<li>线程都可以设置名字，主线程的也不例外</li>
<li>线程的调用不一定是顺序的他们是随机的</li>
<li>线程一旦启动，他就不可能重新启动</li>
<li>线程的调度是jvm的一部分，在cpu的机器上，实际上一次只能运行一个线程，一次只有一个线程栈执行，jvm线程调度程序决定实际运行的哪个处于可运行的状态</li>
<li>尽管我们无法控制线程调度的程序，但是可以通过别的方式来影响线程调度的方式</li>
</ul>
<h1 id="线程的转换"><a href="#线程的转换" class="headerlink" title="线程的转换"></a>线程的转换</h1><ul>
<li>线程的状态转换是线程控制的基础。线程状态总的可分为五大状态：分别是生、死、可运行、运行、等待&#x2F;阻塞。</li>
<li>可运行状态：当线程有资格运行，但调度程序还没有把它选定为运行线程时线程所处的状态。当start()方法调用时，线程首先进入可运行状态。在线程运行之后或者从阻塞、等待或睡眠状态回来后，也返回到可运行状态。</li>
<li>运行状态：线程调度程序从可运行池中选择一个线程作为当前线程时线程所处的状态。这也是线程进入运行状态的唯一一种方式</li>
<li>等待&#x2F;阻塞&#x2F;睡眠状态：这是线程有资格运行时它所处的状态。实际上这个三状态组合为一种，其共同点是：线程仍旧是活的，但是当前没有条件运行。换句话说，它是可运行的，但是如果某件事件出现，他可能返回到可运行状态。</li>
<li>死亡态：当线程的run()方法完成时就认为它死去。这个线程对象也许是活的，但是，它已经不是一个单独执行的线程。线程一旦死亡，就不能复生。如果在一个死去的线程上调用start()方法，会抛出java.lang.IllegalThreadStateException异常。</li>
</ul>
<h2 id="阻止线程的执行"><a href="#阻止线程的执行" class="headerlink" title="阻止线程的执行"></a>阻止线程的执行</h2><ul>
<li>对于线程的阻止，考虑一下三个方面，不考虑IO阻塞的情况：</li>
<li>睡眠</li>
<li>等待</li>
<li>睡眠：Thread.sleep(long millis)和Thread.sleep(long millis, int nanos)静态方法强制当前正在执行的线程休眠（暂停执行），以“减慢线程”。当线程睡眠时，它入睡在某个地方，在苏醒之前不会返回到可运行状态。当睡眠时间到期，则返回到可运行状态。</li>
<li>线程睡眠的原因：线程执行太快，或者需要强制进入下一轮，因为Java规范不保证合理的轮换。</li>
<li>睡眠的实现：调用静态方法。<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">123</span>);</span><br><span class="line">      &#125; catch (InterruptedException e) &#123;</span><br><span class="line">          e.print<span class="constructor">StackTrace()</span>; </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li>
<li>睡眠的位置：为了让其他线程有机会执行，可以将Thread.sleep()的调用放线程run()之内。这样才能保证该线程执行过程中会睡眠。</li>
<li>线程睡眠是帮助所有线程获得运行机会的最好方法。</li>
<li>线程睡眠到期自动苏醒，并返回到可运行状态，不是运行状态。sleep()中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就开始执行。</li>
<li>sleep()是静态方法，只能控制当前正在运行的线程。</li>
</ul>
<h2 id="线程的优先级和线程让步yield"><a href="#线程的优先级和线程让步yield" class="headerlink" title="线程的优先级和线程让步yield()"></a>线程的优先级和线程让步yield()</h2><ul>
<li>线程的让步是通过Thread.yield()来实现的。yield()方法的作用是：暂停当前正在执行的线程对象，并执行其他线程。</li>
<li>线程总是存在优先级，优先级范围在1~10之间。JVM线程调度程序是基于优先级的抢先调度机制。在大多数情况下，当前运行的线程优先级将大于或等于线程池中任何线程的优先级。但这仅仅是大多数情况。</li>
<li>注意：当设计多线程应用程序的时候，一定不要依赖于线程的优先级。因为线程调度优先级操作是没有保障的，只能把线程优先级作用作为一种提高程序效率的方法，但是要保证程序不依赖这种操作。</li>
<li>当线程池中线程都具有相同的优先级，调度程序的JVM实现自由选择它喜欢的线程。这时候调度程序的操作有两种可能：一是选择一个线程运行，直到它阻塞或者运行完成为止。二是时间分片，为池内的每个线程提供均等的运行机会。<br>-设置线程的优先级：线程默认的优先级是创建它的执行线程的优先级。可以通过setPriority(int newPriority)更改线程的优先级。例如：<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">Thread t <span class="operator">=</span> new MyThread()<span class="comment">;</span></span><br><span class="line">       t.setPriority(<span class="number">8</span>)<span class="comment">;</span></span><br><span class="line">       t.start()<span class="comment">;</span></span><br></pre></td></tr></table></figure></li>
<li>线程优先级为1<del>10之间的正整数，JVM从不会改变一个线程的优先级。然而，1</del>10之间的值是没有保证的。一些JVM可能不能识别10个不同的值，而将这些优先级进行每两个或多个合并，变成少于10个的优先级，则两个或多个优先级的线程可能被映射为一个优先级。</li>
<li>线程默认优先级是5，Thread类中有三个常量，定义线程优先级范围：</li>
<li>static int MAX_PRIORITY线程可以具有的最高优先级。</li>
<li>static int MIN_PRIORITY线程可以具有的最低优先级。</li>
<li>static int NORM_PRIORITY分配给线程的默认优先级。</li>
</ul>
<h2 id="Thread-yield-方法"><a href="#Thread-yield-方法" class="headerlink" title="Thread.yield()方法"></a>Thread.yield()方法</h2><ul>
<li>Thread.yield()方法作用是：暂停当前正在执行的线程对象，并执行其他线程。</li>
<li>yield()应该做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。</li>
<li>结论：yield()从未导致线程转到等待&#x2F;睡眠&#x2F;阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。</li>
</ul>
<h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><ul>
<li><p>Thread的非静态方法join()让一个线程B“加入”到另外一个线程A的尾部。在A执行完毕之前，B不能工作</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">Thread t <span class="operator">=</span> new MyThread()<span class="comment">;</span></span><br><span class="line">      t.start()<span class="comment">;</span></span><br><span class="line">      t.join()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>另外，join()方法还有带超时限制的重载版本。例如t.join(5000);则让线程等待5000毫秒，如果超过这个时间，则停止等待，变为可运行状态。</p>
</li>
<li><p>线程的加入join()对线程栈导致的结果是线程栈发生了变化，当然这些变化都是瞬时的。</p>
</li>
</ul>
<h2 id="Object类的wait方法"><a href="#Object类的wait方法" class="headerlink" title="Object类的wait方法"></a>Object类的wait方法</h2><ul>
<li>让当前线程进入等待池</li>
<li>通过Object类的notify方法通知线程池随机让一条回归</li>
<li>而notifyall 是让所有回归</li>
</ul>
<h1 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h1><ul>
<li>synchronized</li>
<li>是一种对象锁，可重入，不可中断，实际上就是一个字节码</li>
<li>基于jvm的监控机制</li>
<li>栈帧线程独享，不用锁，堆是内存共享的需要线程考虑，方法区也是要线程共享<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">sdhakdh</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="string">&quot;线程1&quot;</span>) &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">					System.<span class="keyword">out</span>.println(Thread.currentThread().getName().toString() + <span class="string">&quot;@&quot;</span> + flag++);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="string">&quot;线程2&quot;</span>) &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">					System.<span class="keyword">out</span>.println(Thread.currentThread().getName().toString() + <span class="string">&quot;@&quot;</span> + flag++);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>这样的会出现线程抢占的问题，容易让一个线程卡住，然后另外一个框框执行</li>
<li>结果就是无序的</li>
<li>如果加上synchronized则不会出现这个请况<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">sdhakdh</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="string">&quot;线程1&quot;</span>) &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">				synchronized (<span class="string">&quot;hello&quot;</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">						System.<span class="keyword">out</span>.println(Thread.currentThread().getName().toString() + <span class="string">&quot;@&quot;</span> + flag++);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="string">&quot;线程2&quot;</span>) &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">				synchronized (<span class="string">&quot;hello&quot;</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">						System.<span class="keyword">out</span>.println(Thread.currentThread().getName().toString() + <span class="string">&quot;@&quot;</span> + flag++);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>这样就不会发生问题了</li>
<li>就会出现顺序的，因为线程回退的时候，下次会继续线程锁锁住的位置进行执行，同时不让同一个锁内的其他线程执行，直到被所著的线程回来</li>
<li>多线程不加锁不安全，可是慢，如果能解决这个问题，就厉害了</li>
<li>如果锁不是同一个名字则无用</li>
<li>下面的例子,是生产者消费者的例子</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> repo &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">count</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> add() &#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">count</span> &gt;= <span class="number">100</span>) &#123; <span class="comment">// 设置上限</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		notifyAll(); <span class="comment">// 把减少线程从等待池放出来</span></span><br><span class="line">		<span class="keyword">count</span>++;</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="keyword">count</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> substrct() &#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">count</span> &lt;= <span class="number">0</span>) &#123; <span class="comment">// 设置下限</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		notifyAll(); <span class="comment">// 把add线程从等待池放出来</span></span><br><span class="line">		<span class="keyword">count</span>--;</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="keyword">count</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">product</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		<span class="type">repo</span> <span class="variable">r</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">repo</span>();</span><br><span class="line">		<span class="type">Prou</span> <span class="variable">P</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prou</span>();</span><br><span class="line">		P.re = r;</span><br><span class="line">		<span class="type">Consumer</span> <span class="variable">C</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>();</span><br><span class="line">		C.re = r;</span><br><span class="line">		<span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(P , <span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">		<span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(C , <span class="string">&quot;消费者&quot;</span>);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">		</span><br><span class="line">		<span class="type">Prou</span> <span class="variable">P1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prou</span>();</span><br><span class="line">		P1.re = r;</span><br><span class="line">		<span class="type">Consumer</span> <span class="variable">C1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>();</span><br><span class="line">		C1.re = r;</span><br><span class="line">		<span class="type">Thread</span> <span class="variable">t11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(P , <span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">		<span class="type">Thread</span> <span class="variable">t21</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(C , <span class="string">&quot;消费者&quot;</span>);</span><br><span class="line">		t11.start();</span><br><span class="line">		t21.start();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prou</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">	repo re;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">				re.add();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">	repo re;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">		</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">				re.substrct();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意，wait的时候是直接放开锁的</li>
</ul>
<h1 id="创建线程的第三种和第四种方式"><a href="#创建线程的第三种和第四种方式" class="headerlink" title="创建线程的第三种和第四种方式"></a>创建线程的第三种和第四种方式</h1><h2 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"><span class="comment">//实现Callable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableTest</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//执行Callable 方式，需要FutureTask 实现实现，用于接收运算结果</span></span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;Integer&gt;(<span class="keyword">new</span> <span class="title class_">MyCallable</span>());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line">        <span class="comment">//接收线程运算后的结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4950</span></span><br><span class="line"><span class="comment">Process finished with exit code 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="线程池创建线程"><a href="#线程池创建线程" class="headerlink" title="线程池创建线程"></a>线程池创建线程</h2><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">//线程池实现</span><br><span class="line">public class ThreadPoolExecutorTest &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建线程池</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(10);</span><br><span class="line">        ThreadPool threadPool = new ThreadPool();</span><br><span class="line">        for(int i =0;i&lt;5;i++)&#123;</span><br><span class="line">            //为线程池分配任务</span><br><span class="line">            executorService.submit(threadPool);</span><br><span class="line">        &#125;</span><br><span class="line">        //关闭线程池</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class ThreadPool implements Runnable &#123;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for(int i = 0 ;i&lt;10;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;:&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 打印结果（不唯一）：</span><br><span class="line">/*</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:0</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:0</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:1</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:0</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:1</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:2</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:2</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:3</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:4</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:5</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:1</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:0</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:1</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:2</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:3</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:6</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:7</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:8</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:3</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:9</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:4</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:0</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:1</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:2</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:3</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:4</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:5</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:6</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:7</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:8</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:9</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:2</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:3</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:4</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:5</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:5</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:4</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:5</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:6</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:7</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:8</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:9</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:6</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:6</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:7</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:7</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:8</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:8</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:9</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:9</span><br><span class="line">Process finished with exit code 0</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2022/10/25/10-25/</url>
    <content><![CDATA[<h1 id="泛型（任意引用类型）"><a href="#泛型（任意引用类型）" class="headerlink" title="泛型（任意引用类型）"></a>泛型（任意引用类型）</h1><ul>
<li>作用:就是可以让其内的变量无类型，直到用的时候才指定类型，解决了强制转换问题</li>
<li>代码如下：<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	package 作业;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> <span class="keyword">class</span> gdg &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line"></span><br><span class="line">		sfdhkja&lt;String&gt; a = <span class="built_in">new</span> sfdhkja(); // 尖括号里面的就是泛型的类型</span><br><span class="line">		a.setName(&quot;小明&quot;);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(a.getName());</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(a);</span><br><span class="line">		sfdhkja&lt;<span class="type">Integer</span>&gt; b = <span class="built_in">new</span> sfdhkja();</span><br><span class="line">		b.setName(<span class="number">11111</span>);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(b.getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> sfdhkja&lt;E&gt; &#123;</span><br><span class="line">	E <span class="type">name</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> sfdhkja() &#123;</span><br><span class="line">		super();</span><br><span class="line">		this.name = <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> E getName() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> setName(E <span class="type">name</span>) &#123;</span><br><span class="line">		this.name = <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="boolean-add-E"><a href="#boolean-add-E" class="headerlink" title="boolean add(E)"></a>boolean add(E)</h3><p>把任意对象类型加进list中</p>
<h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><p>返回集合的迭代器，用于遍历集合</p>
<h3 id="default修饰的"><a href="#default修饰的" class="headerlink" title="default修饰的"></a>default修饰的</h3><p>代表接口中有方法体</p>
<h3 id="int-size"><a href="#int-size" class="headerlink" title="int size"></a>int size</h3><h3 id="并行流和串型流"><a href="#并行流和串型流" class="headerlink" title="并行流和串型流"></a>并行流和串型流</h3><h3 id="Object-toArray"><a href="#Object-toArray" class="headerlink" title="Object toArray()"></a>Object toArray()</h3><p>可以指定泛型的</p>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>代码如下</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> jeiko &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line"></span><br><span class="line">		Collection&lt;String&gt; c1 =<span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		c1.<span class="keyword">add</span>(&quot;中国&quot;);</span><br><span class="line">		c1.<span class="keyword">add</span>(&quot;韩国哦&quot;);</span><br><span class="line">		c1.<span class="keyword">add</span>(&quot;hsakdj&quot;);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(c1.size());</span><br><span class="line">		Iterator&lt;String&gt; ra = c1.iterator();</span><br><span class="line">		<span class="keyword">while</span>(ra.hasNext()) &#123;</span><br><span class="line">			String item = ra.next();</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println(item);</span><br><span class="line">			ra.remove(); // 删除元素</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;-------------------------------&quot;);</span><br><span class="line">		<span class="keyword">for</span> (String string : c1) &#123;</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println(string);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;------------------------------------&quot;);</span><br><span class="line">		c1.<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>只有第一种才可以进行便循环边删除</li>
<li>其他都不可以</li>
<li>但是第三种最帅，代码量也最少</li>
</ul>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><ul>
<li>Colllection继承了Iterable接口</li>
<li>list线性，有序集合</li>
<li>set无序集合</li>
<li>旗下是</li>
<li>ArrayLinst</li>
<li>LinkedList</li>
<li>Vector</li>
<li>下面是set的</li>
<li>HashSet</li>
<li>TreeSet</li>
</ul>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul>
<li>线性集合 ，有下标</li>
<li>add(index , E)</li>
<li>set(index ,E)</li>
<li>get(index)<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 重新开始;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Main1 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">		list.add(<span class="string">&quot;1&quot;</span>);  <span class="comment">// 先往list里添加元素</span></span><br><span class="line">		list.add(<span class="string">&quot;12&quot;</span>); <span class="comment">// 同上</span></span><br><span class="line">		System.out.<span class="keyword">println</span>(list);  <span class="comment">// 直接打印是全部打印出来</span></span><br><span class="line">		list.add(<span class="number">0</span>,<span class="string">&quot;121&quot;</span>); <span class="comment">// 在下表为0的地方添加121</span></span><br><span class="line">		list.set(<span class="number">2</span>, <span class="string">&quot;dhkjsdhj&quot;</span>); <span class="comment">// 把下表为2的地方设置为dhkjsdhj</span></span><br><span class="line">		System.out.<span class="keyword">println</span>(list.<span class="keyword">size</span>()); <span class="comment">// 获取list的size就是大小</span></span><br><span class="line">		</span><br><span class="line">		list.forEach(System.out::<span class="keyword">println</span>); <span class="comment">// 超级帅气的循环语句，本身是lambal表达式</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; list.<span class="keyword">size</span>() ; i++) &#123;</span><br><span class="line">			String item = list.get(i);</span><br><span class="line">			System.out.<span class="keyword">println</span>(item);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul>
<li>底层封装的数组</li>
<li>扩容的时候每次扩容一半</li>
<li>海量添加的时候是很慢的，就是修改长度很慢</li>
<li>查询快，因为有下标</li>
</ul>
<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><ul>
<li>可控增量，且线程安全</li>
<li>底层是数组，且有线程锁，</li>
<li>10，20，40 ，每次扩容一倍，但是是可以控制增量的</li>
<li>比ArrayList慢</li>
</ul>
<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul>
<li>底层封装的是节点，双向链表，每一个节点都有前一个节点和后一个节点的引用</li>
<li>单向链：修改快</li>
<li>双向链：就是双向的，前后都有元素</li>
<li>特点：修改快，但是查询慢</li>
<li>可以用作与自己定义栈<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span>&lt;<span class="type">E</span>&gt; &#123;</span><br><span class="line">	LinkedList&lt;E&gt; <span class="keyword">data</span>;</span><br><span class="line">	<span class="keyword">public</span> E pop()  &#123;</span><br><span class="line">	<span class="keyword">return</span>	<span class="keyword">data</span>.pollLast();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul>
<li>无序集合</li>
<li>会自动去重，就是有重复的就会	不添加新的元素<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span>&lt;<span class="type">Integer</span>&gt; <span class="keyword">set</span> = <span class="built_in">new</span> HashSet&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">11</span>);</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">1111</span>);</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">898</span>);</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">11</span>);</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul>
<li>因为这里的去重机制是根据hashcode和equals来的，默认的时候，可以像正常的列表一样，但是我们可以进行覆盖hashcode和equals</li>
<li>不覆盖<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">Set</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Sst &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line"></span><br><span class="line">		<span class="keyword">Set</span>&lt;<span class="type">Integer</span>&gt; <span class="keyword">set</span> = <span class="built_in">new</span> HashSet&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">11</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">1111</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">898</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">11</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">Set</span>&lt;stu&gt; s1 =<span class="built_in">new</span> HashSet&lt;stu&gt;();</span><br><span class="line">		s1.<span class="keyword">add</span>(<span class="built_in">new</span> stu());</span><br><span class="line">		s1.<span class="keyword">add</span>(<span class="built_in">new</span> stu());</span><br><span class="line">		s1.<span class="keyword">add</span>(<span class="built_in">new</span> stu());</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(s1.size());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> stu&#123;</span><br><span class="line">	private <span class="type">int</span> num;</span><br><span class="line">	private String <span class="type">name</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> stu() &#123;</span><br><span class="line">		super();</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> getNum() &#123;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> setNum(<span class="type">int</span> num) &#123;</span><br><span class="line">		this.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> String getName() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> setName(String <span class="type">name</span>) &#123;</span><br><span class="line">		this.name = <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> String toString() &#123;</span><br><span class="line">		<span class="keyword">return</span> &quot;stu [num=&quot; + num + &quot;, name=&quot; + <span class="type">name</span> + &quot;]&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>覆盖之后</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">Set</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Sst &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line"></span><br><span class="line">		<span class="keyword">Set</span>&lt;<span class="type">Integer</span>&gt; <span class="keyword">set</span> = <span class="built_in">new</span> HashSet&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">11</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">1111</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">898</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">11</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">Set</span>&lt;stu&gt; s1 =<span class="built_in">new</span> HashSet&lt;stu&gt;();</span><br><span class="line">		s1.<span class="keyword">add</span>(<span class="built_in">new</span> stu());</span><br><span class="line">		s1.<span class="keyword">add</span>(<span class="built_in">new</span> stu());</span><br><span class="line">		s1.<span class="keyword">add</span>(<span class="built_in">new</span> stu());</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(s1.size());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> stu&#123;</span><br><span class="line">	private <span class="type">int</span> num;</span><br><span class="line">	private String <span class="type">name</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> stu() &#123;</span><br><span class="line">		super();</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> getNum() &#123;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> setNum(<span class="type">int</span> num) &#123;</span><br><span class="line">		this.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> String getName() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> setName(String <span class="type">name</span>) &#123;</span><br><span class="line">		this.name = <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> String toString() &#123;</span><br><span class="line">		<span class="keyword">return</span> &quot;stu [num=&quot; + num + &quot;, name=&quot; + <span class="type">name</span> + &quot;]&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> hashCode() &#123;</span><br><span class="line">		final <span class="type">int</span> prime = <span class="number">31</span>;</span><br><span class="line">		<span class="type">int</span> result = <span class="number">1</span>;</span><br><span class="line">		result = prime * result + ((<span class="type">name</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : <span class="type">name</span>.hashCode());</span><br><span class="line">		result = prime * result + num;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">boolean</span> equals(<span class="keyword">Object</span> obj) &#123;</span><br><span class="line">		<span class="keyword">if</span> (this == obj)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		stu other = (stu) obj;</span><br><span class="line">		<span class="keyword">if</span> (<span class="type">name</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="type">name</span>.equals(other.name))</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (num != other.num)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>也可以在生成覆盖的时候少选几个变量这样这些变量就会变成唯一的筛选变量 ，相当于放宽变量范围</li>
<li>原理是封装了hashmap，利用key和value</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>SetTree</title>
    <url>/2022/10/26/10-26/</url>
    <content><![CDATA[<h1 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h1><ul>
<li><p>其是基于compareable的，</p>
</li>
<li><p>进行add的时候放的如果是引用类型，则要实现compareable接口，因为他就是用这个接口来实现的</p>
</li>
<li><p>对于基本类型，则不用</p>
</li>
<li><p>如果这样就会报错</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">Set</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> copyfilethread &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line"></span><br><span class="line">		<span class="keyword">Set</span>&lt;String&gt; <span class="keyword">set</span> = <span class="built_in">new</span> TreeSet&lt;String&gt;();</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(&quot;2020-10-19&quot;);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(&quot;1010-10-20&quot;);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">set</span>);</span><br><span class="line">		<span class="keyword">Set</span>&lt;stu&gt; <span class="keyword">SET</span> = <span class="built_in">new</span> TreeSet&lt;stu&gt;();</span><br><span class="line">		<span class="keyword">SET</span>.<span class="keyword">add</span>(<span class="built_in">new</span> stu(&quot;小明&quot; , <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">SET</span>.<span class="keyword">add</span>(<span class="built_in">new</span> stu(&quot;snisnh&quot; , <span class="number">2</span>));</span><br><span class="line">		<span class="keyword">SET</span>.<span class="keyword">add</span>(<span class="built_in">new</span> stu(&quot;狗蛋&quot;  , <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">SET</span>.<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>stu类</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">stu</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> int num;</span><br><span class="line">	<span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"> <span class="built_in">String</span> name , int num</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">super</span>();</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">getNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setNum</span>(<span class="params">int num</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setName</span>(<span class="params"><span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;stu [num=&quot;</span> + num + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">hashCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">		final int prime = <span class="number">31</span>;</span><br><span class="line">		int result = <span class="number">1</span>;</span><br><span class="line">		result = prime * result + ((name == <span class="literal">null</span>) ? <span class="number">0</span> : name.<span class="title function_">hashCode</span>());</span><br><span class="line">		result = prime * result + num;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">equals</span>(<span class="params"><span class="built_in">Object</span> obj</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable language_">this</span> == obj)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_">getClass</span>() != obj.<span class="title function_">getClass</span>())</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		stu other = (stu) obj;</span><br><span class="line">		<span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (other.<span class="property">name</span> != <span class="literal">null</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.<span class="title function_">equals</span>(other.<span class="property">name</span>))</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (num != other.<span class="property">num</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 大于0是正数，小于0是负数 ，等于0是相等 ，</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这样会报错，是类型转换的错误。</li>
<li>因为它实现的是compareable接口，对比引用类型的时候用的是这个接口里的方法</li>
<li>所以在stu类实现这个接口就可以不报错了</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">stu</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;stu&gt;&#123;</span><br><span class="line">	<span class="keyword">private</span> int num;</span><br><span class="line">	<span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"> <span class="built_in">String</span> name , int num</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">super</span>();</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">getNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setNum</span>(<span class="params">int num</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setName</span>(<span class="params"><span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;stu [num=&quot;</span> + num + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">hashCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">		final int prime = <span class="number">31</span>;</span><br><span class="line">		int result = <span class="number">1</span>;</span><br><span class="line">		result = prime * result + ((name == <span class="literal">null</span>) ? <span class="number">0</span> : name.<span class="title function_">hashCode</span>());</span><br><span class="line">		result = prime * result + num;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">equals</span>(<span class="params"><span class="built_in">Object</span> obj</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable language_">this</span> == obj)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_">getClass</span>() != obj.<span class="title function_">getClass</span>())</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		stu other = (stu) obj;</span><br><span class="line">		<span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (other.<span class="property">name</span> != <span class="literal">null</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.<span class="title function_">equals</span>(other.<span class="property">name</span>))</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (num != other.<span class="property">num</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 大于0是正数，小于0是负数 ，等于0是相等 ，</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">compareTo</span>(<span class="params">stu o</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>但是这样他只能往set里添加一个值</li>
<li>因为这个compare默认的时候就是这样</li>
<li>如果要再进行精度筛选则要，在被覆盖的compareto方法中自己定义，可以改成<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> int compareTo(stu o) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.num == o.num) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.name.length() - o.name.length();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.num - o.num;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>这样就会让如果学号相同，就会按照姓名的长度排序，小的在上面</li>
<li>总之就是可以在这个compareto这里设置规则</li>
<li>可控性强</li>
<li>这里只有数组的是length是属性，其他都是方法</li>
<li>集合的叫size</li>
<li>这个是用于实体类，数据类实现接口用 ， 表达的是自然的顺序，又叫自然排序</li>
</ul>
<h1 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h1><ul>
<li>比较器是对于list来说的</li>
<li>comparetor ：比较器，比上一个更自由 ，可以控制排序的方式，升序或者降序<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">List</span>&lt;stu&gt; list = new ArrayList&lt;stu&gt;();</span><br><span class="line"><span class="attribute">System</span>.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">1</span> , <span class="number">89</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">2</span> , <span class="number">88</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">21</span> , <span class="number">87</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">22</span> , <span class="number">86</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">21</span> , <span class="number">85</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">221</span> , <span class="number">84</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">21</span> , <span class="number">83</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">21</span> , <span class="number">82</span>.<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="attribute">Collections</span>.sort(list , (a,b) -&gt; -((int)(b.getScore() - a.getScore() * <span class="number">100</span> ))); // 这个里面的代表 ， 我们的比较规则， 前面代表要排序的集合，list不去重 ， a,b代表两个元素list中的，后面的就是比较的规则了，一般是升序排序，但是我们可以通过添加-的方法，让他进行降序，他底层也是tree</span><br><span class="line"><span class="attribute">list</span>.forEach(System.out::println);</span><br></pre></td></tr></table></figure></li>
<li>通过lambal表达式进行比较排序</li>
<li>但是其实这个sort方法也是Arrays.sort，它是将所有元素转入一个数组，对数组进行排序，然后，将排好序 的序列复制回列表 ，</li>
<li>sort()是根据需要排序的数组的长度进行区分的:</li>
<li>首先先判断需要排序的数据量是否大于60。</li>
<li>小于60：使用插入排序，插入排序是稳定的</li>
<li>大于60的数据量会根据数据类型选择排序方式：</li>
<li>基本类型：使用快速排序。「因为基本类型不需要考虑稳定性」</li>
<li>Object类型：使用归并排序「因为归并排序具有稳定性」</li>
<li>注意：不管是快速排序还是归并排序。在二分的时候小于60的数据量依旧会使用插入排序</li>
<li>Collections.reverseOrder()也可以进行降序排序 , 只不过是要基本类型</li>
</ul>
<h1 id="映射Map"><a href="#映射Map" class="headerlink" title="映射Map"></a>映射Map</h1><ul>
<li>是一种接口</li>
<li>是一种&lt;k , V&gt; 结构 ，就是一个key对应一个value，其key不会重复，而value可以重复</li>
<li>一个&lt;Ｋ，V&gt;叫一个ｅｎｔｒｙ</li>
<li>万能&lt;Ｋ，V&gt;他可以代表一个对象</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li>ｃｌｅａｒ清除所有映射</li>
<li>ｂｏｏｌｅａｎ　ｃｏｎｔａｉｎｓＫｅｙ（Ｏｂｊｅｃｔ　ｋｅｙ）：判断一个ｋｅｙ是不是存在</li>
<li>ｅｎｔｒｙＳｅｔ（）获取ｅｎｔｒｙ集合，就是条目集合<br>，返回类型是一个Ｓｅｔ</li>
<li>ｇｅｔ（ｋｅｙ）根据ｋｅｙ获取ｖａｌｕｅ</li>
<li>ｋｅｙＳｅｔ（）返回ｋｅｙ的集合</li>
<li>ｐｕｔ（K，ｖ），往，ｍａｐ加入一条数据，但是存在相同的ｋｅｙ就覆盖</li>
<li>ｒｅｍｏｖｅ（ｋ）删除ｋｅｙ</li>
<li>ｓｉｚｅ（）条目个数</li>
<li>Ｃｏｌｌｅｃｔｉｏｎ＜Ｖ＞　ｖａｌｕｅｓ（）获取值组成的集合<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Main2 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		Map&lt;String , String&gt; map = <span class="built_in">new</span> HashMap&lt;&gt;();</span><br><span class="line">		map.put(&quot;akjsdhs&quot;, &quot;sdjal&quot;);</span><br><span class="line">		map.put(&quot;dshd&quot; , &quot;sdjjdjd&quot;);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.<span class="keyword">get</span>(&quot;dshd&quot;));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.containsKey(&quot;dshd&quot;));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.remove(&quot;dshd&quot;));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.size());</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.entrySet());</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.containsKey(&quot;dshd&quot;));</span><br><span class="line">		map.clear();</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.size());</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>Map</title>
    <url>/2022/10/27/10-27/</url>
    <content><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><ul>
<li><p>Map和集合是无关系的</p>
</li>
<li><p>Map是个接口</p>
</li>
<li><p>旗下有hashMap和TreeMap</p>
</li>
<li><p>简单代码</p>
</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Map&lt;String , String&gt; map1 = new HashMap&lt;&gt;();</span><br><span class="line">	map1.<span class="keyword">put</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;事假&quot;</span>);</span><br><span class="line">	map1.<span class="keyword">put</span>(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;病假&quot;</span>);</span><br><span class="line">	map1.<span class="keyword">put</span>(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;产假&quot;</span>);</span><br><span class="line">	map1.<span class="keyword">put</span>(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;施加&quot;</span>);</span><br><span class="line">	Set&lt;String&gt; ks = map1.keySet();</span><br><span class="line">	Iterator&lt;String&gt; <span class="keyword">it</span> = ks.iterator();</span><br><span class="line">	<span class="keyword">while</span>(<span class="keyword">it</span>.hasNext()) &#123;</span><br><span class="line">		String <span class="built_in">item</span> = <span class="keyword">it</span>.next();</span><br><span class="line">		System.out.println(<span class="string">&quot;key&quot;</span> + <span class="built_in">item</span> + <span class="string">&quot;@value:&quot;</span> + map1.<span class="keyword">get</span>(<span class="built_in">item</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>entrySet</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Set</span>&lt;<span class="title class_">Map</span>.<span class="property">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt;&gt; km = map1.<span class="title function_">entrySet</span>();</span><br><span class="line"><span class="title class_">Iterator</span>&lt;<span class="title class_">Map</span>.<span class="property">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt;&gt; il = km.<span class="title function_">iterator</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(il.<span class="title function_">hasNext</span>()) &#123;</span><br><span class="line"><span class="title class_">Entry</span>&lt;<span class="title class_">String</span> , <span class="title class_">String</span>&gt; entry = il.<span class="title function_">next</span>();</span><br><span class="line"><span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(entry.<span class="title function_">getKey</span>() + entry.<span class="title function_">getValue</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="title class_">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; entry : km) &#123;</span><br><span class="line">	<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(entry.<span class="title function_">getKey</span>() + entry.<span class="title function_">getValue</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">km.<span class="title function_">forEach</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">accept</span>(<span class="params"><span class="built_in">Object</span> t</span>) &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(t);</span><br><span class="line">&#125;&#125;); <span class="comment">// Consumer里面有个抽象方法 ，accept，我们要做的事情放进这个accept里，就代表对其每个元素进行accept里的操作 ，就是lambda的表达式</span></span><br><span class="line">		</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>上述是两种遍历方式，迭代器可边遍历便删除，是我们最古老的，可是也是唯一有这个功能的 ，iterator</li>
<li>其他的都要遍历完了才能再删除</li>
<li>而且entrySet比keySet是要更快点的（单纯遍历）</li>
<li>迭代器的算法是要比后来的算法速度快的，遍历的时候</li>
</ul>
<h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><ul>
<li>lambda表达式是很便捷的一种方法</li>
<li>要求：定义规则，定义几个变量</li>
<li>首先，我们要定义一个接口</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="symbol">Yunsuan</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> yunsuan(<span class="built_in">int</span> i , <span class="built_in">int</span> j);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>然后在这个接口上增加@FunctionalInterface ，注意这个标志是让这个接口只有一个抽象方法，多个抽象方法会报错</li>
<li>这一步是定义我们的，几个元素</li>
<li>接下来我们定义一个函数 ，让这个接口当作参数 ，并且给这个接口传入两个参数</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">int</span> <span class="title">getresult</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b, Yunsuan yunsuan)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span>	yunsuan.<span class="built_in">yunsuan</span>(a, b);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>这样 ，我们就算是把这个规则实体化了，接下来我们只要调用这个规则的实例化，就可以对这两个数进行任意操作了</li>
<li>比如<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">System.out.println<span class="function"><span class="params">(getresult(<span class="number">3</span>,<span class="number">2</span>, (i,j)-&gt;i+j))</span>; // 前面两个是实参 ，后面的是规则就这样写就行 ，格式固定，但是语法不固定</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure></li>
<li>上面的foreach里嵌套的就算lambda的表达式</li>
</ul>
<h1 id="Map特殊事项"><a href="#Map特殊事项" class="headerlink" title="Map特殊事项"></a>Map特殊事项</h1><ul>
<li><p>如果在map里把key放入引用类型，则对比key的操作会变成对比hashcode和equals，可控性更强</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> 重新开始;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">HashMap</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">Map</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TEstmain1</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		Map&lt;stu , <span class="built_in">Object</span>&gt; <span class="built_in">map</span> = <span class="keyword">new </span><span class="class title_">HashMap</span>&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		<span class="built_in">map</span>.<span class="property">put</span>(<span class="keyword">new </span><span class="class title_">stu</span>(<span class="string">&quot;小明&quot;</span>  , <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">map</span>.<span class="property">put</span>(<span class="literal">null</span> , <span class="literal">null</span>);</span><br><span class="line">		<span class="built_in">map</span>.<span class="property">put</span>(<span class="keyword">new </span><span class="class title_">stu</span>(<span class="string">&quot;狗蛋&quot;</span> , <span class="number">1</span>) , <span class="number">2</span>);</span><br><span class="line">		System.<span class="property">out</span>.<span class="property">println</span>(<span class="built_in">map</span>.<span class="property">size</span>());</span><br><span class="line">		<span class="built_in">map</span>.<span class="property">forEach</span>((k , v) -&gt; &#123;System.<span class="property">out</span>.<span class="property">println</span>(k + <span class="string">&quot;@&quot;</span> +v);&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>stu类，通过自动生成hashcode和equals，（我这里只生成了num的）</p>
</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">stu</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;stu&gt;&#123;</span><br><span class="line">	<span class="keyword">private</span> int num;</span><br><span class="line">	<span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line">	<span class="keyword">private</span> double score;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"> <span class="built_in">String</span> name , int num</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"> <span class="built_in">String</span> name , int num , double m</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">score</span> = m;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">super</span>();</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">getNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setNum</span>(<span class="params">int num</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setName</span>(<span class="params"><span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;stu [num=&quot;</span> + num + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, score=&quot;</span> + score + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">hashCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">		final int prime = <span class="number">31</span>;</span><br><span class="line">		int result = <span class="number">1</span>;</span><br><span class="line">		result = prime * result + num;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">equals</span>(<span class="params"><span class="built_in">Object</span> obj</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable language_">this</span> == obj)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_">getClass</span>() != obj.<span class="title function_">getClass</span>())</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		stu other = (stu) obj;</span><br><span class="line">		<span class="keyword">if</span> (num != other.<span class="property">num</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 大于0是正数，小于0是负数 ，等于0是相等 ，</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">compareTo</span>(<span class="params">stu o</span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">num</span> == o.<span class="property">num</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">length</span>() - o.<span class="property">name</span>.<span class="title function_">length</span>();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> o.<span class="property">num</span> - <span class="variable language_">this</span>.<span class="property">num</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> double <span class="title function_">getScore</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> score;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setScore</span>(<span class="params">double score</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="lambda加for循环-加上TreeMap"><a href="#lambda加for循环-加上TreeMap" class="headerlink" title="lambda加for循环 加上TreeMap"></a>lambda加for循环 加上TreeMap</h1><ul>
<li><p>通过treeMap实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> 重新开始;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TEstmain1</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		TreeMap&lt;stu , Object&gt; map11 = <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line">		map11.put(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;小明&quot;</span>,  <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">		map11.put(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;狗蛋&quot;</span> ,  <span class="number">2</span>) ,<span class="number">2</span>);</span><br><span class="line">		map11.put(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;linux&quot;</span> , <span class="number">3</span>), <span class="number">3</span>);</span><br><span class="line">		map11.put(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;狗蛋&quot;</span> ,  <span class="number">2</span>) ,<span class="number">99</span>);</span><br><span class="line">		map11.forEach(TEstmain1::abc);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">abc</span><span class="params">(stu s , Object value)</span> &#123;</span><br><span class="line">		System.out.println(s + <span class="string">&quot;@&quot;</span> +value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>上述的是针对foreach有两个参数的情况，可以定义一个函数，让他去传递参数，和lambda一样</p>
</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>细节</title>
    <url>/2022/10/28/10-28/</url>
    <content><![CDATA[<h1 id="关于Map的遍历"><a href="#关于Map的遍历" class="headerlink" title="关于Map的遍历"></a>关于Map的遍历</h1><ul>
<li>我们可以用Set来遍历</li>
<li>代码如下:</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">map2.<span class="keyword">put</span>(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Corejava&quot;</span>);</span><br><span class="line">map2.<span class="keyword">put</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="string">&quot;Jsp&quot;</span>);</span><br><span class="line">map2.<span class="keyword">put</span>(<span class="string">&quot;KJSHHKJ&quot;</span> , <span class="string">&quot;Oracle&quot;</span>);</span><br><span class="line"><span class="keyword">Set</span> m <span class="comment">= map2.entrySet()</span>;</span><br><span class="line">m.forEach(<span class="keyword">System</span>.out::println);</span><br></pre></td></tr></table></figure>
<ul>
<li>我们还可以用，把map转换成流再进行</li>
<li>代码如下：</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">map2.entrySet<span class="function"><span class="params">()</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">filter</span><span class="params">((item) -&gt; <span class="string">&quot;Oracle&quot;</span>.equals(item.getValue()))</span>.<span class="title">forEach</span><span class="params">((item) -&gt; System.out.println(item.getKey()))</span>;</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>
<ul>
<li>特别帅气，</li>
<li>而且foreach的本质就是流</li>
<li>先通过entryset转换成集合</li>
<li>然后集合有Stream方法，可以转化成流</li>
<li>然后对于流我们加上filter（过滤器）</li>
<li>筛选我们想要的结构，这个过滤器里面只能放返回值是布尔的</li>
<li>然后筛选完了，我们可以对他进行lambda的表达输出语句</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2022/10/31/10-31/</url>
    <content><![CDATA[<h1 id="linux的目录形式"><a href="#linux的目录形式" class="headerlink" title="linux的目录形式"></a>linux的目录形式</h1><ul>
<li>层级式</li>
<li>当用了Xshell登录了管理员之后会显示</li>
<li>root@bigdata1 liuzihan</li>
<li>前面表示root用户</li>
<li>@后面的是机器名字</li>
<li>在后面的是普通用户的名字</li>
<li>~表示当前用户的家目录</li>
<li>有命令帮助 应用 xx–help ， 这个xx代表是命令</li>
<li>例如： 用法：ls [选项]… [文件]…</li>
<li>上面代表ls后面可以加多个辅助命令 ， 还可以加多个文件</li>
<li>中断命令 ： ctrl + c 或者 ctrl + z</li>
<li>用键盘自动补全 ，</li>
<li>按一次 ： 匹配当前据有唯一标识的补全</li>
<li>按两次 ： 把所有匹配的项目都展示出来</li>
</ul>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul>
<li>pwd : 查看当前所在的目录</li>
<li>ls ： 查看所在的目录下有文件或者文件夹</li>
<li>mkdir ： 创建文件夹 ， 后面加文件夹的名字</li>
<li>cd ： 切换路径 ， 就算现在所在的目录 ， 只能切换文件夹</li>
<li>ls -l ： 表示看这个文件夹的额外的详细信息 ， 权限 ，用户 ， 用户组 ， 大小 ， 创建时间。 </li>
<li>ls -l -a ：显示以.开头的文件或者文件夹 ， 就是隐藏文件</li>
<li>ls -l -h ：查看文件的大小 ， 文件夹是不可以的</li>
<li>上面的 ls -l &#x3D;&#x3D; ll 但是在一些操作系统里是不行的在centos里是可以的但是ubanto上是不行的</li>
<li>其实现是通过别名</li>
<li>ll -r -t ： 可以看见按照时间顺序降序的排序文件 ，就算最下面的就是最近更改的</li>
<li>上述还可以改成 ll -rt &#x3D;&#x3D;ll -r -t</li>
</ul>
<h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹##"></a>创建文件夹##</h2><h3 id="并级创建"><a href="#并级创建" class="headerlink" title="并级创建"></a>并级创建</h3><ul>
<li>mkdir 1 2 3</li>
</ul>
<h3 id="串级创建"><a href="#串级创建" class="headerlink" title="串级创建"></a>串级创建</h3><ul>
<li>mkdir 1&#x2F;2&#x2F;3</li>
<li>但是这样要求必须有上级目录</li>
<li>不过可以用</li>
<li>mkdir -p 1&#x2F;2&#x2F;3</li>
<li>就可以了</li>
</ul>
<h2 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h2><ul>
<li>cd</li>
<li>不过有绝对路径和相对路径的区别</li>
<li>绝对路径 ： 从根目录</li>
<li>相对路径 ： 从当前目录</li>
<li>cd的可以是绝对，也可以是相对</li>
<li>cd..&#x2F; : 返回上级目录</li>
<li>cd.&#x2F; : 表示当前目录</li>
<li>可以这样用 ： cd .&#x2F;1</li>
</ul>
<h3 id="快速回到家目录"><a href="#快速回到家目录" class="headerlink" title="快速回到家目录"></a>快速回到家目录</h3><ul>
<li>1 , cd &#x2F;xx</li>
<li>2 , cd + 回车 &#x3D;&#x3D;&gt;推荐</li>
<li>3 , cd + ~</li>
<li>cd - 回到上次操作的目录</li>
</ul>
<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><ul>
<li>touch 1.log</li>
<li>vi&#x2F;vim 1.log</li>
<li>echo “bigdata” &gt; 3.log</li>
<li><blockquote>
<p>: 表示创建或者覆盖一个文件</p>
</blockquote>
</li>
<li>cat ： 查看文件内容</li>
<li>比如 ： cat 3.log</li>
<li><blockquote>
<blockquote>
<p>: 追加 ，上述一个 &gt; 是覆盖 ，这个是追加</p>
</blockquote>
</blockquote>
</li>
</ul>
<h2 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h2><ul>
<li>命令行模式</li>
<li>编辑模式</li>
<li>尾行模式</li>
<li>vi&#x2F;vim xxx</li>
<li>然后用insert</li>
<li>编辑完了</li>
<li>用esc ， 之后有几种选项</li>
<li>:q ：代表退出并且不保存</li>
<li>:w ：代表写入，但是不退出</li>
<li>:wq ：代表保存且退出</li>
<li>：！ ：强制</li>
<li>还可以以应用nano</li>
<li>就nano Xxx</li>
<li>然后下面就会有提示</li>
<li>如果没有这个文件，就会创建文件</li>
</ul>
<h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><ul>
<li>cat ： 查看文件所有内容</li>
<li>more ： 查看文件内容，按空格是往下翻，按q退出</li>
<li>less ： 查看大文件，也是一页一页的 ， q是退出，按小键盘的上下键，是翻页</li>
<li>一般小文件，用 cat 大文件more或者less</li>
<li>实时查看文件产生的内容</li>
<li>tail ： </li>
<li>-f</li>
<li>-F &#x3D;&#x3D; -f + retry</li>
<li>意义：-F ， 如果我们查看一个文件的时候，文件被删了，然后又重新生成了给一样文件名的文件 ， 则f就不会动态显示了</li>
<li>但是F会重显示新的那个文件</li>
<li>用法 tail -f xxx</li>
<li>用法 tail -F xxx</li>
</ul>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul>
<li>查找特定日志里的xx字段</li>
<li>通过 vi&#x2F;vim 进入 然后进行搜索</li>
<li>在尾行模式 ，输入要查找的字符 例如 &#x2F;error</li>
<li>然后键盘 n 查找下一个词 N 查找上一个词</li>
<li>通过cat </li>
<li>cat xxxx文件 | grep error 通过后面的grep 过滤文件</li>
<li>查看进程也可以用这种方式筛选</li>
<li>可以和其他命令联用 比如 把所有error的信息收集起来</li>
<li>cat xxx文件 | grep error &gt; xxx文件</li>
<li>grep的常用的参数</li>
<li>grep -A xx行： 查看某一个词的后xx行</li>
<li>grep -B xx行： 查看某一个词的前xx行</li>
<li>grep -C xx行： 查看某一个词的前后xx行</li>
<li>与上面的了连用为</li>
<li>cat xxx文件 | grep -A xx行 error &gt; xxx文件</li>
<li>nano方式</li>
<li>管道符| ：代表让上一个语句的输出代表 代表下一个语句的输入</li>
</ul>
<h2 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h2><ul>
<li>上传 ： win 到 linux</li>
<li>下载 ： linux 到 win</li>
</ul>
<h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><ul>
<li>工具 ： Xshell 通过Xshell的Xftp进行下载和上传</li>
<li>linux命令 ： yum install lzxx ，通过他进行下载上传</li>
</ul>
<h2 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h2><ul>
<li>clear : 清屏</li>
<li>ctrl + l ： 清屏</li>
</ul>
<h2 id="查看操作命令历史"><a href="#查看操作命令历史" class="headerlink" title="查看操作命令历史"></a>查看操作命令历史</h2><ul>
<li>history </li>
<li>或者键盘上的上下箭头号</li>
<li>按键盘的！ + 命令行数</li>
</ul>
<h2 id="移动与复制"><a href="#移动与复制" class="headerlink" title="移动与复制"></a>移动与复制</h2><ul>
<li>mv[选项]..源文件..目录</li>
<li>例如： mv dir1 bigdata</li>
<li>cp[选项]..源文件..目录</li>
<li>例如： cp -r dir2 bigdata</li>
<li>但是 cp还可以复制的时候改文件名字</li>
<li>例如 cp 源文件 目标文件</li>
<li>就会把源文件中的内容给目标文件，命名就是这里的目标文件</li>
<li>也可以和上一个复制到文件夹联用</li>
<li>例如 ： cp xx xxx目录&#x2F;xx文件</li>
<li>mv始终是一份</li>
<li>而cp则是两份</li>
<li>所以mv比cp快</li>
</ul>
<h2 id="删除文件或者文件夹"><a href="#删除文件或者文件夹" class="headerlink" title="删除文件或者文件夹"></a>删除文件或者文件夹</h2><ul>
<li>rm[选项]..文件..</li>
<li>有删除提示 ： rm reeor.log</li>
<li>删除文件夹 ： rm -r xxxx文件夹</li>
<li>无删除提示 ： rm -f</li>
<li>用法和上面一样</li>
<li>且 rm-r -f xxx &#x3D; rm-rf xxx</li>
<li>比如 我们可以 rm -rf&#x2F; &#x3D;&gt; 把整个全删除了</li>
</ul>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><ul>
<li>alias </li>
<li>创建别名：</li>
<li>alias aa &#x3D;”cd&#x2F;tmp” &#x3D;&gt;仅仅当前会话生效 ， 让aa代表cd&#x2F;tmp</li>
<li>但是在其他会话里就不会生效，因为这个没有在环境变量里设置</li>
</ul>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul>
<li>就像java的jdk环境一样 我们也有环境变量</li>
<li>全局环境变量 &#x2F;etc&#x2F;profile</li>
<li>个人变量 ： 只能当前用户使用 其他用户不能使用</li>
<li>~&#x2F;.bashrcc</li>
<li>~&#x2F;.bash_profile</li>
<li>生效环境变量</li>
<li>source &#x2F;etc&#x2F;profile</li>
<li>重新打开一个会话</li>
<li>然后这个别名就会好用了</li>
<li>但是这个不能跨用户访问，比如root的不能在普通用户这么用，相反也是</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>Linux命令（运维）</title>
    <url>/2022/11/01/11-1/</url>
    <content><![CDATA[<h1 id="用户常用命令"><a href="#用户常用命令" class="headerlink" title="用户常用命令"></a>用户常用命令</h1><ul>
<li>ll &#x2F;usr&#x2F;sbin&#x2F;user* 查看用户命令</li>
<li>ll &#x2F;usr&#x2F;sbin&#x2F;group* 查看组命令</li>
<li>查看用户信息 &#x2F;etc&#x2F;passwd</li>
<li>查看组信息 &#x2F;etc&#x2F;group</li>
<li>查看用户 id xxx名称</li>
<li>userdel xxx ： 代表删除xx用户</li>
<li>useradd xxx ： 代表添加xx用户</li>
<li>usermod xxx ： 代表对一个用户进行操作</li>
</ul>
<h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><ul>
<li>su xxx</li>
<li>su -xxx </li>
<li>切换用户 ，如果用下面的那种，会获得该用户的环境变量并且执行</li>
<li>用上面的那种目录不会跑到所切换的用户的home</li>
<li>而下面的会跑到切换用户的home</li>
<li>用exit退回</li>
<li>如果删除了一个已经存在的user ， 再次添加相同名称的用户的时候，会有警告，说明此用户的目录已经存在</li>
<li>在skel文件夹下有隐藏文件</li>
<li>如果把这个里的东西删掉，就会出现环境变量丢失的情况</li>
<li>我们可以从别的地方的给他cp过来</li>
<li>就会恢复了</li>
</ul>
<h1 id="组常见命令"><a href="#组常见命令" class="headerlink" title="组常见命令"></a>组常见命令</h1><ul>
<li>groupadd xxx</li>
<li>把一个用户添加到一个组上</li>
<li>usermod -a -G xxx组 xxx用户</li>
<li>usermod -g ： 更改用户主组 ，但是这样会让追加组丢失</li>
</ul>
<h1 id="设置用户密码"><a href="#设置用户密码" class="headerlink" title="设置用户密码"></a>设置用户密码</h1><ul>
<li>passwd</li>
<li>默认修改当前用户的密码</li>
</ul>
<h2 id="修改其他用户的密码"><a href="#修改其他用户的密码" class="headerlink" title="修改其他用户的密码"></a>修改其他用户的密码</h2><ul>
<li>只有root有权限修改其他的密码</li>
<li>passwd xxx名字</li>
</ul>
<h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><ul>
<li>是一个普通用户临时具有最大权限</li>
<li>修改 etc&#x2F;sudoers</li>
<li>xxx用户 ALL&#x3D;(root) NOPASSWD:ALL</li>
<li>然后就可以用 sudo xxx 命令这就代表这条指令具有了最高的权限</li>
<li>su 和 sudo 联用</li>
<li>sudo su xx人员</li>
<li>代表通过root权限切换</li>
</ul>
<h3 id="etc-x2F-paswd"><a href="#etc-x2F-paswd" class="headerlink" title="etc&#x2F;paswd"></a>etc&#x2F;paswd</h3><ul>
<li>这个文件是密码文件</li>
<li>在这个文件里 有解释器 如果后面变成nologin代表不让登录</li>
<li>如果最后变成false 则你无论如何都登陆不成功 </li>
<li>CDH平台 可能会用到</li>
<li>把上面两中改成 bin&#x2F;bash 就可以成功了</li>
</ul>
<h1 id="权限相关命令"><a href="#权限相关命令" class="headerlink" title="权限相关命令"></a>权限相关命令</h1><ul>
<li>第一个字母 </li>
<li>d :文件夹</li>
<li>-(横杠) ： 文件</li>
<li>l ： 链接</li>
<li>后面9个字母 ，每三个一组</li>
<li>r表示read  代表数字 4</li>
<li>w表示write 代表数字 2</li>
<li>x表示执行权限 代表数字 1</li>
<li>-表示无权限 代表数字 0</li>
<li>例子 ：-rw-r- -r- -. 1 root root 2047 10月 31 09:48 initial-setup-ks.cfg</li>
<li>第一组 ： rw- 4+2+0&#x3D;6 代表文件或者文件夹的所属用户拥有的权限</li>
<li>第二组 ： r- - 4+0+0&#x3D;4 代表文件或者文件夹的组的成员的权限</li>
<li>第三组 ： r- - 4+0+0&#x3D;4 代表文件或者文件夹的其他组的权限</li>
<li>字母顺序只能按照rwxr这个顺序</li>
</ul>
<h2 id="权限修改命令"><a href="#权限修改命令" class="headerlink" title="权限修改命令"></a>权限修改命令</h2><ul>
<li>chmod 修改文件或者文件夹权限</li>
<li>chown 修改文件或者文件夹的组 ， 或者用户</li>
<li>例子 ： chmod xxx（数字）xxx名字</li>
<li>如果要该文件夹 则要 chmod -R xxx数字 xxx名字</li>
<li>例子 ： chown xxx用户：xxx用户 文件名</li>
<li>同样也可以用-R ，来修改文件夹</li>
</ul>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul>
<li>如果要访问问文件夹里的文件，要先看上面的文件夹的权限是啥样的</li>
</ul>
<h2 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h2><ul>
<li>ll -h ，du -sh</li>
<li>而对于文件夹 du -sh也可以查看 ，ll -h 就不行</li>
<li>du -sh ： 最小是4k ， 但是他无法查看权限</li>
</ul>
<h2 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h2><ul>
<li>find</li>
<li>locate（没有网，不建议用）</li>
<li>例子 ： find 【path】 【表达式】 </li>
<li>表达式 ： -name “xxx” : 按照名字查找</li>
<li>比如 ： find &#x2F; -name “1.log”</li>
</ul>
<h2 id="vi-x2F-vim"><a href="#vi-x2F-vim" class="headerlink" title="vi&#x2F;vim"></a>vi&#x2F;vim</h2><ul>
<li>编辑文件</li>
<li>尾行模式 ： wq 退出保存</li>
<li>如果编辑文件的时候突然不小心把编辑的时候中断了，就是ctrl + c 或者 ctrl + z</li>
<li>解决方法 ： 删除Swap文件是隐藏文件 ，.开头的</li>
<li>行号 ： 首先进入尾行模式</li>
<li>set nu 就会有行号</li>
<li>set nonu就可以取消行号</li>
</ul>
<h2 id="常用快捷方式"><a href="#常用快捷方式" class="headerlink" title="常用快捷方式"></a>常用快捷方式</h2><ul>
<li>dd ： 删除当前行</li>
<li>dG ： 删除当前行 以及以下所有行</li>
<li>ndd ： 删除这个行 以及下面n行</li>
<li>u ：　撤回</li>
<li>ｇｇ　：　跳转到第一行的第一个字母</li>
<li>Ｇ　：　跳转到最后一行的第一个字母</li>
<li>ｓｈｉｆｔ　＋ $  ： 就是跳转到行尾</li>
<li>ｓｈｉｆｔ　＋ ^  : 跳转到行头</li>
<li>i ： 是当前行编辑</li>
<li>o ： 是跳转到下一行编辑</li>
</ul>
<h3 id="清空文件内容"><a href="#清空文件内容" class="headerlink" title="清空文件内容"></a>清空文件内容</h3><ul>
<li>gg -&gt; dG</li>
<li>linux 有一个空的文件</li>
<li>然后 cat &#x2F;dev&#x2F;null  &gt; xxx文件名字</li>
</ul>
<h2 id="系统相关命令"><a href="#系统相关命令" class="headerlink" title="系统相关命令"></a>系统相关命令</h2><ul>
<li>内存 ： free</li>
<li>磁盘 ： df</li>
<li>可能会添加磁盘</li>
<li>可通过这个来判断</li>
<li>后来挂载的一般是vdb的</li>
<li>负载 ： top</li>
<li>load average ： xxx xxx xxx</li>
<li>第一个是5分钟之内的负载</li>
<li>第二个是10分钟</li>
<li>第三个是15分钟</li>
<li>如果任意一个超过十 ，说明当前公司的服务器 比较卡</li>
<li>pid是进程号</li>
<li>user是那个用户</li>
<li>重启的目的 ： </li>
<li>检查是不是硬件有无问题</li>
</ul>
<h2 id="yum-x2F-rpm"><a href="#yum-x2F-rpm" class="headerlink" title="yum&#x2F;rpm"></a>yum&#x2F;rpm</h2><ul>
<li>安装linux软件的方式 联网</li>
<li>yum search xxx</li>
<li>下载下来的一个安装包以rpm存储</li>
<li>yum install xxx</li>
</ul>
<h2 id="通讯命令"><a href="#通讯命令" class="headerlink" title="通讯命令"></a>通讯命令</h2><ul>
<li>ping + ip</li>
<li>telnet ip 端口 :检查对面的端口是不是开放</li>
<li>端口 ： 1-65535</li>
<li>两个机器要在一个网段</li>
<li>ping通就代表是网络ok</li>
</ul>
<h2 id="补充命令"><a href="#补充命令" class="headerlink" title="补充命令"></a>补充命令</h2><ul>
<li>which + 命令</li>
<li>whereis + 命令</li>
<li>查看linux或者某个软件的shell脚本是不是存在</li>
<li>which ： 是查看自己环境变量的命令存在吗</li>
<li>whereis ： 是查看全局变量的名利给的存在吗</li>
</ul>
<h2 id="修改机器名字"><a href="#修改机器名字" class="headerlink" title="修改机器名字"></a>修改机器名字</h2><ul>
<li>hostnamectl ： xxxx</li>
</ul>
<h2 id="解压缩命令"><a href="#解压缩命令" class="headerlink" title="解压缩命令"></a>解压缩命令</h2><ul>
<li>linux 对zip和gz可以解压</li>
<li>zip xxx.zip （-r） xxx文件（这里压缩可以多个）如果是文件夹则要加上-r</li>
<li>代表压缩到xxx.zip里</li>
<li>解压</li>
<li>unzip xxx.zip （-d xxx文件夹）</li>
<li>tar ：</li>
<li>例子 ： tar -cf xxx.tar xxx文件（可以多个）</li>
<li>解压：</li>
<li>例子 ： tar -xf xxx.tar -C xxx文件夹</li>
<li>可以不加-C就是默认解压当前文件目录</li>
<li>压缩：</li>
<li>用z命令</li>
<li>tar -zcf xxx.tar xxx文件（可以多个）</li>
<li>解压：</li>
<li>tar -zxf xxx.tar -C xxx文件夹</li>
<li>我们可以再加上v让他们显示详细得处理文件的过程</li>
<li>zxvf：同上</li>
<li>zxcf：同上</li>
</ul>
<h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><ul>
<li>当用yum安装成功之后 ，可以直接用系统命令启动</li>
<li>比如 ： service name start|status|restart|stop  : centos6</li>
<li>syystemctl start|status|restart|stop name : centos7</li>
<li>查看进程</li>
<li>ps -ef</li>
<li>可以进行筛选</li>
<li>ps -ef|grep xxx名字</li>
<li>杀死进程 </li>
<li>kill -9 + 进程号</li>
<li>查端口：</li>
<li>netstat -nlp | grep xxxname</li>
<li>通过</li>
<li>:::80</li>
<li>ip:80</li>
<li>0.0.0.0:80</li>
<li>我们可以通过外部机器访问这个端口进入服务界面</li>
<li>kill -9 $(pgrep -f xxx名字)</li>
<li>下面的会强制把他们全杀掉 ， 包括子进程</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop</title>
    <url>/2022/11/11/11-10/</url>
    <content><![CDATA[<h1 id="hadoop简介"><a href="#hadoop简介" class="headerlink" title="hadoop简介"></a>hadoop简介</h1><ul>
<li>以阿帕奇软件 ，hadoop为主的生态圈 </li>
<li>狭义就是Hadoop</li>
</ul>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul>
<li>hdfs ： 存储海量的数据</li>
<li>mapreduce ： 计算分析</li>
<li>yarn ： 资源和作业的调度</li>
</ul>
<h3 id="观点"><a href="#观点" class="headerlink" title="观点"></a>观点</h3><ul>
<li>存储是第一位的</li>
<li>计算是第二位的</li>
</ul>
<h2 id="学习介绍"><a href="#学习介绍" class="headerlink" title="学习介绍"></a>学习介绍</h2><ul>
<li>官网进行学习</li>
<li><code>hadoop.apache.org</code></li>
<li>但是后面的其余框架对应的官网就是 把hadoop 改掉</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">The Apache Hadoop software library <span class="keyword">is</span> a framework that allows <span class="keyword">for</span> the distributed processing <span class="keyword">of</span> <span class="keyword">large</span> data sets across clusters <span class="keyword">of</span> computers <span class="keyword">using</span> simple programming models. It <span class="keyword">is</span> designed <span class="keyword">to</span> scale up <span class="keyword">from</span> single servers <span class="keyword">to</span> thousands <span class="keyword">of</span> machines, <span class="keyword">each</span> offering <span class="keyword">local</span> computation <span class="keyword">and</span> <span class="keyword">storage</span>. Rather than rely <span class="keyword">on</span> hardware <span class="keyword">to</span> deliver high-availability, the library itself <span class="keyword">is</span> designed <span class="keyword">to</span> detect <span class="keyword">and</span> handle failures at the application layer, so delivering a highly-available service <span class="keyword">on</span> top <span class="keyword">of</span> a <span class="keyword">cluster</span> <span class="keyword">of</span> computers, <span class="keyword">each</span> <span class="keyword">of</span> which may be prone <span class="keyword">to</span> failures.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="hadoop模块的简介"><a href="#hadoop模块的简介" class="headerlink" title="hadoop模块的简介"></a>hadoop模块的简介</h3><ul>
<li>hdfs ：</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">A distributed <span class="built_in">file</span> system <span class="keyword">that</span> provides high-throughput access <span class="keyword">to</span> <span class="built_in">application</span> data.</span><br></pre></td></tr></table></figure>

<ul>
<li>mapredurce :</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">A YARN-based system for parallel processing of large <span class="meta">data</span> <span class="meta">sets</span></span><br></pre></td></tr></table></figure>

<ul>
<li>yarm :</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">A framework for <span class="keyword">job </span><span class="keyword">scheduling </span><span class="keyword">and </span>cluster resource management</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="版本以及主流"><a href="#版本以及主流" class="headerlink" title="版本以及主流"></a>版本以及主流</h3><ul>
<li>版本 ： 1.x ， 2.x ， 3.x</li>
<li>主流 ： 2.x -》 3.x</li>
<li>公司所用 ： </li>
<li>apache 原生</li>
<li>cdh ： 5.x ， 6.x 从6.3之后开始收费</li>
</ul>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul>
<li>安装的是什么？</li>
<li>Hadoop有什么？</li>
<li>我们只用部署 yarn hdfs 因为mapredurce是java代码人员给我们的 ：都是主从架构的</li>
<li>hdfs ： </li>
<li>namenode : 老大 负责指挥数据的存储</li>
<li>datanode ： 主要负责数据的存储</li>
<li>seconderynamenode ： 负责辅助namenode的</li>
<li>yarn :</li>
<li>resourcemanager : 老大 负责资源分配</li>
<li>nodemanager ： 小弟负责资源分配给xxx</li>
</ul>
<h3 id="部署模式"><a href="#部署模式" class="headerlink" title="部署模式"></a>部署模式</h3><ul>
<li>单点模式 ：所有都在一台机器上</li>
<li>完全分布式模式 ：分布在多台机器上</li>
</ul>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul>
<li>部署平台 ： windows 和linux</li>
<li>一般linux用的多 ，而且在linux上最少2000台</li>
<li>jdk ： 安装java的要求</li>
<li>3.3-目前 ： java8 - 11</li>
<li>3.0-3.2 ： java8</li>
<li>2.7-2.10 ： java8</li>
<li>但是有些的java8 的版本也不行 ，详细参考官网</li>
<li>要下载补丁安装就好</li>
<li>ssh ： 默认centos是安装的，但是ubantu是没安装的</li>
<li>个人要求 ：创建hadoop用户 ，以后我们都用那个用户开发</li>
<li>而且创建 几个文件夹进行规范</li>
<li>app ：app</li>
<li>data ：数据 </li>
<li>log ：监控日志</li>
<li>project ：项目 </li>
<li>shell ： shell脚本</li>
<li>software ： 安装包</li>
<li>以前版本的apche 版本框架 在</li>
<li><code>archive.apache.org/dist</code></li>
<li>部署jdk</li>
<li>hadoop ： 无要求</li>
</ul>
<h3 id="配置开始"><a href="#配置开始" class="headerlink" title="配置开始"></a>配置开始</h3><ul>
<li>把文件解压</li>
<li>配置环境变量</li>
<li>个人 ： 修改 .&#x2F;bashrc </li>
<li>添加 exprot JAVA_HOME&#x3D; xxxx</li>
<li>export PATH&#x3D;${JAVA_HOME}&#x2F;bin:$PATH</li>
<li>export HADOOP_HOME&#x3D;mmm</li>
<li>export PATH&#x3D;${HADOOP_HOME}&#x2F;bin:${HADOOP_HOME}&#x2F;sbin:$PATH</li>
<li>上面xxxx和mmm</li>
<li>分别代表我们的java的和hadoop的解压目录</li>
<li>然后我们导入个人环境变量 ， </li>
<li>source ~&#x2F;.bashrc</li>
<li>然后验证安装 java -version 和 hadoop version</li>
<li>如果成功就代表安装成功了</li>
<li>接下来我们更改hadoop的配置文件</li>
<li>进入到hadoop的etc文件夹里</li>
<li>编辑 core-site.xml</li>
<li>在两个标签之间输入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://你的机器名:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>编辑hdfs-site.xml</li>
<li>在两个标签之间输入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>接下来我们进行开放访问 ， 我们先执行</li>
<li><code>ssh user@hostname [com]</code> 进行登录</li>
<li>然后通过输入密码登陆一次</li>
<li>上一条的的命令如果加上com则代表登录并执行这个命令</li>
<li>然后我们要设置免密登录</li>
</ul>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -P <span class="string">&#x27;&#x27;</span> -f ~<span class="regexp">/.ssh/i</span>d_rsa</span><br><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub &gt;&gt; ~<span class="regexp">/.ssh/</span>authorized_keys</span><br><span class="line">chmod <span class="number">0600</span> ~<span class="regexp">/.ssh/</span>authorized_keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>然后继续上述的命令：看看能不能免密登录</li>
<li>成功之后，我们要更改文件格式 ： 相当于初始化操作</li>
<li>然后我们启动dhfs</li>
<li><code>start-dfs.sh</code></li>
<li>然后我们访问 <code>http://你的虚拟机ip:9870/</code></li>
<li>成功看见hadoop的web页面就好了</li>
<li>然后可以更简便的方法</li>
<li>在c盘找到 windows 然后进去system32</li>
<li>然后进去driver</li>
<li>然后进入etc文件</li>
<li>然后在hosts文件最后的加上我们在linux里的主机和ip映射</li>
<li>就可以通过 <code>http://你的虚拟机名称:9870/</code>访问我们的hadoop了</li>
</ul>
<h3 id="部署yarn"><a href="#部署yarn" class="headerlink" title="部署yarn"></a>部署yarn</h3><ul>
<li>对于部署单点的yarn</li>
<li>我们可以通过配置yarn的配置文件</li>
<li><code>mapred-site.xml</code> 和<code>yarn-site.xml</code></li>
</ul>
<h4 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><ul>
<li>对于这个文件我们这样更改</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><ul>
<li>对于这个文件我们进行</li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">&lt;configuration&gt;</span></span><br><span class="line"><span class="comment">#设置web访问的端口</span></span><br><span class="line"> <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.resourcemanager.webapp.address<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>你的主机名称:9999<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置运行在那个虚拟机上</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.resourcemanager.hostname<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>你的主机名<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面两个要基本配置</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>mapreduce_shuffle<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.nodemanager.env-whitelist<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_HOME,PATH,LANG,TZ,HADOOP_MAPRED_HOME<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="variable">&lt;/configuration&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>配置完成之后我们要进行<code>start-yarn.sh</code></li>
<li>然后开启这个服务 ： 我们可以通过访问浏览器的 <code>xxx你的ip:9999</code> ,访问这个服务</li>
<li>这样我们的单点就算配置完成了</li>
</ul>
<h2 id="关于分布式的配置"><a href="#关于分布式的配置" class="headerlink" title="关于分布式的配置"></a>关于分布式的配置</h2><ul>
<li>分布式的配置就是把单点的配置分到多台机器上</li>
<li>比如 ： 把hdfs的namenode 和 datanode 和secondnamenode分到三台机器上</li>
<li>把yarn的部署也分到三台机器上</li>
</ul>
<h3 id="开始分布式"><a href="#开始分布式" class="headerlink" title="开始分布式"></a>开始分布式</h3><ul>
<li>首先我们要明确一点 ： namenode是老大 ，只能有一个</li>
<li>datanode是小弟 ：  可以有多个</li>
<li>secondnamenode ：是秘书只能有一个</li>
<li>对于yarn ： resourcemanager只能有一个</li>
<li>而 ：nodemanagers ：可有多个</li>
</ul>
<h4 id="开始之前的配置"><a href="#开始之前的配置" class="headerlink" title="开始之前的配置"></a>开始之前的配置</h4><ul>
<li>关于hdfs和上面部署的一样</li>
<li>只不过在配置免密登录的时候不同</li>
<li>因为我们现在要做三台机器互相免密</li>
<li>所以我们要用</li>
<li><code>ssh-keygen -t rsa</code> 然后三次回车生成公钥和私钥</li>
<li>然后三台机器都要用一遍</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> 第一台机器名</span><br><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> 第二台机器名</span><br><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> 第三台机器名</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>然后分别对三台机器用</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ssh <span class="symbol">hadoop@</span>第一台机器名</span><br><span class="line">ssh <span class="symbol">hadoop@</span>第二台机器名</span><br><span class="line">ssh <span class="symbol">hadoop@</span>第三台机器名</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>最后分别ssh一下然后如果能成功就代表成功了</li>
</ul>
<h4 id="hdfs"><a href="#hdfs" class="headerlink" title="hdfs"></a>hdfs</h4><ul>
<li><code>core-site.xml</code></li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;configuration&gt;</span></span><br><span class="line"><span class="comment">#设置存储位置</span></span><br><span class="line"><span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>hadoop.tmp.dir<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>/home/hadoop/data/hadoopdate<span class="variable">&lt;/value&gt;</span></span><br><span class="line"> <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="comment">#设置namenode在哪一台机器上运行</span></span><br><span class="line"><span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>fs.defaultFS<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>hdfs://主机器的名称:9000<span class="variable">&lt;/value&gt;</span></span><br><span class="line"> <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="variable">&lt;/configuration&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>-<code>workers</code> </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">第一台机器的名称</span><br><span class="line">第二台机器的名称</span><br><span class="line">第三台机器的名称</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>hdfs-site.xml</code></li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;configuration&gt;</span></span><br><span class="line"> <span class="comment">#下面的values代表是几台机器，我这个是三台机器</span></span><br><span class="line"> <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>dfs.replication<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>3<span class="variable">&lt;/value&gt;</span></span><br><span class="line">  <span class="variable">&lt;/property&gt;</span></span><br><span class="line">  <span class="comment">#设置secondarynamenode的端口和在哪一台机器上</span></span><br><span class="line"> <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>dfs.namenode.secondary.http-address<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>bigdata4:9868<span class="variable">&lt;/value&gt;</span></span><br><span class="line">  <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="comment">#同上一个</span></span><br><span class="line"> <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>dfs.namenode.secondary.https-address<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>bigdata4:9869<span class="variable">&lt;/value&gt;</span></span><br><span class="line">  <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="variable">&lt;/configuration&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>然后三台机器都要配置相同的环境变量</li>
</ul>
<h4 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h4><ul>
<li><code>mapred-site.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>yarn-site.xml</code></li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;configuration&gt;</span></span><br><span class="line"><span class="comment">#设置resourcemanager其所占用的端口</span></span><br><span class="line"> <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.resourcemanager.webapp.address<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>bigdata5:9999<span class="variable">&lt;/value&gt;</span></span><br><span class="line">  <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="comment">#设置resourcemanager其所在的机器</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.resourcemanager.hostname<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>bigdata5<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="comment">#下面两个是正常yarn的配置文件</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>mapreduce_shuffle<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.nodemanager.env-whitelist<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_HOME,PATH,LANG,TZ,HADOOP_MAPRED_HOME<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="variable">&lt;/configuration&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>同样三台机器也要配置相同的文件</li>
<li>然后我们要在我们的namenode机器上</li>
<li>开始初始化： <code>hdfs namenode -format</code></li>
<li>然后我们在namenode上开始运行<code>start-dfs.sh</code></li>
<li>然后我们在resourcemanager上开始运行<code>start-yarn.sh</code></li>
<li>然后我们可以用jps查看每个机器的进程</li>
<li>查看是不是符合我们的想法</li>
</ul>
<h3 id="关于datanode缺失"><a href="#关于datanode缺失" class="headerlink" title="关于datanode缺失"></a>关于datanode缺失</h3><ul>
<li>因为默认hadoop有一个id文件是在<code>/tmp/hadoop-hadoop/dfs</code>下的</li>
<li>我们默认启动的时候可能有多个原因 ，造成生成的id不一致</li>
<li>比如 ； 我们忘记关闭hadoop服务之类的，或者卸载的时候忘记删掉他了</li>
<li>这些都会造成id不一致的问题</li>
<li>解决方法： </li>
<li>如果dfs文件夹中没有重要的数据，那么删除dfs文件夹，再重新运行下列指令（格式化指令）</li>
<li>如果dfs文件中有重要的数据，那么在dfs&#x2F;name目录下找到一个current&#x2F;VERSION文件，记录clusterID并复制。然后dfs&#x2F;data目录下找到一个current&#x2F;VERSION文件，将其中clustreID的值替换成刚刚复制的clusterID的值即可</li>
</ul>
<h2 id="hdfs的命令"><a href="#hdfs的命令" class="headerlink" title="hdfs的命令"></a>hdfs的命令</h2><ul>
<li>创建文件夹 <code>hdfs dfs -mkdir xxx</code> : 创建xxx文件夹，可以多层创建文件夹</li>
<li>创建文件<code>hdfs dfs -touchz path</code></li>
<li>复制文件<code>hdfs dfs -cp 源目录 目标路径</code> ：这个是把整个文件夹结构都cp过去：属于hdfs的内部操作不是上传下载</li>
<li>移动文件<code>hdfs dfs -mv 源目录 目标目录</code></li>
<li>赋予权限<code>hdfs dfs -chmod 权限参数 </code></li>
<li>上传文件<code>hdfs dfs -put 源文件夹路径 目标文件夹路径</code></li>
<li>上传文件<code>hdfs dfs -copyFromLocal 源文件夹 目标文件夹</code></li>
<li>上传文件且删除本地文件<code>hdfs dfs -moveFromLocal 源文件 目标文件</code></li>
<li>下载文件<code>hdfs dfs -get 源文件夹路径 目标文件夹路径</code></li>
<li>查看文件内容 <code>hdfs dfs -cat path</code>从头看这个文件</li>
<li>查看文件内容 <code>hdfs dfs -tail path</code>查看这个文件的最后1k</li>
<li>删除文件<code>hdfs dfs -rm 文件路径</code></li>
<li>删除文件夹<code>hdfs dfs -rm -R 文件夹</code></li>
</ul>
<h2 id="javaapi的方式操作hdfs"><a href="#javaapi的方式操作hdfs" class="headerlink" title="javaapi的方式操作hdfs"></a>javaapi的方式操作hdfs</h2><ul>
<li><p>单元测试 ： 代表我们可以 ， 单独运行某个方法</p>
</li>
<li><p>进行部份调试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hdfsapi</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">mkdir</span><span class="params">()</span> <span class="keyword">throws</span> IOException, URISyntaxException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 获取程序入口</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">org</span>.apache.hadoop.conf.Configuration(); <span class="comment">//  配置参数</span></span><br><span class="line">        <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://192.168.41.132:9000&quot;</span>); <span class="comment">//创建uri作为要连接的地址和端口</span></span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get( uri , conf , <span class="string">&quot;hadoop&quot;</span>); <span class="comment">// 开始链接 ，三个参数分别是其所在地地方，配置参数 ，用户名</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/ggd&quot;</span>); <span class="comment">// 路径</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">mkdir</span> <span class="operator">=</span> fs.mkdirs(path); <span class="comment">// 判断是不是执行成功</span></span><br><span class="line">        Assert.assertEquals(<span class="literal">true</span> , mkdir);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>实现创建文件夹并移动且改名</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hdfsapi</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> FileSystem  fs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span> , <span class="string">&quot;hdfs://192.168.41.132:9000&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span> ,<span class="string">&quot;hadoop&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs = FileSystem.get(conf);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移动之前的文件存储路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> args[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 移动之后的文件存储路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">det</span> <span class="operator">=</span> args[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">hozhui</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要上传的文件目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pathlocalfile</span> <span class="operator">=</span> args[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">date</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">up</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">down</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">6</span>]);</span><br><span class="line"></span><br><span class="line">        String[] string = <span class="keyword">new</span> <span class="title class_">String</span>[args.length - <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">        System.arraycopy(args , <span class="number">7</span> , string , <span class="number">0</span> , args.length - <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        makeream(hozhui,url,det,pathlocalfile,date , up ,down , string);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//rm(20221115 , 1 , 1);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rm</span><span class="params">(<span class="type">int</span> m , <span class="type">int</span> up ,<span class="type">int</span> down )</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过递归调用本身函数，进行递归调用，删除不同日期的文件夹以及</span></span><br><span class="line">        <span class="keyword">while</span> (up &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            rm(m+<span class="number">1</span> , --up , <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 同上</span></span><br><span class="line">        <span class="keyword">while</span> (down &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            rm(m-<span class="number">1</span> , <span class="number">0</span> ,--down);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把数字改变成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> String.valueOf(m);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基础路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/data/dt=&quot;</span> + uri);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">path1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/data/hive&quot;</span> + <span class="string">&quot;/&quot;</span> + uri + <span class="string">&quot;-01.data&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs.delete(path);</span><br><span class="line">            fs.delete(path1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makeream</span><span class="params">(String hozhui, String url , String det ,String pathlocalfile , <span class="type">int</span> nowday , <span class="type">int</span> up , <span class="type">int</span> down , String ...args)</span> &#123;</span><br><span class="line">        <span class="comment">// 基礎路徑</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dataurl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            String[] arg1 = <span class="keyword">new</span> <span class="title class_">String</span>[args.length-<span class="number">1</span>];</span><br><span class="line">            System.arraycopy(args , <span class="number">1</span> , arg1 ,<span class="number">0</span> ,args.length-<span class="number">1</span>);</span><br><span class="line">            dataurl = args[<span class="number">0</span>];</span><br><span class="line">            makeream(hozhui,url,det,pathlocalfile,nowday,up,down,arg1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dataurl = String.valueOf(nowday);</span><br><span class="line">            <span class="comment">// 通过递归的方式 ， 进行创建文件夹等操作</span></span><br><span class="line">            <span class="keyword">while</span> (up &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                makeream(hozhui,url,det,pathlocalfile,nowday+<span class="number">1</span> , --up , <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (down &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                makeream(hozhui,url,det,pathlocalfile,nowday-<span class="number">1</span> , <span class="number">0</span> ,--down);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取文件名字</span></span><br><span class="line">        String[] split = pathlocalfile.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filname</span> <span class="operator">=</span> split[split.length-<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 上传的文件路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">pathfile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(pathlocalfile);</span><br><span class="line">        <span class="comment">// 最后的文件的名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">settotal</span> <span class="operator">=</span> det+ <span class="string">&quot;/&quot;</span> + dataurl + hozhui;</span><br><span class="line">        <span class="comment">// 刚开始创建的文件目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">urltotal</span> <span class="operator">=</span> url + dataurl;</span><br><span class="line">        <span class="comment">// 创建文件夹的Path</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(urltotal);</span><br><span class="line">        <span class="comment">// 移动前的文件路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">pathfilehdfs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>( path + <span class="string">&quot;/&quot;</span> + filname);</span><br><span class="line">        <span class="comment">// 新的名字文件路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">newname</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(settotal);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 要移动到的路径</span></span><br><span class="line"><span class="comment">//        Path detPath = new Path(url1);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后来的文件目录</span></span><br><span class="line">        <span class="comment">// Path detpathfile = new Path(det + &quot;/&quot; + filname);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!fs.exists(<span class="keyword">new</span> <span class="title class_">Path</span>(det)))&#123;</span><br><span class="line">                fs.mkdirs(<span class="keyword">new</span> <span class="title class_">Path</span>(det));</span><br><span class="line">            &#125;</span><br><span class="line">            fs.mkdirs(path);</span><br><span class="line">            fs.copyFromLocalFile(pathfile , path);</span><br><span class="line">            <span class="comment">// fs.rename(pathfilehdfs , detPath);</span></span><br><span class="line">            fs.rename(pathfilehdfs , newname);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>单词统计</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">Map</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">wordcount</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> FileSystem fs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span> , <span class="string">&quot;hdfs://192.168.41.132:9000&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span> ,<span class="string">&quot;hadoop&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs = FileSystem.get(conf);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="literal">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">        wordcounts(<span class="string">&quot;/2.log&quot;</span> , <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="literal">void</span> wordcounts( <span class="built_in">String</span> path ,  <span class="built_in">String</span> regx ) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">String</span> basic = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>( FSDataInputStream fis = fs.open(<span class="keyword">new</span> Path(path));</span><br><span class="line">             OutputStream outputStream = <span class="keyword">new</span> FileOutputStream( <span class="keyword">new</span> File(<span class="string">&quot;D:\\ bg1.txt&quot;</span>) , <span class="literal">false</span>);</span><br><span class="line">             InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;D:\\ bg1.txt&quot;</span>));</span><br><span class="line">             )</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            IOUtils.copyBytes(fis,outputStream,<span class="number">4096</span> , <span class="literal">true</span>);</span><br><span class="line">            byte[] buffer = <span class="keyword">new</span> byte[<span class="number">1024</span>];</span><br><span class="line">            int len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((len = inputStream.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                basic = <span class="keyword">new</span> <span class="built_in">String</span>(buffer, <span class="number">0</span>, len);</span><br><span class="line">                System.out.println(basic);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="built_in">String</span>[] split = basic.split(regx);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">Map</span>&lt;<span class="built_in">String</span> , Integer&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (int i=<span class="number">0</span>;i&lt;split.length;i++)&#123;</span><br><span class="line">                result.put(split[i] , result.getOrDefault(split[i] , <span class="number">0</span> )+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">                result.forEach<span class="function"><span class="params">((k,v)-&gt;System.out.println(k+<span class="string">&quot;,&quot;</span>+v))</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">            <span class="title">int</span>[] <span class="title">flag</span> = <span class="title">new</span> <span class="title">int</span>[<span class="title">split</span>.<span class="title">length</span>];</span></span><br><span class="line"><span class="function">            <span class="title">for</span> <span class="params">(int i =<span class="number">0</span>; i&lt; split.length; i++)</span>&#123;</span></span><br><span class="line"><span class="function">                <span class="title">for</span> <span class="params">(int j = <span class="number">0</span>; j&lt; split.length;j++)</span>&#123;</span></span><br><span class="line"><span class="function">                    <span class="title">if</span> <span class="params">(split[i].equals(split[j]))</span>&#123;</span></span><br><span class="line"><span class="function">                        <span class="title">flag</span>[<span class="title">i</span>]++;</span></span><br><span class="line"><span class="function">                    &#125;<span class="title">else</span>&#123;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">                    &#125;</span></span><br><span class="line"><span class="function">                &#125;</span></span><br><span class="line"><span class="function">            &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">            <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;--------------------------------------------------------&quot;</span>)</span>;</span></span><br><span class="line"><span class="function">            <span class="title">for</span> <span class="params">(int i =<span class="number">0</span>; i&lt;split.length-<span class="number">1</span>;i++)</span>&#123;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">                <span class="title">if</span> <span class="params">(!(split[i].equals(split[i+<span class="number">1</span>])))</span>&#123;</span></span><br><span class="line"><span class="function">                    <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(split[i] + <span class="string">&quot;\t&quot;</span> + flag[i])</span>;</span></span><br><span class="line"><span class="function">                &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">            &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//            <span class="title">System</span>.<span class="title">out</span>.<span class="title">print</span><span class="params">(<span class="string">&quot;\n&quot;</span>)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//            <span class="title">for</span> <span class="params">(int i =<span class="number">0</span>; i&lt; flag.length;i++)</span>&#123;</span></span><br><span class="line"><span class="function">//                <span class="title">System</span>.<span class="title">out</span>.<span class="title">print</span><span class="params">(flag[i])</span>;</span></span><br><span class="line"><span class="function">//                <span class="title">System</span>.<span class="title">out</span>.<span class="title">print</span><span class="params">(<span class="string">&quot;\t&quot;</span>)</span>;</span></span><br><span class="line"><span class="function">//            &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">            <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;--------------------------------------&quot;</span>)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        &#125; <span class="title">catch</span> <span class="params">(IOException e)</span> &#123;</span></span><br><span class="line"><span class="function">            <span class="title">e</span>.<span class="title">printStackTrace</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<h3 id="关于文件的存储"><a href="#关于文件的存储" class="headerlink" title="关于文件的存储"></a>关于文件的存储</h3><ul>
<li>架构设计 ： 面试必问</li>
<li>namenode —–nn</li>
<li>负责对外的访问接口</li>
<li>负责块的映射</li>
<li>元数据 ； 描述数据的数据</li>
<li>文件名称</li>
<li>文件的目录</li>
<li>文件的属性，权限，创建时间，副本数据</li>
<li>blockmap ： 块映射</li>
<li>一个 文件被分割成多个数据块，</li>
<li>块映射不会永久化这个存储</li>
<li>是通过集群运行的时候dn定期发送blockreport给nn进行维护</li>
<li>控制其数据块在哪一个节点上的</li>
<li>nn作用 ： 管理文件的命名空间 ，其实就算维护文件系统树的文件以及文件夹</li>
<li>是以两种的方式永久的存储在磁盘</li>
<li>镜像文件 ： fsimage</li>
<li>编辑日志文件 editlogs</li>
<li>seconderynamenode ——snn</li>
<li>去老大的节点上拿镜像文件和日志文件，进行合并和备份，然后换给nn</li>
<li>datanode —–dn</li>
<li>每个节点都会有这个进程</li>
<li>负责关于客户端的文件的读写</li>
<li>负责存储数据</li>
<li>存储数据块，以及对于数据块的校验</li>
<li>每隔3秒发送一次心跳给namenode ，告诉你我还在</li>
<li>每个一定时间（6h）发送一次块报告,这个报告，是扫描磁盘和内存之中的数据一不一样</li>
<li>目的 ： 生产上 ： 可能会发生文件块丢失或者损坏</li>
<li></li>
</ul>
<h2 id="mapreduce"><a href="#mapreduce" class="headerlink" title="mapreduce"></a>mapreduce</h2><ul>
<li>简介 ： 其设计理念是计算向数据靠拢，采用分而治之的策略，将庞大的数据分为很多个很多个小切片，并且为每个小切片单独的启动一个map任务</li>
<li>适合mapredurce处理的数据集要满足一个前提：待处理的数据集可以分解成许多更小的数据集，且每一个更小的数据集都可以并行的处理</li>
<li>其采用的是主从架构（master&#x2F;Slave），就是一个主服务器多个从服务器（salve），master上运行jobTracker，slaver运行TaskTracker</li>
</ul>
<h3 id="mapreduce体系架构"><a href="#mapreduce体系架构" class="headerlink" title="mapreduce体系架构"></a>mapreduce体系架构</h3><ul>
<li>其主要是由四个部分组成 ： 分别是Client , JobTracker,TaskTracker以及Task</li>
<li>Client ： 用户编写的Mapredurce程序通过Client提交到jobTracker</li>
<li>jobTracker(运行在主服务器上) : 负责监控和资源调度</li>
<li>监控所有的TaskTracker与job的健康情况，一旦发现失败，就把相应的任务转移到其他的节点</li>
<li>其会跟踪任务的执行调度，资源使用量，并将这些信息告诉任务调度器（TaskScheduler），而调度器会在资源调度器出现空闲时，选择合适的任务去使用这些资源</li>
<li>jobTracker（运行在服务器） </li>
<li>TaskTracker会周期性的通过心跳将本节点上资源的使用情况和任务运行进度汇报给jobTracker，同时接受jobTracker发送过来的命令并执行相应的操作（如 ： 启动新任务 ，杀死任务等）</li>
<li>TaskTracker使用“slot”等量划分本节点上的资源量（CPU ，内存）。一个Task获取到一个slot后才有机会运行，而hadoop调度器的作用就是将各个TaskTracker上的空闲slot分配给Task使用。slot分为Map slot和Reduce slot两种，分别提供Map Task和Redurce Task使用</li>
<li>Task</li>
<li>Map Task和Redurce Task 均由TaskTracker</li>
</ul>
<h3 id="mapreduce的工作流程"><a href="#mapreduce的工作流程" class="headerlink" title="mapreduce的工作流程"></a>mapreduce的工作流程</h3><ul>
<li>一个大的mapredurce任务，首先会被分为为若干个Map任务在多台机器上执行运行（map任务通常运行在存储节点上），每一个map任务会输出一个&lt;key , value&gt;形式的中间结果，一个map任务只有全部执行完成之后才会进行reduce任务，map的输出结果&lt;key, value&gt;（存储在本地磁盘） ， 具有相同的key会被发送到同一个reduce任务</li>
<li>注意 ：不同的map之间不会有通信</li>
<li>不同的reduce之间也不会</li>
<li>用户不能显式的从一台机器向另外一台机器发送消息，所有的信息交换都是通过Mapredurce框架自身去实现</li>
<li>map的输入文件，redurce任务的输出结果都是保存在hdfs分布式文件系统中，map的输出结果保存在本地磁盘文件中</li>
<li>当一个map任务处理全部结束之后，reduce任务才能开始去取相应的数据</li>
<li>只有map任务需要考虑数据局限性，实现计算向数据靠拢，reduce无需考虑数据局限性</li>
</ul>
<h4 id="各阶段执行内容"><a href="#各阶段执行内容" class="headerlink" title="各阶段执行内容"></a>各阶段执行内容</h4><ul>
<li>分为 ：5个阶段 预处理，map，shuffle，reduce，输出</li>
<li>预处理 ： 由inputFormat 进行格式验证以及逻辑上的分区inputSplit ， inputSplit经过redodrdreader</li>
<li>根据inputSplit的信息来处理inputSplit中的具体记录，转换为键值对 ，输入给map</li>
<li>map ： 接受来自RR键值对，进行分区，排序，合并，归并，得到&lt;key , value-list&gt;形式的中间结果，输入给reduce，此处包括map端的shuffle和reduce端的shuffle</li>
<li>reduce ： 接受shuffle输出的&lt;key , value&gt;,执行用户子自定义，输出给outputFromat</li>
<li>输出 ： outputFromat，模块会验证输出目录是不是已经存在以及输出结果是不是符合配置文件中的配置类型，如果满足，就输出reduce的结果到分布式文件系统</li>
</ul>
<h4 id="map的shuffle"><a href="#map的shuffle" class="headerlink" title="map的shuffle"></a>map的shuffle</h4><ul>
<li>过程有四部</li>
<li>输入数据并执行map任务</li>
<li>map任务结果输出，写入缓存</li>
<li>溢写 ： 如果输出结果超过了一定的比例，每一次溢写会在磁盘上生成一个磁盘文件，写入之前进行会分区，，排序，如果指定了commbiner还可以进行合并，这样经过溢写的磁盘文件就包含了多个分区，且分区内部都是经过排序的</li>
<li>merge ： 随着map任务的进行，当有多个溢写文件时（就是大于等于2的适合），就会发现merge，生成一个更大的磁盘文件，这个大的溢写文件也是经过排序和分区的，默认情况下每10个溢写会变成一个大文件，通常在merge过程中，如果文件数量大于3则进行combine操作，从而减少磁盘的数据量，如果只有一两个溢写，合并操作得不偿失</li>
</ul>
<h4 id="reduce的shuttle"><a href="#reduce的shuttle" class="headerlink" title="reduce的shuttle"></a>reduce的shuttle</h4><ul>
<li>领取数据 ： 经过map的suffle后，map的输出结果保存在磁盘，此时，需要将磁盘数据取回到reduce机器，此时如果线程被占满，同样会和map端一样开启溢写操作，reduce通过RPC询问JobTracker是不是还拥有未完成的map任务，如果有，将数据提取到reduce机器上，此时实际上是多个reduce机器，同时多线程从map机器领回数据</li>
<li>merge ： 一个map的shuffle结果因为拥有多个分区，所以会有不同的reduce机器取回自己的数据，而每一个reduce也从不同的map机器取回数据，如果每个reduce机器内存达到阈值，就进行溢写操作，溢写的时候一般有很多键值对可以进行merge，如果定义了combiner还可以进行合并，进行溢写操作的过程中还可以进行combine。并非是一个reduce程序从map机器上取回数据就生成一个溢写文件，而是缓存不够用，则发生溢写，如果缓存够用，则是直接在内存里进行操作</li>
<li>把数据输出给map任务（对一个reduce而言）：执行用户自定义的逻辑，最终输出</li>
</ul>
<h2 id="mapredurce里的数据类型"><a href="#mapredurce里的数据类型" class="headerlink" title="mapredurce里的数据类型"></a>mapredurce里的数据类型</h2><ul>
<li>intWritable</li>
<li>longWritable</li>
<li>等等，</li>
<li>就是基本数据类型加上Writable</li>
<li>在redurce里数据类型也是一样的</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop面试会问</title>
    <url>/2022/11/17/11-17/</url>
    <content><![CDATA[<h1 id="hdfs的写流程"><a href="#hdfs的写流程" class="headerlink" title="hdfs的写流程"></a>hdfs的写流程</h1><ul>
<li>面试|必备</li>
<li>通过客户端，写文件</li>
<li>首先客户端会调用 FileSystem 的creat</li>
<li>去和namenode进行通信 ， 是通过rpc通信</li>
<li>然后namenode会去检查这个路径的文件是不是存在并且检查你的权限</li>
<li>假如都ok ， 则执行你的操作</li>
<li>但是这个时候还没有写数据</li>
<li>是不关联任何block的</li>
<li>而namenode根据上传文件的大小，和块的大小，以及副本数</li>
<li>计算要上传多少块以及后续要在datanode上的什么位置</li>
<li>最后把信息返回到客户端</li>
<li>就是 ： fsdataoutputstream</li>
<li>Client 调用 fdsdataoutputstream</li>
<li>将第一个块的第一个副本数写第一个dn节点</li>
<li>写完去写第二个</li>
<li>然后是第三个</li>
<li>当三个都写完了 ， 会返回一个ack package</li>
<li>把确认包给dn2</li>
<li>当dn2确认并加上自己的</li>
<li>然后给dn3，同上</li>
<li>最后将ack package 返回给 fdsdataoutputstream</li>
<li>上面只是对于第一个块</li>
<li>当所有的块全部写完的时候，我们会调用</li>
<li>这个流对象的close方法</li>
<li>告诉namenode ，文件写入成功</li>
</ul>
<h1 id="hdfs读操作"><a href="#hdfs读操作" class="headerlink" title="hdfs读操作"></a>hdfs读操作</h1><ul>
<li>面试|必备</li>
<li>Cilent调用FS.open(filepath)</li>
<li>nn和pc进行通信，返回该文件的部分或者全部的block列表</li>
<li>以fdsdatainputstream的形式</li>
<li>Client的FSDDataInputstream的read方法</li>
<li>会去和最近的dn进行匹配，读取完成</li>
<li>会check，假如ok，就关闭通信</li>
<li>假如读取失败</li>
<li>会记录dn+block信息</li>
<li>下次就也不会从这个节点读取，转而从其他的节点读取</li>
<li>然后会去和第二块的最近的dn进行读取，以此类推</li>
<li>当整个block全部读取完之后，文件还没读取完，就会继续调用fs的方法进行下一次block的读取</li>
<li>以此类推</li>
<li>最后用close方法关闭</li>
</ul>
<h1 id="hdfs的副本放置策略"><a href="#hdfs的副本放置策略" class="headerlink" title="hdfs的副本放置策略"></a>hdfs的副本放置策略</h1><ul>
<li>机架</li>
<li>生产上读写操作，选择dn节点进行读取</li>
<li>第一副本 ： </li>
<li>放置在client上传的dn节点</li>
<li>client 不在dn节点 ，就随机选择一个dn</li>
<li>第二副本 ： </li>
<li>放置在第一个副本不同的机架上的一个dn节点</li>
<li>第三副本 ： </li>
<li>和第二副本相同机架但是不同节点</li>
<li>补充 ；</li>
<li>副本数是三</li>
<li>上述都是以副本数为3的情况</li>
<li>如果是4就多几个随机</li>
</ul>
<h1 id="hdfs的安全模式"><a href="#hdfs的安全模式" class="headerlink" title="hdfs的安全模式"></a>hdfs的安全模式</h1><ul>
<li>什么时候会发生安全模式</li>
<li>刚启动hadoop的时候</li>
<li>hsdf发生故障的时候 ： 集群文件大量会丢失</li>
<li>人为进入</li>
<li>命令 ： <code>hdfs dfsadmin -safemode &lt;enter | leave | get | wait | forceExit&gt;</code></li>
</ul>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><ul>
<li>kill 命令 不只有一个-9</li>
<li>还有很多 ： 目前我所看见的至少有64个</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">1</span>) SIGHUP     <span class="number">2</span>) SIGINT     <span class="number">3</span>) SIGQUIT     <span class="number">4</span>) SIGILL     <span class="number">5</span>) SIGTRAP</span><br><span class="line"><span class="attribute">6</span>) SIGABRT     <span class="number">7</span>) SIGBUS     <span class="number">8</span>) SIGFPE     <span class="number">9</span>) SIGKILL    <span class="number">10</span>) SIGUSR1</span><br><span class="line"><span class="attribute">11</span>) SIGSEGV    <span class="number">12</span>) SIGUSR2    <span class="number">13</span>) SIGPIPE    <span class="number">14</span>) SIGALRM    <span class="number">15</span>) SIGTERM</span><br><span class="line"><span class="attribute">16</span>) SIGSTKFLT    <span class="number">17</span>) SIGCHLD    <span class="number">18</span>) SIGCONT    <span class="number">19</span>) SIGSTOP    <span class="number">20</span>) SIGTSTP</span><br><span class="line"><span class="attribute">21</span>) SIGTTIN    <span class="number">22</span>) SIGTTOU    <span class="number">23</span>) SIGURG    <span class="number">24</span>) SIGXCPU    <span class="number">25</span>) SIGXFSZ</span><br><span class="line"><span class="attribute">26</span>) SIGVTALRM    <span class="number">27</span>) SIGPROF    <span class="number">28</span>) SIGWINCH    <span class="number">29</span>) SIGIO    <span class="number">30</span>) SIGPWR</span><br><span class="line"><span class="attribute">31</span>) SIGSYS    <span class="number">34</span>) SIGRTMIN    <span class="number">35</span>) SIGRTMIN+<span class="number">1</span>    <span class="number">36</span>) SIGRTMIN+<span class="number">2</span>    <span class="number">37</span>) SIGRTMIN+<span class="number">3</span></span><br><span class="line"><span class="attribute">38</span>) SIGRTMIN+<span class="number">4</span>    <span class="number">39</span>) SIGRTMIN+<span class="number">5</span>    <span class="number">40</span>) SIGRTMIN+<span class="number">6</span>    <span class="number">41</span>) SIGRTMIN+<span class="number">7</span>    <span class="number">42</span>) SIGRTMIN+<span class="number">8</span></span><br><span class="line"><span class="attribute">43</span>) SIGRTMIN+<span class="number">9</span>    <span class="number">44</span>) SIGRTMIN+<span class="number">10</span>    <span class="number">45</span>) SIGRTMIN+<span class="number">11</span>    <span class="number">46</span>) SIGRTMIN+<span class="number">12</span>    <span class="number">47</span>) SIGRTMIN+<span class="number">13</span></span><br><span class="line"><span class="attribute">48</span>) SIGRTMIN+<span class="number">14</span>    <span class="number">49</span>) SIGRTMIN+<span class="number">15</span>    <span class="number">50</span>) SIGRTMAX-<span class="number">14</span>    <span class="number">51</span>) SIGRTMAX-<span class="number">13</span>    <span class="number">52</span>) SIGRTMAX-<span class="number">12</span></span><br><span class="line"><span class="attribute">53</span>) SIGRTMAX-<span class="number">11</span>    <span class="number">54</span>) SIGRTMAX-<span class="number">10</span>    <span class="number">55</span>) SIGRTMAX-<span class="number">9</span>    <span class="number">56</span>) SIGRTMAX-<span class="number">8</span>    <span class="number">57</span>) SIGRTMAX-<span class="number">7</span></span><br><span class="line"><span class="attribute">58</span>) SIGRTMAX-<span class="number">6</span>    <span class="number">59</span>) SIGRTMAX-<span class="number">5</span>    <span class="number">60</span>) SIGRTMAX-<span class="number">4</span>    <span class="number">61</span>) SIGRTMAX-<span class="number">3</span>    <span class="number">62</span>) SIGRTMAX-<span class="number">2</span></span><br><span class="line"><span class="attribute">63</span>) SIGRTMAX-<span class="number">1</span>    <span class="number">64</span>) SIGRTMAX</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这个简单介绍几个 ： </li>
<li>1 ： 重新加载合格进程</li>
<li>9 ： 杀死一个进程</li>
<li>15 ： 正常停止一个进程</li>
</ul>
<h1 id="公司内部的逻辑"><a href="#公司内部的逻辑" class="headerlink" title="公司内部的逻辑"></a>公司内部的逻辑</h1><ul>
<li>一般一个组件都会有一个用户进行管理</li>
<li>比如 ： mysql ： 可以创建一个mysql用户</li>
<li>等</li>
<li>创建数据库的流程 ： </li>
<li><code>create dataase dl2262;</code></li>
<li><code>grant all priviledges on dl2262 identified by &quot;1234546;&quot;</code></li>
<li><code>flush priviledges;</code></li>
</ul>
<h1 id="hdfs生产最佳实践"><a href="#hdfs生产最佳实践" class="headerlink" title="hdfs生产最佳实践"></a>hdfs生产最佳实践</h1><ul>
<li>如何查看hdfs的文件块是不是丢失<br>-<code>hdfs fsck&lt;path&gt;</code></li>
</ul>
<h2 id="hdfs-的block块丢失了如何解决"><a href="#hdfs-的block块丢失了如何解决" class="headerlink" title="hdfs 的block块丢失了如何解决"></a>hdfs 的block块丢失了如何解决</h2><ul>
<li>第一种 ： 不用解决 ，也因为hdfs会自动回复，一般是6h ， 就是dn上传的时候</li>
<li>第二种 ： 手动进行回复</li>
<li><code>hdfs debug recoverLease -path &lt;filename&gt; retries num</code> </li>
<li>后面的是重试次数</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>shell</title>
    <url>/2022/11/02/11-2/</url>
    <content><![CDATA[<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><ul>
<li>文件命名 ： 结尾一般以.sh结尾</li>
<li>不要编译 </li>
<li>文件第一行 ，一般写一个编辑器 ，就比如：#！bin&#x2F;bash</li>
<li>编写脚本</li>
<li>添加权限</li>
<li>chmod添加权限</li>
</ul>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul>
<li>sh .&#x2F;xxx.sh（脚本名字）</li>
<li>如果给予了执行权限就可以直接执行</li>
<li>debug</li>
<li>在 #！bin&#x2F;bash 后面加一个 -x</li>
<li>就可以看见程序运行的过程</li>
<li>还可以用 sh -x xxx脚本名字</li>
</ul>
<h1 id="在shell里定义变量以及引用"><a href="#在shell里定义变量以及引用" class="headerlink" title="在shell里定义变量以及引用"></a>在shell里定义变量以及引用</h1><ul>
<li>用read xx xx xx ：代表要从键盘输入3次，以空格分割 ， 如果要在自变量里面定义空格可以用 “xxx xxx” 这样就可以当成一个变量输入了</li>
<li>key&#x3D;value ： 定义变量</li>
<li>等号前后不能有空格</li>
<li>引用变量则用$xxx（变量的名字）</li>
<li>但是其中有单引号和双引号和反引号的区别</li>
<li>如果是单引号和双引号都是默认定义成字符串</li>
<li>如果是反引号&#96;&#96; 里面的会被解释成系统命令，并且执行</li>
<li>引用变量一般是要通过${} 而不是$</li>
<li>因为如果要拼接字符串的时候 ，我们就可以${name}xxxx（要拼接的内容）</li>
</ul>
<h2 id="特殊的命令"><a href="#特殊的命令" class="headerlink" title="特殊的命令"></a>特殊的命令</h2><ul>
<li>如果要在里面定义参数 ， 则$1代表脚本的第一个需要输入的参数 ， $2 ,$3…要第二个第三个。。。</li>
<li>而$0 :获取当前的文件名字</li>
<li>$? : 返回执行之后的状态 ： 0是正常执行 ， 非0是错误</li>
<li>$*代表所有传入的内容</li>
<li>$#代表传入的数量</li>
<li>$$代表是当前进程的进程号</li>
<li>$@把传入的参数作为一个字符串输出，但是里面仍然认为由多个字符串而$*则是认为他只有一个字符串</li>
<li>转义字符 ： 和c一样</li>
<li>定义数组 ： arr&#x3D;（zs lis ww zl wrm）</li>
<li>获取数组里的元素 ： ${arr[*]} :这个是获取所有的 。 </li>
<li>但是这个里面不能由；</li>
<li>如果要查看单个和java里一样，把【】中的换成从0开始的数字</li>
<li>代表查看数组里的元素个数 ： <code>$&#123;井号arr[*]&#125;</code></li>
<li>两种括号的形式</li>
<li>由子shell执行 ，不会影响到这个shell <code>（）</code></li>
<li>由当前shell执行 ，会影响到这个shell <code>&#123;&#125;</code></li>
<li>权限判断：</li>
<li><code>-r</code> ：读权限</li>
<li><code>-w</code> ：写权限</li>
<li><code>-x</code> ：执行权限</li>
<li><code>-e</code> ：文件是不是存在</li>
<li><code>-d</code> ：是不是目录</li>
<li><code>-f</code> ：是不是文件</li>
<li><code>-c</code> ：是不是字符设备</li>
<li><code>-b</code> ：是不是块设备</li>
<li><code>-s</code> ：文件是不是非空</li>
<li><code>-l</code> ：符号连接</li>
</ul>
<h2 id="对变量以及字符串的操作"><a href="#对变量以及字符串的操作" class="headerlink" title="对变量以及字符串的操作"></a>对变量以及字符串的操作</h2><ul>
<li><code>$&#123;num:-val&#125;</code> : 若num存在则是num , 要不然就是val</li>
<li><code>$&#123;num!=val&#125;</code> : 如果num存在，则是num 要不然就是val 且将num赋值为val</li>
</ul>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><ul>
<li><code>if else</code></li>
<li><code>if condition(条件判断);then</code></li>
<li><code>command</code></li>
<li><code>else</code></li>
<li><code>command</code></li>
<li><code>fi</code> </li>
<li><code>condition</code> ： [] 比如：[ 1 &#x3D;&#x3D; 2 ] 变量以及判断符号前后有空格</li>
<li>值判断 ：</li>
<li>常规的都可以用</li>
<li><code>=</code> 等于</li>
<li><code>==</code>等于</li>
<li><code>-ne</code> 数值不等</li>
<li><code>-eq</code> 数值相等</li>
<li><code>-gt</code> 大于</li>
<li><code>-ge</code> 大于等于</li>
<li><code>-le</code> 小于等于</li>
<li><code>-lt</code> 小于</li>
<li><code>if con; then</code></li>
<li><code>command</code></li>
<li><code>elif con; then</code></li>
<li><code>com</code></li>
<li><code>....</code></li>
<li>后面<code>elif</code>可以无限加</li>
<li>同时也有<code>break</code>和<code>countinue</code></li>
</ul>
<h2 id="与或非"><a href="#与或非" class="headerlink" title="与或非"></a>与或非</h2><ul>
<li>与 <code>||</code></li>
<li>或 <code>&amp;&amp;</code></li>
</ul>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul>
<li><code>for var in con1 con2 con3</code></li>
<li><code>do</code></li>
<li><code>程序段</code></li>
<li><code>done</code></li>
<li><code>for((i=0;i&lt;10;i++))</code></li>
<li><code>do</code></li>
<li><code>程序段</code></li>
<li><code>done</code></li>
</ul>
<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><ul>
<li><code>while【con】</code></li>
<li><code>do</code></li>
<li><code>程序段</code></li>
<li><code>done</code></li>
</ul>
<h2 id="until"><a href="#until" class="headerlink" title="until"></a>until</h2><ul>
<li><code>until【con】</code></li>
<li><code>do</code></li>
<li><code>程序段</code></li>
<li><code>done</code></li>
<li>这个和<code>while</code>相反 ，条件为错，一直执行</li>
<li>上述的程序段中可以用let i++等</li>
<li>这个<code>con</code>可以应用（（））或者中括号都行</li>
</ul>
<h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><ul>
<li><code>case $变量名 in</code></li>
<li><code>&quot;值 1&quot;）</code></li>
<li><code>如果变量的值等于1 ，则执行程序1</code></li>
<li><code>；；</code></li>
<li><code>&quot;值 2&quot;）</code></li>
<li><code>如果变量的值等于2 ，则执行程序2</code></li>
<li><code>；；</code></li>
<li><code>。。。还可以衔接很多的</code></li>
<li><code>*)</code></li>
</ul>
<h2 id="对字符串的操作"><a href="#对字符串的操作" class="headerlink" title="对字符串的操作"></a>对字符串的操作</h2><ul>
<li>字符串的长度 ： <code>$&#123;井号xxx&#125;</code></li>
<li>从下标n处开始进行提取 ： <code>$&#123;xxx:n&#125;</code></li>
<li>从下表为n处提取m个 ： <code>$&#123;xxx:n:m&#125;</code></li>
<li>用new替换xxx中出现的第一个mm ： <code>$&#123;xxx/mm/new&#125;</code></li>
<li>用new替换xxx中出现的所有mm ： <code>$&#123;xxx//mm/new&#125;</code></li>
<li>IFS变量进行字符串分割</li>
<li></li>
</ul>
<h1 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h1><ul>
<li>函数名（）{}</li>
<li>fnction 函数名（）{}</li>
<li>函数的返回值可以应用return来进行结束</li>
</ul>
<h1 id="shell分析工具"><a href="#shell分析工具" class="headerlink" title="shell分析工具"></a>shell分析工具</h1><ul>
<li>cut ：剪</li>
<li>cut[选项参数] filename</li>
<li><code>-f</code> 列号，第几列</li>
<li><code>-f 2 </code>：代表第二列</li>
<li><code>-f 2-</code> ：代表第二列之后的所有</li>
<li><code>-d</code> 分隔符，按照指定的分隔符分割列，默认是\t</li>
<li><code>-c</code> 按照字符切割 后面夹n表示第几列 如-c1</li>
<li><code>awk</code> : 文本分析工具 或者叫 gawk</li>
<li><code>awk[选项参数] &#39;/pattern1&#123;action1&#125; /pattern2/&#123;action2&#125;...&#39; (filename)</code></li>
<li>选项参数</li>
<li><code>-F</code> ：指定输入文件分隔符</li>
<li><code>-v</code> ：赋值一个用户自己定义的变量</li>
<li>打印第一和第二列 ： <code>awk &#39;&#123;print $1，$2&#125;&#39; （filename）</code></li>
<li>awk一般和cat联用 ： <code>cat xxx | awk &#39;&#123;print $1，$2&#125;&#39;</code></li>
<li>也可以这样 ： <code>cat xxx | awk &#39;&#123;print $1&quot;,&quot;$2&#125;&#39;</code> : 这样代表会让其中两列用，分割的形式表示出来</li>
<li>还可以加上 ：<code>cat xxx | awk &#39;BEGINH&#123;print xxx&#125;&#123;print $1&quot;,&quot;$2&#125;END&#123;print mmm&#125;&#39;</code> ：就会在开始及结束的时候分别加上xxx和mmm</li>
<li><code>-f</code> 则是执行脚本</li>
<li>还可以 <code>cat xxx | awk -v i=1 -F &quot;:&quot; &#39;&#123;print $3 +i&#125;&#39;</code> :代表xxx文件的由：分割的第3列都加一在输出</li>
<li>内置变量</li>
<li><code>FILENAME</code> ：文件名</li>
<li><code>NR</code> ： 已读的记录数（行号）</li>
<li><code>NF</code> ： 浏览记录的域的个数（切割后的列的个数）</li>
<li>获取第一行 <code>cat xxx | awk &#39;NR==1&#123;print&#125;&#39;</code></li>
<li>里面的条件&#x3D;&#x3D;可以换成  &gt; &lt; &gt;&#x3D; &lt;&#x3D;</li>
<li></li>
<li><code>sed</code> : 文本替换(回去自己查)</li>
<li>把文本中 d 替换成 m ,每行第一次遇见a才会替换</li>
<li><code>sed -i &#39;s/d/m/&#39;</code> xxx文件名</li>
<li>全文替换</li>
<li><code>sed -i &#39;s/d/m/g&#39;</code> xxx文件名</li>
<li>把值路径替换成&#x2F;root</li>
<li><code>sed -i &#39;s//fata/spark//root</code> xxx文件’</li>
<li>不过会爆错</li>
<li>不过加上\就对了</li>
<li><code>sed -i &#39;s\/fata\/spark\/root&#39;</code> xxx文件’</li>
<li><code>sed -i &#39;s#/root#/data/spark#g&#39;</code> xxx文件</li>
</ul>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul>
<li>模糊式的匹配搜索</li>
<li>pattern</li>
<li>最简单的正则 ： 直接给一个关键字 就是grep的时候</li>
<li>特殊字符</li>
<li>^作为一行的开头 ：比如^a 代表以a开头</li>
<li>$作为一行的结束 ：比如n$ 代表以n结尾</li>
<li>正则可以多种一起应用</li>
<li>比如 ^$代表空行</li>
<li>grep -n显示行号</li>
<li>通配符 ： . 代表匹配一个任意的字符</li>
<li>比如 ： r..t :代表r和t中间有两个字符的</li>
<li>特殊字符 ： * ：代表一个字符出现任意次数</li>
<li>比如 o* 代表o出现任意次数</li>
<li>.*则表示任意一个字符出现任意次数 ，甚至可以匹配空字符串</li>
<li>于是可以和上面的联用 ： ^a.*b$</li>
<li>代表以a开头 b结尾 中间任意字符的</li>
<li>字符区间：</li>
<li>[]表示匹配其中范围内的字符</li>
<li>比如[0-9]* ：任意长度的数字</li>
<li>[0,7] : 0或7</li>
<li>还可以这样写 ： [a-c , b-f]</li>
<li>[ab]* ：代表任意以ab组成的 比如 ：aab<br> abb 等</li>
<li>转义字符 \</li>
<li>当我们要搜索$等关键字的时候</li>
<li>要’反斜杠$’ :表示转义 ，才可以用做搜索</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul>
<li>匹配手机号</li>
<li><code>^1[345678][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$</code></li>
<li><code>^1[345678][0-9]&#123;9&#125;$</code></li>
<li>但是下面的花括号是扩展</li>
<li>要用<code>grep -E ^1[345678][0-9]&#123;9&#125;$ </code>才可以</li>
<li>但是上面的最开始的是都可以支持的</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>mapreduce</title>
    <url>/2022/11/21/11-21/</url>
    <content><![CDATA[<h1 id="续讲Hadoop"><a href="#续讲Hadoop" class="headerlink" title="续讲Hadoop"></a>续讲Hadoop</h1><h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><p>关于mapreduce的操作模式就是模板模式，加上自定义的变量</p>
<h3 id="模板模式-1"><a href="#模板模式-1" class="headerlink" title="模板模式"></a>模板模式</h3><p>关于模板模式，就是三步走</p>
<p>开始阶段 ： map阶段</p>
<p>处理阶段 ： reduce阶段</p>
<p>结束阶段 ： 关闭流并输出</p>
<h3 id="自定义的变量"><a href="#自定义的变量" class="headerlink" title="自定义的变量"></a>自定义的变量</h3><p>BooleanWriteable : 布尔类型</p>
<p>ByteWriteable : Byte类型</p>
<p>DoubleWriteable : double类型</p>
<p>FloatWriteable ：float类型</p>
<p>intWriteable ： int类型</p>
<p>…（等等）</p>
<h3 id="mapreduce的核心方法"><a href="#mapreduce的核心方法" class="headerlink" title="mapreduce的核心方法"></a>mapreduce的核心方法</h3><ul>
<li>input : InputFormat &#x3D;&gt; 如何加载数据</li>
<li>查看源码发现有DBInputFormat 和 FileInputFormat，代表我们可以从db（数据库中），或者文件中加载数据（上述两个是抽象类，我们实例化的时候其实是实例化其子类）</li>
<li>简单来说就是读取数据的方法</li>
<li>默认实例化的时候是实例化 TextInputFormat</li>
<li>关于TextInputFormat ： 其有两个参数<ul>
<li>key 和 value<ul>
<li>key 是 读取文件的位置</li>
<li>value 是 一行一行的内容<ul>
<li>在value中有个属性 判断文件可不可以被切分 ： isSpiltable<ul>
<li>map task 数据 是由 input 的切片数量决定的 ， 当不可被切片的时候对应的数量就是1，对应一个map task</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>creatRecordReader</p>
<h2 id="一个文件加载的时候会被切分成几个切片"><a href="#一个文件加载的时候会被切分成几个切片" class="headerlink" title="一个文件加载的时候会被切分成几个切片"></a>一个文件加载的时候会被切分成几个切片</h2><p>前提 ： 文件可以被切分</p>
<p>当一个文件 在hdfs上的时候是按我们的大小进行切分的 以128m为基础单位</p>
<p>而我们的map的切片是按照blocksize进行切分的简单来说就是以blocksize的大小进行切分</p>
<p>总结  ：</p>
<ul>
<li>文件大小小于128m<ul>
<li>那么切分成1片</li>
</ul>
</li>
<li>如果文件大于128m<ul>
<li>filesize&#x2F;splitesize &#x3D; num 切片数</li>
<li>filesize剩余的部分 ： 和splitesize的10%比较<ul>
<li>如果大，则开启一个切片文件</li>
<li>如果小，则是和上面最后一个合并到一起</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>不能被切分的文件： 某些被压缩文件</p>
<ul>
<li>关于这个切片大小的标准 ：<ul>
<li>在hdfs上是128m</li>
<li>但是在idea上是32m（在源码里能看）</li>
</ul>
</li>
</ul>
<h2 id="redurce-task-个数是由上面决定"><a href="#redurce-task-个数是由上面决定" class="headerlink" title="redurce task 个数是由上面决定?"></a>redurce task 个数是由上面决定?</h2><p>默认是 1</p>
<p>如果要更改要手动更改</p>
<p>setNumReduceTasks(数量)</p>
<p>如果 reduce阶段数量变多</p>
<p>则会把相同的文件拉到一起，就是按照一个规则进行的分区</p>
<p>默认是走的hashcode ： 这个按照规则来分的就是分区</p>
<p>一般来说 ： 分区的结果是 suffler 的输出结果是 reduce的输入</p>
<h3 id="简单需求"><a href="#简单需求" class="headerlink" title="简单需求"></a>简单需求</h3><p>基于phone的存储数据 ，进行分文件存储</p>
<p>比如</p>
<p>13开头的存储在一个上</p>
<p>15开头的在一个文件上</p>
<p>这就要自定义分区</p>
<p>通过继承Partitioner类实现方法然后导入方法</p>
<p>实现getPartition方法进行分区 ： 以下是一个简单的分区函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myPartionit</span> <span class="keyword">extends</span> <span class="title class_">Partitioner</span>&lt;Text , IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPartition</span><span class="params">(Text text, IntWritable intWritable, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (text.toString().equals(<span class="string">&quot;ANALYST&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (text.toString().equals(<span class="string">&quot;CLERK&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (text.toString().equals(<span class="string">&quot;MANAGER&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (text.toString().equals(<span class="string">&quot;PRESIDENT&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (text.toString().equals(<span class="string">&quot;SALESMAN&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们要在我们的主程序中调用这个类 ， test类：就是我们的主类，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sxwang</span></span><br><span class="line"><span class="comment"> * 11 18 14:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * driver</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现问题最少两个参数&quot;</span>);</span><br><span class="line">System.exit(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">        String input=args[<span class="number">0</span>];</span><br><span class="line">String output=args[<span class="number">1</span>];</span><br><span class="line"><span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"><span class="comment">//0.todo... 删除目标路径</span></span><br><span class="line">FileUtils.deletePath(conf,output);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.设置 作业名称</span></span><br><span class="line"><span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;WCAPP&quot;</span>);</span><br><span class="line"><span class="comment">//2.设置map reduce 执行代码的主类</span></span><br><span class="line">job.setJarByClass(test.class);</span><br><span class="line">job.setMapperClass(MyMapper.class);</span><br><span class="line">job.setReducerClass(MyReducer.class);</span><br><span class="line"><span class="comment">//3.指定 oupput kv类型</span></span><br><span class="line">job.setOutputKeyClass(Text.class);</span><br><span class="line">job.setOutputValueClass(IntWritable.class);</span><br><span class="line">job.setNumReduceTasks(<span class="number">6</span>);</span><br><span class="line">job.setPartitionerClass(myPartionit.class);</span><br><span class="line"><span class="comment">//4. 设置数据源路径 数据输出路径</span></span><br><span class="line">FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(input));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(output));</span><br><span class="line"><span class="comment">//5. 提交mr yarn</span></span><br><span class="line">System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyMapper</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 1.按照分隔符 进行拆分 每个单词 ，每个单词赋值为1</span></span><br><span class="line"><span class="comment">             * (word ,1)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">String[] words = value.toString().split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">                String[] split = word.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(split[<span class="number">2</span>]) ,<span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * reducer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyReducer</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text,IntWritable,Text,IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  (word ,1)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  (word,&lt;1,1,1,1&gt;)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  1.聚合value</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  2.写出去</span></span><br><span class="line"><span class="comment">*  (word ,3)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">                sum +=Integer.parseInt(value.toString());</span><br><span class="line">&#125;</span><br><span class="line">            context.write(key,<span class="keyword">new</span> <span class="title class_">IntWritable</span>(sum));</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="sql-vs-mr-mapreduce"><a href="#sql-vs-mr-mapreduce" class="headerlink" title="sql vs mr(mapreduce)"></a>sql vs mr(mapreduce)</h2><ul>
<li>sql  :<ul>
<li>group by</li>
<li>distinct</li>
<li>join</li>
<li>order by</li>
<li>union<ul>
<li><p>group by 用mr实现</p>
</li>
<li><p>就是再map阶段进行处理reduce阶段进行合并</p>
</li>
<li><p>distinct</p>
</li>
<li></li>
<li><p>去重 ： sql ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>(ename) <span class="keyword">from</span> emp;</span><br><span class="line">#或者可以通过分组进行去重</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> <span class="keyword">group</span> <span class="keyword">by</span> name;</span><br></pre></td></tr></table></figure></li>
<li><p>通过上述我们可知group by 也可以进行去重 ，所以后面我们能用group by 就要用group by</p>
</li>
<li><p>因为distinct只有一个task进行处理</p>
</li>
<li><p>而group by 则是多个task 进行处理 ， 所以效率会比较高</p>
</li>
<li><p>接下来是在mr里实现</p>
</li>
<li><p>order by</p>
</li>
<li><p>mr :</p>
</li>
<li><p>全局排序 ： reduce task 是 1</p>
</li>
<li><p>分区排序 ： reduce task 是 多个</p>
</li>
<li><p>mr : 实现</p>
</li>
<li></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>如果你的reduce task 大于分区数 ： 会有空白文件</p>
<p>如果 reduce task 小于分区数 且大于1 ： 则会报错</p>
<p>如果 reduce task 且分区数 等于 1 ： 则会把东西整合到一个文件</p>
<h2 id="关于mapreduce在linux上运行的学习，官方提供了源码库"><a href="#关于mapreduce在linux上运行的学习，官方提供了源码库" class="headerlink" title="关于mapreduce在linux上运行的学习，官方提供了源码库"></a>关于mapreduce在linux上运行的学习，官方提供了源码库</h2><p>地址在github上：</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>ts</title>
    <url>/2022/11/24/11-24/</url>
    <content><![CDATA[<h1 id="typeScript"><a href="#typeScript" class="headerlink" title="typeScript"></a>typeScript</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>ts：typescript ： 简单来说就是js的超集，可以向下兼容js，所以我们使用ts不用对js进行更改，ts会自动转换成js</p>
<p>因为现在的浏览器不支持ts的语法 ： ts的编译环境是node.js</p>
<p>安装运行 ： npm install -g typescript</p>
<p>安装之后用tsv -v 查看</p>
<p>与逆行的时候下载一个json</p>
<p>命令行 : tsc -init</p>
<p>然后运行命令 ： ts-node .&#x2F;文件名</p>
<p>下面是关于ts的简单介绍</p>
<p>首先ts是静态类型，js是动态类型</p>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>静态类型是编译阶段就会发现问题，而动态类型则是直到运行阶段才会问问题的</p>
<p>所以相比较而言，静态类型，比动态类型更加可控</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>ts的类型 ：</p>
<p>包括 : 布尔 ， 数值，字符串， null , symbol , BigInt,undefined</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone :<span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span> = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">number</span> = <span class="title class_">Infinity</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">my</span>: <span class="built_in">string</span> = <span class="string">&#x27;yon&#x27;</span></span><br><span class="line"><span class="keyword">let</span> o : <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">nme</span>: <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alertName</span>(<span class="params"></span>) : <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;my first name&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">any</span>[] = [<span class="string">&quot;hello&quot;</span> , <span class="number">1</span> , <span class="literal">true</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">ids</span>:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">names</span>: <span class="title class_">String</span>[] = [<span class="string">&quot;xxx&quot;</span> , <span class="string">&quot;yyy&quot;</span> , <span class="string">&quot;zzzz&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">book</span>: <span class="title class_">Object</span>[] = [&#123;<span class="attr">name1</span>:<span class="string">&#x27;tom&#x27;</span> , <span class="attr">animal</span>:<span class="string">&#x27;cont&#x27;</span>&#125;,&#123;<span class="attr">name1</span>:<span class="string">&#x27;gggg&#x27;</span>,<span class="attr">animal</span>:<span class="string">&#x27;hhhh&#x27;</span>&#125;];</span><br><span class="line">ids.<span class="title function_">push</span>(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>:(<span class="built_in">string</span>|<span class="built_in">number</span>|<span class="built_in">boolean</span>)[]=[<span class="string">&#x27;aslkdjla&#x27;</span>,<span class="number">1</span>,<span class="literal">true</span>]; <span class="comment">// 这个是三个值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person1</span>:[<span class="built_in">string</span>,<span class="built_in">number</span>,<span class="built_in">boolean</span>]=[<span class="string">&#x27;sdfjkl&#x27;</span>,<span class="number">1</span>,<span class="literal">true</span>]; <span class="comment">// 这个是一个值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(isDone)<span class="keyword">let</span> isDone :<span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span> = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">number</span> = <span class="title class_">Infinity</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">my</span>: <span class="built_in">string</span> = <span class="string">&#x27;yon&#x27;</span></span><br><span class="line"><span class="keyword">let</span> o : <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">nme</span>: <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alertName</span>(<span class="params"></span>) : <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;my first name&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(isDone)</span><br></pre></td></tr></table></figure>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>我们定义接口的方式如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> a&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">isP</span>:<span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和上述数组的作用一样，不过这样定义可以增强复用性，随便让一个东西继承一下他，就可以了</p>
<p>比如：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> a&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">isP</span>:<span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p</span>:a=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;kjds&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">11</span>,</span><br><span class="line">    <span class="attr">isP</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数合上述的接口很像，他是在接口创建了几个方法，如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> s&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="attr">name</span>:<span class="built_in">string</span>):<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">j</span>:s=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;lkasdj&#x27;</span>,</span><br><span class="line">    <span class="attr">eat</span>:<span class="keyword">function</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;eat$&#123;name&#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span>,c?:<span class="built_in">number</span>|<span class="built_in">string</span></span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问号代表从后面的类型里选数据，这里是number和string</p>
<p>上面的是lambad多</p>
<p>把ts转换成js的语法是any</p>
<h2 id="Dom和类型转换"><a href="#Dom和类型转换" class="headerlink" title="Dom和类型转换"></a>Dom和类型转换</h2><p>ts无法像js一样进行访问dom这个就意味着ts无法确定这些dom是不是存在，所以使用非空断言，我们可用明确的告诉他，这个表达式是null&#x2F;undefined</p>
<p>非空断言 X! 代表把x中的null和undefined给去除了</p>
<p>例如 ：下面是关于ts和获取dom的</p>
<p><code>const link = document.querySelector(&#39;a&#39;);</code></p>
<p>当我们要通过class来选择一个dom元素的时候，可以进行一层转化</p>
<p>例如 ： <code>const from = document.getElementById(&#39;form&#39;) as HTMLAnchorElement</code></p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>和java中的类异常类似</p>
<p>比如 ：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Preson</span> &#123; </span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">iscool</span>:<span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">n:<span class="built_in">string</span>,c:<span class="built_in">boolean</span>,a:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=n</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">iscool</span>=c</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>=a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayhai</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hi,wosshi$&#123;this.name&#125;,jinnnan$&#123;this.age&#125;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类的修饰符</p>
<p>readonly,privatee,protected,public</p>
<p>简单的介绍就到这里为止，具体以后再慢慢补充</p>
]]></content>
      <categories>
        <category>杂货技术栈</category>
      </categories>
  </entry>
  <entry>
    <title>hive</title>
    <url>/2022/11/29/11-29/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>简单来说就是用sql处理hadoop的数据的</p>
<p>除了hive之外 ： sparksql ，presto ， impala</p>
<h2 id="要求掌握"><a href="#要求掌握" class="headerlink" title="要求掌握"></a>要求掌握</h2><p>sql</p>
<p>udf</p>
<h2 id="hadoop包含"><a href="#hadoop包含" class="headerlink" title="hadoop包含"></a>hadoop包含</h2><p>hdfs ：命令行</p>
<p>mapreduce ：目前工作中几乎不用，但是关于核心类和思想要掌握</p>
<p>yarn：提交作业 xxx （mr&#x2F;spark&#x2F;flink）on yarn ： 必须会</p>
<p>mapreduce的弊端 ：</p>
<ul>
<li>开发大量代码</li>
<li>编程基础不错</li>
<li>部署麻烦</li>
<li>修改code蛮麻烦</li>
<li>对于DBA和RDBMS的小伙伴是不友好的</li>
</ul>
<p>大数据处理来说最终落地最好是sql</p>
<p>大数据开发角度 ：</p>
<ul>
<li>基础平台开发<ul>
<li>涉及很多框架底层的面很广</li>
</ul>
</li>
<li>应用层面开发<ul>
<li>基于基础平台开发 ，写sql</li>
</ul>
</li>
</ul>
<p>根据你的兴趣点 + 公司的定位</p>
<p>必然有新的东西诞生去解决一个场景的问题</p>
<p>mr主要适用于我们的p计算（离线计算）：不要求时效性 ，但是mr开发太麻烦，就诞生了hive</p>
<p>hive 介绍 ：</p>
<p>hive.apache.org</p>
<p>是由什么人提供出来的？</p>
<p>facebook 开源 去解决结构化的数据统计问题</p>
<p>是什么？</p>
<p>构建在hadoop之上的数据仓库</p>
<p>hdfs：hive 的数据是在hdfs之上的</p>
<p>yarn：可以跑在yarn之上</p>
<p>mmapreduce ： 可以用mr形式去运行</p>
<p>如何使用：</p>
<p>定义了一中类sql的语言，类似sql但是又有不同</p>
<p>适用于离线&#x2F;p处理的</p>
<p>开发就是写sql &#x3D;》 mr  &#x3D;》 运行在yarn上</p>
<p>hive的底层引擎是：</p>
<ul>
<li>mr （默认）：sql&#x3D;》mr</li>
<li>Tez：sql&#x3D;》Tez</li>
<li>Spark：sql&#x3D;》Spark</li>
</ul>
<p>hive on spark &#x3D;》生厂上用的用的不多</p>
<p>spark on hive &#x3D;》 用sparksql查看hive的数据</p>
<p>hive的存储格式，压缩格式等</p>
<p>官网：</p>
<ul>
<li>in distributed storage （分布式存储）：hdfs , cos,oss,aws</li>
<li>A command line tool and JDBC driver are provided to connect users to Hive.</li>
</ul>
<p>版本介绍 ：</p>
<p>x.y.z：x是大版本，y是小版本，z是小版本的修复版本</p>
<p>为什么要学习hive</p>
<ul>
<li>简单易用 ： 可以用sql开发</li>
<li>扩展性好：<ul>
<li>用自定义函数udf</li>
<li>数据存储 和 计算角度 ： 如果表中数据存不下，可以加几个节点就好了<ul>
<li>注意hive不是分布式的，它仅仅是个客户端</li>
</ul>
</li>
<li>Metastore ：hive的元数据管理<ul>
<li>sparksql ,presto ,impala 只要可以访问hive的元数据就可以访问里面表的数据</li>
<li>可以分享元数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>hive的架构 ：</p>
<ul>
<li>元数据 ： 描述数据的数据<ul>
<li>表的名字，字段的名字，字段的类型，什么人创建的，数据存储在哪里等</li>
<li>元数据的内部内置了一个Derby但是有弊端</li>
<li>元数据都是用mysql进行存储的</li>
<li>测试的时候一个mysql就可以了</li>
<li>但是生产上则一个不够</li>
<li>生产上要遵循 HA ：高可用</li>
<li>就是要一台做备份</li>
<li>两个mysql是主从架构</li>
</ul>
</li>
</ul>
<p>hive和RDBMS的区别</p>
<ul>
<li>共同点 sql</li>
<li>延时性 ： hive 适用于离线计算 慢，千万不要拿hive和mysql的性能做对比，无可比性，mysql要必hive高（数据量小）数据量大的时候就反过来了</li>
<li>事务 ： 都支持</li>
<li>update ，delete<ul>
<li>上面两个语句在hive里基本不用，因为性能太差了</li>
</ul>
</li>
<li>都支持分布式</li>
<li>部署成本 ：<ul>
<li>hive ：廉价</li>
<li>mysql ：成本很高</li>
</ul>
</li>
<li>数据体量<ul>
<li>hive ：Tb</li>
<li>mysql：处理Pb都比较费劲</li>
</ul>
</li>
</ul>
<p>对hive进行部署</p>
<p>分布式部署 ： cwiki.apache.org(官网)</p>
<p>首先把用压缩包上传到linux机器上</p>
<p>然后对linux进行解压</p>
<p>解压完成之后，我们要对他的的配置进行修改在解压之后的</p>
<p><code>vim hive-site.xml</code></p>
<p>编辑完成之后我们把以下内容放进去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;jdbc:mysql://bigdata2:3306/hive?createDatabaseIfNotExist=true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;liuzihan010616&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>然后在环境变量中编辑我们的hive_home</p>
<p><code>vim ~/.bashrc </code></p>
<p>把下列加进去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">HIVE_HOME</span></span><br><span class="line">export HIVE_HOME=/home/hadoop/app/hive</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;HIVE_HOME&#125;/bin</span><br></pre></td></tr></table></figure>

<p>然后我们要把我们的mysql链接包放在lib文件夹下</p>
<p>就是 <code>mysql-connector-java-5.1.28.jar</code></p>
<p>要放在hive的lib文件夹下</p>
<p>然后对我们的hive进行初始化</p>
<p><code>schematool -dbType mysql -initSchema</code></p>
<p>初始化成功之后，先启动hdfs ，然后命令行输入 hive 然后输入show databases;</p>
<p>成功就ok了</p>
<p>然后再mysql的数据库里会有hive这个数据库</p>
<p>mysql里\G是格式化的意思</p>
<h2 id="思考-：-表中的字段-存在哪里？"><a href="#思考-：-表中的字段-存在哪里？" class="headerlink" title="思考 ： 表中的字段 存在哪里？"></a>思考 ： 表中的字段 存在哪里？</h2><p>我们先进入hive ： <code>create table test(name String); </code></p>
<p>一个 hive 表 会被拆分成n个表存储再mysql里</p>
<p>比如　： TBl表存放的是我们的表名 <code>select * from tbls \G;</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">**<span class="emphasis">* 1. row *</span>**</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span></span><br><span class="line"><span class="code">            TBL_ID: 1</span></span><br><span class="line"><span class="code">       CREATE_TIME: 1669707861</span></span><br><span class="line"><span class="code">             DB_ID: 1</span></span><br><span class="line"><span class="code">  LAST_ACCESS_TIME: 0</span></span><br><span class="line"><span class="code">             OWNER: hadoop</span></span><br><span class="line"><span class="code">        OWNER_TYPE: USER</span></span><br><span class="line"><span class="code">         RETENTION: 0</span></span><br><span class="line"><span class="code">             SD_ID: 1</span></span><br><span class="line"><span class="code">          TBL_NAME: test</span></span><br><span class="line"><span class="code">          TBL_TYPE: MANAGED_TABLE</span></span><br><span class="line"><span class="code">VIEW_EXPANDED_TEXT: NULL</span></span><br><span class="line"><span class="code">VIEW_ORIGINAL_TEXT: NULL</span></span><br><span class="line"><span class="code">IS_REWRITE_ENABLED:  </span></span><br><span class="line"><span class="code">1 row in set (0.00 sec)</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure>

<p>比如 ： columns_v2表存放的是我们的字段 <code>select * from columns_v2 \G;</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">**<span class="emphasis">* 1. row *</span>**</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span></span><br><span class="line"><span class="code">      CD_ID: 1</span></span><br><span class="line"><span class="code">    COMMENT: NULL</span></span><br><span class="line"><span class="code">COLUMN_NAME: name</span></span><br><span class="line"><span class="code">  TYPE_NAME: string</span></span><br><span class="line"><span class="code">INTEGER_IDX: 0</span></span><br><span class="line"><span class="code">1 row in set (0.00 sec)</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure>

<p>比如 ： DBS是存放的我们的物理存储路径的 <code>select * from DBS \G;</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">**<span class="emphasis">* 1. row *</span>**</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span></span><br><span class="line"><span class="code">          DB_ID: 1</span></span><br><span class="line"><span class="code">           DESC: Default Hive database</span></span><br><span class="line"><span class="code">DB_LOCATION_URI: hdfs://bigdata3:9000/user/hive/warehouse</span></span><br><span class="line"><span class="code">           NAME: default</span></span><br><span class="line"><span class="code">     OWNER_NAME: public</span></span><br><span class="line"><span class="code">     OWNER_TYPE: ROLE</span></span><br><span class="line"><span class="code">      CTLG_NAME: hive</span></span><br><span class="line"><span class="code">1 row in set (0.00 sec)</span></span><br></pre></td></tr></table></figure>

<h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><p>hive有个默认数据库 是default 路径 ：&#x2F;user&#x2F;hive&#x2F;warehouse</p>
<p>非默认数据库 ： &#x2F;user&#x2F;hive&#x2F;warehouse&#x2F;dbname.db</p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>CREATE [REMOTE] (DATABASE|SCHEMA) [IF NOT EXISTS] database_name<br>  [COMMENT database_comment]<br>  [LOCATION hdfs_path]<br>  [MANAGEDLOCATION hdfs_path]<br>  [WITH DBPROPERTIES (property_name&#x3D;property_value, …)];</p>
<p>[] 可有可无<br>(|) 选择其中一个即可</p>
<p>CREATE DATABASE 名称；</p>
<p>CREATE DATABASE 名称 LOCATION ‘创建的地方’；</p>
<p>例子 ：</p>
<p>create database if not exists bigdata_hive;<br>create database  bigdata_hive2  LOCATION ‘&#x2F;data&#x2F;bigdata_hive2’;<br>create database  bigdata_hive3 WITH DBPROPERTIES (‘creator’&#x3D;’doublehappy’, ‘create_dt’&#x3D;”2099-11-29”);<br>create database if not exists bigdata_hive4 COMMENT “这是一个数据库4”;</p>
<p>解决此处中文乱码的问题</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> hive.dbs MODIFY <span class="keyword">COLUMN</span> `<span class="keyword">DESC</span>` <span class="type">varchar</span>(<span class="number">4000</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<h3 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h3><p>show databases;<br>show databases like “bigdata_hive*”<br>desc database  bigdata_hive3;<br>desc database EXTENDED bigdata_hive3;</p>
<h2 id="思考-：-这个数据库在hdfs的哪一个地方"><a href="#思考-：-这个数据库在hdfs的哪一个地方" class="headerlink" title="思考 ： 这个数据库在hdfs的哪一个地方"></a>思考 ： 这个数据库在hdfs的哪一个地方</h2><p>可以通过查看DBS表</p>
<h1 id="hive-的注释-comment-中文乱码的解决方法"><a href="#hive-的注释-comment-中文乱码的解决方法" class="headerlink" title="hive 的注释(comment) 中文乱码的解决方法"></a>hive 的注释(comment) 中文乱码的解决方法</h1><p>（1）修改表字段注解和表注解</p>
<p>alter table COLUMNS_V2 modify column COMMENT varchar(256) character set utf8;<br>alter table TABLE_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;</p>
<p>（2）修改分区字段注解</p>
<p>alter table PARTITION_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8 ;<br>alter table PARTITION_KEYS modify column PKEY_COMMENT varchar(4000) character set utf8;</p>
<p>（3）修改索引注解</p>
<p>alter table INDEX_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;</p>
<p>修改hive-site.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://IP:3306/db_name?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述的 <code>&amp; 是 &amp;amp; </code></p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>yarn</title>
    <url>/2022/11/28/11-28/</url>
    <content><![CDATA[<h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>主从架构 ： resourcemanager(资源的分配) : nodemanager(资源的供给与隔离)</p>
<h3 id="资源调度"><a href="#资源调度" class="headerlink" title="资源调度"></a>资源调度</h3><p>通过rm把nm的资源分配给我们的 task上</p>
<h3 id="资源隔离"><a href="#资源隔离" class="headerlink" title="资源隔离"></a>资源隔离</h3><p>nm按照要求给task提供资源，保证提供的资源具有独占性</p>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>nm指挥分配的资源</p>
<p>一个task对应一个container ： cpu&#x2F;mem（cpu和内存）</p>
<p>每个container之间是相互隔离的</p>
<h2 id="yarn的架构设计"><a href="#yarn的架构设计" class="headerlink" title="yarn的架构设计"></a>yarn的架构设计</h2><p>作业提交的流程：<br>client &#x3D;&gt; 给rm 的apps 发送请求 去运行 jar （app master）</p>
<p>apps 分配一个container 去运行 app master</p>
<p>app master 会向apps manager 去注册我的作业</p>
<p>app master 向resource scheduler 申请资源去运行 我的代码</p>
<p>nodemanager 会开启资源 container 去运行map task 以及reduce task</p>
<p>tsak 会向 app master 汇报代码与运行情况</p>
<p>当代码运行完成 app master 会给apps 发送请求 ，通知我的作业完成了</p>
<p>apps manager 收到请求之后会通知你的客户端 ，告诉已经运行完成</p>
<p>输入阶段 ： map tsak 的个数 &#x3D;》container 的申请个数 redurce task 同理</p>
<h2 id="面试会问"><a href="#面试会问" class="headerlink" title="面试会问"></a>面试会问</h2><p>yarn的架构设计 &#x3D;&#x3D;mr作业提交流程</p>
<h2 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h2><p>FIFO ：</p>
<ul>
<li>先进先出</li>
<li>单队列</li>
</ul>
<p>Capacity ：容量调度器</p>
<ul>
<li>多队列</li>
<li>先进先出（针对一个队列）</li>
<li>每个队列之间互不影响</li>
<li>每个队列之间是事先定好的</li>
</ul>
<p>Fair：公平调度器</p>
<ul>
<li>多队列</li>
<li>每个队列之间的每个job是有影响的 不是先进先出</li>
<li>哪一个job的优先级高就执行哪一个</li>
<li>如果相同优先级，则是顺序</li>
</ul>
<p>主流的中小企业：Capacity</p>
<p>大公司会用：fair</p>
<h3 id="默认调度器"><a href="#默认调度器" class="headerlink" title="默认调度器"></a>默认调度器</h3><p>3.x：默认是容量调度器</p>
<p>通过调度器进行其作业调度</p>
<p>2.x: 版本是fair（默认）</p>
<h2 id="yarn的web界面的简介"><a href="#yarn的web界面的简介" class="headerlink" title="yarn的web界面的简介"></a>yarn的web界面的简介</h2><p>左侧侧边栏 ： 有几个选项卡 ： 分别是</p>
<h2 id="yarn资源的调优"><a href="#yarn资源的调优" class="headerlink" title="yarn资源的调优"></a>yarn资源的调优</h2><p>container?</p>
<p>一定比例的cpu和mem</p>
<p>刀片服务器的配置 ： 128G 16 core :假设一个机器的配置</p>
<p>刀片服务器 装完系统 消耗内存 1G</p>
<p>系统预留 ： 预留 20%左右 包含装完成系统 消耗的1G</p>
<p>原因 ：给未来部署组件预留空间，防止全部使用 ： 会导致系统夯住 就是卡住 ，oom机制【linux系统】：系统会自己杀死进程当内存不足的时候</p>
<p>预留空间 ： 128 * 0.2 &#x3D; 26G</p>
<p>其余空间用于大数据 102G</p>
<p>hadoop ：</p>
<ul>
<li>datanode  进程内存 ： 默认 1G &#x3D;》 生产上 2G</li>
<li>nodemanager 进程内存 ： ，默认 1G &#x3D;》 生产上 4G</li>
</ul>
<p>接下来还有96G全部给我们的yarn资源 ： 96G</p>
<p>container的资源分配 ：</p>
<p>内存</p>
<p>cpu</p>
<p>相比：cpu更重要一些</p>
<p>container的内存划分 ：默认是86G</p>
<p>其最小是 1G（默认）</p>
<p>最大是 8G（默认） 但是可以设置</p>
<p>注意 container的内存会自动增加 默认以1G递增</p>
<p>container cpu ： 是虚拟核 &#x3D;》 考虑初衷是不同节点的cpu性能不同</p>
<p>比如 ： 一个cpu是另外一个cpu的2倍</p>
<p>第一机器 ： pcore ：vcore &#x3D; 1：2 相当于1个物理核当成两个虚拟核用</p>
<p>给container的核数 ： 默认是8core</p>
<p>总数 ：</p>
<p>最小:1c  (默认)</p>
<p>最大:4c（默认）</p>
<p>实际开发角度 ：</p>
<p>mem：最大不要超过32G ，如果超过32G则会导致压缩指针失效</p>
<p>cpu ： cloudera的公司推荐一个container的core最好不要超过5</p>
<p>配置core  ：在yarn-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>4096<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">cpu： </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.pcores-vcores-multiplier<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.cpu-vcores<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-vcores<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-vcores<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="mapreduce"><a href="#mapreduce" class="headerlink" title="mapreduce"></a>mapreduce</h2><p>map task :mem  : 默认是1024m ，一个map task 申请的资源是1024m ， 但是如果实际使用的资源的内存量超过这个值，你的task会强制被杀死 ，reduce task 也一样</p>
<p>map task :vcore ： 默认是1</p>
<p>reduce task :mem : 默认是1024m</p>
<p>reduce task :vcore : 默认是1</p>
<p>mr作业是进程级别 &#x3D;》 jvm</p>
<p>map task</p>
<p>reduce task</p>
<p>jvm参数调优 ：</p>
<p>存储 hdfs</p>
<p>存储文件</p>
<p>压缩</p>
<ul>
<li>为什么使用压缩？</li>
<li>节省空间</li>
<li>节省时间<ul>
<li>网络io核磁盘io会减少</li>
<li>指的是mapreduce数据计算过程中</li>
<li>经过网络传输的数据会变少，</li>
<li>同样到磁盘上的时候，数据量少也会减少磁盘的io</li>
</ul>
</li>
<li>使用场景<ul>
<li>采用压缩 ， 对机器的cpu要求比较高</li>
<li>存储数据的空间不够了，才会用压缩</li>
</ul>
</li>
<li>两面性</li>
<li>采用压缩的确会让空间和时间减少</li>
<li>cpu消耗 cpu利用率高 &#x3D;》会导致处理的时间变长一点</li>
<li>如何使用压缩？</li>
</ul>
<p>常见的压缩格式</p>
<ul>
<li>gzip</li>
<li>bzip2</li>
<li>Lzo</li>
<li>Snappy</li>
<li>LZ4</li>
</ul>
<p>常见的压缩注意点：</p>
<p>压缩比 Bzip2 30%  GZIP    snappy、lzo 50%  ： 这个30%和50%代表能把源文件压缩到源文件的%多少</p>
<p>解压速度 ： snappy、lzo GZIP   Bzip2</p>
<p>压缩文件可不可以一被切分</p>
<p>假设一个 5G文件 不能被切分 split 意味着 只能使用一个map task去处理</p>
<p>map task  5G</p>
<p>假设一个 5G文件 能被切片  splits 10map task 去并行处理</p>
<p>5*1024 &#x2F;10 &#x3D; 一个map task 处理的数据</p>
<p>能否被切分 决定了 你的 一个map task处理的数据量有多少</p>
<p>压缩后的文件是否支持分割？<br>            gzip  不可分割<br>            bzip2  可分割<br>            lzo   带索引的可以分割 (默认是不支持分割的)<br>            snappy 不可分割的</p>
<p>mapreduce 每个阶段该如何采用这些算法？</p>
<p>input &#x3D;》 maps &#x3D;》 reduce &#x3D;》 output</p>
<p>input：<br>    1.Bzip2 ：支持分割 多个map task 进行出</p>
<p>map out：</p>
<ul>
<li>snappy 、lzo</li>
<li>shuffle 过程 要选择一个解压 速度快的压缩格式</li>
</ul>
<p>reduce out ：</p>
<ul>
<li>1.高的压缩比 + 支持分片  &#x3D;》 节省空间</li>
<li>2.bzip2  、lzo带索引的</li>
</ul>
<p>reduce out 数据 作为下一个<br>map 的输入咋办？<br>建议使用bzip2【如果采用压缩的话】</p>
<p>进行压缩配置的两种方式 ：</p>
<p>job &#x3D;》 code 针对少数job生产生效</p>
<p>集群所有的job 在配置文件里配置</p>
<p>对mapreduce 进行配置</p>
<ul>
<li>配置压缩的codec</li>
<li>map reduce 输出配置<ul>
<li>先打开压缩的开关</li>
<li>配置codec即可</li>
</ul>
</li>
<li>hadoop是不是支持哪些压缩 ，通过命令 ：或者配置文件</li>
<li>core-site.xml<ul>
<li>配置支持的压缩有什么</li>
<li>原生的hadoop默认不支持lzo的算法，因为lzo要把整个hadooop重新编译一遍才可以重新实行</li>
<li>&#96;&#96;&#96;<property>
        <name>io.compression.codecs</name>
        <value>org.apache.hadoop.io.compress.BZip2Codec,
        org.apache.hadoop.io.compress.SnappyCodec,
        org.apache.hadoop.io.compress.GzipCodec,
        org.apache.hadoop.io.compress.DefaultCodec
    </value>
</property>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">mapred-site.xml:</span><br><span class="line"></span><br><span class="line">* <span class="number">1</span>.先打开压缩的开关</span><br><span class="line">* <span class="number">2</span>.<span class="keyword">map</span> reduce 输出 压缩算法</span><br><span class="line"></span><br><span class="line">reduce： 开关</span><br><span class="line"></span><br><span class="line">* mapreduce.output.fileoutputformat.compress</span><br><span class="line">* ```</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          </span><span class="language-xml"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.output.fileoutputformat.compress<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          </span><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>&#96;&#96;&#96;<property>
        <name>mapreduce.output.fileoutputformat.compress.codec</name>
        <value>org.apache.hadoop.io.compress.BZip2Codec</value>
</property>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">map</span>阶段的：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
// 设置在map输出阶段压缩
      conf.set("mapreduce.map.output.compress", "true");</li>
</ul>
<p>&#x2F;&#x2F; 设置解压缩编码器<br>        conf.set(“mapreduce.map.output.compress.codec”, “org.apache.hadoop.io.compress.DefaultCodec”);</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">各个datanode数据节点的平衡</span><br><span class="line"></span><br><span class="line"><span class="comment">* DN1 存储空间 90%</span></span><br><span class="line"><span class="comment">* DN2 存储空间 60%</span></span><br><span class="line"><span class="comment">* DN3 存储空间 80%</span></span><br><span class="line"></span><br><span class="line">如何做呢？</span><br><span class="line"></span><br><span class="line"><span class="comment">* sbin/start-balancer.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">parameters</span> = Balancer.BalancerParameters</span><br><span class="line"></span><br><span class="line">[BalancingPolicy.Node, threshold <span class="comment">= 10.0, max idle iteration = 5</span></span><br><span class="line"></span><br><span class="line">数据平衡的默认阈值：threshold <span class="comment">= 10.0</span></span><br><span class="line"></span><br><span class="line">每个节点的磁盘使用率 - 平均的磁盘使用率 &lt;10%</span><br><span class="line"></span><br><span class="line">DN1 存储空间 <span class="comment">90%  -76% = 14%</span> 说明这个节点数据多 往别的节点迁移数据 出</span><br><span class="line">DN2 存储空间 <span class="comment">60%  -76% = -12%</span> 说明这个节点数据少 别的节点迁移数据 进</span><br><span class="line">DN3 存储空间 <span class="comment">80%  -76% = 4%</span> 	说明这个节点数据多 往别的节点迁移数据</span><br><span class="line"></span><br><span class="line">avg=90 + 80 +60 /<span class="number">3</span> = <span class="number">76</span>%</span><br><span class="line"></span><br><span class="line">生产上 从现在开始 start-balancer.sh -threshold <span class="number">10</span>  每天要定时做的</span><br><span class="line"></span><br><span class="line">放到业务低谷期去做 数据平衡操作</span><br><span class="line"></span><br><span class="line">注意： 不要在业务高峰期做</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>数据平衡 数据传输  带宽有关</span><br><span class="line"></span><br><span class="line">调优参数 ：平衡的网络带宽  w</span><br><span class="line"></span><br><span class="line">dfs.datanode.balance.bandwidthPerSec <span class="number">100</span>m 【<span class="number">2.</span>x 默认是<span class="number">10</span>m】</span><br><span class="line"></span><br><span class="line">每个节点数据几十T  需要数据平衡的数据 几十T  可以申请维护窗口时间 ：</span><br><span class="line"></span><br><span class="line">dfs.datanode.balance.bandwidthPerSec 临时调大 <span class="number">200</span>M</span><br><span class="line"></span><br><span class="line">单个DN节点 多块磁盘的数据平衡</span><br><span class="line"></span><br><span class="line">投产前规划：</span><br><span class="line">		DN 机器   <span class="number">10</span>块 <span class="number">2</span>T 【不做raid】  =》 <span class="number">20</span>T   副本的</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>dn 配置多个磁盘</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<property>
        <name>dfs.datanode.data.dir</name>
        <value>/data01,/data02,/data03</value>
</property>
```

<p>挂载磁盘一般最省钱的是 2W 转数 2T的</p>
<p>2.为什么要使用多块物理磁盘？</p>
<p>1.存储<br>2.因为多个磁盘的io也是叠加的<br>每块磁盘 磁盘io 每秒 100m<br>三块磁盘 1s 能 300m文件内容<br>一块磁盘 1s 100m</p>
<p>3.可以让服务一直运行，加入一个磁盘挂了，服务不会减少</p>
<p>做多个磁盘数据均衡<br>    dfs.disk.balancer.enabled  true 【3.x有这个功能 cdh 2.x 也有】 apache 2.x 没有这个功能</p>
<p>得通过命令去解决磁盘数据均衡？</p>
<p>hdfs diskbalancer</p>
<p>1.步骤</p>
<pre><code>hdfs diskbalancer -plan  bigdata32  =&gt; 生成一个  bigdata32.plan.json 文件
    hdfs diskbalancer -execute bigdata32.plan.json =》 执行disk 数据均衡计划文件
    hdfs diskbalancer -query bigdata32
</code></pre>
<p>生产上 当你发现 磁盘写入不均衡 可以做一下 【一般 一个月 半个月 做一次即可】</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2022/11/03/11-3/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>关系型数据库</li>
<li>非关系型数据库 ： nosql</li>
<li>存储方式 ， 类似excel</li>
<li>学习 ： 基于官网</li>
<li>版本 ：</li>
<li>5.7 ：主流</li>
<li>5.6 ：也有</li>
<li>8.x ：不是主流 ： java团队</li>
<li>极限是在几tb级别 秒级别 毫秒级别 添加索引还可以更快</li>
</ul>
<h1 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h1><ul>
<li>5.7</li>
<li>安装包种类</li>
<li>rpm ： 不可以完成二次开发，只能用mysql官网的</li>
<li>tar ： 相当于自己魔改的有很多官方没有的功能</li>
<li>rpm ； 要注意el7的 是centos7的</li>
<li>用lazz</li>
<li>上传 ：rz</li>
<li>下载 ：sz</li>
</ul>
<h2 id="mysql的卸载"><a href="#mysql的卸载" class="headerlink" title="mysql的卸载"></a>mysql的卸载</h2><ul>
<li>在windows下 ， mysql 是先在控制面板里卸载，</li>
<li>然后把安装目录卸载掉</li>
<li>在c盘的 ProgramData 里也有文件残留，不过是隐藏文件要自己打开的</li>
<li>然后删除注册表上的</li>
<li>linux</li>
<li>先停掉mysql</li>
<li>然后通过&#96;rpm - qa | grep mysql | xargs -n1 rpm -e –nodeps</li>
<li>然后找到mysql生成的文件</li>
<li>find &#x2F; -name <code>&quot;*mysql*&quot;</code></li>
<li>把该删的文件全部删掉</li>
<li>然后重新安装</li>
</ul>
<h2 id="mysql的安装linux版本"><a href="#mysql的安装linux版本" class="headerlink" title="mysql的安装linux版本"></a>mysql的安装linux版本</h2><ul>
<li>这里安装的是mysql的tar包</li>
<li>首先要解压  :  通过<code>tar -vxf xxxxxxxxxx</code></li>
<li>一般安装mysql的软件的时候要卸载一个东西 ，就是<code>mariadb-libs-5.5.56-2.el7.x86_64</code></li>
<li>通过<code>rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64</code></li>
<li>就卸载了</li>
<li>然后再进行安装</li>
<li>我是创建了一个sh脚本<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">rpm</span> -ivh mysql-community-common-<span class="number">5</span>.<span class="number">7</span>.<span class="number">28</span>-<span class="number">1</span>.el7.x86_64.rpm</span><br><span class="line"><span class="attribute">rpm</span> -ivh mysql-community-libs-<span class="number">5</span>.<span class="number">7</span>.<span class="number">28</span>-<span class="number">1</span>.el7.x86_64.rpm</span><br><span class="line"><span class="attribute">rpm</span> -ivh mysql-community-libs-compat-<span class="number">5</span>.<span class="number">7</span>.<span class="number">28</span>-<span class="number">1</span>.el7.x86_64.rpm</span><br><span class="line"><span class="attribute">rpm</span> -ivh mysql-community-client-<span class="number">5</span>.<span class="number">7</span>.<span class="number">28</span>-<span class="number">1</span>.el7.x86_64.rpm</span><br><span class="line"><span class="attribute">rpm</span> -ivh mysql-community-server-<span class="number">5</span>.<span class="number">7</span>.<span class="number">28</span>-<span class="number">1</span>.el7.x86_64.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure>
然后运行脚本</li>
<li>安装成功了之后，我们初始化mysql</li>
<li>mysqld initialize user&#x3D;mysql</li>
<li>然后启动mysql</li>
<li>systemctl start mysql</li>
<li>然后查看&#x2F;var&#x2F;log&#x2F;mysql.log</li>
<li>就可以查看到我们的初始密码</li>
<li>然后通过</li>
<li>mysql -uroot -pxxx</li>
<li>就可以进行登录</li>
<li>而如果有敏感字符，则要用转义字符的方式比如 / : 代表一个 &#x2F;</li>
<li>然后再进行设置密码</li>
<li>&#96;set password &#x3D; password(“xxxxxxxx”)</li>
<li>再通过flash privileges 进行更改</li>
</ul>
<h1 id="mysql的操作"><a href="#mysql的操作" class="headerlink" title="mysql的操作"></a>mysql的操作</h1><ul>
<li>show databases;</li>
<li>展示数据库</li>
<li>展示的数据库的软件 ： </li>
<li>navcat</li>
<li>sqlyog</li>
<li>dbvear</li>
<li>但是当他是<code>root@localhost</code>的时候，我们只能通过本机访问</li>
<li>但是可以改成 ：<code> root@%: xxxx(密码)</code></li>
<li>就可以通过任意机器访问</li>
<li>通过use xxx更改到xxx数据库</li>
<li>通过show tables 查看表</li>
<li>选择字段 ： select xxx form xxx表 比如 ： <code>select host,user from user;</code></li>
<li>修改表中数据 ： update 比如 ： <code>update mysql.user set host=&quot;%&quot; where user=&quot;root&quot;;</code> </li>
<li>而后通过 ： <code>flash privileges</code> 进行权限修改</li>
<li>然后再自己的wins上通过远程访问的软件访问他</li>
<li>语法 ：</li>
<li>sql语法 ：</li>
<li>ddl ： 数据定义语言</li>
<li>dml ： 数据操作语言</li>
<li>dcl ： 数据控制语言</li>
<li>都不区分大小写</li>
<li>‘null’ ： 字符串字段</li>
<li>‘’ ： 同上</li>
<li>NULL ： 空</li>
<li>上述三个是不一样的意义</li>
<li>字符集 ： 5.7 默认的字符集是拉丁的</li>
<li>我们可以在创建表的时候更改字符集</li>
<li><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="type">name</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="type">name</span>` <span class="type">varchar</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=UTF<span class="number">-8</span> // 字符集</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>它支持嵌套<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span> ,age_max ,age_avg </span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="type">name</span>,</span><br><span class="line">max(age) <span class="keyword">as</span> age_max,</span><br><span class="line">min(age) <span class="keyword">as</span> age_min,</span><br><span class="line">count(age) <span class="keyword">as</span> age_count,</span><br><span class="line">avg(age) <span class="keyword">as</span> age_avg</span><br><span class="line"><span class="keyword">from</span> xxx</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="type">name</span>) <span class="keyword">as</span> res </span><br><span class="line"><span class="keyword">where</span> age_avg &gt;<span class="number">18</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><ul>
<li>过滤条件</li>
<li><code>&gt;</code></li>
<li><code>&lt;</code></li>
<li><code>=</code></li>
<li><code>&gt;=</code></li>
<li><code>&lt;=</code></li>
<li><code>&lt;&gt;</code> (也可以是<code>!=</code>)</li>
<li><code>and</code> <code>or</code> <code>in</code> <code>notin</code></li>
<li>根据本意就好 下面的一行代表复合查询</li>
<li><code>select * from xx where name in (&#39;要查询的东西&#39; ， &#39;要查询的东西&#39; ，..);</code></li>
<li><code>not in</code> 同上</li>
<li><code>between and</code> : 代表在。。。之间的</li>
<li></li>
</ul>
<h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><ul>
<li>like rlike regexp ： 模糊匹配</li>
<li><code> select * from where name like &quot;z%&quot;</code> : 代表查找第一个是z的</li>
<li>占位符 ： _ : 占位一个</li>
<li><code> select * from where name like &quot;_s%&quot;</code> :第二个是s的</li>
</ul>
<h3 id="合并表"><a href="#合并表" class="headerlink" title="合并表"></a>合并表</h3><ul>
<li>合并成一个纵向的表</li>
<li><code>union</code> ： 去重</li>
<li><code>union all</code> ： 不去重</li>
</ul>
<h3 id="查询限制"><a href="#查询限制" class="headerlink" title="查询限制"></a>查询限制</h3><ul>
<li>limit</li>
<li><code>select * from xxx limit 2</code></li>
<li>代表只显示两条</li>
<li>但是底层已经查完了</li>
<li>只是只显示两条</li>
</ul>
<h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><ul>
<li>清除有无用的数据</li>
<li>就是null的</li>
<li>工作中一般不会删除数据 ，就是单纯的过滤数据 ，也不让更改数据</li>
<li>一般用 is null 或者 is not null</li>
<li>要把null输出0，并显示</li>
<li>处理空值的函数 </li>
<li>ifnull(xxx,xxx,…)</li>
<li>coalesce(xxx ,xxx ,xxxx…)</li>
<li>他们都是如果里面的值是空那么就会验证下一个数值，如果不为空就输出 ，为空 就继续往下<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line"><span class="built_in">name</span></span><br><span class="line"><span class="built_in">id</span></span><br><span class="line">clalesce(age, <span class="number">0</span>) <span class="keyword">as</span> age_alias</span><br><span class="line">...</span><br><span class="line"><span class="keyword">from</span> xxx</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="ddl"><a href="#ddl" class="headerlink" title="ddl"></a>ddl</h2><ul>
<li>creat drop alter show（？）</li>
<li></li>
<li>创建数据库</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">creat &#123;<span class="keyword">DATABASE</span> | <span class="keyword">SCHEMA</span>&#125; [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">ExISTS</span>] db_name</span><br><span class="line">[creat_option]</span><br><span class="line">creat_option : &#123;CHARACT&#125;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="type">name</span> (create_definition)</span><br><span class="line">例子 ：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> try (</span><br><span class="line">id <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line"><span class="type">name</span> <span class="type">varchar</span>(<span class="number">3</span>) <span class="keyword">comment</span> <span class="string">&#x27;名字注释&#x27;</span>,</span><br><span class="line">age <span class="type">int</span>(<span class="number">3</span>),</span><br><span class="line">create_user <span class="type">varchar</span>(<span class="number">5</span>),</span><br><span class="line">create_time <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span>  <span class="built_in">current_timestamp</span>,</span><br><span class="line">update_time <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">current_timestamp</span>,<span class="comment">--更新显示时间</span></span><br><span class="line"><span class="keyword">primary key</span>(id)<span class="comment">--主键</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ul>
<li>表名字 一定是英文 ， 不要写中文 ，可以汉语拼音</li>
<li>一般公司有建表风格</li>
<li>可以加注释 ： comment</li>
<li>空格不宜过多，最好全部贴着最前面</li>
<li>注意括号不能是中文版的</li>
</ul>
<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ul>
<li>把多行数据聚合成一行 ： </li>
<li>sum </li>
<li>max</li>
<li>min</li>
<li>avg</li>
<li>count<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">(age)</span></span> as age,</span><br><span class="line"><span class="function"><span class="title">max</span><span class="params">(age)</span></span> as age,</span><br><span class="line"><span class="function"><span class="title">min</span><span class="params">(age)</span></span> as age,</span><br><span class="line"><span class="function"><span class="title">count</span><span class="params">(age)</span></span> as age,</span><br><span class="line"><span class="function"><span class="title">avg</span><span class="params">(age)</span></span> as age </span><br><span class="line">from xxx </span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><ul>
<li>group by colum</li>
<li><code>select * from xxx group by age;</code></li>
<li><code>select * from xxx where id &gt; 1 having group by age;</code></li>
<li>如果group by 两个 则他的维度就变了</li>
<li>就会变得更细</li>
<li>而且针对于分组之后的结果进行过滤 ，要用having</li>
<li><code>select * from xxx group by age having id &gt; 1;</code></li>
<li>group by 之后你不可以用where</li>
</ul>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><ul>
<li>多表联查</li>
<li>join</li>
<li>内连接 ： 他们的公共的部分 <code> select * from a （inner） join b on a.id=b.id</code></li>
<li>外连接 ： </li>
<li>左连接 ：以左表为主 ，右表来匹配 匹配的上 就是可以 匹配不上就是null<code> select * from a left join b on a.id=b.id</code></li>
<li>右连接 ：以右表为主 ， 同上 ： <code>select * from a right join b on a.id=b.id</code></li>
<li>全连接 ： 左右表数据都是全的 ： <code>select * from a Full join b on a.id=b.id</code> 无重复的 （mysql里不支持全连接）</li>
</ul>
<h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">show</span> &#123;databases | <span class="keyword">schemas</span>&#125;</span><br><span class="line">[<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span> | <span class="keyword">WHERE</span> expr]</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> [<span class="keyword">FULL</span>] <span class="keyword">tables</span> : 不一定是要切换到这个数据库下才可以</span><br><span class="line">[&#123;<span class="keyword">FROM</span> | <span class="keyword">IN</span>&#125; db_name]</span><br><span class="line">[&#123;<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span> | <span class="keyword">WHERE</span> expr&#125;]</span><br></pre></td></tr></table></figure>

<h3 id="use"><a href="#use" class="headerlink" title="use"></a>use</h3><ul>
<li>use xxx数据库</li>
</ul>
<h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><ul>
<li>drop tablename</li>
</ul>
<h2 id="dml"><a href="#dml" class="headerlink" title="dml"></a>dml</h2><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">select</span> <span class="keyword">update</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">insert</span>[LOW_PRIORITY | DELAYED | HIGH_PRORITY] [<span class="keyword">IGNORE</span>]</span><br><span class="line">[<span class="keyword">INTO</span>]</span><br><span class="line">[(col_name[,col_name]...)]</span><br><span class="line">&#123;<span class="keyword">VALUES</span> | <span class="keyword">VALUE</span>&#125; (value_list) [, (value_list)] ...</span><br><span class="line">[<span class="keyword">ON</span> DUPLICATE <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> assignment_list]</span><br><span class="line">比如 ：<span class="keyword">INSERT</span> <span class="keyword">into</span> user_table (name,age)<span class="keyword">VALUES</span> (<span class="string">&#x27;zs&#x27;</span>,<span class="number">10</span>) , (<span class="string">&#x27;ad&#x27;</span> ,<span class="number">19</span>);</span><br><span class="line">* 表示所有字段</span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> user_table;</span><br><span class="line"><span class="keyword">select</span> name,age <span class="keyword">from</span> user_table;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="desc"><a href="#desc" class="headerlink" title="desc"></a>desc</h3><ul>
<li>描述这个表的字段（列）</li>
</ul>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><ul>
<li>update [low_priority] [ignore] table_reference</li>
<li>set assignment_list</li>
<li>[where where_condition]</li>
<li>[order by ..]</li>
<li>[limit row_count]</li>
<li><code>update user_info set age=30; // 这个是对整个表进行更改</code></li>
<li><code>update user_info set age=30 where id=1; // 这个是对id=1的一列进行更改</code></li>
</ul>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><ul>
<li>删除数据</li>
<li>delete [low_priority] [quick] [ignore] from tablename</li>
<li>[partition(partition_name [, partition_name …])]</li>
<li>[where where_condition]</li>
<li>[order by ..]</li>
<li>[limit row_count]</li>
<li><code>delete from user_info where id=1; // 删除id=1的那个行 </code></li>
<li><code>delete from user_info ; // 删除整个表</code></li>
</ul>
<h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><ul>
<li>我们通过order by xxx 让输出的顺序是按照某一个列进行排序的</li>
<li>默认是升序 asc</li>
<li>可以降序 desc</li>
<li><code> select * from try where name in (&#39;zi&#39;,&#39;hi&#39;) order by age desc;</code></li>
<li><code> select * from try where name in (&#39;zi&#39;,&#39;hi&#39;) order by age asc;</code></li>
<li>还可以进行嵌套使用</li>
<li><code>select * from try where name in (&#39;zi&#39;,&#39;hi&#39;) order by age desc , name desc;</code></li>
<li>代表如果age一样，则按照name的降序来</li>
</ul>
<h2 id="dcl"><a href="#dcl" class="headerlink" title="dcl"></a>dcl</h2><p>- </p>
<h2 id="常用字符类型"><a href="#常用字符类型" class="headerlink" title="常用字符类型"></a>常用字符类型</h2><ul>
<li><p>数值类型 ： int整形 long长整型 float单精度小数 double双精度 decimal小数，可以自己指定精度的</p>
</li>
<li><p>字符串 ： char字符（长度0-255 不足会自动补齐 补空格） varchar字符串（长度 0-65535 不会自己补空格）</p>
</li>
<li><p>日期 ：</p>
</li>
<li><pre><code>    date 日期 ： YYYY-MM-DD
</code></pre>
</li>
<li><pre><code>  time 时间 ： HH:mm:ss
</code></pre>
</li>
<li><pre><code>  datetime : 年月日时分秒  YYYY-MM-DD  HH:mm:ss
</code></pre>
</li>
<li><pre><code>  timesatmp ：和java里一样
</code></pre>
</li>
</ul>
<h1 id="mysql的优化"><a href="#mysql的优化" class="headerlink" title="mysql的优化"></a>mysql的优化</h1><ul>
<li>避免使用select * 因为这会造成过多的资源浪费 ，  可以应用 where id &#x3D; xx 筛选出要有需要的行</li>
<li>用union all 代替 union</li>
<li>用小表驱动大表 ： 简单来说 就是 判断条件用小表 ， 搜索用大表 ： 比如  ：in左大右小 ， exists左小右大</li>
<li>做增量操作 ： 比如 ：insert into 是可以一条语句插入多个数据的 但是最好不要超过500条</li>
<li>多用limit ：</li>
<li>in中的值太多用limit限制</li>
<li>增量查询</li>
<li>高效的分页</li>
<li>用连接查询代替子查询</li>
<li>join的加入不宜过多 ， 根据电脑来的 ，但是 一般是不超过3个</li>
<li>控制索引的数量 : 一般小于5个</li>
<li>选择合理的字段</li>
<li>提升gropu by 的效率</li>
<li>大数据一般用 hive 和 hbase</li>
<li>不要求 速度</li>
<li>但是可以presto等工具桥接</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>hive第二天</title>
    <url>/2022/11/30/11-30/</url>
    <content><![CDATA[<h1 id="关于hive里的数据类型"><a href="#关于hive里的数据类型" class="headerlink" title="关于hive里的数据类型"></a>关于hive里的数据类型</h1><ul>
<li>整数<ul>
<li>int</li>
<li>bigint &#x3D;&#x3D;long</li>
</ul>
</li>
<li>小数 ：<ul>
<li>float</li>
<li>double</li>
<li>Decimal</li>
</ul>
</li>
<li>字符串：<ul>
<li>String (建议统一用String)</li>
<li>varchar</li>
<li>char</li>
</ul>
</li>
<li>时间：<ul>
<li>时间日期 DATE 格式：YYYY-MM-DD</li>
<li>时间戳：TIMESTAMP YYYY-MM-DD HH:MM:SS</li>
</ul>
</li>
</ul>
<h1 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h1><p>CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS] [db_name.]table_name<br>  [(col_name data_type [column_constraint_specification] [COMMENT col_comment], … [constraint_specification])]<br>  [COMMENT table_comment]<br>  [PARTITIONED BY (col_name data_type [COMMENT col_comment], …)]<br>  [CLUSTERED BY (col_name, col_name, …) [SORTED BY (col_name [ASC|DESC], …)] INTO num_buckets BUCKETS]<br>  [<br>   [ROW FORMAT row_format]<br>   [STORED AS file_format]<br>     | STORED BY ‘storage.handler.class.name’ [WITH SERDEPROPERTIES (…)]  – (Note: Available in Hive 0.6.0 and later)<br>  ]</p>
<p>数据字段名字 字段类型</p>
<p>例如</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytest(</span><br><span class="line">	id String <span class="keyword">comment</span> <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">	<span class="type">name</span> string,</span><br><span class="line">	age <span class="type">bigint</span></span><br><span class="line">) <span class="keyword">comment</span> <span class="string">&#x27;第一个表&#x27;</span></span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> //指定分隔符</span><br><span class="line">STORED <span class="keyword">as</span> TEXTFILE; // 存储形式</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp2 <span class="keyword">like</span> emp;</span><br><span class="line">复制表结构</span><br><span class="line"></span><br><span class="line">或者</span><br></pre></td></tr></table></figure>

<h2 id="为什么要分隔符"><a href="#为什么要分隔符" class="headerlink" title="为什么要分隔符"></a>为什么要分隔符</h2><p>因为我们的元数据都在hdfs上，对于hdfs上的数据可以通过分隔符进行自动导入到hive里，比如上述是，分割的，然后我hdfs上有如下数据</p>
<p>1，zihan,11</p>
<p>2,zhangsan,23</p>
<p>3,liu,33</p>
<p>就会自动按照每一行进行insert</p>
<p>导入数据 ： load data local inpath ‘本地的绝对路径’ into table 表名</p>
<p>清空表的操作 ： truncate table 表名</p>
<h1 id="删除库"><a href="#删除库" class="headerlink" title="删除库"></a>删除库</h1><p>DROP (DATABASE|SCHEMA) [IF EXISTS] database_name [RESTRICT|CASCADE];</p>
<p>DROP DATABASE bigdata_hive4;</p>
<p>DROP DATABASE bigdata_hive2 CASCADE; &#x3D;&gt;删库跑路的操作</p>
<p>CASCADE : 代表联合删除 ，一般删除的时候如果里面有表，会造成无法删除的问题，但是联合删除会直接删除掉</p>
<h1 id="DMl"><a href="#DMl" class="headerlink" title="DMl"></a>DMl</h1><h2 id="load-："><a href="#load-：" class="headerlink" title="load ："></a>load ：</h2><ul>
<li>加载本地数据</li>
<li>加载hdfs上的数据</li>
</ul>
<p>LOAD原本是追加，不是覆盖 ， 但是可以通过 加上 overwrite 关键字 进行 覆盖操作</p>
<h2 id="覆盖例子"><a href="#覆盖例子" class="headerlink" title="覆盖例子"></a>覆盖例子</h2><p>load data local inpath ‘&#x2F;home&#x2F;hadoop&#x2F;tmp&#x2F;emp.txt’ OVERWRITE INTO TABLE emp;</p>
<h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>本地：load data inpath ‘本地路径’ into table 表名</p>
<p>hdfs ： load data inpath ‘hdfs上的路径’ into table 表名</p>
<p>上述的hdfs上的相当于把其路径里的文件移动到table 表名的下面 并且改名，且关联到metastore</p>
<p>但是我们的hdfs mv 是不会关联到metastore的</p>
<p>在hive 里 update 和 delete 不要做 &#x3D;》 因为效率低下</p>
<p>把所有的update和delete都转化成insert和overwrite</p>
<h2 id="插入语句-："><a href="#插入语句-：" class="headerlink" title="插入语句 ："></a>插入语句 ：</h2><p>Inserting data into Hive Tables from queries</p>
<p>insert into|OVERWRITE table tablename selectQury</p>
<p>2.Inserting values into tables from SQL 【不推荐使用】<br>INSERT INTO TABLE tablename<br>VALUES values_row [, values_row …]<br>1.每导入一条数据 就会触发一次 mapreduce job  效率太低</p>
<p>emp2：<br>    insert into table emp2<br>    select *  from emp;<br>insert overwrite table emp2<br>select *  from emp where deptno&#x3D;10;</p>
<h2 id="关于hive里的一些函数以及使用"><a href="#关于hive里的一些函数以及使用" class="headerlink" title="关于hive里的一些函数以及使用"></a>关于hive里的一些函数以及使用</h2><h3 id="1-where-过滤条件"><a href="#1-where-过滤条件" class="headerlink" title="1.where 过滤条件"></a>1.where 过滤条件</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">where_condition</span><br><span class="line">	 &lt;</span><br><span class="line">	 &gt;</span><br><span class="line">	 =</span><br><span class="line">	 &lt;&gt;  !=</span><br><span class="line">	 <span class="keyword">and</span></span><br><span class="line"><span class="keyword"></span>	 <span class="keyword">or</span></span><br><span class="line"><span class="keyword"></span>	 in</span><br><span class="line">	 not in</span><br><span class="line">	 <span class="keyword">between </span> <span class="keyword">and</span></span><br><span class="line"><span class="keyword"></span>	 is</span><br><span class="line">	 is not</span><br></pre></td></tr></table></figure>

<h3 id="需求：查询表中-deptno-20-10"><a href="#需求：查询表中-deptno-20-10" class="headerlink" title="需求：查询表中 deptno 20 10"></a>需求：查询表中 deptno 20 10</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno=<span class="number">20</span> <span class="keyword">or</span> deptno =<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="function"><span class="keyword">from</span> emp</span></span><br><span class="line"><span class="function"><span class="keyword">where</span> deptno <span class="title">in</span> (<span class="params"><span class="number">10</span>,<span class="number">20</span></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno &lt;&gt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno != <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-order-by-排序语法"><a href="#2-order-by-排序语法" class="headerlink" title="2.order by  排序语法"></a>2.order by  排序语法</h3><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>默认<span class="keyword">asc</span> 升序</span><br><span class="line"><span class="number">2.</span>降序 <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-like-语法-模糊匹配"><a href="#3-like-语法-模糊匹配" class="headerlink" title="3.like 语法 模糊匹配"></a>3.like 语法 模糊匹配</h3><figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>._  占位符</span><br><span class="line"><span class="number">2</span>.<span class="comment">%  模糊</span></span><br><span class="line">rlike regexp</span><br></pre></td></tr></table></figure>

<h3 id="4-合并表"><a href="#4-合并表" class="headerlink" title="4.合并表"></a>4.合并表</h3><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="built_in">union</span>  去重</span><br><span class="line"></span><br><span class="line"><span class="built_in">union</span> <span class="built_in">all</span>  不去重</span><br></pre></td></tr></table></figure>

<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> a(id <span class="type">int</span> ,<span class="type">name</span> string) <span class="keyword">row</span> <span class="keyword">format</span>  delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> ;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> b(id <span class="type">int</span> ,<span class="type">name</span> string) <span class="keyword">row</span> <span class="keyword">format</span>  delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> data <span class="keyword">local</span> inpath &quot;/home/hadoop/tmp/a.txt&quot; <span class="keyword">into</span> <span class="keyword">table</span> a;</span><br><span class="line"><span class="keyword">load</span> data <span class="keyword">local</span> inpath &quot;/home/hadoop/tmp/b.txt&quot; <span class="keyword">into</span> <span class="keyword">table</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span> <span class="keyword">from</span> a</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span> <span class="keyword">from</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span> <span class="keyword">from</span> a</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span> <span class="keyword">from</span> b</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> &quot;lisi&quot; <span class="keyword">as</span> <span class="type">name</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span>,&quot;1&quot; <span class="keyword">as</span> pk <span class="keyword">from</span> a</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span>,&quot;2&quot; <span class="keyword">as</span> pk <span class="keyword">from</span> b</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> &quot;lisi&quot; <span class="keyword">as</span> <span class="type">name</span>,&quot;3&quot; <span class="keyword">as</span> id ;</span><br></pre></td></tr></table></figure>

<p>思考： hive建表 默认column 分割符是什么？</p>
<h3 id="5-null-处理"><a href="#5-null-处理" class="headerlink" title="5.null 处理"></a>5.null 处理</h3><pre><code>1. 过滤
    where xxx is not null
is null 作用一样 &lt;=&gt;
2. etl 转换
    ifnull  =&gt; hive里没有
    coalesce =》
    nvl  =》
</code></pre>
<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><pre><code>查看hive支持的function ：
            y=f(x)
    SHOW FUNCTIONS [LIKE &quot;`&lt;pattern&gt;`&quot;];
    show functions like nvl;  =&gt; 判断 function hive 是否存在
    desc function nvl; =》  查看某个函数具体使用
</code></pre>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">job,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">hiredate,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line">nvl(comm,<span class="number">0</span>) as comm_alias,</span><br><span class="line">deptno</span><br><span class="line">from emp <span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="分组-聚合函数-join"><a href="#分组-聚合函数-join" class="headerlink" title="分组 聚合函数 join"></a>分组 聚合函数 join</h2><p>聚合函数 ：</p>
<ul>
<li>sum</li>
<li>max</li>
<li>min</li>
<li>avg</li>
<li>count</li>
</ul>
<h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><ul>
<li>和聚合函数一起使用</li>
<li>一个或者多个colum进行分组</li>
<li>字段必须select出现 和 group by 出现要一致</li>
</ul>
<h3 id="having-："><a href="#having-：" class="headerlink" title="having ："></a>having ：</h3><ul>
<li>在group by 后面使用</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">select job,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">(sal)</span></span> as sal_num,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">max</span><span class="params">(sal)</span></span>,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">min</span><span class="params">(sal)</span></span>,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">avg</span><span class="params">(sal)</span></span>,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">count</span><span class="params">(<span class="number">1</span>)</span></span> as cnt</span><br><span class="line"></span><br><span class="line">from emp</span><br><span class="line"></span><br><span class="line">group by job</span><br><span class="line"></span><br><span class="line">having sal_num &gt; <span class="number">6000</span></span><br></pre></td></tr></table></figure>

<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>找准关联字段</p>
<ul>
<li>inner join [join]</li>
<li>left join</li>
<li>right join</li>
<li>full join</li>
</ul>
<h3 id="需求：既要显示聚合前的数据，又要显示聚合后的数据？"><a href="#需求：既要显示聚合前的数据，又要显示聚合后的数据？" class="headerlink" title="需求：既要显示聚合前的数据，又要显示聚合后的数据？"></a>需求：既要显示聚合前的数据，又要显示聚合后的数据？</h3><p>函数  over([partition by xxx,…] [order by xxx,….])</p>
<p>over: 以谁进行开窗 table、<br>parition by : 以谁进行分组   table columns<br>order by : 以谁进行排序  table columns</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">数据： </span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-10</span>,1</span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-11</span>,5</span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-12</span>,7</span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-13</span>,3</span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-14</span>,2</span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-15</span>,4</span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-16</span>,4</span><br></pre></td></tr></table></figure>

<p>需求：<br>    统计累计问题 ，每个用户每天累计点外卖次数</p>
<p>[partition by xxx,…] [order by xxx,….]</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="type">name</span> ,</span><br><span class="line">dt ,</span><br><span class="line">cnt ,</span><br><span class="line">sum(cnt) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="type">name</span>  <span class="keyword">order</span> <span class="keyword">by</span> dt ) <span class="keyword">as</span> sum_cnt</span><br><span class="line"><span class="keyword">from</span> user_mt;</span><br></pre></td></tr></table></figure>

<h3 id="命令行更改"><a href="#命令行更改" class="headerlink" title="命令行更改"></a>命令行更改</h3><p>command line<br>    1.hive shell<br>    2.jdbc &#x3D;&gt; hiveServer2</p>
<pre><code>hive clinet:
    1. hive shell
    2. beeline shell jdbc   开启 hiveServer2 服务 thift
</code></pre>
<p>在beeline中 <code>!connect jdbc:hive2://localhost:10000 hadoop</code></p>
<p>补充：<br>beeline &#x3D;&gt; 连接 hive  &#x3D;》 hdfs<br>对hdfs 做一个设置 代理设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">core-site.xml:</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>jdbc</title>
    <url>/2022/11/07/11-7/</url>
    <content><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。</li>
<li>注意是工具</li>
</ul>
<h2 id="Maven的配置以及idea使用"><a href="#Maven的配置以及idea使用" class="headerlink" title="Maven的配置以及idea使用"></a>Maven的配置以及idea使用</h2><h3 id="下载及解压"><a href="#下载及解压" class="headerlink" title="下载及解压"></a>下载及解压</h3><ul>
<li>首先在Maven的官网下载Maven</li>
<li><a href="http://maven.apache.org/download.cgi" title="Maven官网">Maven官网</a></li>
<li>我们windows一般下载 ： Binary zip archive的</li>
<li>我这里下载的是 apache-maven-3.8.6-bin.zip</li>
<li>下载完之后 ， 解压到一个文件目录下 </li>
<li>我是新建了个文件目录 命名为 maven</li>
<li>如何解压到文件目录下</li>
</ul>
<h3 id="配置相关文件"><a href="#配置相关文件" class="headerlink" title="配置相关文件"></a>配置相关文件</h3><ul>
<li>解压成功之后 ，我们会获得几个文件夹</li>
<li>bin</li>
<li>boot</li>
<li>conf</li>
<li>lib</li>
<li>这个里conf是maven的配置文件</li>
<li>我们在这个目录下新建maven_repossitory文件夹</li>
<li>这个文件夹可以作为，我们的本地仓库</li>
<li>接下来，我们要修改 conf 文件夹下</li>
<li>settings.xml文件</li>
<li>我们先找到</li>
<li><code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code></li>
<li>这条语句的位置</li>
<li>把它更改成</li>
<li><code>&lt;localRepository&gt;你的maven_repossitory路径&lt;/localRepository&gt;</code></li>
<li>这样我们就自己创建了个</li>
<li>因为一般maven的默认仓库是</li>
<li><code>C:\Users\Administrator\.m2\repository</code></li>
<li>接下来 ， 我们进行设置国内镜像源</li>
<li>找到 mirrors 标签</li>
<li>在mirrors里</li>
<li>加上：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>这个是阿里云的镜像 ， 如果不好使 可以以换成腾讯云 和网易的</li>
<li>添加方法和上面一样</li>
<li>接下来我们可以为maven配置全局的jdk，这样我们在创建maven项目时就会自动使用该jdk版本，我配置的是jdk1.8</li>
<li>找到标签 <profiles></profiles></li>
<li>然后在标签里加入<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- java版本 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="更改idea的maven"><a href="#更改idea的maven" class="headerlink" title="更改idea的maven"></a>更改idea的maven</h3><ul>
<li>file 文件里的 setting</li>
<li>在上面搜索 maven</li>
<li>点进去之后</li>
<li>把Maven home directory</li>
<li>配置成自己的解压的文件夹</li>
<li>然后设置user setting file</li>
<li>把他设置成解压的文件的setting.xml</li>
<li>然后把 local repository</li>
<li>设置成之前自己配置的本地仓库</li>
<li>关于idea的配置就完成了</li>
</ul>
<h2 id="简单的链接mysql"><a href="#简单的链接mysql" class="headerlink" title="简单的链接mysql"></a>简单的链接mysql</h2><ul>
<li>首先创建maven项目</li>
<li>然后在pom.xml中加上</li>
<li><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>在<dependencies>标签中加上</li>
<li>然后import change</li>
<li>然后在主程序的java项目包里</li>
<li>写上：</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.<span class="keyword">Connection</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> App </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main( String[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        String url = &quot;jdbc:mysql://192.168.41.131:3306/try&quot;;</span><br><span class="line">        String <span class="keyword">user</span> = &quot;root&quot;;</span><br><span class="line">        String passwd = &quot;liuzihan010616&quot;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Connection</span> conect = dbutils.getConnection(url , <span class="keyword">user</span> , passwd);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(conect);</span><br><span class="line">        dbutils.closeConnection(conect);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println( &quot;Hello World!&quot; );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>-然后创建一个dbutils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sxwang</span></span><br><span class="line"><span class="comment"> * 11 07 15:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dbutils</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取mysql 连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> passwd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String url, String user, String passwd)</span>&#123;</span><br><span class="line"></span><br><span class="line">        Connection connection=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection = DriverManager.getConnection(url, user, passwd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">(Connection conn)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(conn !=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Mysql对表的操作"><a href="#Mysql对表的操作" class="headerlink" title="Mysql对表的操作"></a>Mysql对表的操作</h2><ul>
<li>alter table 旧表名 rename to 新表名 ： 更改表名字</li>
<li>alter table 表名 modify 列名 数据类型 ： 修改数据类型</li>
<li>alter table 表名 change 旧表名 新列名 数据类型 ： 修改列名</li>
<li>alter table 表名 drop 列名 ： 删除列</li>
<li>alter table 表名 add 新列名 数据类型</li>
<li>alter table 表名 modify 列名1 数据类型 after 列名2；</li>
<li>alter table 表明 modify 列名1 数据类型 first</li>
<li>清空表 </li>
<li>建议</li>
<li>truncate table xxx<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> xxx</span><br><span class="line"><span class="keyword">select</span> xxx <span class="keyword">from</span> xxx</span><br></pre></td></tr></table></figure></li>
<li>create</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="title">create</span></span> <span class="keyword">table</span> ...like <span class="comment">xxxx</span></span><br><span class="line">create <span class="keyword">table</span> xxx <span class="comment">like mmm</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>基于xxx表创建新表</li>
<li>但是，是空表</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ..[<span class="keyword">as</span>]<span class="keyword">select</span> xxxx <span class="keyword">from</span> kkk</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_dev01 <span class="keyword">as</span> <span class="keyword">select</span> ename,job</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>基于其select的表给生成一个表</li>
<li>叫ctas</li>
<li>可以用别名该表头</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>git</title>
    <url>/2022/11/08/11-8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li>
<li>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li>
<li>记录文件变化的 ，之后可以指定版本恢复</li>
</ul>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul>
<li>本地 ： 常用 ：简单 ， 缺点 ： 容易出错 ， 集成效率低下</li>
<li>集中 ： svn ： 缺点 ： 中央服务器出现故障就全完了</li>
<li>分布（目前的主流）： 解决单点故障的问题 ： git</li>
<li>git 可以分支 ，，且支持文件备份 ， 多个工作流</li>
<li></li>
</ul>
<h1 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h1><ul>
<li>从远程仓库中克隆 Git 资源作为本地仓库</li>
<li>从本地仓库中checkout代码然后进行代码修改</li>
<li>在提交本地仓库前先将代码提交到暂存区</li>
<li>提交修改，提交到本地仓库；本地仓库中保存修改的各个历史版本</li>
<li>在需要和团队成员共享代码时，可以将修改代码push到远程仓库</li>
<li>git 的核心概念 ： 工作区、暂存区、版本库、远程仓库</li>
<li>Workspace： 工作区，就是你平时存放项目代码的地方</li>
<li>Index &#x2F; Stage： 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>
<li>Repository： 仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>
<li>Remote： 远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>
</ul>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><ul>
<li>每次的提交Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里这个分支叫主分支，即master分支。HEAD指针严格来说不是指向提交，而是指向master，master才是指向提交的。</li>
</ul>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><ul>
<li>远程仓库分为公有远程仓库和私有远程仓库。</li>
</ul>
<h1 id="公有远程仓库"><a href="#公有远程仓库" class="headerlink" title="公有远程仓库"></a>公有远程仓库</h1><ul>
<li>本质和本地仓库无异，只是这个仓库①不在本地②大家可能都知道③需要将代码共享到远程仓库④可以被其他人克隆同步代码等。</li>
<li>一般情况下在企业中会有一个搭建在公司的远程仓库，可以让本公司内部的开发人员同步开发。而业界最富盛名的远程仓库则为github；它上面存放了非常多的开源组织、个人、企业等的开放源码库，任何都可以从上面获取源码。</li>
</ul>
<h1 id="私有远程仓库"><a href="#私有远程仓库" class="headerlink" title="私有远程仓库"></a>私有远程仓库</h1><ul>
<li>远程仓库实际上和本地仓库一样，纯粹为了7x24小时开机并交换大家的修改。GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</li>
<li>在本地创建了一个Git仓库，又想让其他人来协作开发，此时就可以把本地仓库同步到远程仓库，同时还增加了本地仓库的一个备份。</li>
<li>常用的远程仓库就是github：<a href="https://github.com/">https://github.com/</a></li>
<li>Github支持两种同步方式“https”和“ssh”。如果使用https很简单基本不需要配置就可以使用，但是每次提交代码和下载代码时都需要输入用户名和密码。而且如果是公司配置的私有git服务器一般不提供https方式访问。</li>
</ul>
<h1 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h1><ul>
<li>在工程中，并不是所有文件都需要保存到版本库中的，例如“target”目录及目录下的文件就可以忽略。Git忽略文件详解可参考Git忽略文件.gitignore详解</li>
</ul>
<h1 id="常用Git命令"><a href="#常用Git命令" class="headerlink" title="常用Git命令"></a>常用Git命令</h1><ul>
<li>经常使用 Git ，但是很多命令还是记不住。但要熟练掌握，恐怕要记住40~60个命令，所以整理了一份常用Git命令清单。可以参考常用Git命令</li>
</ul>
<h2 id="常用的git"><a href="#常用的git" class="headerlink" title="常用的git"></a>常用的git</h2><h3 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>git --version   <span class="comment"># 查看git的版本信息</span></span><br><span class="line"><span class="variable">$ </span>git config --global user.name   <span class="comment"># 获取当前登录的用户</span></span><br><span class="line"><span class="variable">$ </span>git config --global user.email  <span class="comment"># 获取当前登录用户的邮箱</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="登录git"><a href="#登录git" class="headerlink" title="登录git"></a>登录git</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 如果刚没有获取到用户配置，则只能拉取代码，不能修改  要是使用git，你要告诉git是谁在使用</span></span><br><span class="line"><span class="variable">$ </span>git config --global user.name <span class="string">&#x27;userName&#x27;</span>    <span class="comment"># 设置git账户，userName为你的git账号，</span></span><br><span class="line"><span class="variable">$ </span>git config --global user.email <span class="string">&#x27;email&#x27;</span></span><br><span class="line"><span class="comment"># 获取Git配置信息，执行以下命令：</span></span><br><span class="line"><span class="variable">$ </span>git config –list</span><br></pre></td></tr></table></figure>
<h3 id="配置https和ssh推送时保存用户名和密码"><a href="#配置https和ssh推送时保存用户名和密码" class="headerlink" title="配置https和ssh推送时保存用户名和密码"></a>配置https和ssh推送时保存用户名和密码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https提交保存用户名和密码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global credential.helper store</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成公钥私钥，将公钥配置到GitHub，ssh提交就可以免输入用户名密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">三次回车即可生成 ssh key</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -t rsa</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已生成的公钥</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span></span><br></pre></td></tr></table></figure>
<h3 id="推送到远程仓库正确流程"><a href="#推送到远程仓库正确流程" class="headerlink" title="推送到远程仓库正确流程"></a>推送到远程仓库正确流程</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git init <span class="comment"># 初始化仓库</span></span><br><span class="line">git <span class="keyword">add </span>.(文件name) <span class="comment"># 添加文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span> <span class="comment"># 添加文件到本地仓库并提交描述信息</span></span><br><span class="line">git remote <span class="keyword">add </span><span class="keyword">origin </span>远程仓库地址 <span class="comment"># 链接远程仓库，创建主分支</span></span><br><span class="line">git pull <span class="keyword">origin </span>master --allow-unrelated-histories <span class="comment"># 把本地仓库的变化连接到远程仓库主分支</span></span><br><span class="line">git push -u <span class="keyword">origin </span>master <span class="comment"># 把本地仓库的文件推送到远程仓库</span></span><br></pre></td></tr></table></figure>
<h3 id="新建本地仓库"><a href="#新建本地仓库" class="headerlink" title="新建本地仓库"></a>新建本地仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个文件夹</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> GitRepositories    <span class="comment"># 创建文件夹GitRepositories</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> GitRepositories       <span class="comment"># 切换到GitRepositories目录下</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个目录，将其初始化为Git代码库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init [project-name]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> [url]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="配置-全局和项目"><a href="#配置-全局和项目" class="headerlink" title="配置(全局和项目)"></a>配置(全局和项目)</h3><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</span></span><br><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ <span class="string">git</span> <span class="string">config</span> <span class="built_in">--list</span></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ <span class="string">git</span> <span class="string">config</span> -<span class="string">e</span> [<span class="built_in">--global]</span></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ <span class="string">git</span> <span class="string">config</span> [<span class="built_in">--global]</span> <span class="string">user</span>.<span class="string">name</span> <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ <span class="string">git</span> <span class="string">config</span> [<span class="built_in">--global]</span> <span class="string">user</span>.<span class="string">email</span> <span class="string">&quot;[email address]&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="增加-x2F-删除文件"><a href="#增加-x2F-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加指定文件到暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add [file1][file2] ...</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add [<span class="built_in">dir</span>]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add -p</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> [file1] [file2] ...</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> --cached [file]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改名文件，并且将这个改名放入暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">mv</span> [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure>
<h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line"><span class="variable">$ </span>git commit -m [message]</span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line"><span class="variable">$ </span>git commit [file1] [file2] ... -m [message]</span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line"><span class="variable">$ </span>git commit -a</span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line"><span class="variable">$ </span>git commit -v</span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line"><span class="variable">$ </span>git commit --amend -m [message]</span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line"><span class="variable">$ </span>git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>
<h3 id="分支-1"><a href="#分支-1" class="headerlink" title="分支"></a>分支</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -r</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch [branch-name]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b [branch]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，指向指定commit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch [branch] [commit]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --track [branch] [remote-branch]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout [branch-name]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到上一个分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --set-upstream [branch] [remote-branch]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并指定分支到当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge [branch]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cherry-pick [commit]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d [branch-name]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -dr [remote/branch]</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">强制删除分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -D [branch-name]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git <span class="keyword">tag</span></span><br><span class="line"><span class="title"># 新建一个tag</span>在当前commit</span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>]</span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>] [commit]</span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">-d</span> [<span class="keyword">tag</span>]</span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [<span class="keyword">tag</span>]</span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [<span class="keyword">tag</span>]</span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [<span class="keyword">tag</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -al	或者$ ll</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看仓库状态，显示有变更的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前分支的版本历史</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索提交历史，根据关键词</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -S [keyword]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某个commit之后的所有变动，其<span class="string">&quot;提交说明&quot;</span>必须符合搜索条件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git whatchanged [file]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示过去5次提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -5 --pretty --oneline</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有提交过的用户，按提交次数排序</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git shortlog -sn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git blame [file]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示暂存区和工作区的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --cached [file]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff HEAD</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示两次提交之间的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff [first-branch]...[second-branch]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示今天你写了多少行代码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show [commit]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某次提交发生变化的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show --name-only [commit]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show [commit]:[filename]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以图形化界面展示 分支的commit 历史</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --oneline --gragh</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line"><span class="variable">$ </span>git fetch [remote]</span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git remote -v</span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line"><span class="variable">$ </span>git remote show [remote]</span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="variable">$ </span>git remote add [shortname] [url]</span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="variable">$ </span>git pull [remote] [branch]</span><br><span class="line"><span class="variable">$ </span>git fetch 也同上</span><br><span class="line"><span class="variable">$ </span>git pull 相当 fetch ＋ merge</span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] [branch]</span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --force</span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --all</span><br><span class="line"><span class="variable">$ </span>push推的是分支不是代码</span><br><span class="line"><span class="comment"># 可以选择那个远程仓库那个分支</span></span><br><span class="line"><span class="variable">$ </span>git push [&lt;repository&gt; [&lt;分支的名字&gt;]]</span><br><span class="line"><span class="variable">$ </span>git fetch</span><br><span class="line"><span class="variable">$ </span>git fetch --all</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line"><span class="variable">$ </span>git checkout [file]</span><br><span class="line"><span class="comment"># 从工作区撤回文件</span></span><br><span class="line"><span class="variable">$ </span>git restore --staged xxxx xxx xxx... </span><br><span class="line"><span class="comment">#从暂存区到工作区撤回</span></span><br><span class="line"><span class="variable">$ </span>git restore xxx xxx xxx..</span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line"><span class="variable">$ </span>git checkout [commit] [file]</span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line"><span class="variable">$ </span>git checkout .</span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line"><span class="variable">$ </span>git reset [file]</span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line"><span class="variable">$ </span>git reset --hard</span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line"><span class="variable">$ </span>git reset [commit]</span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line"><span class="variable">$ </span>git reset --hard [commit]</span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line"><span class="variable">$ </span>git reset --keep [commit]</span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"><span class="variable">$ </span>git revert [commit]</span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line"><span class="variable">$ </span>git stash</span><br><span class="line"><span class="variable">$ </span>git stash pop</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 从当前目录的所有文件中查找文本内容：</span></span><br><span class="line"><span class="variable">$ </span>git grep <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="comment"># 在某一版本中搜索文本：</span></span><br><span class="line"><span class="variable">$ </span>git grep <span class="string">&quot;Hello&quot;</span> v2.<span class="number">5</span></span><br><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line"><span class="variable">$ </span>git archive</span><br></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>当工作区和暂存区都有的时候</li>
<li>直接更改工作区的文件 通过</li>
<li>commit -am “xx”</li>
<li>可以直接把修改了的文件传到本地仓库</li>
<li>merge : 经过merge的文件 ， 相当于把其他地方的分支给回收回来 ，</li>
</ul>
<h3 id="git文件夹的目录介绍"><a href="#git文件夹的目录介绍" class="headerlink" title=".git文件夹的目录介绍"></a>.git文件夹的目录介绍</h3><ul>
<li>HEAD ： 当前项目正在工作的分支</li>
<li>config ： 我们当前项目的一些配置信息（我们本地的配置信息）</li>
<li>可以通过 <code>git config --local user.name &quot;xxx&quot;</code> 来进行设置</li>
<li>或者直接在这个文件按照格式改也一样</li>
<li>同样 ， 有set就有get</li>
<li>refs ： 指向的是那个分支的指向</li>
<li>commit 的hash值对应的是什么内容的</li>
<li>object : git真正的存储对象 </li>
<li><code>git cat-file</code> </li>
<li><code>-t</code> : 文件类型</li>
<li><code>-p</code> : 文件内容</li>
<li><code>tree</code> ： 代表是文件夹</li>
<li><code>blob</code> ： 代表文件内容</li>
<li>git 存储文件高效的原因 ： 不同的文件只要有相同的地方就是一个blob</li>
</ul>
<h3 id="查看git文件存储的方法"><a href="#查看git文件存储的方法" class="headerlink" title="查看git文件存储的方法"></a>查看git文件存储的方法</h3><ul>
<li>我们先进入到.git的object文件夹里 ，因为object文件夹是git存储的首要位置</li>
<li>接下来 ，我们找到refs的文件 ，然后进入到heads里</li>
<li>找到文件 ，里面有我们的commit的哈希值</li>
<li>通过哈希值的前两个字母</li>
<li>我们在object文件夹下 ，找到这两个字符的文件夹</li>
<li>点进去查看文件名字</li>
<li>然后我们在命令行</li>
<li>输入<code>git cat-file -p</code></li>
<li>和<code>git cat-file -t</code></li>
<li>就可以查看到文件的类型和文件的内容</li>
<li>对于文件的内容，我们可以对于上次-p出来的文件再次进行 -p操作 哈希值 ，</li>
<li>就可以看见了</li>
<li>修改之前的某个commit的message</li>
<li>可以用 <code>git rebase</code></li>
<li>git rebase -i &lt;after - this - commit&gt;: 交互式 : 基于前一个commit 进行修改当前的commit ，这样修改了之后所有的hash值会改变，因为变头了 ，但是如果先进行了 ， <code>git cherry-pick</code>操作,则会把吗，master和以前的分支都改变（hash），但是一般是不带master等其他分支的</li>
<li>常用的操作</li>
<li>-p ： </li>
<li>-r ： 重写一个commit的message</li>
<li>-e ： </li>
<li>-s ： 合并多个commit的message</li>
<li>输入上面的那个命令之后我们要进入到一个界面</li>
<li>把要修改的前面改成 r</li>
<li>然后保存退出</li>
<li>然后就会跳转到另外可以编辑这个要编辑的conmmit的地方</li>
<li>就改掉message就好</li>
<li>合并本地message 要在本地合并 ，不能在远程合并</li>
<li>把多个commit合并成一个commit的操作和上面一样 ，只不过是把r改成s了</li>
<li>但是这样合并之后，你相当于把这些信息合并到一起 ，就把最上面的那个看成是一个集合</li>
<li>这样之后一般会放到 .git文件之下的 ， rebase</li>
</ul>
<h2 id="忽略文件-1"><a href="#忽略文件-1" class="headerlink" title="忽略文件"></a>忽略文件</h2><ul>
<li><code>.gitignore</code>文件就是忽略文件</li>
</ul>
<h2 id="仓库备份"><a href="#仓库备份" class="headerlink" title="仓库备份"></a>仓库备份</h2><ul>
<li>git clone ： 就是克隆&#x2F;备份</li>
<li>克隆一个仓库到一个新的文件夹</li>
<li>git clone &lt;仓库&gt; &lt;名字&gt;</li>
<li>这个仓库是本地或者远程仓库</li>
<li>仓库 ： 可以接url，或者本地的.git文件</li>
<li>克隆到名字的文件夹里 ，如果么没有则创建</li>
<li>本地备份本地不常用</li>
<li>一般都是备份远程仓库</li>
<li>对于远程仓库的地址 ，则是为我们通过查看远程仓库的地址进行</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>hive第三天</title>
    <url>/2022/12/01/12-01/</url>
    <content><![CDATA[<h1 id="内部和外部表和普通表和分区表"><a href="#内部和外部表和普通表和分区表" class="headerlink" title="内部和外部表和普通表和分区表"></a>内部和外部表和普通表和分区表</h1><p>分区表 ： 提升查询效率的表</p>
<p>关于hive的查询 ： 对于普通表 则是要先读取所有的数据然后进行筛选的 ， 但是对于分区表，则是把数据进行分区，如果要查询的话，则是针对符合的数据进行查询</p>
<p>往往用分区表进行查询，普通表数据量较少的时候可以用</p>
<p>创建分区表 ：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">order</span>(</span><br><span class="line"></span><br><span class="line">orderid <span class="type">int</span>,</span><br><span class="line"></span><br><span class="line">oredergg String</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (dt String)</span><br><span class="line"></span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span></span><br></pre></td></tr></table></figure>

<p>show partitions 表名 &#x2F;&#x2F;查看现在这个表的分区</p>
<p>修改分区  ：</p>
<p>删除分区  ：<code>alter table 表名 drop partition(分区列 = &#39;分区名&#39;)</code></p>
<p>创建分区 ： 在建表的时候创建</p>
<p>导入数据 ： load&#x2F;insert</p>
<ul>
<li>load : load data (local) inpath ‘’ (overwrite) into table 表名 partition (分区名称) ：数据列数如果对不上就会出现问题 : 加上overwrite则是把一个分区的数据给覆盖掉</li>
<li>insert : insert into table partition(分区) …</li>
<li>insert into 是追加的</li>
<li>如果不要追加则要进行覆盖 insert 后面的 into 变成 overwrite</li>
</ul>
<h2 id="使用一个sql让所有数据落到对应的分区里"><a href="#使用一个sql让所有数据落到对应的分区里" class="headerlink" title="使用一个sql让所有数据落到对应的分区里"></a>使用一个sql让所有数据落到对应的分区里</h2><p>动态分区：相当于我们要进行分区的字段是我们的数据的字段，就可以直接用那个字段当我们的分区但是要打开一个开关</p>
<p><code>set hive.exec.dynamic.partition.mode=nonstrict;</code></p>
<p>静态分区：就是自己制定好分区的标题的</p>
<p>离线任务 ： 业务周期性 T+1</p>
<p>就是延迟一天处理</p>
<p>默认底层创建的是内部表</p>
<p>内部表 ： 受hive管控的 ： 如果有删表的操作，那么会清理干净，所有数据都会被删除</p>
<p>外部表 ： 如果被删除的情况下，只是hdfs上指向metastore的索引被删除了，源数据不会被删除 ，而且我们还可通过建表的方式让他们的索引再次关联上</p>
<p>创建外部表 ：</p>
<p>相互转换 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">外部转内部</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 外部表名字 <span class="keyword">SET</span> TBLPROPERTIES (&quot;EXTERNAL&quot; <span class="operator">=</span> &quot;true&quot;);</span><br><span class="line"></span><br><span class="line">内部转外部</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 外部表名字 <span class="keyword">SET</span> TBLPROPERTIES (&quot;EXTERNAL&quot; <span class="operator">=</span> &quot;false&quot;);</span><br><span class="line">但是这上述的<span class="keyword">EXTERNAL</span> 是不能小写的会造成失效的问题</span><br></pre></td></tr></table></figure>

<h1 id="复杂的数据类型"><a href="#复杂的数据类型" class="headerlink" title="复杂的数据类型"></a>复杂的数据类型</h1><p>中小企业用的不多，，大企业用的多</p>
<p>会建表 ，会查询</p>
<p>maps: <code>MAP&lt;primitive_type, data_type&gt; </code></p>
<p>数据如下 ：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>,zhangsan,father:xiaoming#mother:xiaohuang#brother:xiaoxu,<span class="number">28</span></span><br><span class="line"><span class="number">2</span>,lisi,father:mayun#mother:huangyi#brother:guanyu,<span class="number">22</span></span><br><span class="line"><span class="number">3</span>,wangwu,father:wangjianlin#mother:ruhua#sister:jingtian,<span class="number">29</span></span><br><span class="line"><span class="number">4</span>,mayun,father:mayongzhen#mother:angelababy,<span class="number">26</span></span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> hive_map(</span><br><span class="line">id <span class="type">int</span>  <span class="keyword">comment</span> <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line"><span class="type">name</span> string <span class="keyword">comment</span> <span class="string">&#x27;用户名字&#x27;</span>,</span><br><span class="line">relation map&lt;string,string&gt; <span class="keyword">comment</span> <span class="string">&#x27;家庭成员&#x27;</span>,</span><br><span class="line">age <span class="type">int</span> <span class="keyword">comment</span> <span class="string">&#x27;年龄&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span>  delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">collection items terminated <span class="keyword">by</span> <span class="string">&#x27;#&#x27;</span></span><br><span class="line">map keys terminated <span class="keyword">by</span> <span class="string">&#x27;:&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>arrays:  <code>ARRAY&lt;data_type&gt;</code></p>
<p>数据</p>
<p><code>zihan   beijing,shanghai,chengdu,dalian</code></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> hive_array(</span><br><span class="line"><span class="type">name</span> String,</span><br><span class="line">locations <span class="keyword">array</span>&lt;String&gt;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span></span><br><span class="line">collection items terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>structs:<code>STRUCT&lt;col_name : data_type [COMMENT col_comment], ...&gt;</code></p>
<p>数据</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168.1.1</span>#zhangsan:<span class="number">40</span></span><br><span class="line"><span class="number">192.168.1.2</span>#lisi:<span class="number">50</span></span><br><span class="line"><span class="number">192.168.1.3</span>#wangwu:<span class="number">60</span></span><br><span class="line"><span class="number">192.168.1.4</span>#zhaoliu:<span class="number">70</span></span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> hive_struct(</span><br><span class="line">ip string,</span><br><span class="line">userinfo STRUCT&lt;<span class="type">name</span>:string,age:<span class="type">int</span>&gt;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span>  delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;#&#x27;</span></span><br><span class="line">collection items terminated <span class="keyword">by</span> <span class="string">&#x27;:&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="数据形式的不同使用方法"><a href="#数据形式的不同使用方法" class="headerlink" title="数据形式的不同使用方法"></a>数据形式的不同使用方法</h1><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><p>案例分析：</p>
<p>1.查询每个用户第一个工作地点？</p>
<p>select  name ,locations[0] as first_loc_work from  hive_array;</p>
<p>2.查询每个人 工作地点的数量</p>
<p>select  name , size(locations) from  hive_array ;</p>
<p>3.查询在shanghai 工作的有哪些人</p>
<p>select  * from hive_array  where array_contains(locations,’shanghai’);</p>
<h3 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h3><p>思路是先把一个array的元素炸开，然后通过显示出来</p>
<p>显示手段 ： LATERAL VIEW（侧写视图）</p>
<ul>
<li><p>LATERAL VIEW udtf(expression) tableAlias AS columnAlias</p>
</li>
<li><p>udtf : 一进多出</p>
</li>
<li><p>FROM baseTable (lateralView)*</p>
</li>
<li><p>最终代码 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,location</span><br><span class="line"><span class="keyword">from</span> hive_array <span class="keyword">lateral</span> <span class="keyword">view</span> explode(locations) loc_table <span class="keyword">as</span> location;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>需求： 1.查询表中每个人的father的名字</p>
<p>select id,name,age,relation[‘father’] as father from hive_map;</p>
<p>2.查询表中 每个人的家庭成员   keys</p>
<p>select id,name,age,map_keys(relation) as members from hive_map;</p>
<p>3.查询表中 每个人的家庭成员的名字 values</p>
<p>select id,name,age,map_values(relation) as members from hive_map;</p>
<p>4.查询表中 有brother的人以及brother的名字</p>
<p>select<br> id,name,age,relation[‘brother’] as brother<br>from hive_map<br>where<br>relation[‘brother’] is not null;</p>
<p>或者可以</p>
<p>select<br> id,name,age,relation[‘brother’] as brother<br>from hive_map<br>where<br>array_contains(map_keys(relation), ‘brother’);</p>
<p>&#x2F;&#x2F; map_key()函数的意思是可以把这个列的map的key当作array取出来</p>
<h2 id="structs"><a href="#structs" class="headerlink" title="structs"></a>structs</h2><p>select ip,userinfo.name as name ,userinfo.age as age from hive_struct;</p>
<h2 id="开窗函数-："><a href="#开窗函数-：" class="headerlink" title="开窗函数 ："></a>开窗函数 ：</h2><ul>
<li>分析函数：对开窗函数的分析的函数<ul>
<li>rank : 使用方法 rank()over(partition by xx order by yy) as rk  : 如果有重复的数据，会丢失排名</li>
<li>dense_rank :使用方法同上 ： 如果有重复数据 ，则不会丢失排名 ：</li>
<li>row_number:同上 ： 排名相同且不会重复 ， 就是会顺序往下 ：</li>
</ul>
</li>
</ul>
<p>上述的常用手段 ： 求topn的排名</p>
<p>比如要求top3 的</p>
<p>作业 ：</p>
<p>统计每个店铺的uv</p>
<p>统计top3的用户记录</p>
<p>pv ： 页面的浏览量</p>
<p>uv ： 访客的次数</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>hive第四天</title>
    <url>/2022/12/02/12-02/</url>
    <content><![CDATA[<p>维度组合分析 ：</p>
<p>sql 关键字 ： grouping sets</p>
<p>例子  ：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> table user_shop (</span><br><span class="line">user_id <span class="keyword">String</span>,</span><br><span class="line">shop_name <span class="keyword">String</span>,</span><br><span class="line">channe <span class="keyword">String</span>,</span><br><span class="line">os <span class="keyword">String</span></span><br><span class="line">)</span><br><span class="line">row format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br></pre></td></tr></table></figure>

<p>一般我们进行维度计算的时候，我们可以通过group by 的方式进行</p>
<p>但是假如我们每次都要处理一个维度，那么我们难道要写很多个sql语句吗</p>
<p>这明显是不行的</p>
<p>那么我们如何解决呢</p>
<p>通过grouping sets 就可以解决了</p>
<p>代码如下  ：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empid,custid,</span><br><span class="line">       sum(qty) <span class="keyword">as</span> sumqty</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    <span class="keyword">GROUPING SETS</span></span><br><span class="line">    (</span><br><span class="line">        (empid,custid),</span><br><span class="line">        (empid),(custid),</span><br><span class="line">        ()</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<p>上面代码的意思就是 ：我要按照ｇｒｏｕｐ　ｂｙ　的方法　把empid,custid和empid和custid这几个维度都选出来，然后是上下在一起的　相当于用ｕｎｉｏｎ在一起</p>
<p>如果是这次选择的维度中未选择的维度，比如说　，我只选择了　维度empid　，那么custid列就会是空，但是这个比多次重复性写ｓｑｌ语句要好的多</p>
<h1 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h1><p>针对以下数据</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+--------------+--------------------+</span><br><span class="line">|<span class="string"> hanglie.ame  </span>|<span class="string"> hanglie.teresting  </span>|</span><br><span class="line">+--------------+--------------------+</span><br><span class="line">|<span class="string"> zuan         </span>|<span class="string"> 王者荣耀               </span>|</span><br><span class="line">|<span class="string"> zuan         </span>|<span class="string"> 吃饭                 </span>|</span><br><span class="line">|<span class="string"> zuan         </span>|<span class="string"> rap                </span>|</span><br><span class="line">|<span class="string"> zuan         </span>|<span class="string"> 唱歌                 </span>|</span><br><span class="line">|<span class="string"> chaofeng     </span>|<span class="string"> 王者荣耀               </span>|</span><br><span class="line">|<span class="string"> chaofeng     </span>|<span class="string"> 睡觉                 </span>|</span><br><span class="line">|<span class="string"> chaofeng     </span>|<span class="string"> 方亚                 </span>|</span><br><span class="line">+--------------+--------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们可以把后面散开的数据转化成一个array存起来</p>
<p>通过 collect_list 函数转化成array 而且可以通过 concat_ws函数设置每个参数之间的分隔符</p>
<p>如下</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">ame,</span><br><span class="line">collect_list(teresting) <span class="keyword">as</span> interesting,</span><br><span class="line">concat_ws(<span class="string">&#x27;:&#x27;</span> , collect_list(teresting)) <span class="keyword">as</span> newin</span><br><span class="line"><span class="keyword">from</span> hanglie</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ame</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">+<span class="params">-----------</span>+<span class="params">---------------------------</span>+<span class="params">-----------------</span>+</span><br><span class="line">|    ame    |        interesting        |      newin      |</span><br><span class="line">+<span class="params">-----------</span>+<span class="params">---------------------------</span>+<span class="params">-----------------</span>+</span><br><span class="line">| chaofeng  | [<span class="string">&quot;王者荣耀&quot;</span>,<span class="string">&quot;睡觉&quot;</span>,<span class="string">&quot;方亚&quot;</span>]        | 王者荣耀:睡觉:方亚      |</span><br><span class="line">| zuan      | [<span class="string">&quot;王者荣耀&quot;</span>,<span class="string">&quot;吃饭&quot;</span>,<span class="string">&quot;rap&quot;</span>,<span class="string">&quot;唱歌&quot;</span>]  | 王者荣耀:吃饭<span class="function">:rap</span>:唱歌  |</span><br><span class="line">+<span class="params">-----------</span>+<span class="params">---------------------------</span>+<span class="params">-----------------</span>+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>concat是可以更改数组分隔符的一个函数</p>
<p>例子 ：</p>
<p>拼接：</p>
<ul>
<li>concat  &#x3D;》 字符串拼接</li>
<li>select concat(“zuan”,”|”,”zihang”,”|”,”chaofeng”)</li>
<li>结果是 ：zuan|zihang|chaofeng</li>
<li>concat_ws(string SEP, string A, string B…) &#x3D;》 字符串拼接</li>
<li>select concat_ws(“|”,”zuan”,”zihang”,”chaofeng”)</li>
<li>可变参数 &#x3D;》 array【String】</li>
<li>select concat_ws(“|”,split(“a,a,a”,’,’)</li>
<li>select  split(“a,a,a”,’,’)  ： 这个就是切割字符串</li>
</ul>
<p>所有类型的可以转换成字符串</p>
<p>字符串有好处也有坏处</p>
<p>因为无法排序</p>
<p>但是经过hive优化，字符串是可以进行四则运算的</p>
<p>字符串排序： 按照字典序进行排序的 a-z</p>
<h2 id="BY"><a href="#BY" class="headerlink" title="BY"></a>BY</h2><p>四个by</p>
<h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><p>全局排序 ，且reduce只有一个</p>
<p>order by会对输入进行全局排序，因此只有一个Reducer（多个Reducer无法保证全局有序），然而只有一个Reducer会导致计算效率非常低，使用较少。事实上，在生产环境中，order by 很容易造成OOM。</p>
<p>如下  ：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  *  <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> empno;</span><br></pre></td></tr></table></figure>

<p>执行上述语句要开启个开关才可以</p>
<p>hive.mapred.mode &#x3D;&gt;some risky queries are not allowed to run 【关闭】</p>
<p>如果用order by 推荐和 limit搭配</p>
<h3 id="sort-by"><a href="#sort-by" class="headerlink" title="sort by"></a>sort by</h3><p>分区排序 ： 不能保证 全局有序</p>
<p>sort by不是全局排序，它会在数据进入Reducer之前完成排序。因此如果使用sort by进行排序，并且设置mapreduce.job.reduces多于一个，则sort by只会保证每个reducer的输出有序，不能保证全局有序。但是可以对最后的结果进行归并排序实现全局排序。</p>
<p>假如你的reduce task 个数 是 1 则它和order by 是一样的</p>
<p>调制reduce task 个数 ：</p>
<ul>
<li>mapred.reduce.tasks</li>
<li>set  mapred.reduce.tasks;</li>
</ul>
<h3 id="Distribute-By"><a href="#Distribute-By" class="headerlink" title="Distribute  By"></a>Distribute  By</h3><p>数据开发的时候会用到</p>
<p>distribute by的作用是控制map端如何拆分数据给reduce端。hive会根据distribute by后面的字段，对reduce的个数进行分发，默认采用的是hash算法。sort by保证每个reduce内有序，因此distribute by经常和sort by配合使用。生产环境中 distribute by + sort by用的多。</p>
<p>数据 如下 ：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">2020,1w</span><br><span class="line">2020,2w</span><br><span class="line">2020,1w</span><br><span class="line">2020,0.5w</span><br><span class="line">2021,10w</span><br><span class="line">2021,20w</span><br><span class="line">2021,19w</span><br><span class="line">2021,1.5w</span><br><span class="line">2022,1.3w</span><br><span class="line">2022,2w</span><br><span class="line">2022,1w</span><br><span class="line">2022,0.5w</span><br><span class="line"></span><br><span class="line">+-----------------------+--------------------------+</span><br><span class="line">|<span class="string"> hive_distribute.year  </span>|<span class="string"> hive_distribute.earning  </span>|</span><br><span class="line">+-----------------------+--------------------------+</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 1w                       </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 2w                       </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 1w                       </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 0.5w                     </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 10w                      </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 20w                      </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 19w                      </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 1.5w                     </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 1.3w                     </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 2w                       </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 1w                       </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 0.5w                     </span>|</span><br><span class="line">+-----------------------+--------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>建表 ：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">create</span> <span class="built_in">table</span> hive_distribute(</span><br><span class="line">year <span class="built_in">string</span>,</span><br><span class="line">earning <span class="built_in">string</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>执行语句 ：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">select  <span class="symbol">*</span>  from hive_distribute distribute by year   sort by earning;</span><br><span class="line"></span><br><span class="line">+-----------------------+--------------------------+</span><br><span class="line">|<span class="string"> hive_distribute.year  </span>|<span class="string"> hive_distribute.earning  </span>|</span><br><span class="line">+-----------------------+--------------------------+</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 0.5w                     </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 0.5w                     </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 1.3w                     </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 1.5w                     </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 10w                      </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 19w                      </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 1w                       </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 1w                       </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 1w                       </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 20w                      </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 2w                       </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 2w                       </span>|</span><br><span class="line">+-----------------------+--------------------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Cluster-By"><a href="#Cluster-By" class="headerlink" title="Cluster By"></a>Cluster By</h2><p>ClusterByis a short-cut for both DistributeByand Sort By.</p>
<p>distributeby year   sort by year  《&#x3D;》 ClusterBy year 正确</p>
<p>当distribute by 和 sort by字段相同时，可以使用cluster by。<br>cluster by除了具有distribute by的功能外还兼具sort by的排序功能。但是排序只能是默认的升序，无法指定排序规则。</p>
<h3 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h3><p>hdfs上的文件 ，本地文件会找不到文件，一般只能识别hdfs上的</p>
<p>分桶表是对列值取哈希值的方式，将不同数据放到不同文件中存储。 对于 hive 中每一个表、分区都可以进一步进行分桶。 由列的哈希值除以桶的个数来决定每条数据划分在哪个桶中。</p>
<p>要先开启分桶支持</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> hive.enforce.<span class="attribute">bucketing</span>=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>分桶表的創建</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="meta">[</span>CLUSTERED <span class="keyword">BY</span> (col_name, col_name, <span class="params">...</span>) </span><br><span class="line"> <span class="keyword">INTO</span> num_buckets BUCKETS<span class="meta">]</span></span><br></pre></td></tr></table></figure>

<p>数据</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="symbol">name1</span></span><br><span class="line"><span class="number">2</span>,<span class="symbol">name2</span></span><br><span class="line"><span class="number">3</span>,<span class="symbol">name3</span></span><br><span class="line"><span class="number">4</span>,<span class="symbol">name4</span></span><br><span class="line"><span class="number">5</span>,<span class="symbol">name5</span></span><br><span class="line"><span class="number">6</span>,<span class="symbol">name6</span></span><br><span class="line"><span class="number">7</span>,<span class="symbol">name7</span></span><br><span class="line"><span class="number">8</span>,<span class="symbol">name8</span></span><br></pre></td></tr></table></figure>

<p>创建表</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> hive_bucket(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line"><span class="type">name</span> string </span><br><span class="line">)</span><br><span class="line">clustered <span class="keyword">by</span> (id) <span class="keyword">into</span> <span class="number">4</span> buckets</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> delimited fields terminated <span class="keyword">by</span> &quot;,&quot;;</span><br></pre></td></tr></table></figure>

<p>查询桶中数据</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,<span class="type">name</span> <span class="keyword">from</span> hive_bucket <span class="keyword">tablesample</span>(bucket <span class="number">4</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="number">4</span> <span class="keyword">on</span> <span class="type">name</span>); //bucket后面的数字就是我们要查看的桶的编号 <span class="keyword">out</span> <span class="keyword">of</span> 后面的是总数 ，<span class="keyword">on</span> 后面的是我们分桶的属性</span><br></pre></td></tr></table></figure>

<p>mapreduce:</p>
<p>hash % reducetask个数</p>
<p>文件存储格式</p>
<ul>
<li>行式存储  ：<ul>
<li>里面的列 掺杂很多数据类型</li>
<li>一行内容所有的列都在一个 block里面</li>
<li>行式存储加载所 是把所有的列都查询出来 再过滤出 用户需要的列</li>
<li>如果用户 仅仅查几个字段  &#x3D;》 磁盘io 开销比较大</li>
<li>textfile 文本文件</li>
<li>SequenceFile 文本文件</li>
</ul>
</li>
<li>列式存储 ：<ul>
<li>按照列进行存储</li>
<li>前提： 企业 table 字段 几十个 到几百个</li>
<li>RCFile  &#x3D;》 行 &#x3D;》 列</li>
<li>ORC Files + Parquet</li>
<li>查询几个列</li>
<li>加载表中所有字段</li>
</ul>
</li>
<li>列式存储文件 数据量 比 行式存储的数据量少 【前提 都采用压缩】</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">create</span> table hive_distribute_col(</span><br><span class="line">year <span class="keyword">string</span>,</span><br><span class="line">earning <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line">row <span class="built_in">format</span> delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">stored <span class="keyword">as</span> orc;<span class="comment"> // 这个就是存储形式</span></span><br></pre></td></tr></table></figure>

<h2 id="hive-中文件存储格式-vs-压缩"><a href="#hive-中文件存储格式-vs-压缩" class="headerlink" title="hive 中文件存储格式 vs 压缩"></a>hive 中文件存储格式 vs 压缩</h2><p>压缩格式 ：</p>
<p>Hive支持的压缩格式有bzip2、gzip、deflate、snappy、lzo等。Hive依赖Hadoop的压缩方法，所以Hadoop版本越高支持的压缩方法越多，可以在$HADOOP_HOME&#x2F;conf&#x2F;core-site.xml中进行配置：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;  </span><br><span class="line">        &lt;name&gt;io<span class="selector-class">.compression</span>.codecs&lt;/name&gt;  </span><br><span class="line">        &lt;value&gt;org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.io</span><span class="selector-class">.compress</span><span class="selector-class">.GzipCodec</span>,org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.io</span><span class="selector-class">.compress</span><span class="selector-class">.DefaultCodec</span>,com<span class="selector-class">.hadoop</span><span class="selector-class">.compression</span><span class="selector-class">.lzo</span><span class="selector-class">.LzoCodec</span>,com<span class="selector-class">.hadoop</span><span class="selector-class">.compression</span><span class="selector-class">.lzo</span><span class="selector-class">.LzopCodec</span>,org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.io</span><span class="selector-class">.compress</span><span class="selector-class">.BZip2Codec</span></span><br><span class="line">        &lt;/value&gt;  </span><br><span class="line">&lt;/property&gt;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>常见的压缩格式 ：</p>
<table>
<thead>
<tr>
<th>压缩格式</th>
<th>算法实现</th>
<th>压缩比</th>
<th>效率</th>
<th>可切分</th>
<th>内置</th>
<th>扩展名</th>
<th>Native</th>
<th>Java</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>bzip2</td>
<td>bzip2</td>
<td>最高</td>
<td>慢</td>
<td>yes</td>
<td>Y</td>
<td>.bz2</td>
<td>yes</td>
<td>yes</td>
<td>压缩率最高，一般是源文件的30%左右 ：<br />压缩或者解压效率最慢</td>
</tr>
<tr>
<td>deflate</td>
<td>DEFLATE</td>
<td>高</td>
<td>慢</td>
<td>no</td>
<td>Y</td>
<td>.deflate</td>
<td>no</td>
<td>yes</td>
<td>标准的压缩格式</td>
</tr>
<tr>
<td>gzip</td>
<td>DEFLATE</td>
<td>高</td>
<td>慢</td>
<td>no</td>
<td>Y</td>
<td>.gz</td>
<td>no</td>
<td>yes</td>
<td>相比deflate增加文件头，尾，<br />压缩率比较高，压缩或者解压的效率比较慢</td>
</tr>
<tr>
<td>zlib</td>
<td>DEFLATE</td>
<td>高</td>
<td>慢</td>
<td>no</td>
<td>Y</td>
<td>.zl</td>
<td>yes</td>
<td>no</td>
<td>相比deflate增加文件头，尾</td>
</tr>
<tr>
<td>lz4</td>
<td>lz4</td>
<td>最低</td>
<td>最快</td>
<td>no</td>
<td>Y</td>
<td>.zl4</td>
<td>yes</td>
<td>no</td>
<td>压缩率比较低，不过压缩和解压效率最快</td>
</tr>
<tr>
<td>lzo</td>
<td>lzo</td>
<td>较低</td>
<td>快</td>
<td>yes</td>
<td>N</td>
<td>.lzo_deflate</td>
<td>yes</td>
<td>no</td>
<td>压缩率比较低，不过压缩和解压效率最快</td>
</tr>
<tr>
<td>lzop</td>
<td>snappy</td>
<td>较低</td>
<td>快</td>
<td>yes</td>
<td>N</td>
<td>.lzo</td>
<td>yes</td>
<td>no</td>
<td>压缩率比较低，不过压缩和解压效率最</td>
</tr>
<tr>
<td>snappy</td>
<td>snappy</td>
<td>较低</td>
<td>快</td>
<td>yes</td>
<td>N</td>
<td>.snappy</td>
<td>yes</td>
<td>no</td>
<td>压缩率比较低，不过压缩和解压效率最</td>
</tr>
</tbody></table>
<p>其中压缩比bzip2 &gt; zlib &gt; gzip &gt; deflate &gt; snappy &gt; lzo &gt; lz4，在不同的测试场景中，会有差异，这仅仅是一个大概的排名情况。bzip2、zlib、gzip、deflate可以保证最小的压缩，但在运算中过于消耗时间。</p>
<p>从压缩性能上来看：lz4 &gt; lzo &gt; snappy &gt; deflate &gt; gzip &gt; bzip2，其中lz4、lzo、snappy压缩和解压缩速度快，压缩比低。</p>
<p>所以一般在生产环境中，经常会采用lz4、lzo、snappy压缩，以保证运算效率。</p>
<h2 id="Native-Libraries"><a href="#Native-Libraries" class="headerlink" title="Native Libraries"></a>Native Libraries</h2><p>Hadoop由Java语言开发，所以压缩算法大多由Java实现；但有些压缩算法并不适合Java进行实现，会提供本地库Native Libraries补充支持。Native Libraries除了自带bzip2, lz4, snappy, zlib压缩方法外，还可以自定义安装需要的功能库（snappy、lzo等）进行扩展。</p>
<p>而且使用本地库Native Libraries提供的压缩方式，性能上会有50%左右的提升。</p>
<p>使用命令可以查看native libraries的加载情况：<br><code>hadoop checknative -a</code></p>
<p>完成对Hive表的压缩，有两种方式：配置MapReduce压缩、开启Hive表压缩功能。因为Hive会将SQL作业转换为MapReduce任务，所以直接对MapReduce进行压缩配置，可以达到压缩目的；当然为了方便起见，Hive中的特定表支持压缩属性，自动完成压缩的功能。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>大数据的简单构架</title>
    <url>/2022/12/05/12-05/</url>
    <content><![CDATA[<h1 id="大数据的三件事"><a href="#大数据的三件事" class="headerlink" title="大数据的三件事"></a>大数据的三件事</h1><p>数据采集  ：</p>
<ul>
<li>采集业务数据 ： sqoop ,datax,实时采集maxwell ,flinkdoc</li>
<li>采集日志数据 ： flume ，logstush</li>
</ul>
<p>数据存储 :</p>
<ul>
<li>hdfs (hadoop中的)</li>
<li>hive</li>
<li>hbase【大数据】</li>
<li>数据分析之后的结果数据 ：<ul>
<li>mysql</li>
<li>clickhouse</li>
<li>drios</li>
</ul>
</li>
</ul>
<p>数据分析：</p>
<ul>
<li>map reduce 但是现在不怎么用了，但是思想最重要</li>
<li>hive ： 主要是离线数仓</li>
<li>hbase</li>
<li>spark</li>
<li>flink</li>
</ul>
<p>数据可视化 ：</p>
<ul>
<li>如果有前端开发人员，可以让他们来帮忙</li>
<li>但是如果没有 要自己做<ul>
<li>superset</li>
<li>dataease</li>
<li>echarts</li>
<li>env</li>
<li>anv</li>
</ul>
</li>
<li>收费 : 简历上最好不要写这个<ul>
<li>quickbi</li>
<li>sugar</li>
</ul>
</li>
</ul>
<p>消息中间键 ：</p>
<ul>
<li>kafka</li>
<li>pular</li>
</ul>
<p>(即席查询 ： 临时查询) : presto是最好用的 clickhouse 是有bug的 对内存有要求</p>
<ul>
<li>sparksql , presto , druid , clickhouse ,kylin(cube)</li>
</ul>
<p>数据种类 ：</p>
<ul>
<li>业务数据【mysql ， es】app</li>
<li>日志数据 【log】linux 磁盘上 ，工作中处理的一个重点<ul>
<li>展现日志，点击日志，跳转日志</li>
</ul>
</li>
<li>其他数据</li>
</ul>
<p>架构图  ：</p>
<ul>
<li>业务数据 ： mysql -》sqoop ， datax -》 hds&#x2F;hive</li>
<li>日志数据 ： log文件 -》 flume -》 hdfs&#x2F;hive</li>
<li>hive : 构建离线数仓<ul>
<li>数据分层</li>
<li>维度建模</li>
<li>指标输出</li>
</ul>
</li>
<li>数据可实话<ul>
<li>hive -》 sqoop -》 mysql &#x2F; clickhouse -》数据可视化</li>
</ul>
</li>
</ul>
<p>大数据的基础平台架构</p>
<p>提升 ：大数据的数据平台</p>
<p>大数据基础是相当于 从  0-1 搭建 -》 可以学到以上的所有框架</p>
<p>大数据的数据平台 是基于基础平台再提升了升级 -》 这个学不到什么东西</p>
<p>大数据升级平台</p>
<p>大数据数据开发</p>
<ul>
<li>离线数仓</li>
<li>实时数仓</li>
<li>临时查询</li>
</ul>
<p>大数据的etl工程师</p>
<ul>
<li>数据清洗</li>
<li>数据抽取</li>
<li>数据转换</li>
</ul>
<p>大数据运维工程师</p>
<ul>
<li>上述的框架是它负责安装以及部署的</li>
<li>以及后续的维护</li>
<li>云原生 ， docker ，k8s</li>
</ul>
<p>大数据算法组（数据分析师sql + 数学知识统计 。数据科学家）</p>
<ul>
<li>用户画像</li>
<li>数据挖掘<ul>
<li>python</li>
<li>spark , flink 自带的组件 机器学习相关的组件 ： 速度要比py快</li>
</ul>
</li>
</ul>
<p>新颖的</p>
<ul>
<li>数据湖 -》主要研究方向</li>
<li>云原生 -》 docker ，k8s<ul>
<li>job -》 申请资源 是再yarn上的 ，但是当yarn 做资源隔离的时候万一有三台机器 ，到时候如果所有container 都集中在一台机器上，则会造成机器得负载太大</li>
<li>解决方法 ：<ul>
<li>yarn 的底层编码重写</li>
<li>联合云原生</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="sqoop"><a href="#sqoop" class="headerlink" title="sqoop"></a>sqoop</h1><p>简介 ： 可以把数据和hadoop生态圈进行数据库同步，数据传输</p>
<p>sqoop</p>
<ul>
<li>我们可以通过sqoop这个组件 ，把mysql 里的表 同步到 hdfs，hive ，hbase</li>
<li>反之也可以</li>
<li>原理<ul>
<li>sqoop 是只用map阶段 ，无reduce 阶段 （通过mapreduce 实现的）</li>
</ul>
</li>
<li>指定的参数<ul>
<li>url</li>
<li>username</li>
<li>password</li>
<li>驱动</li>
</ul>
</li>
<li>sqoop版本<ul>
<li>sqoop 1 ：1.4.7</li>
<li>sqoop 2 ：1.99.7</li>
<li>注意这两个是没有任何联系的</li>
<li>建议用1</li>
</ul>
</li>
</ul>
<h1 id="部署sqoop"><a href="#部署sqoop" class="headerlink" title="部署sqoop"></a>部署sqoop</h1><p>这里我使用的是1.4.7的sqoop包</p>
<p>首先我们上传到linux上</p>
<p>然后解压</p>
<p>解压之后我们进入到conf目录下，这个里面存的是我们的 配置文件</p>
<p>我们把sqoop-env-template.sh 改名字成 sqoop-env.sh</p>
<p>然后vim 它进行编辑</p>
<p>把hadoop home 的路径放上 ，以及 hive的路经</p>
<p>然后保存退出</p>
<p>我们接下来在全局变量中注册一下sqoop的bin目录</p>
<p>然后把mysql的connect包给到lib文件夹下</p>
<p>然后执行</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">1</span>.查看可用的数据库 【<span class="string">mysql</span>】</span><br><span class="line"><span class="string">sqoop</span> <span class="built_in">list-databases</span> \</span><br><span class="line"><span class="built_in">--connect</span> <span class="string">jdbc:mysql:</span>//<span class="string">bigdata2:3306 </span> \</span><br><span class="line"><span class="built_in">--username</span> <span class="string">root</span>  \</span><br><span class="line"><span class="built_in">--password</span> <span class="string">liuzihan010616</span></span><br></pre></td></tr></table></figure>

<p>1.4.7会报错 ，因为 缺少java.commons.lang包</p>
<p>我们把这个包上传到lib下就好了</p>
<h1 id="导入和导出"><a href="#导入和导出" class="headerlink" title="导入和导出"></a>导入和导出</h1><p>sqoop的导入和导出</p>
<p>从mysql里导出数据的时候，会默认导入到&#x2F;user&#x2F;hadoop&#x2F;*</p>
<p>hdfs 文件存储 默认是用 ，进行分割每个字段的</p>
<p>hdfs上有几个文件就是有几个map task 和reduce task</p>
<p>其默认的数量是4</p>
<p>导出</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">sqoop <span class="keyword">import</span> \</span><br><span class="line">--connect jdbc:mysql:<span class="comment">//bigdata2:3306/hive  \</span></span><br><span class="line"><span class="comment">--username root  \</span></span><br><span class="line"><span class="comment">--password liuzihan010616 \</span></span><br><span class="line"><span class="comment">--table TBLS</span></span><br></pre></td></tr></table></figure>

<p>设置导出的列的参数</p>
<p><code>--columns</code></p>
<p>设置字段筛选的参数</p>
<p><code>--where</code></p>
<p>设置再yarn上的作业名称</p>
<p><code>--mapreduce-job-name</code></p>
<p>设置 map 和 reduce task 的个数</p>
<p><code>-m,--num-mappers &lt;n&gt; </code></p>
<p>用-m 或者后面的都行</p>
<p>设置hdfs上的文件夹</p>
<p><code>--target-dir</code></p>
<p>设置hdfs上存储的分隔符</p>
<p><code>--fields-terminated-by </code></p>
<p>删除目标文件夹</p>
<p><code>--delete-target-dir </code></p>
<p>总体应用</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">sqoop</span>  <span class="string">import</span> \</span><br><span class="line"><span class="built_in">--connect</span> <span class="string">jdbc:mysql:</span>//<span class="string">bigdata2:3306/</span><span class="string">hive</span>  \</span><br><span class="line"><span class="built_in">--username</span> <span class="string">root</span>  \</span><br><span class="line"><span class="built_in">--password</span> <span class="string">liuzihan010616</span> \</span><br><span class="line"><span class="built_in">--delete-target-dir</span> \</span><br><span class="line"><span class="built_in">--fields-terminated-by</span> <span class="string">&#x27;\&#x27;</span> \</span><br><span class="line"><span class="built_in">--target-dir</span> /<span class="string">ghk</span> \</span><br><span class="line">-<span class="string">m</span> <span class="string">1</span> \</span><br><span class="line"><span class="built_in">--mapreduce-job-name</span> <span class="string">&#x27;mysql 的数据try&#x27;</span> \</span><br><span class="line"><span class="built_in">--where</span> <span class="string">&#x27;TBL_ID &gt;= 10&#x27;</span> \</span><br><span class="line"><span class="built_in">--columns</span> <span class="string">&#x27;TBL_ID , OWNER&#x27;</span> \</span><br><span class="line"><span class="built_in">--table</span> <span class="string">TBLS</span></span><br></pre></td></tr></table></figure>

<p>有主键的表可以直接按照上述同步</p>
<p>但是没主键的，要转化</p>
<p>如果是没有主键的表，有两种转换方法</p>
<p>首先是可以通过  ： -m 设置为1 或者 –split-by 列的名字</p>
<p>如下 ：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqoop  import \</span><br><span class="line"><span class="params">--connect</span> jdbc<span class="function">:mysql</span>:<span class="string">//bigdata2</span><span class="function">:3306</span>/<span class="keyword">try</span>  \</span><br><span class="line"><span class="params">--username</span> root  \</span><br><span class="line"><span class="params">--password</span> liuzihan010616 \</span><br><span class="line"><span class="params">--delete-target-dir</span> \</span><br><span class="line"><span class="params">--fields-terminated-by</span> &#x27;\&#x27; \</span><br><span class="line"><span class="params">--target-dir</span> <span class="string">/ghk</span> \</span><br><span class="line"><span class="params">--split-by</span> empno \</span><br><span class="line"><span class="params">--mapreduce-job-name</span> &#x27;mysql 的数据<span class="keyword">try</span>&#x27; \</span><br><span class="line"><span class="params">--table</span> emp</span><br></pre></td></tr></table></figure>

<p>空值处理 ：</p>
<p><code>--null-non-string 0</code></p>
<p>上面的那个是不是string的处理</p>
<p><code>--null-string &#39;&#39;</code></p>
<h2 id="嵌套sql"><a href="#嵌套sql" class="headerlink" title="嵌套sql"></a>嵌套sql</h2><p>用 –query</p>
<p>但是有注意的点</p>
<p>有–query 的时候，不能放–table</p>
<p>且–query 后面只能接单引号</p>
<p>如下</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqoop  import \</span><br><span class="line"><span class="params">--connect</span> jdbc<span class="function">:mysql</span>:<span class="string">//bigdata2</span><span class="function">:3306</span>/<span class="keyword">try</span>  \</span><br><span class="line"><span class="params">--username</span> root  \</span><br><span class="line"><span class="params">--password</span> liuzihan010616 \</span><br><span class="line"><span class="params">--delete-target-dir</span> \</span><br><span class="line"><span class="params">--fields-terminated-by</span> &#x27;\&#x27; \</span><br><span class="line"><span class="params">--target-dir</span> <span class="string">/ghk</span> \</span><br><span class="line"><span class="params">--split-by</span> empno \</span><br><span class="line"><span class="params">--mapreduce-job-name</span> &#x27;mysql 的数据<span class="keyword">try</span>&#x27; \</span><br><span class="line"><span class="params">--query</span> &#x27;select * from emp where $CONDITIONS&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h1><p>如上述</p>
<p>我们发现太繁琐了</p>
<p>我们可以进行封装到一起</p>
<p>然后直接调用文件就行</p>
<p><code>sqoop --options-file 文件路径</code></p>
<p>文件内容如下 ：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">import </span><br><span class="line"><span class="params">--connect</span> </span><br><span class="line">jdbc<span class="function">:mysql</span>:<span class="string">//bigdata2</span><span class="function">:3306</span>/<span class="keyword">try</span>  </span><br><span class="line"><span class="params">--username</span> </span><br><span class="line">root  </span><br><span class="line"><span class="params">--password</span> </span><br><span class="line">liuzihan010616 </span><br><span class="line"><span class="params">--delete-target-dir</span> </span><br><span class="line"><span class="params">--fields-terminated-by</span> </span><br><span class="line">&#x27;\&#x27; </span><br><span class="line"><span class="params">--target-dir</span></span><br><span class="line"><span class="string">/ghk</span> </span><br><span class="line"><span class="params">--split-by</span> </span><br><span class="line">empno </span><br><span class="line"><span class="params">--mapreduce-job-name</span> </span><br><span class="line">&#x27;mysql 的数据<span class="keyword">try</span>&#x27; </span><br><span class="line"><span class="params">--query</span> </span><br><span class="line">&#x27;select * from emp where $CONDITIONS&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="sqoop-job"><a href="#sqoop-job" class="headerlink" title="sqoop job"></a>sqoop job</h3><ul>
<li>create 创建job</li>
<li>list&#x2F;show 查看job list 是查看列表 show 是查看详情</li>
<li>exec 执行job</li>
</ul>
<p>代码如下 ：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">scoop job <span class="params">--create</span> mysqltry -- \</span><br><span class="line">import \</span><br><span class="line"><span class="params">--connect</span> </span><br><span class="line">jdbc<span class="function">:mysql</span>:<span class="string">//bigdata2</span><span class="function">:3306</span>/<span class="keyword">try</span>  \</span><br><span class="line"><span class="params">--username</span> root  \</span><br><span class="line"><span class="params">--password</span> liuzihan010616 \</span><br><span class="line"><span class="params">--delete-target-dir</span> \</span><br><span class="line"><span class="params">--fields-terminated-by</span> &#x27;\&#x27; \</span><br><span class="line"><span class="params">--target-dir</span> <span class="string">/ghk</span> \</span><br><span class="line"><span class="params">--split-by</span> empno \</span><br><span class="line"><span class="params">--mapreduce-job-name</span> &#x27;mysql 的数据<span class="keyword">try</span>&#x27; \</span><br><span class="line"><span class="params">--query</span> &#x27;select * from emp where $CONDITIONS&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><p>也可以通过shell脚本调用 sqoop</p>
<p>如下 ：普通表的</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt <span class="number">6</span> ];then</span><br><span class="line"> echo <span class="string">&quot;$0 use sync mysql 2 hive&quot;</span></span><br><span class="line"> echo <span class="string">&quot;USAGE:$0 mysqldb sql hivedb hivetable idautocreatetable fengefu&quot;</span></span><br><span class="line"> echo <span class="string">&quot;Example mysql的数据库 sql语句 hive的数据库  hive的表 分隔符 是不是自动创建表&quot;</span></span><br><span class="line"> <span class="keyword">exit</span> <span class="number">1</span>;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql parm</span></span><br><span class="line">mysqldb=<span class="variable">$1</span></span><br><span class="line">sql=<span class="string">&quot;$2&quot;</span></span><br><span class="line"><span class="comment">#hive parms </span></span><br><span class="line">hivedb=<span class="variable">$3</span></span><br><span class="line">hivetable=<span class="variable">$4</span></span><br><span class="line">flag =<span class="variable">$6</span></span><br><span class="line"></span><br><span class="line">try <span class="string">&#x27;select * from emp&#x27;</span> bigdata_hive3 emp6 , <span class="number">1</span></span><br><span class="line"></span><br><span class="line">MySQL_URL=<span class="string">&quot;jdbc:mysql://bigdata2:3306/$&#123;mysqldb&#125;&quot;</span> </span><br><span class="line">MySQL_USER=root</span><br><span class="line">MySQL_PASSWD=liuzihan010616</span><br><span class="line">FIELDS_TERMINATED=<span class="variable">$5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;flag&#125;</span> -eq <span class="number">1</span> ];then</span><br><span class="line">sqoop import \</span><br><span class="line">--connect <span class="variable">$&#123;MySQL_URL&#125;</span>  \</span><br><span class="line">--username <span class="variable">$&#123;MySQL_USER&#125;</span>  \</span><br><span class="line">--password <span class="variable">$&#123;MySQL_PASSWD&#125;</span> \</span><br><span class="line">--mapreduce-job-name <span class="string">&#x27;mysql2hive&#x27;</span> \</span><br><span class="line">--<span class="keyword">delete</span>-target-dir \</span><br><span class="line">--target-dir <span class="regexp">/sqoop/</span>emp_tmp \</span><br><span class="line">--fields-terminated-by <span class="variable">$&#123;FIELDS_TERMINATED&#125;</span> \</span><br><span class="line">-m <span class="number">1</span> \</span><br><span class="line">--query <span class="string">&quot;$&#123;sql&#125; and \$CONDITIONS &quot;</span> \</span><br><span class="line">--hive-import \</span><br><span class="line">--create-hive-table \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--hive-database <span class="variable">$&#123;hivedb&#125;</span> \</span><br><span class="line">--hive-table <span class="variable">$&#123;hivetable&#125;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sqoop import \</span><br><span class="line">--connect <span class="variable">$&#123;MySQL_URL&#125;</span>  \</span><br><span class="line">--username <span class="variable">$&#123;MySQL_USER&#125;</span>  \</span><br><span class="line">--password <span class="variable">$&#123;MySQL_PASSWD&#125;</span> \</span><br><span class="line">--mapreduce-job-name <span class="string">&#x27;mysql2hive&#x27;</span> \</span><br><span class="line">--<span class="keyword">delete</span>-target-dir \</span><br><span class="line">--target-dir <span class="regexp">/sqoop/</span>emp_tmp \</span><br><span class="line">--fields-terminated-by <span class="variable">$&#123;FIELDS_TERMINATED&#125;</span> \</span><br><span class="line">-m <span class="number">1</span> \</span><br><span class="line">--query <span class="string">&quot;$&#123;sql&#125; and \$CONDITIONS &quot;</span> \</span><br><span class="line">--hive-import \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--hive-database <span class="variable">$&#123;hivedb&#125;</span> \</span><br><span class="line">--hive-table <span class="variable">$&#123;hivetable&#125;</span></span><br><span class="line"><span class="keyword">exit</span> <span class="number">200</span>;</span><br><span class="line">fi</span><br><span class="line">---------------------------------分区表--------------------------------------------</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt <span class="number">8</span> ];then</span><br><span class="line"> echo <span class="string">&quot;$0 use sync mysql 2 hive&quot;</span></span><br><span class="line"> echo <span class="string">&quot;USAGE:$0 mysqldb sql hivedb hivetable idautocreatetable fengefu hivepartition hivepartitionvalue&quot;</span></span><br><span class="line"> echo <span class="string">&quot;Example mysql的数据库 sql语句 hive的数据库  hive的table 分隔符  hive的分区属性 分区属性的值 是不是自动创建表&quot;</span></span><br><span class="line"> <span class="keyword">exit</span> <span class="number">1</span>;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql parm</span></span><br><span class="line">mysqldb=<span class="variable">$1</span></span><br><span class="line">sql=<span class="string">&quot;$2&quot;</span></span><br><span class="line"><span class="comment">#hive parms </span></span><br><span class="line">hivedb=<span class="variable">$3</span></span><br><span class="line">hivetable=<span class="variable">$4</span></span><br><span class="line">hivepartition=<span class="variable">$6</span></span><br><span class="line">hivepartitionvalue=<span class="variable">$7</span></span><br><span class="line">flag=<span class="variable">$8</span></span><br><span class="line">MySQL_URL=<span class="string">&quot;jdbc:mysql://bigdata2:3306/$&#123;mysqldb&#125;&quot;</span> </span><br><span class="line">MySQL_USER=root</span><br><span class="line">MySQL_PASSWD=liuzihan010616</span><br><span class="line">FIELDS_TERMINATED=<span class="variable">$5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;flag&#125;</span> -eq <span class="number">1</span> ];then</span><br><span class="line">sqoop import \</span><br><span class="line">--connect <span class="variable">$&#123;MySQL_URL&#125;</span>  \</span><br><span class="line">--username <span class="variable">$&#123;MySQL_USER&#125;</span>  \</span><br><span class="line">--password <span class="variable">$&#123;MySQL_PASSWD&#125;</span> \</span><br><span class="line">--mapreduce-job-name <span class="string">&#x27;mysql2hive&#x27;</span> \</span><br><span class="line">--<span class="keyword">delete</span>-target-dir \</span><br><span class="line">--target-dir <span class="regexp">/sqoop/</span>emp_tmp \</span><br><span class="line">--fields-terminated-by <span class="variable">$&#123;FIELDS_TERMINATED&#125;</span> \</span><br><span class="line">-m <span class="number">1</span> \</span><br><span class="line">--query <span class="string">&quot;$&#123;sql&#125; and \$CONDITIONS &quot;</span> \</span><br><span class="line">--hive-import \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--create-hive-table \ </span><br><span class="line">--hive-database <span class="variable">$&#123;hivedb&#125;</span> \</span><br><span class="line">--hive-table <span class="variable">$&#123;hivetable&#125;</span> \</span><br><span class="line">--hive-partition-key <span class="variable">$&#123;hivepartition&#125;</span> \</span><br><span class="line">--hive-partition-value <span class="variable">$&#123;hivepartitionvalue&#125;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sqoop import \</span><br><span class="line">--connect <span class="variable">$&#123;MySQL_URL&#125;</span>  \</span><br><span class="line">--username <span class="variable">$&#123;MySQL_USER&#125;</span>  \</span><br><span class="line">--password <span class="variable">$&#123;MySQL_PASSWD&#125;</span> \</span><br><span class="line">--mapreduce-job-name <span class="string">&#x27;mysql2hive&#x27;</span> \</span><br><span class="line">--<span class="keyword">delete</span>-target-dir \</span><br><span class="line">--target-dir <span class="regexp">/sqoop/</span>emp_tmp \</span><br><span class="line">--fields-terminated-by <span class="variable">$&#123;FIELDS_TERMINATED&#125;</span> \</span><br><span class="line">-m <span class="number">1</span> \</span><br><span class="line">--query <span class="string">&quot;$&#123;sql&#125; and \$CONDITIONS &quot;</span> \</span><br><span class="line">--hive-import \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--hive-database <span class="variable">$&#123;hivedb&#125;</span> \</span><br><span class="line">--hive-table <span class="variable">$&#123;hivetable&#125;</span> \</span><br><span class="line">--hive-partition-key <span class="variable">$&#123;hivepartition&#125;</span> \</span><br><span class="line">--hive-partition-value <span class="variable">$&#123;hivepartitionvalue&#125;</span></span><br><span class="line">fi</span><br><span class="line">-----------------------------------------------------hivetomysql的----------------------------------------------------</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt <span class="number">4</span> ];then</span><br><span class="line">echo <span class="string">&quot;error 变量小于4个&quot;</span></span><br><span class="line">echo <span class="string">&quot;example try , /user/hive/warehouse/bigdata_hive3.db/emp_partition/deptno=20 emp1&quot;</span></span><br><span class="line">echo <span class="string">&quot;mysql数据库 分隔符 hdfs上的路径 mysql里的表名&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">mysqldb=<span class="variable">$1</span></span><br><span class="line">fengefu=<span class="variable">$2</span></span><br><span class="line">hdfslujing=<span class="variable">$3</span></span><br><span class="line">mysqltable=<span class="variable">$4</span></span><br><span class="line"></span><br><span class="line">hive -e <span class="string">&quot;use bigdata_hive3 ; create table &quot;</span></span><br><span class="line"></span><br><span class="line">sqoop export \</span><br><span class="line">--connect jdbc:mysql:<span class="regexp">//</span>bigdata2:<span class="number">3306</span>/<span class="variable">$&#123;mysqldb&#125;</span>  \</span><br><span class="line">--username root  \</span><br><span class="line">--password liuzihan010616 \</span><br><span class="line">--fields-terminated-by <span class="variable">$&#123;fengefu&#125;</span> \</span><br><span class="line">--export-dir <span class="variable">$&#123;hdfslujing&#125;</span> \</span><br><span class="line">--null-non-string <span class="number">0</span></span><br><span class="line">--null-string <span class="string">&#x27;&#x27;</span></span><br><span class="line">--table <span class="variable">$&#123;mysqltable&#125;</span> </span><br><span class="line">----------------------------------------------hivetomysql的分区表如何同步-----------------------</span><br><span class="line">先把hive的分区表用create table zz as elect * from xxx(分区表的名字) </span><br><span class="line">然后把zz当成普通表传过去 ，但是在sqoop1.<span class="number">4.7</span> 目前这个功能出现了些问题</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h1 id="从mysql-到-hive等工具中"><a href="#从mysql-到-hive等工具中" class="headerlink" title="从mysql 到 hive等工具中"></a>从mysql 到 hive等工具中</h1><p>大部分都和上述一样的</p>
<p>只不过要换个链接以及表名字</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line"><span class="params">--connect</span> jdbc<span class="function">:mysql</span>:<span class="string">//bigdata2</span><span class="function">:3306</span>/<span class="keyword">try</span>  \</span><br><span class="line"><span class="params">--username</span> root  \</span><br><span class="line"><span class="params">--password</span> liuzihan010616 \</span><br><span class="line"><span class="params">--delete-target-dir</span> \</span><br><span class="line"><span class="params">--fields-terminated-by</span> &#x27;\&#x27; \</span><br><span class="line"><span class="params">--target-dir</span> <span class="string">/ghk</span> \</span><br><span class="line"><span class="params">--split-by</span> empno \</span><br><span class="line"><span class="params">--mapreduce-job-name</span> &#x27;mysql 的数据<span class="keyword">try</span>&#x27; \</span><br><span class="line"><span class="params">--query</span> &#x27;select * from emp where $CONDITIONS&#x27; \</span><br><span class="line"><span class="params">--hive-import</span> \</span><br><span class="line"><span class="params">--hive-overwrite</span> \</span><br><span class="line"><span class="params">--create-hive-table</span> \ </span><br><span class="line"><span class="params">--hive-database</span> bigdata_hive3 \</span><br><span class="line"><span class="params">--hive-table</span> emp_hive1</span><br></pre></td></tr></table></figure>

<p>在1.4.7的版本中其要求必须 加上 <code>--target dir 属性</code></p>
<p>且要从hive的lib文件夹下，把所有jar包给sqoop的lib下</p>
<p>上述 create-hive-table 是自动创建表</p>
<p>但是因为mysql里的属性只有几个 ，没hive特有的decmical等，可能会造成丢失数据</p>
<p>所以提议先在hive中创建表，然后再导入</p>
<h2 id="创建分区表"><a href="#创建分区表" class="headerlink" title="创建分区表"></a>创建分区表</h2><p>分区表如上 ；只不过要用</p>
<p><code>--hive-partition-key xxxx（列名）</code></p>
<p><code>--hive-partition-value xxx(分区字段的数值)</code></p>
<p>或者可以直接用–query 用代码的方式进行分区</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line"><span class="params">--connect</span> jdbc<span class="function">:mysql</span>:<span class="string">//bigdata2</span><span class="function">:3306</span>/<span class="keyword">try</span>  \</span><br><span class="line"><span class="params">--username</span> root  \</span><br><span class="line"><span class="params">--password</span> liuzihan010616 \</span><br><span class="line"><span class="params">--delete-target-dir</span> \</span><br><span class="line"><span class="params">--fields-terminated-by</span> &#x27;\&#x27; \</span><br><span class="line"><span class="params">--target-dir</span> <span class="string">/ghk</span> \</span><br><span class="line"><span class="params">--split-by</span> empno \</span><br><span class="line"><span class="params">--mapreduce-job-name</span> &#x27;mysql 的数据<span class="keyword">try</span>&#x27; \</span><br><span class="line"><span class="params">--query</span> &#x27;select empno,ename,job,mgr,hiredate,sal,comm from emp where deptno=20 and $CONDITIONS &#x27; \</span><br><span class="line"><span class="params">--hive-import</span> \</span><br><span class="line"><span class="params">--hive-overwrite</span> \</span><br><span class="line"><span class="params">--create-hive-table</span> \</span><br><span class="line"><span class="params">--hive-database</span> bigdata_hive3 \</span><br><span class="line"><span class="params">--hive-table</span> emp_partition \</span><br><span class="line"><span class="params">--hive-partition-key</span> deptno \</span><br><span class="line"><span class="params">--hive-partition-value</span> 20</span><br></pre></td></tr></table></figure>

<h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><p>不管是hdfs 或者是hive 都是基于路径导出</p>
<p>通过export导出</p>
<p>代码 ：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">sqoop <span class="keyword">export</span> \</span><br><span class="line">--connect jdbc:mysql:<span class="comment">//bigdata2:3306/try  \</span></span><br><span class="line"><span class="comment">--username root  \</span></span><br><span class="line"><span class="comment">--password liuzihan010616 \</span></span><br><span class="line"><span class="comment">--table xxxX \</span></span><br><span class="line"><span class="comment">--fields-terminated-by &#x27;分隔符&#x27; \</span></span><br><span class="line"><span class="comment">--export-dir hdfs上的数据的路径 \</span></span><br></pre></td></tr></table></figure>

<p>这个是hdfs导入到mysql</p>
<p>sqoop导入hive到mysql的时候空值要先进行处理，</p>
<h1 id="开启历史日志"><a href="#开启历史日志" class="headerlink" title="开启历史日志"></a>开启历史日志</h1><p>开启开关 ：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述是日志收集的开关</p>
<p>下面是日志在hdfs上存储的lujing</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://bigdata3:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面是设置日志收集的时间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>259200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来我们要配置mapred -site.xml</p>
<p>如下 ：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata3:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata3:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后通过命令行的方式执行命令</p>
<p><code>yarn timelineserver   [bigdata4]</code></p>
<p><code>mapred historyserver  [bigdata3] </code></p>
<p>提示 ： 我的namenode在bigdata3上 ，而resourcemanager 在 bigdata4上</p>
<p>Hive建表时，默认使用的分隔符时候一个特殊的字符，查看表决结构时候是一个’\001’</p>
<p>这不是真正的’\001’，其实是使用八进制编码\001表示</p>
<h2 id="hive-table-gt-mysql-多次导入-数据结果不同"><a href="#hive-table-gt-mysql-多次导入-数据结果不同" class="headerlink" title="hive table -&gt; mysql 多次导入 数据结果不同"></a>hive table -&gt; mysql 多次导入 数据结果不同</h2><p>幂等性 ： 多次操作 ，数据结果是不变的</p>
<p>mysql - &gt; hive -&gt; hive-overwrite</p>
<p>hive -&gt; mysql 幂等性 如何解决</p>
<p>方法 ：</p>
<p>可以通过 <code>mysql -u root -p xxx -e sql语句</code></p>
<p>或者 <code>mysql -uroot -pliuzihan010616 &lt; ./try.sql 这个是执行sql文件</code></p>
<p>上述两个语句是可以在MySQL外部直接进行执行的，不用进入到mysql里</p>
<p>数据库唯一主键</p>
<p>缺点：无法使用change buffer，InnoDB为了进行唯一性检查，必须有一次磁盘IO读页</p>
<p>业务状态校验</p>
<p>业务上根据业务ID的唯一性和业务处理的结果去做判断，但是这部分判断的逻辑需要考虑原子性。否则会因为并发问题导致幂等失效。解决途径（一）加锁，根据当前的服务环境选择单机或分布式锁。（二）采用现成方案Tomato，通过滑动窗口或者固定窗口拦截控制时间内的请求</p>
<p>数据库乐观锁实现幂等性</p>
<p>缺点：操作业务前，需要先查询出当前的version版本。会增加操作</p>
<p>防重 Token 令牌实现幂等性</p>
<p>缺点：</p>
<p>产生过多额外请求</p>
<p>先删除token，如果业务处理出现异常但token已经删除掉了，再来请求会被认定为重复请求</p>
<p>后删除token，如果删除redis中的token失败了，再来请求不会拦截，发生了重复请求</p>
<p>下游传递唯一序列号实现幂等性</p>
<p>缺点：无法控制下游唯一序列号的生成规则，如果序列号由时间戳生成，那么无法拦截类似重复点击这种情况下的重复请求</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>项目可视化框架</title>
    <url>/2022/12/06/12-06/</url>
    <content><![CDATA[<h1 id="superset"><a href="#superset" class="headerlink" title="superset"></a>superset</h1><p>官网 ： superset ： <a href="https://superset.apache.org/">https://superset.apache.org/</a></p>
<p>类似于otb ： 开箱即用</p>
<p>把图弄到一个dashboard中 ，显示出来</p>
<p>底层源码  ： python编译的 ： 建议先安装python 然后再安装它 ，不要把superset和mysql在一起</p>
<p>因为原生的superset，需要一个和mysql冲突的包</p>
<p>但是docker还是可以的</p>
<p>先安装python环境</p>
<p>anconda -》 python</p>
<p>python原生 ： 建议</p>
<h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>毫无疑问docker安装是最快速的而且，不用担心依赖等</p>
<p>docker安装的步骤如下  ：</p>
<p>先安装yarn工具集</p>
<p><code>yum -y install yum-utils</code></p>
<p>然后把docker源添加到镜像里</p>
<p><code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p>
<p>我这里添加的是阿里的镜像源</p>
<p>然后更新软件包索引</p>
<p><code>yum makecache fast</code></p>
<p>接下来我们就要开始安装docker了</p>
<p><code>yum -y install docker-ce docker-ce-cli containerd.io</code></p>
<p>设置一下docker开机自启</p>
<p><code>systemctl enable docker</code></p>
<p>然后我们启动docker</p>
<p><code>systemctl start docker</code></p>
<p>我们搜索superset镜像</p>
<p><code>docker search superset</code></p>
<p>直接拉去自己想要的版本 ，我这里拉去的是0.37.2的</p>
<p><code>docker pull amancevice/superset:0.37.2</code></p>
<p>接下来我们要创建存储superset配置文件及数据文件的文件夹</p>
<p><code>mkdir -p /opt/module/docker/superset/conf </code></p>
<p><code>mkdir -p /opt/module/docker/superset/data</code></p>
<p>接下来我们要创建superset的容器，并把端口映射出来</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run --name superset -u <span class="number">0</span> -d -p <span class="number">8088</span>:<span class="number">8088</span> -v <span class="regexp">/opt/m</span>odule<span class="regexp">/docker/</span>superset<span class="regexp">/conf:/</span>etc<span class="regexp">/superset -v /</span>opt<span class="regexp">/module/</span>docker<span class="regexp">/superset/</span>data:<span class="regexp">/var/</span>lib<span class="regexp">/superset amancevice/</span>superset:<span class="number">0.37</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>然后初始化我们的superset数据库</p>
<p><code>docker exec -it superset superset db upgrade</code></p>
<p>创建superset的管理员账号</p>
<p><code>docker exec -it superset superset fab create-admin</code></p>
<p>创建成功之后可以对其进行初始化了</p>
<p><code>docker exec -it superset superset init </code></p>
<p>最后执行开启服务</p>
<p><code>docker exec -it superset superset run --with-threads --reload --debugger</code></p>
<p>就可以啦 ，我们可以通过web页面 ip:8088访问 因为我们映射的端口是8088嘛</p>
<p>但是要注意一点，就是我们在我们的superset添加数据库的时候不能用修改了host里的别名进行IP替代</p>
<p>因为我们的superset是安装在我们的docker里的哪里的host并没有进行修改，识别不了别名，我们可以对其进行修改，但是嫌麻烦可以直接弄个ip</p>
<p>接下来我们简单弄个启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">check_log_dir</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    SUPERSET_LOG_DIR=/usr/local/src/superset/logs</span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="variable">$SUPERSET_LOG_DIR</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">mkdir</span> -p <span class="variable">$SUPERSET_LOG_DIR</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">superset_start</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    cmd=<span class="string">&quot;docker start superset;nohup docker exec -it superset superset run --with-threads --reload --debugger &gt;<span class="variable">$SUPERSET_LOG_DIR</span>/superset.log 2&gt;&amp;1 &amp;&quot;</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$cmd</span> || <span class="built_in">echo</span> <span class="string">&quot;superset服务已启动&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">superset_stop</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">   docker stop superset</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">superset_status</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">  docker ps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;start&quot;</span>)</span><br><span class="line">     check_log_dir</span><br><span class="line">     superset_start</span><br><span class="line">    ;;</span><br><span class="line"><span class="string">&quot;stop&quot;</span>)</span><br><span class="line">     superset_stop</span><br><span class="line">    ;;</span><br><span class="line"><span class="string">&quot;status&quot;</span>)</span><br><span class="line">      superset_status</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> Invalid Args!</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Usage: &#x27;</span>$(<span class="built_in">basename</span> <span class="variable">$0</span>)<span class="string">&#x27; start|stop|status&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<h2 id="原生安装"><a href="#原生安装" class="headerlink" title="原生安装"></a>原生安装</h2><p>superset的原生安装是有坑的 ，以下操作只能是root用</p>
<p>在安装superset的时候容易出现gcc的问题，解决方法就是一直重新安装那一步</p>
<p>下面我们一起来进行原生安装</p>
<p>首先我们要安装python3的一些依赖 <code>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</code></p>
<p>然后我们要进行安装EPEL源并安装superset必备的包</p>
<p><code>yum install epel-release #安装epel源</code></p>
<p><code>yum install mysql-devel #安装MySQL开发包，属于pymysqlclient依赖</code></p>
<p><code>yum install gcc gcc-c++ libffi-devel python-devel python-pip python-wheel openssl-devel cyrus-sasl-devel openldap-devel</code></p>
<p>接下来我们要上传自己的python安装包到linuxx服务器上</p>
<p> <code>cd /root/公共</code></p>
<p><code>tar -xf ./Python-3.6.6.tgz</code></p>
<p>然后进入到解压出来的文件夹中进行编译</p>
<p><code>./configure</code></p>
<p><code>make &amp;&amp; make install</code></p>
<p>安装python3的virtualenv并建⽴superset的env</p>
<p><code>pip3 install --upgrade pip -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p>
<p><code>virtualenv -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p>
<p><code>pip3 install --upgrade setuptools -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p>
<p>建⽴superset的env&amp;激活</p>
<p><code>python3 -m venv superset-py3</code></p>
<p><code>source superset-py3/bin/activate #激活superset的venv</code></p>
<p>安装superset需要的安装包</p>
<p>这个包的数量很多建议大家创建一个txt文件然后安装</p>
<p>requirement.txt文件添加</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">alembic</span>==<span class="number">1</span>.<span class="number">3</span>.<span class="number">2</span>            # via flask-migrate</span><br><span class="line"><span class="attribute">amqp</span>==<span class="number">2</span>.<span class="number">5</span>.<span class="number">2</span>               # via kombu</span><br><span class="line"><span class="attribute">apispec</span>[yaml]==<span class="number">1</span>.<span class="number">3</span>.<span class="number">3</span>      # via flask-appbuilder</span><br><span class="line"><span class="attribute">attrs</span>==<span class="number">19</span>.<span class="number">3</span>.<span class="number">0</span>             # via jsonschema</span><br><span class="line"><span class="attribute">babel</span>==<span class="number">2</span>.<span class="number">8</span>.<span class="number">0</span>              # via flask-babel</span><br><span class="line"><span class="attribute">backoff</span>==<span class="number">1</span>.<span class="number">10</span>.<span class="number">0</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">billiard</span>==<span class="number">3.6.3.0</span>         # via celery</span><br><span class="line"><span class="attribute">bleach</span>==<span class="number">3</span>.<span class="number">1</span>.<span class="number">0</span>             # via apache-superset (setup.py)     ---</span><br><span class="line"><span class="attribute">celery</span>==<span class="number">4</span>.<span class="number">4</span>.<span class="number">1</span>             # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">cffi</span>==<span class="number">1</span>.<span class="number">13</span>.<span class="number">2</span>              # via cryptography</span><br><span class="line"><span class="attribute">click</span>==<span class="number">7</span>.<span class="number">1</span>.<span class="number">1</span>              # via apache-superset (setup.py), flask, flask-appbuilder</span><br><span class="line"><span class="attribute">colorama</span>==<span class="number">0</span>.<span class="number">4</span>.<span class="number">3</span>           # via apache-superset (setup.py), flask-appbuilder</span><br><span class="line"><span class="attribute">contextlib2</span>==<span class="number">0</span>.<span class="number">6</span>.<span class="number">0</span>.post1  # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">croniter</span>==<span class="number">0</span>.<span class="number">3</span>.<span class="number">31</span>          # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">cryptography</span>==<span class="number">2</span>.<span class="number">8</span>         # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">decorator</span>==<span class="number">4</span>.<span class="number">4</span>.<span class="number">1</span>          # via retry</span><br><span class="line"><span class="attribute">defusedxml</span>==<span class="number">0</span>.<span class="number">6</span>.<span class="number">0</span>         # via python3-openid</span><br><span class="line"><span class="attribute">flask</span>-appbuilder==<span class="number">2</span>.<span class="number">2</span>.<span class="number">4</span>   # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">flask</span>-babel==<span class="number">1</span>.<span class="number">0</span>.<span class="number">0</span>        # via flask-appbuilder</span><br><span class="line"><span class="attribute">flask</span>-caching==<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>      # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">flask</span>-compress==<span class="number">1</span>.<span class="number">4</span>.<span class="number">0</span>     # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">flask</span>-jwt-extended==<span class="number">3</span>.<span class="number">24</span>.<span class="number">1</span>  # via flask-appbuilder</span><br><span class="line"><span class="attribute">flask</span>-login==<span class="number">0</span>.<span class="number">4</span>.<span class="number">1</span>        # via flask-appbuilder</span><br><span class="line"><span class="attribute">flask</span>-migrate==<span class="number">2</span>.<span class="number">5</span>.<span class="number">2</span>      # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">flask</span>-openid==<span class="number">1</span>.<span class="number">2</span>.<span class="number">5</span>       # via flask-appbuilder</span><br><span class="line"><span class="attribute">flask</span>-sqlalchemy==<span class="number">2</span>.<span class="number">4</span>.<span class="number">1</span>   # via flask-appbuilder, flask-migrate</span><br><span class="line"><span class="attribute">flask</span>-talisman==<span class="number">0</span>.<span class="number">7</span>.<span class="number">0</span>     # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">flask</span>-wtf==<span class="number">0</span>.<span class="number">14</span>.<span class="number">2</span>         # via apache-superset (setup.py), flask-appbuilder</span><br><span class="line"><span class="attribute">flask</span>==<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>              # via apache-superset (setup.py), flask-appbuilder, flask-babel, flask-caching, flask-compress, flask-jwt-extended, flask-login, flask-migrate, flask-openid, flask-sqlalchemy, flask-wtf</span><br><span class="line"><span class="attribute">geographiclib</span>==<span class="number">1</span>.<span class="number">50</span>       # via geopy</span><br><span class="line"><span class="attribute">geopy</span>==<span class="number">1</span>.<span class="number">20</span>.<span class="number">0</span>             # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">gunicorn</span>==<span class="number">20</span>.<span class="number">0</span>.<span class="number">4</span>          # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">humanize</span>==<span class="number">0</span>.<span class="number">5</span>.<span class="number">1</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">importlib</span>-metadata==<span class="number">1</span>.<span class="number">4</span>.<span class="number">0</span>  # via jsonschema, kombu</span><br><span class="line"><span class="attribute">isodate</span>==<span class="number">0</span>.<span class="number">6</span>.<span class="number">0</span>            # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">itsdangerous</span>==<span class="number">1</span>.<span class="number">1</span>.<span class="number">0</span>       # via flask</span><br><span class="line"><span class="attribute">jinja2</span>==<span class="number">2</span>.<span class="number">10</span>.<span class="number">3</span>            # via flask, flask-babel</span><br><span class="line"><span class="attribute">jsonschema</span>==<span class="number">3</span>.<span class="number">2</span>.<span class="number">0</span>         # via flask-appbuilder</span><br><span class="line"><span class="attribute">kombu</span>==<span class="number">4</span>.<span class="number">6</span>.<span class="number">8</span>              # via celery</span><br><span class="line"><span class="attribute">mako</span>==<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>               # via alembic</span><br><span class="line"><span class="attribute">markdown</span>==<span class="number">3</span>.<span class="number">1</span>.<span class="number">1</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">markupsafe</span>==<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>         # via jinja2, mako</span><br><span class="line"><span class="attribute">marshmallow</span>-enum==<span class="number">1</span>.<span class="number">5</span>.<span class="number">1</span>   # via flask-appbuilder</span><br><span class="line"><span class="attribute">marshmallow</span>-sqlalchemy==<span class="number">0</span>.<span class="number">21</span>.<span class="number">0</span>  # via flask-appbuilder</span><br><span class="line"><span class="attribute">marshmallow</span>==<span class="number">2</span>.<span class="number">19</span>.<span class="number">5</span>       # via flask-appbuilder, marshmallow-enum, marshmallow-sqlalchemy</span><br><span class="line"><span class="attribute">more</span>-itertools==<span class="number">8</span>.<span class="number">1</span>.<span class="number">0</span>     # via zipp</span><br><span class="line"><span class="attribute">msgpack</span>==<span class="number">0</span>.<span class="number">6</span>.<span class="number">2</span>            # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">numpy</span>==<span class="number">1</span>.<span class="number">18</span>.<span class="number">1</span>             # via pandas, pyarrow</span><br><span class="line"><span class="attribute">pandas</span>==<span class="number">0</span>.<span class="number">25</span>.<span class="number">3</span>            # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">parsedatetime</span>==<span class="number">2</span>.<span class="number">5</span>        # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">pathlib2</span>==<span class="number">2</span>.<span class="number">3</span>.<span class="number">5</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">polyline</span>==<span class="number">1</span>.<span class="number">4</span>.<span class="number">0</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">prison</span>==<span class="number">0</span>.<span class="number">1</span>.<span class="number">2</span>             # via flask-appbuilder</span><br><span class="line"><span class="attribute">py</span>==<span class="number">1</span>.<span class="number">8</span>.<span class="number">1</span>                 # via retry</span><br><span class="line"><span class="attribute">pyarrow</span>==<span class="number">0</span>.<span class="number">16</span>.<span class="number">0</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">pycparser</span>==<span class="number">2</span>.<span class="number">19</span>           # via cffi</span><br><span class="line"><span class="attribute">pyjwt</span>==<span class="number">1</span>.<span class="number">7</span>.<span class="number">1</span>              # via flask-appbuilder, flask-jwt-extended</span><br><span class="line"><span class="attribute">python</span>-dateutil==<span class="number">2</span>.<span class="number">8</span>.<span class="number">1</span>    # via alembic, apache-superset (setup.py), croniter, flask-appbuilder, pandas</span><br><span class="line"><span class="attribute">python</span>-dotenv==<span class="number">0</span>.<span class="number">10</span>.<span class="number">5</span>     # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">python</span>-editor==<span class="number">1</span>.<span class="number">0</span>.<span class="number">4</span>      # via alembic</span><br><span class="line"><span class="attribute">python</span>-geohash==<span class="number">0</span>.<span class="number">8</span>.<span class="number">5</span>     # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">python3</span>-openid==<span class="number">3</span>.<span class="number">1</span>.<span class="number">0</span>     # via flask-openid</span><br><span class="line"><span class="attribute">pytz</span>==<span class="number">2019</span>.<span class="number">3</span>              # via babel, celery, flask-babel, pandas</span><br><span class="line"><span class="attribute">pyyaml</span>==<span class="number">5</span>.<span class="number">3</span>               # via apache-superset (setup.py), apispec</span><br><span class="line"><span class="attribute">retry</span>==<span class="number">0</span>.<span class="number">9</span>.<span class="number">2</span>              # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">selenium</span>==<span class="number">3</span>.<span class="number">141</span>.<span class="number">0</span>         # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">simplejson</span>==<span class="number">3</span>.<span class="number">17</span>.<span class="number">0</span>        # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">six</span>==<span class="number">1</span>.<span class="number">14</span>.<span class="number">0</span>               # via bleach, cryptography, flask-jwt-extended, flask-talisman, isodate, jsonschema, pathlib2, polyline, prison, pyarrow, pyrsistent, python-dateutil, sqlalchemy-utils, wtforms-json</span><br><span class="line"><span class="attribute">sqlalchemy</span>-utils==<span class="number">0</span>.<span class="number">36</span>.<span class="number">1</span>  # via apache-superset (setup.py), flask-appbuilder</span><br><span class="line"><span class="attribute">sqlalchemy</span>==<span class="number">1</span>.<span class="number">3</span>.<span class="number">12</span>        # via alembic, apache-superset (setup.py), flask-sqlalchemy, marshmallow-sqlalchemy, sqlalchemy-utils</span><br><span class="line"><span class="attribute">sqlparse</span>==<span class="number">0</span>.<span class="number">3</span>.<span class="number">0</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">urllib3</span>==<span class="number">1</span>.<span class="number">25</span>.<span class="number">8</span>           # via selenium</span><br><span class="line"><span class="attribute">vine</span>==<span class="number">1</span>.<span class="number">3</span>.<span class="number">0</span>               # via amqp, celery</span><br><span class="line"><span class="attribute">webencodings</span>==<span class="number">0</span>.<span class="number">5</span>.<span class="number">1</span>       # via bleach</span><br><span class="line"><span class="attribute">werkzeug</span>==<span class="number">0</span>.<span class="number">16</span>.<span class="number">0</span>          # via flask, flask-jwt-extended</span><br><span class="line"><span class="attribute">wtforms</span>-json==<span class="number">0</span>.<span class="number">3</span>.<span class="number">3</span>       # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">wtforms</span>==<span class="number">2</span>.<span class="number">2</span>.<span class="number">1</span>            # via flask-wtf, wtforms-json</span><br><span class="line"><span class="attribute">zipp</span>==<span class="number">2</span>.<span class="number">0</span>.<span class="number">0</span>               # via importlib-metadata</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后执行 ：</p>
<p><code> pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com -r requirement.txt</code></p>
<p>从阿里的镜像源安装这些依赖</p>
<p>接下来是安装Superset</p>
<p>到了这一步，就可能会报错，就是gcc的错误，那是因为安装没有成功，我安装了6次才成功，</p>
<p>执行 ；</p>
<p><code>pip3 install apache-superset==0.37.1  -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</code></p>
<p>然后<strong>安装Mysql数据包</strong></p>
<p><code>install sqlalchemy==1.3.24 -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p>
<p><code>pip3 install mysqlclient -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p>
<p><code>pip3 install &quot;pymssql&lt;3.0&quot; -i http://pypi.douban.com/simple --trusted-host pypi.douban.com </code></p>
<p>接下来我们去我们的mysql里执行</p>
<p><code>CREATE DATABASE </code>superset <code>/*!40100 DEFAULT CHARACTER SET utf8 */;</code></p>
<p>创建其源数据库</p>
<p><strong>修改superset元数据库</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"> vim superset-py3<span class="regexp">/lib/</span>python3.<span class="number">6</span><span class="regexp">/site-packages/</span>superset/config.py</span><br><span class="line"></span><br><span class="line">修改：</span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql://root:123456@hadoop102/superset?charset=utf8&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果没有这个文件的同学，就是上面安装superset的那一步出问题了，要重新执行</p>
<p><strong>初始化Supetset数据库（Supetset是一个web应用，自带数据库，需要初始化）</strong></p>
<p><code> superset db upgrade</code></p>
<p><strong>创建管理员用户</strong></p>
<p><code>export FLASK_APP=superset</code></p>
<p><code>flask fab create-admin</code></p>
<p><strong>说明：</strong> flask是一个python web框架，Superset使用的就是flask</p>
<p><strong>Superset初始化</strong></p>
<p><code> superset init</code></p>
<p>然后我们要修改mysql里的表</p>
<p><code>alter table superset.table_columns modify type varchar(255);</code></p>
<p>然后就可以启动我们的superset了</p>
<p><code> superset run -h 自己的机器名或者ip  -p 启动端口</code></p>
<p>然后访问</p>
<p><code>http://机器ip或者机器名字:端口/</code></p>
<p>老规矩接下来我们创建个启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">check_log_dir</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    SUPERSET_LOG_DIR=/usr/local/src/superset/logs</span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="variable">$SUPERSET_LOG_DIR</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">mkdir</span> -p <span class="variable">$SUPERSET_LOG_DIR</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查进程是否运行正常，参数1为进程名，参数2为进程端口</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">check_process</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    pid=$(ps -ef 2&gt;/dev/null | grep -v grep | grep -i <span class="variable">$1</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">    ppid=$(netstat -nltp 2&gt;/dev/null | grep <span class="variable">$2</span> | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;/&#x27;</span> -f 1)</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$pid</span></span><br><span class="line">    [ <span class="string">&quot;<span class="variable">$ppid</span>&quot;</span> ] &amp;&amp; <span class="built_in">return</span> 0 || <span class="built_in">return</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">superset_start</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    metapid=$(check_process superset 8889)</span><br><span class="line">    cmd=<span class="string">&quot;cd /root/公共/Python-3.6.6;source superset-py3/bin/activate;nohup superset run -h bigdata4 -p 8889 &gt;<span class="variable">$SUPERSET_LOG_DIR</span>/superset.log 2&gt;&amp;1 &amp;&quot;</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$cmd</span> || <span class="built_in">echo</span> <span class="string">&quot;superset服务已启动&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">superset_stop</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    metapid=$(check_process superset 8889)</span><br><span class="line">    [ <span class="string">&quot;<span class="variable">$metapid</span>&quot;</span> ] &amp;&amp; <span class="built_in">kill</span> <span class="variable">$metapid</span> || <span class="built_in">echo</span> <span class="string">&quot;superset服务未启动&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;start&quot;</span>)</span><br><span class="line">     check_log_dir</span><br><span class="line">     superset_start</span><br><span class="line">    ;;</span><br><span class="line"><span class="string">&quot;stop&quot;</span>)</span><br><span class="line">     superset_stop</span><br><span class="line">    ;;</span><br><span class="line"><span class="string">&quot;status&quot;</span>)</span><br><span class="line">     check_process superset 8889 &gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;superset服务运行正常&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;superset服务运行异常&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> Invalid Args!</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Usage: &#x27;</span>$(<span class="built_in">basename</span> <span class="variable">$0</span>)<span class="string">&#x27; start|stop|status&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>关于superset的原生安装就ok了</p>
<h1 id="dataease"><a href="#dataease" class="headerlink" title="dataease"></a>dataease</h1><p>先在官网下载官网地址 ： <a href="https://www.fit2cloud.com/dataease/features.html">https://www.fit2cloud.com/dataease/features.html</a></p>
<p>目前没有时间等周六周日补上</p>
<p>dataease安装特别简单而且图形炫酷，首推</p>
<p>但是有问题：安装dataease的机器上不能有mysql或者你把mysql的端口改掉，因为它要占用3306端口</p>
<p>不管是在线安装还是离线安装对我们的数据库都有要求，mysql 5.7起步</p>
<p>而且要求我们编辑&#x2F;etc&#x2F;my.cnf文件</p>
<p>然后添加以下内容 </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="attribute">datadir</span>=/var/lib/mysql</span><br><span class="line"></span><br><span class="line"><span class="attribute">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="attribute">character_set_server</span>=utf8</span><br><span class="line"><span class="attribute">lower_case_table_names</span>=1</span><br><span class="line"><span class="attribute">table_open_cache</span>=128</span><br><span class="line"><span class="attribute">max_connections</span>=2000</span><br><span class="line"><span class="attribute">max_connect_errors</span>=6000</span><br><span class="line"><span class="attribute">innodb_file_per_table</span>=1</span><br><span class="line"><span class="attribute">innodb_buffer_pool_size</span>=1G</span><br><span class="line"><span class="attribute">max_allowed_packet</span>=64M</span><br><span class="line"><span class="attribute">transaction_isolation</span>=READ-COMMITTED</span><br><span class="line"><span class="attribute">innodb_flush_method</span>=O_DIRECT</span><br><span class="line"><span class="attribute">innodb_lock_wait_timeout</span>=1800</span><br><span class="line"><span class="attribute">innodb_flush_log_at_trx_commit</span>=0</span><br><span class="line"><span class="attribute">sync_binlog</span>=0</span><br><span class="line"><span class="attribute">group_concat_max_len</span>=1024000</span><br><span class="line"><span class="attribute">sql_mode</span>=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"><span class="attribute">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line">[mysql.server]</span><br><span class="line"><span class="attribute">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure>

<p>在线安装 ：<code>curl -sSL https://github.com/dataease/dataease/releases/latest/download/quick_start.sh | sh</code></p>
<p>就可以了</p>
<p>离线安装：</p>
<p>先下载好安装包然后解压，之后到解压的目录，然后编辑install.conf文件下面是install.conf的配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础配置</span></span><br><span class="line"><span class="comment">## 安装目录</span></span><br><span class="line"><span class="attr">DE_BASE</span>=/opt</span><br><span class="line"><span class="comment">## Service 端口</span></span><br><span class="line"><span class="attr">DE_PORT</span>=<span class="number">80</span></span><br><span class="line"><span class="comment">## 部署及运行模式，可选值有 local、simple、cluster，分别对应 本地模式、精简模式、集群模式</span></span><br><span class="line"><span class="attr">DE_ENGINE_MODE</span>=simple</span><br><span class="line"><span class="comment">## docker 网段设置</span></span><br><span class="line"><span class="attr">DE_DOCKER_SUBNET</span>=<span class="number">172.19</span>.<span class="number">0.0</span>/<span class="number">16</span></span><br><span class="line"><span class="comment">## docker 网关 IP</span></span><br><span class="line"><span class="attr">DE_DOCKER_GATEWAY</span>=<span class="number">172.19</span>.<span class="number">0.1</span></span><br><span class="line"><span class="comment">## Apache Doris FE IP (外部 Doris 此参数无效)</span></span><br><span class="line"><span class="attr">DE_DORIS_FE_IP</span>=<span class="number">172.19</span>.<span class="number">0.198</span></span><br><span class="line"><span class="comment">## Apache Doris BE IP (外部 Doris 此参数无效)</span></span><br><span class="line"><span class="attr">DE_DORIS_BE_IP</span>=<span class="number">172.19</span>.<span class="number">0.199</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line"><span class="comment">## 是否使用外部数据库</span></span><br><span class="line"><span class="attr">DE_EXTERNAL_MYSQL</span>=<span class="literal">false</span></span><br><span class="line"><span class="comment">## 数据库地址</span></span><br><span class="line"><span class="attr">DE_MYSQL_HOST</span>=mysql</span><br><span class="line"><span class="comment">## 数据库端口</span></span><br><span class="line"><span class="attr">DE_MYSQL_PORT</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment">## DataEase 数据库库名</span></span><br><span class="line"><span class="attr">DE_MYSQL_DB</span>=dataease</span><br><span class="line"><span class="comment">## 数据库用户名</span></span><br><span class="line"><span class="attr">DE_MYSQL_USER</span>=root</span><br><span class="line"><span class="comment">## 数据库密码</span></span><br><span class="line"><span class="attr">DE_MYSQL_PASSWORD</span>=Password123@mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apache Doris 配置</span></span><br><span class="line"><span class="comment">## 是否使用外部 Apache Doris</span></span><br><span class="line"><span class="attr">DE_EXTERNAL_DORIS</span>=<span class="literal">false</span></span><br><span class="line"><span class="comment">## Doris 地址</span></span><br><span class="line"><span class="attr">DE_DORIS_HOST</span>=doris-fe</span><br><span class="line"><span class="comment">## Doris 查询连接端口</span></span><br><span class="line"><span class="attr">DE_DORIS_PORT</span>=<span class="number">9030</span></span><br><span class="line"><span class="comment">## Doris http端口</span></span><br><span class="line"><span class="attr">DE_DORIS_HTTPPORT</span>=<span class="number">8030</span></span><br><span class="line"><span class="comment">## Doris 数据库名称</span></span><br><span class="line"><span class="attr">DE_DORIS_DB</span>=dataease</span><br><span class="line"><span class="comment">## Doris 用户名</span></span><br><span class="line"><span class="attr">DE_DORIS_USER</span>=root</span><br><span class="line"><span class="comment">## Doris 密码</span></span><br><span class="line"><span class="attr">DE_DORIS_PASSWORD</span>=Password123@doris</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kettle 配置</span></span><br><span class="line"><span class="comment">## 是否使用外部 Kettle - (目前还不支持外部Kettle，除非不需运行Kettle，否则请不要修改此参数)</span></span><br><span class="line"><span class="attr">DE_EXTERNAL_KETTLE</span>=<span class="literal">false</span></span><br><span class="line"><span class="comment">## Kettle 服务器地址</span></span><br><span class="line"><span class="attr">DE_CARTE_HOST</span>=kettle</span><br><span class="line"><span class="comment">## Kettle 访问端口</span></span><br><span class="line"><span class="attr">DE_CARTE_PORT</span>=<span class="number">18080</span></span><br><span class="line"><span class="comment">## Kettle 用户名</span></span><br><span class="line"><span class="attr">DE_CARTE_USER</span>=cluster</span><br><span class="line"><span class="comment">## Kettle 密码</span></span><br><span class="line"><span class="attr">DE_CARTE_PASSWORD</span>=cluster</span><br></pre></td></tr></table></figure>

<p>安装模式有三种 ：</p>
<p><strong>DE_ENGINE_MODE&#x3D;local</strong><br>使用本地模式安装，DataEase 会自带 Doris 与 Kettle 组件，无需再做额外配置，但各组件均为单点，不具备高可用特性。<br>在此模式下，Excel 数据集、API 数据集以及定时同步的数据默认保存在自带的 Doris 组件中。</p>
<p><strong>DE_ENGINE_MODE&#x3D;simple</strong><br>使用精简模式安装，系统不会额外安装 Doris 与 Kettle 组件，提供用户轻量级的应用系统，尤其是对接数据量较小的情况。<br>在此模式下，若用户需要使用 Excel 数据集或 API 数据集可在系统管理界面配置数据引擎（目前仅支持 MySQL 类型），相关数据会存储到该数据引擎中。若只需使用数据库直连则无需做此配置。<br><strong>注意：由于精简模式未配置 Kettle 与 Doris，故相关 SQL 数据集&#x2F;数据库数据集不提供定时同步模式。</strong></p>
<p><strong>DE_ENGINE_MODE&#x3D;cluster</strong><br>使用集群模式安装，系统不会额外安装 Doris 与 Kettle 组件，但会在系统管理模块提供 Doris 与 Kettle 的链接配置界面（请参考【系统管理】的【系统参数】说明），用户可独立安装 Doris 集群及 Kettle 并配置在 DataEase 中。集群模式下 Excel 数据集，API 数据集以及定时同步的数据通过 Kettle 抽取到 Doris 集群中。<br>Doris 安装部署可参考：<a href="http://doris.incubator.apache.org/zh-CN/">http://doris.incubator.apache.org/zh-CN/</a><br>Kettle 安装部署可参考：<a href="http://www.kettle.org.cn/">http://www.kettle.org.cn/</a></p>
<p>然后对于离线安装执行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入安装包目录</span></span><br><span class="line">cd dataease-v1.<span class="number">5.0</span>-offline</span><br><span class="line"><span class="comment"># 运行安装脚本</span></span><br><span class="line"><span class="regexp">/bin/</span>bash install.sh</span><br></pre></td></tr></table></figure>

<p>就可以了，效果个很酷炫</p>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>有一个城市表 ： mysql中</p>
<p>有一个商品表 ： mysql中</p>
<p>用户行为数据 ： hdfs上的</p>
<p>求： 最受欢迎的商品 的 top3</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>数据可视化</title>
    <url>/2022/12/07/12-07/</url>
    <content><![CDATA[<h1 id="数据可视化的数据库选择"><a href="#数据可视化的数据库选择" class="headerlink" title="数据可视化的数据库选择"></a>数据可视化的数据库选择</h1><p>一般选择响应数据库比较快的一般是 秒级，或者毫秒级 ： 不要选择hive</p>
<p>因为hive太慢</p>
<p>我们一般都把数据最后导入到mysql里</p>
<p>作业：</p>
<p>自己做一个dashboard</p>
<h1 id="xxl"><a href="#xxl" class="headerlink" title="xxl"></a>xxl</h1><p>定时任务调度</p>
<p>就是按照每天都要做的任务</p>
<ul>
<li>crontab 进行 用的比较少 而因为不方便</li>
<li>定时任务的调度的框架<ul>
<li>ozio , azkaban,airflow,xxl,dolphinscheduler</li>
<li>现在ozio 和 azkaban 因为操作比较反人类，所以不太推荐</li>
<li>airflow ： 通过python进行任务调度的</li>
<li>公司首选 dolphinscheduler ，其次 xxl</li>
</ul>
</li>
<li>针对 xxl 或者 dolphinscheduler 可以串联的方式进行执行调度，就是a任务完成，直接执行b任务等等</li>
<li>但是crontab它要设置时间间隔，不可以串联的方式进行执行</li>
<li>多任务之间的依赖关系 ：<ul>
<li>DAG 有向无环图</li>
</ul>
</li>
<li>xxl 官网 ： 国人开发的 <code>https://github.com/xuxueli/xxl-job</code><ul>
<li>架构：主从架构，分布式架构</li>
<li>老大：调度中心</li>
<li>小弟：调度器</li>
</ul>
</li>
<li>其他的都是apache的</li>
</ul>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>下载源码 ；</p>
<p>导入idea 进行编译</p>
<p>初始化“调度数据库”xxl源数据库 -》 mysql中</p>
<p>首先在mysql中执行语句</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># XXL-JOB v2.4.0-SNAPSHOT</span><br><span class="line"># Copyright (c) 2015-present, xuxueli.</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="symbol">`xxl_job`</span> default character <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_unicode_ci;</span><br><span class="line">use `xxl_job`;</span><br><span class="line"></span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_info`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`job_group`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器主键ID&#x27;</span>,</span><br><span class="line">  <span class="symbol">`job_desc`</span> varchar(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`add_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`update_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`author`</span> varchar(<span class="number">64</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;作者&#x27;</span>,</span><br><span class="line">  <span class="symbol">`alarm_email`</span> varchar(<span class="number">255</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;报警邮件&#x27;</span>,</span><br><span class="line">  <span class="symbol">`schedule_type`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;NONE&#x27;</span> COMMENT <span class="string">&#x27;调度类型&#x27;</span>,</span><br><span class="line">  <span class="symbol">`schedule_conf`</span> varchar(<span class="number">128</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;调度配置，值含义取决于调度类型&#x27;</span>,</span><br><span class="line">  <span class="symbol">`misfire_strategy`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;DO_NOTHING&#x27;</span> COMMENT <span class="string">&#x27;调度过期策略&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_route_strategy`</span> varchar(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器路由策略&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_handler`</span> varchar(<span class="number">255</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器任务handler&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_param`</span> varchar(<span class="number">512</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器任务参数&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_block_strategy`</span> varchar(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;阻塞处理策略&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_timeout`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;任务执行超时时间，单位秒&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_fail_retry_count`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;失败重试次数&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_type`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;GLUE类型&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_source`</span> mediumtext COMMENT <span class="string">&#x27;GLUE源代码&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_remark`</span> varchar(<span class="number">128</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;GLUE备注&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_updatetime`</span> datetime DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;GLUE更新时间&#x27;</span>,</span><br><span class="line">  <span class="symbol">`child_jobid`</span> varchar(<span class="number">255</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;子任务ID，多个逗号分隔&#x27;</span>,</span><br><span class="line">  <span class="symbol">`trigger_status`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;调度状态：0-停止，1-运行&#x27;</span>,</span><br><span class="line">  <span class="symbol">`trigger_last_time`</span> bigint(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;上次调度时间&#x27;</span>,</span><br><span class="line">  <span class="symbol">`trigger_next_time`</span> bigint(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;下次调度时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_log`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> bigint(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`job_group`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器主键ID&#x27;</span>,</span><br><span class="line">  <span class="symbol">`job_id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;任务，主键ID&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_address`</span> varchar(<span class="number">255</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器地址，本次执行的地址&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_handler`</span> varchar(<span class="number">255</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器任务handler&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_param`</span> varchar(<span class="number">512</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器任务参数&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_sharding_param`</span> varchar(<span class="number">20</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器任务分片参数，格式如 1/2&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_fail_retry_count`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;失败重试次数&#x27;</span>,</span><br><span class="line">  <span class="symbol">`trigger_time`</span> datetime DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;调度-时间&#x27;</span>,</span><br><span class="line">  <span class="symbol">`trigger_code`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;调度-结果&#x27;</span>,</span><br><span class="line">  <span class="symbol">`trigger_msg`</span> text COMMENT <span class="string">&#x27;调度-日志&#x27;</span>,</span><br><span class="line">  <span class="symbol">`handle_time`</span> datetime DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行-时间&#x27;</span>,</span><br><span class="line">  <span class="symbol">`handle_code`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行-状态&#x27;</span>,</span><br><span class="line">  <span class="symbol">`handle_msg`</span> text COMMENT <span class="string">&#x27;执行-日志&#x27;</span>,</span><br><span class="line">  <span class="symbol">`alarm_status`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;告警状态：0-默认、1-无需告警、2-告警成功、3-告警失败&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="symbol">`I_trigger_time`</span> (<span class="symbol">`trigger_time`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="symbol">`I_handle_code`</span> (<span class="symbol">`handle_code`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_log_report`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`trigger_day`</span> datetime DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;调度-时间&#x27;</span>,</span><br><span class="line">  <span class="symbol">`running_count`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;运行中-日志数量&#x27;</span>,</span><br><span class="line">  <span class="symbol">`suc_count`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;执行成功-日志数量&#x27;</span>,</span><br><span class="line">  <span class="symbol">`fail_count`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;执行失败-日志数量&#x27;</span>,</span><br><span class="line">  <span class="symbol">`update_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="symbol">`i_trigger_day`</span> (<span class="symbol">`trigger_day`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_logglue`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`job_id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;任务，主键ID&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_type`</span> varchar(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;GLUE类型&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_source`</span> mediumtext COMMENT <span class="string">&#x27;GLUE源代码&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_remark`</span> varchar(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;GLUE备注&#x27;</span>,</span><br><span class="line">  <span class="symbol">`add_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`update_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_registry`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`registry_group`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`registry_key`</span> varchar(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`registry_value`</span> varchar(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`update_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="symbol">`i_g_k_v`</span> (<span class="symbol">`registry_group`</span>,<span class="symbol">`registry_key`</span>,<span class="symbol">`registry_value`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_group`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`app_name`</span> varchar(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器AppName&#x27;</span>,</span><br><span class="line">  <span class="symbol">`title`</span> varchar(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器名称&#x27;</span>,</span><br><span class="line">  <span class="symbol">`address_type`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;执行器地址类型：0=自动注册、1=手动录入&#x27;</span>,</span><br><span class="line">  <span class="symbol">`address_list`</span> text COMMENT <span class="string">&#x27;执行器地址列表，多地址逗号分隔&#x27;</span>,</span><br><span class="line">  <span class="symbol">`update_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_user`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`username`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">  <span class="symbol">`password`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  <span class="symbol">`role`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;角色：0-普通用户、1-管理员&#x27;</span>,</span><br><span class="line">  <span class="symbol">`permission`</span> varchar(<span class="number">255</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;权限：执行器ID列表，多个逗号分割&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="symbol">`i_username`</span> (<span class="symbol">`username`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_lock`</span> (</span><br><span class="line">  <span class="symbol">`lock_name`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;锁名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`lock_name`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`xxl_job_group`</span>(<span class="symbol">`id`</span>, <span class="symbol">`app_name`</span>, <span class="symbol">`title`</span>, <span class="symbol">`address_type`</span>, <span class="symbol">`address_list`</span>, <span class="symbol">`update_time`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;xxl-job-executor-sample&#x27;</span>, <span class="string">&#x27;示例执行器&#x27;</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">&#x27;2018-11-03 22:21:31&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`xxl_job_info`</span>(<span class="symbol">`id`</span>, <span class="symbol">`job_group`</span>, <span class="symbol">`job_desc`</span>, <span class="symbol">`add_time`</span>, <span class="symbol">`update_time`</span>, <span class="symbol">`author`</span>, <span class="symbol">`alarm_email`</span>, <span class="symbol">`schedule_type`</span>, <span class="symbol">`schedule_conf`</span>, <span class="symbol">`misfire_strategy`</span>, <span class="symbol">`executor_route_strategy`</span>, <span class="symbol">`executor_handler`</span>, <span class="symbol">`executor_param`</span>, <span class="symbol">`executor_block_strategy`</span>, <span class="symbol">`executor_timeout`</span>, <span class="symbol">`executor_fail_retry_count`</span>, <span class="symbol">`glue_type`</span>, <span class="symbol">`glue_source`</span>, <span class="symbol">`glue_remark`</span>, <span class="symbol">`glue_updatetime`</span>, <span class="symbol">`child_jobid`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;测试任务1&#x27;</span>, <span class="string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="string">&#x27;XXL&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;CRON&#x27;</span>, <span class="string">&#x27;0 0 0 * * ? *&#x27;</span>, <span class="string">&#x27;DO_NOTHING&#x27;</span>, <span class="string">&#x27;FIRST&#x27;</span>, <span class="string">&#x27;demoJobHandler&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;SERIAL_EXECUTION&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;BEAN&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;GLUE代码初始化&#x27;</span>, <span class="string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`xxl_job_user`</span>(<span class="symbol">`id`</span>, <span class="symbol">`username`</span>, <span class="symbol">`password`</span>, <span class="symbol">`role`</span>, <span class="symbol">`permission`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`xxl_job_lock`</span> ( <span class="symbol">`lock_name`</span>) <span class="keyword">VALUES</span> ( <span class="string">&#x27;schedule_lock&#x27;</span>);</span><br><span class="line"></span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后再把从GitHub上下载的文件夹用idea打开进行编译</p>
<p>进行配置我们的web端口以及数据库：在application.properties文件中，然后配置一下</p>
<p>配置好之后maven，之间打成jar包，然后上传到linux服务器上</p>
<p>运行java -jar 上传的文件的路径</p>
<p>然后会报错，就创建个文件夹就好了 <code>mkdir -p /data/applogs/xxl-job</code></p>
<p>使用su 进行用户切换</p>
<p>然后通过chown 进行修改组以及用户 <code>chown -R hadoop:hadoop /data</code></p>
<p>然后再次运行就可以了</p>
<p>然后在调度器管理页面添加调度器，然后分配任务就可以了</p>
<h1 id="钉钉报警"><a href="#钉钉报警" class="headerlink" title="钉钉报警"></a>钉钉报警</h1><p>钉钉机器人可发送的类型</p>
<ul>
<li>文本</li>
<li>链接</li>
<li>markdown</li>
<li>actioncard</li>
<li>feedcard</li>
</ul>
<p>weget  ： 从互联网上下载的时候用的 ： 下载安装包 ，但是占用网络资源较大，且会一直重复下载直到结果成功，所以占用的资源较大</p>
<p>curl ： 发送请求的，发送网页请求访问的，也可以进行下载</p>
<ul>
<li>-o ： 把访问的一个页面存储到文件里</li>
</ul>
<p>机器人发送消息</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">curl &#x27;机器人的token&#x27;</span><br><span class="line">-H <span class="symbol">&#x27;Content</span>-<span class="keyword">type</span>:application/json&#x27;</span><br><span class="line">-d &#x27;&#123;<span class="string">&quot;msgtype&quot;</span> : <span class="type">text</span>&#125;&#x27;</span><br></pre></td></tr></table></figure>


<p>需求 ： </p>
<ul>
<li>日志数据 ： hdfs 上 linux user_click.log</li>
<li>例子： u01,鼠标,ios</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="built_in">u01,</span>鼠标,ios</span><br><span class="line"><span class="built_in">u01,</span>鼠标,ios</span><br><span class="line"><span class="built_in">u01,</span>鼠标,ios</span><br><span class="line"><span class="built_in">u01,</span>鼠标,ios</span><br><span class="line"><span class="built_in">u01,</span>鼠标,ios</span><br><span class="line"><span class="built_in">u02,</span>键盘,android</span><br><span class="line"><span class="built_in">u02,</span>键盘,android</span><br><span class="line"><span class="built_in">u02,</span>键盘,android</span><br><span class="line"><span class="built_in">u02,</span>键盘,android</span><br><span class="line"><span class="built_in">u03,</span>显示器,ios</span><br><span class="line"><span class="built_in">u04,</span>托特包,ios</span><br></pre></td></tr></table></figure>

<ul>
<li>业务数据 ：mysql user_info</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="built_in">u01,</span>子航</span><br><span class="line"><span class="built_in">u02,</span>祖安</span><br><span class="line"><span class="built_in">u03,</span>海哥</span><br><span class="line"><span class="built_in">u04,</span>轩轩</span><br></pre></td></tr></table></figure>

<p>统计：</p>
<p>uid ， name ，sku ， os 每个用户点击商品的次数</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> bianhao,shop_name,caozuoxit,<span class="keyword">count</span>(*) <span class="keyword">as</span> cishu <span class="keyword">from</span> user_click1 <span class="keyword">group</span> <span class="keyword">by</span> bianhao,shop_name,caozuoxit;</span><br></pre></td></tr></table></figure>

<p>取出表中重复数据，的次数做个排序</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> shop_name,caozuoxit,<span class="type">name</span>,row_number() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="type">name</span>) <span class="keyword">as</span> rm <span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_click1 <span class="keyword">left join</span> user_info <span class="keyword">on</span> user_click1.bianhao=user_info.bianhao</span><br><span class="line">) <span class="keyword">as</span> king</span><br></pre></td></tr></table></figure>

<p>不重复字段标识为1</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">u01</span>,子航,鼠标,ios <span class="number">1</span></span><br><span class="line"><span class="attribute">u01</span>,子航,鼠标,ios <span class="number">2</span></span><br><span class="line"><span class="attribute">u01</span>,子航,鼠标,ios <span class="number">3</span></span><br><span class="line"><span class="attribute">u04</span>,托特包,ios <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>统计表中不重复的数据，一起做排序，但是对于重复数据它还是对自己排序</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">name</span>,caozuoxit,shop_name,row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> cishu) <span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_click1 <span class="keyword">left join</span> (</span><br><span class="line"><span class="keyword">select</span> bianhao,count(*) <span class="keyword">as</span> cishu <span class="keyword">from</span> user_click1 <span class="keyword">group</span> <span class="keyword">by</span> bianhao,shop_name,caozuoxit</span><br><span class="line">) <span class="keyword">as</span> count_click <span class="keyword">on</span> count_click.bianhao=user_click1.bianhao</span><br><span class="line"><span class="keyword">left join</span> user_info <span class="keyword">on</span> count_click.bianhao=user_info.bianhao  </span><br><span class="line">) <span class="keyword">as</span> ds;</span><br><span class="line">上述是取巧的方法</span><br><span class="line">下面是正经的方法</span><br><span class="line"><span class="keyword">select</span> count_clickbianhao,<span class="type">name</span>,caozuoxit,shop_name,row_number() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> cishu) <span class="keyword">as</span> rm <span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_click1 <span class="keyword">left join</span> (</span><br><span class="line"><span class="keyword">select</span> bianhao <span class="keyword">as</span> count_clickbianhao,count(*) <span class="keyword">as</span> cishu <span class="keyword">from</span> user_click1 <span class="keyword">group</span> <span class="keyword">by</span> bianhao,shop_name,caozuoxit</span><br><span class="line">) <span class="keyword">as</span> count_click <span class="keyword">on</span> count_click.count_clickbianhao=user_click1.bianhao </span><br><span class="line"><span class="keyword">left join</span> user_info <span class="keyword">on</span> count_click.count_clickbianhao=user_info.bianhao  </span><br><span class="line">) <span class="keyword">as</span> jj <span class="keyword">where</span> cishu = <span class="number">1</span> </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> count_clickbianhao,<span class="type">name</span>,caozuoxit,shop_name,row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> (<span class="type">name</span>,caozuoxit,shop_name,cishu)) <span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_click1 <span class="keyword">left join</span> (</span><br><span class="line"><span class="keyword">select</span> bianhao <span class="keyword">as</span> count_clickbianhao,count(*) <span class="keyword">as</span> cishu <span class="keyword">from</span> user_click1 <span class="keyword">group</span> <span class="keyword">by</span> bianhao,shop_name,caozuoxit</span><br><span class="line">) <span class="keyword">as</span> count_click <span class="keyword">on</span> count_click.count_clickbianhao=user_click1.bianhao </span><br><span class="line"><span class="keyword">left join</span> user_info <span class="keyword">on</span> count_click.count_clickbianhao=user_info.bianhao  </span><br><span class="line">) <span class="keyword">as</span> j <span class="keyword">where</span> cishu != <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>整个流程使用xxl进行调度</p>
<p>最后结果导入到mysql</p>
<p>数据导入mysql保证幂等性</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>云原生教学视频</title>
    <url>/2022/12/10/12-08/</url>
    <content><![CDATA[<h1 id="云原生"><a href="#云原生" class="headerlink" title="云原生"></a>云原生</h1><p>理解 ： 理解上要把他们拆开理解会更好</p>
<p>云 ：云基础设施（cloud）</p>
<p>原生：native ：在云计算平台里可以原生的计算和运行的</p>
<p>云原生的概念由来：<br>2013年被prvoyal公司的Ms提出</p>
<p>2015年谷歌带头成立了云原生的计算基金会</p>
<p>云原生的定义 ：</p>
<p>基于微服务原理而开发的应用，用容器的方式打包，在运行时，容器由运行于云基础设施之上的平台进行调度，应用开发采用持续交付和devOps实践</p>
<p>2015年：容器化封装+自动化管理+面向微服务</p>
<p>2018年：容器化封装+面向微服务+服务网格+声明格式API</p>
<p>云原生有利于各种组织在共有云，私有云和混合云等新动态环境中，构建和运行可扩展性的应用</p>
<p>微服务 ：把原有的单体应用拆分为多个独立自治的组件，每个组件都可以独立开发，设计，测试，运维，部署，这个组件可以单独的对外进行服务，我们称其为微服务</p>
<p>容器化：docker容器，容器属于it基础设施层概念，是比虚拟机更轻量化的隔离工具，是微服务的最佳载体</p>
<p>使用k8s的资源调度与容器编排，可以实现docker容器更优管理，进一步实现其PaaS能力</p>
<p>服务网格</p>
<p>服务网格存在的目的，就是中心化的服务治理框架</p>
<p>以往需要对微服务或者对api接口区做治理和管理请求</p>
<p>不可以改变基础设施指的是镜像：日后如果想再次改变他的部署，可以用镜像进行改变</p>
<p>应用部署：命令行：声明式</p>
<p>DevOps</p>
<p>借助云原生的相关技术，DevOps的时代才到来</p>
<p>云原生的最佳实现的实现三个层面</p>
<p>服务编排要实现计算资源弹性化</p>
<p>服务构建和部署要实现高可用</p>
<p>实践驱动基础设施标准初始化</p>
<p>云原生应用的领域</p>
<p>云原生的生态也已经覆盖到了，大数据，人工智能，边缘计算，区域局等领域</p>
<p>云原生的编排以及管理</p>
<p>编排与调度k8s</p>
<p>原生调用grpc</p>
<p>服务代理envoy</p>
<p>api网关apisix</p>
<p>服务网格istio</p>
<p>服务发现coreDns</p>
<p>消息和流式处理kafka</p>
<p>Severless ：只是对服务器的关心比较少，并不是完全无服务器</p>
<p>自动化配置：ansible</p>
<p>数据库：不赘述了</p>
<p>容器镜像仓库：harbor</p>
<p>定义及镜像制作：helm</p>
<p>密钥管理：spiffe</p>
<p>存储技术：ceph</p>
<p>网络技术：calico</p>
<p>监控分析：prometheus</p>
<p>等</p>
<h1 id="4步制作超级精简的大厂docker镜像"><a href="#4步制作超级精简的大厂docker镜像" class="headerlink" title="4步制作超级精简的大厂docker镜像"></a>4步制作超级精简的大厂docker镜像</h1><h2 id="什么是镜像"><a href="#什么是镜像" class="headerlink" title="什么是镜像"></a>什么是镜像</h2><p>镜像是：分层联合文件系统</p>
<p>一种轻量级，可执行的独立软件包</p>
<p>镜像大小：有大有小</p>
<p>曾经网易蜂巢logo镜像只有585B</p>
<p><code>docker pull hub.c.163.com/public/logo</code></p>
<p>精简docker镜像的优势</p>
<p>减少构建时间</p>
<p>减少磁盘使用量</p>
<p>减少下载时间</p>
<p>提高安全性</p>
<h2 id="镜像的分层原理"><a href="#镜像的分层原理" class="headerlink" title="镜像的分层原理"></a>镜像的分层原理</h2><p>doccker镜像的分层</p>
<p>第一层：本机的系统</p>
<p>第二层：镜像上安装的虚拟环境比如：python</p>
<p>第三层：打的补丁文件</p>
<p><code>docker pull busybox:latest</code></p>
<p>拉下来之后我们对它进行多层的镜像,进行演示一遍</p>
<p>拉下来之后随便找个地方创建个文件叫dockerfile</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> busybox</span><br><span class="line"><span class="built_in">RUN</span> mkdir /tmp/foo</span><br><span class="line"><span class="built_in">RUN</span> dd <span class="attribute">if</span>=/dev/zero <span class="attribute">of</span>=/tmp/foo/bar <span class="attribute">bs</span>=1048576 <span class="attribute">count</span>=100</span><br><span class="line"><span class="built_in">RUN</span> rm /tmp/foo/bar</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>上面这个是设置swap的交换分区的代码，count后面跟着的是字节数，bs是每秒的吞吐量</p>
<p>然后同步到docker容器上并执行这个文件 <code>docker build -t busybox:text . </code>这个语句的意思是根据本地镜像，加上我们的文本语句，进行创建我们的一个新的docker镜像，后面的.代表这个文件夹里所有的文本文件，也可以单独指明是哪一个文本文件</p>
<p>运行之前</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-8-16-centos dockerfile]# docker images | grep busybox</span><br><span class="line">busybox                     latest    334e4a014c81   4 days ago      4.86MB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行之后</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-8-16-centos dockerfile]# docker images | grep busybox</span><br><span class="line">busybox                     text      efa9b412f2f7   4 minutes ago   110MB</span><br><span class="line">busybox                     latest    334e4a014c81   4 days ago      4.86MB</span><br></pre></td></tr></table></figure>

<p>这个新的镜像是基于我们之前的busybox进行创建的，而且执行了上面的分区文件</p>
<p>我们通过代码查看一下我们的容器代码情况 通过 <code>docker inspect busybox:容器的标识</code></p>
<p>容器的标识就是 TAG</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REPOSITORY                  TAG       IMAGE ID       CREATED             SIZE</span><br><span class="line">busybox                     text      efa9b412f2f7   About an hour ago   110MB</span><br><span class="line">busybox                     latest    334e4a014c81   4 days ago          4.86MB</span><br><span class="line">gitlab/gitlab-ce            latest    08f00af277b7   5 days ago          2.79GB</span><br><span class="line">hub.c.163.com/public/logo   latest    6fbdd13cd204   6 years ago         585B</span><br></pre></td></tr></table></figure>

<p>然后我们分别查看一下text和latest的代码情况，我们查看最后的layter有几层</p>
<p><code>docker inspect busybox:text</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;Layers&quot;: [</span><br><span class="line">                &quot;sha256:98004ed6104b2f4cc21559ea6e4a742ebf6731e37b5d1b04013ca68862749ba3&quot;,</span><br><span class="line">                &quot;sha256:c7a7aa6d1d87d0af266545bb8a56bdedfc79a14be948c092900ffb841c919c87&quot;,</span><br><span class="line">                &quot;sha256:88d1f859f65e27bca2996107976f04ed974c062b507b33b2388b2228b5d80122&quot;,</span><br><span class="line">                &quot;sha256:8e9b239d68ef8acc6fe2b2a82c7c803a79f0bdc5bf200b6d35fc2b062de24963&quot;</span><br><span class="line">            ]</span><br></pre></td></tr></table></figure>

<p><code>docker inspect busybox:latest</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;Layers&quot;: [</span><br><span class="line">               &quot;sha256:98004ed6104b2f4cc21559ea6e4a742ebf6731e37b5d1b04013ca68862749ba3&quot;</span><br><span class="line">           ]</span><br><span class="line">       &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>简单来说，一个run就是一层</p>
<h2 id="制作精简镜像"><a href="#制作精简镜像" class="headerlink" title="制作精简镜像"></a>制作精简镜像</h2><p>但是我们如何精简镜像呢，就像上述所说，仅仅用了三个命令，就多了100m</p>
<p>而且docker最多只有127个run</p>
<p>接下来我们来制作一个精简的redis的docker镜像</p>
<p>先创建一个dockerfile2文件在文件中输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM 192.168.5.160/library/ubantu:trusty</span><br><span class="line">ENV VER    3.0.0</span><br><span class="line">ENV TARBALL http://download.redis.io/releases/redis-$VER.tar.gz</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y curl make gcc</span><br><span class="line">RUN curl -L $TARBALL | tar zxv</span><br><span class="line">WORKDIR redis-$$VER</span><br><span class="line">RUN make</span><br><span class="line">RUN make install</span><br><span class="line">WORKDIR /</span><br><span class="line">RUN apt-get remove -y --auto-remove curl make gcc</span><br><span class="line">RUN apt-get clean</span><br><span class="line">RUN rm -rf /var/lib/apt/lists/* /redis-$$VER</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>save 和 export</p>
<p>导出的区别 ：</p>
<p>export 导出的包括的东西更多一点，它有压缩功能，保留历史层，有历史层的可以进行回滚操作 ;算是导出容器，</p>
<p>容器相当于镜像加个读写层</p>
<p>save 导出的仅仅是镜像，不保留历史层</p>
<p>但是下完之后是300多M有点大</p>
<p>我们对他进行缩小</p>
<p>缩小的方式</p>
<p>用更小的基础镜像 <code>debain</code></p>
<p>如下</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="number">192.168</span>.<span class="number">5.160</span>/library/debain:jessie</span><br><span class="line"><span class="keyword">ENV</span> VER    <span class="number">3.0</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">ENV</span> TARBALL http://download.redis.io/releases/redis-$VER.tar.gz</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y curl make gcc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -L <span class="variable">$TARBALL</span> | tar zxv</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> redis-$<span class="variable">$VER</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> make</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> make install</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get remove -y --auto-remove curl make gcc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get clean</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> -rf /var/lib/apt/lists/* /redis-$<span class="variable">$VER</span></span></span><br></pre></td></tr></table></figure>

<p>成功之后会发现少了很多的空间</p>
<p>然后再进一步瘦身<br>把dockerfile里的命令串联起来</p>
<p>如下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">FROM <span class="number">192.168</span>.<span class="number">5.160</span><span class="regexp">/library/</span>debain:jessie</span><br><span class="line">ENV VER    <span class="number">3.0</span>.<span class="number">0</span></span><br><span class="line">ENV TARBALL http:<span class="regexp">//</span>download.redis.io<span class="regexp">/releases/</span>redis-<span class="variable">$VER</span>.tar.gz</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y curl make gcc &amp;&amp; \</span><br><span class="line">curl -L <span class="variable">$TARBALL</span> | tar zxv &amp;&amp; \</span><br><span class="line">WORKDIR redis-$<span class="variable">$VER</span> &amp;&amp; \</span><br><span class="line">make &amp;&amp; \</span><br><span class="line">make install &amp;&amp; \</span><br><span class="line">WORKDIR / &amp;&amp; \</span><br><span class="line">apt-get remove -y --auto-remove curl make gcc &amp;&amp; \</span><br><span class="line">apt-get clean &amp;&amp; \</span><br><span class="line">rm -rf <span class="regexp">/var/</span>lib<span class="regexp">/apt/</span>lists<span class="regexp">/* /</span>redis-$<span class="variable">$VER</span></span><br></pre></td></tr></table></figure>

<p>通过串联命令编排之后的镜像体积比不编排的能小上一半左右</p>
<p>压缩镜像 ： 但是有时候并不会好使，但是能压缩多少就压缩多少吧，对一个外来镜像进行压缩的时候，可能会比较明显</p>
<p><code>docker save 镜像的名字 | docker-squash -verbose -t 生成的镜像的名字 | docker load 这个对mac不好使，再linux可以</code></p>
<p>使用容器专用的基础镜像 —— scratch 或者busybox作为基础镜像</p>
<p>上面两个是空镜像，所以我们可以把docker里的程序文件拿出来，打包成gz的压缩包</p>
<p>然后再用空镜像再次生成一个容器，进行极致的压缩</p>
<p>这种方式进行的docker容器对于redis而言，会被压缩到个位数的空间，而且可以正常运行</p>
<p>dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> 压缩的文件及其依赖 /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> redis.conf /etc/redis/redis.conf</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;usr/local/bin/redis-server&quot;</span>]</span></span><br><span class="line"> <span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;docker-entrypoint.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>其中压缩的文件是从debain上搞来的依赖，以及redis的包一起打的压缩</p>
<p>EXPOSE ：设置的是端口</p>
<p>查询依赖的方式，通过 ldd 查出所需要的.so文件</p>
<p>然后把所以依赖都打包成tar或者gz文件，用scratch</p>
<p>至于如何获取空镜像，我们可以通过官网命令 <code>tar cv --files-from /dev/null | docker import - scratch</code></p>
<p>就会自动获取了</p>
<p>实操</p>
<p>首先拉去空镜像</p>
<p>对于已经拉去过空镜像的同学就不用了</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">tar cv --files-<span class="keyword">from</span> <span class="regexp">/dev/</span><span class="keyword">null</span> | docker <span class="keyword">import</span> - scratch</span><br></pre></td></tr></table></figure>

<p>拉去之后找到我们的模板机</p>
<p>然后进入我们的模板机里 <code>docker exec -it 名字 /bin/bash</code></p>
<p>然后找到我们的程序比如我找的是redis-server</p>
<p>然后我们找到之后通过ldd命令查看他的依赖 <code>ldd redis-srever</code></p>
<p>查看到依赖之后把文件夹结构以及文件都弄出来，通过cp命令 <code> docker cp 模板机的名字:文件路径 宿主机的路径</code></p>
<p>然后我们把所有的文件，都打包成一个tar.gz <code>tar -zxcf 生成的文件名（带tar.gz的） 打包的内容的路径</code></p>
<p>然后我们编辑dockerfile文件如下</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch <span class="comment">#从什么镜像中创建</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> 压缩的文件及其依赖 / <span class="comment"># 通过ADD可以把文件自动解压</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> redis.conf /etc/redis/redis.conf <span class="comment">#redis 的配置文件</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span> <span class="comment">#端口号</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;usr/local/bin/redis-server&quot;</span>] <span class="comment">#这个相当于解释器，要用的</span></span></span><br></pre></td></tr></table></figure>

<p>然后执行 <code>docker build -t 生成的容器的内容 -f dockerfile</code></p>
<p>构建容器，最后成功之后，通过 <code>docker run -d --name 你的image的名字 你自己起的名字 </code></p>
<p>然后就运行成功了</p>
<p>我们通过docker images</p>
<p>查看一下存储大小如下 ：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">redis</span>-<span class="number">01</span>           latest    c654e9a88af9   <span class="number">13</span> minutes ago   <span class="number">22</span>.<span class="number">3</span>MB</span><br><span class="line"><span class="attribute">scratch</span>            latest    <span class="number">89</span>a161411e52   <span class="number">2</span> hours ago      <span class="number">0</span>B</span><br><span class="line"><span class="attribute">busybox</span>            latest    <span class="number">334</span>e4a014c81   <span class="number">4</span> days ago       <span class="number">4</span>.<span class="number">86</span>MB</span><br><span class="line"><span class="attribute">redis</span>              latest    <span class="number">3</span>e12e2ceb68f   <span class="number">5</span> days ago       <span class="number">117</span>MB</span><br><span class="line"><span class="attribute">gitlab</span>/gitlab-ce   latest    <span class="number">08</span>f00af277b7   <span class="number">5</span> days ago       <span class="number">2</span>.<span class="number">79</span>GB</span><br></pre></td></tr></table></figure>

<p>如上所属，redis-01 是我们自己创建的，redis是官方提供的</p>
<p>差距显而易见</p>
<h2 id="构建企业debian-10-基础测试镜像"><a href="#构建企业debian-10-基础测试镜像" class="headerlink" title="构建企业debian 10 基础测试镜像"></a>构建企业debian 10 基础测试镜像</h2>]]></content>
      <categories>
        <category>云原生（哔哩哔哩）</category>
      </categories>
  </entry>
  <entry>
    <title>zookeeper</title>
    <url>/2022/12/15/12-15/</url>
    <content><![CDATA[<h1 id="hive的抓取策略-datax，通过代码如何把报警信息发送到邮箱里：-上网搜"><a href="#hive的抓取策略-datax，通过代码如何把报警信息发送到邮箱里：-上网搜" class="headerlink" title="hive的抓取策略 ,datax，通过代码如何把报警信息发送到邮箱里： 上网搜"></a>hive的抓取策略 ,datax，通过代码如何把报警信息发送到邮箱里： 上网搜</h1><p>什么是hive的抓取策略呢，举个简单的例子,当我们用 <code>select * from xxx</code>的时候它不会走mr阶段，会直接出来，可是有时候会走mr这个是由什么控制的？就是由我们的hive的抓取策略决定的</p>
<p>我们还可以在配置文件中进行更改，把不要mr的代码变多</p>
<p><code>hive/conf/hive-default.xml.template -》 2637行，修改hive.fetch.task.conversion为more；</code></p>
<p>就相当于把全局查找，字段查找，filter查找，limit查找等都不走MR，直接Fetch</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;<span class="type">name</span>&gt;hive.<span class="keyword">fetch</span>.task.<span class="keyword">conversion</span>&lt;/<span class="type">name</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">value</span>&gt;more&lt;/<span class="keyword">value</span>&gt;</span><br><span class="line">  &lt;description&gt;</span><br><span class="line">    Expects one <span class="keyword">of</span> [<span class="keyword">none</span>, minimal, more].</span><br><span class="line">    <span class="keyword">Some</span> <span class="keyword">select</span> queries can be converted <span class="keyword">to</span> single <span class="keyword">FETCH</span> task minimizing latency.</span><br><span class="line">    Currently the query should be single sourced <span class="keyword">not</span> <span class="keyword">having</span> <span class="keyword">any</span> subquery <span class="keyword">and</span> should <span class="keyword">not</span> have</span><br><span class="line">    <span class="keyword">any</span> aggregations <span class="keyword">or</span> distincts (which incurs RS), <span class="keyword">lateral</span> views <span class="keyword">and</span> joins.</span><br><span class="line">    <span class="number">0.</span> <span class="keyword">none</span> : <span class="keyword">disable</span> hive.<span class="keyword">fetch</span>.task.<span class="keyword">conversion</span></span><br><span class="line">    <span class="number">1.</span> minimal : <span class="keyword">SELECT</span> STAR, <span class="keyword">FILTER</span> <span class="keyword">on</span> <span class="keyword">partition</span> <span class="keyword">columns</span>, <span class="keyword">LIMIT</span> <span class="keyword">only</span></span><br><span class="line">    <span class="number">2.</span> more    : <span class="keyword">SELECT</span>, <span class="keyword">FILTER</span>, <span class="keyword">LIMIT</span> <span class="keyword">only</span> (support <span class="keyword">TABLESAMPLE</span> <span class="keyword">and</span> virtual <span class="keyword">columns</span>)</span><br><span class="line">  &lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<p>然后还可以设置 ：</p>
<p> 用户可以通过设置hive.exec.mode.local.auto的值为true，来让Hive在适当的时候自动启动这个优化。</p>
<p>set hive.exec.mode.local.auto&#x3D;true; &#x2F;&#x2F;开启本地mr</p>
<p>设置local mr的最大输入数据量，当输入数据量小于这个值时采用local mr的方式，默认为134217728，即128M</p>
<p>set hive.exec.mode.local.auto.inputbytes.max&#x3D;51234560;</p>
<p>设置local mr的最大输入文件个数，当输入文件个数小于这个值时采用local mr的方式，默认为4</p>
<p>set hive.exec.mode.local.auto.input.files.max&#x3D;10;</p>
<p>调整hive里的切片大小 ：</p>
<p>mapreduce.input.fileinputformat.split.maxsize</p>
<p>mapreduce.input.fileinputformat.split.minsize</p>
<p>maxsize（切片最大值）：参数如果调得比blockSize小，则会让切片变小，而且就等于配置的这个参数的值。<br>minsize（切片最小值）：参数调的比blockSize大，则可以让切片变得比blockSize还大。</p>
<h1 id="sql调优（speed）"><a href="#sql调优（speed）" class="headerlink" title="sql调优（speed）"></a>sql调优（speed）</h1><h2 id="小表join大表"><a href="#小表join大表" class="headerlink" title="小表join大表"></a>小表join大表</h2><p>当小表Join大表时，如果不指定MapJoin，那么hive解析器会将join操作转换为Common Join操作，在Reduce端完成join，容易发生<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C&spm=1001.2101.3001.7020">数据倾斜</a>。开启MapJoin后可以将小表全部加载到内存中，在map端进行join，避免reducer处理。</p>
<p>优点 ：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">（<span class="number">1</span>）没有reducer处理，就不会产生数据倾斜；</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）没有Map -&gt; Reduce中间的shuffle操作，避免了IO</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 开启MapJoin设置</span><br><span class="line">（<span class="number">1</span>）设置自动选择MapJoin，默认是<span class="literal">true</span></span><br><span class="line">set hive.auto.<span class="built_in">convert</span>.<span class="built_in">join</span> = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">（<span class="number">2</span>）设置小表阈值，默认是25M</span><br><span class="line">set hive.mapjoin.smalltable.filesize=<span class="number">25000000</span>;</span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>. 再大表<span class="built_in">join</span>小表，与小表<span class="built_in">join</span>大表，执行速率几乎相等</span><br><span class="line"></span><br><span class="line">Hive中mapjoin的原理：</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>-side <span class="built_in">join</span>：</span><br><span class="line"></span><br><span class="line">小表数据映射成一张hashtable，再上传到分布式节点的内存中；</span><br><span class="line">大表进行分片，每个节点一部分数据，大表数据文件作为<span class="built_in">map</span>端输入，对<span class="built_in">map</span>()函数每一对输入的kv都与已加载到内存中的小表数据连接，</span><br><span class="line">把连接结果按<span class="built_in">key</span>输出，有多少个<span class="built_in">map</span> task，产生多少个结果文件；</span><br><span class="line">由于<span class="built_in">join</span>操作在<span class="built_in">map</span> task中完成，所以无需启动reduce task，没有shuffle操作和reduce端，避免io和数据倾斜</span><br><span class="line"></span><br><span class="line">reduce-side <span class="built_in">join</span>：</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>端把结果按<span class="built_in">key</span>输出，并在value中标记出数据来源于table1还是table2</span><br><span class="line">因为在shuffle阶段已经按<span class="built_in">key</span>分组，reduce阶段会判断每个value来自哪张表，然后两表相同<span class="built_in">key</span>的记录连接</span><br><span class="line"><span class="built_in">join</span>操作在reduce task中完成</span><br><span class="line"></span><br><span class="line">缺点<span class="number">1</span>：在<span class="built_in">map</span>阶段没有对数据瘦身，shuffle的网络传输和排序性能很低</span><br><span class="line">缺点<span class="number">2</span>：reduce对<span class="number">2</span>个集合做城际计算，很耗内存，容易造成oom</span><br></pre></td></tr></table></figure>

<h2 id="大表join大表"><a href="#大表join大表" class="headerlink" title="大表join大表"></a>大表join大表</h2><p>有时join超时是因为某些key对应的数据太多了。由于相同的key对应的数据都会发送到相同的reducer上，如果出现数据倾斜可能导致内存不足。</p>
<p>常见对于key对应字段为空，可以采取的优化手段包括空值key过滤和空值key转换</p>
<p>首先我们要进行配置，开启历史服务器</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 首先配置mapred-site.xml</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="language-xml"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="language-xml"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>. 在shell端启动历史服务器</span><br><span class="line">sbin/mr-jobhistory-daemon.sh <span class="keyword">start</span> historyserver</span><br><span class="line"> </span><br><span class="line"><span class="number">3</span>. 查看jobhistory端口</span><br><span class="line">http://hadoop10<span class="number">0</span>:<span class="number">19888</span>/jobhistory</span><br></pre></td></tr></table></figure>

<p>空key过滤</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">不过滤空id列</span><br><span class="line"><span class="keyword">insert</span> overwrite table A </span><br><span class="line"><span class="keyword">select</span> b.* <span class="keyword">from</span> B b <span class="keyword">left</span> <span class="keyword">join</span> C c <span class="keyword">on</span> b.id = c.id;</span><br><span class="line"> </span><br><span class="line">过滤掉空id列</span><br><span class="line"><span class="keyword">insert</span> overwrite table A </span><br><span class="line"><span class="keyword">select</span> b.* <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> B <span class="keyword">where</span> id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>) b <span class="keyword">left</span> <span class="keyword">join</span> C c <span class="keyword">on</span> b.id = c.id;</span><br><span class="line">过滤掉空id列后，耗费时间会降低很多。</span><br></pre></td></tr></table></figure>

<p><strong>或者把它变成其他的有值的</strong></p>
<p>有时虽然某个key对应的null很多，但null并不是异常数据，不能过滤掉，必须包含在join的结果中，这样就可以考虑把表中key为null的字段赋一个随机值，使得数据随机均匀分到不同的reducer上。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">首先设置reduce个数</span><br><span class="line"><span class="keyword">set</span> mapreduce.job.reduces = <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line">然后<span class="keyword">join</span>两张表，随机设置<span class="keyword">null</span>值</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> A</span><br><span class="line"><span class="keyword">select</span> b.* <span class="keyword">from</span> B b <span class="keyword">full</span> <span class="keyword">join</span> C c <span class="keyword">on</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> b.id <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">then</span> concat (<span class="string">&#x27;hive&#x27;</span>,rand()) <span class="keyword">else</span> b.id end = c.id;</span><br></pre></td></tr></table></figure>

<p>原理：当表b的字段id为null时，如果null过多所有null对应同一个key即id，都挤到一个reduce上，通过优化将表b的key&#x3D;id换成key&#x3D;hive随机数，这样null分配到不同的key上，避免数据倾斜。</p>
<p>case when A then B else C end语法：</p>
<p>当b表的字段id为null时，对id取值为拼接字符串（hive+随机数），否则依然取b.id；然后on条件为：hive随机数&#x3D;c.id或者b.id&#x3D;c.id。</p>
<h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><p>对于group by聚合，默认情况下，Map阶段同一Key的数据发给一个reduce，若某个key的数据量太大，可能会造成数据倾斜。</p>
<p>如果在Map端就直接完成部分聚合，最后在Reduce端得出最终结果，就可以避免数据倾斜。</p>
<p>需要在Map端进行聚合参数设置：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 是否在<span class="built_in">Map</span>端进行聚合，默认是<span class="literal">true</span></span><br><span class="line"><span class="built_in">set</span> hive.<span class="built_in">map</span>.aggr = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span> 在<span class="built_in">Map</span>端进行聚合操作的条目数，默认<span class="number">10</span>w条</span><br><span class="line"><span class="built_in">set</span> hive.groupby.mapaggr.checkinterval = <span class="number">100000</span></span><br><span class="line"> </span><br><span class="line"><span class="number">3.</span> 有数据倾斜时进行负载均衡，默认<span class="literal">false</span></span><br><span class="line"><span class="built_in">set</span> hive.groupby.skewindata = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>原理是当set hive.groupby.skewindata &#x3D; true后，会生成两个MR Job，启两个任务。</p>
<p>job1将group by的key，相同的key可能随机分发到不同的Reduce中，然后Reduce依据key对数据进行聚合，此时每一个Reduce中每个数据的key不一定相同，但是经过这一步聚合后，大大减少了数据量。</p>
<p>job2是真正意义上MR的底层实现，将相同的key分配到同一个reduce中，进行key的聚合操作。</p>
<p>第一步job1实现负载均衡，第二步job2实现聚合需求。</p>
<p>如果skewindata参数&#x3D;false，也就是默认情况下，只会进行job2操作，进行一次MapReduce。</p>
<h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p>用 count(distinct key)处理数据</p>
<p>当数据量大的时候，由于count（distinct key）去重聚合是全聚合操作，即便是设定了reduce tasks的个数，例如set mapred.reduce.tasks&#x3D;100；hive也只会启动一个reducer（order by也是这个情况），这就造成一个reducer处理的数据量太大，导致整个Job完成的很慢。</p>
<p>可以将count（distinct key）的方式，改为先group by 再count的方式，也就是将distinct换成group by。</p>
<p>这种优化可以增加reducer的个数，虽然会用多个Job完成，但是适合处理数据量大的情况。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">原始：  <span class="keyword">select</span> count(<span class="keyword">distinct</span> id) <span class="keyword">from</span> <span class="keyword">table</span>;</span><br><span class="line"> </span><br><span class="line">优化后：<span class="keyword">select</span> count(id) <span class="keyword">from</span> (<span class="keyword">select</span> id <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">group</span> <span class="keyword">by</span> id) a;</span><br></pre></td></tr></table></figure>

<h2 id="行列过滤（分区过滤，先where再join嵌套子查询）——谓词下推"><a href="#行列过滤（分区过滤，先where再join嵌套子查询）——谓词下推" class="headerlink" title="行列过滤（分区过滤，先where再join嵌套子查询）——谓词下推"></a>行列过滤（分区过滤，先where再join嵌套子查询）——谓词下推</h2><p>列处理：在select中，只拿需要的列，如果有分区，尽量使用分区字段查询（分区过滤），避免使用select *全表扫描select key from tablename where 分区字段 &#x3D; ‘~’</p>
<p>行处理：两表连接时，对一个表的数据先where过滤，再join（如果先join再过滤，过滤的数据量会很大），即嵌套子查询</p>
<p>在Hive中，可以通过将参数hive.optimize.ppd设置为true，启用谓词下推。与它对应的逻辑优化器是PredicatePushDown。该优化器就是将OperatorTree中的FilterOperator向上提</p>
<p>Hive中与列裁剪和分区裁剪优化相关的配置参数分别为：hive.optimize.cp和hive.optimize.pruner，默认都是true。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">eg：join两张表，A表joinB表，要求是把B表中<span class="built_in">id</span>&lt;<span class="number">10</span>的过滤掉后，只查询联结表的<span class="built_in">id</span>列</span><br><span class="line">原始： select a.<span class="built_in">id</span> <span class="keyword">from</span> A a join B b <span class="keyword">on</span> a.<span class="built_in">id</span>=b.<span class="built_in">id</span> <span class="keyword">where</span> b.<span class="built_in">id</span>&lt;<span class="number">10</span></span><br><span class="line"> </span><br><span class="line">优化后：select a.<span class="built_in">id</span> <span class="keyword">from</span> A a join (select <span class="built_in">id</span> <span class="keyword">from</span> B <span class="keyword">where</span> <span class="built_in">id</span>&lt;<span class="number">10</span>) b <span class="keyword">on</span> a.<span class="built_in">id</span>=b.<span class="built_in">id</span></span><br></pre></td></tr></table></figure>

<h2 id="动态分区"><a href="#动态分区" class="headerlink" title="动态分区"></a>动态分区</h2><p>分区列是表的一个伪列，它对应HDFS的一个分区文件夹，并且分区列存在于表的最后。</p>
<p>如果不设定动态分区，往分区表中导入数据的方式如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 创建分区表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu_par(id <span class="type">int</span>,<span class="type">name</span> string)</span><br><span class="line">partitioned <span class="keyword">by</span> (month string)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span> 往分区中导入数据</span><br><span class="line"><span class="keyword">load</span> data <span class="keyword">local</span> inpath <span class="string">&#x27;/opt/module/datas/student.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> stu_par <span class="keyword">partition</span>(month=<span class="string">&#x27;10&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果设定动态分区，导入数据就不再需要指定分区字段了</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 设置为非严格模式（默认strict，表示必须指定至少一个分区为静态分区；nonstrict表示允许所有分区可使用动态分区）</span><br><span class="line"></span><br><span class="line">hive<span class="selector-class">.exec</span><span class="selector-class">.dynamic</span><span class="selector-class">.partition</span>.mode=nonstrict</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 默认配置</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）开启动态分区功能（默认true，开启）</span><br><span class="line"></span><br><span class="line">hive<span class="selector-class">.exec</span><span class="selector-class">.dynamic</span>.partition=true</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）在所有执行MR节点上，最大一共可以创建多少个动态分区，默认<span class="number">1000</span>个</span><br><span class="line"></span><br><span class="line">hive<span class="selector-class">.exec</span><span class="selector-class">.max</span><span class="selector-class">.dynamic</span>.partitions=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）在每个执行MR的节点上，最大可以创建多少个分区，默认值<span class="number">100</span></span><br><span class="line"></span><br><span class="line">eg：若源数据包含一年的数据，按照天数分区，day字段应该有<span class="number">365</span>个值，这里的默认值<span class="number">100</span>就应该修改为大于<span class="number">365</span>的数。</span><br><span class="line"></span><br><span class="line">hive<span class="selector-class">.exec</span><span class="selector-class">.max</span><span class="selector-class">.dynamic</span><span class="selector-class">.partitions</span>.pernode=<span class="number">100</span></span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）整个MR job中，最大可以创建多少个HDFS文件，默认<span class="number">100000</span></span><br><span class="line"></span><br><span class="line">hive<span class="selector-class">.exec</span><span class="selector-class">.max</span><span class="selector-class">.created</span>.files=<span class="number">100000</span></span><br></pre></td></tr></table></figure>

<p>操作 ：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">1. 创建分区表</span><br><span class="line">create table dept_par(id string,name string) partitioned by (location int)</span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27;;</span><br><span class="line"> </span><br><span class="line">2. 设置动态分区非严格模式</span><br><span class="line">set hive.exec.dynamic.partition.mode = nonstrict;</span><br><span class="line"> </span><br><span class="line">3. 查看dept表</span><br><span class="line">+--------------+-------------+-----------+--+</span><br><span class="line">|<span class="string"> dept.deptno  </span>|<span class="string"> dept.dname  </span>|<span class="string"> dept.loc  </span>|</span><br><span class="line">+--------------+-------------+-----------+--+</span><br><span class="line">|<span class="string"> 10           </span>|<span class="string"> ACCOUNTING  </span>|<span class="string"> 1700      </span>|</span><br><span class="line">|<span class="string"> 20           </span>|<span class="string"> RESEARCH    </span>|<span class="string"> 1800      </span>|</span><br><span class="line">|<span class="string"> 30           </span>|<span class="string"> SALES       </span>|<span class="string"> 1900      </span>|</span><br><span class="line">|<span class="string"> 40           </span>|<span class="string"> OPERATIONS  </span>|<span class="string"> 1700      </span>|</span><br><span class="line">+--------------+-------------+-----------+--+</span><br><span class="line"> </span><br><span class="line">4. 分区表动态导入数据（并未指定分区字段的值）</span><br><span class="line">insert into table dept_par partition(location) select deptno,dname,loc from dept;</span><br><span class="line">...</span><br><span class="line">	Loading partition &#123;location=1900&#125;</span><br><span class="line">	Loading partition &#123;location=1800&#125;</span><br><span class="line">	Loading partition &#123;location=1700&#125;</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">5. 查看分区表的分区情况</span><br><span class="line">hive (hive_db1)&gt; show partitions dept_par;</span><br><span class="line">OK</span><br><span class="line">partition</span><br><span class="line">location=1700</span><br><span class="line">location=1800</span><br><span class="line">location=1900</span><br><span class="line"> </span><br><span class="line">6. 查询分区表</span><br><span class="line">select <span class="symbol">*</span> from dept_par where location=&#x27;1700&#x27;;</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line">|<span class="string"> dept_par.id  </span>|<span class="string"> dept_par.name  </span>|<span class="string"> dept_par.location  </span>|</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line">|<span class="string"> 10           </span>|<span class="string"> ACCOUNTING     </span>|<span class="string"> 1700               </span>|</span><br><span class="line">|<span class="string"> 40           </span>|<span class="string"> OPERATIONS     </span>|<span class="string"> 1700               </span>|</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line"> </span><br><span class="line">select <span class="symbol">*</span> from dept_par where location=&#x27;1800&#x27;;</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line">|<span class="string"> dept_par.id  </span>|<span class="string"> dept_par.name  </span>|<span class="string"> dept_par.location  </span>|</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line">|<span class="string"> 20           </span>|<span class="string"> RESEARCH       </span>|<span class="string"> 1800               </span>|</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line"> </span><br><span class="line">select <span class="symbol">*</span> from dept_par where location=&#x27;1900&#x27;;</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line">|<span class="string"> dept_par.id  </span>|<span class="string"> dept_par.name  </span>|<span class="string"> dept_par.location  </span>|</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line">|<span class="string"> 30           </span>|<span class="string"> SALES          </span>|<span class="string"> 1900               </span>|</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br></pre></td></tr></table></figure>

<p><strong>原理：</strong></p>
<p>将select的最后一列，认为是分区列（因为分区列在表的最后），将最后一列字段值相同的行，导入同一个分区中；</p>
<p>好处是避免了指定分区字段的值，直接动态的将值相同的行导入同一个分区中，加大效率。</p>
<p>ps：如果把deptno放在select最后一列，那么会生成四个分区</p>
<h2 id="分桶"><a href="#分桶" class="headerlink" title="分桶"></a>分桶</h2><p>适合对数据进行抽样查询的情况，clustered by 字段 into x buckets，将表数据以（字段hash值%分桶数）按照取模结果，对数据进行分桶，也就是随机分布成几块。</p>
<p>ps：分区列是伪列，需要指明字段类型；分桶列是实际列，不需要指明字段类型。</p>
<p>分桶前，需要设置属性set hive.enforce.bucketing &#x3D; true</p>
<h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><p>主要目的是提高hive查询效率，避免全表查询 select * from tablename where 分区字段 &#x3D; ‘~’</p>
<h1 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h1><p>生产上namenode是两个是没有snn的，同样yarn的老大也是两个，是忘了防止一个老大突然挂掉，然后让下一个上位</p>
<p>控制整个老大的更换的就是zookeeper</p>
<p>hadoop ： 请求服务是不用关注所有节点的ip的，我们只用关注namenode的，但是当是两个namenode的时候（生产上），这个时候就会把两个namenode放在一起，形成一个namespace-》zookeeper实现</p>
<p>部署 ：</p>
<ul>
<li>单点</li>
<li>分布式</li>
<li>要求 ：部署的机器数量有要求 ，2n + 1 台机器</li>
</ul>
<p>主从架构 ：如果老大挂了，后面的老二就会上位</p>
<p>zookeeper版本有很多：但是对于我们现在能用就行 ： 3.8.0</p>
<p>部署 ：</p>
<p>有前置要求：具体查看官网 ：对系统有要求 ： jdk 1.8orlater</p>
<p>先把包解压 -》 软连接 -》 zookeeper -》 环境变量 -》 *cmd的是windows上运行的 -》 进入 conf目录 zoo.cfg（改名之后）</p>
<ul>
<li>单点：直接dataDir:改成自己的 - 》 启动</li>
<li>分布 ：dataDir ,三台机器的id，以及机器id的端口号</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bigdata3</span></span><br><span class="line"><span class="attribute">dataDir</span>=xxxxx</span><br><span class="line"><span class="attribute">server</span>.<span class="number">1</span>=bigdata3:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">2</span>=bigdata4:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">3</span>=bigdata5:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">myid</span> : 指定机器号 ： 在zookeeper的数据文件夹下创建一个myid，id号就是server点的数字</span><br></pre></td></tr></table></figure>

<p>然后启动zk ： 通过zkServer.sh start</p>
<p>分布式要每一台机器上都整</p>
<p>分布式：查看status之后会出现 follower 和leader 就是副手和老大</p>
<p>然后创建一个群起脚本</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt <span class="number">1</span> ];then</span><br><span class="line">echo <span class="string">&quot;start|stop|status&quot;</span></span><br><span class="line"><span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> startzk()&#123;</span><br><span class="line"> nohup zkServer.sh start  &gt; ~<span class="regexp">/log/</span>zk.log <span class="number">1</span>&gt;&amp;<span class="number">2</span> &amp;</span><br><span class="line"> ssh bigdata4 <span class="string">&quot;zkServer.sh start&quot;</span></span><br><span class="line"> ssh bigdata5 <span class="string">&quot;zkServer.sh start&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> stopzk()&#123;</span><br><span class="line"> nohup zkServer.sh stop  &gt; ~<span class="regexp">/log/</span>zk.log <span class="number">1</span>&gt;&amp;<span class="number">2</span> &amp;</span><br><span class="line"> ssh bigdata4 <span class="string">&quot;zkServer.sh stop&quot;</span></span><br><span class="line"> ssh bigdata5 <span class="string">&quot;zkServer.sh stop&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> statuszk()&#123;</span><br><span class="line">echo <span class="string">&quot;-----------------bigdata3------------------&quot;</span></span><br><span class="line">jps | grep QuorumPeerMain</span><br><span class="line">echo <span class="string">&quot;-----------------bigdata4------------------&quot;</span></span><br><span class="line">ssh bigdata4 <span class="string">&quot;jps | grep QuorumPeerMain&quot;</span></span><br><span class="line">echo <span class="string">&quot;-----------------bigdata5------------------&quot;</span></span><br><span class="line">ssh bigdata5 <span class="string">&quot;jps | grep QuorumPeerMain&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    <span class="string">&quot;start&quot;</span>)</span><br><span class="line">    startzk</span><br><span class="line">    ;;</span><br><span class="line">    <span class="string">&quot;stop&quot;</span>)</span><br><span class="line">    stopzk</span><br><span class="line">    ;;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>)</span><br><span class="line">    statuszk</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">    echo <span class="string">&quot;error input&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="zk是干什么的？"><a href="#zk是干什么的？" class="headerlink" title="zk是干什么的？"></a>zk是干什么的？</h2><p>zk可以做监控，可以检查到机器是不是还活着，</p>
<p>管理配置信息的</p>
<h2 id="zk的数据模型"><a href="#zk的数据模型" class="headerlink" title="zk的数据模型"></a>zk的数据模型</h2><p>层级式的结构，一个树形的结构，和linux差不多</p>
<p>节点&#x2F;目录</p>
<ul>
<li>节点就是目录</li>
<li>节点保存数据的内容</li>
<li>zk里的所有的目录都可以叫节点</li>
</ul>
<p>通过命令 ：zkCli.sh 访问zk</p>
<p>然后我们可以对其数据进行操作 ：</p>
<ul>
<li><p>查看节点 ：ls name</p>
</li>
<li><p>查看节点内容 ： get name</p>
</li>
<li><p>节点</p>
<ul>
<li>临时节点 ：只在当前session有效 ，关闭当前会话，则就失效，不可以存放子节点</li>
<li>永久节点 ：永久存在的，可以存放子节点</li>
</ul>
</li>
<li><p>zk 每个节点都有自己的id，节点号，不会重复 ， 数据是存放在节点上的</p>
</li>
<li><p>数据不是很大的数据</p>
</li>
<li><p>仅仅是比较小的数据</p>
</li>
<li><p>如果存放的数据发生变更，数据版本号也会发生变更</p>
</li>
<li><p>创建节点 ： create : <code>create /dl2262 zihang</code></p>
</li>
<li><p>stat path :获取当前节点状态 ： <code>stat /dl2262</code></p>
</li>
<li><pre><code>cZxid = 0x300000002 id
ctime = Thu Dec 15 14:52:29 CST 2022
mZxid = 0x300000002
mtime = Thu Dec 15 14:52:29 CST 2022
pZxid = 0x300000002
cversion = 0 
dataVersion = 0 数据版本
aclVersion = 0 权限的版本
ephemeralOwner = 0x0 是不是临时节点 0x0 不是临时节点 其余就是临时节点
dataLength = 6 数据的长度：zihang就是6个字节
numChildren = 0 下面的子节点
</code></pre>
</li>
<li><p>create -e ：创建临时节点 ：<code>create -e /dl2262 zuan</code> 临时节点也有自己的过期时间，时间一过就会自动删除（重新启动客户端的时候）</p>
</li>
<li><p>顺序节点 ： create -s  默认会给节点后面加一个自增的序列： <code>create -s /dl2262/ziyuan</code></p>
</li>
<li><p>不可以创建深层文件夹的方式命令，如果使用zk的api则可以，或者java代码的方式</p>
</li>
<li><p>修改数据内容的 ： set :   <code>set [-s] [-v version] path data-&gt;set /dl2262 xxxx  </code></p>
<ul>
<li>数据版本 ： 如果数据版本不对应，就会报错的</li>
</ul>
</li>
<li><p>删除节点 ：delete ： <code>delete [-v version] path</code></p>
</li>
<li><p>如果版本不对还是要出错的</p>
</li>
<li><p>zk自带的监控 ， 监听器</p>
</li>
<li><p>命令中有-w的就是可以监听的</p>
</li>
<li><p>针对每一个节点都可以执行的，每个节点都有一个监听器，当每个节点发生变化，就会触发watch事件</p>
</li>
<li><p>但是zk的shell命令每次只能监听一次 ， zk的原生的api不行，但是curator 的可以一直监听</p>
</li>
<li><p>命令 stat -w nodenpath 就可以监听，或者get -w nodepath等</p>
</li>
<li><p>但是命令行的方式只能触发一次</p>
</li>
</ul>
<p>zk的四字命令</p>
<ul>
<li>zk要对外进行服务的</li>
<li>通过器对外的端口对其进行监控这个是对zk进行监控的</li>
<li>使用前提 ： 要编辑配置文件 ：在zoo.cng这个配置文件里添加 <code>4lw.commands.whitelist=*</code></li>
<li>stat ：可以列出自己的服务端和客户端的一些详细信息</li>
<li>使用方式 ： 直接在linux命令行操作 ， <code>echo stat | telnet localhost 2181</code></li>
<li>ruok : are you ok ? 就是检测服务的功能启动了吗</li>
<li>dump ：列出最近的会话和临时节点的详细信息</li>
<li>conf ： 打印机器的配置</li>
</ul>
<p>或者可以使用Prometheus框架监控：周六周日学习</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>flume</title>
    <url>/2022/12/12/12-12/</url>
    <content><![CDATA[<p>xxl：任务调度的时候</p>
<ul>
<li>设置一个xxl job 完成任务 ，解耦不好，就是代码中常规定义的高内聚 ，低偶合</li>
<li>设置多个xxl job，可以解决上述的问题 ， 但是时间不好把握 ， 就是第一个任务和第二个任务的交界处，就是如何判断第一个任务执行完了，如何开启第二个，xxl中有可以控制这个的功能</li>
<li>在任务编辑页面中，点击添加子任务id，就可以了</li>
</ul>
<p>然后只用执行父任务就好</p>
<p>但是不太方便</p>
<p>任务调度框架 ： 推荐dolphinscheduler  官网  ：<code>dolphinscheduler.apache.org</code></p>
<p>周六周日学会</p>
<p>首选dolphinscheduler</p>
<p>airflow 也是比较擅长制作dag（有向无关图）的一个框架官网 ： <code>airflow.apache.org</code></p>
<p>他的dag能力非常好用，但是是要求用python使用的，同样周六周日学会</p>
<p>或者自己开发&#x3D;》java团队</p>
<p>sqoop是要在yarn上申请资源，然后进行map阶段，它不走reduce阶段，它在yarn上申请资源，就是消耗时间的最大问题</p>
<h1 id="flume"><a href="#flume" class="headerlink" title="flume"></a>flume</h1><p>主要是收集我们的日志数据的</p>
<p>数据采集&#x2F;数据收集</p>
<p>数据采集：把数据采集到服务器上</p>
<p>数据收集：把数据移动到指定位置</p>
<p>上述是老师之前公司的定义</p>
<p>flume的架构地位 ： 一般采集日志数据，并不用我们做，是java团队要做的</p>
<p>日志数据 -》flume-》hdfs</p>
<p>业务数据 通过sqoop存到hdfs上</p>
<p>数据处理的两种方式 ： 离线 ，实时</p>
<p>上述所处的数据处理方式是离线处理，</p>
<p>实时处理是来一个数据，就处理一个</p>
<p>离线处理是把一定时间内的数据放到一起来进行处理也叫p处理</p>
<p>实时处理的架构线和离线处理的差不多，因为flume采集数据就是实时的</p>
<p>实时 ： 日志数据 -》 flume -》 kafka -》 实时处理框架</p>
<p>离线 ： 日志数据 -》 flume -》 hdfs -》 hive</p>
<p>但是现在有一种框架如下 ：</p>
<p>日志数据 -》 flume -》 kafka</p>
<ul>
<li>-》实时</li>
<li>-》flume -》hdfs -》离线</li>
</ul>
<p>并不意味着下面的架构比上面两种好，架构没有好与坏，只有合适不合适</p>
<p>因为下面意味着要多加一层维护，消耗人力以及物资</p>
<p>官网 ： <code>flume.apache.org</code></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>官方介绍 ：</p>
<p>收集，聚合，移动日志文件 <code>Flume is a distributed, reliable, and available service for efficiently collecting, aggregating, and moving large amounts of log data.</code></p>
<p>flume ：采集数据是实时采集的而且支持恢复机制 <code> It has a simple and flexible architecture based on streaming data flows. It is robust and fault tolerant with tunable reliability mechanisms and many failover and recovery mechanisms.</code></p>
<p>flume组件</p>
<ul>
<li>source ：采集数据</li>
<li>channel ： 管道，存储采集过来的数据</li>
<li>sink ： 移动数据</li>
</ul>
<p>flume ： 使用场景</p>
<p>采集数据日志-》 hdfs上</p>
<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><p>以后操作flume，就是编写agent里面的配置</p>
<p>agent ： 包括上面的那三个组件</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>我们部署的化用1.9版本</p>
<p>第一步 ： 先解压 到app下</p>
<p>第二步 ： 软连接 + 环境变量</p>
<p>第三步 ： 配置flume，修改flume的env.sh文件，把java_home加上</p>
<p>第四步 ： 使用flume ： 配置agent 配置文件</p>
<p>flume user guide ：基本使用</p>
<p>flume develop guide ：二次开发</p>
<p>常用的 source</p>
<ul>
<li>avro 序列化框架的source ****</li>
<li>exec 日志文件</li>
<li>spooling dir 日志文件</li>
<li>kafka Source</li>
<li>Netcat Source 通过端口采集数据</li>
<li>taildir Source 日志文件 ****</li>
<li>等 ，可以自己开发</li>
<li>其余都是两个星</li>
</ul>
<p>常用的channel</p>
<ul>
<li>Memory ****</li>
<li>File  ****</li>
<li>JDBC *</li>
<li>kafka *</li>
<li>Custom ： 用户开发 *</li>
<li>等</li>
</ul>
<p>常用的sink</p>
<ul>
<li>hdfs ****</li>
<li>hive ****</li>
<li>avro ****</li>
<li>logger 控制台，打印 **</li>
<li>HBase *</li>
<li>kafka *</li>
<li>http *</li>
<li>custom *</li>
<li>等</li>
</ul>
<p>如何配置agent</p>
<p>用什么查什么 ： 不用记</p>
<p>需求  ：从指定端口的地方获取数据并输出到控制套</p>
<p>分析  ：</p>
<p>source ：Netcat</p>
<p>channel ： memory</p>
<p>sink ： logger</p>
<p>然后编写一个flume的文件，文件内容如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = netcat</span><br><span class="line"><span class="attr">a1.sources.r1.bind</span> = localhost</span><br><span class="line"><span class="attr">a1.sources.r1.port</span> = <span class="number">44444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>event  ：就是我们的flume的一条数据，代表数据是通过这三个阶段的一条数据</p>
<p>关于source的参数，下列以netcat为例</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">Property</span> Name	<span class="keyword">Default</span>	Description</span><br><span class="line">channels	–	 </span><br><span class="line"><span class="keyword">type</span>	–	The <span class="keyword">component</span> <span class="keyword">type</span> name, needs <span class="keyword">to</span> be netcat</span><br><span class="line">bind	–	Host name <span class="keyword">or</span> IP address <span class="keyword">to</span> bind <span class="keyword">to</span></span><br><span class="line"><span class="keyword">port</span>	–	<span class="keyword">Port</span> # <span class="keyword">to</span> bind <span class="keyword">to</span></span><br><span class="line">max-<span class="literal">line</span>-length	<span class="number">512</span>	Max <span class="literal">line</span> length per event <span class="keyword">body</span> (<span class="keyword">in</span> bytes)</span><br><span class="line">ack-every-event	<span class="literal">true</span>	Respond <span class="keyword">with</span> an “OK” <span class="keyword">for</span> every event received</span><br><span class="line">selector.<span class="keyword">type</span>	replicating	replicating <span class="keyword">or</span> multiplexing</span><br><span class="line">selector.*	 	Depends <span class="keyword">on</span> the selector.<span class="keyword">type</span> value</span><br><span class="line">interceptors	–	Space-separated list <span class="keyword">of</span> interceptors</span><br><span class="line">interceptors.*	 	 </span><br></pre></td></tr></table></figure>

<p>关于channel参数</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Property <span class="type">Name</span>	<span class="keyword">Default</span>	Description</span><br><span class="line"><span class="keyword">type</span>	–	The component <span class="keyword">type</span> <span class="type">name</span>, needs <span class="keyword">to</span> be memory</span><br><span class="line">capacity	<span class="number">100</span>	The maximum number <span class="keyword">of</span> events stored <span class="keyword">in</span> the channel</span><br><span class="line">transactionCapacity	<span class="number">100</span>	The maximum number <span class="keyword">of</span> events the channel will take <span class="keyword">from</span> a source <span class="keyword">or</span> give <span class="keyword">to</span> a sink per <span class="keyword">transaction</span></span><br><span class="line">keep-alive	<span class="number">3</span>	Timeout <span class="keyword">in</span> seconds <span class="keyword">for</span> adding <span class="keyword">or</span> removing an event</span><br><span class="line">byteCapacityBufferPercentage	<span class="number">20</span>	Defines the percent <span class="keyword">of</span> buffer <span class="keyword">between</span> byteCapacity <span class="keyword">and</span> the estimated total size <span class="keyword">of</span> <span class="keyword">all</span> events <span class="keyword">in</span> the channel, <span class="keyword">to</span> account <span class="keyword">for</span> data <span class="keyword">in</span> headers. See below.</span><br><span class="line">byteCapacity	see description	Maximum total bytes <span class="keyword">of</span> memory allowed <span class="keyword">as</span> a sum <span class="keyword">of</span> <span class="keyword">all</span> events <span class="keyword">in</span> this channel. The implementation <span class="keyword">only</span> counts the Event body, which <span class="keyword">is</span> the reason <span class="keyword">for</span> providing the byteCapacityBufferPercentage <span class="keyword">configuration</span> parameter <span class="keyword">as</span> well. Defaults <span class="keyword">to</span> a computed <span class="keyword">value</span> equal <span class="keyword">to</span> <span class="number">80</span>% <span class="keyword">of</span> the maximum memory available <span class="keyword">to</span> the JVM (i.e. <span class="number">80</span>% <span class="keyword">of</span> the -Xmx <span class="keyword">value</span> passed <span class="keyword">on</span> the command <span class="type">line</span>). Note that <span class="keyword">if</span> you have multiple memory channels <span class="keyword">on</span> a single JVM, <span class="keyword">and</span> they happen <span class="keyword">to</span> hold the same physical events (i.e. <span class="keyword">if</span> you are <span class="keyword">using</span> a replicating channel selector <span class="keyword">from</span> a single source) <span class="keyword">then</span> those event sizes may be <span class="type">double</span>-counted <span class="keyword">for</span> channel byteCapacity purposes. Setting this <span class="keyword">value</span> <span class="keyword">to</span> <span class="number">0</span> will cause this <span class="keyword">value</span> <span class="keyword">to</span> fall back <span class="keyword">to</span> a hard <span class="type">internal</span> <span class="keyword">limit</span> <span class="keyword">of</span> about <span class="number">200</span> GB.</span><br></pre></td></tr></table></figure>

<p>关于sink</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">Property</span> <span class="keyword">Name</span>	<span class="keyword">Default</span>	Description</span><br><span class="line">channel	–	 </span><br><span class="line"><span class="keyword">type</span>	–	The component <span class="keyword">type</span> <span class="keyword">name</span>, needs <span class="keyword">to</span> be logger</span><br><span class="line">maxBytesToLog	<span class="number">16</span>	Maximum number <span class="keyword">of</span> bytes <span class="keyword">of</span> the Event body <span class="keyword">to</span> log</span><br></pre></td></tr></table></figure>

<p>然后启动我们的flume</p>
<p>执行 <code>flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file /home/hadoop/data/flumeexample.txt -Dflume.root.logger=info,console --name a1</code></p>
<p>然后执行telent localhost 44444</p>
<p>往里面发送内容，在我们启动flume的session就会发现内容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">53</span>,<span class="number">172</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">31</span> <span class="number">0</span>D                                           <span class="number">1</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">54</span>,<span class="number">427</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">32</span> <span class="number">0</span>D                                           <span class="number">2</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">54</span>,<span class="number">877</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">33</span> <span class="number">0</span>D                                           <span class="number">3</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">55</span>,<span class="number">237</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">34</span> <span class="number">0</span>D                                           <span class="number">4</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">55</span>,<span class="number">565</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">35</span> <span class="number">0</span>D                                           <span class="number">5</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">55</span>,<span class="number">891</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">36</span> <span class="number">0</span>D                                           <span class="number">6</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">56</span>,<span class="number">238</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">37</span> <span class="number">0</span>D                                           <span class="number">7</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">56</span>,<span class="number">609</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">38</span> <span class="number">0</span>D                                           <span class="number">8</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">57</span>,<span class="number">272</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">39</span> <span class="number">0</span>D                                           <span class="number">9</span>. &#125;</span><br></pre></td></tr></table></figure>

<p>如上 ：</p>
<p>生产上常见的</p>
<ul>
<li>采集log文件到hdfs上</li>
<li>采集log文件到hive</li>
<li>待机log文件到kafka里</li>
<li>采集kafka数据到hdfs</li>
<li>采集kafka数据到hive</li>
<li>采集数据到下一个agent里</li>
</ul>
<p>source ：</p>
<ul>
<li>netcat ： 采集端口数据 ： 学习测试</li>
<li>日志文件</li>
<li>kafka</li>
<li>agent</li>
</ul>
<p>采集日志文件</p>
<ul>
<li>exec</li>
<li>spooldir</li>
<li>taildir</li>
</ul>
<p>采集数据文件到控制台</p>
<ul>
<li>source ： exec</li>
<li>channel  ： memory</li>
<li>sink ： logger</li>
</ul>
<h1 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h1><p>编写agent</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = exec</span><br><span class="line"><span class="attr">a1.sources.r1.command</span> = tail -F /home/hadoop/data/loger.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>然后执行 <code>flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file /home/hadoop/data/flumeexample.txt -Dflume.root.logger=info,console --name a1</code></p>
<p>结果如下 ：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">25</span>,<span class="number">755</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">31</span>                                              <span class="number">1</span> &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">55</span>,<span class="number">761</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>                                     aaaa &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">40</span>:<span class="number">01</span>,<span class="number">909</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>                                     aaaa &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">40</span>:<span class="number">10</span>,<span class="number">910</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">73</span> <span class="number">73</span>                               aaaass &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">40</span>,<span class="number">961</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">73</span> <span class="number">73</span> <span class="number">64</span> <span class="number">73</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">73</span>             aaaassdsaads &#125;</span><br></pre></td></tr></table></figure>

<p>上面的body里的东西是ascII码值的16进制</p>
<p>exec 的方式采集数据的时候，如果停掉flume，然后重新启动的时候，还会再次把文件里的数据再采集一次，造成数据双倍，能用，但是不建议</p>
<h1 id="spoolingdir"><a href="#spoolingdir" class="headerlink" title="spoolingdir"></a>spoolingdir</h1><p>接下来spooldir的采集文件夹下的文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = spooldir</span><br><span class="line"><span class="attr">a1.sources.r1.spoolDir</span> = 数据文件夹</span><br><span class="line"><span class="attr">a1.sources.r1.fileHeader</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>然后执行 <code>flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file /home/hadoop/data/flumeexample.txt -Dflume.root.logger=info,console --name a1</code></p>
<p>被采集过的文件会被打上标记，会重命名文件命名为xxx.completed</p>
<p>然后就不会再次采集到这个文件，哪怕是关闭之后重新启动</p>
<p>而且往已经采集的文件下再次加入文件内容的时候，flume会被重新启动，且不能采集到新加的内容，而且文件名字不可以重复，如果重复，flume会挂掉，生产上不怎么使用</p>
<h1 id="taildir"><a href="#taildir" class="headerlink" title="taildir"></a>taildir</h1><p>接下来是taildir ：既可以采集文件夹，也可以采集单个文件，且有断点续传的作用</p>
<p>但是它并不能运行在windows上</p>
<p>编写agent</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = TAILDIR</span><br><span class="line"><span class="attr">a1.sources.r1.positionFile</span> = /home/hadoop/data/flumepostion/taildir_position.json</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups</span> = f1 f2</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f1</span> = /home/hadoop/data/try.txt</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f1.headerKey1</span> = value1</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f2</span> = /home/hadoop/data/flumetestdata/.*.log</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f2.headerKey1</span> = value2</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f2.headerKey2</span> = value2-<span class="number">2</span></span><br><span class="line"><span class="attr">a1.sources.r1.fileHeader</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">a1.sources.ri.maxBatchCount</span> = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>然后运行 <code>flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file /home/hadoop/data/flumeexample.txt -Dflume.root.logger=info,console --name a1</code></p>
<p>它可以实时性的采集数据，是生产上重点，一般都用它，在flume里模糊匹配的语法要加个点在可以</p>
<p>断点续传的文件，a1.sources.r1.positionFile &#x3D; &#x2F;var&#x2F;log&#x2F;flume&#x2F;taildir_position.json</p>
<p>可以自己定义，或者是默认，默认是在~&#x2F;.flume&#x2F;taildir_position.json</p>
<h1 id="Sink-：hdfs"><a href="#Sink-：hdfs" class="headerlink" title="Sink ：hdfs"></a>Sink ：hdfs</h1><p>指定到hdfs上</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = TAILDIR</span><br><span class="line"><span class="attr">a1.sources.r1.positionFile</span> = /home/hadoop/data/flumepostion/taildir_position.json</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups</span> = f1 f2</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f1</span> = /home/hadoop/data/try.txt</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f1.headerKey1</span> = value1</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f2</span> = /home/hadoop/data/flumetestdata/.*.log</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f2.headerKey1</span> = value2</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f2.headerKey2</span> = value2-<span class="number">2</span></span><br><span class="line"><span class="attr">a1.sources.r1.fileHeader</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">a1.sources.ri.maxBatchCount</span> = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = hdfs</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.path</span> = hdfs://bigdata3:<span class="number">9000</span>/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>flume存储的数据才hdfs山观察看不了，因为其默认的数据格式不对</p>
<p>更改</p>
<ul>
<li>hdfs.filetype DataStream</li>
<li>hdfs.writeFormat : Text</li>
</ul>
<p>如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = TAILDIR</span><br><span class="line"><span class="attr">a1.sources.r1.positionFile</span> = /home/hadoop/data/flumepostion/taildir_position.json</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups</span> = f1 f2</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f1</span> = /home/hadoop/data/try.txt</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f1.headerKey1</span> = value1</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f2</span> = /home/hadoop/data/flumetestdata/.*.log</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f2.headerKey1</span> = value2</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f2.headerKey2</span> = value2-<span class="number">2</span></span><br><span class="line"><span class="attr">a1.sources.r1.fileHeader</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">a1.sources.ri.maxBatchCount</span> = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = hdfs</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.path</span> = hdfs://bigdata3:<span class="number">9000</span>/flume/events/%Y-%m-%d</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.fileType</span> = DataStream</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.writeFormat</span> = Text</span><br><span class="line"><span class="comment"># 控制小文件的参数</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.rollSize</span> = <span class="number">134217728</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.rollInterval</span> = <span class="number">21600</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.rollCount</span> = <span class="number">1000</span></span><br><span class="line"><span class="comment"># 控制大文件的滚动</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.round</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.roundUnit</span> = minute</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.batchSize</span> = <span class="number">1200</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.roundValue</span> = <span class="number">21</span></span><br><span class="line"><span class="comment"># 修改文件前缀和后缀</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.filePrefix</span> = events</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.fileSuffix</span> = .log</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.useLocalTimeStamp</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">5000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>执行 ：<code>flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file /home/hadoop/data/flumeexample.txt -Dflume.root.logger=info,console --name a1</code></p>
<p>采集的时候要注意：</p>
<p>因为采集数据会造成小文件问题就是当flume在采集的时候，如果文件一直发生变化的时候，flume可能会造成有多个小文件</p>
<p>可以通过增加参数进行设置</p>
<ul>
<li>按照条数进行滚动：就是生成下一个文件</li>
<li>按照时间进行滚动：就是生成下一个文件</li>
<li>hdfs.round &#x3D;&gt; 文件滚动的开关</li>
<li>hdfs.batchSize &#x3D;&gt; 按照条目数滚动，一般不会用</li>
<li>hdfs.roundUnit &#x3D;&gt; 按照时间滚动</li>
<li>hdfs.roundValue &#x3D;&gt; 时间滚动的具体值</li>
<li>文件进行滚动，是针对文件来说的，计算说当一个滚动的时候其余的文件滚动会重置</li>
</ul>
<h3 id="上面的对小文件的时候不好用，下面是一定好用的"><a href="#上面的对小文件的时候不好用，下面是一定好用的" class="headerlink" title="上面的对小文件的时候不好用，下面是一定好用的"></a>上面的对小文件的时候不好用，下面是一定好用的</h3><ul>
<li>hdfs.rollSize &#x3D;&gt; 按照大小进行滚动 默认是字节</li>
<li>hdfs.rollInterval &#x3D;&gt;按照时间进行滚动，秒为单位</li>
<li>hdfs.rollCount &#x3D;&gt; 文件里存的数据条数进行滚动</li>
</ul>
<h3 id="更改文件前缀和后缀"><a href="#更改文件前缀和后缀" class="headerlink" title="更改文件前缀和后缀"></a>更改文件前缀和后缀</h3><ul>
<li>hdfs.filePrefix : 文件前缀</li>
<li>hdfs.fileSuffix ：文件后缀</li>
<li>可以在path后面的问价夹地方放上时间戳</li>
<li>然后文件夹会自动生成 <code>a1.sinks.k1.hdfs.path = /flume/events/%Y-%m-%d/%H%M/%S </code></li>
<li><code>文件夹如下 ：/flume/events/2012-06-12/1150/00 </code></li>
<li>进行上述更改之后，我们要再次添加上 <code>hdfs.useLocalTimeStamp = true</code></li>
<li>这样之后相当于数据分组是用机器的时间，而不是数据本身的时间</li>
</ul>
<h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><ul>
<li>由两部分组成</li>
<li>headers ： 描述信息 ，但是一般的时候，这个里面是空的 ， 如果path设置成上述的靠时间戳，则这里不能为空，或者用本地时间代替</li>
<li>body ： 实实在在的数据 ：8进制的ASCII码值</li>
</ul>
<h3 id="业界问题"><a href="#业界问题" class="headerlink" title="业界问题"></a>业界问题</h3><ul>
<li>数据延迟的问题，对于数据假如在，23.58分采集，而flume有延迟，两分钟后才同步过来，就会出现数据本身的时间（采集时间）和本机local时间不一样，然后会影响到hdfs上文件夹的目录的存储</li>
<li>解决方法  ： log -》 flume -》 hive</li>
<li>定义udf ：函数 ： 保证正确的数据重新落盘到正确的分区 ： 数据清理</li>
<li>从flume 源头解决： 用文件创建的时间，就是在header里设置时间<ul>
<li>要二次开发才可以解决</li>
</ul>
</li>
</ul>
<h2 id="同步到hive中"><a href="#同步到hive中" class="headerlink" title="同步到hive中"></a>同步到hive中</h2><p>我们可以通过同步到hdfs中然后同步到ihive上，因为hive的数据在hdfs上</p>
<h3 id="普通表："><a href="#普通表：" class="headerlink" title="普通表："></a>普通表：</h3><p>对于普通表我们之间把文件放到hive的存储路径下，只要分隔符对，就可以了</p>
<h3 id="分区表："><a href="#分区表：" class="headerlink" title="分区表："></a>分区表：</h3><p>对于已经有的分区，之间把数据往分区文件夹里存储就好</p>
<p>对于没有的分区，把数据按照文件夹传输上去之后，我们还要在hive的源数据库里添加分区</p>
<p>通过：<code>alter table emp_partition add partition(deptno=10);</code></p>
<p>然后建完分区，它就会显示数据了</p>
<h1 id="Sink-hive"><a href="#Sink-hive" class="headerlink" title="Sink:hive"></a>Sink:hive</h1><p>以下是官方提供的hive的flume参数</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = hive // 类型</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1 </span><br><span class="line"><span class="attr">a1.sinks.k1.hive.metastore</span> = thrift://bigdata3:<span class="number">9083</span> //元数据库</span><br><span class="line"><span class="attr">a1.sinks.k1.hive.database</span> = logsdb 数据库</span><br><span class="line"><span class="attr">a1.sinks.k1.hive.table</span> = weblogs 表</span><br><span class="line"><span class="attr">a1.sinks.k1.hive.partition</span> = asia,%&#123;country&#125;,%Y-%m-%d-%H-%M 分区字段</span><br><span class="line"><span class="attr">a1.sinks.k1.useLocalTimeStamp</span> = <span class="literal">false</span> 是不是使用本地时间戳</span><br><span class="line"><span class="attr">a1.sinks.k1.round</span> = <span class="literal">true</span> </span><br><span class="line"><span class="attr">a1.sinks.k1.roundValue</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">a1.sinks.k1.roundUnit</span> = minute </span><br><span class="line"><span class="attr">a1.sinks.k1.serializer</span> = DELIMITED   负责解析事件中的字段并将它们映射到hive表中的列 </span><br><span class="line"><span class="attr">a1.sinks.k1.serializer.delimiter</span> = <span class="string">&quot;\t&quot;</span> 传入数据的分隔符（每个字段之间的）</span><br><span class="line"><span class="attr">a1.sinks.k1.serializer.serdeSeparator</span> = <span class="string">&#x27;\t&#x27;</span> 输出字段分隔符,单引号括起来，例如<span class="string">&#x27;\t&#x27;</span></span><br><span class="line"><span class="attr">a1.sinks.k1.serializer.fieldnames</span> =id,,msg 参数名字（表的）</span><br></pre></td></tr></table></figure>

<p>然后我们自己写一个</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = TAILDIR</span><br><span class="line"><span class="attr">a1.sources.r1.positionFile</span> = /home/hadoop/data/flumepostion/taildir_position.json</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups</span> = f1</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f1</span> = /home/hadoop/data/emp_202211301118.csv</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f1.headerKey1</span> = value1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = hive</span><br><span class="line"><span class="attr">a1.sinks.k1.serializer</span> = DELIMITED</span><br><span class="line"><span class="attr">a1.sinks.k1.hive.metastore</span> = thrift://bigdata3:<span class="number">9083</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hive.database</span> = bigdata_hive3</span><br><span class="line"><span class="attr">a1.sinks.k1.hive.table</span> = emp22</span><br><span class="line"><span class="attr">a1.sinks.k1.serializer.delimiter</span> = <span class="string">&quot;,&quot;</span></span><br><span class="line"><span class="attr">a1.sinks.k1.serializer.serdeSeparator</span> = <span class="string">&#x27;,&#x27;</span></span><br><span class="line"><span class="attr">a1.sinks.k1.serializer.fieldnames</span> =emp<span class="literal">no</span>,ename,job,mgr,hiredate,sal,comm,dept<span class="literal">no</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>按照上述操作之后会报错，原因 ： 缺少依赖包</p>
<p>报错信息如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">13</span> <span class="number">11</span>:<span class="number">19</span>:<span class="number">42</span>,<span class="number">806</span> (conf-file-poller-<span class="number">0</span>) <span class="selector-attr">[ERROR - org.apache.flume.node.PollingPropertiesFileConfigurationProvider$FileWatcherRunnable.run(PollingPropertiesFileConfigurationProvider.java:150)]</span> Failed to start agent because dependencies were not found <span class="keyword">in</span> classpath. Error follows.</span><br><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.NoClassDefFoundError</span>: org/apache/hive/hcatalog/streaming/RecordWriter</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.createSerializer</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">220</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.configure</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">203</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.conf</span><span class="selector-class">.Configurables</span><span class="selector-class">.configure</span>(Configurables<span class="selector-class">.java</span>:<span class="number">41</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.node</span><span class="selector-class">.AbstractConfigurationProvider</span><span class="selector-class">.loadSinks</span>(AbstractConfigurationProvider<span class="selector-class">.java</span>:<span class="number">453</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.node</span><span class="selector-class">.AbstractConfigurationProvider</span><span class="selector-class">.getConfiguration</span>(AbstractConfigurationProvider<span class="selector-class">.java</span>:<span class="number">106</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.node</span>.PollingPropertiesFileConfigurationProvider<span class="variable">$FileWatcherRunnable</span><span class="selector-class">.run</span>(PollingPropertiesFileConfigurationProvider<span class="selector-class">.java</span>:<span class="number">145</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span>.Executors<span class="variable">$RunnableAdapter</span><span class="selector-class">.call</span>(Executors<span class="selector-class">.java</span>:<span class="number">511</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.FutureTask</span><span class="selector-class">.runAndReset</span>(FutureTask<span class="selector-class">.java</span>:<span class="number">308</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span>.ScheduledThreadPoolExecutor<span class="variable">$ScheduledFutureTask</span>.access$<span class="number">301</span>(ScheduledThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">180</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span>.ScheduledThreadPoolExecutor<span class="variable">$ScheduledFutureTask</span><span class="selector-class">.run</span>(ScheduledThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">294</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.ThreadPoolExecutor</span><span class="selector-class">.runWorker</span>(ThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">1142</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span>.ThreadPoolExecutor<span class="variable">$Worker</span><span class="selector-class">.run</span>(ThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">617</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">745</span>)</span><br><span class="line">Caused by: java<span class="selector-class">.lang</span><span class="selector-class">.ClassNotFoundException</span>: org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.RecordWriter</span></span><br><span class="line">	at java<span class="selector-class">.net</span><span class="selector-class">.URLClassLoader</span><span class="selector-class">.findClass</span>(URLClassLoader<span class="selector-class">.java</span>:<span class="number">381</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.ClassLoader</span><span class="selector-class">.loadClass</span>(ClassLoader<span class="selector-class">.java</span>:<span class="number">424</span>)</span><br><span class="line">	at sun<span class="selector-class">.misc</span>.Launcher<span class="variable">$AppClassLoader</span><span class="selector-class">.loadClass</span>(Launcher<span class="selector-class">.java</span>:<span class="number">331</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.ClassLoader</span><span class="selector-class">.loadClass</span>(ClassLoader<span class="selector-class">.java</span>:<span class="number">357</span>)</span><br><span class="line">	... <span class="number">13</span> more</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>而且其中的metastore要进行启动</p>
<h3 id="启动metastore"><a href="#启动metastore" class="headerlink" title="启动metastore"></a>启动metastore</h3><p><code>hive --service metastore</code></p>
<p>然后才能进去</p>
<p>上述错误是因为我们缺少依赖造成的是 <code>hive-hcatalog-streaming.jar</code></p>
<p>我们可以通过idea的maven项目进行下载</p>
<p>下载之后导入到我们的flume&#x2F;lib目录下，就可以运行了</p>
<p>然后还可能遇见以下的问题：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">22</span>/<span class="number">03</span>/<span class="number">24</span> <span class="number">11</span>:<span class="number">09</span>:<span class="number">26</span> WARN hive<span class="selector-class">.HiveSink</span>: k2 : Failed connecting to EndPoint &#123;metaStoreUri=<span class="string">&#x27;thrift://cdh-1:9083&#x27;</span>, database=<span class="string">&#x27;ods&#x27;</span>, table=<span class="string">&#x27;ods_flume_log&#x27;</span>, partitionVals=<span class="selector-attr">[20220324]</span> &#125;</span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span>.HiveWriter<span class="variable">$ConnectException</span>: Failed connecting to EndPoint &#123;metaStoreUri=<span class="string">&#x27;thrift://cdh-1:9083&#x27;</span>, database=<span class="string">&#x27;ods&#x27;</span>, table=<span class="string">&#x27;ods_flume_log&#x27;</span>, partitionVals=<span class="selector-attr">[20220324]</span> &#125;</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveWriter</span>.&lt;init&gt;(HiveWriter<span class="selector-class">.java</span>:<span class="number">99</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.getOrCreateWriter</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">346</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.drainOneBatch</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">297</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.process</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">254</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.DefaultSinkProcessor</span><span class="selector-class">.process</span>(DefaultSinkProcessor<span class="selector-class">.java</span>:<span class="number">67</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span>.SinkRunner<span class="variable">$PollingRunner</span><span class="selector-class">.run</span>(SinkRunner<span class="selector-class">.java</span>:<span class="number">145</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">748</span>)</span><br><span class="line">Caused by: org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.StreamingException</span>: Cannot stream to <span class="selector-tag">table</span> that has not been bucketed : &#123;metaStoreUri=<span class="string">&#x27;thrift://cdh-1:9083&#x27;</span>, database=<span class="string">&#x27;ods&#x27;</span>, table=<span class="string">&#x27;ods_flume_log&#x27;</span>, partitionVals=<span class="selector-attr">[20220324]</span> &#125;</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.AbstractRecordWriter</span>.&lt;init&gt;(AbstractRecordWriter<span class="selector-class">.java</span>:<span class="number">69</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.DelimitedInputWriter</span>.&lt;init&gt;(DelimitedInputWriter<span class="selector-class">.java</span>:<span class="number">115</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveDelimitedTextSerializer</span><span class="selector-class">.createRecordWriter</span>(HiveDelimitedTextSerializer<span class="selector-class">.java</span>:<span class="number">66</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveWriter</span>.&lt;init&gt;(HiveWriter<span class="selector-class">.java</span>:<span class="number">89</span>)</span><br><span class="line">	... <span class="number">6</span> more</span><br><span class="line"><span class="number">22</span>/<span class="number">03</span>/<span class="number">24</span> <span class="number">11</span>:<span class="number">09</span>:<span class="number">26</span> ERROR flume<span class="selector-class">.SinkRunner</span>: Unable to deliver event. Exception follows.</span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.EventDeliveryException</span>: org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span>.HiveWriter<span class="variable">$ConnectException</span>: Failed connecting to EndPoint &#123;metaStoreUri=<span class="string">&#x27;thrift://cdh-1:9083&#x27;</span>, database=<span class="string">&#x27;ods&#x27;</span>, table=<span class="string">&#x27;ods_flume_log&#x27;</span>, partitionVals=<span class="selector-attr">[20220324]</span> &#125;</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.process</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">269</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.DefaultSinkProcessor</span><span class="selector-class">.process</span>(DefaultSinkProcessor<span class="selector-class">.java</span>:<span class="number">67</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span>.SinkRunner<span class="variable">$PollingRunner</span><span class="selector-class">.run</span>(SinkRunner<span class="selector-class">.java</span>:<span class="number">145</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">748</span>)</span><br><span class="line">Caused by: org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span>.HiveWriter<span class="variable">$ConnectException</span>: Failed connecting to EndPoint &#123;metaStoreUri=<span class="string">&#x27;thrift://cdh-1:9083&#x27;</span>, database=<span class="string">&#x27;ods&#x27;</span>, table=<span class="string">&#x27;ods_flume_log&#x27;</span>, partitionVals=<span class="selector-attr">[20220324]</span> &#125;</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveWriter</span>.&lt;init&gt;(HiveWriter<span class="selector-class">.java</span>:<span class="number">99</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.getOrCreateWriter</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">346</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.drainOneBatch</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">297</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.process</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">254</span>)</span><br><span class="line">	... <span class="number">3</span> more</span><br><span class="line">Caused by: org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.StreamingException</span>: Cannot stream to <span class="selector-tag">table</span> that has not been bucketed : &#123;metaStoreUri=<span class="string">&#x27;thrift://cdh-1:9083&#x27;</span>, database=<span class="string">&#x27;ods&#x27;</span>, table=<span class="string">&#x27;ods_flume_log&#x27;</span>, partitionVals=<span class="selector-attr">[20220324]</span> &#125;</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.AbstractRecordWriter</span>.&lt;init&gt;(AbstractRecordWriter<span class="selector-class">.java</span>:<span class="number">69</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.DelimitedInputWriter</span>.&lt;init&gt;(DelimitedInputWriter<span class="selector-class">.java</span>:<span class="number">115</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveDelimitedTextSerializer</span><span class="selector-class">.createRecordWriter</span>(HiveDelimitedTextSerializer<span class="selector-class">.java</span>:<span class="number">66</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveWriter</span>.&lt;init&gt;(HiveWriter<span class="selector-class">.java</span>:<span class="number">89</span>)</span><br><span class="line">	... <span class="number">6</span> more</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个是因为Flume写入hive表时，需要hive表支持事务，所以hive表必须是事务表</p>
<h3 id="开启事务表"><a href="#开启事务表" class="headerlink" title="开启事务表"></a>开启事务表</h3><p>在hive命令行运行以下命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">SET</span> hive.support.concurrency = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">SET</span> hive.enforce.bucketing = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">SET</span> hive.exec.dynamic.partition.mode = nonstrict;</span><br><span class="line"><span class="built_in">SET</span> hive.txn.manager = org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;</span><br><span class="line"><span class="built_in">SET</span> hive.compactor.initiator.on = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">SET</span> hive.compactor.worker.threads = 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建分区分桶表并开启事务</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ods_flume_log(<span class="type">line</span> string) </span><br><span class="line">partitioned <span class="keyword">by</span> (dt string) </span><br><span class="line">clustered <span class="keyword">by</span> (<span class="type">line</span>) <span class="keyword">into</span> <span class="number">1</span> buckets </span><br><span class="line">stored <span class="keyword">as</span> orc tblproperties (<span class="string">&#x27;transactional&#x27;</span>=<span class="string">&#x27;true&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">partitioned <span class="keyword">by</span> (dt string) - 指定分区字段</span><br><span class="line">clustered <span class="keyword">by</span> (<span class="type">line</span>) – 指定分桶的字段</span><br><span class="line">stored <span class="keyword">as</span> orc - 分桶格式orc</span><br><span class="line">tblproperties (‘transactional’=‘<span class="keyword">true</span>’) - tblproperties可以添加一些hive属性，这里是开启事务</span><br><span class="line"></span><br><span class="line">我这里只有一个字段，因为按时间分区了，所以只设置了一个桶，各位看自己情况创建。</span><br><span class="line"></span><br><span class="line">再次运行Flume后，数据正常写入hive中</span><br></pre></td></tr></table></figure>

<h3 id="我们要不要使用双层flume-：-不要"><a href="#我们要不要使用双层flume-：-不要" class="headerlink" title="我们要不要使用双层flume ： 不要"></a>我们要不要使用双层flume ： 不要</h3><h3 id="avro"><a href="#avro" class="headerlink" title="avro"></a>avro</h3><p>使用场景 ： 第一个agent的输出作为第二个的输入</p>
<p>需求 ：读取1111端口的数据并发送到2222端口，然后把数据写入hdfs</p>
<p>分析 ： 两层flume</p>
<p>agent ：</p>
<ul>
<li>nc-mem-avro</li>
<li>avro-mem-hdfs&#x2F;logger</li>
</ul>
<p>agent1：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">a1<span class="selector-class">.sources</span> = r1</span><br><span class="line">a1<span class="selector-class">.sinks</span> = k1</span><br><span class="line">a1<span class="selector-class">.channels</span> = c1</span><br><span class="line"></span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.type</span> = netcat</span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.bind</span> = localhost</span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.port</span> = <span class="number">1111</span></span><br><span class="line"></span><br><span class="line">a1<span class="selector-class">.channels</span><span class="selector-class">.c1</span><span class="selector-class">.type</span> = memory</span><br><span class="line"></span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span><span class="selector-class">.type</span> = avro</span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span>.hostname=bigdata32</span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span>.port=<span class="number">2222</span></span><br><span class="line"></span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.channels</span> = c1</span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span><span class="selector-class">.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>agent2:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">a1<span class="selector-class">.sources</span> = r1</span><br><span class="line">a1<span class="selector-class">.sinks</span> = k1</span><br><span class="line">a1<span class="selector-class">.channels</span> = c1</span><br><span class="line"></span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.type</span> = avro</span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.bind</span> = bigdata32</span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.port</span> = <span class="number">2222</span></span><br><span class="line">a1<span class="selector-class">.channels</span><span class="selector-class">.c1</span><span class="selector-class">.type</span> = memory</span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span><span class="selector-class">.type</span> = logger</span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.channels</span> = c1</span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span><span class="selector-class">.channel</span> = c1</span><br></pre></td></tr></table></figure>

<h1 id="编写脚本："><a href="#编写脚本：" class="headerlink" title="编写脚本："></a>编写脚本：</h1><p>关于上述的文件每次更改都要进行一次的编写，为避免有些太麻烦了</p>
<p>于是我们可以通过编写shell脚本的方式进行编写</p>
<p>如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ $# -lt 3 ];then</span><br><span class="line">echo &quot;使用教程，把taildir的position路径改成自己的，还有hdfs的机器名改成自己的，以及hive的机器名&quot;</span><br><span class="line">echo &quot;error more fouth was need&quot;</span><br><span class="line">echo &quot;Source channel Slink&quot;</span><br><span class="line">echo  &quot;第一个变量以及第二个变量分别是有几个channel和几个Sink flagSink=1 flagChannel=2 第三个参数是Source然后是其内部配置，然后是channel，以此类推，下面分别介绍各种配置参数&quot;</span><br><span class="line">echo &quot;source : exec sqoo avro taildir netcat&quot;</span><br><span class="line">echo &quot;taildir 选择模式:1是文件模式，2是文件夹模式，3是一起的 本地文件或者文件夹路径，最多支持一个文件以及一个文件夹，用，分割  具体的文件夹/文件路径 是不是开启阻断1是开启，其他是不开启 选择channel&quot;</span><br><span class="line">echo &quot;exec/spoo 文件/文件夹 是不是开启阻断 选择channel&quot;</span><br><span class="line">echo &quot;netcat/avro 主机ip 端口 是不是开启阻断 选择channel&quot;</span><br><span class="line">echo &quot;阻断： type key value&quot;</span><br><span class="line">echo &quot;Channel : mem file&quot;</span><br><span class="line">echo &quot;mem 容量 事务容量 选择Sink&quot;</span><br><span class="line">echo &quot;file point文件夹 data文件夹 选择Sink&quot;</span><br><span class="line">echo &quot;Sink : hdfs hive avro logger&quot;</span><br><span class="line">echo &quot;hdfs hdfs上的路经 文件前缀 文件后缀 要不要打开压缩1是开启，其他是不开启 设置压缩格式（开启之后）&quot;</span><br><span class="line">echo &quot;hive hive数据库 hive表 差分文件的分隔符 输入表的分隔符 字段的映射&quot;</span><br><span class="line">echo &quot;avro 主机ip 端口&quot;</span><br><span class="line">echo &quot;logger&quot;</span><br><span class="line">echo &quot;文件命名采用随机数的方式+变量组合的方式&quot;</span><br><span class="line">echo  &quot;多通道例子   2 2 failover replicating 15000 10 6 taildir 1 &#x27;/home/hadoop/data/1.log&#x27; 1 static 1-boy boy mem 10000 10000 file /home/hadoop/data/flumepostion/ /home/hadoop/data/flumedata/ logger avro localhost 1111 0&quot;</span><br><span class="line">echo &quot;单通道 1 1 avro localhost 1111 0 file /home/hadoop/data/flumepostion/ /home/hadoop/data/flumedata/ logger 0&quot;</span><br><span class="line">echo &quot;最后一个参数是控制是不是开启http监控的监控端口是5555 1是开启监控 其他是不开启&quot;</span><br><span class="line">exit 1;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">filename=$(($RANDOM%9999+6))-$1-$2-$3</span><br><span class="line"></span><br><span class="line">echo &quot;a1.sources = r1 &quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line"></span><br><span class="line">Sinkhead=&quot;a1.sinks = &quot;</span><br><span class="line">Sinklist=&quot;&quot;</span><br><span class="line">flagSink=$1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function Sinkgt1()&#123;</span><br><span class="line">if [ $&#123;flagSink&#125; -ne 1 ];then</span><br><span class="line">for ((i=1;i&lt;=$&#123;flagSink&#125;;i++))</span><br><span class="line">do</span><br><span class="line">    Sinklist=$&#123;Sinklist&#125;k$i&quot; &quot;</span><br><span class="line">done</span><br><span class="line">echo $&#123;Sinkhead&#125;$&#123;Sinklist&#125; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sinkgroups = g1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sinkgroups.g1.sinks = &quot;$&#123;Sinklist&#125; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sinkgroups.g1.processor.type = $1&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">Channelgt1 $&#123;@:2&#125;</span><br><span class="line">else </span><br><span class="line">echo &quot;a1.sinks = k1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">Channelgt1 $&#123;@:1&#125;</span><br><span class="line">fi </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Channelhead=&quot;a1.channels = &quot;</span><br><span class="line">Channelist=&quot;&quot;</span><br><span class="line">flagChannel=$2</span><br><span class="line">SinkChannelHead=&quot;a1.sources.r1.channels = &quot;</span><br><span class="line"></span><br><span class="line">function Channelgt1()&#123;</span><br><span class="line">if [ $&#123;flagChannel&#125; -ne 1 ];then</span><br><span class="line">for ((i=1;i&lt;=$&#123;flagChannel&#125;;i++))</span><br><span class="line">do</span><br><span class="line">    Channelist=$&#123;Channelist&#125;c$i&quot; &quot;</span><br><span class="line">done</span><br><span class="line">echo $&#123;Channelhead&#125;$&#123;Channelist&#125; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo $&#123;SinkChannelHead&#125;$&#123;Channelist&#125; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sources.r1.selector.type = $1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">panduan $&#123;@:2&#125;</span><br><span class="line">else </span><br><span class="line">echo &quot;a1.channels = c1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sources.r1.channels = c1&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">panduan $&#123;@:1&#125;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function Fileordir()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    case $1 in</span><br><span class="line">    1)</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups = f1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups.f1 = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.headers.f1.headerKey1 = value1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.fileHeader = true&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.ri.maxBatchCount = 1000&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        case $3 in</span><br><span class="line">        1)</span><br><span class="line">        interceptors $&#123;@:4&#125;</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        selectchinnal $&#123;@:4&#125;</span><br><span class="line">        ;;</span><br><span class="line">        esac</span><br><span class="line">    ;;</span><br><span class="line">    2)</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups = f2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups.f2 = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.headers.f2.headerKey1 = value2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.headers.f2.headerKey2 = value2-2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.fileHeader = true&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.ri.maxBatchCount = 1000&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        case $3 in</span><br><span class="line">        1)</span><br><span class="line">        interceptors $&#123;@:4&#125;</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        selectchinnal $&#123;@:4&#125;</span><br><span class="line">        ;;</span><br><span class="line">        esac</span><br><span class="line">    ;;</span><br><span class="line">    3)</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups = f1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups.f1 = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.headers.f1.headerKey1 = value1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups = f2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups.f2 = $3&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.headers.f2.headerKey1 = value2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.headers.f2.headerKey2 = value2-2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.fileHeader = true&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.ri.maxBatchCount = 1000&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        case $4 in</span><br><span class="line">        1)</span><br><span class="line">        interceptors $&#123;@:5&#125;</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        selectchinnal $&#123;@:5&#125;</span><br><span class="line">        ;;</span><br><span class="line">        esac</span><br><span class="line">    ;; </span><br><span class="line">    esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function interceptors()&#123;</span><br><span class="line"></span><br><span class="line">echo &quot;a1.sources.r1.interceptors = example&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sources.r1.interceptors.example.type = $1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sources.r1.interceptors.example.key = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sources.r1.interceptors.example.value = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">selectchinnal $&#123;@:4&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flagChannellins=$&#123;flagChannel&#125;</span><br><span class="line">function selectchinnal() </span><br><span class="line">&#123;</span><br><span class="line">case $1 in</span><br><span class="line">    &quot;mem&quot;)</span><br><span class="line">        echo &quot;a1.channels.c$&#123;flagChannellins&#125;.type = memory&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.channels.c$&#123;flagChannellins&#125;.capacity = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.channels.c$&#123;flagChannellins&#125;.transactionCapacity = $3&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        flagChannellins=$(($&#123;flagChannellins&#125;-1))</span><br><span class="line">        if [ $&#123;flagChannellins&#125; == 0 ];then</span><br><span class="line">        selectSinks $&#123;@:4&#125;</span><br><span class="line">        else</span><br><span class="line">        selectchinnal $&#123;@:4&#125;</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">    &quot;file&quot;)</span><br><span class="line">        echo &quot;a1.channels.c$&#123;flagChannellins&#125;.type = file&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.channels.c$&#123;flagChannellins&#125;.checkpointDir = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.channels.c$&#123;flagChannellins&#125;.dataDirs = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        flagChannellins=$(($&#123;flagChannellins&#125;-1))</span><br><span class="line">        if [ $&#123;flagChannellins&#125; == 0 ];then</span><br><span class="line">        selectSinks $&#123;@:4&#125;</span><br><span class="line">        else</span><br><span class="line">        selectchinnal $&#123;@:4&#125;</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">        echo &quot;无匹配的channel&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flagSinklins=$&#123;flagSink&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function selectSinks()</span><br><span class="line">&#123;</span><br><span class="line">        case $1 in</span><br><span class="line">            &quot;logger&quot;)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.type = logger&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlins</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:2&#125;</span><br><span class="line">                fi</span><br><span class="line"></span><br><span class="line">            ;;</span><br><span class="line">            &quot;hdfs&quot;)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.type = hdfs&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.path = hdfs://bigdata3:9000$2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.filePrefix = $3&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.fileSuffix = $4&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.writeFormat = Text&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.rollSize = 134217728&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.rollInterval = 21600&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.rollCount = 1000&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.round = true&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.roundUnit = minute&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.batchSize = 1200&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.roundValue = 21&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.useLocalTimeStamp = true&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                case $5 in </span><br><span class="line">                1)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.codeC = $6&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.fileType = CompressedStream&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlins $&#123;@:7&#125;</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:7&#125;</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">                *)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.fileType = DataStream&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlins $&#123;@:6&#125;</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:6&#125;</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">                esac</span><br><span class="line">            ;;</span><br><span class="line">            &quot;avro&quot;)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.type = avro &quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hostname=$2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.port=$3&quot;  &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlins $&#123;@:4&#125;</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:4&#125;</span><br><span class="line">                fi</span><br><span class="line">            ;;</span><br><span class="line">            &quot;hive&quot;)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.type = hive&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.serializer = DELIMITED&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hive.metastore = thrift://bigdata3:9083&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hive.database =$2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hive.table = $3&quot;  &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.serializer.delimiter = $4&quot;  &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.serializer.serdeSeparator = $5&quot;  &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.serializer.fieldnames =  $6&quot;  &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlinshive $&#123;@:7&#125;</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:7&#125;</span><br><span class="line">                fi</span><br><span class="line">            ;;</span><br><span class="line">            *)</span><br><span class="line">                echo &quot;无匹配的Sink&quot;</span><br><span class="line">                exit 1</span><br><span class="line">            ;;</span><br><span class="line">        esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function codeC()&#123;</span><br><span class="line">    case $5 in </span><br><span class="line">                1)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.codeC = $6&quot;</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlins</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:7&#125;</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">                *)</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlins</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:6&#125;</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">                esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function cleanlins()</span><br><span class="line">&#123;</span><br><span class="line">cat ./$&#123;filename&#125;</span><br><span class="line">case $1 in</span><br><span class="line">1)</span><br><span class="line">flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file ./$&#123;filename&#125; -Dflume.root.logger=info,console --name a1 -Dflume.monitoring.type=http -Dflume.monitoring.port=5555</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file ./$&#123;filename&#125; -Dflume.root.logger=info,console --name a1</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">rm -rf ./$&#123;filename&#125;</span><br><span class="line">exit 99</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cleanlinshive()&#123;</span><br><span class="line">cat ./$&#123;filename&#125;</span><br><span class="line">nohup hive --service metastore &gt; ~/log/metastore.log 1&gt;&amp;2 &amp;</span><br><span class="line">case $1 in</span><br><span class="line">1)</span><br><span class="line">flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file ./$&#123;filename&#125; -Dflume.root.logger=info,console --name a1 -Dflume.monitoring.type=http -Dflume.monitoring.port=5555</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file ./$&#123;filename&#125; -Dflume.root.logger=info,console --name a1</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">rm -rf ./$&#123;filename&#125;</span><br><span class="line">exit 100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function choicein()&#123;</span><br><span class="line">        case $1 in</span><br><span class="line">        1)</span><br><span class="line">        interceptors $&#123;@:2&#125;</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        selectchinnal $&#123;@:2&#125;</span><br><span class="line">        ;;</span><br><span class="line">        esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function sourcechoice()&#123;</span><br><span class="line">    case $1 in</span><br><span class="line">    &quot;taildir&quot;)</span><br><span class="line">        echo &quot;a1.sources.r1.type = TAILDIR&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.positionFile = /home/hadoop/data/flumepostion/taildir_position.json&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        Fileordir $&#123;@:2&#125;</span><br><span class="line">    ;;</span><br><span class="line">    &quot;exec&quot;)</span><br><span class="line">        echo &quot;a1.sources.r1.type = exec&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.command = tail -F $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        choicein $&#123;@:3&#125;</span><br><span class="line">    ;;</span><br><span class="line">    &quot;spoo&quot;)</span><br><span class="line">        echo &quot;a1.sources.r1.type = spooldir&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.spoolDir = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.fileHeader = true&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        choicein $&#123;@:3&#125;</span><br><span class="line">    ;;</span><br><span class="line">    &quot;avro&quot;)</span><br><span class="line">        echo &quot;a1.sources.r1.type = avro&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.bind = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.port = $3&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        choicein $&#123;@:4&#125;</span><br><span class="line">    ;;</span><br><span class="line">    &quot;netcat&quot;)</span><br><span class="line">        echo &quot;a1.sources.r1.type = netcat&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.bind = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.port = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        choicein $&#123;@:4&#125;</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">        echo &quot;无匹配的source&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function panduan()&#123;</span><br><span class="line">if [ $&#123;flagSink&#125; -ne 1 ] &amp;&amp; [ $&#123;flagChannel&#125; == 1 ];then</span><br><span class="line">for ((i=1;i&lt;=$&#123;flagSink&#125;;i++))</span><br><span class="line">do</span><br><span class="line">echo &quot;a1.sinks.k$&#123;i&#125;.channel = c1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">done</span><br><span class="line">echo &quot;a1.sinkgroups.g1.processor.maxpenalty = $1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">case $&#123;flagSink&#125; in</span><br><span class="line">2)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    sourcechoice $&#123;@:4&#125;</span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:5&#125;</span><br><span class="line">;;</span><br><span class="line">4)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:6&#125;</span><br><span class="line">;;</span><br><span class="line">5)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:7&#125;</span><br><span class="line">;;</span><br><span class="line">6)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k6 = $7&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:8&#125;</span><br><span class="line">;;</span><br><span class="line">7)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k6 = $7&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k7 = $8&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:9&#125;</span><br><span class="line">;;</span><br><span class="line">8)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k6 = $7&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k7 = $8&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k8 = $9&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:10&#125;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;超出限制8个&quot;</span><br><span class="line">exit 10000</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ $&#123;flagSink&#125; == 1 ] &amp;&amp; [ $&#123;flagChannel&#125; -ne 1 ];then</span><br><span class="line">for ((i=1;i&lt;=$&#123;flagChannel&#125;;i++))</span><br><span class="line">do</span><br><span class="line">echo &quot;a1.sinks.k1.channel = c$&#123;i&#125;&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">done</span><br><span class="line">sourcechoice $&#123;@:1&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ $&#123;flagSink&#125; -ne 1 ] &amp;&amp; [ $&#123;flagChannel&#125; -ne 1 ];then</span><br><span class="line">for ((i=1;i&lt;=$&#123;flagSink&#125;;i++))</span><br><span class="line">do</span><br><span class="line">echo &quot;a1.sinks.k$&#123;i&#125;.channel = c$&#123;i&#125;&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">done</span><br><span class="line">echo &quot;a1.sinkgroups.g1.processor.maxpenalty = $1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">case $&#123;flagSink&#125; in</span><br><span class="line">2)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    sourcechoice $&#123;@:4&#125;</span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:5&#125;</span><br><span class="line">;;</span><br><span class="line">4)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:6&#125;</span><br><span class="line">;;</span><br><span class="line">5)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:7&#125;</span><br><span class="line">;;</span><br><span class="line">6)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k6 = $7&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:8&#125;</span><br><span class="line">;;</span><br><span class="line">7)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k6 = $7&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k7 = $8&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:9&#125;</span><br><span class="line">;;</span><br><span class="line">8)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k6 = $7&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k7 = $8&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k8 = $9&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:10&#125;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;超出限制8个&quot;</span><br><span class="line">exit 10000</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ $&#123;flagSink&#125; == 1 ] &amp;&amp; [ $&#123;flagChannel&#125; == 1 ];then</span><br><span class="line">echo &quot;a1.sinks.k1.channel = c1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">sourcechoice $&#123;@:1&#125;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sinkgt1 $&#123;@:3&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="channel-file"><a href="#channel-file" class="headerlink" title="channel:file"></a>channel:file</h1><p>关于Filechannel的例子官方是如下介绍的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a1.channels = c1</span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">a1.channels.c1.checkpointDir = /mnt/flume/checkpoint</span><br><span class="line">a1.channels.c1.dataDirs = /mnt/flume/data</span><br></pre></td></tr></table></figure>

<p>于是我们可以写个简单的agent：taidir-file-logger</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">example.conf: A single-node Flume configuration</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.positionFile = /home/hadoop/data/flumepostion/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = f1</span><br><span class="line">a1.sources.r1.filegroups.f1 = /home/hadoop/data/try.txt</span><br><span class="line">a1.sources.r1.headers.f1.headerKey1 = value1</span><br><span class="line">a1.sources.r1.fileHeader = true</span><br><span class="line">a1.sources.ri.maxBatchCount = 1000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use a channel <span class="built_in">which</span> buffers events <span class="keyword">in</span> memory</span></span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">a1.channels.c1.checkpointDir = /home/hadoop/data/flumefilepostion</span><br><span class="line">a1.channels.c1.dataDirs = /home/hadoop/data/flumedata</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>

<p>就可以了</p>
<p>关于flume的负载问题</p>
<p>我们可以设置Sink的负载就是当是多个数据输出的时候</p>
<p>可以设置负载策略，可以让它变成随机发送，或者是轮询发送等</p>
<p>均衡 ： load_balance ： 将数据分开，提供并行度的功能 减轻sink 的压力 如果突然输出的agent挂掉，数据都会发送到没有挂的Sink的agent上，但是会有个超时时间，才会进行上述所说</p>
<p>需要设置两个参数</p>
<p>容灾 ： sink出现问题的</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">processor<span class="selector-class">.backoff</span>  true </span><br><span class="line">processor<span class="selector-class">.selector</span>.maxTimeOut</span><br></pre></td></tr></table></figure>

<p>设置多个Sink的agent</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">agent1：</span><br><span class="line">agent1.sources = r1</span><br><span class="line">agent1.sinks = k1 k2</span><br><span class="line">agent1.channels = c1</span><br><span class="line"></span><br><span class="line">agent1.sources.r1.type = netcat</span><br><span class="line">agent1.sources.r1.bind = bigdata32</span><br><span class="line">agent1.sources.r1.port = 1111</span><br><span class="line"></span><br><span class="line">agent1.channels.c1.type = memory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 2222</span></span><br><span class="line">agent1.sinks.k1.type = avro</span><br><span class="line">agent1.sinks.k1.hostname = bigdata32</span><br><span class="line">agent1.sinks.k1.port = 2222</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 3333</span></span><br><span class="line">agent1.sinks.k2.type = avro</span><br><span class="line">agent1.sinks.k2.hostname = bigdata32</span><br><span class="line">agent1.sinks.k2.port = 3333</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink processers</span></span><br><span class="line">agent1.sinkgroups = g1</span><br><span class="line">agent1.sinkgroups.g1.sinks = k1 k2</span><br><span class="line">agent1.sinkgroups.g1.processor.type = load_balance</span><br><span class="line">agent1.sinkgroups.g1.processor.backoff = true</span><br><span class="line">agent1.sinkgroups.g1.processor.selector = round_robin</span><br><span class="line"></span><br><span class="line">agent1.sources.r1.channels = c1</span><br><span class="line">agent1.sinks.k1.channel = c1</span><br><span class="line">agent1.sinks.k2.channel = c1</span><br><span class="line"></span><br><span class="line">agent2：2222端口</span><br><span class="line">agent2.sources = r1</span><br><span class="line">agent2.sinks = k1</span><br><span class="line">agent2.channels = c1</span><br><span class="line"></span><br><span class="line">agent2.sources.r1.type = avro</span><br><span class="line">agent2.sources.r1.bind = bigdata32</span><br><span class="line">agent2.sources.r1.port = 2222</span><br><span class="line"></span><br><span class="line">agent2.channels.c1.type = memory</span><br><span class="line">agent2.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">agent2.sources.r1.channels = c1</span><br><span class="line">agent2.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">agent3: 3333端口</span><br><span class="line">agent3.sources = r1</span><br><span class="line">agent3.sinks = k1</span><br><span class="line">agent3.channels = c1</span><br><span class="line"></span><br><span class="line">agent3.sources.r1.type = avro</span><br><span class="line">agent3.sources.r1.bind = bigdata32</span><br><span class="line">agent3.sources.r1.port = 3333</span><br><span class="line"></span><br><span class="line">agent3.channels.c1.type = memory</span><br><span class="line">agent3.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">agent3.sources.r1.channels = c1</span><br><span class="line">agent3.sinks.k1.channel = c1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动我们的agent</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">启动agent： </span><br><span class="line">	从后往前 启动 </span><br><span class="line"></span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent3 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/sink/agent3.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent2 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/sink/agent2.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent1 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/sink/agent1.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line">telnet bigdata32 1111</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后可以设置策略</p>
<p><code>agent1.sinkgroups.g1.processor.selector = round_robin ： 这个是轮询策略，就是一个换一个的</code></p>
<p><code>agent1.sinkgroups.g1.processor.selector = random ： 这个是随机策略的</code></p>
<p>负载，相当于是多几个备用通道，通过不同优先级进行设置通道</p>
<h1 id="Source的组件"><a href="#Source的组件" class="headerlink" title="Source的组件"></a>Source的组件</h1><p>拦截器 ： 数据转换 或者数据清洗的</p>
<p>channel选择器 ：把采集过来的数据发送到那一个channel里面</p>
<h1 id="SInk组件"><a href="#SInk组件" class="headerlink" title="SInk组件"></a>SInk组件</h1><p>Sink组件就是上述的Sink processers ：把采集的数据发送到哪一个sink上</p>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>定义一个agent 端口 1111 采集数据</p>
<p>一个发送到hdfs上</p>
<p>另外一个发送到logger上</p>
<p>架构图就出来了 ：</p>
<p>source -&gt;</p>
<ul>
<li>channel -&gt; sink -&gt;logger</li>
<li>channel -&gt; sink -&gt;hdfs</li>
</ul>
<h2 id="思考如何配置channel选择器"><a href="#思考如何配置channel选择器" class="headerlink" title="思考如何配置channel选择器"></a>思考如何配置channel选择器</h2><p>官网如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1 c2 c3</span><br><span class="line">a1.sources.r1.selector.type = replicating</span><br><span class="line">a1.sources.r1.channels = c1 c2 c3</span><br><span class="line">a1.sources.r1.selector.optional = c3</span><br></pre></td></tr></table></figure>

<p>我们自己写的如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">agent1.sources = r1</span><br><span class="line">agent1.sinks = k1 k2</span><br><span class="line">agent1.channels = c1 c2</span><br><span class="line"></span><br><span class="line">agent1.sources.r1.type = netcat</span><br><span class="line">agent1.sources.r1.bind = bigdata3</span><br><span class="line">agent1.sources.r1.port = 1111</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0 配置<span class="built_in">source</span> channle</span></span><br><span class="line">agent1.sources.r1.selector.type = replicating</span><br><span class="line">agent1.sources.r1.channels = c1 c2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.配置两个channel</span></span><br><span class="line">agent1.channels.c1.type = memory</span><br><span class="line">agent1.channels.c2.type = memory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink hdfs</span></span><br><span class="line">agent1.sinks.k1.type = hdfs</span><br><span class="line">agent1.sinks.k1.hdfs.path = hdfs://bigdata3:9000/flume/channel_selector/</span><br><span class="line">agent1.sinks.k1.hdfs.fileType=DataStream</span><br><span class="line">agent1.sinks.k1.hdfs.writeFormat=Text</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件前后缀</span></span><br><span class="line">agent1.sinks.k1.hdfs.filePrefix=events</span><br><span class="line">agent1.sinks.k1.hdfs.fileSuffix=.log</span><br><span class="line">agent1.sinks.k1.hdfs.useLocalTimeStamp=true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件滚动</span></span><br><span class="line">agent1.sinks.k1.hdfs.rollInterval=60</span><br><span class="line">agent1.sinks.k1.hdfs.rollSize=134217728</span><br><span class="line">agent1.sinks.k1.hdfs.rollCount=1000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink logger</span></span><br><span class="line">agent1.sinks.k2.type = logger</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义 连接</span></span><br><span class="line">agent1.sources.r1.channels = c1 c2</span><br><span class="line">agent1.sinks.k1.channel = c1</span><br><span class="line">agent1.sinks.k2.channel = c2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>作业 ：用三个agent 完成上面的事情</p>
<p>代码如下 ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = bigdata3</span><br><span class="line">a1.sources.r1.port = 1111</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0 配置<span class="built_in">source</span> channle</span></span><br><span class="line">a1.sources.r1.selector.type = replicating</span><br><span class="line">a1.sources.r1.channels = c1 c2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.配置两个channel</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c2.type = memory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 2222</span></span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = bigdata3</span><br><span class="line">a1.sinks.k1.port = 2222</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 3333</span></span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = bigdata3</span><br><span class="line">a1.sinks.k2.port = 3333</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义 连接</span></span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k2.channel = c2</span><br></pre></td></tr></table></figure>

<p>然后我们书写端口的agent</p>
<p>2222端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind = bigdata3 </span><br><span class="line">a1.sources.r1.port = 2222 </span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 15000</span><br><span class="line">a1.channels.c1.transactionCapacity = 15000</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://bigdata3:9000/data</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = com</span><br><span class="line">a1.sinks.k1.hdfs.fileSuffix = .test</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line">a1.sinks.k1.hdfs.writeFormat = Text</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217728</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 21600</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 1000</span><br><span class="line">a1.sinks.k1.hdfs.round = true</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = minute</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1200</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 21</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line">a1.sources.r1.channels = c1 </span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3333端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind = bigdata3 </span><br><span class="line">a1.sources.r1.port = 3333 </span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 15000</span><br><span class="line">a1.channels.c1.transactionCapacity = 15000</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">a1.sources.r1.channels = c1 </span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>flume里官方提供的拦截器很多，不过我们一般都不用，只用自己研发的</p>
<p>拦截器需求 ：</p>
<p>现在有三个数据源 ： 分别是1111端口，1112端口，1113端口，通过拦截器把数据分别发送过去</p>
<p>agent如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">agent1:</span><br><span class="line">agent1.sources = r1</span><br><span class="line">agent1.sinks = k1</span><br><span class="line">agent1.channels = c1</span><br><span class="line"></span><br><span class="line">agent1.sources.r1.type = netcat</span><br><span class="line">agent1.sources.r1.bind = bigdata32</span><br><span class="line">agent1.sources.r1.port = 1111</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加一个拦截器 =》 数据清洗 + event打标签</span></span><br><span class="line">agent1.sources.r1.interceptors = i1</span><br><span class="line">agent1.sources.r1.interceptors.i1.type = static</span><br><span class="line">agent1.sources.r1.interceptors.i1.key = dl2262</span><br><span class="line">agent1.sources.r1.interceptors.i1.value = boy</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0 配置<span class="built_in">source</span> channle</span></span><br><span class="line">agent1.sources.r1.channels = c1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.配置两个channel</span></span><br><span class="line">agent1.channels.c1.type = memory</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 2222</span></span><br><span class="line">agent1.sinks.k1.type = avro</span><br><span class="line">agent1.sinks.k1.hostname = bigdata32</span><br><span class="line">agent1.sinks.k1.port = 2222</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义 连接</span></span><br><span class="line">agent1.sources.r1.channels = c1</span><br><span class="line">agent1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">agent2:</span><br><span class="line">agent2.sources = r1</span><br><span class="line">agent2.sinks = k1</span><br><span class="line">agent2.channels = c1</span><br><span class="line"></span><br><span class="line">agent2.sources.r1.type = netcat</span><br><span class="line">agent2.sources.r1.bind = bigdata32</span><br><span class="line">agent2.sources.r1.port = 1112</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加一个拦截器 =》 数据清洗 + event打标签</span></span><br><span class="line">agent2.sources.r1.interceptors = i1</span><br><span class="line">agent2.sources.r1.interceptors.i1.type = static</span><br><span class="line">agent2.sources.r1.interceptors.i1.key = dl2262</span><br><span class="line">agent2.sources.r1.interceptors.i1.value = girl</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0 配置<span class="built_in">source</span> channle</span></span><br><span class="line">agent2.sources.r1.channels = c1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.配置两个channel</span></span><br><span class="line">agent2.channels.c1.type = memory</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 2222</span></span><br><span class="line">agent2.sinks.k1.type = avro</span><br><span class="line">agent2.sinks.k1.hostname = bigdata32</span><br><span class="line">agent2.sinks.k1.port = 2222</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义 连接</span></span><br><span class="line">agent2.sources.r1.channels = c1</span><br><span class="line">agent2.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line">agent3:</span><br><span class="line">agent3.sources = r1</span><br><span class="line">agent3.sinks = k1</span><br><span class="line">agent3.channels = c1</span><br><span class="line"></span><br><span class="line">agent3.sources.r1.type = netcat</span><br><span class="line">agent3.sources.r1.bind = bigdata32</span><br><span class="line">agent3.sources.r1.port = 1113</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加一个拦截器 =》 数据清洗 + event打标签</span></span><br><span class="line">agent3.sources.r1.interceptors = i1</span><br><span class="line">agent3.sources.r1.interceptors.i1.type = static</span><br><span class="line">agent3.sources.r1.interceptors.i1.key = dl2262</span><br><span class="line">agent3.sources.r1.interceptors.i1.value = tea</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0 配置<span class="built_in">source</span> channle</span></span><br><span class="line">agent3.sources.r1.channels = c1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.配置两个channel</span></span><br><span class="line">agent3.channels.c1.type = memory</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 2222</span></span><br><span class="line">agent3.sinks.k1.type = avro</span><br><span class="line">agent3.sinks.k1.hostname = bigdata32</span><br><span class="line">agent3.sinks.k1.port = 2222</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义 连接</span></span><br><span class="line">agent3.sources.r1.channels = c1</span><br><span class="line">agent3.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line">agent4:</span><br><span class="line"></span><br><span class="line">agent4.sources = r1</span><br><span class="line">agent4.sinks = k1 k2 k3</span><br><span class="line">agent4.channels = c1 c2 c3</span><br><span class="line"></span><br><span class="line">agent4.sources.r1.type = avro</span><br><span class="line">agent4.sources.r1.bind = bigdata32</span><br><span class="line">agent4.sources.r1.port = 2222</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0 配置<span class="built_in">source</span> channle</span></span><br><span class="line">agent4.sources.r1.selector.type = multiplexing</span><br><span class="line">agent4.sources.r1.selector.header = dl2262</span><br><span class="line">agent4.sources.r1.selector.mapping.boy = c1</span><br><span class="line">agent4.sources.r1.selector.mapping.girl = c2</span><br><span class="line">agent4.sources.r1.selector.default = c3</span><br><span class="line">agent4.sources.r1.channels = c1 c2 c3</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.配置两个channel</span></span><br><span class="line">agent4.channels.c1.type = memory</span><br><span class="line">agent4.channels.c2.type = memory</span><br><span class="line">agent4.channels.c3.type = memory</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink logger</span></span><br><span class="line">agent4.sinks.k1.type =logger</span><br><span class="line">agent4.sinks.k2.type =logger</span><br><span class="line">agent4.sinks.k3.type =logger</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义 连接</span></span><br><span class="line">agent4.sources.r1.channels = c1 c2 c3</span><br><span class="line">agent4.sinks.k1.channel = c1</span><br><span class="line">agent4.sinks.k2.channel = c2</span><br><span class="line">agent4.sinks.k3.channel = c3</span><br><span class="line"></span><br><span class="line">启动：</span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent4 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/many2one/agent4.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent3 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/many2one/agent3.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent2 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/many2one/agent2.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent1 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/many2one/agent1.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line">telnet bigdata32 1111</span><br><span class="line">telnet bigdata32 1112</span><br><span class="line">telnet bigdata32 1113</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="周六周日-：-clickhouse-，-mongo-，-python-，-go-，-深入jvm，java-机器学习的算法"><a href="#周六周日-：-clickhouse-，-mongo-，-python-，-go-，-深入jvm，java-机器学习的算法" class="headerlink" title="周六周日 ： clickhouse ， mongo ， python ， go ， 深入jvm，java,机器学习的算法"></a>周六周日 ： clickhouse ， mongo ， python ， go ， 深入jvm，java,机器学习的算法</h1><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><p>默认的容量 ： 就是存储的容量capacity</p>
<p>事务容量 ： 就是发生错误的时候可以回撤的条数，包括写进去的时候的事务 transactionCapacity</p>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>source ：</p>
<p>channel ：</p>
<p>sink ：当sink突然采集的数据变少，可能是上述两个组件出问题了</p>
<h3 id="监控手段"><a href="#监控手段" class="headerlink" title="监控手段"></a>监控手段</h3><p>flume的ganglia框架，监控</p>
<p>agent启动一些参数获取这三个组件的相关指标</p>
<p>建议用第二个：因为简单，因为第一个要安装ganglia</p>
<p>对于第二种是获取json数据进而获取的，通过采集http的接口数据，如何通过dataease或者superset进行可视化，或者给前端人员</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在命令行加上命令就可以啦</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">flume-ng agent -c . -f conf/exec-tail.conf -n a1 -Dflume.root.<span class="attribute">logger</span>=INFO,console -Dflume.monitoring.<span class="attribute">type</span>=http -Dflume.monitoring.<span class="attribute">port</span>=1234</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2022/12/07/docker/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这个是关于docker的简单介绍以及使用</p>
<p>本来这个我其实不打算写的因为网上关于docker的教程很多，而且都比较全，我目前所学的全部都是基于菜鸟教程的</p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>首先我们要明白，什么是docker</p>
<p>docker就是相当于一个箱子，其里面有它自己的生态圈</p>
<p>各种环境依赖是直接现成的那样，和之前java打包成exe文件后面绑定依赖是一样的</p>
<h1 id="为什么现在docker会会很火"><a href="#为什么现在docker会会很火" class="headerlink" title="为什么现在docker会会很火"></a>为什么现在docker会会很火</h1><p>因为docker不需要我们配置复杂的环境变量，只要我们通过网络下载一个包含这个功能的linux或者unbanto镜像就行</p>
<p>特别方便，不过方便的同时也会带来隐患，比如，不知道原生安装的话，我们如何详细的知道这个组件的功能？</p>
<h2 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h2><p>docker支持多种操作系统的安装，以下我只简单介绍关于linux和云服务器的安装方法</p>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>使用官方命令安装</p>
<p><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></p>
<p>也可以用国内的daocloud安装</p>
<p><code>curl -sSL https://get.daocloud.io/docker | sh</code></p>
<p>当执行安装命令出现以下情况报错的时候</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"># Executing docker install script, commit: 4f282167c425347a931ccfd95cc91fab041d414f</span><br><span class="line">+ sh -c &#x27;yum install -y -q yum-utils&#x27;</span><br><span class="line"><span class="keyword">error: </span>rpmdb: BDB0113 Thread/process 16675/139942115395648 failed: BDB1507 Thread died in Berkeley DB library</span><br><span class="line"><span class="keyword">error: </span>db5 error(<span class="string">-30973</span>) from dbenv-&gt;failchk: BDB0087 DB_RUNRECOVERY: Fatal error, run database recovery</span><br><span class="line"><span class="keyword">error: </span>cannot open Packages index using db5 -  (<span class="string">-30973</span>)</span><br><span class="line"><span class="keyword">error: </span>cannot open Packages database in /var/lib/rpm</span><br><span class="line">CRITICAL:yum.main:</span><br><span class="line"></span><br><span class="line"><span class="keyword">Error: </span>rpmdb open failed</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行 <code>mv /var/lib/rpm/__db.00* /tmp/&amp;&amp;yum clean all</code></p>
<p>再执行安装命令就可以了</p>
<p>这样在有网的机器上就安装完成了，是不是很简单 ，</p>
<p>接下来我们要说手动安装的情况</p>
<p>首先要卸载旧版本</p>
<p>较旧的 Docker 版本称为 docker 或 docker-engine 。如果已安装这些程序，请卸载它们以及相关的依赖项。</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker <span class="string">\</span></span><br><span class="line">                  docker-client <span class="string">\</span></span><br><span class="line">                  docker-client-latest <span class="string">\</span></span><br><span class="line">                  docker-common <span class="string">\</span></span><br><span class="line">                  docker-latest <span class="string">\</span></span><br><span class="line">                  docker-latest-logrotate <span class="string">\</span></span><br><span class="line">                  docker-logrotate <span class="string">\</span></span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</p>
<p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-<span class="class"><span class="keyword">data</span> \</span></span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure>

<p>使用以下命令来设置稳定的仓库。</p>
<p>官方地址源</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:<span class="regexp">//</span>download.docker.com<span class="regexp">/linux/</span>centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>阿里云地址源</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/docker-ce/</span>linux<span class="regexp">/centos/</span>docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>清华大学的</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/docker-ce/</span>linux<span class="regexp">/centos/</span>docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>在国内还是建议阿里和清华大学的</p>
<p>安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本：</p>
<p><code>$ sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</code></p>
<p>如果提示您接受 GPG 密钥，请选是。</p>
<p>Docker 安装完默认未启动。并且已经创建好 docker 用户组，但该用户组下没有用户。</p>
<p><strong>要安装特定版本的 Docker Engine-Community，请在存储库中列出可用版本，然后选择并安装：</strong></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ yum <span class="keyword">list</span> docker-<span class="keyword">ce</span> --showduplicates | <span class="keyword">sort</span> -r</span><br><span class="line"></span><br><span class="line">docker-<span class="keyword">ce</span>.x86_64  <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">1</span>-<span class="number">3</span>.el7                     docker-<span class="keyword">ce</span>-stable</span><br><span class="line">docker-<span class="keyword">ce</span>.x86_64  <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">0</span>-<span class="number">3</span>.el7                     docker-<span class="keyword">ce</span>-stable</span><br><span class="line">docker-<span class="keyword">ce</span>.x86_64  <span class="number">18.06</span>.<span class="number">1</span>.<span class="keyword">ce</span>-<span class="number">3</span>.el7                    docker-<span class="keyword">ce</span>-stable</span><br><span class="line">docker-<span class="keyword">ce</span>.x86_64  <span class="number">18.06</span>.<span class="number">0</span>.<span class="keyword">ce</span>-<span class="number">3</span>.el7                    docker-<span class="keyword">ce</span>-stable</span><br></pre></td></tr></table></figure>

<p>通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：docker-ce-18.09.1。</p>
<p><code>$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</code></p>
<p>然后启动docker</p>
<p><code>$ sudo systemctl start docker</code></p>
<p>然后运行hello world镜像查看是不是我们成功安装了这个docker</p>
<p><code>$ sudo docker run hello-world</code></p>
<h3 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h3><p>先删除安装包</p>
<p><code>yum remove docker-ce </code></p>
<p>然后删除镜像文件等</p>
<p><code>rm -rf /var/lib/docker</code></p>
<p>云服务器和上面一样</p>
<h1 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h1><p>docker命令的种类不多但是其中的分支较多</p>
<p>docker run : 原本的意义是创建一个docker容器，并运行它</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">-<span class="selector-tag">a</span> stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</span><br><span class="line"></span><br><span class="line">-d: 后台运行容器，并返回容器ID；</span><br><span class="line"></span><br><span class="line">-<span class="selector-tag">i</span>: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line"></span><br><span class="line">-P: 随机端口映射，容器内部端口随机映射到主机的端口</span><br><span class="line"></span><br><span class="line">-<span class="selector-tag">p</span>: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line"></span><br><span class="line">-t: 为容器重新分配一个伪输入终端，通常与 -<span class="selector-tag">i</span> 同时使用；</span><br><span class="line"></span><br><span class="line"><span class="attr">--name</span>=<span class="string">&quot;nginx-lb&quot;</span>: 为容器指定一个名称；</span><br><span class="line"></span><br><span class="line"><span class="attr">--dns</span> <span class="number">8.8</span>.<span class="number">8.8</span>: 指定容器使用的DNS服务器，默认和宿主一致；</span><br><span class="line"></span><br><span class="line"><span class="attr">--dns-search</span> example<span class="selector-class">.com</span>: 指定容器DNS搜索域名，默认和宿主一致；</span><br><span class="line"></span><br><span class="line">-h <span class="string">&quot;mars&quot;</span>: 指定容器的hostname；</span><br><span class="line"></span><br><span class="line">-e username=<span class="string">&quot;ritchie&quot;</span>: 设置环境变量；</span><br><span class="line"></span><br><span class="line"><span class="attr">--env-file</span>=<span class="selector-attr">[]</span>: 从指定文件读入环境变量；</span><br><span class="line"></span><br><span class="line"><span class="attr">--cpuset</span>=<span class="string">&quot;0-2&quot;</span> or <span class="attr">--cpuset</span>=<span class="string">&quot;0,1,2&quot;</span>: 绑定容器到指定CPU运行；</span><br><span class="line"></span><br><span class="line">-m :设置容器使用内存最大值；</span><br><span class="line"></span><br><span class="line"><span class="attr">--net</span>=<span class="string">&quot;bridge&quot;</span>: 指定容器的网络连接类型，支持 bridge/host/<span class="attribute">none</span>/container: 四种类型；</span><br><span class="line"></span><br><span class="line"><span class="attr">--link</span>=<span class="selector-attr">[]</span>: 添加链接到另一个容器；</span><br><span class="line"></span><br><span class="line"><span class="attr">--expose</span>=<span class="selector-attr">[]</span>: 开放一个端口或一组端口；</span><br><span class="line"></span><br><span class="line"><span class="attr">--volume</span> , -v: 绑定一个卷</span><br></pre></td></tr></table></figure>

<p><strong>docker start</strong> :启动一个或多个已经被停止的容器</p>
<p><strong>docker stop</strong> :停止一个运行中的容器</p>
<p><strong>docker restart</strong> :重启容器</p>
<p><strong>docker kill</strong> :杀掉一个运行中的容器。</p>
<ul>
<li><strong>-s :</strong> 向容器发送一个信号</li>
</ul>
<p><strong>docker rm ：</strong> 删除一个或多个容器。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-f :通过 SIGKILL 信号强制删除一个运行中的容器。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-l :移除容器间的网络连接，而非容器本身。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-v :删除与容器关联的卷。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>命令可以嵌套使用如下 ：<ul>
<li><code>删除所有已经停止的容器：docker rm $(docker ps -a -q)</code></li>
</ul>
</li>
</ul>
<p><strong>docker pause</strong> :暂停容器中所有的进程。</p>
<p><strong>docker unpause</strong> :恢复容器中所有的进程。</p>
<p><strong>docker create ：</strong> 创建一个新的容器但不启动它 ：其语法和run一样</p>
<p><strong>docker exec ：</strong> 在运行的容器中执行命令</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-d :分离模式: 在后台运行</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-i :即使没有附加也保持STDIN 打开</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-t :分配一个伪终端</span></span><br></pre></td></tr></table></figure>

<p>docker ps : 列出容器</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-a :显示所有的容器，包括未运行的。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-f :根据条件过滤显示的内容。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--format :指定返回值的模板文件。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-l :显示最近创建的容器。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-n :列出最近创建的n个容器。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--no-trunc :不截断输出。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-q :静默模式，只显示容器编号。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-s :显示总的文件大小。</span></span><br></pre></td></tr></table></figure>

<p>输出介绍</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">输出详情介绍：</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">CONTAINER ID</span><span class="punctuation">:</span> <span class="string">容器 ID。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">IMAGE</span><span class="punctuation">:</span> <span class="string">使用的镜像。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">COMMAND</span><span class="punctuation">:</span> <span class="string">启动容器时运行的命令。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">CREATED</span><span class="punctuation">:</span> <span class="string">容器的创建时间。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">STATUS</span><span class="punctuation">:</span> <span class="string">容器状态。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">状态有7种：</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">created（已创建）</span></span><br><span class="line"><span class="attribute">restarting（重启中）</span></span><br><span class="line"><span class="attribute">running（运行中）</span></span><br><span class="line"><span class="attribute">removing（迁移中）</span></span><br><span class="line"><span class="attribute">paused（暂停）</span></span><br><span class="line"><span class="attribute">exited（停止）</span></span><br><span class="line"><span class="attribute">dead（死亡）</span></span><br><span class="line"><span class="attribute">PORTS</span><span class="punctuation">:</span> <span class="string">容器的端口信息和使用的连接类型（tcp\udp）。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">NAMES</span><span class="punctuation">:</span> <span class="string">自动分配的容器名称。</span></span><br></pre></td></tr></table></figure>

<p><strong>docker inspect :</strong> 获取容器&#x2F;镜像的元数据。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-f :指定返回值的模板文件。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-s :显示总的文件大小。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--type :为指定类型返回JSON。</span></span><br></pre></td></tr></table></figure>

<p><strong>docker top :</strong> 查看容器中运行的进程信息，支持 ps 命令参数。</p>
<p><code>docker top [OPTIONS] CONTAINER [ps OPTIONS]</code></p>
<ul>
<li>查看所有运行容器的进程信息。</li>
<li><code>for i in  </code>docker ps |grep Up|awk ‘{print $1}’<code>;do echo \ &amp;&amp;docker top $i; done</code></li>
</ul>
<p><strong>docker attach :</strong> 连接到正在运行中的容器。</p>
<p>要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。</p>
<p>docker events : 从服务器获取实时事件</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">-f ：根据条件过滤事件；</span><br><span class="line"></span><br><span class="line"><span class="params">--since</span> ：从指定的时间戳后显示所有事件;</span><br><span class="line"></span><br><span class="line"><span class="params">--until</span> ：流水时间显示到指定的时间为止；</span><br><span class="line"></span><br><span class="line">如果指定的时间是到秒级的，需要将时间转成时间戳。如果时间为日期的话，可以直接使用，如<span class="params">--since=</span><span class="string">&quot;2016-07-01&quot;</span>。</span><br></pre></td></tr></table></figure>

<p>docker logs : 获取容器的日志</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">-f : 跟踪日志输出</span><br><span class="line"></span><br><span class="line"><span class="comment">--since :显示某个开始时间的所有日志</span></span><br><span class="line"></span><br><span class="line">-t : 显示时间戳</span><br><span class="line"></span><br><span class="line"><span class="comment">--tail :仅列出最新N条容器日志</span></span><br></pre></td></tr></table></figure>

<p><strong>docker wait :</strong> 阻塞运行直到容器停止，然后打印出它的退出代码</p>
<p><strong>docker export :</strong> 将文件系统作为一个tar归档文件导出到STDOUT。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-o :将输入内容写到文件。</span></span><br></pre></td></tr></table></figure>

<p>docker port 用于列出指定的容器的端口映射，或者查找将 PRIVATE_PORT NAT 到面向公众的端口。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">docker port <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[PRIVATE_PORT<span class="comment">[/PROTO]</span>]</span></span><br></pre></td></tr></table></figure>

<p>docker stats : 显示容器资源的使用情况，包括：CPU、内存、网络 I&#x2F;O 等。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attr">--all</span> , -<span class="selector-tag">a</span> :显示所有的容器，包括未运行的。</span><br><span class="line"></span><br><span class="line"><span class="attr">--format</span> :指定返回值的模板文件。</span><br><span class="line"></span><br><span class="line"><span class="attr">--no-stream</span> :展示当前状态就直接退出了，不再实时更新。</span><br><span class="line"></span><br><span class="line"><span class="attr">--no-trunc</span> :不截断输出。</span><br></pre></td></tr></table></figure>

<p><strong>docker commit :</strong> 从容器创建一个新的镜像。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-a :提交的镜像作者；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-c :使用Dockerfile指令来创建镜像；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-m :提交时的说明文字；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-p :在commit时，将容器暂停。</span></span><br></pre></td></tr></table></figure>

<p><strong>docker cp :</strong> 用于容器与主机之间的数据拷贝。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-L :保持源目标中的链接</span><br><span class="line">docker <span class="built_in">cp</span> [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">docker <span class="built_in">cp</span> [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br><span class="line">例子 ：</span><br><span class="line">实例</span><br><span class="line">将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> /www/runoob 96f7f14e99ab:/www/</span><br><span class="line">将主机/www/runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> /www/runoob 96f7f14e99ab:/www</span><br><span class="line">将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中。</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span>  96f7f14e99ab:/www /tmp/</span><br></pre></td></tr></table></figure>

<p>docker diff : 检查容器里文件结构的更改。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">docker diff <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span></span><br></pre></td></tr></table></figure>

<p><strong>docker login :</strong> 登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p>
<p><strong>docker logout :</strong> 登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">login</span> [<span class="keyword">OPTIONS</span>] [<span class="keyword">SERVER</span>]</span><br><span class="line">docker logout [<span class="keyword">OPTIONS</span>] [<span class="keyword">SERVER</span>]</span><br><span class="line">-u :登陆的用户名</span><br><span class="line"></span><br><span class="line">-p :登陆的密码</span><br></pre></td></tr></table></figure>

<p>docker pull : 从镜像仓库中拉取或者更新指定镜像</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">-<span class="selector-tag">a</span> :拉取所有 tagged 镜像</span><br><span class="line">docker pull <span class="selector-attr">[OPTIONS]</span> NAME<span class="selector-attr">[:TAG|@DIGEST]</span></span><br><span class="line"><span class="attr">--disable-content-trust</span> :忽略镜像的校验,默认开启</span><br></pre></td></tr></table></figure>

<p>docker push : 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--disable-content-trust :忽略镜像的校验,默认开启</span></span><br><span class="line">docker push [<span class="keyword">OPTIONS</span>] <span class="type">NAME</span>[:TAG]</span><br></pre></td></tr></table></figure>

<p><strong>docker search :</strong> 从Docker Hub查找镜像</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">search</span> [<span class="keyword">OPTIONS</span>] TERM</span><br><span class="line"><span class="comment">--automated :只列出 automated build类型的镜像；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--no-trunc :显示完整的镜像描述；</span></span><br><span class="line"></span><br><span class="line">-f &lt;过滤条件&gt;:列出收藏数不小于指定值的镜像。</span><br></pre></td></tr></table></figure>

<p>docker images : 列出本地镜像。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">docker images <span class="selector-attr">[OPTIONS]</span> <span class="selector-attr">[REPOSITORY[:TAG]</span>]</span><br><span class="line">-<span class="selector-tag">a</span> :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</span><br><span class="line"></span><br><span class="line"><span class="attr">--digests</span> :显示镜像的摘要信息；</span><br><span class="line"></span><br><span class="line">-f :显示满足条件的镜像；</span><br><span class="line"></span><br><span class="line"><span class="attr">--format</span> :指定返回值的模板文件；</span><br><span class="line"></span><br><span class="line"><span class="attr">--no-trunc</span> :显示完整的镜像信息；</span><br><span class="line"></span><br><span class="line">-<span class="selector-tag">q</span> :只显示镜像ID。</span><br></pre></td></tr></table></figure>

<p>docker rmi : 删除本地一个或多个镜像。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">docker rmi <span class="selector-attr">[OPTIONS]</span> IMAGE <span class="selector-attr">[IMAGE...]</span></span><br><span class="line">-f :强制删除；</span><br><span class="line"></span><br><span class="line"><span class="attr">--no-prune</span> :不移除该镜像的过程镜像，默认移除；</span><br></pre></td></tr></table></figure>

<p>docker tag : 标记本地镜像，将其归入某一仓库。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">tag</span> <span class="title">[OPTIONS</span>] IMAGE[:<span class="keyword">TAG</span>] [REGISTRYHOST/][USERNAME/]NAME[:<span class="keyword">TAG</span>]</span><br></pre></td></tr></table></figure>

<p>docker build 命令用于使用 Dockerfile 创建镜像</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br><span class="line"><span class="deletion">--build-arg=[] :设置镜像创建时的变量；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--cpu-shares :设置 cpu 使用权重；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--cpu-period :限制 CPU CFS周期；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--cpu-quota :限制 CPU CFS配额；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--cpuset-cpus :指定使用的CPU id；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--cpuset-mems :指定使用的内存 id；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--disable-content-trust :忽略校验，默认开启；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-f :指定要使用的Dockerfile路径；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--force-rm :设置镜像过程中删除中间容器；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--isolation :使用容器隔离技术；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--label=[] :设置镜像使用的元数据；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-m :设置内存最大值；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--memory-swap :设置Swap的最大值为内存+swap，&quot;-1&quot;表示不限swap；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--no-cache :创建镜像的过程不使用缓存；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--pull :尝试去更新镜像的新版本；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--quiet, -q :安静模式，成功后只输出镜像 ID；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--rm :设置镜像成功后删除中间容器；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--shm-size :设置/dev/shm的大小，默认值是64M；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--ulimit :Ulimit配置。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--squash :将 Dockerfile 中所有的操作压缩为一层。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--network: 默认 default。在构建期间设置RUN指令的网络模式</span></span><br></pre></td></tr></table></figure>

<p>docker history : 查看指定镜像的创建历史。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">docker history [OPTIONS] IMAGE</span><br><span class="line"><span class="deletion">-H :以可读的格式打印镜像大小和日期，默认为true；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--no-trunc :显示完整的提交记录；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-q :仅列出提交记录ID。</span></span><br></pre></td></tr></table></figure>

<p>docker save : 将指定镜像保存成 tar 归档文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">docker save <span class="selector-attr">[OPTIONS]</span> IMAGE <span class="selector-attr">[IMAGE...]</span></span><br><span class="line">-o :输出到的文件。</span><br></pre></td></tr></table></figure>

<p>docker load : 导入使用 docker save 命令导出的镜像。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">docker load <span class="selector-attr">[OPTIONS]</span></span><br><span class="line"><span class="attr">--input</span> , -<span class="selector-tag">i</span> : 指定导入的文件，代替 STDIN。</span><br><span class="line"></span><br><span class="line"><span class="attr">--quiet</span> , -<span class="selector-tag">q</span> : 精简输出信息。</span><br></pre></td></tr></table></figure>

<p><strong>docker import :</strong> 从归档文件中创建镜像。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">import</span> [<span class="keyword">OPTIONS</span>] <span class="keyword">file</span>|URL|- [REPOSITORY[:TAG]]</span><br><span class="line">-c :应用docker 指令创建镜像；</span><br><span class="line"></span><br><span class="line">-m :提交时的说明文字；</span><br></pre></td></tr></table></figure>

<p>docker info : 显示 Docker 系统信息，包括镜像和容器数。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> <span class="literal">info</span> [OPTIONS]</span><br></pre></td></tr></table></figure>

<p>docker version :显示 Docker 版本信息。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-f :指定返回值的模板文件。</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂货技术栈</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/11/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line">$ hexo <span class="keyword">new</span> <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>java面试题</title>
    <url>/2022/10/15/java%E4%B8%AD%E7%9A%84%E6%98%93%E9%94%99%E7%82%B9/</url>
    <content><![CDATA[<h1 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h1><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>重载发生在同一个类里，方法名必须相同，参数类型不同，个数不同，顺序不同，方法的返回值和访问修饰符可以不同，发生在编译时</p>
<h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>发生在父类和子类中，方法名，参数列表相同，返回值范围小于等于父类，<br>抛出异常小于等于父类，访问修饰符大于等于父类，若父类的方法是private则不能重写</p>
<h1 id="List和Set的区别"><a href="#List和Set的区别" class="headerlink" title="List和Set的区别"></a>List和Set的区别</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>list是有序的，按照插入对象的顺序进行访问的，可重复，，可以有多个null元素，可以用iterator取出所有元素，在逐一遍历还可以用get（index）获取指定元素</p>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>set是无序的，不可重复，，最多有一个null对象取元素的时候只能用iterator接口取出所有元素，再逐一遍历</p>
<h1 id="谈谈Concurrent-Hash-Map的扩容机制"><a href="#谈谈Concurrent-Hash-Map的扩容机制" class="headerlink" title="谈谈Concurrent Hash Map的扩容机制"></a>谈谈Concurrent Hash Map的扩容机制</h1><h2 id="1-7jdk"><a href="#1-7jdk" class="headerlink" title="1.7jdk"></a>1.7jdk</h2><ul>
<li><p>1.ConcurrentHashMap是基于Segment来实现的</p>
</li>
<li><p>2.每个Segment相当于是一个小型的HashMap</p>
</li>
<li><p>3.每个Segment内部都会进行扩容，和HashMap的扩容逻辑相同</p>
</li>
<li><p>4.先生成一个新的数组，然后转移元素到新数组中</p>
</li>
<li><p>5.扩容的判断也是每个Segment单独进行判断的</p>
</li>
</ul>
<h2 id="1-8jdk"><a href="#1-8jdk" class="headerlink" title="1.8jdk"></a>1.8jdk</h2><ul>
<li><p>1.到了1.8 就不基于Segment了</p>
</li>
<li><p>2.当某个线程进行put的时，如果发现有扩容的，就会优先跟着一起进行扩容，</p>
</li>
<li><p>3.如果发现没有进行扩容的，就会把key-value添加到ConcurrentHashMap中然后判断超过阈值了吗超过了则进行扩容</p>
</li>
<li><p>4.ConcurrentHashMap是支持多线程同时扩容的</p>
</li>
<li><p>5.扩容之前也先生成一个新数组</p>
</li>
<li><p>6.转移元素之前先将元素分组，将每组分给不同的线程来进行元素的转移，每个线程负责一组或者多组的元素转移工作</p>
</li>
</ul>
<h1 id="jdk1-7到1-8HashMap发生了什么变化"><a href="#jdk1-7到1-8HashMap发生了什么变化" class="headerlink" title="jdk1.7到1.8HashMap发生了什么变化"></a>jdk1.7到1.8HashMap发生了什么变化</h1><h2 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a>1.7</h2><p>其底层是数组加链表<br>使用的是头插法<br>哈希算法比较复杂</p>
<h2 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h2><p>其底层是数组+链表和红黑树加入红黑树的目的是加快查找效率<br>其用的是尾插法，要先遍历数组的每个元素，判断数组中的元素个数<br>哈希算法进行了优化，节省cpu资源</p>
<h1 id="接口可以多继承接口"><a href="#接口可以多继承接口" class="headerlink" title="接口可以多继承接口"></a>接口可以多继承接口</h1><h1 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h1><p>浅拷贝是指只会拷贝基础类型的值<br>浅拷贝是指拷贝的地址指向同一目标</p>
<h1 id="CopyOnwriteArrayList底层"><a href="#CopyOnwriteArrayList底层" class="headerlink" title="CopyOnwriteArrayList底层"></a>CopyOnwriteArrayList底层</h1><ul>
<li><p>1.首先其内部也是通过数组实现的，在向其中加元素的时候时，会复制一个新数组 ， 并在新数组上进行进行写操作 ， 读操作在原数组上进行</p>
</li>
<li><p>2.并且写操作会加锁，防止出现写入数据丢失的问题</p>
</li>
<li><p>3.写操作结束之后会把原数组指向新数组</p>
</li>
<li><p>4.CopyOnWriteArrayList允许在写数据的同时进行读数据，大大提高了效率因此适合读多写少的场景，但其比较占内存，因此读到的数据并不是最新的，因此适用与实时性不强的地方</p>
</li>
</ul>
<h1 id="什么是字节码-字节码的好处"><a href="#什么是字节码-字节码的好处" class="headerlink" title="什么是字节码 字节码的好处"></a>什么是字节码 字节码的好处</h1><p>编译器Javac会将java源文件编译为.class可以做到一次编译到此处运行，例如，windows上编译好的.class可以在linux上运行。</p>
<h2 id="采用字节码的好处"><a href="#采用字节码的好处" class="headerlink" title="采用字节码的好处"></a>采用字节码的好处</h2><p>一方面实现了跨平台，另外一方面提高了代码的执行效率，让编译器可以在编译时进行优化</p>
<h1 id="在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常"><a href="#在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常" class="headerlink" title="在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常"></a>在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常</h1><p>异常相当于一种提示 ， 若我们抛出异常，就相当于告诉上层方法，我抛出了一个异常，我处理不了这个异常给你来处理，如果上层也处理不了，就继续往上抛，或者捕获</p>
<h1 id="java中异常体系是怎么样的"><a href="#java中异常体系是怎么样的" class="headerlink" title="java中异常体系是怎么样的"></a>java中异常体系是怎么样的</h1><p>java中所有异常都来自于顶级父类 Throwable<br>Throwable下有两个子类Exceptio 和 erro<br>error属于重大错误：包括但不限于 虚拟机，磁盘，操作系统层面的问题<br>Exception属于普通编译器报错，其还分为运行时异常和编译时异常</p>
<h1 id="包装类型传参数的时候按照基本类型算，只传值，不传地址"><a href="#包装类型传参数的时候按照基本类型算，只传值，不传地址" class="headerlink" title="包装类型传参数的时候按照基本类型算，只传值，不传地址"></a>包装类型传参数的时候按照基本类型算，只传值，不传地址</h1><h1 id="java中的类加载机制"><a href="#java中的类加载机制" class="headerlink" title="java中的类加载机制"></a>java中的类加载机制</h1><p>jdk中自带了三个类加载器：</p>
<h2 id="BootStrap-ClassLoader"><a href="#BootStrap-ClassLoader" class="headerlink" title="BootStrap ClassLoader"></a>BootStrap ClassLoader</h2><p>BootStrap是Ext的父类加载器默认负责加载%JAVA_HOME%lib下面的lib和class</p>
<h2 id="Ext-ClassLoader"><a href="#Ext-ClassLoader" class="headerlink" title="Ext ClassLoader"></a>Ext ClassLoader</h2><p>Ext ClassLoader是AppClassLoader的父类，默认加载%JAVA_HOME%&#x2F;lib&#x2F;ext文件夹下的jar包和class</p>
<h2 id="AppClassLoader"><a href="#AppClassLoader" class="headerlink" title="AppClassLoader"></a>AppClassLoader</h2><p>AppClassLoader是自定义器的加载器的父类，负责加载classpath下的</p>
<h1 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h1><p>简单来说就是当问题从最下面的类加载器进入的时候会先让最上面的类加载器加载，然后逐级往下，最后才是自己定义的类加载器</p>
<h1 id="排查JVM问题"><a href="#排查JVM问题" class="headerlink" title="排查JVM问题"></a>排查JVM问题</h1><h2 id="对于还可以正常运行的系统"><a href="#对于还可以正常运行的系统" class="headerlink" title="对于还可以正常运行的系统"></a>对于还可以正常运行的系统</h2><ul>
<li><p>可以使用jmap来查看各个区域的情况</p>
</li>
<li><p>可以通过jstack来查看线程的运行情况，比如xxx线程阻塞；是不是死锁等</p>
</li>
<li><p>可以通过jstat命令查看垃圾回收的情况 ， 特别是fullgc若fullgc比较多就要考虑调优了</p>
</li>
<li><p>通过各个命令的结果，或者jvisualvm等工具进行分析</p>
</li>
<li><p>猜测fullgc多的原因：如果无内存溢出，那么表示fullgc是回收了很多对象，所以这些对象最好能在younggc过程中直接回收，避免进入老年代，对于这些情况就要考虑存活区间是不是比较小，导致年轻代放不下，直接到了老年代，尝试加大年轻代的区间若改完fullgc变小，则猜想正确</p>
</li>
</ul>
<h2 id="对于已发生了OOM的系统"><a href="#对于已发生了OOM的系统" class="headerlink" title="对于已发生了OOM的系统"></a>对于已发生了OOM的系统</h2><ul>
<li>一般生产中都会设置系统发生了OOM时，生成当时的dump文件（-xx:+HeapDumpOnOutOfMemoryError -xx:HHEapDump Path &#x3D; &#x2F;user&#x2F;local&#x2F;base)</li>
<li>我们可以用jsvisualvm等工具进行分析dump</li>
<li>根据dump找到异常实例和线程（占用cpu高），定位到具体代码。</li>
<li>之后再做细致的分析</li>
</ul>
<h1 id="一个对象从加载到jvm到被Gc清楚都经历了什么"><a href="#一个对象从加载到jvm到被Gc清楚都经历了什么" class="headerlink" title="一个对象从加载到jvm到被Gc清楚都经历了什么"></a>一个对象从加载到jvm到被Gc清楚都经历了什么</h1><ul>
<li>先把字节码文件内容加载到方法区</li>
<li>然后再根据类信息在堆区域创建对象</li>
<li>对象首先会分配在堆中年轻代的Eden区经过一次Minorc之后会进入Survivor区，在后续的每次MinorGC中若一直存活，则会在Suvivor区来回拷贝，每拷贝一次每移动一次年龄加1</li>
<li>当年龄过15，若对象仍存活，会进入老年态</li>
<li>若经过fullgc，被标记为垃圾对象，那么会被gc线程清楚</li>
</ul>
<h1 id="jvm有哪些垃圾回收算法"><a href="#jvm有哪些垃圾回收算法" class="headerlink" title="jvm有哪些垃圾回收算法"></a>jvm有哪些垃圾回收算法</h1><h2 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h2><ul>
<li>标记阶段：把垃圾内存标记出来</li>
<li>清除阶段：直接把垃圾内存回收</li>
<li>问题：会产生大量的内存碎片</li>
</ul>
<h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><ul>
<li>为了解决标记清除的内存碎片的问题</li>
<li>将内存分为两份，每次只使用其中一半，垃圾回收时将当前这一块的存活对象完全拷贝到另外一半，而后当前这一半可直接清除，这种无内存碎片，但是浪费空间，且放弃和存活对象的个数相关</li>
</ul>
<h2 id="标记压缩算法"><a href="#标记压缩算法" class="headerlink" title="标记压缩算法"></a>标记压缩算法</h2><ul>
<li>为了解决复制算法的缺陷，就提出了标记压缩算法，这种算法在标记阶段跟标记清除算法是一样的，但是在完成之后不是直接清理，而是将存活的对象往一端移动，而后面将边界以外的所有内存清除</li>
</ul>
<h1 id="什么是STW"><a href="#什么是STW" class="headerlink" title="什么是STW"></a>什么是STW</h1><p>Stw-stop-the-world,是在垃圾回收算法执行过程中要将JVM内存冻结的一种状态，在STW状态下，java的所有线程都是停止执行的——GC除外，native方法可执行；但是不能与jvm交互GC各种算法的优化的重点便是减少STW,是jvm调优的重点</p>
<h1 id="jvm参数"><a href="#jvm参数" class="headerlink" title="jvm参数"></a>jvm参数</h1><ul>
<li>标注指令：开头这个是所有Hotspot都支持的参数，可以用java-help</li>
<li>非标注指令:-x开头；与特定的hotspot对立的用java-x打印</li>
<li>不稳定参数：-xx开头，与上面一样</li>
</ul>
<h1 id="对守护线程的理解"><a href="#对守护线程的理解" class="headerlink" title="对守护线程的理解"></a>对守护线程的理解</h1><p>线程分为 守护线程和用户线程</p>
<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>是jvm的后台线程，比如垃圾回收器，守护线程会在其他线程都停止之后自动关闭，我们可以通过设置thread.setDemon（true）来把一个线程设置成守护线程</p>
<h2 id="普通线程"><a href="#普通线程" class="headerlink" title="普通线程"></a>普通线程</h2><p>普通用户的线程</p>
<h1 id="ThreadLocal的底层原理"><a href="#ThreadLocal的底层原理" class="headerlink" title="ThreadLocal的底层原理"></a>ThreadLocal的底层原理</h1><p>其是java中所提供的线程本地存储机制，可利用该机制将数据存储到一个线程内部，该线程可在任意时刻，任意的方法，获取其存储的数据</p>
<ul>
<li>其底层是通过ThreadLocalMap来实现的，Map的key为ThreadLocal对象，Map的value为需要缓存的值</li>
<li>如果在线程池中使用ThreadLocal会造成内存泄露，因为当ThreadLoccal对象用完之后应该把设置的key value 也就是Entry的对象进行回收，但是线程池的线程不会进行回收，而线程对象是通过强引用指向ThreadLocalMap而ThreadLocalMap也是通过强引用的方法指向Entry的对象，线程也就不会被回收，从而出现内存泄露。</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>在使用了ThreadLocal对象之后，手动调Thread Local的remove方法，手动清除Entry，其经典应用是用在连接管理上</li>
</ul>
<h1 id="并发-并行-穿行的区别"><a href="#并发-并行-穿行的区别" class="headerlink" title="并发,并行,穿行的区别"></a>并发,并行,穿行的区别</h1><ul>
<li>串行：一个任务执行完才可以执行下一个</li>
<li>并发：两个任务看起来是一起执行的，在底层，两个任务被拆成了很多份，从而后一个执行，但是在更高处看，两个任务是一起执行的</li>
<li>并行：两个可以一起执行</li>
</ul>
<h1 id="java死锁如何避免"><a href="#java死锁如何避免" class="headerlink" title="java死锁如何避免"></a>java死锁如何避免</h1><ul>
<li>一个资源每次只被一个线程调用</li>
<li>一个线程在阻塞资源的时候不释放已经占有的资源</li>
<li>一个线程已经获得的资源在使用之前不可被强行剥夺</li>
<li>若干个线程形成头尾相接的循环等待状</li>
</ul>
<h1 id="说一下HashMap的put方法"><a href="#说一下HashMap的put方法" class="headerlink" title="说一下HashMap的put方法"></a>说一下HashMap的put方法</h1><h2 id="大体流程"><a href="#大体流程" class="headerlink" title="大体流程"></a>大体流程</h2><ul>
<li><p>1.根据key通过哈希算法与与运算得出数组的下标</p>
</li>
<li><p>2.如果数组下标的元素为空 ， 则将key和value封装为entry对象（1.7中是Entry ， 1.8里是node对象）并放入该位置</p>
</li>
</ul>
<h2 id="如果数组下标不为空，分情况讨论"><a href="#如果数组下标不为空，分情况讨论" class="headerlink" title="如果数组下标不为空，分情况讨论"></a>如果数组下标不为空，分情况讨论</h2><h3 id="1-7jdk-1"><a href="#1-7jdk-1" class="headerlink" title="1.7jdk"></a>1.7jdk</h3><ul>
<li>要先判断是不是要扩容，如果不扩容就生成Entry对象，并且用头插法添加到当前位置的链表中</li>
</ul>
<h3 id="1-8jdk-1"><a href="#1-8jdk-1" class="headerlink" title="1.8jdk"></a>1.8jdk</h3><ul>
<li>会先判断当前位置上node的类型，看是红黑树node还是链表node</li>
<li>如果是红黑树node，则会将key和value封装为一个红黑树节点并添加到红黑树中去，这个过程中会判断是不是有当前key，如果存在则更新value</li>
<li>如果此位置是node对象是链表节点，则将key和value封装为一个链表node并通过尾插法插到链表最后去，因为是尾插法所以要遍历整个链表，在遍历链表的过程中会判断是不是存在当前的key如果存在就更新key，当遍历完链表后，将新node插入到链表中，插入链表1后会看到当前链表的节点个数，如果大于等于8就会把这个链表转化为红黑树</li>
<li>将key和value封装为node插入到链表或红黑树中再判断是不是需要扩容如果需要就扩容，不需要就结束put方法</li>
</ul>
<h1 id="线程池的底层工作原理"><a href="#线程池的底层工作原理" class="headerlink" title="线程池的底层工作原理"></a>线程池的底层工作原理</h1><ul>
<li>线程池内部是通过队列＋线程实现的，当我们用线程池执行任务的时候</li>
<li>如果此时线程池中的线程数量小于CorePoolSize，即使线程池中都处于空闲状态，也同样要创建新的线程来处理被添加的任务</li>
<li>如果此时线程池中的线程数量等于CorePoolSize, 但是缓存队列workQueue未满，且线程池中的数量小于maximumPoolsize</li>
</ul>
<h1 id="线程池为什么是先添加队列而不是先创建最大线程"><a href="#线程池为什么是先添加队列而不是先创建最大线程" class="headerlink" title="线程池为什么是先添加队列而不是先创建最大线程"></a>线程池为什么是先添加队列而不是先创建最大线程</h1><p>当线程池中的核心线程在忙时如果继续往线程池中添加任务，那么任务还会放入队列，队列满了之后，才会开始新的线程，这就相当于，一个公司本来有10个程序员，本来这10个程序员能正常处理各种需求，但是随着公司的发展，需求在慢慢增加，但是一开始这些需求只会增加在待开发列表中，然后这10个程序员加班加点的从待开发列表中获取需求并进行处理，但是某一天待开发列表满了，所以员工处理不过来了，所以就开始招募新员工了。</p>
<h1 id="ReentrantLock中的公平锁和非公平锁的底层实现"><a href="#ReentrantLock中的公平锁和非公平锁的底层实现" class="headerlink" title="ReentrantLock中的公平锁和非公平锁的底层实现"></a>ReentrantLock中的公平锁和非公平锁的底层实现</h1><p>首先不管是公平锁还是非公平锁他们的底层都是通过AQS来实现排队的，他们的区别在于：线程使用lock（）方法加锁的时候，如果是公平锁，会先检查AQS队列中是不是存在线程在排队，如果存在，则当前线程也会进行排队，如果是非公平锁，则不会去检查是不是有线程在排队，而是直接竞争锁，不管是公平锁还是非公平锁，一旦没竞争到锁，就会进行排队，当锁释放的时候都是唤醒最前面的线程，所以非公平锁只是体现在了线程加锁的阶段，而没有体现在线程被唤醒的阶段。</p>
<h1 id="ReentrantLock中tryLock-和lock（）方法的区别"><a href="#ReentrantLock中tryLock-和lock（）方法的区别" class="headerlink" title="ReentrantLock中tryLock()和lock（）方法的区别"></a>ReentrantLock中tryLock()和lock（）方法的区别</h1><ul>
<li>tryLock()表示尝试加锁，可能加到，也可能加不到，该方法不会阻止线程，如果加到锁就返回true，没有加到则返回false</li>
<li>lock（）则表示线程阻塞加锁，线程会阻塞直到加上锁，而且也没有返回值</li>
</ul>
<h1 id="CountDownLatch和Semaphore的区别和底层原理"><a href="#CountDownLatch和Semaphore的区别和底层原理" class="headerlink" title="CountDownLatch和Semaphore的区别和底层原理"></a>CountDownLatch和Semaphore的区别和底层原理</h1><ul>
<li>CountDownLatch表示计数器，可以给CountDownLatch设置一个数字，一个线程调用CountDownLatch的await（）将会被阻塞，其他线程可以调用CountDownlatch的countDown（）方法来对CountDownLacth中的数字减一，当一个数字被减为0之后则会将AQS中排队的线程依次唤醒</li>
<li>Semaphore表示信号量，可以设置许可的个数，表示同时允许最多多少个线程使用该信号量，通过acquire来获取许可，如果没有许可可用则用线程阻塞，并通过ASQ来排队，可以通过release的方法释放许可当某一个线程释放死锁之后会从ASQ的第一个线程开始依次唤醒，直到没有空闲许可</li>
</ul>
<h1 id="Sychronized"><a href="#Sychronized" class="headerlink" title="Sychronized"></a>Sychronized</h1><ul>
<li>偏向锁： 在锁对象的对象头中记录下当前获取到该锁的线程id，该线程下次如果又来获取该锁就可以直接获取到了</li>
<li>轻量级锁：由偏向锁升级而来，当一个线程获取到锁之后，此时这把锁是偏向锁，此时如果由第二个线程来竞争这个锁，偏向锁就会升级为轻量级锁，之所以叫轻量级锁是为了和重量级锁分开，轻量级锁底层是通过自旋来实现的，并不会阻塞线程。</li>
<li>如果自旋次数过多扔无法获取锁，则会升级为重量级锁，重量级锁会导致线程阻塞</li>
<li>自旋锁：自旋锁就是在线程获取锁的过程中，不回去阻塞线程，也就无所谓唤醒线程，阻塞和唤醒这两个步骤都是要操作系统中去实现的，比较耗费时间，自旋锁是线程通过CAS获取预期的一个标记，如果没有获取到，则继续循环获取去过获取到，则表式获取到了锁，这个过程线程一直在运行，相对而言没有使用太多的操作系统资源，比较轻量</li>
</ul>
<h1 id="Sychronized和ReentrantLock的区别"><a href="#Sychronized和ReentrantLock的区别" class="headerlink" title="Sychronized和ReentrantLock的区别"></a>Sychronized和ReentrantLock的区别</h1><ul>
<li>前一个是关键字，后一个是一个类</li>
<li>前一个会自动加锁和释放锁，后面一个需要手动加锁和个释放锁</li>
<li>前一个底层是jvm层面 ， 后面一个底层是api层面</li>
<li>前一个是非公平锁 ， 后面一个是可以选非公平或者公平</li>
<li>前一个锁的是对象所信息保存在对象头中，后面一个是通过代码中int型的state标识符状态</li>
<li>前一个底层有个锁升级的过程</li>
</ul>
<h1 id="谈谈你对AQS的理解，AQS如何实现可重入锁"><a href="#谈谈你对AQS的理解，AQS如何实现可重入锁" class="headerlink" title="谈谈你对AQS的理解，AQS如何实现可重入锁"></a>谈谈你对AQS的理解，AQS如何实现可重入锁</h1><ul>
<li>AQS是一个java线程同步的框架，是jdk中很多锁的工具核心框架</li>
<li>在AQS中，维护了信号量state和一个线程的双向链表队列，其中这个线程队列，就是用来给线程排队的而state就像是个红绿灯，用来控制排队</li>
<li>在不同的场景下，有不同的意义</li>
<li>在可重入锁这个场景下state用来保证加锁的次数，0表示标识无锁，每次加锁，states就加1，释放就减少1</li>
</ul>
<h1 id="谈谈你对IOC的理解"><a href="#谈谈你对IOC的理解" class="headerlink" title="谈谈你对IOC的理解"></a>谈谈你对IOC的理解</h1><ul>
<li>通常我们任务spring有两大特性IoC和AOP</li>
<li>IoC进行了对象的反转，就是对象控制权的转移</li>
</ul>
<h1 id="单例和Bean"><a href="#单例和Bean" class="headerlink" title="单例和Bean"></a>单例和Bean</h1><ul>
<li>单例表示这个类只能实例化一次</li>
<li>而bean并不表示jvm里只存在一个类的Bean</li>
</ul>
<h1 id="Spring的事务传播机制"><a href="#Spring的事务传播机制" class="headerlink" title="Spring的事务传播机制"></a>Spring的事务传播机制</h1><ul>
<li>多个事务方法互相调用的时候，事务是如何在这些方法之间传播的</li>
<li>REQUIRED（默认的传播机制）：如果没有事务，就自己创建一个新的事务，如果存在事务，就加入</li>
<li>SUPPIORTS：当前存在事务，则加入，如果不存在就按照不存在的来</li>
<li>MANDATORY：当前存在事务则加入，不存在则抛出异常</li>
<li>REQUIRES_NEW：创建一个新事务，如果存在这个事务，就挂起他</li>
<li>NOT_SUPPORTED:用非事务的方式执行，如果当前存在事务，则挂起事务</li>
<li>NEVER：不使用事务如果事务存在，则会抛出异常</li>
<li>NESTED：如果当前事务存在，则在嵌套事务中执行要不然就和REQUIRED一样</li>
</ul>
<h1 id="线程和协程的区别"><a href="#线程和协程的区别" class="headerlink" title="线程和协程的区别"></a>线程和协程的区别</h1><ul>
<li>线程与协程的区别： </li>
<li>1：包含关系：一个进程可以有多个协程，一个线程也可以有多个协程 </li>
<li>2：同步：线程进程是同步，协程是异步 </li>
<li>3：协程能保留上一次重入的状态，当程序重新调用时，可以直接进入上一次的调用的位置 </li>
<li>4：资源占用：线程是抢占式，协程是非抢占式，也就是会所在同一时间只能有一个协程运行，相当于单线程 </li>
<li>5：与线程调用关系：协程并不能代替线程，线程是分割的CPU资源，协程是执行的代码，协程并不会直接调用线程，它会调用线程的执行器</li>
</ul>
<h1 id="myysql的索引以及他们的好处和坏处"><a href="#myysql的索引以及他们的好处和坏处" class="headerlink" title="myysql的索引以及他们的好处和坏处"></a>myysql的索引以及他们的好处和坏处</h1><ul>
<li>优点： 1.大大加快数据的检索速度 </li>
<li>2.通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能 </li>
<li>缺点： 1.时间方面：创建索引和维护索引要耗费时间，索引需要动态的维护 </li>
<li>2.空间方面：需要占物理空间</li>
</ul>
<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ul>
<li>现代操作系统中，进程是分配资源的最小单位，运行一个程序，就创建一个进程，一个进程里可以包括多个线程，线程是系统调度的基本单位， 每个线程里都拥有各自的程序计数器，堆栈，局部变量表等属性，并且共享进程里面的资源，处理器在这些线程之间高速切换，使使用者误以为这些线程是同时执行的。 </li>
<li>对于最简单的输出hello world程序，就包括四个线程， main，清除reference的线程，和finalize方法有关的线程，处理jvm信号的线程， </li>
<li>之所以使用多线程是因为多线程有个好处 </li>
<li>1.现代计算机是多核处理器，而一个线程同一时刻只能运行在一个处理器上，对于单线程程序，同一时刻只能使用一个处理器，显然这是一种资源浪费， 而对于多线程程序，可以把计算逻辑分配给不同的处理器，极大的提高的程序的执行效率 </li>
<li>2.可以把复杂的业务逻辑种的对数据一致性要求不强的操作，比如生成订单快照分配给其他的线程去处理（也可以使用消息队列），极大的提高了程序的响应时间 </li>
<li>3.java提供了一个良好的多线程模型，能是开发者专注于业务的开发</li>
</ul>
<h1 id="怎么保证线程安全"><a href="#怎么保证线程安全" class="headerlink" title="怎么保证线程安全"></a>怎么保证线程安全</h1><ul>
<li>Java保证线程安全的方式有很多,其中较为常用的有三种,按照资源占用情况由轻到重排列,这三种保证线程安全的方式分别是原子类、volatile、锁。 </li>
<li>JDK从1.5开始提供了java.util.concurrent.atomic包,这个包中的原子操作类提供了一种用法简单、性能高效、线程安全地更新一个变量的方式。</li>
<li>在atomic包里一共提供了17个类,按功能可以归纳为4种类型的原子更新方式,分别是原子更新基本类型、原子更新引用类型、原子更新属性、原子更新数组。</li>
<li>无论原子更新哪种类型,都要遵循“比较和替换”规则,即比较要更新的值是否等于期望值,如果是则更新,如果不是则失败。 </li>
<li>volatile是轻量级的synchronized,它在多处理器开发中保证了共享变量的“可见性”,从而可以保证单个变量读写时的线程安全。</li>
<li>可见性问题是由处理器核心的缓存导致的,每个核心均有各自的缓存,而这些缓存均要与内存进行同步。</li>
<li>volatile具有如下的内存语义：当写一个volatile变量时,该线程本地内存中的共享变量的值会被立刻刷新到主内存；当读一个volatile变量时,该线程本地内存会被置为无效,迫使线程直接从主内存中读取共享变量。</li>
<li>原子类和volatile只能保证单个共享变量的线程安全,锁则可以保证临界区内的多个共享变量的线程安全,Java中加锁的方式有两种,分别是synchronized关键字和Lock接口。</li>
<li>synchronized是比较早期的API,在设计之初没有考虑到超时机制、非阻塞形式,以及多个条件变量。</li>
<li>若想通过升级的方式让它支持这些相对复杂的功能,则需要大改它的语法结构,不利于兼容旧代码。</li>
<li>因此,JDK的开发团队在1.5新增了Lock接口,并通过Lock支持了上述的功能,即：支持响应中断、支持超时机制、支持以非阻塞的方式获取锁、支持多个条件变量（阻塞队列）。 </li>
<li>加分回答 实现线程安全的方式有很多,除了上述三种方式之外,还有如下几种方式： </li>
<li><ol>
<li>无状态设计 线程安全问题是由多线程并发修改共享变量引起的,如果在并发环境中没有设计共享变量,则自然就不会出现线程安全问题了。这种代码实现可以称作“无状态实现”,所谓状态就是指共享变量。</li>
</ol>
</li>
<li><ol start="2">
<li>不可变设计 如果在并发环境中不得不设计共享变量,则应该优先考虑共享变量是否为只读的,如果是只读场景就可以将共享变量设计为不可变的,这样自然也不会出现线程安全问题了。具体来说,就是在变量前加final修饰符,使其不可被修改,如果变量是引用类型,则将其设计为不可变类型（参考String类）。</li>
</ol>
</li>
<li><ol start="3">
<li>并发工具 java.util.concurrent包提供了几个有用的并发工具类,一样可以保证线程安全：</li>
</ol>
</li>
<li>Semaphore：就是信号量,可以控制同时访问特定资源的线程数量。 </li>
<li>CountDownLatch：允许一个或多个线程等待其他线程完成操作。 </li>
<li>CyclicBarrier：让一组线程到达一个屏障时被阻塞,直到最后一个线程到达屏障时,屏障才会打开,所有被屏障拦截的线程才会继续运行。 </li>
<li><ol start="4">
<li>本地存储 我们也可以考虑使用ThreadLocal存储变量,ThreadLocal可以很方便地为每一个线程单独存一份数据,也就是将需要并发访问的资源复制成多份。这样一来,就可以避免多线程访问共享变量了,它们访问的是自己独占的资源,它从根本上隔离了多个线程之间的数据共享。</li>
</ol>
</li>
</ul>
<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><ul>
<li><ol>
<li>死锁 两个或两个以上的进程在执行过程中,因争夺共享资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁。这些永远在互相等待的进程称为死锁进程。</li>
</ol>
</li>
<li><ol start="2">
<li>产生死锁的必要条件 虽然进程在运行过程中,可能发生死锁,但死锁的发生也必须具备一定的条件,死锁的发生必须具备以下四个必要条件：</li>
</ol>
</li>
<li><ul>
<li>互斥条件：指进程对所分配到的资源进行排它性使用,即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源,则请求者只能等待,直至占有资源的进程用毕释放；</li>
</ul>
</li>
<li><ul>
<li>请求和保持条件：指进程已经保持至少一个资源,但又提出了新的资源请求,而该资源已被其它进程占有,此时请求进程阻塞,但又对自己已获得的其它资源保持不放；</li>
</ul>
</li>
<li><ul>
<li>不剥夺条件：指进程已获得的资源,在未使用完之前,不能被剥夺,只能在使用完时由自己释放；</li>
</ul>
</li>
<li><ul>
<li>环路等待条件：指在发生死锁时,必然存在一个进程——资源的环形链,即进程集合 {P0,P1,P2,···,Pn} 中的 P0 正在等待一个 P1 占用的资源；P1 正在等待 P2 占用的资源,……,Pn 正在等待已被 P0 占用的资源。</li>
</ul>
</li>
</ul>
<h1 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h1><ul>
<li>进程间通信主要包括：管道、命名管道、信号、消息队列、共享内存、内存映射、信号量、Socket： </li>
<li><ol>
<li>管道 管道也叫无名（匿名）管道,它是是 UNIX 系统 IPC（进程间通信）的最古老形式,所有的 UNIX 系统都支持这种通信机制。管道本质其实是内核中维护的一块内存缓冲区,Linux 系统中通过 pipe() 函数创建管道,会生成两个文件描述符,分别对应管道的读端和写端。无名管道只能用于具有亲缘关系的进程间的通信。</li>
</ol>
</li>
<li><ol start="2">
<li>命名管道 匿名管道,由于没有名字,只能用于亲缘关系的进程间通信。为了克服这个缺点,提出了有名管道（FIFO）,也叫命名管道、FIFO文件。有名管道（FIFO）不同于匿名管道之处在于它提供了一个路径名与之关联,以 FIFO 的文件形式存在于文件系统中,并且其打开方式与打开一个普通文件是一样的,这样即使与 FIFO 的创建进程不存在亲缘关系的进程,只要可以访问该路径,就能够彼此通过 FIFO 相互通信,因此,通过 FIFO 不相关的进程也能交换数据。</li>
</ol>
</li>
<li><ol start="3">
<li>信号 信号是 Linux 进程间通信的最古老的方式之一,是事件发生时对进程的通知机制,有时也称之为软件中断,它是在软件层次上对中断机制的一种模拟,是一种异步通信的方式。信号可以导致一个正在运行的进程被另一个正在运行的异步进程中断,转而处理某一个突发事件。</li>
</ol>
</li>
<li><ol start="4">
<li>消息队列 消息队列就是一个消息的链表,可以把消息看作一个记录,具有特定的格式以及特定的优先级,对消息队列有写权限的进程可以向消息队列中按照一定的规则添加新消息,对消息队列有读权限的进程则可以从消息队列中读走消息,消息队列是随内核持续的。</li>
</ol>
</li>
<li><ol start="5">
<li>共享内存 共享内存允许两个或者多个进程共享物理内存的同一块区域（通常被称为段）。由于一个共享内存段会称为一个进程用户空间的一部分,因此这种 IPC 机制无需内核介入。所有需要做的就是让一个进程将数据复制进共享内存中,并且这部分数据会对其他所有共享同一个段的进程可用。与管道等要求发送进程将数据从用户空间的缓冲区复制进内核内存和接收进程将数据从内核内存复制进用户空间的缓冲区的做法相比,这种 IPC 技术的速度更快。</li>
</ol>
</li>
<li><ol start="6">
<li>内存映射 内存映射（Memory-mapped I&#x2F;O）是将磁盘文件的数据映射到内存,用户通过修改内存就能修改磁盘文件。</li>
</ol>
</li>
<li><ol start="7">
<li>信号量 信号量主要用来解决进程和线程间并发执行时的同步问题,进程同步是并发进程为了完成共同任务采用某个条件来协调它们的活动。对信号量的操作分为 P 操作和 V 操作,P 操作是将信号量的值减 1,V 操作是将信号量的值加 1。当信号量的值小于等于 0 之后,再进行 P 操作时,当前进程或线程会被阻塞,直到另一个进程或线程执行了 V 操作将信号量的值增加到大于 0 之时。</li>
</ol>
</li>
<li><ol start="8">
<li>Socket 套接字（Socket）,就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端,提供了应用层进程利用网络协议交换数据的机制。Socket 一般用于网络中不同主机上的进程之间的通信。</li>
</ol>
</li>
</ul>
<h1 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h1><ul>
<li>MVC是一种设计模式,在这种模式下软件被分为三层,即Model（模型）、View（视图）、Controller（控制器）。</li>
<li>Model代表的是数据,View代表的是用户界面,Controller代表的是数据的处理逻辑,它是Model和View这两层的桥梁。</li>
<li>将软件分层的好处是,可以将对象之间的耦合度降低,便于代码的维护。 </li>
<li>Model：指从现实世界中抽象出来的对象模型,是应用逻辑的反应；它封装了数据和对数据的操作,是实际进行数据处理的地方（模型层与数据库才有交互）。</li>
<li>在MVC的三个部件中,模型拥有最多的处理任务。被模型返回的数据是中立的,模型与数据格式无关,这样一个模型能为多个视图提供数据,由于应用于模型的代码只需写一次就可以被多个视图重用,所以减少了代码的重复性。 </li>
<li>View：负责进行模型的展示,一般就是我们见到的用户界面。 </li>
<li>Controller：控制器负责视图和模型之间的交互,控制对用户输入的响应、响应方式和流程；它主要负责两方面的动作,一是把用户的请求分发到相应的模型,二是吧模型的改变及时地反映到视图上。 </li>
<li>加分回答 为了解耦以及提升代码的可维护性,服务端开发一般会对代码进行分层,服务端代码一般会分为三层：表现层、业务层、数据访问层。在浏览器访问服务器时,请求会先到达表现层 最典型的MVC就是jsp+servlet+javabean模式。 </li>
<li>以JavaBean作为模型,既可以作为数据模型来封装业务数据,又可以作为业务逻辑模型来包含应用的业务操作。 JSP作为视图层,负责提供页面为用户展示数据,提供相应的表单（Form）来用于用户的请求,并在适当的时候（点击按钮）向控制器发出请求来请求模型进行更新。 </li>
<li>Serlvet作为控制器,用来接收用户提交的请求,然后获取请求中的数据,将之转换为业务模型需要的数据模型,然后调用业务模型相应的业务方法进行更新,同时根据业务执行结果来选择要返回的视图。 当然,这种方式现在已经不那么流行了,</li>
<li>Spring MVC框架已经成为了MVC模式的最主流实现。 </li>
<li>Spring MVC框架是基于Java的实现了MVC框架模式的请求驱动类型的轻量级框架。前端控制器是DispatcherServlet接口实现类,映射处理器是HandlerMapping接口实现类,视图解析器是ViewResolver接口实现类,页面控制器是Controller接口实现类</li>
</ul>
<h1 id="redis的数据类型"><a href="#redis的数据类型" class="headerlink" title="redis的数据类型"></a>redis的数据类型</h1><ul>
<li>Redis主要提供了5种数据结构：字符串(string)、哈希(hash)、列表(list)、集合(set)、有序集合(zset)。Redis还提供了Bitmap、HyperLogLog、Geo类型,但这些类型都是基于上述核心数据类型实现的。</li>
<li>5.0版本中,Redis新增加了Streams数据类型,它是一个功能强大的、支持多播的、可持久化的消息队列。 </li>
<li>string可以存储字符串、数字和二进制数据,除了值可以是String以外,所有的键也可以是string,string最大可以存储大小为2M的数据。 </li>
<li>list保证数据线性有序且元素可重复,它支持lpush、blpush、rpop、brpop等操作,可以当作简单的消息队列使用,一个list最多可以存储2^32-1个元素 hash的值本身也是一个键值对结构,最多能存储2^32-1个元素 </li>
<li>set是无序不可重复的,它支持多个set求交集、并集、差集,适合实现共同关注之类的需求,一个set最多可以存储2^32-1个元素 zset是有序不可重复的,它通过给每个元素设置一个分数来作为排序的依据,一个zset最多可以存储2^32-1个元素。 </li>
<li>加分回答 每种类型支持多个编码,每一种编码采取一个特殊的结构来实现 各类数据结构内部的编码及结构： </li>
<li>string：编码分为int、raw、embstr；</li>
<li>int底层实现为long,当数据为整数型并且可以用long类型表示时可以用long存储；</li>
<li>embstr底层实现为占一块内存的SDS结构,当数据为长度不超过32字节的字符串时,选择以此结构连续存储元数据和值；</li>
<li>raw底层实现为占两块内存的SDS,用于存储长度超过32字节的字符串数据,此时会在两块内存中分别存储元数据和值。 </li>
<li>list：编码分为ziplist、linkedlist和quicklist（3.2以前版本没有quicklist）。</li>
<li>ziplist底层实现为压缩列表,当元素数量小于2且所有元素长度都小于64字节时,使用这种结构来存储；</li>
<li>linkedlist底层实现为双端链表,当数据不符合ziplist条件时,使用这种结构存储；</li>
<li>3.2版本之后list一般采用quicklist的快速列表结构来代替前两种。 </li>
<li>hash：编码分为ziplist、hashtable两种,</li>
<li>其中ziplist底层实现为压缩列表,当键值对数量小于2,并且所有的键值长度都小于64字节时使用这种结构进行存储；</li>
<li>hashtable底层实现为字典,当不符合压缩列表存储条件时,使用字典进行存储。 </li>
<li>set：编码分为inset和hashtable,intset底层实现为整数集合,当所有元素都是整数值且数量不超过2个时使用该结构存储,否则使用字典结构存储。 </li>
<li>zset：编码分为ziplist和skiplist,当元素数量小于128,并且每个元素长度都小于64字节时,使用ziplist压缩列表结构存储,否则使用skiplist的字典+跳表的结构存储。</li>
</ul>
<h1 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h1><ul>
<li>乐观锁：乐观锁总是假设最好的情况,每次去拿数据的时候都认为别人不会修改,所以不会上锁,但是在更新的时候会判断一下在此期间别人有没有去更新这个数据,可以使用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型,这样可以提高吞吐量**,像数据库提供的类似于write_condition机制,其实都是提供的乐观锁。 </li>
<li>悲观锁：悲观锁总是假设最坏的情况,每次去拿数据的时候都认为别人会修改,所以每次在拿数据的时候都会上锁,这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用,其它线程阻塞,用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制,比如行锁,表锁等,读锁,写锁等,都是在做操作之前先上锁。 加分回答 两种锁的使用场景 乐观锁： GIT,SVN,CVS等代码版本控制管理器,就是一个乐观锁使用很好的场景,</li>
<li>例如：A、B程序员,同时从SVN服务器上下载了code.html文件,当A完成提交后,此时B再提交,那么会报版本冲突,此时需要B进行版本处理合并后,再提交到服务器。这其实就是乐观锁的实现全过程。如果此时使用的是悲观锁,那么意味者所有程序员都必须一个一个等待操作提交完,才能访问文件,这是难以接受的。 悲观锁： 悲观锁的好处在于可以减少并发,但是当并发量非常大的时候,由于锁消耗资源、锁定时间过长等原因,很容易导致系统性能下降,资源消耗严重。因此一般我们可以在并发量不是很大,并且出现并发情况导致的异常用户和系统都很难以接受的情况下,会选择悲观锁进行。</li>
</ul>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><ul>
<li>创建型包括：单例模式、工厂方法模式、抽象工厂模式、建造者模式和原型模式； </li>
<li>结构型包括：代理模式、装饰模式、适配器模式、组合模式、桥梁模式、外观模式和享元模式； </li>
<li>行为型包括：模板方法模式、命令模式、责任链模式、策略模式、迭代器模式、中介者模式、观察者模式、备忘录模式、访问者模式、状态模式和解释器模式。 面试中不要求23种设计模式全部了解,但至少应掌握单例模式和工厂模式。 加分回答 可以说出知道的框架所用到的设计模式或底层设计模式,例如Spring中的单例模式、工厂模式,AQS的模板模式等等。</li>
</ul>
]]></content>
      <categories>
        <category>Java中的易错点</category>
      </categories>
  </entry>
  <entry>
    <title>把jar包打包成exe</title>
    <url>/2022/11/19/jar%E5%88%B0exe/</url>
    <content><![CDATA[<h1 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h1><ul>
<li>我们所使用的工具是exe4j 和 inno setup</li>
</ul>
<h2 id="exe4j"><a href="#exe4j" class="headerlink" title="exe4j"></a>exe4j</h2><ul>
<li>简单来说这个就是个工具，可以把java的jar包打包成exe的</li>
<li>可以让其他由java运行环境的机器运行这个jar</li>
<li>而且还可以稍微做到保密的程度</li>
<li>exe4j 是一个帮助你集成 Java 应用程序到 Windows 操作环境的 java 可执行文件生成工具，无论这些应用是用于服务器，还是图形用户界面（GUI）或命令行的应用程序。如果你想在任务管理器中及 Windows XP 分组的用户友好任务栏里以你的进程名取代 java.exe 的出现，那么 exe4j 可以完成这个工作。exe4j 帮助你以一种安全的方式启动你的 java 应用程序，来显示本地启动画面，检测及发布合适的 JRE 和 JDK，以及进行启动时所发生的错误处理等，以至于更多。</li>
<li>关于exe4j的破解我就不多赘述了，懂的都懂</li>
<li>接下来是实际操作</li>
<li>下面是开始界面</li>
<li><img src="https://pic.imgdb.cn/item/6378540416f2c2beb192c11f.jpg" alt="开始界面"></li>
<li>然后接下来</li>
<li>选择jar到exe的模式</li>
<li><img src="https://pic.imgdb.cn/item/6378546916f2c2beb1932dfa.jpg"></li>
<li>然后接下来要选择你的输出路径</li>
<li><img src="https://pic.imgdb.cn/item/637854cd16f2c2beb193c56c.jpg"></li>
<li>接下来选择我们的启动方式，我选择的是控制台启动</li>
<li><img src="https://pic.imgdb.cn/item/6378550616f2c2beb1942a62.jpg"></li>
<li>接下来选择可以在32位和64位机器上都可以运行</li>
<li><img src="https://pic.imgdb.cn/item/6378553316f2c2beb194a3be.jpg"></li>
<li><img src="https://pic.imgdb.cn/item/6378556516f2c2beb1952fa9.jpg"></li>
<li>接下来选择我们exe要执行的主类</li>
<li>我这个项目是boot项目，所以选择的是这个</li>
<li><img src="https://pic.imgdb.cn/item/6378558416f2c2beb195719f.jpg"></li>
<li>然后设置我们的jdk版本</li>
<li><img src="https://pic.imgdb.cn/item/637855bd16f2c2beb195f1d6.jpg"></li>
<li><img src="https://pic.imgdb.cn/item/637855dc16f2c2beb1962843.jpg"></li>
<li>最后一直点击next就好了</li>
<li><img src="https://pic.imgdb.cn/item/6378564016f2c2beb196ce41.jpg"></li>
<li>这样我们就打包完成了</li>
<li>但是这样的打包只能再有jdk的环境中运行</li>
<li>接下来我们要为这个添加依赖</li>
</ul>
<h2 id="inno-setup"><a href="#inno-setup" class="headerlink" title="inno setup"></a>inno setup</h2><ul>
<li>简单来说就是个绑定依赖的程序</li>
<li>打开</li>
<li><img src="https://pic.imgdb.cn/item/6378572316f2c2beb198e2a2.jpg"></li>
<li><img src="https://pic.imgdb.cn/item/6378577616f2c2beb199aecb.jpg"></li>
<li><img src="https://pic.imgdb.cn/item/6378579d16f2c2beb19a1b5f.jpg"></li>
<li>然后配置我们的名称和版本号</li>
<li>然后选择我们，刚刚弄个出来的exe程序</li>
<li><img src="https://pic.imgdb.cn/item/637858cd16f2c2beb19b780b.jpg"></li>
<li>然后就一直傻瓜式next</li>
<li><img src="https://pic.imgdb.cn/item/6378593316f2c2beb19be141.jpg"></li>
<li>设置输出文件夹</li>
<li>图标</li>
<li>以及运行时的密码</li>
<li>然后一直next就好</li>
<li>然后会跳出两个对话框</li>
<li>全部选择是</li>
<li>最后会出现这个东西</li>
<li><img src="https://pic.imgdb.cn/item/637859e916f2c2beb19d21f9.jpg"></li>
<li>就代表导入依赖了</li>
<li>接下来我们要对他进行修改</li>
<li><img src="https://pic.imgdb.cn/item/63785a3d16f2c2beb19d8050.jpg"></li>
<li>这个是自己电脑本机的jdk路径</li>
<li>然后还有要在这里加上MYjrename</li>
<li><img src="https://pic.imgdb.cn/item/63785a8116f2c2beb19dd2fa.jpg"></li>
<li>最后运行就成功了</li>
<li>他会给你成一个setup文件，通过这个文件安装的exe</li>
<li>就会自己带环境了</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>杂货技术栈</category>
      </categories>
  </entry>
  <entry>
    <title>Sealos</title>
    <url>/2022/12/12/k8s%E7%9A%84%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7Sealos/</url>
    <content><![CDATA[<h1 id="Sealos"><a href="#Sealos" class="headerlink" title="Sealos"></a>Sealos</h1><p>是部署工具 ， 用go语言开发的干净且清凉的k8s的部署工具</p>
<h1 id="Sealos的优势"><a href="#Sealos的优势" class="headerlink" title="Sealos的优势"></a>Sealos的优势</h1><p>他的证书有效时间是100年</p>
<p>不依赖ansible haproxy keepalived 是零依赖</p>
<p>离线安装</p>
<p>kubelet其默认通过ipvs实现localLB，占用资源少稳定可靠</p>
<p>更容易在集群节点上增加&#x2F;删除管理</p>
<p>上千用户使用，在阿里云oss上有，不用担心网速的问题</p>
<p>dashboard ingress prometheus 等 APP 同样支持离线打包安装</p>
<p>当不超过三个独立集群，都是免费的，超过则要订阅服务了</p>
<h1 id="rancher是目前企业中认知度最好的-：-周六周日补上"><a href="#rancher是目前企业中认知度最好的-：-周六周日补上" class="headerlink" title="rancher是目前企业中认知度最好的 ： 周六周日补上"></a>rancher是目前企业中认知度最好的 ： 周六周日补上</h1><h1 id="Sealos常用的参数"><a href="#Sealos常用的参数" class="headerlink" title="Sealos常用的参数"></a>Sealos常用的参数</h1><p>–master master的节点服务器地址</p>
<p>–node node节点服务器地址列表</p>
<p>–user 服务器 SSH 用户名</p>
<p>–password 服务器 SSH 用户的密码</p>
<p>–pkg-url 离线包所在的位置，可以是本地，也可以是http</p>
<p>–version 指定要部署的k8s的版本</p>
<p> –pk 指定 SSH 私钥所在的位置 默认是在&#x2F;root&#x2F;.ssh&#x2F;id_rsa</p>
<p>–podcidr 自定义 pod网段</p>
<p>–svccidr 参数指定clusterip网段</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>需要纯净的linux ： centos7 对于centos8 需要调试很多的</p>
<p>或者是ubantu</p>
<p>尽量用新版本的Sealos</p>
<p>注意 ： 服务器时间必须同步</p>
<p>主机名字不可以重复</p>
<p>master的cpu要2个以上</p>
<p>cni组件选择cilium 时的内核版本不低于5.4</p>
<p>k8s一般用回退两个版本</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>47.25</p>
]]></content>
      <categories>
        <category>云原生（哔哩哔哩）</category>
      </categories>
  </entry>
  <entry>
    <title>sql练习</title>
    <url>/2022/11/05/sql%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> bigdata;</span><br><span class="line">use bigdata;</span><br><span class="line"></span><br><span class="line"><span class="comment">--部门表</span></span><br><span class="line">dept部门表(deptno部门编号/dname部门名称/loc地点)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept (</span><br><span class="line">    deptno <span class="type">numeric</span>(<span class="number">2</span>),</span><br><span class="line">    dname <span class="type">varchar</span>(<span class="number">14</span>),</span><br><span class="line">    loc <span class="type">varchar</span>(<span class="number">13</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span> (<span class="number">10</span>, <span class="string">&#x27;ACCOUNTING&#x27;</span>, <span class="string">&#x27;NEW YORK&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span> (<span class="number">20</span>, <span class="string">&#x27;RESEARCH&#x27;</span>, <span class="string">&#x27;DALLAS&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span> (<span class="number">30</span>, <span class="string">&#x27;SALES&#x27;</span>, <span class="string">&#x27;CHICAGO&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span> (<span class="number">40</span>, <span class="string">&#x27;OPERATIONS&#x27;</span>, <span class="string">&#x27;BOSTON&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--工资等级表</span></span><br><span class="line">salgrade工资等级表(grade 等级/losal此等级的最低/hisal此等级的最高)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> salgrade (</span><br><span class="line">    grade <span class="type">numeric</span>,</span><br><span class="line">    losal <span class="type">numeric</span>,</span><br><span class="line">    hisal <span class="type">numeric</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">1</span>, <span class="number">700</span>, <span class="number">1200</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">2</span>, <span class="number">1201</span>, <span class="number">1400</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">3</span>, <span class="number">1401</span>, <span class="number">2000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">4</span>, <span class="number">2001</span>, <span class="number">3000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">5</span>, <span class="number">3001</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--员工表</span></span><br><span class="line">emp员工表(empno员工号/ename员工姓名/job工作/mgr上级编号/hiredate受雇日期/sal薪金/comm佣金/deptno部门编号)</span><br><span class="line">工资 ＝ 薪金 ＋ 佣金</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">    empno <span class="type">numeric</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    job <span class="type">varchar</span>(<span class="number">9</span>),</span><br><span class="line">    mgr <span class="type">numeric</span>(<span class="number">4</span>),</span><br><span class="line">    hiredate datetime,</span><br><span class="line">    sal <span class="type">numeric</span>(<span class="number">7</span>, <span class="number">2</span>),</span><br><span class="line">    comm <span class="type">numeric</span>(<span class="number">7</span>, <span class="number">2</span>),</span><br><span class="line">    deptno <span class="type">numeric</span>(<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7369</span>, <span class="string">&#x27;SMITH&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7902</span>, <span class="string">&#x27;1980-12-17&#x27;</span>, <span class="number">800</span>, <span class="keyword">null</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7499</span>, <span class="string">&#x27;ALLEN&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-02-20&#x27;</span>, <span class="number">1600</span>, <span class="number">300</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7521</span>, <span class="string">&#x27;WARD&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-02-22&#x27;</span>, <span class="number">1250</span>, <span class="number">500</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7566</span>, <span class="string">&#x27;JONES&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>, <span class="string">&#x27;1981-04-02&#x27;</span>, <span class="number">2975</span>, <span class="keyword">null</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7654</span>, <span class="string">&#x27;MARTIN&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-09-28&#x27;</span>, <span class="number">1250</span>, <span class="number">1400</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7698</span>, <span class="string">&#x27;BLAKE&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>, <span class="string">&#x27;1981-05-01&#x27;</span>, <span class="number">2850</span>, <span class="keyword">null</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7782</span>, <span class="string">&#x27;CLARK&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>, <span class="string">&#x27;1981-06-09&#x27;</span>, <span class="number">2450</span>, <span class="keyword">null</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7788</span>, <span class="string">&#x27;SCOTT&#x27;</span>, <span class="string">&#x27;ANALYST&#x27;</span>, <span class="number">7566</span>, <span class="string">&#x27;1982-12-09&#x27;</span>, <span class="number">3000</span>, <span class="keyword">null</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7839</span>, <span class="string">&#x27;KING&#x27;</span>, <span class="string">&#x27;PRESIDENT&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;1981-11-17&#x27;</span>, <span class="number">5000</span>, <span class="keyword">null</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7844</span>, <span class="string">&#x27;TURNER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-09-08&#x27;</span>, <span class="number">1500</span>, <span class="number">0</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7876</span>, <span class="string">&#x27;ADAMS&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7788</span>, <span class="string">&#x27;1983-01-12&#x27;</span>, <span class="number">1100</span>, <span class="keyword">null</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7900</span>, <span class="string">&#x27;JAMES&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-12-03&#x27;</span>, <span class="number">950</span>, <span class="keyword">null</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7902</span>, <span class="string">&#x27;FORD&#x27;</span>, <span class="string">&#x27;ANALYST&#x27;</span>, <span class="number">7566</span>, <span class="string">&#x27;1981-12-03&#x27;</span>, <span class="number">3000</span>, <span class="keyword">null</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7934</span>, <span class="string">&#x27;MILLER&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7782</span>, <span class="string">&#x27;1982-01-23&#x27;</span>, <span class="number">1300</span>, <span class="keyword">null</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>查询出部门编号为<span class="number">30</span>的所有员工的编号和姓名</span><br><span class="line"></span><br><span class="line">	<span class="keyword">table</span>： emp</span><br><span class="line">	查什么： </span><br><span class="line">		<span class="number">1.</span>维度：<span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">		<span class="number">2.</span>指标: 聚合函数</span><br><span class="line">		<span class="number">3.</span>普普通通的字段：	编号和姓名</span><br><span class="line">	怎么查：</span><br><span class="line">		<span class="keyword">where</span>：</span><br><span class="line">			部门编号为<span class="number">30</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>找出部门编号为<span class="number">10</span>中所有经理，和部门编号为<span class="number">20</span>中所有销售员的详细资料。</span><br><span class="line"><span class="number">3.</span>查询所有员工详细信息，用工资降序排序，如果工资相同使用入职日期升序排序</span><br><span class="line"><span class="number">4.</span>列出薪金大于<span class="number">1500</span>的各种工作及从事此工作的员工人数。</span><br><span class="line"><span class="number">5.</span>列出在销售部工作的员工的姓名，假定不知道销售部的部门编号。</span><br><span class="line"><span class="number">6.</span>查询姓名以S开头的\以S结尾\包含S字符\第二个字母为L  __</span><br><span class="line"><span class="number">7.</span>查询每种工作的最高工资、最低工资、人数</span><br><span class="line"><span class="number">8.</span>列出薪金 高于 公司平均薪金的所有员工号，员工姓名，所在部门名称，上级领导，工资，工资等级</span><br><span class="line"><span class="number">9.</span>列出薪金  高于  在各自部门工作的员工的平均薪金的员工姓名和薪金、部门名称。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">80</span>% sqlboy sqlgirl</span><br><span class="line"><span class="number">20</span>% 大数据平台</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="结题"><a href="#结题" class="headerlink" title="结题"></a>结题</h1><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><ul>
<li>查询出部门编号为30的所有员工的编号和姓名</li>
<li>确定部门编号的条件 where deptno &#x3D; 30</li>
<li>确定所要的信息 ename ， epmpno</li>
<li>从员工表里筛选</li>
<li><code> select empno ,ename from emp where deptno = 30;</code></li>
<li><code> select empno ,ename from emp where deptno in (30);</code></li>
</ul>
<h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><ul>
<li>找出部门编号为10中所有经理，和部门编号为20中所有销售员的详细资料。</li>
<li>确定条件 ： </li>
<li>职业为经理的（MANAGER） ，部门编号为 10</li>
<li>职业为销售员的（SALESMAN） ， 部门编号为 20</li>
</ul>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><ul>
<li><code>select * from emp where job = &quot;MANAGER&quot; and deptno = 10;</code></li>
<li><code>select * from emp where job = &quot;SALESMAN&quot; and  deptno = 20;</code></li>
</ul>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><ul>
<li><code>select * from emp where job in (&quot;MANAGER&quot;) and deptno = 10;</code></li>
<li><code>select * from emp where job in (&quot;SALESMAN&quot;) and  deptno = 20;</code></li>
</ul>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><ul>
<li><code>select * from emp where job in (&quot;SALESMAN&quot;) and  deptno = 20;</code></li>
<li><code>select * from emp where job in (&quot;MANAGER&quot;) and deptno = 10;</code></li>
</ul>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><ul>
<li><code>select * from emp where (job, deptno) in ((&quot;SALESMAN&quot;, 20));</code></li>
<li><code>select * from emp where (job, deptno) in ((&quot;MANAGER&quot;, 10));</code></li>
</ul>
<h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><ul>
<li><code>select * from emp where (job, deptno) in ((&quot;SALESMAN&quot;, 20)  , (&quot;MANAGER&quot;, 10));</code></li>
</ul>
<h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><ul>
<li>查询所有员工详细信息，用工资降序排序，如果工资相同使用入职日期升序排序</li>
<li>条件 ：工资和入职时间</li>
<li>工资 ＝ 薪金 ＋ 佣金</li>
<li>但是mysql里一个值和null相加会变成null</li>
<li>通过 ifnull  或者 coalesce  进行转化</li>
<li>所以要转化 </li>
<li>这个题有两种解法</li>
</ul>
<h3 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h3><ul>
<li>先转化</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">(sal + yy) <span class="keyword">as</span> hh ,</span><br><span class="line">(sal + kk) <span class="keyword">as</span> ii,</span><br><span class="line">hiredate</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    hiredate,</span><br><span class="line">    sal,</span><br><span class="line">    <span class="built_in">ifnull</span>(comm , <span class="number">0</span>) <span class="keyword">as</span> yy,</span><br><span class="line">    coalesce(comm , <span class="number">0</span>) <span class="keyword">as</span> kk</span><br><span class="line">    <span class="keyword">from</span> emp</span><br><span class="line">) <span class="keyword">as</span> hyy</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hh <span class="keyword">desc</span>,hiredate <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h3><ul>
<li>转化和展示一起做</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">hiredate,</span><br><span class="line"><span class="built_in">ifnull</span>((sal + comm) , sal) <span class="keyword">as</span> total,</span><br><span class="line">coalesce((sal + comm) , sal) <span class="keyword">as</span> ti</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> total <span class="keyword">desc</span> , hiredate <span class="keyword">asc</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><ul>
<li>列出薪金大于1500的各种工作及从事此工作的员工人数</li>
<li>条件 ： 薪金 就是<code>sal &gt; 1500</code> 的<code>工作</code> 求<code>人数</code></li>
<li>薪金的条件可以用<code>where</code> 或者<code>having</code></li>
<li>工作可以用<code>group by job</code></li>
<li>人数可以用count</li>
</ul>
<h3 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h3><ul>
<li><code>select job, count(*) from emp where sal &gt; 1500 group by job;</code></li>
</ul>
<h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><ul>
<li>列出在销售部工作的员工的姓名，假定不知道销售部的部门编号</li>
<li>条件 ：  不知道部门编号 但是我们可以从表中获取</li>
</ul>
<h3 id="1-3"><a href="#1-3" class="headerlink" title="1"></a>1</h3><ul>
<li><code>select ename from emp left join dept on dept.deptno = emp.deptno where dname = &quot;SALES&quot; ;</code></li>
</ul>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h3><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">    deptno</span><br><span class="line">    <span class="keyword">from</span> dept</span><br><span class="line">    <span class="keyword">where</span> dname = <span class="string">&quot;SALES&quot;</span> </span><br><span class="line">) = emp.deptno ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="title">in</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">select</span> </span></span></span><br><span class="line"><span class="params"><span class="function">    deptno</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">from</span> dept</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">where</span> dname = <span class="string">&quot;SALES&quot;</span> </span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span> ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><ul>
<li>查询姓名以S开头的\以S结尾\包含S字符\第二个字母为L</li>
<li>两种方式 like 或者正则</li>
</ul>
<h3 id="1-4"><a href="#1-4" class="headerlink" title="1"></a>1</h3><ul>
<li><code>select ename from emp where ename like &quot;%s%&quot; or  ename like &quot;_L&quot;; </code></li>
</ul>
<h3 id="2-3"><a href="#2-3" class="headerlink" title="2"></a>2</h3><ul>
<li><code>select ename from emp where ename REGEXP &#39;*s*&#39;or ename REGEXP &#39;^.L&#39;;</code></li>
</ul>
<h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><ul>
<li>查询每种工作的最高工资、最低工资、人数</li>
<li>条件 ： <code>工资</code> ， <code>最高工资</code> ， <code>最低工资</code> ， <code>人数</code></li>
<li>这个题目前我所想到的有两种</li>
<li>第一是慢慢做 ，用嵌套的方式 ，</li>
<li>优点 ： 不用动脑</li>
<li>缺点 ： 代码量比较多</li>
<li>第二个是第一个的优化版本 </li>
<li>优点 ： 代码量少很多</li>
<li>缺点 : 难理解</li>
<li></li>
</ul>
<h3 id="1-5"><a href="#1-5" class="headerlink" title="1"></a>1</h3><ul>
<li>我们先获取基本的数据源  </li>
<li>获取工资的情况 ，以及各种职业所对应的工资 及其人数</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal1,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job,sal1;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>接下来是获取最高工资 和最低工资 ，以及工作的种类 ,以及总人数（最高工资，以及最低工资的）</li>
</ul>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> max(sal1),min(sal1),job,count<span class="comment">(*)</span></span><br><span class="line"><span class="comment">from(select </span></span><br><span class="line"><span class="comment">(ifnull((sal + comm) , sal)) as sal1,</span></span><br><span class="line"><span class="comment">job,</span></span><br><span class="line"><span class="comment">count(*)</span> <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job,sal1) <span class="keyword">as</span> king <span class="keyword">group</span> <span class="keyword">by</span> job<span class="punctuation">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>接下来 我们只需要连接上述的两个表 </li>
<li>一个表里对应的是每个人所对应的工资以及职业</li>
<li>因为一个表里是我们的最高的工资，最低的工资以及他所对应的工作 和总人数</li>
<li>相当于第二个表当我们的筛选条件 ， 如果符合筛选条件 就从第一个表选出这条数据</li>
<li>然后获得符合条件的人数</li>
<li>根据以上分析 ， 我们采用左连接的方式 ，</li>
<li>内连接可能会丢值 ，不过在此题中不会丢值</li>
<li>如下 ：</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">sal1,</span><br><span class="line">max_sal,</span><br><span class="line">min_sal,</span><br><span class="line">tjob,</span><br><span class="line">total_people</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal1) <span class="keyword">as</span> max_sal,<span class="built_in">min</span>(sal1) <span class="keyword">as</span> min_sal,job <span class="keyword">as</span> tjob,<span class="built_in">count</span>(*)</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line">(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal1,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job,sal1) <span class="keyword">as</span> king <span class="keyword">group</span> <span class="keyword">by</span> job) <span class="keyword">as</span> KING  </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal1,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job,sal1) <span class="keyword">as</span> yu  </span><br><span class="line"><span class="keyword">on</span> KING.tjob = yu.job <span class="keyword">and</span> yu.sal1 = KING.max_sal <span class="keyword">or</span> yu.sal1 = KING.min_sal; </span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="2-4"><a href="#2-4" class="headerlink" title="2"></a>2</h3><ul>
<li>第二种方法 ， 我们所采用的是union</li>
<li>而不是连接</li>
<li>我们先获取 每种工作的 最高工资 和最低工资 以及工作种类 ，以及总共人数</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">               <span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_max,</span><br><span class="line">               <span class="built_in">min</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_min,</span><br><span class="line">               job,</span><br><span class="line">               <span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line">               <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>然后我们现在要做的就是统计人数了</li>
<li>我们要先判断他的最大工资和11最小工资是不是相等</li>
<li>因为相等的话，他会默认把一个人分最大，一个人分最小</li>
<li>所以要分开</li>
<li>下面就是如果最大工资和最小工资相等的时候的做法</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">total_people <span class="keyword">as</span> max_people ,(sal_max - sal_max) <span class="keyword">as</span> min_people,job,sal_max,sal_min</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line"><span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_max,</span><br><span class="line"><span class="built_in">min</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_min,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job)  <span class="keyword">as</span> king  <span class="keyword">group</span>  <span class="keyword">by</span> job <span class="keyword">having</span> sal_max = sal_min;</span><br></pre></td></tr></table></figure>


<ul>
<li>下面是不相等的时候</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="built_in">count</span>(sal_max) <span class="keyword">as</span> max_people,<span class="built_in">count</span>(sal_min) <span class="keyword">as</span> min_people,job,sal_max,sal_min</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line"><span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_max,</span><br><span class="line"><span class="built_in">min</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_min,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job)  <span class="keyword">as</span> king  <span class="keyword">group</span>  <span class="keyword">by</span> job <span class="keyword">having</span> sal_max != sal_min</span><br></pre></td></tr></table></figure>


<ul>
<li>我这里是用的<code>having</code> ， 因为我把条件放在<code>group by</code>后面了 ，这两个也可用where的不过要放在<code>group by</code>之前</li>
<li>接下来，我们用union就可以 ， 因为 我把他们的别名起的一样 ，而且列也能对的上</li>
<li>我们就可以直接用union了</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="built_in">count</span>(sal_max) <span class="keyword">as</span> max_people,<span class="built_in">count</span>(sal_min) <span class="keyword">as</span> min_people,job,sal_max,sal_min</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line"><span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_max,</span><br><span class="line"><span class="built_in">min</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_min,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job)  <span class="keyword">as</span> king <span class="keyword">where</span> sal_max != sal_min <span class="keyword">group</span>  <span class="keyword">by</span> job </span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">total_people <span class="keyword">as</span> max_people ,(sal_max - sal_max) <span class="keyword">as</span> min_people,job,sal_max,sal_min</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line"><span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_max,</span><br><span class="line"><span class="built_in">min</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_min,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job)  <span class="keyword">as</span> king  <span class="keyword">group</span>  <span class="keyword">by</span> job <span class="keyword">having</span> sal_max = sal_min;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="第七题的附加题"><a href="#第七题的附加题" class="headerlink" title="第七题的附加题"></a>第七题的附加题</h2><ul>
<li>找出最高的工资 最低工资 以及人数 ，职业</li>
<li>这个是我没读题的时候 ，看错题意了 ，结果做出个这么个玩意 ，姑且也当作一个题把。</li>
<li>条件 ： 所有工作中 ，<code>最高工资</code> , <code>最低工资</code> ， <code>人数</code></li>
</ul>
<h3 id="1-6"><a href="#1-6" class="headerlink" title="1"></a>1</h3><ul>
<li>对于这个问题 ， 我们要先找到数据源 ，就是说，我们现在需要最大工资 和最小工资 ，那么为我们要先搞出这样有一个表</li>
<li><code>select max(ifnull((sal + comm) , sal)) as max_sal, min(coalesce((sal + comm) , sal)) as min_sal,count(*) from emp ;</code></li>
<li>这个是统计所有工作中的最大和最小工资</li>
<li>然后我们要找出人数以及职业</li>
<li>这相当于我们现在有了最大最小的筛选条件 ，去有工资和职业，以及人数的表中筛选就好</li>
<li>接下来，我们就要创建一个表有工资和职业，以及人数</li>
<li><code>select job, (ifnull((sal + comm) , sal)) as sal1,count(sal) as total_people from emp  group by sal1 , job;</code></li>
<li>接下来我们就要进行筛选了 ， 最简单的筛选就是把两个表链接上</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">sal1,</span><br><span class="line">job,</span><br><span class="line">total_people</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> <span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> max_sal, <span class="built_in">min</span>(coalesce((sal + comm) , sal))  <span class="keyword">as</span> min_sal <span class="keyword">from</span> emp ) <span class="keyword">as</span> king </span><br><span class="line"></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line"></span><br><span class="line">(<span class="keyword">select</span> job, (<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal1,<span class="built_in">count</span>(sal) <span class="keyword">as</span> total_people <span class="keyword">from</span> emp  <span class="keyword">group</span> <span class="keyword">by</span> sal1 , job) <span class="keyword">as</span> kk </span><br><span class="line"><span class="keyword">on</span> max_sal = sal1 <span class="keyword">or</span> min_sal =sal1 ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>但是做到这里其实还可以进行优化 ， 我们可以不用链接 ， 但是上述链接是小表驱动大表的，我们也可以反过来</li>
<li>但是用in的时候我们不能用一列去匹配两列</li>
<li>因为我们最开始的数据源，分出来的是两列</li>
<li>现在我们要通过别名，把两列变成一列</li>
<li><code>select max(ifnull((sal + comm) , sal)) as sal from emp union select min(coalesce((sal + comm) , sal))  as sal from emp;</code></li>
<li>然后我们就可以用where进行匹配了</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">sal1,</span><br><span class="line">job,</span><br><span class="line">total_people</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> job, (<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal1,<span class="built_in">count</span>(sal) <span class="keyword">as</span> total_people <span class="keyword">from</span> emp  <span class="keyword">group</span> <span class="keyword">by</span> sal1 , job) <span class="keyword">as</span> kk </span><br><span class="line"><span class="keyword">where</span> sal1 <span class="keyword">in</span> (<span class="keyword">select</span> <span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal <span class="keyword">from</span> emp <span class="keyword">union</span> <span class="keyword">select</span> <span class="built_in">min</span>(coalesce((sal + comm) , sal))  <span class="keyword">as</span> sal <span class="keyword">from</span> emp);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这里的in也可以用等号替代 ，只不过如果是等号，那么你后面的条件要拆开 ，而且 中间要用or</li>
</ul>
<h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><ul>
<li>列出薪金 高于 公司平均薪金的所有员工号，员工姓名，所在部门名称，上级领导，工资，工资等级</li>
<li>条件 ： <code>薪金</code>高于 <code>平均薪金</code> ， <code>工资等级</code> ，<code>部门名称</code> </li>
<li>通过以上条件我们可知 ，这个是三个表都要用到的</li>
</ul>
<h3 id="1-7"><a href="#1-7" class="headerlink" title="1"></a>1</h3><ul>
<li>老样子 ： 我们要先获取基本的数据源</li>
<li><code>select avg(sal) as sal_avg from emp</code></li>
<li>上述是获取平均薪金 ，是要作为我们的判断条件的</li>
<li>然后求出薪金大于平均薪金的 进行初步筛选</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">deptno,</span><br><span class="line">sal,</span><br><span class="line">mgr</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> </span><br><span class="line"><span class="keyword">avg</span>(sal)</span><br><span class="line"><span class="keyword">from</span> emp);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>接下来我们要把初步筛选完成的表 和 部门表联合起来 ，原因是 部门表有部门编号作为连接点</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">deptno <span class="keyword">as</span> deptno1,</span><br><span class="line">sal,</span><br><span class="line">mgr</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> </span><br><span class="line"><span class="built_in">avg</span>(sal)</span><br><span class="line"><span class="keyword">from</span> emp)) <span class="keyword">as</span> Oavg_table <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> Oavg_table.deptno1=dept.deptno; </span><br></pre></td></tr></table></figure>


<ul>
<li>现在除了工资等级 ，和工资，其余的我们全都有了、</li>
<li>接下来，我们先加上工资 ，然后根据工资进行判断等级</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">(sal + commchange) <span class="keyword">as</span> earn</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line"><span class="built_in">ifnull</span>(comm , <span class="number">0</span>) <span class="keyword">as</span> commchange</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">deptno <span class="keyword">as</span> deptno1,</span><br><span class="line">sal,</span><br><span class="line">mgr</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> </span><br><span class="line"><span class="built_in">avg</span>(sal)</span><br><span class="line"><span class="keyword">from</span> emp)) <span class="keyword">as</span> Oavg_table <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> Oavg_table.deptno1=dept.deptno) <span class="keyword">as</span> setlist;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>接下来，我们要加上工资等级</li>
<li>在这里，我就偷个懒 因为平均薪金是2200多，那么你工资必不可能比这个少</li>
<li>那么工资等级也就不会是3及以下</li>
<li>一般的话是条件都要判断的 ，我这里就偷个懒</li>
<li>接下来，我们设置筛选条件 ，  因为工资等级没有能和别的表联合 ，或者union的列 ，那么我们只能一个个判断了</li>
<li>我们先判断大于3000的 并给与工资等级</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line"><span class="built_in">earn,</span></span><br><span class="line">((empno + <span class="number">5</span>) - empno) as level</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">(sal + commchange) as earn</span><br><span class="line">from(</span><br><span class="line">select</span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">ifnull(comm , <span class="number">0</span>) as commchange</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line">deptno as deptno1,</span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno) as setlist) as sal_tables where earn &gt;<span class="number">3000</span><span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>接下来是小于3000的</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line"><span class="built_in">earn,</span></span><br><span class="line">((empno + <span class="number">4</span>) - empno) as level</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">(sal + commchange) as earn</span><br><span class="line">from(</span><br><span class="line">select</span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">ifnull(comm , <span class="number">0</span>) as commchange</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line">deptno as deptno1,</span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno) as setlist) as sal_tables where earn &gt;<span class="number">2000</span> <span class="literal">and</span> earn &lt;=<span class="number">3000</span><span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>注意我这里是偷懒了，没有判断2000和更低的，原因在上面 ，如果想判断和上面两个一样</li>
<li>接下来 我们用unio  把他们链接到一起</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line"><span class="built_in">earn,</span></span><br><span class="line">((empno + <span class="number">5</span>) - empno) as level</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">(sal + commchange) as earn</span><br><span class="line">from(</span><br><span class="line">select</span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">ifnull(comm , <span class="number">0</span>) as commchange</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line">deptno as deptno1,</span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno) as setlist) as sal_tables where earn &gt;<span class="number">3000</span></span><br><span class="line">union</span><br><span class="line">select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line"><span class="built_in">earn,</span></span><br><span class="line">((empno + <span class="number">4</span>) - empno) as level</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">(sal + commchange) as earn</span><br><span class="line">from(</span><br><span class="line">select</span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">ifnull(comm , <span class="number">0</span>) as commchange</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line">deptno as deptno1,</span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno) as setlist) as sal_tables where earn &gt;<span class="number">2000</span> <span class="literal">and</span> earn &lt;=<span class="number">3000</span><span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>就可以了 ，上面的我做法是我没动脑子，直接一点点搞出来的</li>
</ul>
<h3 id="2-5"><a href="#2-5" class="headerlink" title="2"></a>2</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> empno,ename,dname,sal,mgr,<span class="built_in">ifnull</span>((sal + comm) , sal) <span class="keyword">as</span> earn , (sal + <span class="number">5</span>  - sal) <span class="keyword">as</span>  level <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span>  emp))  <span class="keyword">as</span> king <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> king.deptno=dept.deptno <span class="keyword">having</span> earn &gt;  <span class="number">3000</span></span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> empno,ename,dname,sal,mgr,<span class="built_in">ifnull</span>((sal + comm) , sal) <span class="keyword">as</span> earn , (sal + <span class="number">4</span>  - sal) <span class="keyword">as</span>  level <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span>  emp))  <span class="keyword">as</span> king <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> king.deptno=dept.deptno <span class="keyword">having</span> earn &lt;= <span class="number">3000</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-2"><a href="#3-2" class="headerlink" title="3"></a>3</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">king.ename,</span><br><span class="line">king.empno,</span><br><span class="line">e1.ename <span class="keyword">as</span> leader,</span><br><span class="line">king.earn,</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> earn <span class="keyword">Between</span> <span class="number">700</span> <span class="keyword">and</span> <span class="number">1200</span> <span class="keyword">then</span> <span class="number">1</span></span><br><span class="line">     <span class="keyword">when</span> earn <span class="keyword">Between</span> <span class="number">1200</span> <span class="keyword">and</span> <span class="number">1400</span> <span class="keyword">then</span> <span class="number">2</span></span><br><span class="line">     <span class="keyword">when</span> earn <span class="keyword">Between</span> <span class="number">1400</span> <span class="keyword">and</span> <span class="number">2000</span> <span class="keyword">then</span> <span class="number">3</span></span><br><span class="line">     <span class="keyword">when</span> earn <span class="keyword">Between</span> <span class="number">2000</span> <span class="keyword">and</span> <span class="number">3000</span> <span class="keyword">then</span> <span class="number">4</span></span><br><span class="line">     <span class="keyword">when</span> earn <span class="keyword">Between</span> <span class="number">3000</span> <span class="keyword">and</span> <span class="number">9990</span> <span class="keyword">then</span> <span class="number">5</span></span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line"><span class="keyword">as</span> sallevel</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">  <span class="keyword">select</span> ename , empno , deptno , <span class="built_in">ifnull</span>((sal + comm),sal) <span class="keyword">as</span> earn ,mgr </span><br><span class="line">  <span class="keyword">from</span> emp</span><br><span class="line">  <span class="keyword">where</span> sal &gt; (</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">avg</span>(sal)</span><br><span class="line">    <span class="keyword">from</span> emp</span><br><span class="line">  )</span><br><span class="line">) <span class="keyword">as</span> king </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> king.deptno=dept.deptno </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> emp e1 <span class="keyword">on</span> king.mgr = e1.empno;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">// 最好不用 ，因为笛卡尔积 会造成数据膨胀</span><br><span class="line">   <span class="keyword">select</span> </span><br><span class="line">   king.ename,</span><br><span class="line">   king.empno,</span><br><span class="line">   e1.ename <span class="keyword">as</span> leader,</span><br><span class="line">   king.earn,</span><br><span class="line">   s.grade</span><br><span class="line">   <span class="keyword">as</span> sallevel</span><br><span class="line">   <span class="keyword">from</span> (</span><br><span class="line">     <span class="keyword">select</span> ename , empno , deptno , <span class="built_in">ifnull</span>((sal + comm),sal) <span class="keyword">as</span> earn ,mgr </span><br><span class="line">     <span class="keyword">from</span> emp</span><br><span class="line">     <span class="keyword">where</span> sal &gt; (</span><br><span class="line">       <span class="keyword">select</span> <span class="built_in">avg</span>(sal)</span><br><span class="line">       <span class="keyword">from</span> emp</span><br><span class="line">     )</span><br><span class="line">   ) <span class="keyword">as</span> king </span><br><span class="line">   <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> king.deptno=dept.deptno </span><br><span class="line">   <span class="keyword">left</span> <span class="keyword">join</span> (</span><br><span class="line">     <span class="keyword">select</span> empno,</span><br><span class="line">     ename</span><br><span class="line">     <span class="keyword">from</span> emp</span><br><span class="line">   ) e1 <span class="keyword">on</span> king.mgr = e1.empno</span><br><span class="line">   cross <span class="keyword">join</span> salgrade <span class="keyword">as</span> s <span class="keyword">where</span> earn <span class="keyword">Between</span> losal <span class="keyword">and</span> hisal ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">king.ename,</span><br><span class="line">king.empno,</span><br><span class="line">e1.ename <span class="keyword">as</span> leader,</span><br><span class="line">king.earn,</span><br><span class="line">s.grade</span><br><span class="line"><span class="keyword">as</span> sallevel</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">  <span class="keyword">select</span> ename , empno , deptno , <span class="built_in">ifnull</span>((sal + comm),sal) <span class="keyword">as</span> earn ,mgr </span><br><span class="line">  <span class="keyword">from</span> emp</span><br><span class="line">  <span class="keyword">where</span> sal &gt; (</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">avg</span>(sal)</span><br><span class="line">    <span class="keyword">from</span> emp</span><br><span class="line">  )</span><br><span class="line">) <span class="keyword">as</span> king </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> king.deptno=dept.deptno </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (</span><br><span class="line">  <span class="keyword">select</span> empno,</span><br><span class="line">  ename</span><br><span class="line">  <span class="keyword">from</span> emp</span><br><span class="line">) e1 <span class="keyword">on</span> king.mgr = e1.empno</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> salgrade <span class="keyword">as</span> s <span class="keyword">on</span> earn &gt;= losal <span class="keyword">and</span> earn &lt;= hisal;</span><br></pre></td></tr></table></figure>


<h2 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h2><ul>
<li>列出薪金  高于  在各自部门工作的员工的平均薪金的员工姓名和薪金、部门名称</li>
<li>条件 ： 各个部门，<code>薪金</code>高于<code>各个部门</code>的<code>平均薪金</code></li>
</ul>
<h3 id="1-8"><a href="#1-8" class="headerlink" title="1"></a>1</h3><ul>
<li><p>我们可以先获取薪金，以及部门编号 ，并且按照他们进行划分</p>
</li>
<li><p>因为题目中主要要求的就是部门以及薪金</p>
</li>
<li><p><code>select  sal ,deptno from emp group by sal , deptno;</code></p>
</li>
<li><p>接下来我们求各个部门的平均薪金</p>
</li>
<li><p><code>select avg(sal) as sal_avg, deptno from (select  sal ,deptno from emp group by sal , deptno) as king group by deptno;</code></p>
</li>
<li><p>其实上述两部可以通过一步完成</p>
</li>
<li><p><code>select avg(sal) ,deptno from emp group by deptno;</code></p>
</li>
<li><p>就是不动脑子和动脑子的区别</p>
</li>
<li><p>不过一般没思路的时候把数据源写上，可能会有奇效</p>
</li>
<li><p>接下来找出高于平均薪金的信息</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> sal_avg, deptno <span class="keyword">from</span> (<span class="keyword">select</span>  sal ,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> sal , deptno) <span class="keyword">as</span> king <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> avg_basic <span class="keyword">left</span> <span class="keyword">join</span> emp</span><br><span class="line"><span class="keyword">on</span> emp.deptno=avg_basic.deptno  <span class="keyword">and</span> emp.sal &gt; avg_basic.sal_avg;</span><br></pre></td></tr></table></figure>
</li>
<li><p>这个是用左连接来实现的</p>
</li>
<li><p>其实还可以要用where来实现 , 不过比较复杂 ，就不在这里写了</p>
</li>
<li><p>接下来我们就合并部门输出就可以了</p>
</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span>  * </span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> sal_avg, deptno <span class="keyword">as</span> deptno1 <span class="keyword">from</span> (<span class="keyword">select</span>  sal ,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> sal , deptno) <span class="keyword">as</span> king <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> avg_basic <span class="keyword">left</span> <span class="keyword">join</span> emp</span><br><span class="line"><span class="keyword">on</span> emp.deptno=avg_basic.deptno1  <span class="keyword">and</span> emp.sal &gt; avg_basic.sal_avg) <span class="keyword">as</span> basicinfo <span class="keyword">left</span>  <span class="keyword">join</span> dept <span class="keyword">on</span> basicinfo.deptno1=dept.deptno;</span><br></pre></td></tr></table></figure>


<ul>
<li>这个可以用in替代</li>
<li>代码如下</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span>  * </span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> sal_avg, deptno <span class="keyword">as</span> deptno1 <span class="keyword">from</span> (<span class="keyword">select</span>  sal ,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> sal , deptno) <span class="keyword">as</span> king <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> avg_basic <span class="keyword">left</span> <span class="keyword">join</span> emp</span><br><span class="line"><span class="keyword">on</span> emp.deptno=avg_basic.deptno1  <span class="keyword">and</span> emp.sal &gt; avg_basic.sal_avg) <span class="keyword">as</span> basicinfo <span class="keyword">where</span> basicinfo.deptno1 <span class="keyword">in</span> (<span class="keyword">select</span> deptno <span class="keyword">from</span> dept);</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<ul>
<li>完结撒花！</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>我们做题不可以改变源头数据 ， 就是数据库里的数据</li>
<li>没有思路的时候可以写题中要的数据 ， 题是做出来的，不是看出来的</li>
<li>写了第一行 ，自然就会有后面的代码，只是看你愿不愿意开始</li>
<li>有思路自然是按照自己的思路去做</li>
<li>在有些时候 left join 可以替换成  in  但是这样的替换是在 没有大于小于判定的时候</li>
<li>如果有大于小于判定 ，则要替换要用where</li>
<li>进行in的时候如果出现一行对多行的情况 ，</li>
<li>不妨把多行化成一行 ，用union</li>
<li>或者把多余的行删除</li>
<li>对于分组 ， 我们如果没有思路可以把题中要的东西先分组，然后后面再进行分组</li>
<li>比如 ： <code>select avg(sal) as sal_avg, deptno from (select  sal ,deptno from emp group by sal , deptno) as king group by deptno;</code></li>
<li>和 <code>select avg(sal) ,deptno from emp group by deptno;</code></li>
<li>是一样的，但是对于没有思路的时候来说，还是上面一个更好一点，下面是块，可是有时候会忘，</li>
<li>对于几乎所有的sql题目</li>
<li>几乎没有题通过 以下做不出来的 </li>
<li>就是简单方法和笨方法的区别  ， 笨方法虽然笨 ，可是实用性强 ，简单虽然简单 ，可是难想</li>
<li>而且笨方法的速度其实主要取决于你的打字速度</li>
<li>先筛选数据 <code>group by</code> , <code>where</code> , <code>avg ,sum ,max ,min..</code> …</li>
<li>再筛选数据 <code>group by</code> , <code>where</code> , <code>avg ,sum ,max ,min..</code> …</li>
<li>通过链接的方式链接 <code>union</code> , <code>union all</code> ,<code> join</code>..</li>
<li>判断条件 <code>in</code> , <code>where</code> ….</li>
<li>注意 ： 组函数不可以进行嵌套使用 <code>where max(sal) =1</code> 这样就是不可以的 ，相应的 在in 里也不可以<br> ， 在组函数里也不可以  ，如果非要这样操作 ，那么你要 嵌套表 , 加上别名才可以</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span>(<span class="function"><span class="keyword">select</span></span></span><br><span class="line"><span class="function"><span class="title">max</span>(<span class="params">sal</span>) <span class="keyword">as</span> max_sal</span></span><br><span class="line"><span class="function"><span class="keyword">from</span> emp</span></span><br><span class="line"><span class="function">) <span class="keyword">where</span> max_sal</span> =<span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>上述那样才可以</li>
<li>where 和 having是有区别的 作用域的区别，以及位置的区别 ，但是语法是基本上完全一样的 in ， like 之类的 </li>
<li>where被放在group之前 ，havin 是在group之后</li>
<li>例子 ：  </li>
<li><code>select sal as sal1 ,comm  as comm1 from emp where sal1 &gt; 1500; </code></li>
<li><code>select sal as sal1 ,comm  as comm1 from emp where comm1 in (300);</code></li>
<li>这样where是读取不到这个别名的 ，但是having是可以读取到的</li>
<li>原因在于，他们对数据操作的时机不同</li>
<li>having是上面都执行完了 ，才操作</li>
<li>where是和他们一起操作的</li>
<li><code>select sal as sal1 from emp having sal1 &gt;1500;</code></li>
<li><code>select sal as sal1 from emp having sal in (800);</code></li>
<li>这样就可以了</li>
</ul>
<h1 id="牛客"><a href="#牛客" class="headerlink" title="牛客"></a>牛客</h1><h2 id="现在运营想要了解复旦大学的每个用户在8月份练习的总题目数和回答正确的题目数情况，请取出相应明细数据，对于在8月份没有练习过的用户，答题数结果返回0"><a href="#现在运营想要了解复旦大学的每个用户在8月份练习的总题目数和回答正确的题目数情况，请取出相应明细数据，对于在8月份没有练习过的用户，答题数结果返回0" class="headerlink" title="现在运营想要了解复旦大学的每个用户在8月份练习的总题目数和回答正确的题目数情况，请取出相应明细数据，对于在8月份没有练习过的用户，答题数结果返回0"></a>现在运营想要了解复旦大学的每个用户在8月份练习的总题目数和回答正确的题目数情况，请取出相应明细数据，对于在8月份没有练习过的用户，答题数结果返回0</h2><ul>
<li>数据源</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> `user_profile`;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span>  <span class="keyword">exists</span> `question_practice_detail`;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span>  <span class="keyword">exists</span> `question_detail`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_profile` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `device_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gender` <span class="type">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `university` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gpa` <span class="type">float</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `active_days_within_30` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `question_cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `answer_cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `question_practice_detail` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`device_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`question_id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`result` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`<span class="type">date</span>` <span class="type">date</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `question_detail` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`question_id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`difficult_level` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2138</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;北京大学&#x27;</span>,<span class="number">3.4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3214</span>,<span class="string">&#x27;male&#x27;</span>,<span class="keyword">null</span>,<span class="string">&#x27;复旦大学&#x27;</span>,<span class="number">4.0</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">6543</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;北京大学&#x27;</span>,<span class="number">3.2</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">2315</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">23</span>,<span class="string">&#x27;浙江大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">5432</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;山东大学&#x27;</span>,<span class="number">3.8</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">70</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">2131</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;山东大学&#x27;</span>,<span class="number">3.3</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">13</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">4321</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;复旦大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">52</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2138</span>,<span class="number">111</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-03&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-09&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-06-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">2315</span>,<span class="number">115</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">2315</span>,<span class="number">116</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">2315</span>,<span class="number">117</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-09&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">10</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">11</span>,<span class="number">2315</span>,<span class="number">115</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">12</span>,<span class="number">2315</span>,<span class="number">116</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">13</span>,<span class="number">2315</span>,<span class="number">117</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">14</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-16&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">15</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-18&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">16</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">111</span>,<span class="string">&#x27;hard&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">112</span>,<span class="string">&#x27;medium&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">113</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">115</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">116</span>,<span class="string">&#x27;medium&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">117</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="答题"><a href="#答题" class="headerlink" title="答题"></a>答题</h2><ul>
<li>因为要用大于8月的 ， 所以 直接 用month就好</li>
<li>用if判断是不是正确</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">profile.device_id,</span><br><span class="line">university,</span><br><span class="line"><span class="built_in">count</span>(question_id) <span class="keyword">as</span> total,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">if</span>(result = <span class="string">&#x27;right&#x27;</span> , <span class="number">1</span> ,<span class="number">0</span>)) <span class="keyword">as</span> right_question_cnt</span><br><span class="line"><span class="keyword">from</span> user_profile <span class="keyword">as</span> profile <span class="keyword">left</span> <span class="keyword">join</span> question_practice_detail <span class="keyword">as</span> detail <span class="keyword">on</span> profile.device_id=detail.device_id  <span class="keyword">and</span> month(detail.date)=<span class="number">8</span> <span class="keyword">where</span> university = <span class="string">&#x27;复旦大学&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> profile.device_id;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>第二种方法</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">device_id,</span><br><span class="line">university,</span><br><span class="line">sum(right_question_cnt + wrong_question_cnt) <span class="keyword">as</span> question_cnt,</span><br><span class="line">sum(right_question_cnt) <span class="keyword">as</span> right_question_cnt</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line">device_id,</span><br><span class="line">university,</span><br><span class="line">ifnull((right_question_cnt) , <span class="number">0</span>) <span class="keyword">as</span> right_question_cnt,</span><br><span class="line">ifnull((wrong_question_cnt) , <span class="number">0</span>) <span class="keyword">as</span> wrong_question_cnt,</span><br><span class="line">ifnull((<span class="type">date</span>) , <span class="number">0</span>) <span class="keyword">as</span> <span class="type">date</span></span><br><span class="line"><span class="keyword">from</span> user_profile <span class="keyword">left join</span> (</span><br><span class="line"><span class="keyword">select</span> device_id <span class="keyword">as</span> ID,count(*) <span class="keyword">as</span> right_question_cnt ,<span class="type">date</span> , (device_id - device_id) <span class="keyword">as</span> wrong_question_cnt <span class="keyword">from</span> question_practice_detail <span class="keyword">where</span> result  = &quot;right&quot; <span class="keyword">group</span> <span class="keyword">by</span> device_id ,<span class="type">date</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> device_id,(device_id - device_id) <span class="keyword">as</span> right_question_cnt,<span class="type">date</span> ,count(*) <span class="keyword">as</span> wrong_question_cnt  <span class="keyword">from</span> question_practice_detail <span class="keyword">where</span> result  = &quot;wrong&quot; <span class="keyword">group</span> <span class="keyword">by</span> device_id ,<span class="type">date</span>) <span class="keyword">as</span> king <span class="keyword">on</span> king.ID = user_profile.device_id <span class="keyword">where</span> university = &quot;复旦大学&quot;) <span class="keyword">as</span> king    </span><br><span class="line"><span class="keyword">where</span> <span class="type">date</span> &gt; <span class="string">&#x27;2021-08-00&#x27;</span> <span class="keyword">or</span> <span class="type">date</span> = <span class="number">0</span>  <span class="keyword">group</span> <span class="keyword">by</span> device_id , university ;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul>
<li>链接后面的on后面 ，能加上and 进行条件筛选</li>
<li>month（date） 可以直接获取这个日期的月份</li>
<li>if（xxx , sss , www） : if表达式 ： 如果前一个为真 ，则执行sss ，如果不是真 则 www</li>
<li>要看清题意</li>
</ul>
<h2 id="现在运营想要了解浙江大学的用户在不同难度题目下答题的正确率情况，请取出相应数据，并按照准确率升序输出。"><a href="#现在运营想要了解浙江大学的用户在不同难度题目下答题的正确率情况，请取出相应数据，并按照准确率升序输出。" class="headerlink" title="现在运营想要了解浙江大学的用户在不同难度题目下答题的正确率情况，请取出相应数据，并按照准确率升序输出。"></a>现在运营想要了解浙江大学的用户在不同难度题目下答题的正确率情况，请取出相应数据，并按照准确率升序输出。</h2><ul>
<li>数据源<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> `user_profile`;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span>  <span class="keyword">exists</span> `question_practice_detail`;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span>  <span class="keyword">exists</span> `question_detail`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_profile` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `device_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gender` <span class="type">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `university` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gpa` <span class="type">float</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `active_days_within_30` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `question_cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `answer_cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `question_practice_detail` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`device_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`question_id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`result` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`<span class="type">date</span>` <span class="type">date</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `question_detail` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`question_id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`difficult_level` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2138</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;北京大学&#x27;</span>,<span class="number">3.4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3214</span>,<span class="string">&#x27;male&#x27;</span>,<span class="keyword">null</span>,<span class="string">&#x27;复旦大学&#x27;</span>,<span class="number">4.0</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">6543</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;北京大学&#x27;</span>,<span class="number">3.2</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">2315</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">23</span>,<span class="string">&#x27;浙江大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">2316</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">23</span>,<span class="string">&#x27;浙江大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">5432</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;山东大学&#x27;</span>,<span class="number">3.8</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">70</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">2131</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;山东大学&#x27;</span>,<span class="number">3.3</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">13</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">4321</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;复旦大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">52</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2138</span>,<span class="number">111</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-03&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-09&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-06-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">2315</span>,<span class="number">115</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">2315</span>,<span class="number">116</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">2315</span>,<span class="number">117</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-09&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">10</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">11</span>,<span class="number">2315</span>,<span class="number">115</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">12</span>,<span class="number">2315</span>,<span class="number">116</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">13</span>,<span class="number">2315</span>,<span class="number">117</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">14</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-16&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">15</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-18&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">16</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">111</span>,<span class="string">&#x27;hard&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">112</span>,<span class="string">&#x27;medium&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">113</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">115</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">116</span>,<span class="string">&#x27;medium&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">117</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">difficult_level,</span><br><span class="line">(<span class="built_in">sum</span>(<span class="keyword">if</span>(result = <span class="string">&#x27;right&#x27;</span> , <span class="number">1</span> ,<span class="number">0</span>))/<span class="built_in">count</span>(up.question_id)) <span class="keyword">as</span> Rate</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> question_practice_detail <span class="keyword">where</span> device_id <span class="keyword">in</span> (<span class="keyword">select</span> device_id <span class="keyword">from</span> user_profile <span class="keyword">where</span> university = <span class="string">&quot;浙江大学&quot;</span>)) <span class="keyword">as</span> up <span class="keyword">left</span> <span class="keyword">join</span> question_detail <span class="keyword">on</span> up.question_id = question_detail.question_id <span class="keyword">group</span> <span class="keyword">by</span> difficult_level <span class="keyword">order</span> <span class="keyword">by</span> Rate;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>优化方法</li>
<li>把中间筛选浙江大学的地方换成链接 ，并且在链接的时候进行筛选 ， 就会快上给 5-6ms</li>
<li>如下</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> qd.difficult_level,(</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> qpd.result=<span class="string">&#x27;right&#x27;</span> <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">ELSE</span> <span class="number">0</span></span><br><span class="line">	<span class="keyword">END</span></span><br><span class="line">)/<span class="built_in">COUNT</span>(qpd.result)</span><br><span class="line">) correct_rated</span><br><span class="line"><span class="keyword">FROM</span> user_profile up,</span><br><span class="line">     question_practice_detail qpd,</span><br><span class="line">     question_detail qd</span><br><span class="line"><span class="keyword">WHERE</span>     up.university=<span class="string">&#x27;浙江大学&#x27;</span></span><br><span class="line">      <span class="keyword">AND</span> up.device_id=qpd.device_id</span><br><span class="line">      <span class="keyword">AND</span> qpd.question_id=qd.question_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  qd.difficult_level</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> correct_rated <span class="keyword">asc</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="现在运营想要查看用户在某天刷题后第二天还会再来刷题的平均概率。请你取出相应数据。"><a href="#现在运营想要查看用户在某天刷题后第二天还会再来刷题的平均概率。请你取出相应数据。" class="headerlink" title="现在运营想要查看用户在某天刷题后第二天还会再来刷题的平均概率。请你取出相应数据。"></a>现在运营想要查看用户在某天刷题后第二天还会再来刷题的平均概率。请你取出相应数据。</h2><ul>
<li>数据源<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> `user_profile`;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span>  <span class="keyword">exists</span> `question_practice_detail`;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span>  <span class="keyword">exists</span> `question_detail`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_profile` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `device_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gender` <span class="type">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `university` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gpa` <span class="type">float</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `active_days_within_30` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `question_cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `answer_cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `question_practice_detail` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`device_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`question_id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`result` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`<span class="type">date</span>` <span class="type">date</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `question_detail` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`question_id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`difficult_level` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2138</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;北京大学&#x27;</span>,<span class="number">3.4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3214</span>,<span class="string">&#x27;male&#x27;</span>,<span class="keyword">null</span>,<span class="string">&#x27;复旦大学&#x27;</span>,<span class="number">4.0</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">6543</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;北京大学&#x27;</span>,<span class="number">3.2</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">2315</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">23</span>,<span class="string">&#x27;浙江大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">5432</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;山东大学&#x27;</span>,<span class="number">3.8</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">70</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">2131</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;山东大学&#x27;</span>,<span class="number">3.3</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">13</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">4321</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;复旦大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">52</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2138</span>,<span class="number">111</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-03&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-09&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-06-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">2315</span>,<span class="number">115</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">2315</span>,<span class="number">116</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">2315</span>,<span class="number">117</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-09&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">10</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">11</span>,<span class="number">2315</span>,<span class="number">115</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">12</span>,<span class="number">2315</span>,<span class="number">116</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">13</span>,<span class="number">2315</span>,<span class="number">117</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">14</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-16&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">15</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-18&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">16</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">111</span>,<span class="string">&#x27;hard&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">112</span>,<span class="string">&#x27;medium&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">113</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">115</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">116</span>,<span class="string">&#x27;medium&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">117</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> avg(<span class="keyword">if</span>(datediff(date2, date1)=<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">as</span> avg_ret</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">distinct</span> device_id,</span><br><span class="line">        <span class="type">date</span> <span class="keyword">as</span> date1,</span><br><span class="line">        lead(<span class="type">date</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> device_id <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">date</span>) <span class="keyword">as</span> date2</span><br><span class="line">    <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">distinct</span> device_id, <span class="type">date</span></span><br><span class="line">        <span class="keyword">from</span> question_practice_detail</span><br><span class="line">    ) <span class="keyword">as</span> uniq_id_date</span><br><span class="line">) <span class="keyword">as</span> id_last_next_date</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>作业</category>
      </categories>
  </entry>
  <entry>
    <title>作业10-21</title>
    <url>/2022/10/21/%E4%BD%9C%E4%B8%9A10-21/</url>
    <content><![CDATA[<h1 id="3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称"><a href="#3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称" class="headerlink" title="3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称"></a>3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称</h1><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> 作业.<span class="keyword">file</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="keyword">file</span>过滤 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">File</span> M = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;D:\\&quot;</span> , <span class="string">&quot;try&quot;</span>);</span><br><span class="line">		chakan(M);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> chakan(<span class="keyword">File</span> M) &#123;</span><br><span class="line">		<span class="keyword">File</span>[] k = M.listFiles();</span><br><span class="line">		System.out.<span class="keyword">println</span>(k);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k.length; i++) &#123;</span><br><span class="line">			<span class="keyword">File</span>[] t = k[i].listFiles();</span><br><span class="line">			<span class="keyword">if</span>(t == <span class="keyword">null</span>) &#123;</span><br><span class="line">				String g =  k[i].getName();</span><br><span class="line">				String d = g.substring(k[i].getName().lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">				<span class="keyword">if</span>(d.equals(<span class="string">&quot;.java&quot;</span>)) &#123;</span><br><span class="line">					System.out.<span class="keyword">println</span>(g.substring(<span class="number">0</span>, k[i].getName().lastIndexOf(<span class="string">&quot;.&quot;</span>)));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				chakan(k[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>重点字符串的相等要用equals，递归</li>
</ul>
<h1 id="判断指定路径下的所有子文件或是目录，如果是子文件则全部删除"><a href="#判断指定路径下的所有子文件或是目录，如果是子文件则全部删除" class="headerlink" title="判断指定路径下的所有子文件或是目录，如果是子文件则全部删除"></a>判断指定路径下的所有子文件或是目录，如果是子文件则全部删除</h1><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public static void SHANCHU(File k) &#123;</span><br><span class="line">File[] ds <span class="operator">=</span>	k.listFiles()<span class="comment">; </span></span><br><span class="line">for (int i <span class="operator">=</span> <span class="number">0</span><span class="comment">; i &lt; ds.length ; i++ ) &#123;</span></span><br><span class="line">	File[] h <span class="operator">=</span> ds[i].listFiles()<span class="comment">;</span></span><br><span class="line">	if(h <span class="operator">=</span><span class="operator">=</span> null) &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这个是个文件&quot;</span>)<span class="comment">;</span></span><br><span class="line">		ds[i].delete()<span class="comment">;</span></span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		k.delete()<span class="comment">;</span></span><br><span class="line">		SHANCHU(ds[i])<span class="comment">;</span></span><br><span class="line">			&#125;</span><br><span class="line">	k.delete()<span class="comment">;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重点：递归</li>
</ul>
<h1 id="5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D-102班级-javaSE作业）"><a href="#5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D-102班级-javaSE作业）" class="headerlink" title="5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D:\102班级\javaSE作业）"></a>5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D:\102班级\javaSE作业）</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">File G = new File(<span class="string">&quot;D:<span class="subst">\\</span><span class="subst">\\</span>102班级<span class="subst">\\</span><span class="subst">\\</span>javaSE作业&quot;</span>);</span><br><span class="line"></span><br><span class="line">G.mkdirs();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="从磁盘读取一个文件到内存中，再打印到控制台"><a href="#从磁盘读取一个文件到内存中，再打印到控制台" class="headerlink" title="从磁盘读取一个文件到内存中，再打印到控制台"></a>从磁盘读取一个文件到内存中，再打印到控制台</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lkdjfslasfj</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line"><span class="comment">//				while(is.available() != 0) &#123;</span></span><br><span class="line"><span class="comment">//					System.out.println((char)is.read()); // 默认一次只读一个字符</span></span><br><span class="line"><span class="comment">//				&#125;</span></span><br><span class="line">			</span><br><span class="line">			<span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>]; <span class="comment">// 通过设置缓冲区进行扩展一次可读的字符数量，如果是字符型，那这个byte要变char</span></span><br><span class="line">			<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 设置个长度</span></span><br><span class="line">			<span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>) <span class="comment">// 判断我是不是超出缓冲区的限定，如果超出，就只读取超出的部分</span></span><br><span class="line">			&#123;</span><br><span class="line">				System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buffer , <span class="number">0</span> , len)); </span><br><span class="line">			&#125;</span><br><span class="line">			is.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="模拟用户登录："><a href="#模拟用户登录：" class="headerlink" title="模拟用户登录："></a>模拟用户登录：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">login</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		<span class="type">File</span> <span class="variable">basic</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://&quot;</span> , <span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(basic);</span><br><span class="line">			<span class="type">Reader</span> <span class="variable">re</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in , <span class="string">&quot;UTF-8&quot;</span>);	</span><br><span class="line">			) &#123;</span><br><span class="line">			<span class="type">Map</span> <span class="variable">db</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">			<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(re);</span><br><span class="line">			<span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">usertotal</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">			String[] username = usertotal.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">//			System.out.println(username[0]);</span></span><br><span class="line"><span class="comment">//			System.out.println(username[1]);</span></span><br><span class="line">			db.put(username[<span class="number">0</span>],username[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//			System.out.println(db);</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="type">Scanner</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">			String usename;</span><br><span class="line">			String password;</span><br><span class="line">			<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;请输入账号：&quot;</span>);</span><br><span class="line">			 usename = name.nextLine();</span><br><span class="line">			<span class="keyword">if</span>(usename == <span class="literal">null</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;姓名不能为空&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">			<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">				 password = name.nextLine();</span><br><span class="line">						</span><br><span class="line">				<span class="keyword">if</span>(password == <span class="literal">null</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">					</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(password.equals(db.get(usename))) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;输入错误请重新输入&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">login</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		<span class="type">File</span> <span class="variable">basic</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://&quot;</span> , <span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(basic);</span><br><span class="line">			<span class="type">Reader</span> <span class="variable">re</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in , <span class="string">&quot;UTF-8&quot;</span>);	</span><br><span class="line">			) &#123;</span><br><span class="line">			<span class="type">Map</span> <span class="variable">db</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">			<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(re);</span><br><span class="line">			<span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">usertotal</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">			String[] username = usertotal.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">//			System.out.println(username[0]);</span></span><br><span class="line"><span class="comment">//			System.out.println(username[1]);</span></span><br><span class="line">			db.put(username[<span class="number">0</span>],username[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//			System.out.println(db);</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="type">Scanner</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">			String usename;</span><br><span class="line">			String password;</span><br><span class="line">			<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;请输入账号：&quot;</span>);</span><br><span class="line">			 usename = name.nextLine();</span><br><span class="line">			<span class="keyword">if</span>(usename == <span class="literal">null</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;姓名不能为空&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">			<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">				 password = name.nextLine();</span><br><span class="line">						</span><br><span class="line">				<span class="keyword">if</span>(password == <span class="literal">null</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">					</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(password.equals(db.get(usename))) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">				System.out.println(<span class="string">&quot;输入1进行修改密码&quot;</span>);</span><br><span class="line">				<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> Integer.parseInt(name.nextLine());</span><br><span class="line">				<span class="keyword">if</span>(m == <span class="number">1</span>) &#123;</span><br><span class="line">					<span class="keyword">if</span>(db.containsKey(usename)) &#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;请输入更改之后的密码&quot;</span>);</span><br><span class="line">						<span class="type">String</span> <span class="variable">newpassword</span> <span class="operator">=</span> name.nextLine();</span><br><span class="line">						db.put(usename, newpassword);</span><br><span class="line">					&#125; </span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;输入错误请重新输入&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
      </categories>
  </entry>
  <entry>
    <title>11-19作业</title>
    <url>/2022/11/19/%E4%BD%9C%E4%B8%9A11-19/</url>
    <content><![CDATA[<h1 id="通过mapreduce的api统计emp表里的每个工作的人数"><a href="#通过mapreduce的api统计emp表里的每个工作的人数" class="headerlink" title="通过mapreduce的api统计emp表里的每个工作的人数"></a>通过mapreduce的api统计emp表里的每个工作的人数</h1><ul>
<li>数据源</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">7369</span>,SMITH,CLERK,<span class="number">7902</span>,<span class="number">1980</span>-<span class="number">12</span>-<span class="number">17</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">800</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7499</span>,ALLEN,SALESMAN,<span class="number">7698</span>,<span class="number">1981</span>-<span class="number">02</span>-<span class="number">20</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">1600</span>.<span class="number">00</span>,<span class="number">300</span>.<span class="number">00</span>,<span class="number">30</span></span><br><span class="line"><span class="attribute">7521</span>,WARD,SALESMAN,<span class="number">7698</span>,<span class="number">1981</span>-<span class="number">02</span>-<span class="number">22</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">1250</span>.<span class="number">00</span>,<span class="number">500</span>.<span class="number">00</span>,<span class="number">30</span></span><br><span class="line"><span class="attribute">7566</span>,JONES,MANAGER,<span class="number">7839</span>,<span class="number">1981</span>-<span class="number">04</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">2975</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7654</span>,MARTIN,SALESMAN,<span class="number">7698</span>,<span class="number">1981</span>-<span class="number">09</span>-<span class="number">28</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">1250</span>.<span class="number">00</span>,<span class="number">1400</span>.<span class="number">00</span>,<span class="number">30</span></span><br><span class="line"><span class="attribute">7698</span>,BLAKE,MANAGER,<span class="number">7839</span>,<span class="number">1981</span>-<span class="number">05</span>-<span class="number">01</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">2850</span>.<span class="number">00</span>,,<span class="number">30</span></span><br><span class="line"><span class="attribute">7782</span>,CLARK,MANAGER,<span class="number">7839</span>,<span class="number">1981</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">2450</span>.<span class="number">00</span>,,<span class="number">10</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7839</span>,KING,PRESIDENT,,<span class="number">1981</span>-<span class="number">11</span>-<span class="number">17</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">5000</span>.<span class="number">00</span>,,<span class="number">10</span></span><br><span class="line"><span class="attribute">7844</span>,TURNER,SALESMAN,<span class="number">7698</span>,<span class="number">1981</span>-<span class="number">09</span>-<span class="number">08</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">1500</span>.<span class="number">00</span>,<span class="number">0</span>.<span class="number">00</span>,<span class="number">30</span></span><br><span class="line"><span class="attribute">7876</span>,ADAMS,CLERK,<span class="number">7788</span>,<span class="number">1983</span>-<span class="number">01</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">1100</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7900</span>,lebulang,CLERK,<span class="number">7698</span>,<span class="number">1981</span>-<span class="number">12</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">950</span>.<span class="number">00</span>,,<span class="number">30</span></span><br><span class="line"><span class="attribute">7902</span>,FORD,ANALYST,<span class="number">7566</span>,<span class="number">1981</span>-<span class="number">12</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7934</span>,MILLER,CLERK,<span class="number">7782</span>,<span class="number">1982</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">1300</span>.<span class="number">00</span>,,<span class="number">10</span></span><br><span class="line"><span class="attribute">7839</span>,KING,PRESIDENT,,<span class="number">1981</span>-<span class="number">11</span>-<span class="number">17</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">5000</span>.<span class="number">00</span>,,<span class="number">10</span></span><br><span class="line"><span class="attribute">7654</span>,MARTIN,SALESMAN,<span class="number">7698</span>,<span class="number">1981</span>-<span class="number">09</span>-<span class="number">28</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3200</span>.<span class="number">00</span>,<span class="number">1400</span>.<span class="number">00</span>,<span class="number">30</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>其中第二列就是工作</p>
</li>
<li><p>代码如下 ：</p>
</li>
</ul>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.<span class="property">example</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">conf</span>.<span class="property">Configuration</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">fs</span>.<span class="property">Path</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">io</span>.<span class="property">IntWritable</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">io</span>.<span class="property">Text</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">mapreduce</span>.<span class="property">Job</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">mapreduce</span>.<span class="property">Mapper</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">mapreduce</span>.<span class="property">Reducer</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">mapreduce</span>.<span class="property">lib</span>.<span class="property">input</span>.<span class="property">FileInputFormat</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">mapreduce</span>.<span class="property">lib</span>.<span class="property">output</span>.<span class="property">FileOutputFormat</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">io</span>.<span class="property">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">StringTokenizer</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author sxwang</span></span><br><span class="line"><span class="comment"> * 11 18 14:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * driver</span></span><br><span class="line"><span class="comment">     * @param args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="built_in">String</span>[] args) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">String</span> input=<span class="string">&quot;D://emp.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">String</span> output=<span class="string">&quot;out&quot;</span>;</span><br><span class="line">        Configuration conf = <span class="keyword">new </span><span class="class title_">Configuration</span>();</span><br><span class="line">        <span class="comment">//0.todo... 删除目标路径</span></span><br><span class="line">        FileUtils.<span class="property">deletePath</span>(conf,output);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.设置 作业名称</span></span><br><span class="line">        Job job = Job.<span class="property">getInstance</span>(conf, <span class="string">&quot;WCAPP&quot;</span>);</span><br><span class="line">        <span class="comment">//2.设置map reduce 执行代码的主类</span></span><br><span class="line">        job.<span class="property">setJarByClass</span>(test.<span class="property">class</span>);</span><br><span class="line">        job.<span class="property">setMapperClass</span>(MyMapper.<span class="property">class</span>);</span><br><span class="line">        job.<span class="property">setReducerClass</span>(MyReducer.<span class="property">class</span>);</span><br><span class="line">        <span class="comment">//3.指定 oupput kv类型</span></span><br><span class="line">        job.<span class="property">setOutputKeyClass</span>(Text.<span class="property">class</span>);</span><br><span class="line">        job.<span class="property">setOutputValueClass</span>(IntWritable.<span class="property">class</span>);</span><br><span class="line">        <span class="comment">//4. 设置数据源路径 数据输出路径</span></span><br><span class="line">        FileInputFormat.<span class="property">addInputPath</span>(job, <span class="keyword">new </span><span class="class title_">Path</span>(input));</span><br><span class="line">        FileOutputFormat.<span class="property">setOutputPath</span>(job, <span class="keyword">new </span><span class="class title_">Path</span>(output));</span><br><span class="line">        <span class="comment">//5. 提交mr yarn</span></span><br><span class="line">        System.<span class="property">exit</span>(job.<span class="property">waitForCompletion</span>(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyMapper</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_ inherited__">Mapper</span>&lt;<span class="built_in">Object</span>, Text, Text, IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="built_in">map</span>(<span class="built_in">Object</span> <span class="built_in">key</span>, Text value, Context context) <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 1.按照分隔符 进行拆分 每个单词 ，每个单词赋值为1</span></span><br><span class="line"><span class="comment">             * (word ,1)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">String</span>[] words = value.<span class="property">toString</span>().<span class="property">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">String</span> word : words) &#123;</span><br><span class="line">                <span class="built_in">String</span>[] <span class="built_in">split</span> = word.<span class="property">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                context.<span class="property">write</span>(<span class="keyword">new </span><span class="class title_">Text</span>(<span class="built_in">split</span>[<span class="number">2</span>]) ,<span class="keyword">new </span><span class="class title_">IntWritable</span>(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * reducer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyReducer</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_ inherited__">Reducer</span>&lt;Text,IntWritable,Text,IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  (word ,1)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  (word,&lt;1,1,1,1&gt;)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  1.聚合value</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  2.写出去</span></span><br><span class="line"><span class="comment">         *  (word ,3)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span>(Text <span class="built_in">key</span>, Iterable&lt;IntWritable&gt; values, Context context) <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">                sum +=Integer.<span class="property">parseInt</span>(value.<span class="property">toString</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            context.<span class="property">write</span>(<span class="built_in">key</span>,<span class="keyword">new </span><span class="class title_">IntWritable</span>(sum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>基本概念 ： 把数据先通过map进行etl，然后通过redurce进行数据的整合之类的</li>
<li>最后输出</li>
</ul>
]]></content>
      <categories>
        <category>作业</category>
      </categories>
  </entry>
  <entry>
    <title>内网穿透</title>
    <url>/2022/11/19/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>内网穿透简单来说就是让我们处于局域网的机器或者本地的项目，可以在外部的公网访问</li>
</ul>
<h3 id="常见的内网穿透工具"><a href="#常见的内网穿透工具" class="headerlink" title="常见的内网穿透工具"></a>常见的内网穿透工具</h3><ul>
<li>natapp网站</li>
<li>frp</li>
<li>ngrok</li>
<li>蜻蜓映射</li>
<li>ssh命令</li>
</ul>
<h3 id="natapp"><a href="#natapp" class="headerlink" title="natapp"></a>natapp</h3><ul>
<li>natapp网站 ： 注册账号之后会免费给你送一条隧道，不过临时用可以，不能长久用，</li>
<li>因为隧道名字会被强制更换</li>
<li>而vip隧道就不会强制更换</li>
</ul>
<h3 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h3><ul>
<li>frp是专业的反向代理工具</li>
<li><code>https:github.com/fatedier/frp</code></li>
<li>其中部署也非常简单 ： </li>
<li>frps在云服务器上</li>
<li>而要进行内网穿透的机器运行frpc</li>
<li>再改改配置就ok了</li>
</ul>
<h3 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h3><ul>
<li>属于专门做内网穿透的平台，以前是免费的不过最近好像收费了</li>
<li>注册之后我们就可以根据平台上的帮助文档进行配置，</li>
</ul>
<h3 id="蜻蜓映射"><a href="#蜻蜓映射" class="headerlink" title="蜻蜓映射"></a>蜻蜓映射</h3><ul>
<li>同上</li>
</ul>
<h3 id="ssh命令"><a href="#ssh命令" class="headerlink" title="ssh命令"></a>ssh命令</h3><ul>
<li>我们可以通过<code>ssh -R 80:localhost:80 xxxxx@localhost.run</code></li>
<li>进行反向映射端口</li>
<li>xxxx是远程云主机</li>
<li>前面的80是云主机的端口</li>
<li>后面的是本地的端口</li>
<li>这个命令是ssh自带的</li>
</ul>
]]></content>
      <categories>
        <category>杂货技术栈</category>
      </categories>
  </entry>
  <entry>
    <title>签到的制作（后端＋前端）</title>
    <url>/2022/10/19/%E5%88%B6%E4%BD%9C%E7%AD%BE%E5%88%B0/</url>
    <content><![CDATA[<h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><ul>
<li>Centos7.8</li>
<li>在虚拟机安装好redis，并且可以成功ping通</li>
<li>使用jdk 11</li>
<li>使用idea 2019.3</li>
<li>准备好post man</li>
<li>准备好可以观察redis的软件，比如redisDespoketManger等</li>
</ul>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ul>
<li>先打开虚拟机，并开启redis</li>
<li>然后打开idea，创建springboot项目，在插件列表选择 </li>
<li>spring web</li>
<li>spring Data Redis</li>
<li>Lombok</li>
<li>然后在pom文件里添加hutool插件（我们要用到的）</li>
<li>接下来修改application文件，我习惯把他的后缀改成yml</li>
<li>然后在application文件里添加<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">       <span class="comment"># host: 192.168.1.121 #ip地址</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.41</span><span class="number">.110</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">6379</span> <span class="comment">#端口</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">liuzihan</span> <span class="comment">#密码</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="number">3000</span> <span class="comment">#超时时间</span></span><br><span class="line">        <span class="attr">database:</span> <span class="number">0</span> <span class="comment">#第几号数据库</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9999</span> <span class="comment">#这个是程序启动之后的端口号，也就是tomcat插件的端口号</span></span><br></pre></td></tr></table></figure></li>
<li>ip地址是虚拟机，或者局域网内真实机的ip</li>
</ul>
<h1 id="思考编写方式"><a href="#思考编写方式" class="headerlink" title="思考编写方式"></a>思考编写方式</h1><ul>
<li>我的编写思路是通过redis里的bitMap进行日期的存取</li>
<li>首先在SignDemoApplication的包内创建几个包，分别代表客户端，服务端以及自动启动还有配置文件包，</li>
<li>首先确定的是浏览器页面，原因很简单，网页有强大的动态效果，以及平台的适配能力，而且很美观，比较与传统的GUI要好不少</li>
<li>我的文件层级目录如下</li>
<li><img src="/%5B!%5Bx4XBBd.jpg%5D(https:/s1.ax1x.com/2022/10/29/x4XBBd.jpg)%5D(https:/imgse.com/i/x4XBBd)"></li>
</ul>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul>
<li>创建config包，然后在包里创建RedisTemplateConfiguration.class</li>
<li>然后写入<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.<span class="property">fasterxml</span>.<span class="property">jackson</span>.<span class="property">annotation</span>.<span class="property">JsonAutoDetect</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">fasterxml</span>.<span class="property">jackson</span>.<span class="property">annotation</span>.<span class="property">PropertyAccessor</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">fasterxml</span>.<span class="property">jackson</span>.<span class="property">databind</span>.<span class="property">ObjectMapper</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">context</span>.<span class="property">annotation</span>.<span class="property">Bean</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">context</span>.<span class="property">annotation</span>.<span class="property">Configuration</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">data</span>.<span class="property">redis</span>.<span class="property">connection</span>.<span class="property">RedisConnectionFactory</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">data</span>.<span class="property">redis</span>.<span class="property">core</span>.<span class="property">RedisTemplate</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">data</span>.<span class="property">redis</span>.<span class="property">serializer</span>.<span class="property">GenericJackson2JsonRedisSerializer</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">data</span>.<span class="property">redis</span>.<span class="property">serializer</span>.<span class="property">Jackson2JsonRedisSerializer</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">data</span>.<span class="property">redis</span>.<span class="property">serializer</span>.<span class="property">RedisSerializer</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">data</span>.<span class="property">redis</span>.<span class="property">serializer</span>.<span class="property">StringRedisSerializer</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;ClassName: RedisConfigure&lt;/p &gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: redisTemplate自定义序列化配置，更改其默认序列化器&lt;/p &gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Date: 2021/10/23&lt;/p &gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTemplateConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">RedisTemplate</span>&lt;<span class="title class_">String</span>,<span class="title class_">Object</span>&gt; <span class="title function_">redisTemplate</span>(<span class="params">RedisConnectionFactory redisConnectionFactory</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">RedisTemplate</span>&lt;<span class="title class_">String</span>,<span class="title class_">Object</span>&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 参照StringRedisTemplate内部实现指定序列化器</span></span><br><span class="line">        redisTemplate.<span class="title function_">setConnectionFactory</span>(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//使用 jackson2jasonRedisSerialize替换默认序列化</span></span><br><span class="line">        <span class="title class_">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(<span class="title class_">Object</span>.<span class="property">class</span>);</span><br><span class="line">        <span class="title class_">ObjectMapper</span> objectMapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.<span class="title function_">setVisibility</span>(<span class="title class_">PropertyAccessor</span>.<span class="property">ALL</span> , <span class="title class_">JsonAutoDetect</span>.<span class="property">Visibility</span>.<span class="property">ANY</span>);</span><br><span class="line">        jackson2JsonRedisSerializer.<span class="title function_">setObjectMapper</span>(objectMapper);</span><br><span class="line">        <span class="comment">//为String类型 key/value 设置序列化</span></span><br><span class="line">        redisTemplate.<span class="title function_">setKeySerializer</span>(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.<span class="title function_">setValueSerializer</span>(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//为hash ；类型 key、value 设置序列化</span></span><br><span class="line">        redisTemplate.<span class="title function_">setHashKeySerializer</span>(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.<span class="title function_">setHashValueSerializer</span>(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.<span class="title function_">afterPropertiesSet</span>();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/* redisTemplate.setKeySerializer(keySerializer());</span></span><br><span class="line"><span class="comment">        redisTemplate.setHashKeySerializer(keySerializer());</span></span><br><span class="line"><span class="comment">        redisTemplate.setValueSerializer(valueSerializer());</span></span><br><span class="line"><span class="comment">        redisTemplate.setHashValueSerializer(valueSerializer());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        return redisTemplate;*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Jackson序列化器，key使用字符串</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">RedisSerializer</span>&lt;<span class="title class_">String</span>&gt; <span class="title function_">keySerializer</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Jackson序列化器，value使用Object</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">RedisSerializer</span>&lt;<span class="title class_">Object</span>&gt; <span class="title function_">valueSerializer</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>这个就是个简单的redis自动序列化类，网上一抓一大把</li>
</ul>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ul>
<li>客户端是我们主要想写的地方，就是实现签到，以及获取mac地址等功能的地方</li>
<li>于是我们创建Severdemo包</li>
<li>在这个包下，写入SignSeverce类写上<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import cn.hutool.core.date.DateUtil;</span><br><span class="line">import cn.hutool.core.date.LocalDateTimeUtil;</span><br><span class="line">import cn.hutool.core.net.NetUtil;</span><br><span class="line">import cn.hutool.core.util.StrUtil;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.data.redis.connection.BitFieldSubCommands;</span><br><span class="line">import org.springframework.data.redis.core.RedisCallback;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@Mapper</span><br><span class="line">public <span class="keyword">class</span> SignService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *用户签到可以补签</span></span><br><span class="line"><span class="comment">     * @param UserId</span></span><br><span class="line"><span class="comment">     * @param DataStr</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    public Map&lt;String , Object&gt; <span class="keyword">do</span><span class="constructor">Sign(String UserId , String DataStr)</span>&#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inetAddress = <span class="module-access"><span class="module"><span class="identifier">InetAddress</span>.</span></span>get<span class="constructor">LocalHost()</span>;</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span></span><br><span class="line">        String localMacAddress2 = <span class="module-access"><span class="module"><span class="identifier">NetUtil</span>.</span></span>get<span class="constructor">MacAddress(<span class="params">inetAddress</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String , Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 判断MAc地址和redis中的是不是一样</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + UserId + <span class="string">&quot;:*&quot;</span>)</span>).equals(<span class="string">&quot;[]&quot;</span>))&#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String MAc = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + UserId + <span class="string">&quot;:*&quot;</span>)</span>);</span><br><span class="line">            String<span class="literal">[]</span> split = <span class="module-access"><span class="module"><span class="identifier">MAc</span>.</span></span>split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (localMacAddress2.equals(split<span class="literal">[<span class="number">2</span>]</span>))&#123;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.put(<span class="string">&quot;code&quot;</span> , <span class="number">404</span>);</span><br><span class="line">                result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;你不是在同一台电脑上进行的签到，请联系管理员进行修复&quot;</span>);</span><br><span class="line">                return  result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		 <span class="comment">// 获取日期</span></span><br><span class="line">        Date  date = get<span class="constructor">Date(DataStr)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 判断获取到了补签权限吗</span></span><br><span class="line">        <span class="keyword">if</span> (DataStr != null)&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + UserId + <span class="string">&quot;:*&quot;</span>)</span>).equals(<span class="string">&quot;[]&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              String MAc = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + UserId + <span class="string">&quot;:*&quot;</span>)</span>);</span><br><span class="line">              String<span class="literal">[]</span> split = <span class="module-access"><span class="module"><span class="identifier">MAc</span>.</span></span>split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">              <span class="keyword">if</span> (<span class="string">&quot;0&quot;</span>.equals(split<span class="literal">[<span class="number">3</span>]</span>)) &#123;</span><br><span class="line">                  result.put(<span class="string">&quot;code&quot;</span>, <span class="number">407</span>);</span><br><span class="line">                  result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;你未经过老师同意无法补签&quot;</span>);</span><br><span class="line">                  return result;</span><br><span class="line">              &#125; <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                  <span class="comment">// 获取日期</span></span><br><span class="line"></span><br><span class="line">                  <span class="comment">// 获取日期对应的天数</span></span><br><span class="line">                  <span class="built_in">int</span> day = <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>day<span class="constructor">OfMonth(<span class="params">date</span>)</span> - <span class="number">1</span>;</span><br><span class="line">                  <span class="comment">// 构建redis 的 key</span></span><br><span class="line">                  String signkey = build<span class="constructor">SignKEy1(UserId,<span class="params">date</span> , <span class="params">localMacAddress2</span>)</span>;</span><br><span class="line">                  <span class="comment">// 查看日期是不是签到</span></span><br><span class="line">                  boolean isSigned = redisTemplate.ops<span class="constructor">ForValue()</span>.get<span class="constructor">Bit(<span class="params">signkey</span> , <span class="params">day</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span>(isSigned)&#123;</span><br><span class="line">                      result.put(<span class="string">&quot;code&quot;</span> , <span class="number">400</span>);</span><br><span class="line">                      result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;当前日期已完成签到，无需再签&quot;</span>);</span><br><span class="line">                      return  result;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="comment">// 签到</span></span><br><span class="line">                  redisTemplate.ops<span class="constructor">ForValue()</span>.set<span class="constructor">Bit(<span class="params">signkey</span> , <span class="params">day</span> , <span class="params">true</span>)</span>;</span><br><span class="line">                  <span class="comment">//根据当前日期获取签到的天数</span></span><br><span class="line">                  Date today = <span class="keyword">new</span> <span class="constructor">Date()</span>;</span><br><span class="line">                  <span class="comment">//统计总次数</span></span><br><span class="line">                  long count = get<span class="constructor">SumSignCount(UserId , <span class="params">today</span>)</span>;</span><br><span class="line">                  <span class="comment">//统计连续次数</span></span><br><span class="line">                  <span class="built_in">int</span> continuous = get<span class="constructor">ContinusSignCount(UserId , <span class="params">today</span>)</span>;</span><br><span class="line"></span><br><span class="line">                  result.put(<span class="string">&quot;code&quot;</span> , <span class="number">200</span>);</span><br><span class="line">                  result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;签到成功&quot;</span>);</span><br><span class="line">                  result.put(<span class="string">&quot;continuous&quot;</span> , continuous);</span><br><span class="line">                  result.put(<span class="string">&quot;count&quot;</span> , count);</span><br><span class="line"></span><br><span class="line">                  String basicname = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> +UserId+ <span class="string">&quot;:*&quot;</span>)</span>);</span><br><span class="line">                  String changgename = basicname.substring(basicname.index<span class="constructor">Of(<span class="string">&quot;[&quot;</span>)</span>+<span class="number">1</span> , basicname.index<span class="constructor">Of(<span class="string">&quot;]&quot;</span>)</span>);</span><br><span class="line">                  String<span class="literal">[]</span> namebasic  =  changgename.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                  String newname = namebasic<span class="literal">[<span class="number">0</span>]</span> + <span class="string">&quot;:&quot;</span> + namebasic<span class="literal">[<span class="number">1</span>]</span> + <span class="string">&quot;:&quot;</span> + namebasic<span class="literal">[<span class="number">2</span>]</span> + <span class="string">&quot;:0:&quot;</span> + namebasic<span class="literal">[<span class="number">4</span>]</span>;</span><br><span class="line">                  redisTemplate.rename(changgename , newname);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  return  result;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取日期对应的天数</span></span><br><span class="line">        <span class="built_in">int</span> day = <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>day<span class="constructor">OfMonth(<span class="params">date</span>)</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 构建redis 的 key</span></span><br><span class="line">        String signkey = build<span class="constructor">SignKEy(UserId,<span class="params">date</span> , <span class="params">localMacAddress2</span>)</span>;</span><br><span class="line">        <span class="comment">// 查看日期是不是签到</span></span><br><span class="line">        boolean isSigned = redisTemplate.ops<span class="constructor">ForValue()</span>.get<span class="constructor">Bit(<span class="params">signkey</span> , <span class="params">day</span>)</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 判断今天是不是已经签到了</span></span><br><span class="line">        <span class="keyword">if</span>(isSigned)&#123;</span><br><span class="line">            result.put(<span class="string">&quot;code&quot;</span> , <span class="number">400</span>);</span><br><span class="line">            result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;当前日期已完成签到，无需再签&quot;</span>);</span><br><span class="line">            return  result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 签到</span></span><br><span class="line">        redisTemplate.ops<span class="constructor">ForValue()</span>.set<span class="constructor">Bit(<span class="params">signkey</span> , <span class="params">day</span> , <span class="params">true</span>)</span>;</span><br><span class="line">        <span class="comment">//根据当前日期获取签到的天数</span></span><br><span class="line">        Date today = <span class="keyword">new</span> <span class="constructor">Date()</span>;</span><br><span class="line">        <span class="comment">//统计总次数</span></span><br><span class="line">        long count = get<span class="constructor">SumSignCount(UserId , <span class="params">today</span>)</span>;</span><br><span class="line">        <span class="comment">//统计连续次数</span></span><br><span class="line">        <span class="built_in">int</span> continuous = get<span class="constructor">ContinusSignCount(UserId , <span class="params">today</span>)</span>;</span><br><span class="line"></span><br><span class="line">        result.put(<span class="string">&quot;code&quot;</span> , <span class="number">200</span>);</span><br><span class="line">        result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;签到成功&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;continuous&quot;</span> , continuous);</span><br><span class="line">        result.put(<span class="string">&quot;count&quot;</span> , count);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 更改补签权限</span></span><br><span class="line">        String basicname = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> +UserId+ <span class="string">&quot;:*&quot;</span>)</span>);</span><br><span class="line">        String changgename = basicname.substring(basicname.index<span class="constructor">Of(<span class="string">&quot;[&quot;</span>)</span>+<span class="number">1</span> , basicname.index<span class="constructor">Of(<span class="string">&quot;]&quot;</span>)</span>);</span><br><span class="line">        String<span class="literal">[]</span> namebasic  =  changgename.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        String newname = namebasic<span class="literal">[<span class="number">0</span>]</span> + <span class="string">&quot;:&quot;</span> + namebasic<span class="literal">[<span class="number">1</span>]</span> + <span class="string">&quot;:&quot;</span> + namebasic<span class="literal">[<span class="number">2</span>]</span> + <span class="string">&quot;:0:&quot;</span> + namebasic<span class="literal">[<span class="number">4</span>]</span>;</span><br><span class="line">        redisTemplate.rename(changgename , newname);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return  result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取用户当天签到的情况</span></span><br><span class="line">    public Map&lt;String , Object&gt;get<span class="constructor">SignByDate(String UserId , String DataStr)</span>&#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inetAddress = <span class="module-access"><span class="module"><span class="identifier">InetAddress</span>.</span></span>get<span class="constructor">LocalHost()</span>;</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span></span><br><span class="line">        String localMacAddress2 = <span class="module-access"><span class="module"><span class="identifier">NetUtil</span>.</span></span>get<span class="constructor">MacAddress(<span class="params">inetAddress</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;localMacAddress2 = &quot;</span> + localMacAddress2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String , Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;<span class="literal">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + UserId + <span class="string">&quot;:*&quot;</span>)</span>).equals(<span class="string">&quot;[]&quot;</span>))&#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String MAc = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + UserId + <span class="string">&quot;:*&quot;</span>)</span>);</span><br><span class="line">            String<span class="literal">[]</span> split = <span class="module-access"><span class="module"><span class="identifier">MAc</span>.</span></span>split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (localMacAddress2.equals(split<span class="literal">[<span class="number">2</span>]</span>))&#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(split<span class="literal">[<span class="number">2</span>]</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.put(<span class="string">&quot;code&quot;</span> , <span class="number">404</span>);</span><br><span class="line">                result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;你不是在同一台电脑上进行的签到，请联系管理员进行修复&quot;</span>);</span><br><span class="line">                return  result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">        Date date = get<span class="constructor">Date(DataStr)</span>;</span><br><span class="line">        <span class="comment">// 获取日期对应的天数</span></span><br><span class="line">        <span class="built_in">int</span> day = <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>day<span class="constructor">OfMonth(<span class="params">date</span>)</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 构建redis 的 key</span></span><br><span class="line">        String signkey = build<span class="constructor">SignKEy(UserId, <span class="params">date</span> , <span class="params">localMacAddress2</span>)</span>;</span><br><span class="line">        <span class="comment">// 查看日期是不是签到</span></span><br><span class="line">        boolean isSigned = redisTemplate.ops<span class="constructor">ForValue()</span>.get<span class="constructor">Bit(<span class="params">signkey</span> , <span class="params">day</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 签到</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据当前日期获取签到的天数</span></span><br><span class="line">        Date today = <span class="keyword">new</span> <span class="constructor">Date()</span>;</span><br><span class="line">        <span class="comment">//统计总次数</span></span><br><span class="line">        long count = get<span class="constructor">SumSignCount(UserId , <span class="params">today</span>)</span>;</span><br><span class="line">        <span class="comment">//统计连续次数</span></span><br><span class="line">        <span class="built_in">int</span> continuous = get<span class="constructor">ContinusSignCount(UserId , <span class="params">today</span>)</span>;</span><br><span class="line">        result.put(<span class="string">&quot;today&quot;</span> , isSigned);</span><br><span class="line"></span><br><span class="line">        result.put(<span class="string">&quot;continuous&quot;</span> , continuous);</span><br><span class="line">        result.put(<span class="string">&quot;count&quot;</span> , count);</span><br><span class="line">        return  result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取签到天数的信息</span></span><br><span class="line">    public Map&lt;String , Object&gt; get<span class="constructor">SignInfo(String UserId , String DataStr)</span>&#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inetAddress = <span class="module-access"><span class="module"><span class="identifier">InetAddress</span>.</span></span>get<span class="constructor">LocalHost()</span>;</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span></span><br><span class="line">        String localMacAddress2 = <span class="module-access"><span class="module"><span class="identifier">NetUtil</span>.</span></span>get<span class="constructor">MacAddress(<span class="params">inetAddress</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;localMacAddress2 = &quot;</span> + localMacAddress2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Date date = get<span class="constructor">Date(DataStr)</span>;</span><br><span class="line">        String signkey = build<span class="constructor">SignKEy(UserId , <span class="params">date</span> , <span class="params">localMacAddress2</span>)</span>;</span><br><span class="line">        <span class="comment">// 构建一个归自动排序的Map</span></span><br><span class="line">        Map&lt;String , Object&gt; signInfo = <span class="keyword">new</span> TreeMap&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">// 获取一个月的总天数</span></span><br><span class="line">        <span class="built_in">int</span> dayOfMouth = <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>length<span class="constructor">OfMonth(DateUtil.<span class="params">month</span>(<span class="params">date</span>)</span> + <span class="number">1</span> , <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>is<span class="constructor">LeapYear(DateUtil.<span class="params">dayOfYear</span>(<span class="params">date</span>)</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bitfiled user : sign : 5 : 2021 014 u30</span></span><br><span class="line">        BitFieldSubCommands bitFieldSubCommands = <span class="module-access"><span class="module"><span class="identifier">BitFieldSubCommands</span>.</span></span>create<span class="literal">()</span>.get(<span class="module-access"><span class="module"><span class="identifier">BitFieldSubCommands</span>.</span><span class="module"><span class="identifier">BitFieldType</span>.</span></span>unsigned(dayOfMouth)).value<span class="constructor">At(0)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取用户从该当前日期到1号的状态</span></span><br><span class="line">        List&lt;Long&gt; <span class="built_in">list</span> = redisTemplate.ops<span class="constructor">ForValue()</span>.bit<span class="constructor">Field(<span class="params">signkey</span> , <span class="params">bitFieldSubCommands</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">list</span><span class="operator"> == </span>null<span class="operator"> || </span><span class="built_in">list</span>.is<span class="constructor">Empty()</span>)&#123;</span><br><span class="line">            return  signInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        long v = <span class="built_in">list</span>.get(<span class="number">0</span>)<span class="operator"> == </span>null ? <span class="number">0</span> :<span class="built_in">list</span>.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = dayOfMouth ; i &gt; <span class="number">0</span> ; i--)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  map的存储格式</span></span><br><span class="line"><span class="comment">             *      签到：  yyyy-mm-01</span></span><br><span class="line"><span class="comment">             *      未签到  yyyy-mm-02 不做任何处理</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取日期</span></span><br><span class="line">         LocalDateTime localDateTime =  <span class="module-access"><span class="module"><span class="identifier">LocalDateTimeUtil</span>.</span></span><span class="keyword">of</span>(date).<span class="keyword">with</span><span class="constructor">DayOfMonth(<span class="params">i</span>)</span>;</span><br><span class="line">            <span class="comment">// 右移再左移</span></span><br><span class="line">            boolean flag = v &gt;&gt; <span class="number">1</span> &lt;&lt; <span class="number">1</span> !=v;</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                signInfo.put(<span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>format(localDateTime , <span class="string">&quot;yyyy-MM-dd&quot;</span>) , <span class="string">&quot;✔&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            v &gt;&gt;= <span class="number">1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return signInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取签到天数的总和</span></span><br><span class="line">    <span class="keyword">private</span> long get<span class="constructor">SumSignCount(String <span class="params">userId</span>, Date <span class="params">today</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inetAddress = <span class="module-access"><span class="module"><span class="identifier">InetAddress</span>.</span></span>get<span class="constructor">LocalHost()</span>;</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span></span><br><span class="line">        String localMacAddress2 = <span class="module-access"><span class="module"><span class="identifier">NetUtil</span>.</span></span>get<span class="constructor">MacAddress(<span class="params">inetAddress</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;localMacAddress2 = &quot;</span> + localMacAddress2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String signkey = build<span class="constructor">SignKEy(<span class="params">userId</span> , <span class="params">today</span> , <span class="params">localMacAddress2</span>)</span>;</span><br><span class="line">        <span class="comment">//bitcount命令</span></span><br><span class="line">        return(long) redisTemplate.execute((RedisCallback&lt;Long&gt;)con -&gt; con.bit<span class="constructor">Count(<span class="params">signkey</span>.<span class="params">getBytes</span>()</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取连续签到天数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> get<span class="constructor">ContinusSignCount(String <span class="params">userId</span>, Date <span class="params">today</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inetAddress = <span class="module-access"><span class="module"><span class="identifier">InetAddress</span>.</span></span>get<span class="constructor">LocalHost()</span>;</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span></span><br><span class="line">        String localMacAddress2 = <span class="module-access"><span class="module"><span class="identifier">NetUtil</span>.</span></span>get<span class="constructor">MacAddress(<span class="params">inetAddress</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;localMacAddress2 = &quot;</span> + localMacAddress2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取日期对应的天数</span></span><br><span class="line">        <span class="built_in">int</span> dayofMonth = <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>day<span class="constructor">OfMonth(<span class="params">today</span>)</span>;</span><br><span class="line">        String signkey = build<span class="constructor">SignKEy(<span class="params">userId</span> , <span class="params">today</span> , <span class="params">localMacAddress2</span>)</span>;</span><br><span class="line"></span><br><span class="line">        BitFieldSubCommands bitFieldSubCommands = <span class="module-access"><span class="module"><span class="identifier">BitFieldSubCommands</span>.</span></span>create<span class="literal">()</span>.get(<span class="module-access"><span class="module"><span class="identifier">BitFieldSubCommands</span>.</span><span class="module"><span class="identifier">BitFieldType</span>.</span></span>unsigned(dayofMonth)).value<span class="constructor">At(0)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取用户从该当前日期到1号的状态</span></span><br><span class="line">        List&lt;Long&gt; <span class="built_in">list</span> = redisTemplate.ops<span class="constructor">ForValue()</span>.bit<span class="constructor">Field(<span class="params">signkey</span> , <span class="params">bitFieldSubCommands</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">list</span><span class="operator"> == </span>null<span class="operator"> || </span><span class="built_in">list</span>.is<span class="constructor">Empty()</span>)&#123;</span><br><span class="line">            return  <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> Signcount = <span class="number">0</span>;</span><br><span class="line">        long v = <span class="built_in">list</span>.get(<span class="number">0</span>)<span class="operator"> == </span>null ? <span class="number">0</span> :<span class="built_in">list</span>.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = dayofMonth ; i &gt; <span class="number">0</span> ; i--)&#123;</span><br><span class="line">            <span class="comment">// i表示位移操作的次数</span></span><br><span class="line">            <span class="keyword">if</span>(v &gt;&gt; <span class="number">1</span> &lt;&lt; <span class="number">1</span><span class="operator"> == </span>v) &#123;</span><br><span class="line">                <span class="comment">// 用户当前可能未签到，所以要排除当天的可能性</span></span><br><span class="line">                <span class="keyword">if</span>(i != dayofMonth) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果右移后又左移和自己不相等 代表她已经签到</span></span><br><span class="line">                Signcount++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 右移一位并重新赋值，相当于丢弃已经判断的数字</span></span><br><span class="line">            v &gt;&gt;= <span class="number">1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        return Signcount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// redis里存储的key方法</span></span><br><span class="line">    <span class="keyword">private</span> String build<span class="constructor">SignKEy(String <span class="params">userId</span>, Date <span class="params">date</span> , String <span class="params">localMacAddress</span>)</span> &#123;</span><br><span class="line">        return  <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>format(<span class="string">&quot;user:%s:%s:0:%s&quot;</span>,userId ,localMacAddress, <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>format(date, <span class="string">&quot;yyyyMM&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断是不是补签</span></span><br><span class="line">    <span class="keyword">private</span> Date get<span class="constructor">Date(String <span class="params">dataStr</span>)</span> &#123;</span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">StrUtil</span>.</span></span>is<span class="constructor">Blank(<span class="params">dataStr</span>)</span> ? <span class="keyword">new</span> <span class="constructor">Date()</span> : <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>parse<span class="constructor">Date(<span class="params">dataStr</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 教师查看端</span></span><br><span class="line">    public List&lt;Object&gt; teachercck(String DataStr) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;Object , Object&gt; result = <span class="keyword">new</span> <span class="constructor">HashMap()</span>;</span><br><span class="line">        List&lt;Object&gt; <span class="keyword">end</span> = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        String basicname = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + <span class="string">&quot;*&quot;</span>)</span>);</span><br><span class="line">        String<span class="literal">[]</span> basic = basicname.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        Date date = get<span class="constructor">Date(DataStr)</span>;</span><br><span class="line">        <span class="built_in">int</span> day = <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>day<span class="constructor">OfMonth(<span class="params">date</span>)</span> - <span class="number">1</span>;</span><br><span class="line"><span class="comment">//        end.put(&quot;code&quot; , 0);</span></span><br><span class="line"><span class="comment">//        end.put(&quot;msg&quot; , &quot;&quot;);</span></span><br><span class="line"><span class="comment">//        result.put(&quot;count&quot; , basic.length);</span></span><br><span class="line">        <span class="keyword">end</span>.add(basic.length);</span><br><span class="line">        <span class="keyword">for</span>( <span class="built_in">int</span> i = <span class="number">0</span> ; i &lt; basic.length ; i++ )&#123;</span><br><span class="line">                String<span class="literal">[]</span> namebasic  =  basic<span class="literal">[<span class="identifier">i</span>]</span>.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                String signkey = build<span class="constructor">SignKEy(<span class="params">namebasic</span>[1], <span class="params">date</span> , <span class="params">namebasic</span>[2])</span>;</span><br><span class="line">                boolean isSigned = redisTemplate.ops<span class="constructor">ForValue()</span>.get<span class="constructor">Bit(<span class="params">signkey</span> , <span class="params">day</span>)</span>;</span><br><span class="line"><span class="comment">//                result.put(i+1 , namebasic[1]);</span></span><br><span class="line">                <span class="keyword">end</span>.add(namebasic<span class="literal">[<span class="number">1</span>]</span>);</span><br><span class="line">                <span class="keyword">end</span>.add(namebasic<span class="literal">[<span class="number">2</span>]</span>);</span><br><span class="line"><span class="comment">//                result.put(namebasic[1], namebasic[2]);</span></span><br><span class="line">                <span class="keyword">if</span> (isSigned)&#123;</span><br><span class="line"><span class="comment">//                    result.put(namebasic[2] , &quot;今日已经签到&quot;);</span></span><br><span class="line">                    <span class="keyword">end</span>.add(<span class="string">&quot;今日已经签到&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//                    result.put(namebasic[2] , &quot;今日没有签到&quot;);</span></span><br><span class="line">                    <span class="keyword">end</span>.add(<span class="string">&quot;今日未签到&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (namebasic<span class="literal">[<span class="number">3</span>]</span>.equals(<span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">end</span>.add(<span class="string">&quot;未获得补签权限&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">end</span>.add(<span class="string">&quot;已经获得补签权限&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return <span class="keyword">end</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 教师更改学生可以补签的权限</span></span><br><span class="line">    public Map&lt;Object , Object&gt; teacherchange(String UserId)</span><br><span class="line">    &#123;</span><br><span class="line">        Map&lt;Object , Object&gt; result = <span class="keyword">new</span> <span class="constructor">HashMap()</span>;</span><br><span class="line">        String basicname = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> +UserId+ <span class="string">&quot;:*&quot;</span>)</span>);</span><br><span class="line">        String changgename = basicname.substring(basicname.index<span class="constructor">Of(<span class="string">&quot;[&quot;</span>)</span>+<span class="number">1</span> , basicname.index<span class="constructor">Of(<span class="string">&quot;]&quot;</span>)</span>);</span><br><span class="line">        String<span class="literal">[]</span> namebasic  =  changgename.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String newname = namebasic<span class="literal">[<span class="number">0</span>]</span> + <span class="string">&quot;:&quot;</span> + namebasic<span class="literal">[<span class="number">1</span>]</span> + <span class="string">&quot;:&quot;</span> + namebasic<span class="literal">[<span class="number">2</span>]</span> + <span class="string">&quot;:1:&quot;</span> + namebasic<span class="literal">[<span class="number">4</span>]</span>;</span><br><span class="line">        redisTemplate.rename(changgename , newname);</span><br><span class="line"></span><br><span class="line">        result.put(<span class="string">&quot;code&quot;</span> , <span class="number">404</span>);</span><br><span class="line">        result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;成功修改&quot;</span>);</span><br><span class="line">        return  result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="控制端"><a href="#控制端" class="headerlink" title="控制端"></a>控制端</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package com.<span class="property">example</span>.<span class="property">demo</span>.<span class="property">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.<span class="property">example</span>.<span class="property">demo</span>.<span class="property">Servicedemo</span>.<span class="property">SignService</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">web</span>.<span class="property">bind</span>.<span class="property">annotation</span>.<span class="property">GetMapping</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">web</span>.<span class="property">bind</span>.<span class="property">annotation</span>.<span class="property">PostMapping</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">web</span>.<span class="property">bind</span>.<span class="property">annotation</span>.<span class="property">RequestMapping</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">web</span>.<span class="property">bind</span>.<span class="property">annotation</span>.<span class="property">RestController</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">annotation</span>.<span class="property">Resource</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">Map</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;sign&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">SignService</span> signservice;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 用户的签到可以补签</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Map</span>&lt;<span class="title class_">String</span>  , <span class="title class_">Object</span>&gt; <span class="title function_">doSignIn</span>(<span class="params"><span class="built_in">String</span> UserId , <span class="built_in">String</span> DataStr</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> signservice.<span class="title function_">doSign</span>(<span class="title class_">UserId</span> , <span class="title class_">DataStr</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户当天的签到情况</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">&quot;today&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Map</span>&lt;<span class="title class_">String</span>  , <span class="title class_">Object</span>&gt; <span class="title function_">getSignByDate</span>(<span class="params"><span class="built_in">String</span> UserId , <span class="built_in">String</span> DataStr</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> signservice.<span class="title function_">getSignByDate</span>(<span class="title class_">UserId</span> , <span class="title class_">DataStr</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">&quot;SIGNFO&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span>  <span class="title class_">Map</span>&lt;<span class="title class_">String</span> , <span class="title class_">Object</span>&gt; <span class="title class_">GetSignInfo</span>(<span class="title class_">String</span> <span class="title class_">UserId</span> , <span class="title class_">String</span> <span class="title class_">DataStr</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  signservice.<span class="title function_">getSignInfo</span>(<span class="title class_">UserId</span> , <span class="title class_">DataStr</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">&quot;/teacher&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> java.<span class="property">util</span>.<span class="property">List</span>&lt;<span class="title class_">Object</span>&gt; <span class="title class_">Getinfo</span>(<span class="title class_">String</span> <span class="title class_">DataStr</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> signservice.<span class="title function_">teachercck</span>(<span class="title class_">DataStr</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">&quot;/change&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Map</span>&lt;<span class="title class_">Object</span>, <span class="title class_">Object</span>&gt; <span class="title function_">chenge</span>(<span class="params"><span class="built_in">String</span> USerId</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> signservice.<span class="title function_">teacherchange</span>(<span class="title class_">USerId</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="自动启动浏览器"><a href="#自动启动浏览器" class="headerlink" title="自动启动浏览器"></a>自动启动浏览器</h2><ul>
<li>先在SignDemo的同级目录下创建web启动类</li>
<li>如下</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String run() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;启动springboot成功!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>然后在与SignDEmo同级的包里创建一个浏览器自动启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.demo.AutoB;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.event.ApplicationReadyEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoBrower</span> &#123;</span><br><span class="line">    <span class="meta">@EventListener(&#123;ApplicationReadyEvent.class&#125;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">applicationReadyEvent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;应用已经准备就绪 ... 启动浏览器&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里需要注url:端口号+测试类方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:9999/index.html&quot;</span>;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runtime.exec(<span class="string">&quot;rundll32 url.dll,FileProtocolHandler &quot;</span> + url);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面那个url是我们要自动启动的网页</li>
</ul>
<h1 id="前端浏览器页面"><a href="#前端浏览器页面" class="headerlink" title="前端浏览器页面"></a>前端浏览器页面</h1><ul>
<li>前端浏览器页面我们主要使用ajax进行浏览器的传值，</li>
<li>前端我们使用了嵌套的布局，是一个index嵌套一个welcome</li>
<li>代码如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/css/layui.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">class</span>=<span class="string">&quot;layui-elem-field layui-field-title&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 30px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;layui-col-md3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab layui-tab-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-this&quot;</span>&gt;</span>签到<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>补签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span>记录<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-item layui-show&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-radius layui-btn-normal layui-form-label&quot;</span> <span class="attr">id</span> = <span class="string">&quot;SignBtn&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 20px&quot;</span> &gt;</span> 签 &amp;nbsp 到<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;title&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>你已签到<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span> = <span class="string">&quot;color: red;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span> &gt;</span>0 <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>天<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>连续签到<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span> = <span class="string">&quot;color: red;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span>天<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reissue&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择日期&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-radius layui-btn-normal&quot;</span> <span class="attr">id</span> = <span class="string">&quot;reissueBtn&quot;</span>&gt;</span> 补签<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;title&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-item&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-radius layui-btn-normal layui-form-label&quot;</span> <span class="attr">id</span> = <span class="string">&quot;recordLi&quot;</span>&gt;</span>查询记录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;title&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span> <span class="attr">id</span>=<span class="string">&quot;record&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/element-ui/2.15.10/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $(function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     var value = jQuery(&quot;#user&quot;).val();</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     $.ajax(&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         url: &quot;/sign/today&quot;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         type: &quot;GET&quot;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         data: &#123;&quot;UserId&quot; : value&#125;, // 模拟的用户id</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         dataType: &quot;JSON&quot;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         success: function f(result) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//             layer.msg(result.message);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//             if(200 == result.code)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                 if (true == result.today) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     $(&quot;#count&quot;).text(result.count);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     // 设置连续签到次数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     $(&quot;#continuous&quot;).text(result.continuous);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     // 设置签到按钮的文本</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     $(&quot;#SignBtn&quot;).text(&quot;已经签到&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     // 禁用签到按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     $(&quot;#SignBtn&quot;).addClass(&quot;layui-btn-disabled&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     $(&quot;#SignBtn&quot;).attr(&quot;disabled&quot; , &quot;true&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                 &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//             &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    layui.<span class="title function_">use</span>(<span class="string">&#x27;laydate&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> laydate = layui.<span class="property">laydate</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//执行一个laydate实例</span></span></span><br><span class="line"><span class="language-javascript">        laydate.<span class="title function_">render</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">elem</span>: <span class="string">&#x27;#reissue&#x27;</span> <span class="comment">//指定元素</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    layui.<span class="title function_">use</span>(<span class="string">&#x27;layer&#x27;</span> , <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 签到</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#SignBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> value = <span class="title function_">jQuery</span>(<span class="string">&quot;#user&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;/sign&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;<span class="string">&quot;UserId&quot;</span>: value&#125;, <span class="comment">// 模拟的用户id</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// for (var m in result)&#123;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//     alert(m)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//     alert(result[m])</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">                    layer.<span class="title function_">msg</span>(result.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="number">200</span> == result.<span class="property">code</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 设置总签到次数</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#count&quot;</span>).<span class="title function_">text</span>(result.<span class="property">count</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 设置连续签到次数</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#continuous&quot;</span>).<span class="title function_">text</span>(result.<span class="property">continuous</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 设置签到按钮的文本</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#SignBtn&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;已经签到&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 禁用签到按钮</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#SignBtn&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;layui-btn-disabled&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#SignBtn&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;disabled&quot;</span>, <span class="string">&quot;true&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//补签</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#reissueBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span> , <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> va = <span class="title function_">jQuery</span>(<span class="string">&quot;#user1&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;/sign&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;<span class="string">&quot;UserId&quot;</span> : va , <span class="string">&quot;DataStr&quot;</span> : $(<span class="string">&quot;#reissue&quot;</span>).<span class="title function_">val</span>()&#125;, <span class="comment">// 模拟的用户id</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    layer.<span class="title function_">msg</span>(result.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(<span class="number">200</span> == result.<span class="property">code</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 设置总签到次数</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#count&quot;</span>).<span class="title function_">text</span>(result.<span class="property">count</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 设置连续签到次数</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#continuous&quot;</span>).<span class="title function_">text</span>(result.<span class="property">continuous</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 签到记录的元素</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#recordLi&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span> , <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> vae = <span class="title function_">jQuery</span>(<span class="string">&quot;#user2&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        layui.<span class="title function_">use</span>(<span class="string">&#x27;layer&#x27;</span> , <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> laydate = layui.<span class="property">laydate</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取签到记录</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;/sign/SIGNFO&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;<span class="string">&quot;UserId&quot;</span>: vae&#125;, <span class="comment">// 模拟的用户id</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 清空日历元素</span></span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#record&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    laydate.<span class="title function_">render</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">elem</span>: <span class="string">&#x27;#record&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                        ,<span class="attr">mark</span>: result,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">position</span>: <span class="string">&#x27;static&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>index的</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户签到系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/css/layui.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-layout layui-layout-admin&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-logo layui-hide-xs layui-bg-black&quot;</span>&gt;</span>用户签到系统<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 头部区域（可配合layui 已有的水平导航） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav layui-layout-left&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 移动端显示 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item layui-show-xs-inline-block layui-hide-sm&quot;</span> <span class="attr">lay-header-event</span>=<span class="string">&quot;menuLeft&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;layui-icon layui-icon-spread-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item layui-hide-xs&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>签到<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-side layui-bg-black&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-side-scroll&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 左侧导航区域（可配合layui已有的垂直导航） --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内容主体区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;welcome.html&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 100%; &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 底部固定区域 --&gt;</span></span><br><span class="line">        底部固定区域</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>上述只是学生端的，对于教师端也和其大差不差，代码如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Layui<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;webkit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/css/layui.css&quot;</span>    <span class="attr">media</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意：如果你直接复制所有代码到本地，上述css路径需要改成你本地的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>教师中心<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab layui-tab-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-this&quot;</span>&gt;</span>查看签到情况<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>更改权限<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-item layui-show&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>  <span class="attr">style</span>=<span class="string">&#x27;width:300px&#x27;</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mac地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>今日签到情况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>补签情况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;tbody1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-item&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-radius layui-btn-normal&quot;</span> <span class="attr">id</span> = <span class="string">&quot;reissueBtn&quot;</span>&gt;</span>更改补签权限<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;title&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：如果你直接复制所有代码到本地，上述 JS 路径需要改成你本地的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/element-ui/2.15.10/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/sign/teacher&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;<span class="string">&quot;DataStr&quot;</span>: <span class="literal">null</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> m = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> tableData = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">1</span>; k &lt;= result[<span class="number">0</span>]; k++) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    tableData += <span class="string">&quot;&lt;tr  style=&#x27;width:300px&#x27; &gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span> + m; i &lt;= <span class="number">4</span> + m; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                        tableData += <span class="string">&quot;&lt;td&gt;&quot;</span> + result[i] + <span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// tableData += &quot;&lt;td&gt;&lt;button type=&#x27;submit&#x27; onclick=&#x27;btnAction&#x27; name=&#x27;btn&#x27;&gt;更改补签权限&lt;/button&gt;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    tableData += <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    m += <span class="number">4</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;#tbody1&quot;</span>).<span class="title function_">html</span>(tableData)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     $(<span class="string">&quot;#reissueBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span> , <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">var</span> va = <span class="title function_">jQuery</span>(<span class="string">&quot;#user1&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(va)</span></span><br><span class="line"><span class="language-javascript">         $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">url</span>: <span class="string">&quot;/sign/change&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">data</span>: &#123;<span class="string">&quot;USerId&quot;</span> : va&#125;,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">success</span>: <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                 layer.<span class="title function_">msg</span>(result.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         &#125;);</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>教师的index</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>教师观察系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/css/layui.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-layout layui-layout-admin&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-logo layui-hide-xs layui-bg-black&quot;</span>&gt;</span>教师观察系统<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 头部区域（可配合layui 已有的水平导航） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav layui-layout-left&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 移动端显示 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item layui-show-xs-inline-block layui-hide-sm&quot;</span> <span class="attr">lay-header-event</span>=<span class="string">&quot;menuLeft&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;layui-icon layui-icon-spread-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item layui-hide-xs&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>签到情况<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-side layui-bg-black&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-side-scroll&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 左侧导航区域（可配合layui已有的垂直导航） --&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内容主体区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;teacher.html&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 100%; &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 底部固定区域 --&gt;</span></span><br><span class="line">        底部固定区域</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>签到的制作</category>
      </categories>
  </entry>
  <entry>
    <title>踩过的坑</title>
    <url>/2022/11/17/%E5%9D%91/</url>
    <content><![CDATA[<h1 id="修改windows下的hosts文件不生效"><a href="#修改windows下的hosts文件不生效" class="headerlink" title="修改windows下的hosts文件不生效"></a>修改windows下的hosts文件不生效</h1><ul>
<li>这个坑一直卡了我三四天</li>
<li>配置完hadoop集群，进行web访问的时候出现了这个问题</li>
<li>因为windows的主机映射不好使，所以我无法在网页端查看数据</li>
</ul>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul>
<li>我这里解决这个的办法是通过</li>
<li>把中间空格放大的方法</li>
<li>就是一个小空格加一个tab键</li>
<li>然后进入 <code>edge://net-internals</code>或者 <code>chrome://net-internals</code></li>
<li>这取决于你的浏览器</li>
<li>然后 <code>win + x</code> 查看windows powershell（管理员）打开之后执行 <code> ipconfig /flushdns</code></li>
<li>刷新之后就可以通过映射访问了</li>
</ul>
<h1 id="有关于idea关于Hadoop的api的copyToLocalfile不生效"><a href="#有关于idea关于Hadoop的api的copyToLocalfile不生效" class="headerlink" title="有关于idea关于Hadoop的api的copyToLocalfile不生效"></a>有关于idea关于Hadoop的api的copyToLocalfile不生效</h1><ul>
<li>报错信息 <code>java.io.FileNotFoundException: HADOOP_HOME and hadoop.home.dir are unset.</code></li>
<li>这个是代表你windows里没有配置hadoop环境</li>
<li>我们可以不用他提供的api</li>
<li>通过</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">FSDataInputStream fis = fs.<span class="keyword">open</span>(<span class="keyword">new</span> <span class="constructor">Path(<span class="string">&quot;/date&quot;</span>)</span>); <span class="comment">// hdfs上的文件</span></span><br><span class="line">OutputStream outputStream = <span class="keyword">new</span> <span class="constructor">FileOutputStream( <span class="params">new</span> File(<span class="string">&quot;D:\\ bg1.txt&quot;</span>)</span> , <span class="literal">false</span>); <span class="comment">// 本地的存储地点</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">IOUtils</span>.</span></span>copy<span class="constructor">Bytes(<span class="params">fis</span>,<span class="params">outputStream</span>,4096 , <span class="params">true</span>)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>就可以实现下载</li>
</ul>
<h1 id="关于linux里的mysql会自动识别大小写表名的事情"><a href="#关于linux里的mysql会自动识别大小写表名的事情" class="headerlink" title="关于linux里的mysql会自动识别大小写表名的事情"></a>关于linux里的mysql会自动识别大小写表名的事情</h1><p>linux里的mysql会自动对表名进行大小写区分，这可能导致一些boot项目启动的时候找不到表名</p>
<p>如何更改如下</p>
<p>首先查看自己的表名大小写权限是不是打开了</p>
<p>先在mysql里执行</p>
<p><code>show variables like &quot;%case%&quot;;</code></p>
<p>查看一下我们的权限打没打开</p>
<p>一般默认的时候会有个off的选项</p>
<p>这个是默认的情况</p>
<p>接下来我们对其进行修改</p>
<p>我们首先退出mysql</p>
<p>然后关闭mysql服务输入 ： <code>mysqladmin -uroot -p shutdown //以安全模式关闭数据库</code></p>
<p>接下来输入密码就关闭了</p>
<p>然后编辑mysql的配置文件</p>
<p>输入 ： <code>vim /etc/my.cnf</code></p>
<p>在mysqld下添加一行</p>
<p><code>lower_case_table_names=1</code></p>
<p>然后退出保存即可</p>
<p>最后要重新启动mysql输入 ： <code>systemctl resatrt mysqld</code></p>
<p>就可以了</p>
<h1 id="mysql误删了配置文件-performance-schema的恢复"><a href="#mysql误删了配置文件-performance-schema的恢复" class="headerlink" title="mysql误删了配置文件 performance_schema的恢复"></a>mysql误删了配置文件 performance_schema的恢复</h1><p>首先我们退出mysql</p>
<p>然后输入 <code>mysql_upgrade -u root -p </code></p>
<p>输入我们的密码之后</p>
<p>然后重新登录我们的mysql就会出现了</p>
<h1 id="npm怎么清除缓存"><a href="#npm怎么清除缓存" class="headerlink" title="npm怎么清除缓存"></a>npm怎么清除缓存</h1><p>首先关于npm进行清除缓存</p>
<p>先明确自己的npm的版本</p>
<p>如果npm version &lt; 7.0.0</p>
<p><code>$ npm cache clean -f</code></p>
<p>npm version ≧ 7.0.0 会报以下错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm cache cleannpm ERR! As of npm@5, the npm cache self-heals from corruption issues</span><br><span class="line">npm ERR! by treating integrity mismatches as cache misses.  As a result,</span><br><span class="line">npm ERR! data extracted from the cache is guaranteed to be valid.  If you</span><br><span class="line">npm ERR! want to make sure everything is consistent, use npm cache verify</span><br><span class="line">npm ERR! instead.  Deleting the cache can only make npm go slower, and is</span><br><span class="line">npm ERR! not likely to correct any problems you may be encountering!</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! On the other hand, <span class="keyword">if</span> you<span class="string">&#x27;re debugging an issue with the installer,</span></span><br><span class="line"><span class="string">npm ERR! or race conditions that depend on the timing of writing to an empty</span></span><br><span class="line"><span class="string">npm ERR! cache, you can use npm install --cache /tmp/empty-cache to use a</span></span><br><span class="line"><span class="string">npm ERR! temporary cache instead of nuking the actual one.</span></span><br><span class="line"><span class="string">npm ERR!</span></span><br><span class="line"><span class="string">npm ERR! If you&#x27;</span>re sure you want to delete the entire cache, rerun this <span class="built_in">command</span></span><br><span class="line">npm ERR! with --force.npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /Users/xxxxxx/.npm/_logs/2021-02-04T06_35_38_043Z-debug.log</span><br></pre></td></tr></table></figure>

<p>如果想强制清除缓存就要用–force</p>
<h1 id="关于npm设置镜像源"><a href="#关于npm设置镜像源" class="headerlink" title="关于npm设置镜像源"></a>关于npm设置镜像源</h1><p><code>npm config set registry http://registry.npm.taobao.org</code></p>
<p>然后就把淘宝镜像源加进入了</p>
<h1 id="Git之本地分支和远程分支建立追踪关系的几种方式"><a href="#Git之本地分支和远程分支建立追踪关系的几种方式" class="headerlink" title="Git之本地分支和远程分支建立追踪关系的几种方式"></a>Git之本地分支和远程分支建立追踪关系的几种方式</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/remote_branch your_branch</span><br><span class="line">origin/remote_branch是你本地分支对应的远程分支；your_branch是你当前的本地分支。</span><br></pre></td></tr></table></figure>

<p>或者之间checkout -b 根据远程建立本地分支</p>
<h1 id="git-删除远程分支"><a href="#git-删除远程分支" class="headerlink" title="git 删除远程分支"></a>git 删除远程分支</h1><p><code> git push origin --delete [branch_name]</code></p>
<h1 id="云服务器内存不够，设置swap交换分区"><a href="#云服务器内存不够，设置swap交换分区" class="headerlink" title="云服务器内存不够，设置swap交换分区"></a>云服务器内存不够，设置swap交换分区</h1><p>闲来无事自己用云主机搭建了一台gitlab，但是由于云主机是2G2核的在刚开始布置完成之后，访问的时候时常会502</p>
<p>就是服务器的内存被占据太多了，无法响应导致的</p>
<p>然后就想办法设置交换分区解决这个问题</p>
<p>首先要在root 用户下</p>
<p>然后是创建交换分区的文件 <code>/file/swap</code></p>
<p>然后执行 <code>dd if=/dev/zero of=/file/swap bs=1024 count=4096000</code></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/dev/</span>zero是输入，<span class="regexp">/file/</span>swap是交换文件位置，路径得存在，bs读/写的块大小，<span class="keyword">count</span>是swap大小</span><br></pre></td></tr></table></figure>

<p>然后执行 <code>mkswap /file/swap</code></p>
<p>把第一步的文件设置成swap交换区</p>
<p>启用swap交换分区</p>
<p><code>swapon /file/swap</code></p>
<p>设置成开机挂载交换区</p>
<p><code>echo &quot;/file/swap swap swap defaults 0 0&quot; &gt;&gt; /etc/fstab</code></p>
<p>设置启动的条件</p>
<p><code>vim /etc/sysctl.conf 将vm.swappiness = 0值改为50</code></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">这个值是如何使用<span class="keyword">swap</span>分区值越大越积极使用<span class="keyword">swap</span>分区，越小表示越积极使用物理内存，wappiness=<span class="number">50</span>，表示内存使用率超过<span class="number">100</span><span class="number">-50</span>=<span class="number">50</span>%时开始使用交换分区，swappiness=<span class="number">0</span>时不使用swapswappiness＝<span class="number">100</span>的时候表示积极使用<span class="keyword">swap</span>分区，并把内存上的数据及时搬运到<span class="keyword">swap</span>空间</span><br></pre></td></tr></table></figure>

<p>加载参数</p>
<p><code>sysctl -p</code></p>
<h1 id="git出现fatal-the-remote-end-hung-up-unexpectedly"><a href="#git出现fatal-the-remote-end-hung-up-unexpectedly" class="headerlink" title="git出现fatal: the remote end hung up unexpectedly"></a>git出现<strong>fatal: the remote end hung up unexpectedly</strong></h1><p>上传项目报fatal: the remote end hung up unexpectedly的错误，</p>
<p>应该是项目太大的原因， 要么是网络不行，要么墙的原因</p>
<p>解决办法：<br>修改提交缓存大小为500M，或者更大的数字<br>git config –global http.postBuffer 524288000</p>
<p>some comments below report having to double the value:</p>
<p>git config –global http.postBuffer 1048576000</p>
<p>或者是 在克隆&#x2F;创建版本库生成的 .git&#x2F;config 文件中加入:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[http]</span></span><br><span class="line"><span class="attr">postBuffer</span> = <span class="number">524288000</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>杂项</title>
    <url>/2022/10/27/%E6%9D%82%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="查看自己电脑可支持的最大内存"><a href="#查看自己电脑可支持的最大内存" class="headerlink" title="查看自己电脑可支持的最大内存"></a>查看自己电脑可支持的最大内存</h1><ul>
<li>打开cmd</li>
<li>输入wmic memphysical get maxcapacity</li>
<li>就会获得字节数</li>
<li>除以两个1024，就会是xxxG</li>
</ul>
<h1 id="查看电脑有几个卡槽"><a href="#查看电脑有几个卡槽" class="headerlink" title="查看电脑有几个卡槽"></a>查看电脑有几个卡槽</h1><ul>
<li>打开任务管理器</li>
<li>选择性能</li>
<li>上面就有已经使用了几个卡槽</li>
</ul>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>第一天</title>
    <url>/2022/10/27/%E7%89%9B%E5%AE%A21/</url>
    <content><![CDATA[<h1 id="实现二叉树的前序遍历"><a href="#实现二叉树的前序遍历" class="headerlink" title="实现二叉树的前序遍历"></a>实现二叉树的前序遍历</h1><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util<span class="operator">.*</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/*</span></span><br><span class="line"> <span class="operator">*</span> <span class="keyword">public</span> <span class="keyword">class</span> TreeNode &#123; <span class="comment">// 树形结构</span></span><br><span class="line"> <span class="operator">*</span>   int <span class="keyword">val</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> <span class="operator">*</span>   TreeNode left <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="operator">*</span>   TreeNode right <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="operator">*</span>   <span class="keyword">public</span> TreeNode(int <span class="keyword">val</span>) &#123;</span><br><span class="line"> <span class="operator">*</span>     this.<span class="keyword">val</span> <span class="operator">=</span> <span class="keyword">val</span>;</span><br><span class="line"> <span class="operator">*</span>   &#125;</span><br><span class="line"> <span class="operator">*</span> &#125;</span><br><span class="line"> <span class="operator">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="operator">/**</span></span><br><span class="line">     <span class="operator">*</span> 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     <span class="operator">*</span></span><br><span class="line">     <span class="operator">*</span> </span><br><span class="line">     <span class="operator">*</span> <span class="operator">@</span>param root TreeNode类 </span><br><span class="line">     <span class="operator">*</span> <span class="operator">@</span><span class="keyword">return</span> int整型一维数组</span><br><span class="line">     <span class="operator">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List<span class="operator">&lt;</span>Integer<span class="operator">&gt;</span> list <span class="operator">=</span> <span class="keyword">new</span> ArrayList<span class="operator">&lt;&gt;</span>();</span><br><span class="line">    <span class="keyword">public</span> int[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line"></span><br><span class="line">        list <span class="operator">=</span>  pre(root); <span class="comment">// 先设置一个函数，让他把二叉树的节点存入list中方便输出 ， 简单来说就是把二叉树转化为list形式的</span></span><br><span class="line">        int[] res <span class="operator">=</span> <span class="keyword">new</span> int[list.size()]; <span class="comment">// 设定一个输出数组 ，我们要遍历的其实是这个数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(int i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> list.size(); i<span class="operator">++</span>)&#123;</span><br><span class="line">           res[i] <span class="operator">=</span> list.<span class="built_in">get</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    List<span class="operator">&lt;</span>Integer<span class="operator">&gt;</span>  pre(TreeNode node)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node <span class="operator">==</span> <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(node.<span class="keyword">val</span>);</span><br><span class="line">        pre(node.left);</span><br><span class="line">        pre(node.right);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>其时间复杂度和空间复杂度都是O（N）</li>
<li>用堆栈实现<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val = 0;</span></span><br><span class="line"><span class="comment"> *   TreeNode left = null;</span></span><br><span class="line"><span class="comment"> *   TreeNode right = null;</span></span><br><span class="line"><span class="comment"> *   public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param root TreeNode类 </span></span><br><span class="line"><span class="comment">     * @return int整型一维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.<span class="keyword">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node=stack.<span class="keyword">pop</span>();</span><br><span class="line">            list.add(node.val);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) stack.<span class="keyword">push</span>(node.right);</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) stack.<span class="keyword">push</span>(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res= <span class="keyword">new</span> <span class="keyword">int</span>[list.<span class="keyword">size</span>()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.<span class="keyword">size</span>();i++)&#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>堆栈更简单可是更难理解，可以直接背</li>
</ul>
<h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util<span class="operator">.*</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">/*</span></span><br><span class="line"> <span class="operator">*</span> <span class="keyword">public</span> <span class="keyword">class</span> TreeNode &#123;</span><br><span class="line"> <span class="operator">*</span>   int <span class="keyword">val</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> <span class="operator">*</span>   TreeNode left <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="operator">*</span>   TreeNode right <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="operator">*</span>   <span class="keyword">public</span> TreeNode(int <span class="keyword">val</span>) &#123;</span><br><span class="line"> <span class="operator">*</span>     this.<span class="keyword">val</span> <span class="operator">=</span> <span class="keyword">val</span>;</span><br><span class="line"> <span class="operator">*</span>   &#125;</span><br><span class="line"> <span class="operator">*</span> &#125;</span><br><span class="line"> <span class="operator">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="operator">/**</span></span><br><span class="line">     <span class="operator">*</span> 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     <span class="operator">*</span></span><br><span class="line">     <span class="operator">*</span> </span><br><span class="line">     <span class="operator">*</span> <span class="operator">@</span>param root TreeNode类 </span><br><span class="line">     <span class="operator">*</span> <span class="operator">@</span><span class="keyword">return</span> int整型一维数组</span><br><span class="line">     <span class="operator">*/</span></span><br><span class="line"></span><br><span class="line">    List<span class="operator">&lt;</span>Integer<span class="operator">&gt;</span> list <span class="operator">=</span><span class="keyword">new</span> ArrayList<span class="operator">&lt;&gt;</span>();</span><br><span class="line">    <span class="keyword">public</span> int[] inorderTraversal (TreeNode root) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        pre(root);</span><br><span class="line">        int[] res <span class="operator">=</span> <span class="keyword">new</span> int[list.size()];</span><br><span class="line">        <span class="keyword">for</span>(int i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> list.size(); i<span class="operator">++</span>)&#123;</span><br><span class="line">            res[i] <span class="operator">=</span> list.<span class="built_in">get</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List<span class="operator">&lt;</span>Integer<span class="operator">&gt;</span> pre(TreeNode node)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node <span class="operator">==</span> <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        pre(node.left);</span><br><span class="line">        list.add(node.<span class="keyword">val</span>);</span><br><span class="line">        pre(node.right);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>用堆栈实现</li>
<li><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val = 0;</span></span><br><span class="line"><span class="comment"> *   TreeNode left = null;</span></span><br><span class="line"><span class="comment"> *   TreeNode right = null;</span></span><br><span class="line"><span class="comment"> *   public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param root TreeNode类 </span></span><br><span class="line"><span class="comment">     * @return int整型一维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">        stack.<span class="keyword">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node=stack.<span class="keyword">pop</span>();</span><br><span class="line">			<span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) stack.<span class="keyword">push</span>(node.right);</span><br><span class="line">            list.add(node.val);</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) stack.<span class="keyword">push</span>(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res= <span class="keyword">new</span> <span class="keyword">int</span>[list.<span class="keyword">size</span>()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.<span class="keyword">size</span>();i++)&#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="二叉树的后序遍历"><a href="#二叉树的后序遍历" class="headerlink" title="二叉树的后序遍历"></a>二叉树的后序遍历</h1><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import java.util<span class="operator">.*</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="operator">/*</span></span><br><span class="line">		 <span class="operator">*</span> <span class="keyword">public</span> <span class="keyword">class</span> TreeNode &#123;</span><br><span class="line">		 <span class="operator">*</span>   int <span class="keyword">val</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		 <span class="operator">*</span>   TreeNode left <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		 <span class="operator">*</span>   TreeNode right <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		 <span class="operator">*</span>   <span class="keyword">public</span> TreeNode(int <span class="keyword">val</span>) &#123;</span><br><span class="line">		 <span class="operator">*</span>     this.<span class="keyword">val</span> <span class="operator">=</span> <span class="keyword">val</span>;</span><br><span class="line">		 <span class="operator">*</span>   &#125;</span><br><span class="line">		 <span class="operator">*</span> &#125;</span><br><span class="line">		 <span class="operator">*/</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">		    <span class="operator">/**</span></span><br><span class="line">		     <span class="operator">*</span> 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">		     <span class="operator">*</span></span><br><span class="line">		     <span class="operator">*</span> </span><br><span class="line">		     <span class="operator">*</span> <span class="operator">@</span>param root TreeNode类 </span><br><span class="line">		     <span class="operator">*</span> <span class="operator">@</span><span class="keyword">return</span> int整型一维数组</span><br><span class="line">		     <span class="operator">*/</span></span><br><span class="line">		</span><br><span class="line">		    List<span class="operator">&lt;</span>Integer<span class="operator">&gt;</span> list <span class="operator">=</span><span class="keyword">new</span> ArrayList<span class="operator">&lt;&gt;</span>();</span><br><span class="line">		    <span class="keyword">public</span> int[] inorderTraversal (TreeNode root) &#123;</span><br><span class="line">		        <span class="comment">// write code here</span></span><br><span class="line">		        pre(root);</span><br><span class="line">		        int[] res <span class="operator">=</span> <span class="keyword">new</span> int[list.size()];</span><br><span class="line">		        <span class="keyword">for</span>(int i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> list.size(); i<span class="operator">++</span>)&#123;</span><br><span class="line">		            res[i] <span class="operator">=</span> list.<span class="built_in">get</span>(i);</span><br><span class="line">		        &#125;</span><br><span class="line">		        <span class="keyword">return</span> res;</span><br><span class="line">		    &#125;</span><br><span class="line">		</span><br><span class="line">		    List<span class="operator">&lt;</span>Integer<span class="operator">&gt;</span> pre(TreeNode node)&#123;</span><br><span class="line">		        <span class="keyword">if</span>(node <span class="operator">==</span> <span class="literal">null</span>)&#123;</span><br><span class="line">		            <span class="keyword">return</span> list;</span><br><span class="line">		        &#125;</span><br><span class="line">		        pre(node.right);</span><br><span class="line">		        list.add(node.<span class="keyword">val</span>);</span><br><span class="line">		        pre(node.left);</span><br><span class="line">		        <span class="keyword">return</span> list;</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>用堆栈实现<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val = 0;</span></span><br><span class="line"><span class="comment"> *   TreeNode left = null;</span></span><br><span class="line"><span class="comment"> *   TreeNode right = null;</span></span><br><span class="line"><span class="comment"> *   public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param root TreeNode类 </span></span><br><span class="line"><span class="comment">     * @return int整型一维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">        stack.<span class="keyword">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node=stack.<span class="keyword">pop</span>();</span><br><span class="line">				<span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) stack.<span class="keyword">push</span>(node.left);</span><br><span class="line">            list.add(node.val);</span><br><span class="line">			<span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) stack.<span class="keyword">push</span>(node.right);</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res= <span class="keyword">new</span> <span class="keyword">int</span>[list.<span class="keyword">size</span>()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.<span class="keyword">size</span>();i++)&#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h1><ul>
<li>bfs</li>
<li><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;<span class="built_in">Integer</span>&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">    <span class="comment">//边界条件判断</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="built_in">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    <span class="built_in">Queue</span>&lt;TreeNode&gt; <span class="built_in">queue</span> = <span class="literal">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;ArrayList&lt;<span class="built_in">Integer</span>&gt;&gt; res = <span class="literal">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//根节点入队</span></span><br><span class="line">    <span class="built_in">queue</span>.add(root);</span><br><span class="line">    <span class="comment">//如果队列不为空就继续循环</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">queue</span>.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//BFS打印，levelNum表示的是每层的结点数</span></span><br><span class="line">        int levelNum = <span class="built_in">queue</span>.size();</span><br><span class="line">        <span class="comment">//subList存储的是每层的结点值</span></span><br><span class="line">        ArrayList&lt;<span class="built_in">Integer</span>&gt; subList = <span class="literal">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = <span class="number">0</span>; i &lt; levelNum; i++) &#123;</span><br><span class="line">            <span class="comment">//出队</span></span><br><span class="line">            TreeNode node = <span class="built_in">queue</span>.poll();</span><br><span class="line">            subList.add(node.val);</span><br><span class="line">            <span class="comment">//左右子节点如果不为空就加入到队列中</span></span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="built_in">null</span>)</span><br><span class="line">                <span class="built_in">queue</span>.add(node.left);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="built_in">null</span>)</span><br><span class="line">                <span class="built_in">queue</span>.add(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把每层的结点值存储在res中，</span></span><br><span class="line">        res.add(subList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>dfs</li>
<li><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; level<span class="constructor">Order(TreeNode <span class="params">root</span>)</span> &#123;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">    level<span class="constructor">Helper(<span class="params">res</span>, <span class="params">root</span>, 0)</span>;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void level<span class="constructor">Helper(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="params">list</span>, TreeNode <span class="params">root</span>, <span class="params">int</span> <span class="params">level</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//边界条件判断</span></span><br><span class="line">    <span class="keyword">if</span> (root<span class="operator"> == </span>null)</span><br><span class="line">        return;</span><br><span class="line">    <span class="comment">//level表示的是层数，如果level &gt;= list.size()，说明到下一层了，所以</span></span><br><span class="line">    <span class="comment">//要先把下一层的list初始化，防止下面add的时候出现空指针异常</span></span><br><span class="line">    <span class="keyword">if</span> (level &gt;= <span class="built_in">list</span>.size<span class="literal">()</span>) &#123;</span><br><span class="line">        <span class="built_in">list</span>.add(<span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//level表示的是第几层，这里访问到第几层，我们就把数据加入到第几层</span></span><br><span class="line">    <span class="built_in">list</span>.get(level).add(root.<span class="keyword">val</span>);</span><br><span class="line">    <span class="comment">//当前节点访问完之后，再使用递归的方式分别访问当前节点的左右子节点</span></span><br><span class="line">    level<span class="constructor">Helper(<span class="params">list</span>, <span class="params">root</span>.<span class="params">left</span>, <span class="params">level</span> + 1)</span>;</span><br><span class="line">    level<span class="constructor">Helper(<span class="params">list</span>, <span class="params">root</span>.<span class="params">right</span>, <span class="params">level</span> + 1)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="按照之字型打印二叉树"><a href="#按照之字型打印二叉树" class="headerlink" title="按照之字型打印二叉树"></a>按照之字型打印二叉树</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="built_in">public</span> ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt; &gt; Print(TreeNode pRoot) &#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; q = <span class="built_in">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt; res = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span> rev = <span class="keyword">true</span>;</span><br><span class="line">        q.<span class="keyword">add</span>(pRoot);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.size();</span><br><span class="line">            ArrayList&lt;<span class="type">Integer</span>&gt; list = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">                TreeNode node = q.poll();</span><br><span class="line">                <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>(rev)&#123;</span><br><span class="line">                    list.<span class="keyword">add</span>(node.val);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    list.<span class="keyword">add</span>(<span class="number">0</span>, node.val);</span><br><span class="line">                &#125;</span><br><span class="line">                q.offer(node.left);</span><br><span class="line">                q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(list.size()!=<span class="number">0</span>)&#123;res.<span class="keyword">add</span>(list);&#125;</span><br><span class="line">            rev=!rev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span> <span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//空节点没有深度</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//队列维护层次后续节点</span></span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;(); </span><br><span class="line">        <span class="comment">//根入队</span></span><br><span class="line">        q.offer(root); </span><br><span class="line">        <span class="comment">//记录深度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">        <span class="comment">//层次遍历</span></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123; </span><br><span class="line">            <span class="comment">//记录当前层有多少节点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> q.size(); </span><br><span class="line">            <span class="comment">//遍历完这一层，再进入下一层</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123; </span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> q.poll();</span><br><span class="line">                <span class="comment">//添加下一层的左右节点</span></span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>) </span><br><span class="line">                    q.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>)</span><br><span class="line">                    q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//深度加1</span></span><br><span class="line">            res++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>用堆栈因该也可以，尝试想想</li>
</ul>
<h1 id="二叉树中和为某一个值的路径"><a href="#二叉树中和为某一个值的路径" class="headerlink" title="二叉树中和为某一个值的路径"></a>二叉树中和为某一个值的路径</h1><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val = 0;</span></span><br><span class="line"><span class="comment"> *   TreeNode left = null;</span></span><br><span class="line"><span class="comment"> *   TreeNode right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param root TreeNode类 </span></span><br><span class="line"><span class="comment">     * @param sum int整型 </span></span><br><span class="line"><span class="comment">     * @return bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> hasPathSum (TreeNode root, <span class="built_in">int</span> <span class="keyword">sum</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> helper(root,<span class="keyword">sum</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> helper(TreeNode node,<span class="built_in">int</span> <span class="keyword">sum</span>,<span class="built_in">int</span> preSum)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> node.val + preSum == <span class="keyword">sum</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        preSum += node.val;</span><br><span class="line">        <span class="keyword">return</span> helper(node.left,<span class="keyword">sum</span>,preSum) || helper(node.right,<span class="keyword">sum</span> ,preSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="二叉搜索树和双向链表"><a href="#二叉搜索树和双向链表" class="headerlink" title="二叉搜索树和双向链表"></a>二叉搜索树和双向链表</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    TreeNode pre= <span class="literal">null</span>;</span><br><span class="line">    TreeNode <span class="attribute">root</span>=<span class="literal">null</span>;</span><br><span class="line">    public TreeNode Convert(TreeNode pRootOfTree) &#123;</span><br><span class="line">        <span class="keyword">if</span>(pRootOfTree ==<span class="literal">null</span>) return <span class="literal">null</span>;</span><br><span class="line">        Convert(pRootOfTree.left);</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="attribute">root</span>=pRootOfTree;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">            pRootOfTree.<span class="attribute">left</span>=pre;</span><br><span class="line">            pre.<span class="attribute">right</span>=pRootOfTree;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">pre</span>=pRootOfTree;</span><br><span class="line">        Convert(pRootOfTree.right);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>牛客刷题</category>
      </categories>
  </entry>
  <entry>
    <title>自我认为的知识点</title>
    <url>/2022/12/15/%E6%8A%80%E6%9C%AF%E7%82%B9/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>awk为什么会被称作linux三剑客之一，相比于cut如何？</p>
<p>场景 ： 通过ssh bigdata2 “jps | xxx | awk ‘{print $1}’” :结果如何 ？前提条件 ：bigdata2的密钥已经添加在当前的机器上，且jps能查到xxx的进程号</p>
<h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>场景 ： 当所有命令都提示找不到命令 ，是什么原因 ，如何解决 ？</p>
<p>场景 ： 当有命令提示找不到命令 ，是什么原因 ，如何解决 ？</p>
<h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p>众所周知 ，root用户有最高的权限 ，那么当我们在hadoop用户启动程序通过jps能查看到信息的，切换到root用户我们可以看见信息吗</p>
<h2 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h2><p>一台机器里有hadoop ,zihang ,root 三个用户 ，你所在的用户是root ，当你执行su - zihang 的时候什么也没出现并且你还在root用户，这个是什么原因，如何修复</p>
<h2 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h2><p>linux里查看内存负载，以及所用内存，以及设置swap分区的命令及步骤，</p>
<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><h2 id="问题1-1"><a href="#问题1-1" class="headerlink" title="问题1"></a>问题1</h2><p>shell里如何控制从控制台输入的参数，传进函数里的个数</p>
<h2 id="问题2-1"><a href="#问题2-1" class="headerlink" title="问题2"></a>问题2</h2><p>shell 里截取字符串以及替换字符串是如何实现的</p>
<h2 id="问题3-1"><a href="#问题3-1" class="headerlink" title="问题3"></a>问题3</h2><p>shell里的$全家桶</p>
<h2 id="问题4-1"><a href="#问题4-1" class="headerlink" title="问题4"></a>问题4</h2><p>shell里单引号，双引号，漂号的区别，以及两种括号的形式（）和{}的区别</p>
<h2 id="问题5-1"><a href="#问题5-1" class="headerlink" title="问题5"></a>问题5</h2><p>shell脚本执行不了，但是代码毫无问题，只是单纯提示最后一行结尾不对，原因有几种，解决办法是什么</p>
<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="问题1-2"><a href="#问题1-2" class="headerlink" title="问题1"></a>问题1</h2><p>mysql中where和having的区别</p>
<h2 id="问题2-2"><a href="#问题2-2" class="headerlink" title="问题2"></a>问题2</h2><p>mysql中我如果想把竖着的一列变成横着的如何操作：</p>
<table>
<thead>
<tr>
<th>人数</th>
<th>部门</th>
</tr>
</thead>
<tbody><tr>
<td>11</td>
<td>a</td>
</tr>
</tbody></table>
<p>其中5人生病，6人未生病，如何变成下面的样子:说出大概思路即可</p>
<table>
<thead>
<tr>
<th>人数</th>
<th>部门</th>
<th>生病人数</th>
<th>未生病人数</th>
</tr>
</thead>
<tbody><tr>
<td>11</td>
<td>a</td>
<td>0</td>
<td>6</td>
</tr>
<tr>
<td>11</td>
<td>a</td>
<td>5</td>
<td>0</td>
</tr>
</tbody></table>
<h2 id="问题3-2"><a href="#问题3-2" class="headerlink" title="问题3"></a>问题3</h2><p>mysql中判断空值的方法有什么，以及多路选择的方法</p>
<h2 id="问题4-2"><a href="#问题4-2" class="headerlink" title="问题4"></a>问题4</h2><p>在往mysql的表里插入数据的时候，发现带有中文的字符插入不进去，如何解决，什么原因造成的，mysql8及以后如何</p>
<h2 id="问题5-2"><a href="#问题5-2" class="headerlink" title="问题5"></a>问题5</h2><p>你认为mysql为什么到目前为止都没有被淘汰？</p>
<h1 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h1><h2 id="问题1-3"><a href="#问题1-3" class="headerlink" title="问题1"></a>问题1</h2><p>关于hadoop的基础架构，以及mr的流程</p>
<h2 id="问题2-3"><a href="#问题2-3" class="headerlink" title="问题2"></a>问题2</h2><p>关于客户端向hdfs上传输数据的流程，而且它是如何被分块的</p>
<h2 id="问题3-3"><a href="#问题3-3" class="headerlink" title="问题3"></a>问题3</h2><p>hadoop文件存储的放置策略，以及为什么这样放置</p>
<h2 id="问题4-3"><a href="#问题4-3" class="headerlink" title="问题4"></a>问题4</h2><p>Hadoop上的yarn的申请资源的流程，以及为什么要使用多块物理磁盘？</p>
<h2 id="问题5-3"><a href="#问题5-3" class="headerlink" title="问题5"></a>问题5</h2><p>hdfs上的压缩格式，以及优缺点，和我们常用的</p>
<h1 id="hive"><a href="#hive" class="headerlink" title="hive"></a>hive</h1><h2 id="问题1-4"><a href="#问题1-4" class="headerlink" title="问题1"></a>问题1</h2><p>你所理解的hive是什么？</p>
<h2 id="问题2-4"><a href="#问题2-4" class="headerlink" title="问题2"></a>问题2</h2><p>hive在mysql中的几个关键表都是什么</p>
<h2 id="问题3-4"><a href="#问题3-4" class="headerlink" title="问题3"></a>问题3</h2><p>hive里空值如何处理，hive中mapjoin如何开启以及开启之后的原理</p>
<h2 id="问题4-4"><a href="#问题4-4" class="headerlink" title="问题4"></a>问题4</h2><p>hive里内部表和外部表的区别，以及如何转化</p>
<h2 id="问题5-4"><a href="#问题5-4" class="headerlink" title="问题5"></a>问题5</h2><p>hive里的开窗函数能用在什么函数上，开窗之后还可以分组吗</p>
<h2 id="问题6"><a href="#问题6" class="headerlink" title="问题6"></a>问题6</h2><p>hive如何把一列数据转化为数组，并且hive的适用场景是什么</p>
<h1 id="flume"><a href="#flume" class="headerlink" title="flume"></a>flume</h1><h2 id="问题1-5"><a href="#问题1-5" class="headerlink" title="问题1"></a>问题1</h2><p>flume如何设置传输到hdfs上的数据的压缩格式</p>
<h2 id="问题2-5"><a href="#问题2-5" class="headerlink" title="问题2"></a>问题2</h2><p>flume如何控制小文件的数量，以及如何监控flume的采集情况</p>
<h2 id="问题3-5"><a href="#问题3-5" class="headerlink" title="问题3"></a>问题3</h2><p>flume如何控制多个channel和Sink，以及控制形式都有什么</p>
<h2 id="问题4-5"><a href="#问题4-5" class="headerlink" title="问题4"></a>问题4</h2><p>现阶段如何解决日志数据延迟性问题</p>
<h2 id="问题5-5"><a href="#问题5-5" class="headerlink" title="问题5"></a>问题5</h2><p>flume采集的数据文件会丢失吗，为什么以及taildir所谓的断点续传是什么，由什么控制</p>
<h1 id="sqoop"><a href="#sqoop" class="headerlink" title="sqoop"></a>sqoop</h1><h2 id="问题1-6"><a href="#问题1-6" class="headerlink" title="问题1"></a>问题1</h2><p>sqoop同步mysql到hive的时候如何设置分区表</p>
<h2 id="问题2-6"><a href="#问题2-6" class="headerlink" title="问题2"></a>问题2</h2><p>sqoop是走mr程序吗？为什么sqoop运行如此的慢</p>
<h2 id="问题3-6"><a href="#问题3-6" class="headerlink" title="问题3"></a>问题3</h2><p>sqoop同步hive到mysql的时候经常因为不明原因就中断了，如何解决</p>
<h2 id="问题4-6"><a href="#问题4-6" class="headerlink" title="问题4"></a>问题4</h2><p>sqoop同步hive到mysql分区表的思路以及操作是什么</p>
<h2 id="问题5-6"><a href="#问题5-6" class="headerlink" title="问题5"></a>问题5</h2><p>sqoop导入数据的时候如何保证数据的幂等性</p>
<h1 id="zk"><a href="#zk" class="headerlink" title="zk"></a>zk</h1><h2 id="问题1-7"><a href="#问题1-7" class="headerlink" title="问题1"></a>问题1</h2><p>如何创建临时节点和永久节点</p>
<h2 id="问题2-7"><a href="#问题2-7" class="headerlink" title="问题2"></a>问题2</h2><p>四字命令是干什么的</p>
<h2 id="问题3-7"><a href="#问题3-7" class="headerlink" title="问题3"></a>问题3</h2><p>zk命令行监听和api监听的区别，通过上面命令进行监听</p>
<h2 id="问题4-7"><a href="#问题4-7" class="headerlink" title="问题4"></a>问题4</h2><p>如何创建顺序节点</p>
<h2 id="问题5-7"><a href="#问题5-7" class="headerlink" title="问题5"></a>问题5</h2><p>zk如何管理我们的namenode的上位，以及，如何监控的</p>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
  </entry>
</search>
