<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>细节</title>
    <url>/2022/10/28/10-28/</url>
    <content><![CDATA[<h1 id="关于Map的遍历"><a href="#关于Map的遍历" class="headerlink" title="关于Map的遍历"></a>关于Map的遍历</h1><ul>
<li>我们可以用Set来遍历</li>
<li>代码如下:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">map2.put(&quot;Tom&quot;, &quot;Corejava&quot;);</span><br><span class="line">map2.put(&quot;Jerry&quot;, &quot;Jsp&quot;);</span><br><span class="line">map2.put(&quot;KJSHHKJ&quot; , &quot;Oracle&quot;);</span><br><span class="line">Set m = map2.entrySet();</span><br><span class="line">m.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<ul>
<li>我们还可以用，把map转换成流再进行</li>
<li>代码如下：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">map2.entrySet().stream().filter((item) -&gt; &quot;Oracle&quot;.equals(item.getValue())).forEach((item) -&gt; System.out.println(item.getKey()));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>特别帅气，</li>
<li>而且foreach的本质就是流</li>
<li>先通过entryset转换成集合</li>
<li>然后集合有Stream方法，可以转化成流</li>
<li>然后对于流我们加上filter（过滤器）</li>
<li>筛选我们想要的结构，这个过滤器里面只能放返回值是布尔的</li>
<li>然后筛选完了，我们可以对他进行lambda的表达输出语句</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>杂项</title>
    <url>/2022/10/27/%E6%9D%82%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="查看自己电脑可支持的最大内存"><a href="#查看自己电脑可支持的最大内存" class="headerlink" title="查看自己电脑可支持的最大内存"></a>查看自己电脑可支持的最大内存</h1><ul>
<li>打开cmd</li>
<li>输入wmic memphysical get maxcapacity</li>
<li>就会获得字节数</li>
<li>除以两个1024，就会是xxxG</li>
</ul>
<h1 id="查看电脑有几个卡槽"><a href="#查看电脑有几个卡槽" class="headerlink" title="查看电脑有几个卡槽"></a>查看电脑有几个卡槽</h1><ul>
<li>打开任务管理器</li>
<li>选择性能</li>
<li>上面就有已经使用了几个卡槽</li>
</ul>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
  </entry>
  <entry>
    <title>第一天</title>
    <url>/2022/10/27/%E7%89%9B%E5%AE%A21/</url>
    <content><![CDATA[<h1 id="实现二叉树的前序遍历"><a href="#实现二叉树的前序遍历" class="headerlink" title="实现二叉树的前序遍历"></a>实现二叉树的前序遍历</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * public class TreeNode &#123; // 树形结构</span><br><span class="line"> *   int val = 0;</span><br><span class="line"> *   TreeNode left = null;</span><br><span class="line"> *   TreeNode right = null;</span><br><span class="line"> *   public TreeNode(int val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     * </span><br><span class="line">     * @param root TreeNode类 </span><br><span class="line">     * @return int整型一维数组</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">    public int[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        // write code here</span><br><span class="line"></span><br><span class="line">        list =  pre(root); // 先设置一个函数，让他把二叉树的节点存入list中方便输出 ， 简单来说就是把二叉树转化为list形式的</span><br><span class="line">        int[] res = new int[list.size()]; // 设定一个输出数组 ，我们要遍历的其实是这个数组</span><br><span class="line"></span><br><span class="line">        for(int i = 0; i &lt; list.size(); i++)&#123;</span><br><span class="line">           res[i] = list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt;  pre(TreeNode node)&#123;</span><br><span class="line"></span><br><span class="line">        if(node == null)&#123;</span><br><span class="line">                return list;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(node.val);</span><br><span class="line">        pre(node.left);</span><br><span class="line">        pre(node.right);</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>其时间复杂度和空间复杂度都是O（N）</li>
<li>用堆栈实现<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *   int val = 0;</span><br><span class="line"> *   TreeNode left = null;</span><br><span class="line"> *   TreeNode right = null;</span><br><span class="line"> *   public TreeNode(int val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     * </span><br><span class="line">     * @param root TreeNode类 </span><br><span class="line">     * @return int整型一维数组</span><br><span class="line">     */</span><br><span class="line">    private List&lt;Integer&gt; list=new ArrayList&lt;&gt;();</span><br><span class="line">    public int[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        // write code here</span><br><span class="line">        if(root==null) return new int[0];</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=new Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        while(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            list.add(node.val);</span><br><span class="line">            </span><br><span class="line">            if(node.right!=null) stack.push(node.right);</span><br><span class="line">            if(node.left!=null) stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        int[] res= new int[list.size()];</span><br><span class="line">        for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>堆栈更简单可是更难理解，可以直接背</li>
</ul>
<h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *   int val = 0;</span><br><span class="line"> *   TreeNode left = null;</span><br><span class="line"> *   TreeNode right = null;</span><br><span class="line"> *   public TreeNode(int val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     * </span><br><span class="line">     * @param root TreeNode类 </span><br><span class="line">     * @return int整型一维数组</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list =new ArrayList&lt;&gt;();</span><br><span class="line">    public int[] inorderTraversal (TreeNode root) &#123;</span><br><span class="line">        // write code here</span><br><span class="line">        pre(root);</span><br><span class="line">        int[] res = new int[list.size()];</span><br><span class="line">        for(int i = 0; i &lt; list.size(); i++)&#123;</span><br><span class="line">            res[i] = list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; pre(TreeNode node)&#123;</span><br><span class="line">        if(node == null)&#123;</span><br><span class="line">            return list;</span><br><span class="line">        &#125;</span><br><span class="line">        pre(node.left);</span><br><span class="line">        list.add(node.val);</span><br><span class="line">        pre(node.right);</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>用堆栈实现</li>
<li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *   int val = 0;</span><br><span class="line"> *   TreeNode left = null;</span><br><span class="line"> *   TreeNode right = null;</span><br><span class="line"> *   public TreeNode(int val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     * </span><br><span class="line">     * @param root TreeNode类 </span><br><span class="line">     * @return int整型一维数组</span><br><span class="line">     */</span><br><span class="line">    private List&lt;Integer&gt; list=new ArrayList&lt;&gt;();</span><br><span class="line">    public int[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        // write code here</span><br><span class="line">        if(root==null) return new int[0];</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=new Stack&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">        stack.push(root);</span><br><span class="line">        while(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">			if(node.right!=null) stack.push(node.right);</span><br><span class="line">            list.add(node.val);</span><br><span class="line">            if(node.left!=null) stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        int[] res= new int[list.size()];</span><br><span class="line">        for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="二叉树的后序遍历"><a href="#二叉树的后序遍历" class="headerlink" title="二叉树的后序遍历"></a>二叉树的后序遍历</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line">		</span><br><span class="line">		/*</span><br><span class="line">		 * public class TreeNode &#123;</span><br><span class="line">		 *   int val = 0;</span><br><span class="line">		 *   TreeNode left = null;</span><br><span class="line">		 *   TreeNode right = null;</span><br><span class="line">		 *   public TreeNode(int val) &#123;</span><br><span class="line">		 *     this.val = val;</span><br><span class="line">		 *   &#125;</span><br><span class="line">		 * &#125;</span><br><span class="line">		 */</span><br><span class="line">		</span><br><span class="line">		public class Solution &#123;</span><br><span class="line">		    /**</span><br><span class="line">		     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">		     *</span><br><span class="line">		     * </span><br><span class="line">		     * @param root TreeNode类 </span><br><span class="line">		     * @return int整型一维数组</span><br><span class="line">		     */</span><br><span class="line">		</span><br><span class="line">		    List&lt;Integer&gt; list =new ArrayList&lt;&gt;();</span><br><span class="line">		    public int[] inorderTraversal (TreeNode root) &#123;</span><br><span class="line">		        // write code here</span><br><span class="line">		        pre(root);</span><br><span class="line">		        int[] res = new int[list.size()];</span><br><span class="line">		        for(int i = 0; i &lt; list.size(); i++)&#123;</span><br><span class="line">		            res[i] = list.get(i);</span><br><span class="line">		        &#125;</span><br><span class="line">		        return res;</span><br><span class="line">		    &#125;</span><br><span class="line">		</span><br><span class="line">		    List&lt;Integer&gt; pre(TreeNode node)&#123;</span><br><span class="line">		        if(node == null)&#123;</span><br><span class="line">		            return list;</span><br><span class="line">		        &#125;</span><br><span class="line">		        pre(node.right);</span><br><span class="line">		        list.add(node.val);</span><br><span class="line">		        pre(node.left);</span><br><span class="line">		        return list;</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>用堆栈实现<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *   int val = 0;</span><br><span class="line"> *   TreeNode left = null;</span><br><span class="line"> *   TreeNode right = null;</span><br><span class="line"> *   public TreeNode(int val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     * </span><br><span class="line">     * @param root TreeNode类 </span><br><span class="line">     * @return int整型一维数组</span><br><span class="line">     */</span><br><span class="line">    private List&lt;Integer&gt; list=new ArrayList&lt;&gt;();</span><br><span class="line">    public int[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        // write code here</span><br><span class="line">        if(root==null) return new int[0];</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=new Stack&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">        stack.push(root);</span><br><span class="line">        while(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">				if(node.left!=null) stack.push(node.left);</span><br><span class="line">            list.add(node.val);</span><br><span class="line">			if(node.right!=null) stack.push(node.right);</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        int[] res= new int[list.size()];</span><br><span class="line">        for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h1><ul>
<li>bfs</li>
<li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">    //边界条件判断</span><br><span class="line">    if (root == null)</span><br><span class="line">        return new ArrayList&lt;&gt;();</span><br><span class="line">    //队列</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">    //根节点入队</span><br><span class="line">    queue.add(root);</span><br><span class="line">    //如果队列不为空就继续循环</span><br><span class="line">    while (!queue.isEmpty()) &#123;</span><br><span class="line">        //BFS打印，levelNum表示的是每层的结点数</span><br><span class="line">        int levelNum = queue.size();</span><br><span class="line">        //subList存储的是每层的结点值</span><br><span class="line">        ArrayList&lt;Integer&gt; subList = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; levelNum; i++) &#123;</span><br><span class="line">            //出队</span><br><span class="line">            TreeNode node = queue.poll();</span><br><span class="line">            subList.add(node.val);</span><br><span class="line">            //左右子节点如果不为空就加入到队列中</span><br><span class="line">            if (node.left != null)</span><br><span class="line">                queue.add(node.left);</span><br><span class="line">            if (node.right != null)</span><br><span class="line">                queue.add(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        //把每层的结点值存储在res中，</span><br><span class="line">        res.add(subList);</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>dfs</li>
<li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">    levelHelper(res, root, 0);</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void levelHelper(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list, TreeNode root, int level) &#123;</span><br><span class="line">    //边界条件判断</span><br><span class="line">    if (root == null)</span><br><span class="line">        return;</span><br><span class="line">    //level表示的是层数，如果level &gt;= list.size()，说明到下一层了，所以</span><br><span class="line">    //要先把下一层的list初始化，防止下面add的时候出现空指针异常</span><br><span class="line">    if (level &gt;= list.size()) &#123;</span><br><span class="line">        list.add(new ArrayList&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    //level表示的是第几层，这里访问到第几层，我们就把数据加入到第几层</span><br><span class="line">    list.get(level).add(root.val);</span><br><span class="line">    //当前节点访问完之后，再使用递归的方式分别访问当前节点的左右子节点</span><br><span class="line">    levelHelper(list, root.left, level + 1);</span><br><span class="line">    levelHelper(list, root.right, level + 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="按照之字型打印二叉树"><a href="#按照之字型打印二叉树" class="headerlink" title="按照之字型打印二叉树"></a>按照之字型打印二叉树</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.LinkedList;</span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public ArrayList&lt;ArrayList&lt;Integer&gt; &gt; Print(TreeNode pRoot) &#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; q = new LinkedList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        boolean rev = true;</span><br><span class="line">        q.add(pRoot);</span><br><span class="line">        while(!q.isEmpty())&#123;</span><br><span class="line">            int size = q.size();</span><br><span class="line">            ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">            for(int i=0; i&lt;size; i++)&#123;</span><br><span class="line">                TreeNode node = q.poll();</span><br><span class="line">                if(node == null)&#123;continue;&#125;</span><br><span class="line">                if(rev)&#123;</span><br><span class="line">                    list.add(node.val);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    list.add(0, node.val);</span><br><span class="line">                &#125;</span><br><span class="line">                q.offer(node.left);</span><br><span class="line">                q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            if(list.size()!=0)&#123;res.add(list);&#125;</span><br><span class="line">            rev=!rev;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public int maxDepth (TreeNode root) &#123;</span><br><span class="line">        //空节点没有深度</span><br><span class="line">        if(root == null) </span><br><span class="line">            return 0;</span><br><span class="line">        //队列维护层次后续节点</span><br><span class="line">        Queue&lt;TreeNode&gt; q = new LinkedList&lt;TreeNode&gt;(); </span><br><span class="line">        //根入队</span><br><span class="line">        q.offer(root); </span><br><span class="line">        //记录深度</span><br><span class="line">        int res = 0; </span><br><span class="line">        //层次遍历</span><br><span class="line">        while(!q.isEmpty())&#123; </span><br><span class="line">            //记录当前层有多少节点</span><br><span class="line">            int n = q.size(); </span><br><span class="line">            //遍历完这一层，再进入下一层</span><br><span class="line">            for(int i = 0; i &lt; n; i++)&#123; </span><br><span class="line">                TreeNode node = q.poll();</span><br><span class="line">                //添加下一层的左右节点</span><br><span class="line">                if(node.left != null) </span><br><span class="line">                    q.offer(node.left);</span><br><span class="line">                if(node.right != null)</span><br><span class="line">                    q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            //深度加1</span><br><span class="line">            res++; </span><br><span class="line">        &#125;</span><br><span class="line">        return res; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>用堆栈因该也可以，尝试想想</li>
</ul>
]]></content>
      <categories>
        <category>牛客刷题</category>
      </categories>
  </entry>
  <entry>
    <title>Map</title>
    <url>/2022/10/27/10-27/</url>
    <content><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><ul>
<li><p>Map和集合是无关系的</p>
</li>
<li><p>Map是个接口</p>
</li>
<li><p>旗下有hashMap和TreeMap</p>
</li>
<li><p>简单代码</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Map&lt;String , String&gt; map1 = new HashMap&lt;&gt;();</span><br><span class="line">	map1.put(&quot;1&quot;, &quot;事假&quot;);</span><br><span class="line">	map1.put(&quot;2&quot;, &quot;病假&quot;);</span><br><span class="line">	map1.put(&quot;3&quot;, &quot;产假&quot;);</span><br><span class="line">	map1.put(&quot;2&quot;, &quot;施加&quot;);</span><br><span class="line">	Set&lt;String&gt; ks = map1.keySet();</span><br><span class="line">	Iterator&lt;String&gt; it = ks.iterator();</span><br><span class="line">	while(it.hasNext()) &#123;</span><br><span class="line">		String item = it.next();</span><br><span class="line">		System.out.println(&quot;key&quot; + item + &quot;@value:&quot; + map1.get(item));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>entrySet</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Set&lt;Map.Entry&lt;String, String&gt;&gt; km = map1.entrySet();</span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; il = km.iterator();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while(il.hasNext()) &#123;</span><br><span class="line">Entry&lt;String , String&gt; entry = il.next();</span><br><span class="line">System.out.println(entry.getKey() + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (Entry&lt;String, String&gt; entry : km) &#123;</span><br><span class="line">	System.out.println(entry.getKey() + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">km.forEach(new Consumer() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void accept(Object t) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line">	System.out.println(t);</span><br><span class="line">&#125;&#125;); // Consumer里面有个抽象方法 ，accept，我们要做的事情放进这个accept里，就代表对其每个元素进行accept里的操作 ，就是lambda的表达式</span><br><span class="line">		</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>上述是两种遍历方式，迭代器可边遍历便删除，是我们最古老的，可是也是唯一有这个功能的 ，iterator</li>
<li>其他的都要遍历完了才能再删除</li>
<li>而且entrySet比keySet是要更快点的（单纯遍历）</li>
<li>迭代器的算法是要比后来的算法速度快的，遍历的时候</li>
</ul>
<h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><ul>
<li>lambda表达式是很便捷的一种方法</li>
<li>要求：定义规则，定义几个变量</li>
<li>首先，我们要定义一个接口</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">interface Yunsuan&#123;</span><br><span class="line">	public int yunsuan(int i , int j);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>然后在这个接口上增加@FunctionalInterface ，注意这个标志是让这个接口只有一个抽象方法，多个抽象方法会报错</li>
<li>这一步是定义我们的，几个元素</li>
<li>接下来我们定义一个函数 ，让这个接口当作参数 ，并且给这个接口传入两个参数</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public static int getresult(int a , int b, Yunsuan yunsuan) &#123;</span><br><span class="line">	return	yunsuan.yunsuan(a, b);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>这样 ，我们就算是把这个规则实体化了，接下来我们只要调用这个规则的实例化，就可以对这两个数进行任意操作了</li>
<li>比如<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">System.out.println(getresult(3,2, (i,j)-&gt;i+j)); // 前面两个是实参 ，后面的是规则就这样写就行 ，格式固定，但是语法不固定</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>上面的foreach里嵌套的就算lambda的表达式</li>
</ul>
<h1 id="Map特殊事项"><a href="#Map特殊事项" class="headerlink" title="Map特殊事项"></a>Map特殊事项</h1><ul>
<li><p>如果在map里把key放入引用类型，则对比key的操作会变成对比hashcode和equals，可控性更强</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class TEstmain1 &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		Map&lt;stu , Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		map.put(new stu(&quot;小明&quot;  , 1), 1);</span><br><span class="line">		map.put(null , null);</span><br><span class="line">		map.put(new stu(&quot;狗蛋&quot; , 1) , 2);</span><br><span class="line">		System.out.println(map.size());</span><br><span class="line">		map.forEach((k , v) -&gt; &#123;System.out.println(k + &quot;@&quot; +v);&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>stu类，通过自动生成hashcode和equals，（我这里只生成了num的）</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class stu implements Comparable&lt;stu&gt;&#123;</span><br><span class="line">	private int num;</span><br><span class="line">	private String name;</span><br><span class="line">	private double score;</span><br><span class="line">	public stu( String name , int num) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">		this.num = num;</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	public stu( String name , int num , double m) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">		this.num = num;</span><br><span class="line">		this.score = m;</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public stu() &#123;</span><br><span class="line">		super();</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	public int getNum() &#123;</span><br><span class="line">		return num;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setNum(int num) &#123;</span><br><span class="line">		this.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public String toString() &#123;</span><br><span class="line">		return &quot;stu [num=&quot; + num + &quot;, name=&quot; + name + &quot;, score=&quot; + score + &quot;]&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public int hashCode() &#123;</span><br><span class="line">		final int prime = 31;</span><br><span class="line">		int result = 1;</span><br><span class="line">		result = prime * result + num;</span><br><span class="line">		return result;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public boolean equals(Object obj) &#123;</span><br><span class="line">		if (this == obj)</span><br><span class="line">			return true;</span><br><span class="line">		if (obj == null)</span><br><span class="line">			return false;</span><br><span class="line">		if (getClass() != obj.getClass())</span><br><span class="line">			return false;</span><br><span class="line">		stu other = (stu) obj;</span><br><span class="line">		if (num != other.num)</span><br><span class="line">			return false;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 大于0是正数，小于0是负数 ，等于0是相等 ，</span><br><span class="line">	@Override</span><br><span class="line">	public int compareTo(stu o) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		if(this.num == o.num) &#123;</span><br><span class="line">			return this.name.length() - o.name.length();</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			return o.num - this.num;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public double getScore() &#123;</span><br><span class="line">		return score;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setScore(double score) &#123;</span><br><span class="line">		this.score = score;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="lambda加for循环-加上TreeMap"><a href="#lambda加for循环-加上TreeMap" class="headerlink" title="lambda加for循环 加上TreeMap"></a>lambda加for循环 加上TreeMap</h1><ul>
<li><p>通过treeMap实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.TreeMap;</span><br><span class="line"></span><br><span class="line">public class TEstmain1 &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		TreeMap&lt;stu , Object&gt; map11 = new TreeMap();</span><br><span class="line">		map11.put(new stu(&quot;小明&quot;,  1), 1);</span><br><span class="line">		map11.put(new stu(&quot;狗蛋&quot; ,  2) ,2);</span><br><span class="line">		map11.put(new stu(&quot;linux&quot; , 3), 3);</span><br><span class="line">		map11.put(new stu(&quot;狗蛋&quot; ,  2) ,99);</span><br><span class="line">		map11.forEach(TEstmain1::abc);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void abc(stu s , Object value) &#123;</span><br><span class="line">		System.out.println(s + &quot;@&quot; +value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>上述的是针对foreach有两个参数的情况，可以定义一个函数，让他去传递参数，和lambda一样</p>
</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>SetTree</title>
    <url>/2022/10/26/10-26/</url>
    <content><![CDATA[<h1 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h1><ul>
<li><p>其是基于compareable的，</p>
</li>
<li><p>进行add的时候放的如果是引用类型，则要实现compareable接口，因为他就是用这个接口来实现的</p>
</li>
<li><p>对于基本类型，则不用</p>
</li>
<li><p>如果这样就会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.Set;</span><br><span class="line">import java.util.TreeSet;</span><br><span class="line"></span><br><span class="line">public class copyfilethread &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		Set&lt;String&gt; set = new TreeSet&lt;String&gt;();</span><br><span class="line">		set.add(&quot;2020-10-19&quot;);</span><br><span class="line">		set.add(&quot;1010-10-20&quot;);</span><br><span class="line">		System.out.println(set);</span><br><span class="line">		Set&lt;stu&gt; SET = new TreeSet&lt;stu&gt;();</span><br><span class="line">		SET.add(new stu(&quot;小明&quot; , 1));</span><br><span class="line">		SET.add(new stu(&quot;snisnh&quot; , 2));</span><br><span class="line">		SET.add(new stu(&quot;狗蛋&quot;  , 1));</span><br><span class="line">		SET.forEach(System.out::println);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>stu类</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">class stu &#123;</span><br><span class="line">	private int num;</span><br><span class="line">	private String name;</span><br><span class="line">	</span><br><span class="line">	public stu( String name , int num) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">		this.num = num;</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public stu() &#123;</span><br><span class="line">		super();</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	public int getNum() &#123;</span><br><span class="line">		return num;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setNum(int num) &#123;</span><br><span class="line">		this.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public String toString() &#123;</span><br><span class="line">		return &quot;stu [num=&quot; + num + &quot;, name=&quot; + name + &quot;]&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public int hashCode() &#123;</span><br><span class="line">		final int prime = 31;</span><br><span class="line">		int result = 1;</span><br><span class="line">		result = prime * result + ((name == null) ? 0 : name.hashCode());</span><br><span class="line">		result = prime * result + num;</span><br><span class="line">		return result;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public boolean equals(Object obj) &#123;</span><br><span class="line">		if (this == obj)</span><br><span class="line">			return true;</span><br><span class="line">		if (obj == null)</span><br><span class="line">			return false;</span><br><span class="line">		if (getClass() != obj.getClass())</span><br><span class="line">			return false;</span><br><span class="line">		stu other = (stu) obj;</span><br><span class="line">		if (name == null) &#123;</span><br><span class="line">			if (other.name != null)</span><br><span class="line">				return false;</span><br><span class="line">		&#125; else if (!name.equals(other.name))</span><br><span class="line">			return false;</span><br><span class="line">		if (num != other.num)</span><br><span class="line">			return false;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 大于0是正数，小于0是负数 ，等于0是相等 ，</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这样会报错，是类型转换的错误。</li>
<li>因为它实现的是compareable接口，对比引用类型的时候用的是这个接口里的方法</li>
<li>所以在stu类实现这个接口就可以不报错了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class stu implements Comparable&lt;stu&gt;&#123;</span><br><span class="line">	private int num;</span><br><span class="line">	private String name;</span><br><span class="line">	</span><br><span class="line">	public stu( String name , int num) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">		this.num = num;</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public stu() &#123;</span><br><span class="line">		super();</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	public int getNum() &#123;</span><br><span class="line">		return num;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setNum(int num) &#123;</span><br><span class="line">		this.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public String toString() &#123;</span><br><span class="line">		return &quot;stu [num=&quot; + num + &quot;, name=&quot; + name + &quot;]&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public int hashCode() &#123;</span><br><span class="line">		final int prime = 31;</span><br><span class="line">		int result = 1;</span><br><span class="line">		result = prime * result + ((name == null) ? 0 : name.hashCode());</span><br><span class="line">		result = prime * result + num;</span><br><span class="line">		return result;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public boolean equals(Object obj) &#123;</span><br><span class="line">		if (this == obj)</span><br><span class="line">			return true;</span><br><span class="line">		if (obj == null)</span><br><span class="line">			return false;</span><br><span class="line">		if (getClass() != obj.getClass())</span><br><span class="line">			return false;</span><br><span class="line">		stu other = (stu) obj;</span><br><span class="line">		if (name == null) &#123;</span><br><span class="line">			if (other.name != null)</span><br><span class="line">				return false;</span><br><span class="line">		&#125; else if (!name.equals(other.name))</span><br><span class="line">			return false;</span><br><span class="line">		if (num != other.num)</span><br><span class="line">			return false;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 大于0是正数，小于0是负数 ，等于0是相等 ，</span><br><span class="line">	@Override</span><br><span class="line">	public int compareTo(stu o) &#123;</span><br><span class="line">	return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>但是这样他只能往set里添加一个值</li>
<li>因为这个compare默认的时候就是这样</li>
<li>如果要再进行精度筛选则要，在被覆盖的compareto方法中自己定义，可以改成<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public int compareTo(stu o) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		if(this.num == o.num) &#123;</span><br><span class="line">			return this.name.length() - o.name.length();</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			return this.num - o.num;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>这样就会让如果学号相同，就会按照姓名的长度排序，小的在上面</li>
<li>总之就是可以在这个compareto这里设置规则</li>
<li>可控性强</li>
<li>这里只有数组的是length是属性，其他都是方法</li>
<li>集合的叫size</li>
<li>这个是用于实体类，数据类实现接口用 ， 表达的是自然的顺序，又叫自然排序</li>
</ul>
<h1 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h1><ul>
<li>比较器是对于list来说的</li>
<li>comparetor ：比较器，比上一个更自由 ，可以控制排序的方式，升序或者降序<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;stu&gt; list = new ArrayList&lt;stu&gt;();</span><br><span class="line">System.out.println(&quot;----------------------&quot;);</span><br><span class="line">list.add(new stu(&quot;下&quot; , 1 , 89.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 2 , 88.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 21 , 87.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 22 , 86.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 21 , 85.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 221 , 84.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 21 , 83.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 21 , 82.1));</span><br><span class="line"></span><br><span class="line">Collections.sort(list , (a,b) -&gt; -((int)(b.getScore() - a.getScore() * 100 ))); // 这个里面的代表 ， 我们的比较规则， 前面代表要排序的集合，list不去重 ， a,b代表两个元素list中的，后面的就是比较的规则了，一般是升序排序，但是我们可以通过添加-的方法，让他进行降序，他底层也是tree</span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure></li>
<li>通过lambal表达式进行比较排序</li>
<li>但是其实这个sort方法也是Arrays.sort，它是将所有元素转入一个数组，对数组进行排序，然后，将排好序 的序列复制回列表 ，</li>
<li>sort()是根据需要排序的数组的长度进行区分的:</li>
<li>首先先判断需要排序的数据量是否大于60。</li>
<li>小于60：使用插入排序，插入排序是稳定的</li>
<li>大于60的数据量会根据数据类型选择排序方式：</li>
<li>基本类型：使用快速排序。「因为基本类型不需要考虑稳定性」</li>
<li>Object类型：使用归并排序「因为归并排序具有稳定性」</li>
<li>注意：不管是快速排序还是归并排序。在二分的时候小于60的数据量依旧会使用插入排序</li>
<li>Collections.reverseOrder()也可以进行降序排序 , 只不过是要基本类型</li>
</ul>
<h1 id="映射Map"><a href="#映射Map" class="headerlink" title="映射Map"></a>映射Map</h1><ul>
<li>是一种接口</li>
<li>是一种&lt;k , V&gt; 结构 ，就是一个key对应一个value，其key不会重复，而value可以重复</li>
<li>一个&lt;Ｋ，V&gt;叫一个ｅｎｔｒｙ</li>
<li>万能&lt;Ｋ，V&gt;他可以代表一个对象</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li>ｃｌｅａｒ清除所有映射</li>
<li>ｂｏｏｌｅａｎ　ｃｏｎｔａｉｎｓＫｅｙ（Ｏｂｊｅｃｔ　ｋｅｙ）：判断一个ｋｅｙ是不是存在</li>
<li>ｅｎｔｒｙＳｅｔ（）获取ｅｎｔｒｙ集合，就是条目集合<br>，返回类型是一个Ｓｅｔ</li>
<li>ｇｅｔ（ｋｅｙ）根据ｋｅｙ获取ｖａｌｕｅ</li>
<li>ｋｅｙＳｅｔ（）返回ｋｅｙ的集合</li>
<li>ｐｕｔ（K，ｖ），往，ｍａｐ加入一条数据，但是存在相同的ｋｅｙ就覆盖</li>
<li>ｒｅｍｏｖｅ（ｋ）删除ｋｅｙ</li>
<li>ｓｉｚｅ（）条目个数</li>
<li>Ｃｏｌｌｅｃｔｉｏｎ＜Ｖ＞　ｖａｌｕｅｓ（）获取值组成的集合<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class Main2 &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		Map&lt;String , String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">		map.put(&quot;akjsdhs&quot;, &quot;sdjal&quot;);</span><br><span class="line">		map.put(&quot;dshd&quot; , &quot;sdjjdjd&quot;);</span><br><span class="line">		System.out.println(map.get(&quot;dshd&quot;));</span><br><span class="line">		System.out.println(map.containsKey(&quot;dshd&quot;));</span><br><span class="line">		System.out.println(map.remove(&quot;dshd&quot;));</span><br><span class="line">		System.out.println(map.size());</span><br><span class="line">		System.out.println(map.entrySet());</span><br><span class="line">		System.out.println(map.containsKey(&quot;dshd&quot;));</span><br><span class="line">		map.clear();</span><br><span class="line">		System.out.println(map.size());</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2022/10/25/10-25/</url>
    <content><![CDATA[<h1 id="泛型（任意引用类型）"><a href="#泛型（任意引用类型）" class="headerlink" title="泛型（任意引用类型）"></a>泛型（任意引用类型）</h1><ul>
<li>作用:就是可以让其内的变量无类型，直到用的时候才指定类型，解决了强制转换问题</li>
<li>代码如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	package 作业;</span><br><span class="line"></span><br><span class="line">	public class gdg &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		sfdhkja&lt;String&gt; a = new sfdhkja(); // 尖括号里面的就是泛型的类型</span><br><span class="line">		a.setName(&quot;小明&quot;);</span><br><span class="line">		System.out.println(a.getName());</span><br><span class="line">		System.out.println(a);</span><br><span class="line">		sfdhkja&lt;Integer&gt; b = new sfdhkja();</span><br><span class="line">		b.setName(11111);</span><br><span class="line">		System.out.println(b.getName());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class sfdhkja&lt;E&gt; &#123;</span><br><span class="line">	E name;</span><br><span class="line"></span><br><span class="line">	public sfdhkja() &#123;</span><br><span class="line">		super();</span><br><span class="line">		this.name = name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public E getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public void setName(E name) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="boolean-add-E"><a href="#boolean-add-E" class="headerlink" title="boolean add(E)"></a>boolean add(E)</h3><p>把任意对象类型加进list中</p>
<h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><p>返回集合的迭代器，用于遍历集合</p>
<h3 id="default修饰的"><a href="#default修饰的" class="headerlink" title="default修饰的"></a>default修饰的</h3><p>代表接口中有方法体</p>
<h3 id="int-size"><a href="#int-size" class="headerlink" title="int size"></a>int size</h3><h3 id="并行流和串型流"><a href="#并行流和串型流" class="headerlink" title="并行流和串型流"></a>并行流和串型流</h3><h3 id="Object-toArray"><a href="#Object-toArray" class="headerlink" title="Object toArray()"></a>Object toArray()</h3><p>可以指定泛型的</p>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">public class jeiko &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		Collection&lt;String&gt; c1 =new ArrayList&lt;&gt;();</span><br><span class="line">		c1.add(&quot;中国&quot;);</span><br><span class="line">		c1.add(&quot;韩国哦&quot;);</span><br><span class="line">		c1.add(&quot;hsakdj&quot;);</span><br><span class="line">		System.out.println(c1.size());</span><br><span class="line">		Iterator&lt;String&gt; ra = c1.iterator();</span><br><span class="line">		while(ra.hasNext()) &#123;</span><br><span class="line">			String item = ra.next();</span><br><span class="line">			System.out.println(item);</span><br><span class="line">			ra.remove(); // 删除元素</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(&quot;-------------------------------&quot;);</span><br><span class="line">		for (String string : c1) &#123;</span><br><span class="line">			System.out.println(string);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(&quot;------------------------------------&quot;);</span><br><span class="line">		c1.forEach(System.out::println);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>只有第一种才可以进行便循环边删除</li>
<li>其他都不可以</li>
<li>但是第三种最帅，代码量也最少</li>
</ul>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><ul>
<li>Colllection继承了Iterable接口</li>
<li>list线性，有序集合</li>
<li>set无序集合</li>
<li>旗下是</li>
<li>ArrayLinst</li>
<li>LinkedList</li>
<li>Vector</li>
<li>下面是set的</li>
<li>HashSet</li>
<li>TreeSet</li>
</ul>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul>
<li>线性集合 ，有下标</li>
<li>add(index , E)</li>
<li>set(index ,E)</li>
<li>get(index)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Vector;</span><br><span class="line"></span><br><span class="line">public class Main1 &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		List&lt;String&gt; list = new Vector&lt;String&gt;();</span><br><span class="line">		list.add(&quot;1&quot;);  // 先往list里添加元素</span><br><span class="line">		list.add(&quot;12&quot;); // 同上</span><br><span class="line">		System.out.println(list);  // 直接打印是全部打印出来</span><br><span class="line">		list.add(0,&quot;121&quot;); // 在下表为0的地方添加121</span><br><span class="line">		list.set(2, &quot;dhkjsdhj&quot;); // 把下表为2的地方设置为dhkjsdhj</span><br><span class="line">		System.out.println(list.size()); // 获取list的size就是大小</span><br><span class="line">		</span><br><span class="line">		list.forEach(System.out::println); // 超级帅气的循环语句，本身是lambal表达式</span><br><span class="line">		for(int i =0; i &lt; list.size() ; i++) &#123;</span><br><span class="line">			String item = list.get(i);</span><br><span class="line">			System.out.println(item);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul>
<li>底层封装的数组</li>
<li>扩容的时候每次扩容一半</li>
<li>海量添加的时候是很慢的，就是修改长度很慢</li>
<li>查询快，因为有下标</li>
</ul>
<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><ul>
<li>可控增量，且线程安全</li>
<li>底层是数组，且有线程锁，</li>
<li>10，20，40 ，每次扩容一倍，但是是可以控制增量的</li>
<li>比ArrayList慢</li>
</ul>
<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul>
<li>底层封装的是节点，双向链表，每一个节点都有前一个节点和后一个节点的引用</li>
<li>单向链：修改快</li>
<li>双向链：就是双向的，前后都有元素</li>
<li>特点：修改快，但是查询慢</li>
<li>可以用作与自己定义栈<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">class MyStack&lt;E&gt; &#123;</span><br><span class="line">	LinkedList&lt;E&gt; data;</span><br><span class="line">	public E pop()  &#123;</span><br><span class="line">	return	data.pollLast();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul>
<li>无序集合</li>
<li>会自动去重，就是有重复的就会	不添加新的元素<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();</span><br><span class="line">set.add(11);</span><br><span class="line">set.add(1111);</span><br><span class="line">set.add(898);</span><br><span class="line">set.add(11);</span><br><span class="line">set.forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul>
<li>因为这里的去重机制是根据hashcode和equals来的，默认的时候，可以像正常的列表一样，但是我们可以进行覆盖hashcode和equals</li>
<li>不覆盖<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class Sst &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();</span><br><span class="line">		set.add(11);</span><br><span class="line">		set.add(1111);</span><br><span class="line">		set.add(898);</span><br><span class="line">		set.add(11);</span><br><span class="line">		set.forEach(System.out::println);</span><br><span class="line">		</span><br><span class="line">		Set&lt;stu&gt; s1 =new HashSet&lt;stu&gt;();</span><br><span class="line">		s1.add(new stu());</span><br><span class="line">		s1.add(new stu());</span><br><span class="line">		s1.add(new stu());</span><br><span class="line">		System.out.println(s1.size());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class stu&#123;</span><br><span class="line">	private int num;</span><br><span class="line">	private String name;</span><br><span class="line">	</span><br><span class="line">	public stu() &#123;</span><br><span class="line">		super();</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	public int getNum() &#123;</span><br><span class="line">		return num;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setNum(int num) &#123;</span><br><span class="line">		this.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public String toString() &#123;</span><br><span class="line">		return &quot;stu [num=&quot; + num + &quot;, name=&quot; + name + &quot;]&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>覆盖之后</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class Sst &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();</span><br><span class="line">		set.add(11);</span><br><span class="line">		set.add(1111);</span><br><span class="line">		set.add(898);</span><br><span class="line">		set.add(11);</span><br><span class="line">		set.forEach(System.out::println);</span><br><span class="line">		</span><br><span class="line">		Set&lt;stu&gt; s1 =new HashSet&lt;stu&gt;();</span><br><span class="line">		s1.add(new stu());</span><br><span class="line">		s1.add(new stu());</span><br><span class="line">		s1.add(new stu());</span><br><span class="line">		System.out.println(s1.size());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class stu&#123;</span><br><span class="line">	private int num;</span><br><span class="line">	private String name;</span><br><span class="line">	</span><br><span class="line">	public stu() &#123;</span><br><span class="line">		super();</span><br><span class="line">		// TODO Auto-generated constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	public int getNum() &#123;</span><br><span class="line">		return num;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setNum(int num) &#123;</span><br><span class="line">		this.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	public String getName() &#123;</span><br><span class="line">		return name;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setName(String name) &#123;</span><br><span class="line">		this.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public String toString() &#123;</span><br><span class="line">		return &quot;stu [num=&quot; + num + &quot;, name=&quot; + name + &quot;]&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public int hashCode() &#123;</span><br><span class="line">		final int prime = 31;</span><br><span class="line">		int result = 1;</span><br><span class="line">		result = prime * result + ((name == null) ? 0 : name.hashCode());</span><br><span class="line">		result = prime * result + num;</span><br><span class="line">		return result;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public boolean equals(Object obj) &#123;</span><br><span class="line">		if (this == obj)</span><br><span class="line">			return true;</span><br><span class="line">		if (obj == null)</span><br><span class="line">			return false;</span><br><span class="line">		if (getClass() != obj.getClass())</span><br><span class="line">			return false;</span><br><span class="line">		stu other = (stu) obj;</span><br><span class="line">		if (name == null) &#123;</span><br><span class="line">			if (other.name != null)</span><br><span class="line">				return false;</span><br><span class="line">		&#125; else if (!name.equals(other.name))</span><br><span class="line">			return false;</span><br><span class="line">		if (num != other.num)</span><br><span class="line">			return false;</span><br><span class="line">		return true;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>也可以在生成覆盖的时候少选几个变量这样这些变量就会变成唯一的筛选变量 ，相当于放宽变量范围</li>
<li>原理是封装了hashmap，利用key和value</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>线程</title>
    <url>/2022/10/24/10-24/</url>
    <content><![CDATA[<h1 id="线程的概念以及原理"><a href="#线程的概念以及原理" class="headerlink" title="线程的概念以及原理"></a>线程的概念以及原理</h1><h2 id="操作系统中线程和进程的概念"><a href="#操作系统中线程和进程的概念" class="headerlink" title="操作系统中线程和进程的概念"></a>操作系统中线程和进程的概念</h2><ul>
<li>进程是指一个内存中运行的应用程序，每个进程都有自己的独立空间，一个进程中可以启动多个线程，比如在windows里一个运行的exe就是一个进程</li>
<li>线程是指进程中的一个执行流程，一个进程中可以用运行多个线程。线程总是属于某个进程的，进程中多个线程共享进程的内存</li>
</ul>
<h2 id="java中的线程"><a href="#java中的线程" class="headerlink" title="java中的线程"></a>java中的线程</h2><ul>
<li>在java中，线程是指两件不同的事</li>
<li>java.lang.Thread类的一个实例</li>
<li>线程的执行</li>
<li>使用java.lang.Thread类或者java.lang.Runnable接口编写代码来定义实例化，和启动新线程。</li>
<li>一个Thread类实例只是一个对象，像java和其他对象一样，有变量和方法，生死于堆上</li>
<li>在java里每个线程都拥有一个调用栈，即使不在程序中创建任何的新线程，线程也会在后台运行着</li>
<li>一个java应用总是从main方法开始，main方法运行在一个线程里，他被称为主线程</li>
<li>一旦创建一个线程，就会产生一个新的栈调用。</li>
<li>线程总体分为两类，用户线程和守护线程</li>
<li>当所有用户距线程执行完毕，jvm自己关闭，守护线程一般是由操作系统或者或者用户自己创建</li>
</ul>
<h1 id="创建与启动"><a href="#创建与启动" class="headerlink" title="创建与启动"></a>创建与启动</h1><ul>
<li><p>扩展java.lang.Thread</p>
</li>
<li><p>这个类中有个run方法，应该注意其用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void run()</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果该线程是使用独立的Runnable运行对象构造的，则调用该Runnable对象的run方法，要不然，该方法不执行任何操作并返回</p>
</li>
<li><p>Thread的子类应该重写这个方法，因为其底层也是继承的Runnable接口</p>
</li>
<li><p>run操作里是他会执行的事情</p>
</li>
</ul>
<h2 id="实例化线程"><a href="#实例化线程" class="headerlink" title="实例化线程"></a>实例化线程</h2><ul>
<li>如果是用Thread，则直接new就行</li>
<li>如果是实现了，java.lang.Runnable接口的类，则用Thread的构造方法:</li>
<li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Thread(Runnable target)</span><br><span class="line">Thread(Runnable target , String name)</span><br><span class="line">Thread(ThreadGroup group, Runnable target)</span><br><span class="line">Thread(ThreadGroup group, Runnable target, String name)</span><br><span class="line">Thread(ThreadGroup group, Runnable target, String name, long stackSize)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h2><ul>
<li>在线程的Thread对象上调用Start（）方法而不是用run或者别的</li>
<li>在调用start之前线程处于新状态中，新状态指有一个Thread对象，但是还没有一个真正的线程</li>
<li>调用了之后发生了一系列复杂的事情</li>
<li>尝试启动新的线程（具有新的调用栈）</li>
<li>该线程从新状态转移到可运行状态</li>
<li>当线程获得执行机会，就会调用run</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 实现Runnable接口的类</span><br><span class="line">*</span><br><span class="line">* @author leizhimin 2008-9-13 18:12:10</span><br><span class="line">*/</span><br><span class="line">publicclass DoSomethingimplements Runnable &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public DoSomething(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoid run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">            for (long k = 0; k &lt; 100000000; k++) ;</span><br><span class="line">            System.out.println(name + &quot;: &quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line">* 测试Runnable类实现的多线程程序</span><br><span class="line">*</span><br><span class="line">* @author leizhimin 2008-9-13 18:15:02</span><br><span class="line">*/</span><br><span class="line">publicclass TestRunnable &#123;</span><br><span class="line">    publicstaticvoid main(String[] args) &#123;</span><br><span class="line">        DoSomething ds1 = new DoSomething(&quot;阿三&quot;);</span><br><span class="line">        DoSomething ds2 = new DoSomething(&quot;李四&quot;);</span><br><span class="line"></span><br><span class="line">        Thread t1 = new Thread(ds1);</span><br><span class="line">        Thread t2 = new Thread(ds2);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="扩展Thread类实现多线程的例子"><a href="#扩展Thread类实现多线程的例子" class="headerlink" title="扩展Thread类实现多线程的例子"></a>扩展Thread类实现多线程的例子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 测试扩展Thread类实现的多线程程序</span><br><span class="line">*</span><br><span class="line">* @author leizhimin 2008-9-13 18:22:13</span><br><span class="line">*/</span><br><span class="line">publicclass TestThreadextends Thread&#123;</span><br><span class="line">    public TestThread(String name) &#123;</span><br><span class="line">        super(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoid run() &#123;</span><br><span class="line">        for(int i = 0;i&lt;5;i++)&#123;</span><br><span class="line">            for(long k= 0; k &lt;100000000;k++);</span><br><span class="line">            System.out.println(this.getName()+&quot; :&quot;+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicstaticvoid main(String[] args) &#123;</span><br><span class="line">        Thread t1 = new TestThread(&quot;阿三&quot;);</span><br><span class="line">        Thread t2 = new TestThread(&quot;李四&quot;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul>
<li>线程的名字，一个运行中的线程总是有名字的，名字有两个来源，第一是自己，第二是虚拟机</li>
<li>而且主线程的名字总是mian，非主线程的名字不确定</li>
<li>线程都可以设置名字，主线程的也不例外</li>
<li>线程的调用不一定是顺序的他们是随机的</li>
<li>线程一旦启动，他就不可能重新启动</li>
<li>线程的调度是jvm的一部分，在cpu的机器上，实际上一次只能运行一个线程，一次只有一个线程栈执行，jvm线程调度程序决定实际运行的哪个处于可运行的状态</li>
<li>尽管我们无法控制线程调度的程序，但是可以通过别的方式来影响线程调度的方式</li>
</ul>
<h1 id="线程的转换"><a href="#线程的转换" class="headerlink" title="线程的转换"></a>线程的转换</h1><ul>
<li>线程的状态转换是线程控制的基础。线程状态总的可分为五大状态：分别是生、死、可运行、运行、等待&#x2F;阻塞。</li>
<li>可运行状态：当线程有资格运行，但调度程序还没有把它选定为运行线程时线程所处的状态。当start()方法调用时，线程首先进入可运行状态。在线程运行之后或者从阻塞、等待或睡眠状态回来后，也返回到可运行状态。</li>
<li>运行状态：线程调度程序从可运行池中选择一个线程作为当前线程时线程所处的状态。这也是线程进入运行状态的唯一一种方式</li>
<li>等待&#x2F;阻塞&#x2F;睡眠状态：这是线程有资格运行时它所处的状态。实际上这个三状态组合为一种，其共同点是：线程仍旧是活的，但是当前没有条件运行。换句话说，它是可运行的，但是如果某件事件出现，他可能返回到可运行状态。</li>
<li>死亡态：当线程的run()方法完成时就认为它死去。这个线程对象也许是活的，但是，它已经不是一个单独执行的线程。线程一旦死亡，就不能复生。如果在一个死去的线程上调用start()方法，会抛出java.lang.IllegalThreadStateException异常。</li>
</ul>
<h2 id="阻止线程的执行"><a href="#阻止线程的执行" class="headerlink" title="阻止线程的执行"></a>阻止线程的执行</h2><ul>
<li>对于线程的阻止，考虑一下三个方面，不考虑IO阻塞的情况：</li>
<li>睡眠</li>
<li>等待</li>
<li>睡眠：Thread.sleep(long millis)和Thread.sleep(long millis, int nanos)静态方法强制当前正在执行的线程休眠（暂停执行），以“减慢线程”。当线程睡眠时，它入睡在某个地方，在苏醒之前不会返回到可运行状态。当睡眠时间到期，则返回到可运行状态。</li>
<li>线程睡眠的原因：线程执行太快，或者需要强制进入下一轮，因为Java规范不保证合理的轮换。</li>
<li>睡眠的实现：调用静态方法。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">          Thread.sleep(123);</span><br><span class="line">      &#125; catch (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace(); </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li>
<li>睡眠的位置：为了让其他线程有机会执行，可以将Thread.sleep()的调用放线程run()之内。这样才能保证该线程执行过程中会睡眠。</li>
<li>线程睡眠是帮助所有线程获得运行机会的最好方法。</li>
<li>线程睡眠到期自动苏醒，并返回到可运行状态，不是运行状态。sleep()中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就开始执行。</li>
<li>sleep()是静态方法，只能控制当前正在运行的线程。</li>
</ul>
<h2 id="线程的优先级和线程让步yield"><a href="#线程的优先级和线程让步yield" class="headerlink" title="线程的优先级和线程让步yield()"></a>线程的优先级和线程让步yield()</h2><ul>
<li>线程的让步是通过Thread.yield()来实现的。yield()方法的作用是：暂停当前正在执行的线程对象，并执行其他线程。</li>
<li>线程总是存在优先级，优先级范围在1~10之间。JVM线程调度程序是基于优先级的抢先调度机制。在大多数情况下，当前运行的线程优先级将大于或等于线程池中任何线程的优先级。但这仅仅是大多数情况。</li>
<li>注意：当设计多线程应用程序的时候，一定不要依赖于线程的优先级。因为线程调度优先级操作是没有保障的，只能把线程优先级作用作为一种提高程序效率的方法，但是要保证程序不依赖这种操作。</li>
<li>当线程池中线程都具有相同的优先级，调度程序的JVM实现自由选择它喜欢的线程。这时候调度程序的操作有两种可能：一是选择一个线程运行，直到它阻塞或者运行完成为止。二是时间分片，为池内的每个线程提供均等的运行机会。<br>-设置线程的优先级：线程默认的优先级是创建它的执行线程的优先级。可以通过setPriority(int newPriority)更改线程的优先级。例如：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Thread t = new MyThread();</span><br><span class="line">       t.setPriority(8);</span><br><span class="line">       t.start();</span><br></pre></td></tr></table></figure></li>
<li>线程优先级为1<del>10之间的正整数，JVM从不会改变一个线程的优先级。然而，1</del>10之间的值是没有保证的。一些JVM可能不能识别10个不同的值，而将这些优先级进行每两个或多个合并，变成少于10个的优先级，则两个或多个优先级的线程可能被映射为一个优先级。</li>
<li>线程默认优先级是5，Thread类中有三个常量，定义线程优先级范围：</li>
<li>static int MAX_PRIORITY线程可以具有的最高优先级。</li>
<li>static int MIN_PRIORITY线程可以具有的最低优先级。</li>
<li>static int NORM_PRIORITY分配给线程的默认优先级。</li>
</ul>
<h2 id="Thread-yield-方法"><a href="#Thread-yield-方法" class="headerlink" title="Thread.yield()方法"></a>Thread.yield()方法</h2><ul>
<li>Thread.yield()方法作用是：暂停当前正在执行的线程对象，并执行其他线程。</li>
<li>yield()应该做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。</li>
<li>结论：yield()从未导致线程转到等待&#x2F;睡眠&#x2F;阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。</li>
</ul>
<h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><ul>
<li><p>Thread的非静态方法join()让一个线程B“加入”到另外一个线程A的尾部。在A执行完毕之前，B不能工作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Thread t = new MyThread();</span><br><span class="line">      t.start();</span><br><span class="line">      t.join();</span><br></pre></td></tr></table></figure>
</li>
<li><p>另外，join()方法还有带超时限制的重载版本。例如t.join(5000);则让线程等待5000毫秒，如果超过这个时间，则停止等待，变为可运行状态。</p>
</li>
<li><p>线程的加入join()对线程栈导致的结果是线程栈发生了变化，当然这些变化都是瞬时的。</p>
</li>
</ul>
<h2 id="Object类的wait方法"><a href="#Object类的wait方法" class="headerlink" title="Object类的wait方法"></a>Object类的wait方法</h2><ul>
<li>让当前线程进入等待池</li>
<li>通过Object类的notify方法通知线程池随机让一条回归</li>
<li>而notifyall 是让所有回归</li>
</ul>
<h1 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h1><ul>
<li>synchronized</li>
<li>是一种对象锁，可重入，不可中断，实际上就是一个字节码</li>
<li>基于jvm的监控机制</li>
<li>栈帧线程独享，不用锁，堆是内存共享的需要线程考虑，方法区也是要线程共享<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">public class sdhakdh &#123;</span><br><span class="line"></span><br><span class="line">	public static int flag = 0;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		new Thread(&quot;线程1&quot;) &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">					System.out.println(Thread.currentThread().getName().toString() + &quot;@&quot; + flag++);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">		new Thread(&quot;线程2&quot;) &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">					System.out.println(Thread.currentThread().getName().toString() + &quot;@&quot; + flag++);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>这样的会出现线程抢占的问题，容易让一个线程卡住，然后另外一个框框执行</li>
<li>结果就是无序的</li>
<li>如果加上synchronized则不会出现这个请况<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">public class sdhakdh &#123;</span><br><span class="line"></span><br><span class="line">	public static int flag = 0;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		new Thread(&quot;线程1&quot;) &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				synchronized (&quot;hello&quot;) &#123;</span><br><span class="line">					for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">						System.out.println(Thread.currentThread().getName().toString() + &quot;@&quot; + flag++);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">		new Thread(&quot;线程2&quot;) &#123;</span><br><span class="line">			public void run() &#123;</span><br><span class="line">				synchronized (&quot;hello&quot;) &#123;</span><br><span class="line">					for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">						System.out.println(Thread.currentThread().getName().toString() + &quot;@&quot; + flag++);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>这样就不会发生问题了</li>
<li>就会出现顺序的，因为线程回退的时候，下次会继续线程锁锁住的位置进行执行，同时不让同一个锁内的其他线程执行，直到被所著的线程回来</li>
<li>多线程不加锁不安全，可是慢，如果能解决这个问题，就厉害了</li>
<li>如果锁不是同一个名字则无用</li>
<li>下面的例子,是生产者消费者的例子</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">public class repo &#123;</span><br><span class="line"></span><br><span class="line">	private int count;</span><br><span class="line">	</span><br><span class="line">	public synchronized void add() &#123;</span><br><span class="line">		while(count &gt;= 100) &#123; // 设置上限</span><br><span class="line">			try &#123;</span><br><span class="line">				wait();</span><br><span class="line">			&#125; catch (InterruptedException e) &#123;</span><br><span class="line">				// TODO Auto-generated catch block</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		notifyAll(); // 把减少线程从等待池放出来</span><br><span class="line">		count++;</span><br><span class="line">		System.out.println(count);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public synchronized void substrct() &#123;</span><br><span class="line">		while(count &lt;= 0) &#123; // 设置下限</span><br><span class="line">			try &#123;</span><br><span class="line">				wait();</span><br><span class="line">			&#125; catch (InterruptedException e) &#123;</span><br><span class="line">				// TODO Auto-generated catch block</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		notifyAll(); // 把add线程从等待池放出来</span><br><span class="line">		count--;</span><br><span class="line">		System.out.println(count);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">public class product &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		repo r =new repo();</span><br><span class="line">		Prou P = new Prou();</span><br><span class="line">		P.re = r;</span><br><span class="line">		Consumer C = new Consumer();</span><br><span class="line">		C.re = r;</span><br><span class="line">		Thread t1 = new Thread(P , &quot;生产者&quot;);</span><br><span class="line">		Thread t2 = new Thread(C , &quot;消费者&quot;);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">		</span><br><span class="line">		Prou P1 = new Prou();</span><br><span class="line">		P1.re = r;</span><br><span class="line">		Consumer C1 = new Consumer();</span><br><span class="line">		C1.re = r;</span><br><span class="line">		Thread t11 = new Thread(P , &quot;生产者&quot;);</span><br><span class="line">		Thread t21 = new Thread(C , &quot;消费者&quot;);</span><br><span class="line">		t11.start();</span><br><span class="line">		t21.start();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class Prou implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">	repo re;</span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		</span><br><span class="line">			for(int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">				re.add();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">class Consumer implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">	repo re;</span><br><span class="line">	@Override</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		</span><br><span class="line">			for(int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">				re.substrct();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>注意，wait的时候是直接放开锁的</li>
</ul>
<h1 id="创建线程的第三种和第四种方式"><a href="#创建线程的第三种和第四种方式" class="headerlink" title="创建线程的第三种和第四种方式"></a>创建线程的第三种和第四种方式</h1><h2 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import java.util.concurrent.Callable;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.FutureTask;</span><br><span class="line">//实现Callable接口</span><br><span class="line">public class CallableTest &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //执行Callable 方式，需要FutureTask 实现实现，用于接收运算结果</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;Integer&gt;(new MyCallable());</span><br><span class="line">        new Thread(futureTask).start();</span><br><span class="line">        //接收线程运算后的结果</span><br><span class="line">        try &#123;</span><br><span class="line">            Integer sum = futureTask.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class MyCallable implements Callable&lt;Integer&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public Integer call() throws Exception &#123;</span><br><span class="line">        int sum = 0;</span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//结果：</span><br><span class="line">/*</span><br><span class="line">4950</span><br><span class="line">Process finished with exit code 0</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h2 id="线程池创建线程"><a href="#线程池创建线程" class="headerlink" title="线程池创建线程"></a>线程池创建线程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">//线程池实现</span><br><span class="line">public class ThreadPoolExecutorTest &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建线程池</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(10);</span><br><span class="line">        ThreadPool threadPool = new ThreadPool();</span><br><span class="line">        for(int i =0;i&lt;5;i++)&#123;</span><br><span class="line">            //为线程池分配任务</span><br><span class="line">            executorService.submit(threadPool);</span><br><span class="line">        &#125;</span><br><span class="line">        //关闭线程池</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class ThreadPool implements Runnable &#123;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for(int i = 0 ;i&lt;10;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;:&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 打印结果（不唯一）：</span><br><span class="line">/*</span><br><span class="line">pool-1-thread-1:0</span><br><span class="line">pool-1-thread-2:0</span><br><span class="line">pool-1-thread-2:1</span><br><span class="line">pool-1-thread-3:0</span><br><span class="line">pool-1-thread-3:1</span><br><span class="line">pool-1-thread-3:2</span><br><span class="line">pool-1-thread-2:2</span><br><span class="line">pool-1-thread-2:3</span><br><span class="line">pool-1-thread-2:4</span><br><span class="line">pool-1-thread-2:5</span><br><span class="line">pool-1-thread-1:1</span><br><span class="line">pool-1-thread-5:0</span><br><span class="line">pool-1-thread-5:1</span><br><span class="line">pool-1-thread-5:2</span><br><span class="line">pool-1-thread-5:3</span><br><span class="line">pool-1-thread-2:6</span><br><span class="line">pool-1-thread-2:7</span><br><span class="line">pool-1-thread-2:8</span><br><span class="line">pool-1-thread-3:3</span><br><span class="line">pool-1-thread-2:9</span><br><span class="line">pool-1-thread-5:4</span><br><span class="line">pool-1-thread-4:0</span><br><span class="line">pool-1-thread-4:1</span><br><span class="line">pool-1-thread-1:2</span><br><span class="line">pool-1-thread-1:3</span><br><span class="line">pool-1-thread-1:4</span><br><span class="line">pool-1-thread-1:5</span><br><span class="line">pool-1-thread-1:6</span><br><span class="line">pool-1-thread-1:7</span><br><span class="line">pool-1-thread-1:8</span><br><span class="line">pool-1-thread-1:9</span><br><span class="line">pool-1-thread-4:2</span><br><span class="line">pool-1-thread-4:3</span><br><span class="line">pool-1-thread-4:4</span><br><span class="line">pool-1-thread-4:5</span><br><span class="line">pool-1-thread-5:5</span><br><span class="line">pool-1-thread-3:4</span><br><span class="line">pool-1-thread-3:5</span><br><span class="line">pool-1-thread-3:6</span><br><span class="line">pool-1-thread-3:7</span><br><span class="line">pool-1-thread-3:8</span><br><span class="line">pool-1-thread-3:9</span><br><span class="line">pool-1-thread-5:6</span><br><span class="line">pool-1-thread-4:6</span><br><span class="line">pool-1-thread-5:7</span><br><span class="line">pool-1-thread-4:7</span><br><span class="line">pool-1-thread-5:8</span><br><span class="line">pool-1-thread-4:8</span><br><span class="line">pool-1-thread-4:9</span><br><span class="line">pool-1-thread-5:9</span><br><span class="line">Process finished with exit code 0</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>字符流</title>
    <url>/2022/10/21/10-21/</url>
    <content><![CDATA[<h1 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h1><ul>
<li>Write是抽象方法</li>
<li>其里面定义了传输大小（在源码中）</li>
<li>在write里<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private static final int WRITE_BUFFER_SIZE = 1024;</span><br></pre></td></tr></table></figure></li>
<li>所谓的字符流只是把字节流包装起来，证据在源码里<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 项目实训;</span><br><span class="line"></span><br><span class="line">	import java.io.FileWriter;</span><br><span class="line">	import java.io.IOException;</span><br><span class="line">	import java.io.Writer;</span><br><span class="line"></span><br><span class="line">	public class char流 &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">	try &#123;</span><br><span class="line">		Writer w = new FileWriter(&quot;D:/a.txt&quot;);</span><br><span class="line">		w.write(&quot;hello world&quot;);</span><br><span class="line">		w.append(&quot;hello Bgido&quot;);</span><br><span class="line">		w.write(&quot;hello java&quot;.toCharArray());</span><br><span class="line">		w.flush();</span><br><span class="line">		w.close();</span><br><span class="line">	&#125; catch (IOException e) &#123;</span><br><span class="line">		// TODO Auto-generated catch block</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li>注意这里的write是直接在文件里重写数据，而append是增加数据，因为write底层调用的是write方法</li>
</ul>
<h1 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h1><ul>
<li>出现的原因，是因为字节流可能存不住，所以才出现，会造成乱码</li>
</ul>
<h2 id="字符分类以及编码格式"><a href="#字符分类以及编码格式" class="headerlink" title="字符分类以及编码格式"></a>字符分类以及编码格式</h2><ul>
<li><p>一般在英文状态下一个字母或字符占用一个字节，一个汉字用两个字节表示。</p>
</li>
<li><p>ASCII 码中，一个英文字母(不分大小写)为一个字节，一个中文汉字为两个字节。</p>
</li>
<li><p>UTF-8 编码中，一个英文字为一个字节，一个中文为三个字节。</p>
</li>
<li><p>Unicode 编码中，一个英文为一个字节，一个中文为两个字节。</p>
</li>
<li><p>符号：英文标点为一个字节，中文标点为两个字节。例如：英文句号 . 占1个字节的大小，中文句号 。占2个字节的大小。</p>
</li>
<li><p>UTF-16 编码中，一个英文字母字符或一个汉字字符存储都需要 2 个字节(Unicode 扩展区的一些汉字存储需要 4 个字节)。</p>
</li>
<li><p>UTF-32 编码中，世界上任何字符的存储都需要 4 个字节。</p>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.Reader;</span><br><span class="line">public class inputchar1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line">	try &#123;</span><br><span class="line">		Reader reader = new FileReader(&quot;D:/a.txt&quot;);</span><br><span class="line">		reader.close();</span><br><span class="line">		// 这个也可以读取文件</span><br><span class="line">		Reader reader1 = new InputStreamReader(new FileInputStream(&quot;D:/a.txt&quot;) , &quot;UTF-8&quot;); // 古老的方式，不过可以直接改代码的编码格式</span><br><span class="line">		char[] buffer = new char[10];</span><br><span class="line">		int len = 0;</span><br><span class="line">		while((len = reader1.read(buffer)) != -1) &#123;</span><br><span class="line">			System.out.print(new String(buffer , 0 ,len));</span><br><span class="line">		&#125;</span><br><span class="line">		reader1.close();</span><br><span class="line">		while((len = reader.read(buffer)) != -1) &#123;</span><br><span class="line">			System.out.print(new String(buffer, 0, len));</span><br><span class="line">		&#125;</span><br><span class="line">		reader.close();</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">		// TODO: handle exception</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="具体的流"><a href="#具体的流" class="headerlink" title="具体的流"></a>具体的流</h1><h2 id="buffered系类"><a href="#buffered系类" class="headerlink" title="buffered系类"></a>buffered系类</h2><ul>
<li>代表缓冲区系类</li>
<li><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line">import java.io.BufferedInputStream;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class sdahasdk &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">	try &#123;</span><br><span class="line">		BufferedInputStream us = new BufferedInputStream(new FileInputStream(&quot;D:/a.txt&quot;)); // 要自己定义缓冲区</span><br><span class="line">		us.skip(1);</span><br><span class="line">		byte[] buffer = new byte[10];</span><br><span class="line">		int len = 0;</span><br><span class="line">		while((len = us.read(buffer)) != -1) &#123;</span><br><span class="line">			System.out.println( new String(buffer , 0 ,len ));</span><br><span class="line">		&#125;</span><br><span class="line">		us.close();</span><br><span class="line">		</span><br><span class="line">		BufferedReader r = new BufferedReader(new FileReader(&quot;D:/a.txt&quot;)); // 里面有设置默认的缓冲区在源码里可以点进去查看</span><br><span class="line">		while(r.ready()) // ready是可读性，可读就true，不可读就fasle</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(	r.readLine());</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">		// TODO Auto-generated catch block</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; catch (IOException e) &#123;</span><br><span class="line">		// TODO Auto-generated catch block</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>只有顶层类的方法是没有线程锁的</li>
<li>同样也有writer的方法<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BufferedWriter wwe = new BufferedWriter( new FileWriter(&quot;D:/a.txt&quot;));</span><br></pre></td></tr></table></figure></li>
<li>然后通过wwe.xxx访问方法</li>
</ul>
<h1 id="InputStreamReader-x2F-Writer"><a href="#InputStreamReader-x2F-Writer" class="headerlink" title="InputStreamReader&#x2F;Writer"></a>InputStreamReader&#x2F;Writer</h1><ul>
<li>比较古老</li>
<li>因为可以设置编码格式</li>
<li>在构造方法里</li>
<li>和上面的FileInputStream一样</li>
</ul>
<h1 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">public class stu implements Serializable&#123;</span><br><span class="line">public stu() &#123;</span><br><span class="line">	super();</span><br><span class="line">	// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public stu(int x , String name) &#123;</span><br><span class="line">	this.age = x;</span><br><span class="line">	this.name = name;</span><br><span class="line">	// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">private String name;</span><br><span class="line">private transient int age;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">	return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">	this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">public int getAge() &#123;</span><br><span class="line">	return age;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">	this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">	return &quot;stu [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这个是个学生类，代表我们要实例化的类，要加个可序列化的标记性接口</li>
<li>transient是不参与序列化的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 项目实训;</span><br><span class="line"></span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line">public class lesson15 &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		try &#123;</span><br><span class="line">			ObjectOutputStream oo = new ObjectOutputStream(new FileOutputStream(&quot;D:/student.dat&quot;));</span><br><span class="line">			stu s = new stu(15 , &quot;tom&quot;);</span><br><span class="line">			oo.writeObject(s);</span><br><span class="line">			oo.flush();</span><br><span class="line">		&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">			// TODO Auto-generated catch block</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; catch (IOException e) &#123;</span><br><span class="line">			// TODO Auto-generated catch block</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">public class lesson15 &#123;	</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">	try &#123;</span><br><span class="line">		</span><br><span class="line">		ObjectInputStream d = new ObjectInputStream(new FileInputStream(&quot;D:/student.dat&quot;));</span><br><span class="line">		Object o = d.readObject();</span><br><span class="line">		System.out.println(o);</span><br><span class="line">		d.close();</span><br><span class="line">		</span><br><span class="line">	&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">		// TODO Auto-generated catch block</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; catch (IOException e) &#123;</span><br><span class="line">		// TODO Auto-generated catch block</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">		// TODO Auto-generated catch block</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class scanner &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">	try &#123;</span><br><span class="line">		Scanner scanner = new Scanner( new FileInputStream(&quot;D:/a.txt&quot;) , &quot;UTF-8&quot;);</span><br><span class="line">		while(scanner.hasNext()) &#123;</span><br><span class="line">			System.out.println(scanner.nextLine());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">		// TODO Auto-generated catch block</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Channnel流"><a href="#Channnel流" class="headerlink" title="Channnel流"></a>Channnel流</h1><ul>
<li>其是新io包里的</li>
<li>是nio里的，用的是堆外内存</li>
<li>就是jvm内存，所以效率会比在堆里的数组缓冲区效率更高</li>
<li>追主要的是对接，管道分为输入管道和输出管道</li>
<li>当他们对接上就可以实现复制等操作了</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.nio.channels.FileChannel;</span><br><span class="line">public class Channel &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line">	File file = new File(&quot;D:/a.txt&quot;);</span><br><span class="line">	FileInputStream ii;</span><br><span class="line">	try &#123;</span><br><span class="line">		ii = new FileInputStream(file);</span><br><span class="line">		FileChannel cha = ii.getChannel();</span><br><span class="line">		FileChannel out = new FileOutputStream(&quot;D:/a1.txt&quot;).getChannel();		</span><br><span class="line">		cha.transferTo(0, file.length(), out); // 这个输入管道的对接口 三个参数 ，第一个是开始复制的起始下标，第二个是文件长度 ，第三个是输出管道</span><br><span class="line">		out.transferFrom(cha, 0, file.length()); // 这个是输出管道的接口 三个参数 ，第一个是输入管道，第二个是起始下标 ，第三个是文件长度</span><br><span class="line">	&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">		// TODO Auto-generated catch block</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; catch (IOException e) &#123;</span><br><span class="line">		// TODO Auto-generated catch block</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>两种管道对接的方式造成的结果是一样的，都是复制文件，但是如果这两个代码要制作的文件存在，则进行覆盖</li>
</ul>
<h1 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h1><ul>
<li>解决字符串的加法的问题，</li>
<li>字符串的+是方法的重载，每次都会返回一个对象</li>
<li>而下面两个则是用堆运存运算省区了一个变量</li>
<li>而builder无线程锁，所以比buffer要快<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 项目实训;</span><br><span class="line">public class sr &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	String s = &quot;shdghgsg&quot;;</span><br><span class="line">	long start = System.currentTimeMillis();</span><br><span class="line">	 // 拼接太费事</span><br><span class="line">	String h = s + &quot;shak&quot;;</span><br><span class="line">	long end = System.currentTimeMillis();</span><br><span class="line">	StringBuffer sb =new StringBuffer();</span><br><span class="line">	System.out.println(end - start);</span><br><span class="line">	sb.append(&quot;world&quot;);</span><br><span class="line">	long start1 = System.currentTimeMillis();</span><br><span class="line">	 // 拼接太费事</span><br><span class="line">	sb.append(&quot;world&quot;);</span><br><span class="line">	long end1 = System.currentTimeMillis();</span><br><span class="line">	System.out.println(end1 - start1);</span><br><span class="line">	 // 更快的</span><br><span class="line">	StringBuilder sd = new StringBuilder();</span><br><span class="line">	long start2 = System.currentTimeMillis();</span><br><span class="line">	 // 拼接太费事</span><br><span class="line">	sd.append(&quot;world&quot;);</span><br><span class="line">	long end2 = System.currentTimeMillis();</span><br><span class="line">	System.out.println(end2 - start2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="比较快的排序方式"><a href="#比较快的排序方式" class="headerlink" title="比较快的排序方式"></a>比较快的排序方式</h2><ul>
<li>Arrays.sort(要排序的数组)默认是正序</li>
<li>也可以变成倒序，但是要是泛型数组就可以</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">int[] a = &#123;3,4,5,1,3,5,5&#125;;</span><br><span class="line">Arrays.sort(a);</span><br><span class="line">for (int i : a) &#123;</span><br><span class="line">	System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ul>
<li>进程是程序对应的资源</li>
<li>线程是cpu运行的最小单位</li>
<li>线程是随机切换，一个程序中</li>
</ul>
<h2 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line"></span><br><span class="line">public class xiancheng &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">	System.out.println(Thread.currentThread());</span><br><span class="line"></span><br><span class="line">	Task1 task1 = new Task1();</span><br><span class="line">	Thread t1 = new Thread(task1);</span><br><span class="line">	t1.setName(&quot;第一个线程&quot;); // 线程的名字</span><br><span class="line">	t1.start(); // 线程开始</span><br><span class="line">	new Thread(task1).start(); // 这种方式也可以进行线程启动</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class Task1 implements Runnable // 任务</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line">	for (int i = 0; i &lt;101; i++) &#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(Thread.currentThread() + &quot;@&quot; +i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>在做一件事的时候还是单线程比较快，多线程可以一起干很多事情，所以就相当于一个人和多个人的差距</li>
<li>意思就是单线程不一定比多线程慢，因为多线程存在上下文切换</li>
<li>首先分配cpu资源的单位是进程。一个进程所获得到的cpu资源是一定的。程序在执行的过程中消耗的是cpu，比如一个单核cpu，多个线程同时执行工作时，需要不断切换执行(上下文切换)，单个线程时间耗费更多了，而单线程只是一个线程跑。</li>
<li>多线程的总体执行时间和单线程是一样的，但是多线程中单个线程的执行时间是单线程的多倍。<br>多线程提高的是并发数量，比如现在有一个4核cpu的服务器，同一时间可执行4个线程，这样处理线程任务的速度比较快。但是多出来的线程，5个，6个，7个，多出的线程还是要等待。</li>
</ul>
<h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。</p>
<p>概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换会这个任务时，可以再加载这个任务的状态。任务从保存到再加载的过程就是一次上下文切换。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以说其实多线程不一定能够比单线程快是因为上下文切换，以及线程等待的问题</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>作业10-21</title>
    <url>/2022/10/21/%E4%BD%9C%E4%B8%9A10-21/</url>
    <content><![CDATA[<h1 id="3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称"><a href="#3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称" class="headerlink" title="3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称"></a>3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">import 作业.file;</span><br><span class="line"></span><br><span class="line">public class file过滤 &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		File M = new File(&quot;D:\\&quot; , &quot;try&quot;);</span><br><span class="line">		chakan(M);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void chakan(File M) &#123;</span><br><span class="line">		File[] k = M.listFiles();</span><br><span class="line">		System.out.println(k);</span><br><span class="line">		for (int i = 0; i &lt; k.length; i++) &#123;</span><br><span class="line">			File[] t = k[i].listFiles();</span><br><span class="line">			if(t == null) &#123;</span><br><span class="line">				String g =  k[i].getName();</span><br><span class="line">				String d = g.substring(k[i].getName().lastIndexOf(&quot;.&quot;));</span><br><span class="line">				if(d.equals(&quot;.java&quot;)) &#123;</span><br><span class="line">					System.out.println(g.substring(0, k[i].getName().lastIndexOf(&quot;.&quot;)));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				chakan(k[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>重点字符串的相等要用equals，递归</li>
</ul>
<h1 id="判断指定路径下的所有子文件或是目录，如果是子文件则全部删除"><a href="#判断指定路径下的所有子文件或是目录，如果是子文件则全部删除" class="headerlink" title="判断指定路径下的所有子文件或是目录，如果是子文件则全部删除"></a>判断指定路径下的所有子文件或是目录，如果是子文件则全部删除</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public static void SHANCHU(File k) &#123;</span><br><span class="line">File[] ds =	k.listFiles(); </span><br><span class="line">for (int i = 0; i &lt; ds.length ; i++ ) &#123;</span><br><span class="line">	File[] h = ds[i].listFiles();</span><br><span class="line">	if(h == null) &#123;</span><br><span class="line">		System.out.println(&quot;这个是个文件&quot;);</span><br><span class="line">		ds[i].delete();</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		k.delete();</span><br><span class="line">		SHANCHU(ds[i]);</span><br><span class="line">			&#125;</span><br><span class="line">	k.delete();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>重点：递归</li>
</ul>
<h1 id="5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D-102班级-javaSE作业）"><a href="#5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D-102班级-javaSE作业）" class="headerlink" title="5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D:\102班级\javaSE作业）"></a>5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D:\102班级\javaSE作业）</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">File G = new File(&quot;D:\\\\102班级\\\\javaSE作业&quot;);</span><br><span class="line"></span><br><span class="line">G.mkdirs();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="从磁盘读取一个文件到内存中，再打印到控制台"><a href="#从磁盘读取一个文件到内存中，再打印到控制台" class="headerlink" title="从磁盘读取一个文件到内存中，再打印到控制台"></a>从磁盘读取一个文件到内存中，再打印到控制台</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">public class lkdjfslasfj &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		try &#123;</span><br><span class="line">			InputStream is = new FileInputStream(&quot;D:/a.txt&quot;);</span><br><span class="line">//				while(is.available() != 0) &#123;</span><br><span class="line">//					System.out.println((char)is.read()); // 默认一次只读一个字符</span><br><span class="line">//				&#125;</span><br><span class="line">			</span><br><span class="line">			byte[] buffer = new byte[10]; // 通过设置缓冲区进行扩展一次可读的字符数量，如果是字符型，那这个byte要变char</span><br><span class="line">			int len = 0; // 设置个长度</span><br><span class="line">			while((len = is.read(buffer)) != -1) // 判断我是不是超出缓冲区的限定，如果超出，就只读取超出的部分</span><br><span class="line">			&#123;</span><br><span class="line">				System.out.print(new String(buffer , 0 , len)); </span><br><span class="line">			&#125;</span><br><span class="line">			is.close();</span><br><span class="line">			&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">				// TODO Auto-generated catch block</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; catch (IOException e) &#123;</span><br><span class="line">				// TODO Auto-generated catch block</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="模拟用户登录："><a href="#模拟用户登录：" class="headerlink" title="模拟用户登录："></a>模拟用户登录：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class login &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		File basic = new File(&quot;D://&quot; , &quot;a.txt&quot;);</span><br><span class="line">		try(InputStream in = new FileInputStream(basic);</span><br><span class="line">			Reader re = new InputStreamReader(in , &quot;UTF-8&quot;);	</span><br><span class="line">			) &#123;</span><br><span class="line">			Map db = new HashMap();</span><br><span class="line">			Scanner scanner = new Scanner(re);</span><br><span class="line">			while(scanner.hasNext()) &#123;</span><br><span class="line">			String usertotal = scanner.nextLine();</span><br><span class="line">			String[] username = usertotal.split(&quot; &quot;);</span><br><span class="line">//			System.out.println(username[0]);</span><br><span class="line">//			System.out.println(username[1]);</span><br><span class="line">			db.put(username[0],username[1]);</span><br><span class="line">//			System.out.println(db);</span><br><span class="line">			&#125;</span><br><span class="line">			Scanner name = new Scanner(System.in);</span><br><span class="line">			String usename;</span><br><span class="line">			String password;</span><br><span class="line">			while(true) &#123;</span><br><span class="line">			while(true) &#123;</span><br><span class="line">			System.out.println(&quot;请输入账号：&quot;);</span><br><span class="line">			 usename = name.nextLine();</span><br><span class="line">			if(usename == null) &#123;</span><br><span class="line">				System.out.println(&quot;姓名不能为空&quot;);</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">			while(true) &#123;</span><br><span class="line">				System.out.println(&quot;请输入密码&quot;);</span><br><span class="line">				 password = name.nextLine();</span><br><span class="line">						</span><br><span class="line">				if(password == null) &#123;</span><br><span class="line">					System.out.println(&quot;密码不能为空&quot;);</span><br><span class="line">					</span><br><span class="line">					&#125; else &#123;</span><br><span class="line">					break;</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			if(password.equals(db.get(usename))) &#123;</span><br><span class="line">				System.out.println(&quot;登陆成功&quot;);</span><br><span class="line">				break;</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				System.out.println(&quot;输入错误请重新输入&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">			// TODO Auto-generated catch block</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; catch (IOException e1) &#123;</span><br><span class="line">			// TODO Auto-generated catch block</span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class login &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		File basic = new File(&quot;D://&quot; , &quot;a.txt&quot;);</span><br><span class="line">		try(InputStream in = new FileInputStream(basic);</span><br><span class="line">			Reader re = new InputStreamReader(in , &quot;UTF-8&quot;);	</span><br><span class="line">			) &#123;</span><br><span class="line">			Map db = new HashMap();</span><br><span class="line">			Scanner scanner = new Scanner(re);</span><br><span class="line">			while(scanner.hasNext()) &#123;</span><br><span class="line">			String usertotal = scanner.nextLine();</span><br><span class="line">			String[] username = usertotal.split(&quot; &quot;);</span><br><span class="line">//			System.out.println(username[0]);</span><br><span class="line">//			System.out.println(username[1]);</span><br><span class="line">			db.put(username[0],username[1]);</span><br><span class="line">//			System.out.println(db);</span><br><span class="line">			&#125;</span><br><span class="line">			Scanner name = new Scanner(System.in);</span><br><span class="line">			String usename;</span><br><span class="line">			String password;</span><br><span class="line">			while(true) &#123;</span><br><span class="line">			while(true) &#123;</span><br><span class="line">			System.out.println(&quot;请输入账号：&quot;);</span><br><span class="line">			 usename = name.nextLine();</span><br><span class="line">			if(usename == null) &#123;</span><br><span class="line">				System.out.println(&quot;姓名不能为空&quot;);</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">			while(true) &#123;</span><br><span class="line">				System.out.println(&quot;请输入密码&quot;);</span><br><span class="line">				 password = name.nextLine();</span><br><span class="line">						</span><br><span class="line">				if(password == null) &#123;</span><br><span class="line">					System.out.println(&quot;密码不能为空&quot;);</span><br><span class="line">					</span><br><span class="line">					&#125; else &#123;</span><br><span class="line">					break;</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			if(password.equals(db.get(usename))) &#123;</span><br><span class="line">				System.out.println(&quot;登陆成功&quot;);</span><br><span class="line">				System.out.println(&quot;输入1进行修改密码&quot;);</span><br><span class="line">				int m = Integer.parseInt(name.nextLine());</span><br><span class="line">				if(m == 1) &#123;</span><br><span class="line">					if(db.containsKey(usename)) &#123;</span><br><span class="line">						System.out.println(&quot;请输入更改之后的密码&quot;);</span><br><span class="line">						String newpassword = name.nextLine();</span><br><span class="line">						db.put(usename, newpassword);</span><br><span class="line">					&#125; </span><br><span class="line">				&#125;</span><br><span class="line">				break;</span><br><span class="line">			&#125; else &#123;</span><br><span class="line">				System.out.println(&quot;输入错误请重新输入&quot;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">			// TODO Auto-generated catch block</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; catch (IOException e1) &#123;</span><br><span class="line">			// TODO Auto-generated catch block</span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
      </categories>
  </entry>
  <entry>
    <title>io流</title>
    <url>/2022/10/20/10-20/</url>
    <content><![CDATA[<h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><ul>
<li>字节流的结尾一般都是InputStream ， OutputStream</li>
<li>是个抽象类</li>
<li>可以自动关闭</li>
<li>顶层类，上面就是Object</li>
<li>这个东西是要有参照物的</li>
</ul>
<h2 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">public class sd3333sdfse &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		OutputStream os1;</span><br><span class="line">		try &#123;</span><br><span class="line">			os1 = new FileOutputStream( new File(&quot;D:\\a.txt&quot;), false); // 这个false代表是覆盖源文件，如果是true就是把字符串加入</span><br><span class="line">			String s = &quot;hello word&quot;;</span><br><span class="line">			os1.write(s.getBytes());</span><br><span class="line">			os1.flush();  // 落盘到磁盘上</span><br><span class="line">			os1.close(); // 关闭文件输出流</span><br><span class="line">		&#125; catch (FileNotFoundException e1) &#123;</span><br><span class="line">			// TODO Auto-generated catch block</span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125; catch (IOException e) &#123;</span><br><span class="line">			// TODO Auto-generated catch block</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">public class read &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line">	try &#123;</span><br><span class="line">		InputStream is = new FileInputStream(&quot;D:/a.txt&quot;);</span><br><span class="line">//			while(is.available() != 0) &#123;</span><br><span class="line">//				System.out.println((char)is.read()); // 默认一次只读一个字符</span><br><span class="line">//			&#125;</span><br><span class="line">		</span><br><span class="line">		byte[] buffer = new byte[10]; // 通过设置缓冲区进行扩展一次可读的字符数量，如果是字符型，那这个byte要变char</span><br><span class="line">		int len = 0; // 设置个长度</span><br><span class="line">		while((len = is.read(buffer)) != -1) // 判断我是不是超出缓冲区的限定，如果超出，就只读取超出的部分</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(new String(buffer , 0 , len)); </span><br><span class="line">		&#125;</span><br><span class="line">		is.close();</span><br><span class="line">		&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">			// TODO Auto-generated catch block</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; catch (IOException e) &#123;</span><br><span class="line">			// TODO Auto-generated catch block</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li>定义：File d &#x3D; new File(“XXxxx”，”name”); &#x2F;&#x2F; 这里XXxxx是文件目录 , 第二个是文件名字</li>
<li>文件或者目录</li>
</ul>
<h2 id="exist（）"><a href="#exist（）" class="headerlink" title="exist（）"></a>exist（）</h2><ul>
<li>文件是有大小的，目录是无大小</li>
<li>判断文件&#x2F;目录是不是存在</li>
</ul>
<h2 id="isFile"><a href="#isFile" class="headerlink" title="isFile"></a>isFile</h2><ul>
<li>代表判断是不是文件</li>
</ul>
<h2 id="isDirectory"><a href="#isDirectory" class="headerlink" title="isDirectory"></a>isDirectory</h2><ul>
<li>代表是不是文件夹</li>
</ul>
<h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><ul>
<li>代表查看其字节的长度，大小，但是文件有大小，目录无大小</li>
</ul>
<h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><ul>
<li>代表删除文件，注意这里删除的文件不是送进回收站里的，如果要删除目录，要先把里面的文件清空</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class file &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">	File m = new File(&quot;D:\\&quot; , &quot;a.txt&quot;);</span><br><span class="line">	File k = new File(&quot;D//&quot;);</span><br><span class="line">	System.out.println(m.exists());</span><br><span class="line">	System.out.println(k.exists());</span><br><span class="line">	System.out.println(k.isFile());</span><br><span class="line">	System.out.println(m.isDirectory());</span><br><span class="line">	System.out.println(k.length());</span><br><span class="line">	System.out.println(k.delete());</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void SHANCHU(File k) &#123;</span><br><span class="line">	File[] ds =	k.listFiles(); </span><br><span class="line">	for (int i = 0; i &lt; ds.length ; i++ ) &#123;</span><br><span class="line">		File[] h = ds[i].listFiles();</span><br><span class="line">		if(h == null) &#123;</span><br><span class="line">			System.out.println(&quot;这个是个文件&quot;);</span><br><span class="line">			ds[i].delete();</span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			k.delete();</span><br><span class="line">			SHANCHU(ds[i]);</span><br><span class="line">				&#125;</span><br><span class="line">		k.delete();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="makedir"><a href="#makedir" class="headerlink" title="makedir"></a>makedir</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class adsgqjd &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">	File file = new File(&quot;D:/a/abc.txt&quot;);</span><br><span class="line">	System.out.println(file.exists());</span><br><span class="line">	System.out.println(file.mkdir());</span><br><span class="line">	File file2 =new File(&quot;D:/a/c/v/bv/nb&quot;);</span><br><span class="line">	System.out.println(file2.mkdirs());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>我们通过mkdirs可以直接深度创建</li>
<li>但是如果没有父目录，一般的文件就无法创建</li>
</ul>
<h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private static File getCopy(File f1) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line">	String sufString = f1.getName().substring(f1.getName().lastIndexOf(&quot;.&quot;));</span><br><span class="line">	String qi = f1.getName().substring(0, f1.getName().lastIndexOf(&quot;.&quot;));</span><br><span class="line">	String use = qi + &quot;-副本&quot; + sufString;</span><br><span class="line">	File newf = new File(f1.getParent() , use);</span><br><span class="line">	if(newf.exists()) &#123;</span><br><span class="line">	return	getCopy(newf);</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">	return newf;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>签到的制作（后端＋前端）</title>
    <url>/2022/10/19/%E5%88%B6%E4%BD%9C%E7%AD%BE%E5%88%B0/</url>
    <content><![CDATA[<h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><ul>
<li>Centos7.8</li>
<li>在虚拟机安装好redis，并且可以成功ping通</li>
<li>使用jdk 11</li>
<li>使用idea 2019.3</li>
<li>准备好post man</li>
<li>准备好可以观察redis的软件，比如redisDespoketManger等</li>
</ul>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ul>
<li>先打开虚拟机，并开启redis</li>
<li>然后打开idea，创建springboot项目，在插件列表选择 </li>
<li>spring web</li>
<li>spring Data Redis</li>
<li>Lombok</li>
<li>然后在pom文件里添加hutool插件（我们要用到的）</li>
<li>接下来修改application文件，我习惯把他的后缀改成yml</li>
<li>然后在application文件里添加<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    redis:</span><br><span class="line">       # host: 192.168.1.121 #ip地址</span><br><span class="line">        host: 192.168.41.110</span><br><span class="line">        port: 6379 #端口</span><br><span class="line">        password: liuzihan #密码</span><br><span class="line">        timeout: 3000 #超时时间</span><br><span class="line">        database: 0 #第几号数据库</span><br><span class="line">server:</span><br><span class="line">    port: 9999 #这个是程序启动之后的端口号，也就是tomcat插件的端口号</span><br></pre></td></tr></table></figure></li>
<li>ip地址是虚拟机，或者局域网内真实机的ip</li>
</ul>
<h1 id="思考编写方式"><a href="#思考编写方式" class="headerlink" title="思考编写方式"></a>思考编写方式</h1><ul>
<li>我的编写思路是通过redis里的bitMap进行日期的存取</li>
<li>首先在SignDemoApplication的包内创建几个包，分别代表客户端，服务端以及自动启动还有配置文件包，</li>
<li>首先确定的是浏览器页面，原因很简单，网页有强大的动态效果，以及平台的适配能力，而且很美观，比较与传统的GUI要好不少</li>
<li>我的文件层级目录如下</li>
<li><img src="https://imgse.com/i/x4XBBd"></li>
</ul>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul>
<li>创建config包，然后在包里创建RedisTemplateConfiguration.class</li>
<li>然后写入<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line">import com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line">import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line">import org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line">import org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;p&gt;ClassName: RedisConfigure&lt;/p &gt;</span><br><span class="line"> * &lt;p&gt;Description: redisTemplate自定义序列化配置，更改其默认序列化器&lt;/p &gt;</span><br><span class="line"> * &lt;p&gt;Date: 2021/10/23&lt;/p &gt;</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RedisTemplateConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RedisTemplate&lt;String,Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory)&#123;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;String,Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();</span><br><span class="line">        // 参照StringRedisTemplate内部实现指定序列化器</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        //使用 jackson2jasonRedisSerialize替换默认序列化</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL , JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        //为String类型 key/value 设置序列化</span><br><span class="line">        redisTemplate.setKeySerializer(new StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        //为hash ；类型 key、value 设置序列化</span><br><span class="line">        redisTemplate.setHashKeySerializer(new StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        return redisTemplate;</span><br><span class="line"></span><br><span class="line">       /* redisTemplate.setKeySerializer(keySerializer());</span><br><span class="line">        redisTemplate.setHashKeySerializer(keySerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(valueSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(valueSerializer());</span><br><span class="line"></span><br><span class="line">        return redisTemplate;*/</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //使用Jackson序列化器，key使用字符串</span><br><span class="line">    private RedisSerializer&lt;String&gt; keySerializer() &#123;</span><br><span class="line">        return new StringRedisSerializer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //使用Jackson序列化器，value使用Object</span><br><span class="line">    private RedisSerializer&lt;Object&gt; valueSerializer() &#123;</span><br><span class="line">        return new GenericJackson2JsonRedisSerializer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>这个就是个简单的redis自动序列化类，网上一抓一大把</li>
</ul>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ul>
<li>客户端是我们主要想写的地方，就是实现签到，以及获取mac地址等功能的地方</li>
<li>于是我们创建Severdemo包</li>
<li>在这个包下，写入SignSeverce类写上<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import cn.hutool.core.date.DateUtil;</span><br><span class="line">import cn.hutool.core.date.LocalDateTimeUtil;</span><br><span class="line">import cn.hutool.core.net.NetUtil;</span><br><span class="line">import cn.hutool.core.util.StrUtil;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.data.redis.connection.BitFieldSubCommands;</span><br><span class="line">import org.springframework.data.redis.core.RedisCallback;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@Mapper</span><br><span class="line">public class SignService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line">    /*</span><br><span class="line">     *用户签到可以补签</span><br><span class="line">     * @param UserId</span><br><span class="line">     * @param DataStr</span><br><span class="line">     * */</span><br><span class="line">    public Map&lt;String , Object&gt; doSign(String UserId , String DataStr)&#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            inetAddress = InetAddress.getLocalHost();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span><br><span class="line">        String localMacAddress2 = NetUtil.getMacAddress(inetAddress);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String , Object&gt; result = new HashMap&lt;&gt;();</span><br><span class="line">		</span><br><span class="line">		// 判断MAc地址和redis中的是不是一样</span><br><span class="line">        if (String.valueOf(redisTemplate.keys(&quot;user:&quot; + UserId + &quot;:*&quot;)).equals(&quot;[]&quot;))&#123;</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            String MAc = String.valueOf(redisTemplate.keys(&quot;user:&quot; + UserId + &quot;:*&quot;));</span><br><span class="line">            String[] split = MAc.split(&quot;:&quot;);</span><br><span class="line">            if (localMacAddress2.equals(split[2]))&#123;</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                result.put(&quot;code&quot; , 404);</span><br><span class="line">                result.put(&quot;message&quot; , &quot;你不是在同一台电脑上进行的签到，请联系管理员进行修复&quot;);</span><br><span class="line">                return  result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		 // 获取日期</span><br><span class="line">        Date  date = getDate(DataStr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">		// 判断获取到了补签权限吗</span><br><span class="line">        if (DataStr != null)&#123;</span><br><span class="line">          if (String.valueOf(redisTemplate.keys(&quot;user:&quot; + UserId + &quot;:*&quot;)).equals(&quot;[]&quot;)) &#123;</span><br><span class="line"></span><br><span class="line">          &#125; else &#123;</span><br><span class="line">              String MAc = String.valueOf(redisTemplate.keys(&quot;user:&quot; + UserId + &quot;:*&quot;));</span><br><span class="line">              String[] split = MAc.split(&quot;:&quot;);</span><br><span class="line">              if (&quot;0&quot;.equals(split[3])) &#123;</span><br><span class="line">                  result.put(&quot;code&quot;, 407);</span><br><span class="line">                  result.put(&quot;message&quot;, &quot;你未经过老师同意无法补签&quot;);</span><br><span class="line">                  return result;</span><br><span class="line">              &#125; else&#123;</span><br><span class="line"></span><br><span class="line">                  // 获取日期</span><br><span class="line"></span><br><span class="line">                  // 获取日期对应的天数</span><br><span class="line">                  int day = DateUtil.dayOfMonth(date) - 1;</span><br><span class="line">                  // 构建redis 的 key</span><br><span class="line">                  String signkey = buildSignKEy1(UserId,date , localMacAddress2);</span><br><span class="line">                  // 查看日期是不是签到</span><br><span class="line">                  boolean isSigned = redisTemplate.opsForValue().getBit(signkey , day);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  if(isSigned)&#123;</span><br><span class="line">                      result.put(&quot;code&quot; , 400);</span><br><span class="line">                      result.put(&quot;message&quot; , &quot;当前日期已完成签到，无需再签&quot;);</span><br><span class="line">                      return  result;</span><br><span class="line">                  &#125;</span><br><span class="line">                  // 签到</span><br><span class="line">                  redisTemplate.opsForValue().setBit(signkey , day , true);</span><br><span class="line">                  //根据当前日期获取签到的天数</span><br><span class="line">                  Date today = new Date();</span><br><span class="line">                  //统计总次数</span><br><span class="line">                  long count = getSumSignCount(UserId , today);</span><br><span class="line">                  //统计连续次数</span><br><span class="line">                  int continuous = getContinusSignCount(UserId , today);</span><br><span class="line"></span><br><span class="line">                  result.put(&quot;code&quot; , 200);</span><br><span class="line">                  result.put(&quot;message&quot; , &quot;签到成功&quot;);</span><br><span class="line">                  result.put(&quot;continuous&quot; , continuous);</span><br><span class="line">                  result.put(&quot;count&quot; , count);</span><br><span class="line"></span><br><span class="line">                  String basicname = String.valueOf(redisTemplate.keys(&quot;user:&quot; +UserId+ &quot;:*&quot;));</span><br><span class="line">                  String changgename = basicname.substring(basicname.indexOf(&quot;[&quot;)+1 , basicname.indexOf(&quot;]&quot;));</span><br><span class="line">                  String[] namebasic  =  changgename.split(&quot;:&quot;);</span><br><span class="line">                  String newname = namebasic[0] + &quot;:&quot; + namebasic[1] + &quot;:&quot; + namebasic[2] + &quot;:0:&quot; + namebasic[4];</span><br><span class="line">                  redisTemplate.rename(changgename , newname);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  return  result;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 获取日期对应的天数</span><br><span class="line">        int day = DateUtil.dayOfMonth(date) - 1;</span><br><span class="line">        // 构建redis 的 key</span><br><span class="line">        String signkey = buildSignKEy(UserId,date , localMacAddress2);</span><br><span class="line">        // 查看日期是不是签到</span><br><span class="line">        boolean isSigned = redisTemplate.opsForValue().getBit(signkey , day);</span><br><span class="line"></span><br><span class="line">		// 判断今天是不是已经签到了</span><br><span class="line">        if(isSigned)&#123;</span><br><span class="line">            result.put(&quot;code&quot; , 400);</span><br><span class="line">            result.put(&quot;message&quot; , &quot;当前日期已完成签到，无需再签&quot;);</span><br><span class="line">            return  result;</span><br><span class="line">        &#125;</span><br><span class="line">        // 签到</span><br><span class="line">        redisTemplate.opsForValue().setBit(signkey , day , true);</span><br><span class="line">        //根据当前日期获取签到的天数</span><br><span class="line">        Date today = new Date();</span><br><span class="line">        //统计总次数</span><br><span class="line">        long count = getSumSignCount(UserId , today);</span><br><span class="line">        //统计连续次数</span><br><span class="line">        int continuous = getContinusSignCount(UserId , today);</span><br><span class="line"></span><br><span class="line">        result.put(&quot;code&quot; , 200);</span><br><span class="line">        result.put(&quot;message&quot; , &quot;签到成功&quot;);</span><br><span class="line">        result.put(&quot;continuous&quot; , continuous);</span><br><span class="line">        result.put(&quot;count&quot; , count);</span><br><span class="line">		</span><br><span class="line">		// 更改补签权限</span><br><span class="line">        String basicname = String.valueOf(redisTemplate.keys(&quot;user:&quot; +UserId+ &quot;:*&quot;));</span><br><span class="line">        String changgename = basicname.substring(basicname.indexOf(&quot;[&quot;)+1 , basicname.indexOf(&quot;]&quot;));</span><br><span class="line">        String[] namebasic  =  changgename.split(&quot;:&quot;);</span><br><span class="line">        String newname = namebasic[0] + &quot;:&quot; + namebasic[1] + &quot;:&quot; + namebasic[2] + &quot;:0:&quot; + namebasic[4];</span><br><span class="line">        redisTemplate.rename(changgename , newname);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return  result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	// 获取用户当天签到的情况</span><br><span class="line">    public Map&lt;String , Object&gt;getSignByDate(String UserId , String DataStr)&#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            inetAddress = InetAddress.getLocalHost();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span><br><span class="line">        String localMacAddress2 = NetUtil.getMacAddress(inetAddress);</span><br><span class="line">        System.out.println(&quot;localMacAddress2 = &quot; + localMacAddress2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String , Object&gt; result = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (String.valueOf(redisTemplate.keys(&quot;user:&quot; + UserId + &quot;:*&quot;)).equals(&quot;[]&quot;))&#123;</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            String MAc = String.valueOf(redisTemplate.keys(&quot;user:&quot; + UserId + &quot;:*&quot;));</span><br><span class="line">            String[] split = MAc.split(&quot;:&quot;);</span><br><span class="line">            if (localMacAddress2.equals(split[2]))&#123;</span><br><span class="line">                System.out.println(split[2]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                result.put(&quot;code&quot; , 404);</span><br><span class="line">                result.put(&quot;message&quot; , &quot;你不是在同一台电脑上进行的签到，请联系管理员进行修复&quot;);</span><br><span class="line">                return  result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">        Date date = getDate(DataStr);</span><br><span class="line">        // 获取日期对应的天数</span><br><span class="line">        int day = DateUtil.dayOfMonth(date) - 1;</span><br><span class="line">        // 构建redis 的 key</span><br><span class="line">        String signkey = buildSignKEy(UserId, date , localMacAddress2);</span><br><span class="line">        // 查看日期是不是签到</span><br><span class="line">        boolean isSigned = redisTemplate.opsForValue().getBit(signkey , day);</span><br><span class="line"></span><br><span class="line">        // 签到</span><br><span class="line"></span><br><span class="line">        //根据当前日期获取签到的天数</span><br><span class="line">        Date today = new Date();</span><br><span class="line">        //统计总次数</span><br><span class="line">        long count = getSumSignCount(UserId , today);</span><br><span class="line">        //统计连续次数</span><br><span class="line">        int continuous = getContinusSignCount(UserId , today);</span><br><span class="line">        result.put(&quot;today&quot; , isSigned);</span><br><span class="line"></span><br><span class="line">        result.put(&quot;continuous&quot; , continuous);</span><br><span class="line">        result.put(&quot;count&quot; , count);</span><br><span class="line">        return  result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	// 获取签到天数的信息</span><br><span class="line">    public Map&lt;String , Object&gt; getSignInfo(String UserId , String DataStr)&#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            inetAddress = InetAddress.getLocalHost();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span><br><span class="line">        String localMacAddress2 = NetUtil.getMacAddress(inetAddress);</span><br><span class="line">        System.out.println(&quot;localMacAddress2 = &quot; + localMacAddress2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Date date = getDate(DataStr);</span><br><span class="line">        String signkey = buildSignKEy(UserId , date , localMacAddress2);</span><br><span class="line">        // 构建一个归自动排序的Map</span><br><span class="line">        Map&lt;String , Object&gt; signInfo = new TreeMap&lt;&gt;();</span><br><span class="line">        // 获取一个月的总天数</span><br><span class="line">        int dayOfMouth = DateUtil.lengthOfMonth(DateUtil.month(date) + 1 , DateUtil.isLeapYear(DateUtil.dayOfYear(date)));</span><br><span class="line"></span><br><span class="line">        // bitfiled user : sign : 5 : 2021 014 u30</span><br><span class="line">        BitFieldSubCommands bitFieldSubCommands = BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMouth)).valueAt(0);</span><br><span class="line"></span><br><span class="line">        // 获取用户从该当前日期到1号的状态</span><br><span class="line">        List&lt;Long&gt; list = redisTemplate.opsForValue().bitField(signkey , bitFieldSubCommands);</span><br><span class="line">        if (list == null || list.isEmpty())&#123;</span><br><span class="line">            return  signInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        long v = list.get(0) == null ? 0 :list.get(0);</span><br><span class="line">        for (int i = dayOfMouth ; i &gt; 0 ; i--)&#123;</span><br><span class="line">            /**</span><br><span class="line">             *  map的存储格式</span><br><span class="line">             *      签到：  yyyy-mm-01</span><br><span class="line">             *      未签到  yyyy-mm-02 不做任何处理</span><br><span class="line">             *</span><br><span class="line">             */</span><br><span class="line"></span><br><span class="line">            // 获取日期</span><br><span class="line">         LocalDateTime localDateTime =  LocalDateTimeUtil.of(date).withDayOfMonth(i);</span><br><span class="line">            // 右移再左移</span><br><span class="line">            boolean flag = v &gt;&gt; 1 &lt;&lt; 1 !=v;</span><br><span class="line">            if (flag)&#123;</span><br><span class="line">                signInfo.put(DateUtil.format(localDateTime , &quot;yyyy-MM-dd&quot;) , &quot;✔&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            v &gt;&gt;= 1 ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return signInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	// 获取签到天数的总和</span><br><span class="line">    private long getSumSignCount(String userId, Date today) &#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            inetAddress = InetAddress.getLocalHost();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span><br><span class="line">        String localMacAddress2 = NetUtil.getMacAddress(inetAddress);</span><br><span class="line">        System.out.println(&quot;localMacAddress2 = &quot; + localMacAddress2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String signkey = buildSignKEy(userId , today , localMacAddress2);</span><br><span class="line">        //bitcount命令</span><br><span class="line">        return(long) redisTemplate.execute((RedisCallback&lt;Long&gt;)con -&gt; con.bitCount(signkey.getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	// 获取连续签到天数</span><br><span class="line">    private int getContinusSignCount(String userId, Date today) &#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            inetAddress = InetAddress.getLocalHost();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span><br><span class="line">        String localMacAddress2 = NetUtil.getMacAddress(inetAddress);</span><br><span class="line">        System.out.println(&quot;localMacAddress2 = &quot; + localMacAddress2);</span><br><span class="line"></span><br><span class="line">        // 获取日期对应的天数</span><br><span class="line">        int dayofMonth = DateUtil.dayOfMonth(today);</span><br><span class="line">        String signkey = buildSignKEy(userId , today , localMacAddress2);</span><br><span class="line"></span><br><span class="line">        BitFieldSubCommands bitFieldSubCommands = BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(dayofMonth)).valueAt(0);</span><br><span class="line"></span><br><span class="line">        // 获取用户从该当前日期到1号的状态</span><br><span class="line">        List&lt;Long&gt; list = redisTemplate.opsForValue().bitField(signkey , bitFieldSubCommands);</span><br><span class="line">        if (list == null || list.isEmpty())&#123;</span><br><span class="line">            return  0;</span><br><span class="line">        &#125;</span><br><span class="line">        int Signcount = 0;</span><br><span class="line">        long v = list.get(0) == null ? 0 :list.get(0);</span><br><span class="line">        for (int i = dayofMonth ; i &gt; 0 ; i--)&#123;</span><br><span class="line">            // i表示位移操作的次数</span><br><span class="line">            if(v &gt;&gt; 1 &lt;&lt; 1 == v) &#123;</span><br><span class="line">                // 用户当前可能未签到，所以要排除当天的可能性</span><br><span class="line">                if(i != dayofMonth) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 如果右移后又左移和自己不相等 代表她已经签到</span><br><span class="line">                Signcount++;</span><br><span class="line">            &#125;</span><br><span class="line">            // 右移一位并重新赋值，相当于丢弃已经判断的数字</span><br><span class="line">            v &gt;&gt;= 1 ;</span><br><span class="line">        &#125;</span><br><span class="line">        return Signcount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	// redis里存储的key方法</span><br><span class="line">    private String buildSignKEy(String userId, Date date , String localMacAddress) &#123;</span><br><span class="line">        return  String.format(&quot;user:%s:%s:0:%s&quot;,userId ,localMacAddress, DateUtil.format(date, &quot;yyyyMM&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	// 判断是不是补签</span><br><span class="line">    private Date getDate(String dataStr) &#123;</span><br><span class="line">        return StrUtil.isBlank(dataStr) ? new Date() : DateUtil.parseDate(dataStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	// 教师查看端</span><br><span class="line">    public List&lt;Object&gt; teachercck(String DataStr) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;Object , Object&gt; result = new HashMap();</span><br><span class="line">        List&lt;Object&gt; end = new ArrayList&lt;&gt;();</span><br><span class="line">        String basicname = String.valueOf(redisTemplate.keys(&quot;user:&quot; + &quot;*&quot;));</span><br><span class="line">        String[] basic = basicname.split(&quot;,&quot;);</span><br><span class="line">        Date date = getDate(DataStr);</span><br><span class="line">        int day = DateUtil.dayOfMonth(date) - 1;</span><br><span class="line">//        end.put(&quot;code&quot; , 0);</span><br><span class="line">//        end.put(&quot;msg&quot; , &quot;&quot;);</span><br><span class="line">//        result.put(&quot;count&quot; , basic.length);</span><br><span class="line">        end.add(basic.length);</span><br><span class="line">        for( int i = 0 ; i &lt; basic.length ; i++ )&#123;</span><br><span class="line">                String[] namebasic  =  basic[i].split(&quot;:&quot;);</span><br><span class="line">                String signkey = buildSignKEy(namebasic[1], date , namebasic[2]);</span><br><span class="line">                boolean isSigned = redisTemplate.opsForValue().getBit(signkey , day);</span><br><span class="line">//                result.put(i+1 , namebasic[1]);</span><br><span class="line">                end.add(namebasic[1]);</span><br><span class="line">                end.add(namebasic[2]);</span><br><span class="line">//                result.put(namebasic[1], namebasic[2]);</span><br><span class="line">                if (isSigned)&#123;</span><br><span class="line">//                    result.put(namebasic[2] , &quot;今日已经签到&quot;);</span><br><span class="line">                    end.add(&quot;今日已经签到&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">//                    result.put(namebasic[2] , &quot;今日没有签到&quot;);</span><br><span class="line">                    end.add(&quot;今日未签到&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                if (namebasic[3].equals(&quot;0&quot;))&#123;</span><br><span class="line">                    end.add(&quot;未获得补签权限&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    end.add(&quot;已经获得补签权限&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	// 教师更改学生可以补签的权限</span><br><span class="line">    public Map&lt;Object , Object&gt; teacherchange(String UserId)</span><br><span class="line">    &#123;</span><br><span class="line">        Map&lt;Object , Object&gt; result = new HashMap();</span><br><span class="line">        String basicname = String.valueOf(redisTemplate.keys(&quot;user:&quot; +UserId+ &quot;:*&quot;));</span><br><span class="line">        String changgename = basicname.substring(basicname.indexOf(&quot;[&quot;)+1 , basicname.indexOf(&quot;]&quot;));</span><br><span class="line">        String[] namebasic  =  changgename.split(&quot;:&quot;);</span><br><span class="line"></span><br><span class="line">        String newname = namebasic[0] + &quot;:&quot; + namebasic[1] + &quot;:&quot; + namebasic[2] + &quot;:1:&quot; + namebasic[4];</span><br><span class="line">        redisTemplate.rename(changgename , newname);</span><br><span class="line"></span><br><span class="line">        result.put(&quot;code&quot; , 404);</span><br><span class="line">        result.put(&quot;message&quot; , &quot;成功修改&quot;);</span><br><span class="line">        return  result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="控制端"><a href="#控制端" class="headerlink" title="控制端"></a>控制端</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package com.example.demo.controller;</span><br><span class="line"></span><br><span class="line">import com.example.demo.Servicedemo.SignService;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;sign&quot;)</span><br><span class="line">public class SignController &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    private SignService signservice;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 用户的签到可以补签</span><br><span class="line">     * */</span><br><span class="line">    @PostMapping</span><br><span class="line">    public Map&lt;String  , Object&gt; doSignIn(String UserId , String DataStr)&#123;</span><br><span class="line"></span><br><span class="line">        return signservice.doSign(UserId , DataStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取用户当天的签到情况</span><br><span class="line">    @GetMapping(&quot;today&quot;)</span><br><span class="line">    public Map&lt;String  , Object&gt; getSignByDate(String UserId , String DataStr)&#123;</span><br><span class="line"></span><br><span class="line">        return signservice.getSignByDate(UserId , DataStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;SIGNFO&quot;)</span><br><span class="line">    public  Map&lt;String , Object&gt; GetSignInfo(String UserId , String DataStr)&#123;</span><br><span class="line"></span><br><span class="line">        return  signservice.getSignInfo(UserId , DataStr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @PostMapping(&quot;/teacher&quot;)</span><br><span class="line">    public java.util.List&lt;Object&gt; Getinfo(String DataStr)&#123;</span><br><span class="line"></span><br><span class="line">        return signservice.teachercck(DataStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @PostMapping(&quot;/change&quot;)</span><br><span class="line">    public Map&lt;Object, Object&gt; chenge(String USerId)&#123;</span><br><span class="line"></span><br><span class="line">        return signservice.teacherchange(USerId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="自动启动浏览器"><a href="#自动启动浏览器" class="headerlink" title="自动启动浏览器"></a>自动启动浏览器</h2><ul>
<li>先在SignDemo的同级目录下创建web启动类</li>
<li>如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package com.example.demo;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class ControllerTest &#123;</span><br><span class="line">    @GetMapping</span><br><span class="line">    public String run() &#123;</span><br><span class="line"></span><br><span class="line">        return &quot;启动springboot成功!&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>然后在与SignDEmo同级的包里创建一个浏览器自动启动类</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">package com.example.demo.AutoB;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.event.ApplicationReadyEvent;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.event.EventListener;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class AutoBrower &#123;</span><br><span class="line">    @EventListener(&#123;ApplicationReadyEvent.class&#125;)</span><br><span class="line">    void applicationReadyEvent() &#123;</span><br><span class="line">        System.out.println(&quot;应用已经准备就绪 ... 启动浏览器&quot;);</span><br><span class="line">        // 这里需要注url:端口号+测试类方法名</span><br><span class="line">        String url = &quot;http://localhost:9999/index.html&quot;;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        try &#123;</span><br><span class="line">            runtime.exec(&quot;rundll32 url.dll,FileProtocolHandler &quot; + url);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面那个url是我们要自动启动的网页</li>
</ul>
<h1 id="前端浏览器页面"><a href="#前端浏览器页面" class="headerlink" title="前端浏览器页面"></a>前端浏览器页面</h1><ul>
<li>前端浏览器页面我们主要使用ajax进行浏览器的传值，</li>
<li>前端我们使用了嵌套的布局，是一个index嵌套一个welcome</li>
<li>代码如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt;</span><br><span class="line">    &lt;title&gt;个人中心&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/css/layui.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;fieldset class=&quot;layui-elem-field layui-field-title&quot; style=&quot;margin-top: 30px;&quot;&gt;</span><br><span class="line">    &lt;legend&gt;个人中心&lt;/legend&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line"></span><br><span class="line">&lt;div style=&quot;padding: 20px&quot;&gt;</span><br><span class="line">&lt;div class = &quot;layui-col-md3&quot;&gt;</span><br><span class="line">&lt;div class=&quot;layui-tab layui-tab-card&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;layui-tab-title&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;layui-this&quot;&gt;签到&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;补签&lt;/li&gt;</span><br><span class="line">        &lt;li id=&quot;&quot;&gt;记录&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;div class=&quot;layui-tab-content&quot; style=&quot;height: 100px;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;layui-tab-item layui-show&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">                &lt;button class=&quot;layui-btn layui-btn-radius layui-btn-normal layui-form-label&quot; id = &quot;SignBtn&quot; style=&quot;margin-left: 20px&quot; &gt; 签 &amp;nbsp 到&lt;/button&gt;</span><br><span class="line">                &lt;div class=&quot;layui-input-block&quot;&gt;</span><br><span class="line">                    &lt;input type=&quot;text&quot; name=&quot;username&quot; lay-verify=&quot;title&quot; autocomplete=&quot;off&quot; placeholder=&quot;请输入姓名&quot; class=&quot;layui-input&quot; id=&quot;user&quot;&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">            &lt;p&gt;你已签到&amp;nbsp;&lt;span style = &quot;color: red;&quot; id=&quot;count&quot; &gt;0 &lt;/span&gt;&amp;nbsp;天&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;连续签到&amp;nbsp;&lt;span style = &quot;color: red;&quot; id=&quot;continuous&quot;&gt;0&lt;/span&gt;&amp;nbsp;天&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=&quot;layui-tab-item&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;layui-inline&quot;&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; class=&quot;layui-input&quot; id=&quot;reissue&quot; placeholder=&quot;请选择日期&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;button class=&quot;layui-btn layui-btn-radius layui-btn-normal&quot; id = &quot;reissueBtn&quot;&gt; 补签&lt;/button&gt;</span><br><span class="line">            &lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">                    &lt;input type=&quot;text&quot; name=&quot;username&quot; lay-verify=&quot;title&quot; autocomplete=&quot;off&quot; placeholder=&quot;请输入姓名&quot; class=&quot;layui-input&quot; id=&quot;user1&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;layui-tab-item&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">                &lt;button class=&quot;layui-btn layui-btn-radius layui-btn-normal layui-form-label&quot; id = &quot;recordLi&quot;&gt;查询记录&lt;/button&gt;</span><br><span class="line">                &lt;div class=&quot;layui-input-block&quot;&gt;</span><br><span class="line">                    &lt;input type=&quot;text&quot; name=&quot;username&quot; lay-verify=&quot;title&quot; autocomplete=&quot;off&quot; placeholder=&quot;请输入姓名&quot; class=&quot;layui-input&quot; id=&quot;user2&quot;&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=&quot;layui-inline&quot; id=&quot;record&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/element-ui/2.15.10/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // $(function () &#123;</span><br><span class="line">    //</span><br><span class="line">    //     var value = jQuery(&quot;#user&quot;).val();</span><br><span class="line">    //</span><br><span class="line">    //     $.ajax(&#123;</span><br><span class="line">    //         url: &quot;/sign/today&quot;,</span><br><span class="line">    //         type: &quot;GET&quot;,</span><br><span class="line">    //         data: &#123;&quot;UserId&quot; : value&#125;, // 模拟的用户id</span><br><span class="line">    //         dataType: &quot;JSON&quot;,</span><br><span class="line">    //         success: function f(result) &#123;</span><br><span class="line">    //             layer.msg(result.message);</span><br><span class="line">    //             if(200 == result.code)&#123;</span><br><span class="line">    //                 if (true == result.today) &#123;</span><br><span class="line">    //                     $(&quot;#count&quot;).text(result.count);</span><br><span class="line">    //                     // 设置连续签到次数</span><br><span class="line">    //                     $(&quot;#continuous&quot;).text(result.continuous);</span><br><span class="line">    //                     // 设置签到按钮的文本</span><br><span class="line">    //                     $(&quot;#SignBtn&quot;).text(&quot;已经签到&quot;);</span><br><span class="line">    //                     // 禁用签到按钮</span><br><span class="line">    //                     $(&quot;#SignBtn&quot;).addClass(&quot;layui-btn-disabled&quot;);</span><br><span class="line">    //                     $(&quot;#SignBtn&quot;).attr(&quot;disabled&quot; , &quot;true&quot;);</span><br><span class="line">    //                 &#125;</span><br><span class="line">    //</span><br><span class="line">    //             &#125;</span><br><span class="line">    //</span><br><span class="line">    //</span><br><span class="line">    //         &#125;</span><br><span class="line">    //</span><br><span class="line">    //     &#125;);</span><br><span class="line">    //</span><br><span class="line">    // &#125;)</span><br><span class="line"></span><br><span class="line">    layui.use(&#x27;laydate&#x27;, function()&#123;</span><br><span class="line">        var laydate = layui.laydate;</span><br><span class="line"></span><br><span class="line">        //执行一个laydate实例</span><br><span class="line">        laydate.render(&#123;</span><br><span class="line">            elem: &#x27;#reissue&#x27; //指定元素</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    layui.use(&#x27;layer&#x27; , function () &#123;</span><br><span class="line">        // 签到</span><br><span class="line">        $(&quot;#SignBtn&quot;).on(&quot;click&quot;, function () &#123;</span><br><span class="line">            var value = jQuery(&quot;#user&quot;).val();</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: &quot;/sign&quot;,</span><br><span class="line">                type: &quot;POST&quot;,</span><br><span class="line">                data: &#123;&quot;UserId&quot;: value&#125;, // 模拟的用户id</span><br><span class="line">                dataType: &quot;JSON&quot;,</span><br><span class="line">                success: function f(result) &#123;</span><br><span class="line">                    // for (var m in result)&#123;</span><br><span class="line">                    //     alert(m)</span><br><span class="line">                    //     alert(result[m])</span><br><span class="line">                    // &#125;</span><br><span class="line">                    layer.msg(result.message);</span><br><span class="line">                    if (200 == result.code) &#123;</span><br><span class="line">                        // 设置总签到次数</span><br><span class="line">                        $(&quot;#count&quot;).text(result.count);</span><br><span class="line">                        // 设置连续签到次数</span><br><span class="line">                        $(&quot;#continuous&quot;).text(result.continuous);</span><br><span class="line">                        // 设置签到按钮的文本</span><br><span class="line">                        $(&quot;#SignBtn&quot;).text(&quot;已经签到&quot;);</span><br><span class="line">                        // 禁用签到按钮</span><br><span class="line">                        $(&quot;#SignBtn&quot;).addClass(&quot;layui-btn-disabled&quot;);</span><br><span class="line">                        $(&quot;#SignBtn&quot;).attr(&quot;disabled&quot;, &quot;true&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        //补签</span><br><span class="line">        $(&quot;#reissueBtn&quot;).on(&quot;click&quot; , function () &#123;</span><br><span class="line">            var va = jQuery(&quot;#user1&quot;).val();</span><br><span class="line"></span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: &quot;/sign&quot;,</span><br><span class="line">                type: &quot;POST&quot;,</span><br><span class="line">                data: &#123;&quot;UserId&quot; : va , &quot;DataStr&quot; : $(&quot;#reissue&quot;).val()&#125;, // 模拟的用户id</span><br><span class="line">                dataType: &quot;JSON&quot;,</span><br><span class="line">                success: function f(result) &#123;</span><br><span class="line">                    layer.msg(result.message);</span><br><span class="line">                    if(200 == result.code)&#123;</span><br><span class="line">                        // 设置总签到次数</span><br><span class="line">                        $(&quot;#count&quot;).text(result.count);</span><br><span class="line"></span><br><span class="line">                        // 设置连续签到次数</span><br><span class="line">                        $(&quot;#continuous&quot;).text(result.continuous);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 签到记录的元素</span><br><span class="line">    $(&quot;#recordLi&quot;).on(&quot;click&quot; , function () &#123;</span><br><span class="line">        var vae = jQuery(&quot;#user2&quot;).val();</span><br><span class="line">        layui.use(&#x27;layer&#x27; , function () &#123;</span><br><span class="line">            var laydate = layui.laydate;</span><br><span class="line"></span><br><span class="line">            // 获取签到记录</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url: &quot;/sign/SIGNFO&quot;,</span><br><span class="line">                type: &quot;POST&quot;,</span><br><span class="line">                data: &#123;&quot;UserId&quot;: vae&#125;, // 模拟的用户id</span><br><span class="line">                dataType: &quot;JSON&quot;,</span><br><span class="line">                success: function f(result) &#123;</span><br><span class="line"></span><br><span class="line">                    // 清空日历元素</span><br><span class="line">                    $(&quot;#record&quot;).html(&quot;&quot;);</span><br><span class="line"></span><br><span class="line">                    laydate.render(&#123;</span><br><span class="line">                        elem: &#x27;#record&#x27;</span><br><span class="line">                        ,mark: result,</span><br><span class="line">                        position: &#x27;static&#x27;</span><br><span class="line">                    &#125;)</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>index的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt;</span><br><span class="line">    &lt;title&gt;用户签到系统&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/css/layui.css&quot; media=&quot;all&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;layui-layout layui-layout-admin&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;layui-header&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;layui-logo layui-hide-xs layui-bg-black&quot;&gt;用户签到系统&lt;/div&gt;</span><br><span class="line">        &lt;!-- 头部区域（可配合layui 已有的水平导航） --&gt;</span><br><span class="line">        &lt;ul class=&quot;layui-nav layui-layout-left&quot;&gt;</span><br><span class="line">            &lt;!-- 移动端显示 --&gt;</span><br><span class="line">            &lt;li class=&quot;layui-nav-item layui-show-xs-inline-block layui-hide-sm&quot; lay-header-event=&quot;menuLeft&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;layui-icon layui-icon-spread-left&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">            &lt;li class=&quot;layui-nav-item layui-hide-xs&quot;&gt;&lt;a href=&quot;&quot;&gt;签到&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;layui-side layui-bg-black&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;layui-side-scroll&quot;&gt;</span><br><span class="line">            &lt;!-- 左侧导航区域（可配合layui已有的垂直导航） --&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;layui-body&quot;&gt;</span><br><span class="line">        &lt;!-- 内容主体区域 --&gt;</span><br><span class="line">        &lt;iframe src=&quot;welcome.html&quot;  name=&quot;container&quot; style=&quot;width: 100%; height: 100%; &quot;&gt;&lt;/iframe&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;layui-footer&quot;&gt;</span><br><span class="line">        &lt;!-- 底部固定区域 --&gt;</span><br><span class="line">        底部固定区域</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>上述只是学生端的，对于教师端也和其大差不差，代码如下</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Layui&lt;/title&gt;</span><br><span class="line">    &lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/css/layui.css&quot;    media=&quot;all&quot;&gt;</span><br><span class="line">    &lt;!-- 注意：如果你直接复制所有代码到本地，上述css路径需要改成你本地的 --&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;legend&gt;教师中心&lt;/legend&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;layui-tab layui-tab-card&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;layui-tab-title&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;layui-this&quot;&gt;查看签到情况&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;更改权限&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;div class=&quot;layui-tab-content&quot; style=&quot;height: 100px;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;layui-tab-item layui-show&quot;&gt;</span><br><span class="line">            &lt;table border=&quot;1&quot; width=&quot;600px&quot;&gt;</span><br><span class="line">            &lt;tbody &gt;</span><br><span class="line">            &lt;tr  style=&#x27;width:300px&#x27; &gt;</span><br><span class="line">                &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;Mac地址&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;今日签到情况&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;补签情况&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">            &lt;tbody id=&quot;tbody1&quot;&gt;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;&lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;layui-tab-item&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;button class=&quot;layui-btn layui-btn-radius layui-btn-normal&quot; id = &quot;reissueBtn&quot;&gt;更改补签权限&lt;/button&gt;</span><br><span class="line">            &lt;div class=&quot;layui-form-item&quot;&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; name=&quot;username&quot; lay-verify=&quot;title&quot; autocomplete=&quot;off&quot; placeholder=&quot;请输入姓名&quot; class=&quot;layui-input&quot; id=&quot;user1&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 注意：如果你直接复制所有代码到本地，上述 JS 路径需要改成你本地的 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/element-ui/2.15.10/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: &quot;/sign/teacher&quot;,</span><br><span class="line">            type: &quot;POST&quot;,</span><br><span class="line">            data: &#123;&quot;DataStr&quot;: null&#125;,</span><br><span class="line">            dataType: &quot;JSON&quot;,</span><br><span class="line">            success: function f(result) &#123;</span><br><span class="line">                var m = 0;</span><br><span class="line">                var tableData = null;</span><br><span class="line">                for (let k = 1; k &lt;= result[0]; k++) &#123;</span><br><span class="line"></span><br><span class="line">                    tableData += &quot;&lt;tr  style=&#x27;width:300px&#x27; &gt;&quot;</span><br><span class="line">                    for (let i = 1 + m; i &lt;= 4 + m; i++) &#123;</span><br><span class="line">                        tableData += &quot;&lt;td&gt;&quot; + result[i] + &quot;&lt;/td&gt;&quot;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    // tableData += &quot;&lt;td&gt;&lt;button type=&#x27;submit&#x27; onclick=&#x27;btnAction&#x27; name=&#x27;btn&#x27;&gt;更改补签权限&lt;/button&gt;&lt;/td&gt;&quot;</span><br><span class="line">                    tableData += &quot;&lt;/tr&gt;&quot;</span><br><span class="line">                    m += 4;</span><br><span class="line">                &#125;</span><br><span class="line">                $(&quot;#tbody1&quot;).html(tableData)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     $(&quot;#reissueBtn&quot;).on(&quot;click&quot; , function () &#123;</span><br><span class="line">         var va = jQuery(&quot;#user1&quot;).val();</span><br><span class="line">                alert(va)</span><br><span class="line">         $.ajax(&#123;</span><br><span class="line">             url: &quot;/sign/change&quot;,</span><br><span class="line">             type: &quot;POST&quot;,</span><br><span class="line">             data: &#123;&quot;USerId&quot; : va&#125;,</span><br><span class="line">             dataType: &quot;JSON&quot;,</span><br><span class="line">             success: function f(result) &#123;</span><br><span class="line">                 layer.msg(result.message);</span><br><span class="line"></span><br><span class="line">             &#125;</span><br><span class="line"></span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>教师的index</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;&gt;</span><br><span class="line">    &lt;title&gt;教师观察系统&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/css/layui.css&quot; media=&quot;all&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;layui-layout layui-layout-admin&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;layui-header&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;layui-logo layui-hide-xs layui-bg-black&quot;&gt;教师观察系统&lt;/div&gt;</span><br><span class="line">        &lt;!-- 头部区域（可配合layui 已有的水平导航） --&gt;</span><br><span class="line">        &lt;ul class=&quot;layui-nav layui-layout-left&quot;&gt;</span><br><span class="line">            &lt;!-- 移动端显示 --&gt;</span><br><span class="line">            &lt;li class=&quot;layui-nav-item layui-show-xs-inline-block layui-hide-sm&quot; lay-header-event=&quot;menuLeft&quot;&gt;</span><br><span class="line">                &lt;i class=&quot;layui-icon layui-icon-spread-left&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line"></span><br><span class="line">            &lt;li class=&quot;layui-nav-item layui-hide-xs&quot;&gt;&lt;a href=&quot;&quot;&gt;签到情况&lt;/a&gt;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;layui-side layui-bg-black&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;layui-side-scroll&quot;&gt;</span><br><span class="line">            &lt;!-- 左侧导航区域（可配合layui已有的垂直导航） --&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;layui-body&quot;&gt;</span><br><span class="line">        &lt;!-- 内容主体区域 --&gt;</span><br><span class="line">        &lt;iframe src=&quot;teacher.html&quot;  name=&quot;container&quot; style=&quot;width: 100%; height: 100%; &quot;&gt;&lt;/iframe&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;layui-footer&quot;&gt;</span><br><span class="line">        &lt;!-- 底部固定区域 --&gt;</span><br><span class="line">        底部固定区域</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>签到的制作</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式和反射</title>
    <url>/2022/10/19/10-19/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><ul>
<li>一个类只有一个实例</li>
<li>通过private ， 构造方法</li>
<li>static方法</li>
<li>饿汉式</li>
</ul>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class testmain1 &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">		A a1 = A.getInstance();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class A &#123;</span><br><span class="line">	private A() &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	private static A a1 = new A();</span><br><span class="line">	public static A getInstance() &#123;</span><br><span class="line">		return a1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<ul>
<li>懒汉式</li>
</ul>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line">public class testmain1 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">	A a1 = A.getInstance();</span><br><span class="line">	B a2 = B.getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line">	private B() &#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">private static B ai;</span><br><span class="line">public synchronized static B getInstance() &#123;</span><br><span class="line">	if(ai == null) &#123;</span><br><span class="line">		ai = new B();</span><br><span class="line">	&#125;</span><br><span class="line">	return ai;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>开发的时候懒汉式用的比较多，因为可控</li>
<li>但是一般都在懒汉式哪里添加一个线程锁，为了线程安全，就是synchronized</li>
</ul>
<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><ul>
<li>创建型设计模式</li>
<li>通过方法创建对象</li>
</ul>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul>
<li>静态工厂方法模式，例如单例模式，单例模式是特殊的工厂模式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Diver &#123;</span><br><span class="line">	public static Car driverCar(String s) &#123;</span><br><span class="line">		if(s.equalsIgnoreCase(&quot;宝马&quot;)) &#123;</span><br><span class="line">			return new Car(&quot;宝马&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		if(s.equalsIgnoreCase(&quot;奔驰&quot;)) &#123;</span><br><span class="line">			return new Car(&quot;奔驰&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		if(s.equalsIgnoreCase(&quot;奥迪&quot;)) &#123;</span><br><span class="line">			return new Car(&quot;奥迪&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><ul>
<li>非静态方法，不同的工厂生成不同的产品</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package factory;</span><br><span class="line">public  class bzfactory &#123;</span><br><span class="line"></span><br><span class="line">public  Car product() &#123;</span><br><span class="line">	return new Car();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class BenzCar extends bzfactory&#123;</span><br><span class="line">public Car product() &#123;</span><br><span class="line">	return new bz();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class bmwfactory extends bzfactory&#123;</span><br><span class="line">public Car product() &#123;</span><br><span class="line">	return new bmw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Car&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class bz extends Car&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class bmw extends Car&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class audi extends Car&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这样可以不用动代码，可以直接加类，进而直接引</li>
<li>而第一种要把别的人已经打包好的解包进而对其代码进行操作</li>
<li>而这种不用，只要新加几个类就可以</li>
</ul>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ul>
<li>工厂的工厂模式</li>
<li>给用户提供一个接口，可以创建多个产品族中的对象</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">	package com.icss.javasechapter.factory;</span><br><span class="line">//抽象工厂模式</span><br><span class="line">	interface Car&#123;</span><br><span class="line">		public void drive();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	interface SportsCar extends Car&#123;</span><br><span class="line">		public boolean isConvertible();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	interface BussinessCar extends Car&#123;</span><br><span class="line">		public boolean isAutoDoor();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	// 具体产品角色</span><br><span class="line">	class BenzSprotsCar implements SportsCar &#123;</span><br><span class="line">		public void drive() &#123;</span><br><span class="line">			System.out.println(&quot;Driving Benz S&quot;);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		@Override</span><br><span class="line">		public boolean isConvertible() &#123;</span><br><span class="line">			// TODO Auto-generated method stub</span><br><span class="line">			return true;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	class BenzBussinessCar implements BussinessCar &#123;</span><br><span class="line">		public void drive() &#123;</span><br><span class="line">			System.out.println(&quot;Driving Benz B&quot;);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">		public boolean isAutoDoor() &#123;</span><br><span class="line">			// TODO Auto-generated method stub</span><br><span class="line">			return false;</span><br><span class="line">				&#125;	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	class BmwSprotsCar implements SportsCar &#123;</span><br><span class="line">		public void drive() &#123;</span><br><span class="line">			System.out.println(&quot;Driving Bmw S &quot;);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		@Override</span><br><span class="line">		public boolean isConvertible() &#123;</span><br><span class="line">			return true;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	class BmwBussinessCar implements BussinessCar &#123;</span><br><span class="line">		public void drive() &#123;</span><br><span class="line">			System.out.println(&quot;Driving Bmw B &quot;);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		@Override</span><br><span class="line">		public boolean isAutoDoor() &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		return false;</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	interface CarFactory&#123;</span><br><span class="line">		public SportsCar getSportsCar();</span><br><span class="line">		public BussinessCar getBussinessCar();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	class BenzCarFactory implements CarFactory&#123;</span><br><span class="line"></span><br><span class="line">		@Override</span><br><span class="line">		public SportsCar getSportsCar() &#123;</span><br><span class="line">			// TODO Auto-generated method stub</span><br><span class="line">			return new BenzSprotsCar();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	@Override</span><br><span class="line">	public BussinessCar getBussinessCar() &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		return new BenzBussinessCar();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	class BmwCarFactroy implements CarFactory&#123;</span><br><span class="line"></span><br><span class="line">		@Override</span><br><span class="line">		public SportsCar getSportsCar() &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">			return new BmwSprotsCar();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		@Override</span><br><span class="line">		public BussinessCar getBussinessCar() &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">			return new BmwBussinessCar();</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 抽象产品角色，具体产品角色与简单工厂模式类似，只是变得复杂了些，这里略。</span><br><span class="line">	// 抽象工厂角色</span><br><span class="line">	class AbstractCarFactory&#123;</span><br><span class="line">	</span><br><span class="line">	public static CarFactory getCarFactory(String name)&#123;</span><br><span class="line">		if(&quot;Benz&quot;.equals(name))&#123;</span><br><span class="line">			return new BenzCarFactory();</span><br><span class="line">		&#125;else if(&quot;Bmw&quot;.equals(name))&#123;</span><br><span class="line">			return new BmwCarFactroy();</span><br><span class="line">		&#125;else&#123;</span><br><span class="line">			throw new RuntimeException();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public class MagnateAbstractFactory &#123;</span><br><span class="line">		public static void main(String[] args) &#123;</span><br><span class="line">			try &#123;</span><br><span class="line">				CarFactory factory = AbstractCarFactory.getCarFactory(&quot;Bmw&quot;);</span><br><span class="line">				BussinessCar car = factory.getBussinessCar();</span><br><span class="line">				car.drive();</span><br><span class="line">				System.out.println(car.isAutoDoor());</span><br><span class="line">			&#125; catch (Exception e) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul>
<li>订阅与发布</li>
<li>java通过Observable和Observer来实现<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">public class lesson13 &#123;</span><br><span class="line"></span><br><span class="line">	public int aaa =0;</span><br><span class="line">	public MyObsever[] array = new MyObsever[10];</span><br><span class="line">	int index = -1;</span><br><span class="line">	public void addObsever(MyObsever obs) &#123;</span><br><span class="line">			array[++index &gt; 9 ? index = 0 : index] =obs;</span><br><span class="line">	&#125;</span><br><span class="line">	public void setAaa(int newvalue) &#123;</span><br><span class="line">		this.aaa = newvalue;</span><br><span class="line">		for(int i =0; i &lt; array.length ; i++) &#123;</span><br><span class="line">			if(array[i] == null)break;</span><br><span class="line">				array[i].update(this.aaa , newvalue);</span><br><span class="line">			&#125;</span><br><span class="line">		this.aaa = newvalue;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		MyObsever ob = new MyObsever();</span><br><span class="line">		lesson13 data = new lesson13();</span><br><span class="line">		data.addObsever(ob);</span><br><span class="line">		data.setAaa(10000);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyObsever &#123;</span><br><span class="line">	String name;</span><br><span class="line">	public void update(int aaa , int newvalue) &#123;</span><br><span class="line">		System.out.println(&quot;观察者&quot; + this.name + &quot;,&quot; + aaa + &quot;变成&quot; + newvalue);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>简单来说就是群发消息，或者说是改变github上的代码的那种改变</li>
</ul>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ul>
<li>代理模式给一个对象提供代理对象，比如代打，比如代刷xxx等<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line">public class TestMain4 &#123;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">		Target t = new Target();</span><br><span class="line">		Proxy proxy = new Proxy();</span><br><span class="line">		proxy.target = t;</span><br><span class="line">		proxy.price();</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Target &#123;</span><br><span class="line">	public void price() &#123;</span><br><span class="line">		System.out.println(&quot;---100--&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Proxy &#123;</span><br><span class="line">	Target target;</span><br><span class="line">	public void price() &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			System.out.println(&quot;100&quot;);</span><br><span class="line">			target.price();</span><br><span class="line">			System.out.println(&quot;50&quot;);</span><br><span class="line">		&#125; catch (Exception e) &#123;</span><br><span class="line">			// TODO: handle exception</span><br><span class="line">			System.out.println(&quot;10&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>就相当于中间商赚差价，商家会把货发送到代理这里，代理再提高价格发送出去，上面的这个叫静态代理</li>
</ul>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul>
<li>动态代理要用接口来实现<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package lesson13;</span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line">import java.nio.channels.NonWritableChannelException;</span><br><span class="line">public class TestMain4 &#123;</span><br><span class="line">	public static void main(String[] args) // 主方法调用代理的 </span><br><span class="line">	&#123;</span><br><span class="line">		DynamicTargetInf inf = DynamicProxFactory.getInstance();	</span><br><span class="line">		inf.price();</span><br><span class="line">		int r = inf.add(1, 2);</span><br><span class="line">		System.out.println(r);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">interface DynamicTargetInf // 要代理的接口 </span><br><span class="line">&#123;</span><br><span class="line">	void price();</span><br><span class="line">	int add(int i, int j);</span><br><span class="line">&#125;</span><br><span class="line">class DynamicTarget implements DynamicTargetInf // 要代理的目标类，我们接下来要代理这里的方法</span><br><span class="line">&#123;</span><br><span class="line">	public void price() &#123;</span><br><span class="line">		System.out.println(&quot;--target-100--&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">	@Override</span><br><span class="line">	public int add(int i, int j) &#123;</span><br><span class="line">		System.out.println(&quot;--target-i + j--&quot;);</span><br><span class="line">		return i + j;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	// invocationHandle   invoke执行 handle句柄    welcome,xxx</span><br><span class="line">	class DynamicProxFactory implements InvocationHandler // 代理控制器，就是代理对象每次要运行方法都要经过他</span><br><span class="line">	&#123;</span><br><span class="line">	DynamicTargetInf target = new DynamicTarget();	// 一般这个地方是要传值进来的，不过这里为了方便，我们就直接赋值了</span><br><span class="line">	// 代理对象每次运行方法的时候会执行</span><br><span class="line">	@Override</span><br><span class="line">	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable // invoke方法是InvocationHandler接口的方法，这个方法是执行的意思</span><br><span class="line">	&#123;</span><br><span class="line">			Object result = null; // 定义一个返回值 ，Object类代表可以转化成任何类型</span><br><span class="line">		try &#123;  // try catch包裹，一是为了判断是不是出错，二是为了安全性</span><br><span class="line">		System.out.println(&quot;-之前-100---&quot;);</span><br><span class="line">		// 反射。当前方法执行。target对象的当前方法， args方法的参数</span><br><span class="line">		result = method.invoke(target, args);</span><br><span class="line">		//	target.price();</span><br><span class="line">		System.out.println(&quot;-之后-50---&quot;);	</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">		System.out.println(&quot;-异常-10---&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return result;</span><br><span class="line">	&#125;</span><br><span class="line">	public static DynamicTargetInf getInstance() // 要代理的目标的接口的实例化方法 ， 通过这个方法会把要代理对象的接口和代理工厂连接到一起</span><br><span class="line">	&#123;</span><br><span class="line">	Object object = java.lang.reflect.Proxy.newProxyInstance(DynamicProxFactory.class.getClassLoader(), new Class[] &#123;DynamicTargetInf.class&#125;, new DynamicProxFactory()); // 这里的三个参数其实是，第一个是类加载器 ， 第二个是目标接口的类数组 ， 第三个是代理工厂的句柄，也就是句柄</span><br><span class="line">	return (DynamicTargetInf) object;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>对于静态的代理，每一个方法都要写一个代理，于是就很麻烦，可是对于动态的代理，他会自动的把那个方法里的方法都代理一边，只要在主函数里调用就行，</li>
<li>其实基本上思想就是，把要代理的目标变成一个接口，然后通过实例化这个接口，再通过接口的特性，让代理去实现目标的方法</li>
<li>私有的方法无法代理</li>
</ul>
<h1 id="反射，类的类型"><a href="#反射，类的类型" class="headerlink" title="反射，类的类型"></a>反射，类的类型</h1><p>类的类型，就是所有类都可以有的东西比如：属性，构造方法，方法。</p>
<ul>
<li>可以用这些类的类型去创建一个新类</li>
<li>而我们如果想获取这个类的类型，就要用到反射，</li>
<li>他可以获取这个类的类型，就是上面说的属性，构造方法，方法</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">public class wjw1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">	// 获取反射的三种方式 第一种</span><br><span class="line">	Class clzz1 = student.class;</span><br><span class="line">	// 第二中 </span><br><span class="line">	student student = new student();</span><br><span class="line">	Class a = student.getClass();</span><br><span class="line">	// 第三种</span><br><span class="line">	try &#123;</span><br><span class="line">		Class ae = Class.forName(&quot;作业.student&quot;);</span><br><span class="line">	&#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">		// TODO Auto-generated catch block</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Constructor[] cons = clzz1.getConstructors(); // 查看构造器</span><br><span class="line">	for (int i = 0; i &lt; cons.length; i++) &#123;</span><br><span class="line">		System.out.println(cons[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	Field[] d = a.getFields(); // 查看变量，非私有的</span><br><span class="line">	for (int i = 0; i &lt; d.length; i++) &#123;</span><br><span class="line">		System.out.println(d[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	Field[] f = a.getDeclaredFields(); // 私有变量只能这样查看</span><br><span class="line">	for (int i = 0; i &lt; f.length; i++) &#123;</span><br><span class="line">		System.out.println(f[i]);</span><br><span class="line">	&#125;</span><br><span class="line">		Constructor Con; // 获取有特定参数的构造器</span><br><span class="line">	try &#123;</span><br><span class="line">		Con = clzz1.getConstructor(new Class[] &#123;String.class , int.class&#125;);//里面放那个类型的对应的.class</span><br><span class="line">		&#125; catch (NoSuchMethodException | SecurityException e) &#123;</span><br><span class="line">		// TODO Auto-generated catch block</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	try &#123; // 通过反射进行实例化，证明了，实例化不一定非要用new</span><br><span class="line">		Object object = Con.newInstance(new Object[] &#123;343,&quot;sdajkdha&quot;&#125;);</span><br><span class="line">		&#125; catch (InstantiationException | IllegalAccessException | IllegalArgumentException</span><br><span class="line">			| InvocationTargetException e) &#123;</span><br><span class="line">		// TODO Auto-generated catch block</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面，是我们要运行的方法里如何写</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;	</span><br><span class="line">public class student &#123;</span><br><span class="line">private String name;</span><br><span class="line">private String num;</span><br><span class="line">private String sex;</span><br><span class="line">public int age;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">	return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">	this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">public String getNum() &#123;</span><br><span class="line">	return num;</span><br><span class="line">&#125;</span><br><span class="line">public void setNum(String num) &#123;</span><br><span class="line">	this.num = num;</span><br><span class="line">&#125;</span><br><span class="line">public String getSex() &#123;</span><br><span class="line">	return sex;</span><br><span class="line">&#125;</span><br><span class="line">public void setSex(String sex) &#123;</span><br><span class="line">	this.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">public int getAge() &#123;</span><br><span class="line">	return age;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">	this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">public student() &#123;</span><br><span class="line">	super();</span><br><span class="line">	// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public student( int x , String name) &#123;</span><br><span class="line">	this.age = x;</span><br><span class="line">	this.name = name;</span><br><span class="line">	// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">clzz1.getMethods() // 获取里面所有可以访问的方法</span><br><span class="line">clzz1.getMethod(name, parameterTypes) // 获取特定的可以访问的方法</span><br><span class="line">clzz1.getDeclaredMethod(name, parameterTypes); // 查找特定参数的自己定义的方法</span><br><span class="line">clzz1.getDeclaredMethods(); // 查询所有自己定义的方法</span><br><span class="line">Method m = clzz1.getDeclaredMethod(name, parameterTypes);</span><br><span class="line">Object r = m.invoke(obj, args); // 执行前面一个参数里的方法m方法 ， 后面的一个是这个方法的参数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Field f1 =	clzz1.getField(&quot;name&quot;); // 获取单独的与里面字符串匹配的变量 ， 如果是私有的要用declaer方法，比如</span><br><span class="line"> Field f2 = clzz1.getDeclaredField(&quot;name&quot;); // 可以获取私有的变量</span><br><span class="line"> f1.setAccessible(true); // 修改访问权限修饰符，true代表public false代表private</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>下面只是个普通的方法</li>
<li>这是两个class，要注意，因为都是public，所以必须单独建立两个class，才可以</li>
</ul>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ul>
<li><p>用@interface</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line">@Target (value = &#123;ElementType.CONSTRUCTOR,ElementType.FIELD,ElementType.METHOD,ElementType.TYPE&#125;) // target是代表要修饰的目标种类，比如方法，构造器，属性等</span><br><span class="line">@Retention(value = RetentionPolicy.SOURCE) // 代表这个存活的位置，一般我们用不到，这个是存活于源码里，编译之后就无了</span><br><span class="line">@Retention(value = RetentionPolicy.CLASS) // 这个是存活与class中</span><br><span class="line">@Retention(value = RetentionPolicy.RUNTIME) // 这个是存活在运行时</span><br><span class="line">public @interface lesson14 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>上面的@Retention只能用一个，而且只能选择一个</p>
</li>
<li><p>而后再有一个类</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line">@lesson14</span><br><span class="line">public class try1 &#123;</span><br><span class="line">	@lesson14</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-generated method stub</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>上面是一般用法。</li>
<li>如果在接口上面增加@Target，就是代表让你可以修饰的东西</li>
<li>@Retention 代表设置其存活的地方</li>
</ul>
<h2 id="value"><a href="#value" class="headerlink" title="value"></a>value</h2><p>可以在接口内写value，如果加上了value则在引用的时候要在括号内写上内容<br>如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public @interface lesson14 &#123;</span><br><span class="line">String value()</span><br><span class="line">default &quot;默认信息&quot;; // 代表默认值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@lesson14(&quot;klsdajhal&quot;)</span><br><span class="line">或者@lesson14(value = &quot;sadajd&quot;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>java里的日期和Object的一些方法</title>
    <url>/2022/10/18/%E6%97%A5%E6%9C%9F%E5%92%8C%E5%9B%BD%E9%99%85%E5%8C%96/</url>
    <content><![CDATA[<h1 id="Java-util-Date"><a href="#Java-util-Date" class="headerlink" title="Java.util.Date"></a>Java.util.Date</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Date d = new Date();</span><br><span class="line">System.out.Println(d);</span><br></pre></td></tr></table></figure>
<p>一般这样直接打印出，是中国国际化标准化时间<br>但是一般除了getTime别的都过时了，保不准会在什么时候就舍弃</p>
<h2 id="getmonth"><a href="#getmonth" class="headerlink" title="getmonth"></a>getmonth</h2><p>他是用农历算的，范围是0-11</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d.getMonth();</span><br></pre></td></tr></table></figure>
<h2 id="getYear"><a href="#getYear" class="headerlink" title="getYear"></a>getYear</h2><p>获取从1900年到现在的年数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d.getYear();</span><br></pre></td></tr></table></figure>
<h2 id="getDate"><a href="#getDate" class="headerlink" title="getDate"></a>getDate</h2><p>获取到现在的日期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d.getDate();</span><br></pre></td></tr></table></figure>
<h2 id="getHours"><a href="#getHours" class="headerlink" title="getHours"></a>getHours</h2><p>获取现在的小时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d.getHours();</span><br></pre></td></tr></table></figure>
<h2 id="getMinutes"><a href="#getMinutes" class="headerlink" title="getMinutes"></a>getMinutes</h2><p>获取现在的分钟数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d.getMinutes();</span><br></pre></td></tr></table></figure>
<h2 id="getSeconds"><a href="#getSeconds" class="headerlink" title="getSeconds"></a>getSeconds</h2><p>获取当前的秒数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d.getSeconds();</span><br></pre></td></tr></table></figure>
<h2 id="getDays"><a href="#getDays" class="headerlink" title="getDays"></a>getDays</h2><p>获取当前日期范围是0-6，周一到周六</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d.getDay();</span><br></pre></td></tr></table></figure>
<h2 id="getTime"><a href="#getTime" class="headerlink" title="getTime"></a>getTime</h2><p>获取从1970年到现在时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d.getTime();</span><br></pre></td></tr></table></figure>
<h2 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo"></a>compareTo</h2><p>自动排序：正数是大于 ， 0是相等 ， -1 是小于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d.compareTo(d);</span><br></pre></td></tr></table></figure>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Deprecated</span><br><span class="line"> 代表过时的，会让方法上面画上横线</span><br></pre></td></tr></table></figure>
<h1 id="java-sql-Date"><a href="#java-sql-Date" class="headerlink" title="java.sql.Date"></a>java.sql.Date</h1><h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.sql.Date d = new java.sql.Date(date.getTime);</span><br><span class="line">// 获取时间,包含天月的</span><br></pre></td></tr></table></figure>
<h2 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.sql.Time d  = new java.sql.Time(date.getTime);</span><br><span class="line">// 获取时间</span><br></pre></td></tr></table></figure>

<h2 id="Timestamp"><a href="#Timestamp" class="headerlink" title="Timestamp"></a>Timestamp</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.sql.Timestamp d = new java.sql.Timestamp(date.getTime);</span><br><span class="line">// 获取精确到毫秒数的时间</span><br></pre></td></tr></table></figure>

<h1 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat s = new SimpleDateFormat(&quot;yyyy-MM-dd:mm:ss.SSS&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="format日期变字符串"><a href="#format日期变字符串" class="headerlink" title="format日期变字符串"></a>format日期变字符串</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String string s.format(date);</span><br></pre></td></tr></table></figure>

<h2 id="字符串变日期"><a href="#字符串变日期" class="headerlink" title="字符串变日期"></a>字符串变日期</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s.parse(&quot;2000-11-12 13:14:15.000&quot;);</span><br><span class="line">// 但是这个可能会有错误，所以，我们需要用try catch包住他</span><br></pre></td></tr></table></figure>
<h1 id="Ccalender"><a href="#Ccalender" class="headerlink" title="Ccalender"></a>Ccalender</h1><p>用静态方法实例化，new 不了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Calendar c = Calendar.getLnstance();</span><br></pre></td></tr></table></figure>
<h2 id="set设置"><a href="#set设置" class="headerlink" title="set设置"></a>set设置</h2><p>set和get基本相同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c1.set(Calendar.MONTH ， xxx)；</span><br><span class="line">c1.set(Calendar.HOURS , xxx);等</span><br><span class="line">// 这里xxx代表一个int型的数字，会自动进位，如果xxx超过11则会自动进位，对其他的小时，秒数也同样是适用</span><br></pre></td></tr></table></figure>

<h2 id="get获取"><a href="#get获取" class="headerlink" title="get获取"></a>get获取</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c.get(Calendar.MONTH);</span><br><span class="line">c.get(Calendar.DATE);</span><br><span class="line">等,要通过一系列常量来控制他</span><br></pre></td></tr></table></figure>
<h2 id="add计算"><a href="#add计算" class="headerlink" title="add计算"></a>add计算</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c.add(Calendar.MONTH , 1);</span><br><span class="line">// 单纯是加到其中前一个变量上，可以进位。还有其他的方法，比如huors等</span><br></pre></td></tr></table></figure>
<h2 id="getTime-1"><a href="#getTime-1" class="headerlink" title="getTime"></a>getTime</h2><p>转换成Date型，然后就可以用SimpleDateFormat了</p>
<h1 id="Localdate"><a href="#Localdate" class="headerlink" title="Localdate"></a>Localdate</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LocalDate l = LocalDate.now(); // 获取当前日期</span><br></pre></td></tr></table></figure>
<ul>
<li><p>最大支持999999999-12-31</p>
</li>
<li><p>最小支持-999999999-01-01</p>
</li>
</ul>
<h2 id="adjiustInto"><a href="#adjiustInto" class="headerlink" title="adjiustInto"></a>adjiustInto</h2><p>调整指定的时间对象与此对象时间相同</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.adjustInto(l)</span><br></pre></td></tr></table></figure>
<h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><p>检查这个日期是不是等于另外一个日期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.equals(d)</span><br></pre></td></tr></table></figure>
<h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><p>使用指定格式格式化日期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.format(null);</span><br></pre></td></tr></table></figure>

<h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h2 id="getDayofMonth"><a href="#getDayofMonth" class="headerlink" title="getDayofMonth"></a>getDayofMonth</h2><p>获取月份字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.getDayofMonth();</span><br></pre></td></tr></table></figure>

<h2 id="getDayofWeek"><a href="#getDayofWeek" class="headerlink" title="getDayofWeek"></a>getDayofWeek</h2><p>同上只是获取星期几，这个是个枚举</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.getDayOfWeek();</span><br></pre></td></tr></table></figure>
<h2 id="getDayofYear"><a href="#getDayofYear" class="headerlink" title="getDayofYear"></a>getDayofYear</h2><p>同上只是获取日期字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.getDayofYear();</span><br></pre></td></tr></table></figure>
<h2 id="getChronology"><a href="#getChronology" class="headerlink" title="getChronology"></a>getChronology</h2><p>获取ios的日历系统的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.getChronology();</span><br></pre></td></tr></table></figure>
<h2 id="hashcode"><a href="#hashcode" class="headerlink" title="hashcode"></a>hashcode</h2><p>返回这个日期的哈希码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.hashcode();</span><br></pre></td></tr></table></figure>
<h2 id="isAfter"><a href="#isAfter" class="headerlink" title="isAfter"></a>isAfter</h2><p>检查日期是不是在这个日期之后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.isAfter(l);</span><br></pre></td></tr></table></figure>
<h2 id="isBefore"><a href="#isBefore" class="headerlink" title="isBefore"></a>isBefore</h2><p>同上</p>
<h2 id="isEqual"><a href="#isEqual" class="headerlink" title="isEqual"></a>isEqual</h2><p>检查这个日期是不是等于指定日期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.isEqual(l);</span><br></pre></td></tr></table></figure>
<h2 id="isLeapYear"><a href="#isLeapYear" class="headerlink" title="isLeapYear"></a>isLeapYear</h2><p>根据ios日历，检查是不是闰年</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.isLeapYear();</span><br></pre></td></tr></table></figure>

<h2 id="now"><a href="#now" class="headerlink" title="now"></a>now</h2><p>获取当前的时间<br>初始化方法</p>
<h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><p>同上面的parse</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.parse(null);</span><br></pre></td></tr></table></figure>
<h2 id="plus"><a href="#plus" class="headerlink" title="plus"></a>plus</h2><p>返回此日期的副本，并添加指定的金额。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.plus(null);</span><br></pre></td></tr></table></figure>
<h2 id="plusDays"><a href="#plusDays" class="headerlink" title="plusDays"></a>plusDays</h2><p>返回指定天数的副本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.plusDays(0);</span><br></pre></td></tr></table></figure>
<h2 id="plusMonths"><a href="#plusMonths" class="headerlink" title="plusMonths"></a>plusMonths</h2><p>返回这个LocalDate的副本，其指定的时间段以月为单位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.plusMonths(0);</span><br></pre></td></tr></table></figure>
<h2 id="plusweeks"><a href="#plusweeks" class="headerlink" title="plusweeks"></a>plusweeks</h2><p>返回这个LocalDate的副本并以指定周期添加周数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.plusWeeks(0);</span><br></pre></td></tr></table></figure>
<h2 id="plusYears"><a href="#plusYears" class="headerlink" title="plusYears"></a>plusYears</h2><p>返回这个LocalDate的副本其中指定的时间段以添加的年数访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.plusYears(0);</span><br></pre></td></tr></table></figure>
<h2 id="query"><a href="#query" class="headerlink" title="query"></a>query</h2><p>返回指定的查询查询日期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.query(null);</span><br></pre></td></tr></table></figure>
<h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>返回此日期的调整的副本</p>
<ul>
<li>其和上面一样有对单独地方调整的函数，比如日期月份等<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.with(l);</span><br><span class="line">		l.withDayOfMonth(0);</span><br><span class="line">		l.withDayOfYear(0);</span><br><span class="line">		l.withMonth(0);</span><br><span class="line">		l.withYear(0);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>将日期转换为字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">l.toString();</span><br></pre></td></tr></table></figure>
<h1 id="方法的综合应用"><a href="#方法的综合应用" class="headerlink" title="方法的综合应用"></a>方法的综合应用</h1><h2 id="计算每个月的天数通过Calendar运行"><a href="#计算每个月的天数通过Calendar运行" class="headerlink" title="计算每个月的天数通过Calendar运行"></a>计算每个月的天数通过Calendar运行</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C1.add(Calendar.MONTH, 1);</span><br><span class="line">C1.add(Calendar.DAY_OF_MONTH, -(当前天数));</span><br><span class="line">System.out.println(C1.getTime());</span><br></pre></td></tr></table></figure>
<h2 id="LocalDateTime的实际应用"><a href="#LocalDateTime的实际应用" class="headerlink" title="LocalDateTime的实际应用"></a>LocalDateTime的实际应用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalField;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain4</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//		LocalTime</span></span><br><span class="line"><span class="comment">//		LocalDate</span></span><br><span class="line">		<span class="type">LocalDateTime</span> <span class="variable">ldtDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">		System.out.println(ldtDateTime);</span><br><span class="line">		System.out.println(ldtDateTime.getDayOfWeek().getValue()); <span class="comment">// 2</span></span><br><span class="line">		System.out.println(ldtDateTime.getMonth()); <span class="comment">// 10不会走 国外的历法</span></span><br><span class="line">		System.out.println(ldtDateTime.getMonthValue()); </span><br><span class="line">		</span><br><span class="line">		<span class="type">LocalDateTime</span> <span class="variable">ldtDateTime2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2022</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>);</span><br><span class="line">		System.out.println(ldtDateTime2);</span><br><span class="line">		</span><br><span class="line">		<span class="type">DateTimeFormatter</span> <span class="variable">dFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> dFormatter.format(ldtDateTime);</span><br><span class="line">		System.out.println(string);</span><br><span class="line">		</span><br><span class="line">		<span class="type">LocalDateTime</span> <span class="variable">ldtDateTime3</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2022-10-18 15:21:30&quot;</span>, dFormatter);</span><br><span class="line">		System.out.println(ldtDateTime3);</span><br><span class="line">		</span><br><span class="line">		<span class="type">LocalDateTime</span> <span class="variable">ldtDateTime4</span> <span class="operator">=</span> LocalDateTime.from(dFormatter.parse(<span class="string">&quot;2022-10-18 15:21:30&quot;</span>));</span><br><span class="line">		System.out.println(ldtDateTime4);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h2 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h2><p>获取反射</p>
<h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><p>获取hash值，约等于地址</p>
<h2 id="equals-1"><a href="#equals-1" class="headerlink" title="equals"></a>equals</h2><ul>
<li>比较对象的值</li>
<li>&#x3D;&#x3D;对比的是地址</li>
</ul>
<h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>暂时不让用，意义是克隆属性,但是对于引用类型直接克隆是克隆地址，就会造成改一个进而全部都改变，但是有办法，可以进行深克隆进而解决</p>
<ul>
<li>浅克隆：就是只用一次克隆</li>
<li>深克隆：通过多次克隆进而使每个被克隆出来的个体都有不同地址的相同引用类型</li>
</ul>
<h3 id="使用克隆的方法"><a href="#使用克隆的方法" class="headerlink" title="使用克隆的方法"></a>使用克隆的方法</h3><ul>
<li><p>Cloneable:  标记型接口，先实现标记性接口 。 JDK就2个标记接口Serializable和Cloneable</p>
<ul>
<li><ol>
<li>覆盖Object的clone方法;</li>
<li>实现标记Cloneable;</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h2><p>finalize代表GC回调，就是让垃圾回收不要回收他，但是一般不让用，因为会容易造成卡死，或者因为有关联关系的对象而无法进行进行回收</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java</span><br><span class="line">  package lesson12;</span><br><span class="line">  </span><br><span class="line">  public class TestMain6 &#123;</span><br><span class="line">  </span><br><span class="line">  	public static void main(String[] args) &#123;</span><br><span class="line">  		Student student = new Student(&quot;jerry&quot;, 2);</span><br><span class="line">  		abc();</span><br><span class="line">  		student = null;</span><br><span class="line">  		System.out.println(111);</span><br><span class="line">  		</span><br><span class="line">  		// 通知jvm在适当时候进行GC</span><br><span class="line">  		System.gc();</span><br><span class="line">  		System.out.println(222);</span><br><span class="line">  		for (;;) &#123;</span><br><span class="line">  			</span><br><span class="line">  		&#125;</span><br><span class="line">  		</span><br><span class="line">  	&#125;</span><br><span class="line">  </span><br><span class="line">  	private static void abc() &#123;</span><br><span class="line">  		// TODO Auto-generated method stub</span><br><span class="line">  		Student student = new Student(&quot;tom&quot;, 1);</span><br><span class="line">  	&#125;</span><br><span class="line">  	</span><br><span class="line">  &#125;</span><br><span class="line">  Student &#123;</span><br><span class="line">  	@Override</span><br><span class="line">  	protected void finalize() throws Throwable &#123;</span><br><span class="line">  		System.out.println(this + &quot;被回收了&quot;);</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="static-代码块和非static代码块"><a href="#static-代码块和非static代码块" class="headerlink" title="static 代码块和非static代码块"></a>static 代码块和非static代码块</h1><ul>
<li><p>static 静态代码块。  运行时记载类，只调用一次。</p>
<ul>
<li>一次性的操作。例如： 加载资源，加载驱动。</li>
</ul>
</li>
<li><p>非静态代码块，       每次实例化都会调用</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain7</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是静态代码块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是非静态代码块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">TestMain7</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestMain7</span>();</span><br><span class="line">		<span class="type">TestMain7</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestMain7</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>数字及big类</title>
    <url>/2022/10/17/%E6%95%B0%E5%AD%97%E7%B1%BB%E4%BB%A5%E5%8F%8Abig%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="关于数学包里常用的几个类"><a href="#关于数学包里常用的几个类" class="headerlink" title="关于数学包里常用的几个类"></a>关于数学包里常用的几个类</h1><h2 id="abs"><a href="#abs" class="headerlink" title="abs"></a>abs</h2><p>abs是取绝对值</p>
<h2 id="cell"><a href="#cell" class="headerlink" title="cell"></a>cell</h2><p>向上（正方向）取整</p>
<h2 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h2><p>向下（负方向）取整</p>
<h2 id="round"><a href="#round" class="headerlink" title="round"></a>round</h2><p> 四舍五入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> // 简单的例子 ，5舍6入</span><br><span class="line">可以通过floor进行</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h1><p>BigInteger类型的数字范围较Integer，Long类型的数字范围要大得多，它支持任意精度的整数，也就是说在运算中 BigInteger 类型可以准确地表示任何大小的整数值而不会丢失任何信息。</p>
<h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">//1.加</span><br><span class="line">BigInteger bigNum1 = a.add(b);			//17</span><br><span class="line">//2.减</span><br><span class="line">BigInteger bigNum2 = a.subtract(b);		//9</span><br><span class="line">//3.乘</span><br><span class="line">BigInteger bigNum3 = a.multiply(b);		//52</span><br><span class="line">//4.除</span><br><span class="line">BigInteger bigNum4 = a.divide(b);		//3</span><br><span class="line">//5.取模(需 b &gt; 0，否则出现异常：ArithmeticException(&quot;BigInteger: modulus not positive&quot;))</span><br><span class="line">BigInteger bigNum5 = a.mod(b);			//1</span><br><span class="line">//6.求余</span><br><span class="line">BigInteger bigNum6 = a.remainder(b);	//1</span><br><span class="line">//7.平方(需 n &gt;= 0，否则出现异常：ArithmeticException(&quot;Negative exponent&quot;))</span><br><span class="line">BigInteger bigNum7 = a.pow(n);			//2197</span><br><span class="line">//8.取绝对值</span><br><span class="line">BigInteger bigNum8 = a.abs();			//13</span><br><span class="line">//9.取相反数</span><br><span class="line">BigInteger bigNum9 = a.negate();		//-13</span><br></pre></td></tr></table></figure>

<h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//读入方法：nextBigInteger()</span><br><span class="line">@Test</span><br><span class="line">public void test5() &#123;</span><br><span class="line">	Scanner scan = new Scanner(System.in);				// 读入</span><br><span class="line">	int n = scan.nextInt(); 							// 读入一个int;</span><br><span class="line">	BigInteger m = scan.nextBigInteger();				// 读入一个BigInteger;</span><br><span class="line">	while(scan.hasNext())&#123;	</span><br><span class="line">		System.out.print(&quot;scan.hasNext()=&quot; + scan.hasNext());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中除了这个还有big浮点型，用法和上面一样</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
  </entry>
  <entry>
    <title>java面试题</title>
    <url>/2022/10/15/java%E4%B8%AD%E7%9A%84%E6%98%93%E9%94%99%E7%82%B9/</url>
    <content><![CDATA[<h1 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h1><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>重载发生在同一个类里，方法名必须相同，参数类型不同，个数不同，顺序不同，方法的返回值和访问修饰符可以不同，发生在编译时</p>
<h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>发生在父类和子类中，方法名，参数列表相同，返回值范围小于等于父类，<br>抛出异常小于等于父类，访问修饰符大于等于父类，若父类的方法是private则不能重写</p>
<h1 id="List和Set的区别"><a href="#List和Set的区别" class="headerlink" title="List和Set的区别"></a>List和Set的区别</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>list是有序的，按照插入对象的顺序进行访问的，可重复，，可以有多个null元素，可以用iterator取出所有元素，在逐一遍历还可以用get（index）获取指定元素</p>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>set是无序的，不可重复，，最多有一个null对象取元素的时候只能用iterator接口取出所有元素，再逐一遍历</p>
<h1 id="谈谈Concurrent-Hash-Map的扩容机制"><a href="#谈谈Concurrent-Hash-Map的扩容机制" class="headerlink" title="谈谈Concurrent Hash Map的扩容机制"></a>谈谈Concurrent Hash Map的扩容机制</h1><h2 id="1-7jdk"><a href="#1-7jdk" class="headerlink" title="1.7jdk"></a>1.7jdk</h2><ul>
<li><p>1.ConcurrentHashMap是基于Segment来实现的</p>
</li>
<li><p>2.每个Segment相当于是一个小型的HashMap</p>
</li>
<li><p>3.每个Segment内部都会进行扩容，和HashMap的扩容逻辑相同</p>
</li>
<li><p>4.先生成一个新的数组，然后转移元素到新数组中</p>
</li>
<li><p>5.扩容的判断也是每个Segment单独进行判断的</p>
</li>
</ul>
<h2 id="1-8jdk"><a href="#1-8jdk" class="headerlink" title="1.8jdk"></a>1.8jdk</h2><ul>
<li><p>1.到了1.8 就不基于Segment了</p>
</li>
<li><p>2.当某个线程进行put的时，如果发现有扩容的，就会优先跟着一起进行扩容，</p>
</li>
<li><p>3.如果发现没有进行扩容的，就会把key-value添加到ConcurrentHashMap中然后判断超过阈值了吗超过了则进行扩容</p>
</li>
<li><p>4.ConcurrentHashMap是支持多线程同时扩容的</p>
</li>
<li><p>5.扩容之前也先生成一个新数组</p>
</li>
<li><p>6.转移元素之前先将元素分组，将每组分给不同的线程来进行元素的转移，每个线程负责一组或者多组的元素转移工作</p>
</li>
</ul>
<h1 id="jdk1-7到1-8HashMap发生了什么变化"><a href="#jdk1-7到1-8HashMap发生了什么变化" class="headerlink" title="jdk1.7到1.8HashMap发生了什么变化"></a>jdk1.7到1.8HashMap发生了什么变化</h1><h2 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a>1.7</h2><p>其底层是数组加链表<br>使用的是头插法<br>哈希算法比较复杂</p>
<h2 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h2><p>其底层是数组+链表和红黑树加入红黑树的目的是加快查找效率<br>其用的是尾插法，要先遍历数组的每个元素，判断数组中的元素个数<br>哈希算法进行了优化，节省cpu资源</p>
<h1 id="接口可以多继承接口"><a href="#接口可以多继承接口" class="headerlink" title="接口可以多继承接口"></a>接口可以多继承接口</h1><h1 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h1><p>浅拷贝是指只会拷贝基础类型的值<br>浅拷贝是指拷贝的地址指向同一目标</p>
<h1 id="CopyOnwriteArrayList底层"><a href="#CopyOnwriteArrayList底层" class="headerlink" title="CopyOnwriteArrayList底层"></a>CopyOnwriteArrayList底层</h1><ul>
<li><p>1.首先其内部也是通过数组实现的，在向其中加元素的时候时，会复制一个新数组 ， 并在新数组上进行进行写操作 ， 读操作在原数组上进行</p>
</li>
<li><p>2.并且写操作会加锁，防止出现写入数据丢失的问题</p>
</li>
<li><p>3.写操作结束之后会把原数组指向新数组</p>
</li>
<li><p>4.CopyOnWriteArrayList允许在写数据的同时进行读数据，大大提高了效率因此适合读多写少的场景，但其比较占内存，因此读到的数据并不是最新的，因此适用与实时性不强的地方</p>
</li>
</ul>
<h1 id="什么是字节码-字节码的好处"><a href="#什么是字节码-字节码的好处" class="headerlink" title="什么是字节码 字节码的好处"></a>什么是字节码 字节码的好处</h1><p>编译器Javac会将java源文件编译为.class可以做到一次编译到此处运行，例如，windows上编译好的.class可以在linux上运行。</p>
<h2 id="采用字节码的好处"><a href="#采用字节码的好处" class="headerlink" title="采用字节码的好处"></a>采用字节码的好处</h2><p>一方面实现了跨平台，另外一方面提高了代码的执行效率，让编译器可以在编译时进行优化</p>
<h1 id="在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常"><a href="#在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常" class="headerlink" title="在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常"></a>在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常</h1><p>异常相当于一种提示 ， 若我们抛出异常，就相当于告诉上层方法，我抛出了一个异常，我处理不了这个异常给你来处理，如果上层也处理不了，就继续往上抛，或者捕获</p>
<h1 id="java中异常体系是怎么样的"><a href="#java中异常体系是怎么样的" class="headerlink" title="java中异常体系是怎么样的"></a>java中异常体系是怎么样的</h1><p>java中所有异常都来自于顶级父类 Throwable<br>Throwable下有两个子类Exceptio 和 erro<br>error属于重大错误：包括但不限于 虚拟机，磁盘，操作系统层面的问题<br>Exception属于普通编译器报错，其还分为运行时异常和编译时异常</p>
<h1 id="包装类型传参数的时候按照基本类型算，只传值，不传地址"><a href="#包装类型传参数的时候按照基本类型算，只传值，不传地址" class="headerlink" title="包装类型传参数的时候按照基本类型算，只传值，不传地址"></a>包装类型传参数的时候按照基本类型算，只传值，不传地址</h1><h1 id="java中的类加载机制"><a href="#java中的类加载机制" class="headerlink" title="java中的类加载机制"></a>java中的类加载机制</h1><p>jdk中自带了三个类加载器：</p>
<h2 id="BootStrap-ClassLoader"><a href="#BootStrap-ClassLoader" class="headerlink" title="BootStrap ClassLoader"></a>BootStrap ClassLoader</h2><p>BootStrap是Ext的父类加载器默认负责加载%JAVA_HOME%lib下面的lib和class</p>
<h2 id="Ext-ClassLoader"><a href="#Ext-ClassLoader" class="headerlink" title="Ext ClassLoader"></a>Ext ClassLoader</h2><p>Ext ClassLoader是AppClassLoader的父类，默认加载%JAVA_HOME%&#x2F;lib&#x2F;ext文件夹下的jar包和class</p>
<h2 id="AppClassLoader"><a href="#AppClassLoader" class="headerlink" title="AppClassLoader"></a>AppClassLoader</h2><p>AppClassLoader是自定义器的加载器的父类，负责加载classpath下的</p>
<h1 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h1><p>简单来说就是当问题从最下面的类加载器进入的时候会先让最上面的类加载器加载，然后逐级往下，最后才是自己定义的类加载器</p>
<h1 id="排查JVM问题"><a href="#排查JVM问题" class="headerlink" title="排查JVM问题"></a>排查JVM问题</h1><h2 id="对于还可以正常运行的系统"><a href="#对于还可以正常运行的系统" class="headerlink" title="对于还可以正常运行的系统"></a>对于还可以正常运行的系统</h2><ul>
<li><p>可以使用jmap来查看各个区域的情况</p>
</li>
<li><p>可以通过jstack来查看线程的运行情况，比如xxx线程阻塞；是不是死锁等</p>
</li>
<li><p>可以通过jstat命令查看垃圾回收的情况 ， 特别是fullgc若fullgc比较多就要考虑调优了</p>
</li>
<li><p>通过各个命令的结果，或者jvisualvm等工具进行分析</p>
</li>
<li><p>猜测fullgc多的原因：如果无内存溢出，那么表示fullgc是回收了很多对象，所以这些对象最好能在younggc过程中直接回收，避免进入老年代，对于这些情况就要考虑存活区间是不是比较小，导致年轻代放不下，直接到了老年代，尝试加大年轻代的区间若改完fullgc变小，则猜想正确</p>
</li>
</ul>
<h2 id="对于已发生了OOM的系统"><a href="#对于已发生了OOM的系统" class="headerlink" title="对于已发生了OOM的系统"></a>对于已发生了OOM的系统</h2><ul>
<li>一般生产中都会设置系统发生了OOM时，生成当时的dump文件（-xx:+HeapDumpOnOutOfMemoryError -xx:HHEapDump Path &#x3D; &#x2F;user&#x2F;local&#x2F;base)</li>
<li>我们可以用jsvisualvm等工具进行分析dump</li>
<li>根据dump找到异常实例和线程（占用cpu高），定位到具体代码。</li>
<li>之后再做细致的分析</li>
</ul>
<h1 id="一个对象从加载到jvm到被Gc清楚都经历了什么"><a href="#一个对象从加载到jvm到被Gc清楚都经历了什么" class="headerlink" title="一个对象从加载到jvm到被Gc清楚都经历了什么"></a>一个对象从加载到jvm到被Gc清楚都经历了什么</h1><ul>
<li>先把字节码文件内容加载到方法区</li>
<li>然后再根据类信息在堆区域创建对象</li>
<li>对象首先会分配在堆中年轻代的Eden区经过一次Minorc之后会进入Survivor区，在后续的每次MinorGC中若一直存活，则会在Suvivor区来回拷贝，每拷贝一次每移动一次年龄加1</li>
<li>当年龄过15，若对象仍存活，会进入老年态</li>
<li>若经过fullgc，被标记为垃圾对象，那么会被gc线程清楚</li>
</ul>
<h1 id="jvm有哪些垃圾回收算法"><a href="#jvm有哪些垃圾回收算法" class="headerlink" title="jvm有哪些垃圾回收算法"></a>jvm有哪些垃圾回收算法</h1><h2 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h2><ul>
<li>标记阶段：把垃圾内存标记出来</li>
<li>清除阶段：直接把垃圾内存回收</li>
<li>问题：会产生大量的内存碎片</li>
</ul>
<h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><ul>
<li>为了解决标记清除的内存碎片的问题</li>
<li>将内存分为两份，每次只使用其中一半，垃圾回收时将当前这一块的存活对象完全拷贝到另外一半，而后当前这一半可直接清除，这种无内存碎片，但是浪费空间，且放弃和存活对象的个数相关</li>
</ul>
<h2 id="标记压缩算法"><a href="#标记压缩算法" class="headerlink" title="标记压缩算法"></a>标记压缩算法</h2><ul>
<li>为了解决复制算法的缺陷，就提出了标记压缩算法，这种算法在标记阶段跟标记清除算法是一样的，但是在完成之后不是直接清理，而是将存活的对象往一端移动，而后面将边界以外的所有内存清除</li>
</ul>
<h1 id="什么是STW"><a href="#什么是STW" class="headerlink" title="什么是STW"></a>什么是STW</h1><p>Stw-stop-the-world,是在垃圾回收算法执行过程中要将JVM内存冻结的一种状态，在STW状态下，java的所有线程都是停止执行的——GC除外，native方法可执行；但是不能与jvm交互GC各种算法的优化的重点便是减少STW,是jvm调优的重点</p>
<h1 id="jvm参数"><a href="#jvm参数" class="headerlink" title="jvm参数"></a>jvm参数</h1><ul>
<li>标注指令：开头这个是所有Hotspot都支持的参数，可以用java-help</li>
<li>非标注指令:-x开头；与特定的hotspot对立的用java-x打印</li>
<li>不稳定参数：-xx开头，与上面一样</li>
</ul>
<h1 id="对守护线程的理解"><a href="#对守护线程的理解" class="headerlink" title="对守护线程的理解"></a>对守护线程的理解</h1><p>线程分为 守护线程和用户线程</p>
<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>是jvm的后台线程，比如垃圾回收器，守护线程会在其他线程都停止之后自动关闭，我们可以通过设置thread.setDemon（true）来把一个线程设置成守护线程</p>
<h2 id="普通线程"><a href="#普通线程" class="headerlink" title="普通线程"></a>普通线程</h2><p>普通用户的线程</p>
<h1 id="ThreadLocal的底层原理"><a href="#ThreadLocal的底层原理" class="headerlink" title="ThreadLocal的底层原理"></a>ThreadLocal的底层原理</h1><p>其是java中所提供的线程本地存储机制，可利用该机制将数据存储到一个线程内部，该线程可在任意时刻，任意的方法，获取其存储的数据</p>
<ul>
<li>其底层是通过ThreadLocalMap来实现的，Map的key为ThreadLocal对象，Map的value为需要缓存的值</li>
<li>如果在线程池中使用ThreadLocal会造成内存泄露，因为当ThreadLoccal对象用完之后应该把设置的key value 也就是Entry的对象进行回收，但是线程池的线程不会进行回收，而线程对象是通过强引用指向ThreadLocalMap而ThreadLocalMap也是通过强引用的方法指向Entry的对象，线程也就不会被回收，从而出现内存泄露。</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>在使用了ThreadLocal对象之后，手动调Thread Local的remove方法，手动清除Entry，其经典应用是用在连接管理上</li>
</ul>
<h1 id="并发-并行-穿行的区别"><a href="#并发-并行-穿行的区别" class="headerlink" title="并发,并行,穿行的区别"></a>并发,并行,穿行的区别</h1><ul>
<li>串行：一个任务执行完才可以执行下一个</li>
<li>并发：两个任务看起来是一起执行的，在底层，两个任务被拆成了很多份，从而后一个执行，但是在更高处看，两个任务是一起执行的</li>
<li>并行：两个可以一起执行</li>
</ul>
<h1 id="java死锁如何避免"><a href="#java死锁如何避免" class="headerlink" title="java死锁如何避免"></a>java死锁如何避免</h1><ul>
<li>一个资源每次只被一个线程调用</li>
<li>一个线程在阻塞资源的时候不释放已经占有的资源</li>
<li>一个线程已经获得的资源在使用之前不可被强行剥夺</li>
<li>若干个线程形成头尾相接的循环等待状</li>
</ul>
<h1 id="说一下HashMap的put方法"><a href="#说一下HashMap的put方法" class="headerlink" title="说一下HashMap的put方法"></a>说一下HashMap的put方法</h1><h2 id="大体流程"><a href="#大体流程" class="headerlink" title="大体流程"></a>大体流程</h2><ul>
<li><p>1.根据key通过哈希算法与与运算得出数组的下标</p>
</li>
<li><p>2.如果数组下标的元素为空 ， 则将key和value封装为entry对象（1.7中是Entry ， 1.8里是node对象）并放入该位置</p>
</li>
</ul>
<h2 id="如果数组下标不为空，分情况讨论"><a href="#如果数组下标不为空，分情况讨论" class="headerlink" title="如果数组下标不为空，分情况讨论"></a>如果数组下标不为空，分情况讨论</h2><h3 id="1-7jdk-1"><a href="#1-7jdk-1" class="headerlink" title="1.7jdk"></a>1.7jdk</h3><ul>
<li>要先判断是不是要扩容，如果不扩容就生成Entry对象，并且用头插法添加到当前位置的链表中</li>
</ul>
<h3 id="1-8jdk-1"><a href="#1-8jdk-1" class="headerlink" title="1.8jdk"></a>1.8jdk</h3><ul>
<li>会先判断当前位置上node的类型，看是红黑树node还是链表node</li>
<li>如果是红黑树node，则会将key和value封装为一个红黑树节点并添加到红黑树中去，这个过程中会判断是不是有当前key，如果存在则更新value</li>
<li>如果此位置是node对象是链表节点，则将key和value封装为一个链表node并通过尾插法插到链表最后去，因为是尾插法所以要遍历整个链表，在遍历链表的过程中会判断是不是存在当前的key如果存在就更新key，当遍历完链表后，将新node插入到链表中，插入链表1后会看到当前链表的节点个数，如果大于等于8就会把这个链表转化为红黑树</li>
<li>将key和value封装为node插入到链表或红黑树中再判断是不是需要扩容如果需要就扩容，不需要就结束put方法</li>
</ul>
<h1 id="线程池的底层工作原理"><a href="#线程池的底层工作原理" class="headerlink" title="线程池的底层工作原理"></a>线程池的底层工作原理</h1><ul>
<li>线程池内部是通过队列＋线程实现的，当我们用线程池执行任务的时候</li>
<li>如果此时线程池中的线程数量小于CorePoolSize，即使线程池中都处于空闲状态，也同样要创建新的线程来处理被添加的任务</li>
<li>如果此时线程池中的线程数量等于CorePoolSize, 但是缓存队列workQueue未满，且线程池中的数量小于maximumPoolsize</li>
</ul>
<h1 id="线程池为什么是先添加队列而不是先创建最大线程"><a href="#线程池为什么是先添加队列而不是先创建最大线程" class="headerlink" title="线程池为什么是先添加队列而不是先创建最大线程"></a>线程池为什么是先添加队列而不是先创建最大线程</h1><p>当线程池中的核心线程在忙时如果继续往线程池中添加任务，那么任务还会放入队列，队列满了之后，才会开始新的线程，这就相当于，一个公司本来有10个程序员，本来这10个程序员能正常处理各种需求，但是随着公司的发展，需求在慢慢增加，但是一开始这些需求只会增加在待开发列表中，然后这10个程序员加班加点的从待开发列表中获取需求并进行处理，但是某一天待开发列表满了，所以员工处理不过来了，所以就开始招募新员工了。</p>
<h1 id="ReentrantLock中的公平锁和非公平锁的底层实现"><a href="#ReentrantLock中的公平锁和非公平锁的底层实现" class="headerlink" title="ReentrantLock中的公平锁和非公平锁的底层实现"></a>ReentrantLock中的公平锁和非公平锁的底层实现</h1><p>首先不管是公平锁还是非公平锁他们的底层都是通过AQS来实现排队的，他们的区别在于：线程使用lock（）方法加锁的时候，如果是公平锁，会先检查AQS队列中是不是存在线程在排队，如果存在，则当前线程也会进行排队，如果是非公平锁，则不会去检查是不是有线程在排队，而是直接竞争锁，不管是公平锁还是非公平锁，一旦没竞争到锁，就会进行排队，当锁释放的时候都是唤醒最前面的线程，所以非公平锁只是体现在了线程加锁的阶段，而没有体现在线程被唤醒的阶段。</p>
<h1 id="ReentrantLock中tryLock-和lock（）方法的区别"><a href="#ReentrantLock中tryLock-和lock（）方法的区别" class="headerlink" title="ReentrantLock中tryLock()和lock（）方法的区别"></a>ReentrantLock中tryLock()和lock（）方法的区别</h1><ul>
<li>tryLock()表示尝试加锁，可能加到，也可能加不到，该方法不会阻止线程，如果加到锁就返回true，没有加到则返回false</li>
<li>lock（）则表示线程阻塞加锁，线程会阻塞直到加上锁，而且也没有返回值</li>
</ul>
<h1 id="CountDownLatch和Semaphore的区别和底层原理"><a href="#CountDownLatch和Semaphore的区别和底层原理" class="headerlink" title="CountDownLatch和Semaphore的区别和底层原理"></a>CountDownLatch和Semaphore的区别和底层原理</h1><ul>
<li>CountDownLatch表示计数器，可以给CountDownLatch设置一个数字，一个线程调用CountDownLatch的await（）将会被阻塞，其他线程可以调用CountDownlatch的countDown（）方法来对CountDownLacth中的数字减一，当一个数字被减为0之后则会将AQS中排队的线程依次唤醒</li>
<li>Semaphore表示信号量，可以设置许可的个数，表示同时允许最多多少个线程使用该信号量，通过acquire来获取许可，如果没有许可可用则用线程阻塞，并通过ASQ来排队，可以通过release的方法释放许可当某一个线程释放死锁之后会从ASQ的第一个线程开始依次唤醒，直到没有空闲许可</li>
</ul>
<h1 id="Sychronized"><a href="#Sychronized" class="headerlink" title="Sychronized"></a>Sychronized</h1><ul>
<li>偏向锁： 在锁对象的对象头中记录下当前获取到该锁的线程id，该线程下次如果又来获取该锁就可以直接获取到了</li>
<li>轻量级锁：由偏向锁升级而来，当一个线程获取到锁之后，此时这把锁是偏向锁，此时如果由第二个线程来竞争这个锁，偏向锁就会升级为轻量级锁，之所以叫轻量级锁是为了和重量级锁分开，轻量级锁底层是通过自旋来实现的，并不会阻塞线程。</li>
<li>如果自旋次数过多扔无法获取锁，则会升级为重量级锁，重量级锁会导致线程阻塞</li>
<li>自旋锁：自旋锁就是在线程获取锁的过程中，不回去阻塞线程，也就无所谓唤醒线程，阻塞和唤醒这两个步骤都是要操作系统中去实现的，比较耗费时间，自旋锁是线程通过CAS获取预期的一个标记，如果没有获取到，则继续循环获取去过获取到，则表式获取到了锁，这个过程线程一直在运行，相对而言没有使用太多的操作系统资源，比较轻量</li>
</ul>
<h1 id="Sychronized和ReentrantLock的区别"><a href="#Sychronized和ReentrantLock的区别" class="headerlink" title="Sychronized和ReentrantLock的区别"></a>Sychronized和ReentrantLock的区别</h1><ul>
<li>前一个是关键字，后一个是一个类</li>
<li>前一个会自动加锁和释放锁，后面一个需要手动加锁和个释放锁</li>
<li>前一个底层是jvm层面 ， 后面一个底层是api层面</li>
<li>前一个是非公平锁 ， 后面一个是可以选非公平或者公平</li>
<li>前一个锁的是对象所信息保存在对象头中，后面一个是通过代码中int型的state标识符状态</li>
<li>前一个底层有个锁升级的过程</li>
</ul>
<h1 id="谈谈你对AQS的理解，AQS如何实现可重入锁"><a href="#谈谈你对AQS的理解，AQS如何实现可重入锁" class="headerlink" title="谈谈你对AQS的理解，AQS如何实现可重入锁"></a>谈谈你对AQS的理解，AQS如何实现可重入锁</h1><ul>
<li>AQS是一个java线程同步的框架，是jdk中很多锁的工具核心框架</li>
<li>在AQS中，维护了信号量state和一个线程的双向链表队列，其中这个线程队列，就是用来给线程排队的而state就像是个红绿灯，用来控制排队</li>
<li>在不同的场景下，有不同的意义</li>
<li>在可重入锁这个场景下state用来保证加锁的次数，0表示标识无锁，每次加锁，states就加1，释放就减少1</li>
</ul>
<h1 id="谈谈你对IOC的理解"><a href="#谈谈你对IOC的理解" class="headerlink" title="谈谈你对IOC的理解"></a>谈谈你对IOC的理解</h1><ul>
<li>通常我们任务spring有两大特性IoC和AOP</li>
<li>IoC进行了对象的反转，就是对象控制权的转移</li>
</ul>
<h1 id="单例和Bean"><a href="#单例和Bean" class="headerlink" title="单例和Bean"></a>单例和Bean</h1><ul>
<li>单例表示这个类只能实例化一次</li>
<li>而bean并不表示jvm里只存在一个类的Bean</li>
</ul>
<h1 id="Spring的事务传播机制"><a href="#Spring的事务传播机制" class="headerlink" title="Spring的事务传播机制"></a>Spring的事务传播机制</h1><ul>
<li>多个事务方法互相调用的时候，事务是如何在这些方法之间传播的</li>
<li>REQUIRED（默认的传播机制）：如果没有事务，就自己创建一个新的事务，如果存在事务，就加入</li>
<li>SUPPIORTS：当前存在事务，则加入，如果不存在就按照不存在的来</li>
<li>MANDATORY：当前存在事务则加入，不存在则抛出异常</li>
<li>REQUIRES_NEW：创建一个新事务，如果存在这个事务，就挂起他</li>
<li>NOT_SUPPORTED:用非事务的方式执行，如果当前存在事务，则挂起事务</li>
<li>NEVER：不使用事务如果事务存在，则会抛出异常</li>
<li>NESTED：如果当前事务存在，则在嵌套事务中执行要不然就和REQUIRED一样</li>
</ul>
<h1 id="线程和协程的区别"><a href="#线程和协程的区别" class="headerlink" title="线程和协程的区别"></a>线程和协程的区别</h1><ul>
<li>线程与协程的区别： </li>
<li>1：包含关系：一个进程可以有多个协程，一个线程也可以有多个协程 </li>
<li>2：同步：线程进程是同步，协程是异步 </li>
<li>3：协程能保留上一次重入的状态，当程序重新调用时，可以直接进入上一次的调用的位置 </li>
<li>4：资源占用：线程是抢占式，协程是非抢占式，也就是会所在同一时间只能有一个协程运行，相当于单线程 </li>
<li>5：与线程调用关系：协程并不能代替线程，线程是分割的CPU资源，协程是执行的代码，协程并不会直接调用线程，它会调用线程的执行器</li>
</ul>
<h1 id="myysql的索引以及他们的好处和坏处"><a href="#myysql的索引以及他们的好处和坏处" class="headerlink" title="myysql的索引以及他们的好处和坏处"></a>myysql的索引以及他们的好处和坏处</h1><ul>
<li>优点： 1.大大加快数据的检索速度 </li>
<li>2.通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能 </li>
<li>缺点： 1.时间方面：创建索引和维护索引要耗费时间，索引需要动态的维护 </li>
<li>2.空间方面：需要占物理空间</li>
</ul>
<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ul>
<li>现代操作系统中，进程是分配资源的最小单位，运行一个程序，就创建一个进程，一个进程里可以包括多个线程，线程是系统调度的基本单位， 每个线程里都拥有各自的程序计数器，堆栈，局部变量表等属性，并且共享进程里面的资源，处理器在这些线程之间高速切换，使使用者误以为这些线程是同时执行的。 </li>
<li>对于最简单的输出hello world程序，就包括四个线程， main，清除reference的线程，和finalize方法有关的线程，处理jvm信号的线程， </li>
<li>之所以使用多线程是因为多线程有个好处 </li>
<li>1.现代计算机是多核处理器，而一个线程同一时刻只能运行在一个处理器上，对于单线程程序，同一时刻只能使用一个处理器，显然这是一种资源浪费， 而对于多线程程序，可以把计算逻辑分配给不同的处理器，极大的提高的程序的执行效率 </li>
<li>2.可以把复杂的业务逻辑种的对数据一致性要求不强的操作，比如生成订单快照分配给其他的线程去处理（也可以使用消息队列），极大的提高了程序的响应时间 </li>
<li>3.java提供了一个良好的多线程模型，能是开发者专注于业务的开发</li>
</ul>
<h1 id="怎么保证线程安全"><a href="#怎么保证线程安全" class="headerlink" title="怎么保证线程安全"></a>怎么保证线程安全</h1><ul>
<li>Java保证线程安全的方式有很多,其中较为常用的有三种,按照资源占用情况由轻到重排列,这三种保证线程安全的方式分别是原子类、volatile、锁。 </li>
<li>JDK从1.5开始提供了java.util.concurrent.atomic包,这个包中的原子操作类提供了一种用法简单、性能高效、线程安全地更新一个变量的方式。</li>
<li>在atomic包里一共提供了17个类,按功能可以归纳为4种类型的原子更新方式,分别是原子更新基本类型、原子更新引用类型、原子更新属性、原子更新数组。</li>
<li>无论原子更新哪种类型,都要遵循“比较和替换”规则,即比较要更新的值是否等于期望值,如果是则更新,如果不是则失败。 </li>
<li>volatile是轻量级的synchronized,它在多处理器开发中保证了共享变量的“可见性”,从而可以保证单个变量读写时的线程安全。</li>
<li>可见性问题是由处理器核心的缓存导致的,每个核心均有各自的缓存,而这些缓存均要与内存进行同步。</li>
<li>volatile具有如下的内存语义：当写一个volatile变量时,该线程本地内存中的共享变量的值会被立刻刷新到主内存；当读一个volatile变量时,该线程本地内存会被置为无效,迫使线程直接从主内存中读取共享变量。</li>
<li>原子类和volatile只能保证单个共享变量的线程安全,锁则可以保证临界区内的多个共享变量的线程安全,Java中加锁的方式有两种,分别是synchronized关键字和Lock接口。</li>
<li>synchronized是比较早期的API,在设计之初没有考虑到超时机制、非阻塞形式,以及多个条件变量。</li>
<li>若想通过升级的方式让它支持这些相对复杂的功能,则需要大改它的语法结构,不利于兼容旧代码。</li>
<li>因此,JDK的开发团队在1.5新增了Lock接口,并通过Lock支持了上述的功能,即：支持响应中断、支持超时机制、支持以非阻塞的方式获取锁、支持多个条件变量（阻塞队列）。 </li>
<li>加分回答 实现线程安全的方式有很多,除了上述三种方式之外,还有如下几种方式： </li>
<li><ol>
<li>无状态设计 线程安全问题是由多线程并发修改共享变量引起的,如果在并发环境中没有设计共享变量,则自然就不会出现线程安全问题了。这种代码实现可以称作“无状态实现”,所谓状态就是指共享变量。</li>
</ol>
</li>
<li><ol start="2">
<li>不可变设计 如果在并发环境中不得不设计共享变量,则应该优先考虑共享变量是否为只读的,如果是只读场景就可以将共享变量设计为不可变的,这样自然也不会出现线程安全问题了。具体来说,就是在变量前加final修饰符,使其不可被修改,如果变量是引用类型,则将其设计为不可变类型（参考String类）。</li>
</ol>
</li>
<li><ol start="3">
<li>并发工具 java.util.concurrent包提供了几个有用的并发工具类,一样可以保证线程安全：</li>
</ol>
</li>
<li>Semaphore：就是信号量,可以控制同时访问特定资源的线程数量。 </li>
<li>CountDownLatch：允许一个或多个线程等待其他线程完成操作。 </li>
<li>CyclicBarrier：让一组线程到达一个屏障时被阻塞,直到最后一个线程到达屏障时,屏障才会打开,所有被屏障拦截的线程才会继续运行。 </li>
<li><ol start="4">
<li>本地存储 我们也可以考虑使用ThreadLocal存储变量,ThreadLocal可以很方便地为每一个线程单独存一份数据,也就是将需要并发访问的资源复制成多份。这样一来,就可以避免多线程访问共享变量了,它们访问的是自己独占的资源,它从根本上隔离了多个线程之间的数据共享。</li>
</ol>
</li>
</ul>
<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><ul>
<li><ol>
<li>死锁 两个或两个以上的进程在执行过程中,因争夺共享资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁。这些永远在互相等待的进程称为死锁进程。</li>
</ol>
</li>
<li><ol start="2">
<li>产生死锁的必要条件 虽然进程在运行过程中,可能发生死锁,但死锁的发生也必须具备一定的条件,死锁的发生必须具备以下四个必要条件：</li>
</ol>
</li>
<li><ul>
<li>互斥条件：指进程对所分配到的资源进行排它性使用,即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源,则请求者只能等待,直至占有资源的进程用毕释放；</li>
</ul>
</li>
<li><ul>
<li>请求和保持条件：指进程已经保持至少一个资源,但又提出了新的资源请求,而该资源已被其它进程占有,此时请求进程阻塞,但又对自己已获得的其它资源保持不放；</li>
</ul>
</li>
<li><ul>
<li>不剥夺条件：指进程已获得的资源,在未使用完之前,不能被剥夺,只能在使用完时由自己释放；</li>
</ul>
</li>
<li><ul>
<li>环路等待条件：指在发生死锁时,必然存在一个进程——资源的环形链,即进程集合 {P0,P1,P2,···,Pn} 中的 P0 正在等待一个 P1 占用的资源；P1 正在等待 P2 占用的资源,……,Pn 正在等待已被 P0 占用的资源。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Java中的易错点</category>
      </categories>
  </entry>
  <entry>
    <title>java中异常的相关知识</title>
    <url>/2022/10/15/%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="因为一些原因导致开发的程序出现问题"><a href="#因为一些原因导致开发的程序出现问题" class="headerlink" title="因为一些原因导致开发的程序出现问题"></a>因为一些原因导致开发的程序出现问题</h3><p>Throwable是error和Exception的父类，是Java里所有异常的父类<br>##error<br>如果出现了error，则代表计算机出现了重大的错误，比如jvm无法解决的问题等。</p>
<h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p>如果出现了Exception，则代表计算机代码出现了问题，编译或者运行的时候出现了问题。但是Exception还分为运行时异常和编译时异常</p>
<h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p>运行时异常比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ArrayIndexOutOfBoundsException//这就是个数组越界的异常</span><br></pre></td></tr></table></figure>

<p>这些都是运行的时候产生的异常，编译可以通过的，其中最常见的就是数组越界，下表越剧等</p>
<h3 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h3><p>编译时异常比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The final local variable m cannot be assigned. It must be blank and not using a compound assignment //这个就是个简单的final修饰的变量不可被改变的异常</span><br></pre></td></tr></table></figure>

<p>这些是在程序未被运行之前就报出的错误。会被编译器会进行优先的处理。<br>最常见的就是作用域的问题，比如static变量和非static的变量等。</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><p>我们可以通过try catch的方法进行捕获异常，让异常出现的时候不至于停止程序的运行<br>代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try &#123;//放会报错的语句，这个是个简单数组越界</span><br><span class="line">	a[m] = 1;</span><br><span class="line">	System.out.println(&quot;输入正确&quot;);	</span><br><span class="line">	&#125; catch (Exception e) &#123;</span><br><span class="line">	// TODO: handle exception</span><br><span class="line">	// 在错误发生时怎么处理</span><br><span class="line">	System.out.println(&quot;成功抛出异常&quot;);</span><br><span class="line">	&#125; </span><br><span class="line">	catch(xxxxx) &#123;</span><br><span class="line">	&#125;// 这里的catch还可以继续往下写，但是要注意其中异常的类型必须是越在后面类型越大的，因为Exception还分多个子类异常，这样可以更精确的分辨是什么异常，不过直接写Exception也不算错</span><br><span class="line">	finally &#123;</span><br><span class="line">		// finally里放一定会执行的代码，不过不写finally也不算错</span><br><span class="line">		&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是要注意，我们不可以捕获error异常，因为error异常已经超出了代码捕获的范围，我们一般都要进行硬件及软件的处理</p>
<h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p>我们可以通过throws把异常向上抛出，让他们的上层去处理，可是一般上层如果不能处理，还会继续向上抛出，这种方法我简称为逃避，我们，一般使用try catch语句较多，一般是抛到main方法里进行try catch处理，<br>如果异常一直不处理，那编译器最后会报错</p>
]]></content>
      <categories>
        <category>javase</category>
      </categories>
  </entry>
</search>
