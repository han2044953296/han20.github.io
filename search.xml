<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>sparksql</title>
    <url>/2023/01/10/1-10/</url>
    <content><![CDATA[<h1 id="sparksql"><a href="#sparksql" class="headerlink" title="sparksql"></a>sparksql</h1><p>sparksql主要是处理结构化数据的 模块</p>
<p>结构化数据 &#x3D;》 带有schema信息的数据</p>
<p>半结构化数据 &#x3D; 》csv ， json ， orc ， parquet</p>
<p>非结构化数据 &#x3D;》 nosql &#x3D;》 redis , hbase</p>
<p>sparksql &#x3D;&gt; 不仅可以写sql 还可以编程</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>sparksql &#x3D;》 sql + dataframeapi &#x3D;》 处理结构化数据</p>
<p>spark-core里的api这里也通用</p>
<p>有个统一的数据接口 &#x3D;》 处理多种外部数据源 &#x3D;》 mysql&#x2F;hive&#x2F;excel&#x2F;csv&#x2F;….. &#x3D;》统一的api</p>
<p>整合hive &#x3D;》 使用hive非常简单</p>
<p>sparksql 不仅仅是sql</p>
<p>hive on spark &#x3D;》 hive的查询引擎是spark</p>
<p>spark on hive &#x3D;》 sparksql 去hive上查数据 大部分人用这个</p>
<p>sparksql做了性能优化 &#x3D;》 比RDD 高</p>
<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>sparksql比RDD的性能高原因：</p>
<p>sparksql底层跑的还是spark -core的RDD 只不过是做了优化</p>
<p>因为用户开发的schema</p>
<p>saprkcore &#x3D;&gt; 编程模型 RDD</p>
<p>sparksql &#x3D;》 RDD[数据集] + schema[字段 字段类型] &#x3D;》 table</p>
<h2 id="DataSet-amp-DataFrame"><a href="#DataSet-amp-DataFrame" class="headerlink" title="DataSet&amp;DataFrame"></a>DataSet&amp;DataFrame</h2><p>sparksql : 编程模型 &#x3D;》 dataSet&#x2F;dataframe</p>
<h3 id="dataset"><a href="#dataset" class="headerlink" title="dataset"></a>dataset</h3><p>分布式数据集</p>
<p>比RDD多出很多优势 &#x3D;》做了很多优化 &#x3D;》 效率高 &#x3D;》 使用了强类型 &#x3D;》 可以使用算子 &#x3D; 》查询性能高 &#x3D;》 spark1.6之后诞生的</p>
<p>Py不支持dataset的api</p>
<h3 id="dataframe"><a href="#dataframe" class="headerlink" title="dataframe"></a>dataframe</h3><p>dataeframe &#x3D;》 也是一个dataset</p>
<p>dataframe &#x3D;》 普通数据库里的一个table &#x3D;》 可以使用算子 &#x3D;》 dataset的rows</p>
<p>Row&#x3D;》一行数据，仅仅包含列数据</p>
<p>dataframe &#x3D;》table</p>
<h3 id="和spark-core对比"><a href="#和spark-core对比" class="headerlink" title="和spark-core对比"></a>和spark-core对比</h3><p>spare-core  &#x3D;》 rdd</p>
<p>sparksql &#x3D;》 df [RDD数据集 + 额外的信息scheme]</p>
<p>sparksql ：</p>
<ul>
<li>1.0 &#x3D;》schemaRdd ：RDD 存数据 + scheme（类似元数据：存储额外的信息）</li>
<li>1.6 &#x3D; 》dataset &#x3D;》 dataframe 变过来的</li>
</ul>
<h2 id="使用sparksession创建dataframe"><a href="#使用sparksession创建dataframe" class="headerlink" title="使用sparksession创建dataframe"></a>使用sparksession创建dataframe</h2><p>工具 ： idea，linux</p>
<p>引入 ： sparksql依赖</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-mapreduce-client-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;hadoop.version&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$</span><span class="template-variable">&#123;hive.version&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>在linux里启动spark-shell的时候他会给你自动提供好spark-session</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">[hadoop@bigdata5 ~]$ spark-shell --master local[<span class="number">4</span>]</span><br><span class="line">Setting <span class="keyword">default</span> log level to <span class="string">&quot;WARN&quot;</span>.</span><br><span class="line">To adjust logging level use sc.setLogLevel(newLevel). <span class="keyword">For</span> SparkR, use setLogLevel(newLevel).</span><br><span class="line"><span class="number">23</span><span class="regexp">/01/</span><span class="number">10</span> <span class="number">10</span>:<span class="number">11</span>:<span class="number">22</span> WARN NativeCodeLoader: Unable to load <span class="keyword">native</span>-hadoop library <span class="keyword">for</span> your platform... using builtin-java classes where applicable</span><br><span class="line">Spark context Web UI available at http:<span class="comment">//bigdata5:4040</span></span><br><span class="line">Spark context available as <span class="string">&#x27;sc&#x27;</span> (master = local[<span class="number">4</span>], app id = local-<span class="number">1673316684351</span>).</span><br><span class="line">Spark session available as <span class="string">&#x27;spark&#x27;</span>.</span><br><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     <span class="regexp">/ __/</span>__  ___ _____<span class="regexp">/ /</span>__</span><br><span class="line">    _\ \<span class="regexp">/ _ \/ _ `/</span> __<span class="regexp">/  &#x27;_/</span></span><br><span class="line">   <span class="regexp">/___/</span> .__<span class="regexp">/\_,_/</span>_<span class="regexp">/ /</span>_/\_\   version <span class="number">3.3</span>.<span class="number">1</span></span><br><span class="line">      <span class="regexp">/_/</span></span><br><span class="line">   </span><br><span class="line">Using Scala version <span class="number">2.12</span>.<span class="number">15</span> (Java HotSpot(TM) <span class="number">64</span>-Bit Server VM, Java <span class="number">1.8</span>.<span class="number">0</span>_45)</span><br><span class="line">Type in expressions to have them evaluated.</span><br><span class="line">Type :help <span class="keyword">for</span> more information.</span><br><span class="line"></span><br><span class="line">scala&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建df如下</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">scala&gt; val df = spark.read.json(<span class="string">&quot;file:///home/hadoop/data/json/Skills.json&quot;</span>)</span><br><span class="line">df: org.apache.spark.sql.DataFrame = [_corrupt_record: string, animationId: bigint ... 24 more fields]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">23/01/10 10:14:42 WARN package: Truncated the string representation of a plan since it was too large. This behavior can be adjusted by setting &#x27;spark.sql.debug.maxToStringFields&#x27;.</span><br><span class="line">+---------------+-----------+--------------------+-----------------------------------+--------------------+-------+---------+----+----------------+--------+-----------+------+--------+----------------------------------+--------+-------+---------------+----------------+----------------+-----+-----+-------+-----------+------+------+----------+</span><br><span class="line">|<span class="string">_corrupt_record</span>|<span class="string">animationId</span>|<span class="string">              damage</span>|<span class="string">                        description</span>|<span class="string">             effects</span>|<span class="string">hitType</span>|<span class="string">iconIndex</span>|<span class="string">  id</span>|<span class="string">        message1</span>|<span class="string">message2</span>|<span class="string">messageType</span>|<span class="string">mpCost</span>|<span class="string">    name</span>|<span class="string">                              note</span>|<span class="string">occasion</span>|<span class="string">repeats</span>|<span class="string">requiredWtypeId</span>|<span class="string">requiredWtypeId1</span>|<span class="string">requiredWtypeId2</span>|<span class="string">scope</span>|<span class="string">speed</span>|<span class="string">stypeId</span>|<span class="string">successRate</span>|<span class="string">tpCost</span>|<span class="string">tpGain</span>|<span class="string">xianliCost</span>|</span><br><span class="line">+---------------+-----------+--------------------+-----------------------------------+--------------------+-------+---------+----+----------------+--------+-----------+------+--------+----------------------------------+--------+-------+---------------+----------------+----------------+-----+-----+-------+-----------+------+------+----------+</span><br><span class="line">|<span class="string">              [</span>|<span class="string">       null</span>|<span class="string">                null</span>|<span class="string">                               null</span>|<span class="string">                null</span>|<span class="string">   null</span>|<span class="string">     null</span>|<span class="string">null</span>|<span class="string">            null</span>|<span class="string">    null</span>|<span class="string">       null</span>|<span class="string">  null</span>|<span class="string">    null</span>|<span class="string">                              null</span>|<span class="string">    null</span>|<span class="string">   null</span>|<span class="string">           null</span>|<span class="string">            null</span>|<span class="string">            null</span>|<span class="string"> null</span>|<span class="string"> null</span>|<span class="string">   null</span>|<span class="string">       null</span>|<span class="string">  null</span>|<span class="string">  null</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">          null,</span>|<span class="string">       null</span>|<span class="string">                null</span>|<span class="string">                               null</span>|<span class="string">                null</span>|<span class="string">   null</span>|<span class="string">     null</span>|<span class="string">null</span>|<span class="string">            null</span>|<span class="string">    null</span>|<span class="string">       null</span>|<span class="string">  null</span>|<span class="string">    null</span>|<span class="string">                              null</span>|<span class="string">    null</span>|<span class="string">   null</span>|<span class="string">           null</span>|<span class="string">            null</span>|<span class="string">            null</span>|<span class="string"> null</span>|<span class="string"> null</span>|<span class="string">   null</span>|<span class="string">       null</span>|<span class="string">  null</span>|<span class="string">  null</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          1</span>|<span class="string">&#123;true, -1, a.atk ...</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 0, 1.0, 0&#125;]</span>|<span class="string">      1</span>|<span class="string">      880</span>|<span class="string">   1</span>|<span class="string">      %1的攻击！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">    攻击</span>|<span class="string"> 1 号技能会在选择“攻击”指令时使...</span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    1</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">    10</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          0</span>|<span class="string">&#123;false, 0, 0, 0, 20&#125;</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 2, 1.0, 0&#125;]</span>|<span class="string">      0</span>|<span class="string">      688</span>|<span class="string">   2</span>|<span class="string">%1正在保护自己。</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">    防御</span>|<span class="string">1 号技能会在选择“防御”指令时使用。</span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">   11</span>|<span class="string">   10</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">    10</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         -1</span>|<span class="string">&#123;true, -1, a.atk ...</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 0, 1.0, 0&#125;]</span>|<span class="string">      1</span>|<span class="string">      880</span>|<span class="string">   3</span>|<span class="string">      %1的攻击！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">连续攻击</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      2</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    1</span>|<span class="string">    0</span>|<span class="string">      2</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     5</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         -1</span>|<span class="string">&#123;true, -1, a.atk ...</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 0, 1.0, 0&#125;]</span>|<span class="string">      1</span>|<span class="string">      880</span>|<span class="string">   4</span>|<span class="string">      %1的攻击！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">两次攻击</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    4</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     5</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         -1</span>|<span class="string">&#123;true, -1, a.atk ...</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 0, 1.0, 0&#125;]</span>|<span class="string">      1</span>|<span class="string">      849</span>|<span class="string">   5</span>|<span class="string">      %1的攻击！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">三次攻击</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    5</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     4</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          0</span>|<span class="string">&#123;false, 0, 0, 0, 20&#125;</span>|<span class="string">                                   </span>|<span class="string">   [&#123;41, 0, 0.0, 0&#125;]</span>|<span class="string">      0</span>|<span class="string">      883</span>|<span class="string">   6</span>|<span class="string">      %1逃跑了。</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">    逃跑</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">   11</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          0</span>|<span class="string">&#123;false, 0, 0, 0, 20&#125;</span>|<span class="string">                                   </span>|<span class="string">                  []</span>|<span class="string">      0</span>|<span class="string">      979</span>|<span class="string">   7</span>|<span class="string">    %1正在观望。</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">    观望</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    0</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">    10</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         41</span>|<span class="string">&#123;false, 0, 200 + ...</span>|<span class="string">                                   </span>|<span class="string">[&#123;21, 4, 1.0, 0&#125;,...</span>|<span class="string">      0</span>|<span class="string">       72</span>|<span class="string">   8</span>|<span class="string">    %1吟唱了%2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     5</span>|<span class="string">    治愈</span>|<span class="string">                                  </span>|<span class="string">       0</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    1</span>|<span class="string">    0</span>|<span class="string">      1</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">    10</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         66</span>|<span class="string">&#123;false, 2, 100 + ...</span>|<span class="string"> 魔法\n初级的圣光技能,能召唤微弱...</span>|<span class="string">  [&#123;44, 30, 1.0, 0&#125;]</span>|<span class="string">      2</span>|<span class="string">       64</span>|<span class="string">   9</span>|<span class="string">    %1吟唱了%2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     5</span>|<span class="string">    火焰</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    1</span>|<span class="string">    0</span>|<span class="string">      1</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">    10</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          0</span>|<span class="string">&#123;false, 2, 285 + ...</span>|<span class="string">呼吸法\n常见的呼吸法，运转时能够...</span>|<span class="string">  [&#123;21, 21, 1.0, 0&#125;]</span>|<span class="string">      0</span>|<span class="string">     3084</span>|<span class="string">  10</span>|<span class="string">    %1施放了%2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">小吐纳法</span>|<span class="string">              &lt;Cast Animation: ...</span>|<span class="string">       0</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">   11</span>|<span class="string">    0</span>|<span class="string">      4</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">        152</span>|<span class="string">&#123;false, 2, 285 + ...</span>|<span class="string">                                   </span>|<span class="string">[&#123;21, 153, 1.0, 0...</span>|<span class="string">      0</span>|<span class="string">      499</span>|<span class="string">  11</span>|<span class="string">    %1使用了%2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">  灭魂术</span>|<span class="string">              &lt;Cast Animation: 0&gt; </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    2</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         38</span>|<span class="string">&#123;true, 1, 20000, ...</span>|<span class="string"> 基因锁·一阶\n觉醒了脚上的力量，...</span>|<span class="string">  [&#123;21, 72, 0.2, 0&#125;]</span>|<span class="string">      0</span>|<span class="string">      479</span>|<span class="string">  12</span>|<span class="string">   %1使出了 %2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">  骑士踢</span>|<span class="string">              &lt;setup action&gt;\na...</span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    1</span>|<span class="string">    0</span>|<span class="string">      2</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">        125</span>|<span class="string">&#123;true, 0, 150 + a...</span>|<span class="string"> 基因锁·一阶\n觉醒了一种气功，能...</span>|<span class="string">  [&#123;44, 24, 1.0, 0&#125;]</span>|<span class="string">      2</span>|<span class="string">     4471</span>|<span class="string">  13</span>|<span class="string">    %1施放了%2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">    50</span>|<span class="string">    变身</span>|<span class="string">              &lt;Cast Animation: ...</span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">   11</span>|<span class="string">    0</span>|<span class="string">      2</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         23</span>|<span class="string">&#123;true, -1, 426500...</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 0, 1.0, 0&#125;]</span>|<span class="string">      1</span>|<span class="string">      640</span>|<span class="string">  14</span>|<span class="string">      %1的攻击！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">莫名剑法</span>|<span class="string">              &lt;Cast Animation: ...</span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    1</span>|<span class="string">    0</span>|<span class="string">      2</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">    10</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          0</span>|<span class="string">&#123;false, 4, 100 + ...</span>|<span class="string"> 基因锁·破碎\n已经达到身体的极限...</span>|<span class="string">                  []</span>|<span class="string">      0</span>|<span class="string">      943</span>|<span class="string">  15</span>|<span class="string">                </span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">无望三阶</span>|<span class="string">              &lt;Hide in Battle&gt;\...</span>|<span class="string">       3</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    0</span>|<span class="string">    0</span>|<span class="string">      3</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          0</span>|<span class="string">&#123;false, 4, 100 + ...</span>|<span class="string"> 基因锁·破碎\n已经达到身体的极限...</span>|<span class="string">                  []</span>|<span class="string">      0</span>|<span class="string">      943</span>|<span class="string">  16</span>|<span class="string">                </span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">无望四阶</span>|<span class="string">              &lt;Hide in Battle&gt;\...</span>|<span class="string">       3</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    0</span>|<span class="string">    0</span>|<span class="string">      3</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         -1</span>|<span class="string">&#123;true, -1, 10000+...</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 0, 1.0, 0&#125;]</span>|<span class="string">      0</span>|<span class="string">      880</span>|<span class="string">  17</span>|<span class="string">      %1的攻击！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">  骑士拳</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    4</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     5</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">        311</span>|<span class="string">&#123;false, 0, 300, 0...</span>|<span class="string">  基因锁·四阶\n返祖·又北二百八十...</span>|<span class="string">                  []</span>|<span class="string">      0</span>|<span class="string">      484</span>|<span class="string">  18</span>|<span class="string">    %1施放了%2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">孟极血脉</span>|<span class="string">              \n&lt;passiveAPLUS:1...</span>|<span class="string">       3</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    0</span>|<span class="string">    0</span>|<span class="string">      3</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">+---------------+-----------+--------------------+-----------------------------------+--------------------+-------+---------+----+----------------+--------+-----------+------+--------+----------------------------------+--------+-------+---------------+----------------+----------------+-----+-----+-------+-----------+------+------+----------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><figure class="highlight roboconf"><table><tr><td class="code"><pre><span class="line">package sparkfirst</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.SparkSession</span><br><span class="line"></span><br><span class="line">object sparksql &#123;</span><br><span class="line">  <span class="attribute">def main(args</span>: Array[String]): Unit = &#123;</span><br><span class="line">    val spark = SparkSession<span class="variable">.builder</span>()<span class="variable">.appName</span>(&quot;Sparksql01&quot;)<span class="variable">.master</span>(&quot;local[2]&quot;)<span class="variable">.getOrCreate</span>()</span><br><span class="line">    val frame = spark<span class="variable">.read</span><span class="variable">.json</span>(&quot;file:///C:\\Users\\dell\\Desktop\\Skills<span class="variable">.json</span>&quot;)</span><br><span class="line">    frame<span class="variable">.show</span>()</span><br><span class="line">    spark<span class="variable">.stop</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>sparksql进行数据分析</p>
<ul>
<li>sql</li>
<li>代码</li>
</ul>
<p>开发df</p>
<ul>
<li>sql &#x3D;》 idea api + sql 一起使用 或者 hive里的sql文件</li>
<li>api &#x3D; &gt; 一般用于开发大数据平台</li>
</ul>
<h2 id="学习api"><a href="#学习api" class="headerlink" title="学习api"></a>学习api</h2><p>加载dataframe中的一个字段 ： select</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">scala&gt; df.select(<span class="string">&quot;description&quot;</span>).show</span><br><span class="line">+-----------------------------------+</span><br><span class="line">|<span class="string">                        description</span>|</span><br><span class="line">+-----------------------------------+</span><br><span class="line">|<span class="string">                               null</span>|</span><br><span class="line">|<span class="string">                               null</span>|</span><br><span class="line">|<span class="string">                                   </span>|</span><br><span class="line">|<span class="string">                                   </span>|</span><br><span class="line">|<span class="string">                                   </span>|</span><br><span class="line">|<span class="string">                                   </span>|</span><br><span class="line">|<span class="string">                                   </span>|</span><br><span class="line">|<span class="string">                                   </span>|</span><br><span class="line">|<span class="string">                                   </span>|</span><br><span class="line">|<span class="string">                                   </span>|</span><br><span class="line">|<span class="string"> 魔法\n初级的圣光技能,能召唤微弱...</span>|</span><br><span class="line">|<span class="string">呼吸法\n常见的呼吸法，运转时能够...</span>|</span><br><span class="line">|<span class="string">                                   </span>|</span><br><span class="line">|<span class="string"> 基因锁·一阶\n觉醒了脚上的力量，...</span>|</span><br><span class="line">|<span class="string"> 基因锁·一阶\n觉醒了一种气功，能...</span>|</span><br><span class="line">|<span class="string">                                   </span>|</span><br><span class="line">|<span class="string"> 基因锁·破碎\n已经达到身体的极限...</span>|</span><br><span class="line">|<span class="string"> 基因锁·破碎\n已经达到身体的极限...</span>|</span><br><span class="line">|<span class="string">                                   </span>|</span><br><span class="line">|<span class="string">  基因锁·四阶\n返祖·又北二百八十...</span>|</span><br><span class="line">+-----------------------------------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line">----------------------------------------------------------------------------源码</span><br><span class="line"> def select(col: String, cols: String<span class="symbol">*</span>): DataFrame = select((col +: cols).map(Column(_)) : _<span class="symbol">*</span>)</span><br><span class="line"></span><br><span class="line">直接传字段的名字 =》 select（<span class="string">&quot;sdhakdhaj&quot;</span>）或者 select($<span class="string">&quot;niasda&quot;</span>)或者select(&#x27;hsjakd)=&gt; 加上隐式转换import spark.implicits._ 但是在linux里不需要</span><br><span class="line">select(col = <span class="string">&quot;age&quot;</span>) =》 加上import org.apache.spark.sql.functions._ ，linux不用</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>createOrReplaceTempView()：创建临时表 &#x3D;》 就可以用sql来查询了</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">scala&gt; df.createOrReplaceTempView(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; spark.sql(<span class="string">&quot;select * from test&quot;</span>)</span><br><span class="line">res4: org.apache.spark.sql.DataFrame = [_corrupt_record: string, animationId: bigint ... 24 more fields]</span><br><span class="line"></span><br><span class="line">scala&gt; spark.sql(<span class="string">&quot;select * from test&quot;</span>).show()</span><br><span class="line">+---------------+-----------+--------------------+-----------------------------------+--------------------+-------+---------+----+----------------+--------+-----------+------+--------+----------------------------------+--------+-------+---------------+----------------+----------------+-----+-----+-------+-----------+------+------+----------+</span><br><span class="line">|<span class="string">_corrupt_record</span>|<span class="string">animationId</span>|<span class="string">              damage</span>|<span class="string">                        description</span>|<span class="string">             effects</span>|<span class="string">hitType</span>|<span class="string">iconIndex</span>|<span class="string">  id</span>|<span class="string">        message1</span>|<span class="string">message2</span>|<span class="string">messageType</span>|<span class="string">mpCost</span>|<span class="string">    name</span>|<span class="string">                              note</span>|<span class="string">occasion</span>|<span class="string">repeats</span>|<span class="string">requiredWtypeId</span>|<span class="string">requiredWtypeId1</span>|<span class="string">requiredWtypeId2</span>|<span class="string">scope</span>|<span class="string">speed</span>|<span class="string">stypeId</span>|<span class="string">successRate</span>|<span class="string">tpCost</span>|<span class="string">tpGain</span>|<span class="string">xianliCost</span>|</span><br><span class="line">+---------------+-----------+--------------------+-----------------------------------+--------------------+-------+---------+----+----------------+--------+-----------+------+--------+----------------------------------+--------+-------+---------------+----------------+----------------+-----+-----+-------+-----------+------+------+----------+</span><br><span class="line">|<span class="string">              [</span>|<span class="string">       null</span>|<span class="string">                null</span>|<span class="string">                               null</span>|<span class="string">                null</span>|<span class="string">   null</span>|<span class="string">     null</span>|<span class="string">null</span>|<span class="string">            null</span>|<span class="string">    null</span>|<span class="string">       null</span>|<span class="string">  null</span>|<span class="string">    null</span>|<span class="string">                              null</span>|<span class="string">    null</span>|<span class="string">   null</span>|<span class="string">           null</span>|<span class="string">            null</span>|<span class="string">            null</span>|<span class="string"> null</span>|<span class="string"> null</span>|<span class="string">   null</span>|<span class="string">       null</span>|<span class="string">  null</span>|<span class="string">  null</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">          null,</span>|<span class="string">       null</span>|<span class="string">                null</span>|<span class="string">                               null</span>|<span class="string">                null</span>|<span class="string">   null</span>|<span class="string">     null</span>|<span class="string">null</span>|<span class="string">            null</span>|<span class="string">    null</span>|<span class="string">       null</span>|<span class="string">  null</span>|<span class="string">    null</span>|<span class="string">                              null</span>|<span class="string">    null</span>|<span class="string">   null</span>|<span class="string">           null</span>|<span class="string">            null</span>|<span class="string">            null</span>|<span class="string"> null</span>|<span class="string"> null</span>|<span class="string">   null</span>|<span class="string">       null</span>|<span class="string">  null</span>|<span class="string">  null</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          1</span>|<span class="string">&#123;true, -1, a.atk ...</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 0, 1.0, 0&#125;]</span>|<span class="string">      1</span>|<span class="string">      880</span>|<span class="string">   1</span>|<span class="string">      %1的攻击！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">    攻击</span>|<span class="string"> 1 号技能会在选择“攻击”指令时使...</span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    1</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">    10</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          0</span>|<span class="string">&#123;false, 0, 0, 0, 20&#125;</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 2, 1.0, 0&#125;]</span>|<span class="string">      0</span>|<span class="string">      688</span>|<span class="string">   2</span>|<span class="string">%1正在保护自己。</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">    防御</span>|<span class="string">1 号技能会在选择“防御”指令时使用。</span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">   11</span>|<span class="string">   10</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">    10</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         -1</span>|<span class="string">&#123;true, -1, a.atk ...</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 0, 1.0, 0&#125;]</span>|<span class="string">      1</span>|<span class="string">      880</span>|<span class="string">   3</span>|<span class="string">      %1的攻击！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">连续攻击</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      2</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    1</span>|<span class="string">    0</span>|<span class="string">      2</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     5</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         -1</span>|<span class="string">&#123;true, -1, a.atk ...</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 0, 1.0, 0&#125;]</span>|<span class="string">      1</span>|<span class="string">      880</span>|<span class="string">   4</span>|<span class="string">      %1的攻击！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">两次攻击</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    4</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     5</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         -1</span>|<span class="string">&#123;true, -1, a.atk ...</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 0, 1.0, 0&#125;]</span>|<span class="string">      1</span>|<span class="string">      849</span>|<span class="string">   5</span>|<span class="string">      %1的攻击！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">三次攻击</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    5</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     4</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          0</span>|<span class="string">&#123;false, 0, 0, 0, 20&#125;</span>|<span class="string">                                   </span>|<span class="string">   [&#123;41, 0, 0.0, 0&#125;]</span>|<span class="string">      0</span>|<span class="string">      883</span>|<span class="string">   6</span>|<span class="string">      %1逃跑了。</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">    逃跑</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">   11</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          0</span>|<span class="string">&#123;false, 0, 0, 0, 20&#125;</span>|<span class="string">                                   </span>|<span class="string">                  []</span>|<span class="string">      0</span>|<span class="string">      979</span>|<span class="string">   7</span>|<span class="string">    %1正在观望。</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">    观望</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    0</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">    10</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         41</span>|<span class="string">&#123;false, 0, 200 + ...</span>|<span class="string">                                   </span>|<span class="string">[&#123;21, 4, 1.0, 0&#125;,...</span>|<span class="string">      0</span>|<span class="string">       72</span>|<span class="string">   8</span>|<span class="string">    %1吟唱了%2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     5</span>|<span class="string">    治愈</span>|<span class="string">                                  </span>|<span class="string">       0</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    1</span>|<span class="string">    0</span>|<span class="string">      1</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">    10</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         66</span>|<span class="string">&#123;false, 2, 100 + ...</span>|<span class="string"> 魔法\n初级的圣光技能,能召唤微弱...</span>|<span class="string">  [&#123;44, 30, 1.0, 0&#125;]</span>|<span class="string">      2</span>|<span class="string">       64</span>|<span class="string">   9</span>|<span class="string">    %1吟唱了%2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     5</span>|<span class="string">    火焰</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    1</span>|<span class="string">    0</span>|<span class="string">      1</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">    10</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          0</span>|<span class="string">&#123;false, 2, 285 + ...</span>|<span class="string">呼吸法\n常见的呼吸法，运转时能够...</span>|<span class="string">  [&#123;21, 21, 1.0, 0&#125;]</span>|<span class="string">      0</span>|<span class="string">     3084</span>|<span class="string">  10</span>|<span class="string">    %1施放了%2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">小吐纳法</span>|<span class="string">              &lt;Cast Animation: ...</span>|<span class="string">       0</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">   11</span>|<span class="string">    0</span>|<span class="string">      4</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">        152</span>|<span class="string">&#123;false, 2, 285 + ...</span>|<span class="string">                                   </span>|<span class="string">[&#123;21, 153, 1.0, 0...</span>|<span class="string">      0</span>|<span class="string">      499</span>|<span class="string">  11</span>|<span class="string">    %1使用了%2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">  灭魂术</span>|<span class="string">              &lt;Cast Animation: 0&gt; </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    2</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         38</span>|<span class="string">&#123;true, 1, 20000, ...</span>|<span class="string"> 基因锁·一阶\n觉醒了脚上的力量，...</span>|<span class="string">  [&#123;21, 72, 0.2, 0&#125;]</span>|<span class="string">      0</span>|<span class="string">      479</span>|<span class="string">  12</span>|<span class="string">   %1使出了 %2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">  骑士踢</span>|<span class="string">              &lt;setup action&gt;\na...</span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    1</span>|<span class="string">    0</span>|<span class="string">      2</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">        125</span>|<span class="string">&#123;true, 0, 150 + a...</span>|<span class="string"> 基因锁·一阶\n觉醒了一种气功，能...</span>|<span class="string">  [&#123;44, 24, 1.0, 0&#125;]</span>|<span class="string">      2</span>|<span class="string">     4471</span>|<span class="string">  13</span>|<span class="string">    %1施放了%2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">    50</span>|<span class="string">    变身</span>|<span class="string">              &lt;Cast Animation: ...</span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">   11</span>|<span class="string">    0</span>|<span class="string">      2</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         23</span>|<span class="string">&#123;true, -1, 426500...</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 0, 1.0, 0&#125;]</span>|<span class="string">      1</span>|<span class="string">      640</span>|<span class="string">  14</span>|<span class="string">      %1的攻击！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">莫名剑法</span>|<span class="string">              &lt;Cast Animation: ...</span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    1</span>|<span class="string">    0</span>|<span class="string">      2</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">    10</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          0</span>|<span class="string">&#123;false, 4, 100 + ...</span>|<span class="string"> 基因锁·破碎\n已经达到身体的极限...</span>|<span class="string">                  []</span>|<span class="string">      0</span>|<span class="string">      943</span>|<span class="string">  15</span>|<span class="string">                </span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">无望三阶</span>|<span class="string">              &lt;Hide in Battle&gt;\...</span>|<span class="string">       3</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    0</span>|<span class="string">    0</span>|<span class="string">      3</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">          0</span>|<span class="string">&#123;false, 4, 100 + ...</span>|<span class="string"> 基因锁·破碎\n已经达到身体的极限...</span>|<span class="string">                  []</span>|<span class="string">      0</span>|<span class="string">      943</span>|<span class="string">  16</span>|<span class="string">                </span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">无望四阶</span>|<span class="string">              &lt;Hide in Battle&gt;\...</span>|<span class="string">       3</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    0</span>|<span class="string">    0</span>|<span class="string">      3</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">         -1</span>|<span class="string">&#123;true, -1, 10000+...</span>|<span class="string">                                   </span>|<span class="string">   [&#123;21, 0, 1.0, 0&#125;]</span>|<span class="string">      0</span>|<span class="string">      880</span>|<span class="string">  17</span>|<span class="string">      %1的攻击！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">  骑士拳</span>|<span class="string">                                  </span>|<span class="string">       1</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    4</span>|<span class="string">    0</span>|<span class="string">      0</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     5</span>|<span class="string">      null</span>|</span><br><span class="line">|<span class="string">           null</span>|<span class="string">        311</span>|<span class="string">&#123;false, 0, 300, 0...</span>|<span class="string">  基因锁·四阶\n返祖·又北二百八十...</span>|<span class="string">                  []</span>|<span class="string">      0</span>|<span class="string">      484</span>|<span class="string">  18</span>|<span class="string">    %1施放了%2！</span>|<span class="string">        </span>|<span class="string">          1</span>|<span class="string">     0</span>|<span class="string">孟极血脉</span>|<span class="string">              \n&lt;passiveAPLUS:1...</span>|<span class="string">       3</span>|<span class="string">      1</span>|<span class="string">           null</span>|<span class="string">               0</span>|<span class="string">               0</span>|<span class="string">    0</span>|<span class="string">    0</span>|<span class="string">      3</span>|<span class="string">        100</span>|<span class="string">     0</span>|<span class="string">     0</span>|<span class="string">      null</span>|</span><br><span class="line">+---------------+-----------+--------------------+-----------------------------------+--------------------+-------+---------+----+----------------+--------+-----------+------+--------+----------------------------------+--------+-------+---------------+----------------+----------------+-----+-----+-------+-----------+------+------+----------+</span><br><span class="line">only showing top 20 rows</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>开发数仓：</p>
<ul>
<li>sql文件 维护数仓 &#x3D;》 推荐 好维护</li>
<li>idea<ul>
<li>sql维护数仓  &#x3D;》 例子 ：滴滴</li>
<li>api维护数仓 &#x3D;》 不好维护  &#x3D;》 定义udf函数方便<ul>
<li>可以写通用性代码来维护 &#x3D;》 写完之后牛皮</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="如何构建dataframe"><a href="#如何构建dataframe" class="headerlink" title="如何构建dataframe"></a>如何构建dataframe</h2><p>通过spark-session</p>
<p>RDD &#x3D;》 dataframe</p>
<ul>
<li>反射 数据结构（tuple,case class）-》形成dataframe-》<code>RDD.toDF</code>就可以了 其中 toDF(“列名”，”列名”。。。。)里面的是在dataframe里的列名</li>
<li>编程的方式 - 》 形成dataframe-》<ul>
<li><p>准备RDD 结构 &#x3D;》 row类型的</p>
</li>
<li><p>scheme &#x3D;》 数据字段名字，以及字段类型</p>
<ul>
<li>scheme ： 可以理解为一个表的元数据 &#x3D;》 字段的名字，字段的类型 &#x3D;》 以StructType来维护的<ul>
<li>fileds:一个字段的元数据是用StructFileds来维护的</li>
</ul>
</li>
</ul>
</li>
<li><p>createDataFrame &#x3D;》 df</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">val rowRDD: RDD<span class="selector-attr">[Row]</span> = inputRDD<span class="selector-class">.map</span>(line =&gt; &#123;</span><br><span class="line">     val splits = line<span class="selector-class">.split</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">     val uid = <span class="built_in">splits</span>(<span class="number">0</span>)</span><br><span class="line">     val name = <span class="built_in">splits</span>(<span class="number">1</span>)</span><br><span class="line">     val age = <span class="built_in">splits</span>(<span class="number">2</span>)<span class="selector-class">.toInt</span></span><br><span class="line">     <span class="built_in">Row</span>(uid, name, age)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   val schema = <span class="built_in">StructType</span>(<span class="built_in">Array</span>(</span><br><span class="line">     <span class="built_in">StructField</span>(<span class="string">&quot;uid&quot;</span>, StringType),</span><br><span class="line">     <span class="built_in">StructField</span>(<span class="string">&quot;name&quot;</span>, StringType),</span><br><span class="line">     <span class="built_in">StructField</span>(<span class="string">&quot;age&quot;</span>, IntegerType)</span><br><span class="line">   ))</span><br><span class="line"></span><br><span class="line">   val inputDF: DataFrame = spark<span class="selector-class">.createDataFrame</span>(rowRDD,schema)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>dataframe&#x2F;datasetr-&gt;RDD</p>
<ul>
<li><code>df.rdd</code></li>
</ul>
<p>df -&gt; ds</p>
<ul>
<li>用as来转换 <code>df.as[数据类型]</code>&#x3D;》dataset ：一般这个as里是类</li>
</ul>
<p>作业 把mysql的emp以及dept表以json的方式提取出来</p>
<h1 id="通过sparksql来完成之前的需求"><a href="#通过sparksql来完成之前的需求" class="headerlink" title="通过sparksql来完成之前的需求"></a>通过sparksql来完成之前的需求</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">数据如下 ： </span><br><span class="line"><span class="comment">-----------------------------------------dept</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;dept&quot;: [</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span>,</span><br><span class="line">		&quot;dname&quot; : &quot;ACCOUNTING&quot;,</span><br><span class="line">		&quot;loc&quot; : &quot;NEW YORK&quot;</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span>,</span><br><span class="line">		&quot;dname&quot; : &quot;RESEARCH&quot;,</span><br><span class="line">		&quot;loc&quot; : &quot;DALLAS&quot;</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span>,</span><br><span class="line">		&quot;dname&quot; : &quot;SALES&quot;,</span><br><span class="line">		&quot;loc&quot; : &quot;CHICAGO&quot;</span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;deptno&quot; : <span class="number">40</span>,</span><br><span class="line">		&quot;dname&quot; : &quot;OPERATIONS&quot;,</span><br><span class="line">		&quot;loc&quot; : &quot;BOSTON&quot;</span><br><span class="line">	&#125;</span><br><span class="line">]&#125;</span><br><span class="line"><span class="comment">-----------------------------------------emp</span></span><br><span class="line">&#123;</span><br><span class="line">&quot;emp&quot;: [</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7369</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SMITH&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1980-12-17T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">800.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7499</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ALLEN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-20T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1600.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">300.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7521</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;WARD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-22T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">500.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;JONES&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-04-02T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2975.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;BLAKE&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-05-01T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2850.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;CLARK&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-06-09T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2450.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7844</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;TURNER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-08T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1500.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">0.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7876</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ADAMS&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1983-01-12T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1100.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7900</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;lebulang&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">950.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;FORD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7934</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MILLER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-01-23T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1300.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3200.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3200.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3200.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7369</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SMITH&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1980-12-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">800.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7499</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ALLEN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-20T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1600.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">300.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7521</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;WARD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-22T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">500.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;JONES&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-04-02T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2975.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;BLAKE&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-05-01T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2850.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;CLARK&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-06-09T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2450.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7844</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;TURNER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-08T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1500.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">0.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7876</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ADAMS&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1983-01-12T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1100.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7900</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;lebulang&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">950.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;FORD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7934</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MILLER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-01-23T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1300.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7369</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SMITH&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1980-12-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">800.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7499</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ALLEN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-20T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1600.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">300.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7521</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;WARD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-22T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">500.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;JONES&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-04-02T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2975.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;BLAKE&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-05-01T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2850.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;CLARK&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-06-09T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2450.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7844</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;TURNER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-08T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1500.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">0.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7876</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ADAMS&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1983-01-12T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1100.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7900</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;lebulang&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">950.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;FORD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7934</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MILLER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-01-23T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1300.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7369</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SMITH&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1980-12-17T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">800.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7499</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ALLEN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-20T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1600.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">300.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7521</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;WARD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-22T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">500.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;JONES&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-04-02T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2975.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;BLAKE&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-05-01T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2850.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;CLARK&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-06-09T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2450.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7844</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;TURNER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-08T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1500.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">0.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7876</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ADAMS&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1983-01-12T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1100.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7900</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;lebulang&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">950.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;FORD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7934</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MILLER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-01-23T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1300.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3200.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3200.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3200.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7369</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SMITH&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1980-12-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">800.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7499</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ALLEN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-20T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1600.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">300.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7521</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;WARD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-22T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">500.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;JONES&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-04-02T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2975.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;BLAKE&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-05-01T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2850.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;CLARK&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-06-09T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2450.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7844</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;TURNER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-08T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1500.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">0.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7876</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ADAMS&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1983-01-12T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1100.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7900</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;lebulang&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">950.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;FORD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7934</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MILLER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-01-23T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1300.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7369</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SMITH&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1980-12-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">800.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7499</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ALLEN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-20T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1600.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">300.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7521</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;WARD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-22T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">500.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;JONES&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-04-02T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2975.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;BLAKE&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-05-01T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2850.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;CLARK&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-06-09T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2450.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7844</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;TURNER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-08T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1500.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">0.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7876</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ADAMS&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1983-01-12T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1100.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7900</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;lebulang&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">950.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;FORD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7934</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MILLER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-01-23T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1300.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7369</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SMITH&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1980-12-17T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">800.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7499</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ALLEN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-20T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1600.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">300.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7521</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;WARD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-22T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">500.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;JONES&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-04-02T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2975.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;BLAKE&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-05-01T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2850.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;CLARK&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-06-09T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2450.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7844</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;TURNER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-08T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1500.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">0.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7876</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ADAMS&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1983-01-12T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1100.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7900</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;lebulang&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">950.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;FORD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7934</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MILLER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-01-23T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1300.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3200.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3200.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3200.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7369</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SMITH&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1980-12-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">800.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7499</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ALLEN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-20T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1600.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">300.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7521</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;WARD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-22T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">500.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;JONES&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-04-02T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2975.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;BLAKE&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-05-01T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2850.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;CLARK&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-06-09T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2450.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7844</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;TURNER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-08T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1500.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">0.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7876</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ADAMS&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1983-01-12T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1100.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7900</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;lebulang&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">950.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;FORD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7934</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MILLER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-01-23T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1300.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7369</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SMITH&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1980-12-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">800.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7499</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ALLEN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-20T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1600.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">300.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7521</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;WARD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-22T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">500.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;JONES&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-04-02T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2975.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;BLAKE&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-05-01T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2850.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;CLARK&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-06-09T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2450.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7844</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;TURNER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-08T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1500.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">0.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7876</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ADAMS&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1983-01-12T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1100.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7900</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;lebulang&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">950.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;FORD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7934</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MILLER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-01-23T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1300.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7369</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SMITH&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1980-12-17T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">800.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7499</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ALLEN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-20T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1600.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">300.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7521</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;WARD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-22T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">500.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;JONES&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-04-02T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2975.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;BLAKE&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-05-01T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2850.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;CLARK&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-06-09T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2450.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7844</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;TURNER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-08T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1500.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">0.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7876</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ADAMS&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1983-01-12T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1100.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7900</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;lebulang&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">950.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;FORD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7934</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MILLER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-01-23T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1300.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T05:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3200.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T06:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3200.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3200.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7369</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SMITH&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1980-12-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">800.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7499</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ALLEN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-20T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1600.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">300.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7521</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;WARD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-22T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">500.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;JONES&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-04-02T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2975.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;BLAKE&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-05-01T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2850.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;CLARK&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-06-09T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2450.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7844</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;TURNER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-08T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1500.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">0.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7876</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ADAMS&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1983-01-12T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1100.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7900</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;lebulang&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">950.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;FORD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7934</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MILLER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-01-23T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1300.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7369</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SMITH&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1980-12-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">800.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7499</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ALLEN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-20T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1600.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">300.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7521</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;WARD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-02-22T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">500.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;JONES&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-04-02T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2975.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7654</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MARTIN&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-28T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1250.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">1400.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;BLAKE&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-05-01T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2850.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;CLARK&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;MANAGER&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-06-09T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">2450.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;SCOTT&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-12-09T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7839</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;KING&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;PRESIDENT&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-11-17T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">5000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7844</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;TURNER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;SALESMAN&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-09-08T18:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1500.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="number">0.00</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7876</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;ADAMS&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7788</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1983-01-12T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1100.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7900</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;lebulang&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7698</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">950.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">30</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7902</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;FORD&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;ANALYST&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7566</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1981-12-03T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">3000.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">20</span></span><br><span class="line">	&#125;,</span><br><span class="line">	&#123;</span><br><span class="line">		&quot;empno&quot; : <span class="number">7934</span>,</span><br><span class="line">		&quot;ename&quot; : &quot;MILLER&quot;,</span><br><span class="line">		&quot;job&quot; : &quot;CLERK&quot;,</span><br><span class="line">		&quot;mgr&quot; : <span class="number">7782</span>,</span><br><span class="line">		&quot;hiredate&quot; : &quot;1982-01-23T20:00:00Z&quot;,</span><br><span class="line">		&quot;sal&quot; : <span class="number">1300.00</span>,</span><br><span class="line">		&quot;comm&quot; : <span class="keyword">null</span>,</span><br><span class="line">		&quot;deptno&quot; : <span class="number">10</span></span><br><span class="line">	&#125;</span><br><span class="line">]&#125;</span><br><span class="line"><span class="comment">----------------------------------------------------------------------------问题</span></span><br><span class="line"><span class="number">1</span>，查询出部门编号为<span class="number">30</span>的所有员工的编号和姓名</span><br><span class="line"><span class="number">2.</span>找出部门编号为<span class="number">10</span>中所有经理，和部门编号为<span class="number">20</span>中所有销售员的详细资料。</span><br><span class="line"><span class="number">3.</span>查询所有员工详细信息，用工资降序排序，如果工资相同使用入职日期升序排序</span><br><span class="line"><span class="number">4.</span>列出薪金大于<span class="number">1500</span>的各种工作及从事此工作的员工人数。</span><br><span class="line"><span class="number">5.</span>列出在销售部工作的员工的姓名，假定不知道销售部的部门编号。</span><br><span class="line"><span class="number">6.</span>查询姓名以S开头的\以S结尾\包含S字符\第二个字母为L  __</span><br><span class="line"><span class="number">7.</span>查询每种工作的最高工资、最低工资、人数</span><br><span class="line"><span class="number">8.</span>列出薪金 高于 公司平均薪金的所有员工号，员工姓名，所在部门名称，上级领导，工资，工资等级</span><br><span class="line"><span class="number">9.</span>列出薪金  高于  在各自部门工作的员工的平均薪金的员工姓名和薪金、部门名称。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="解决-："><a href="#解决-：" class="headerlink" title="解决 ："></a>解决 ：</h1><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">因为上述数据不符合spark的规定，所以我们要在vscode中把他转化</span><br><span class="line">转化完成之后</span><br><span class="line">-------------------------------------------------------</span><br><span class="line">查询出部门编号为<span class="number">30</span>的所有员工的编号和姓名</span><br><span class="line"> <span class="comment">//---------------------------api</span></span><br><span class="line">    val cluname = emp.columns.toList</span><br><span class="line">    cluname.foreach(println(_))</span><br><span class="line">    emp.select(<span class="string">&quot;deptno&quot;</span>,<span class="string">&quot;empno&quot;</span>,<span class="string">&quot;ename&quot;</span>).rdd.<span class="built_in">filter</span>(<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span><br><span class="line">      x(<span class="number">0</span>)==<span class="number">30</span></span><br><span class="line">    &#125;).saveAsTextFile(<span class="string">&quot;hdfs://bigdata3:9000/spark/1&quot;</span>)</span><br><span class="line">    <span class="comment">//---------------------------sql</span></span><br><span class="line">    emp.createOrReplaceTempView(<span class="string">&quot;tableemp&quot;</span>)</span><br><span class="line">    spark.sql(<span class="string">&quot;select deptno,empno,ename from tableemp where deptno=30&quot;</span>).show()</span><br><span class="line"><span class="comment">//---------------------------------------------------------------2</span></span><br><span class="line"><span class="comment">//找出部门编号为10中所有经理，和部门编号为20中所有销售员的详细资料。</span></span><br><span class="line">    <span class="comment">//----------------------------api</span></span><br><span class="line">    emp.select(<span class="string">&quot;comm&quot;</span>,<span class="string">&quot;deptno&quot;</span>,<span class="string">&quot;empno&quot;</span>,<span class="string">&quot;ename&quot;</span>,<span class="string">&quot;hiredate&quot;</span>,<span class="string">&quot;job&quot;</span>,<span class="string">&quot;mgr&quot;</span>,<span class="string">&quot;sal&quot;</span>).rdd.<span class="built_in">filter</span>(<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span><br><span class="line">      (x(<span class="number">1</span>)==<span class="number">10</span>&amp;&amp;x(<span class="number">5</span>)==<span class="string">&quot;MANAGER&quot;</span>)||(x(<span class="number">1</span>)==<span class="number">20</span>&amp;&amp;x(<span class="number">5</span>)==<span class="string">&quot;SALESMAN&quot;</span>)</span><br><span class="line">    &#125;).saveAsTextFile(<span class="string">&quot;hdfs://bigdata3:9000/spark/2&quot;</span>)</span><br><span class="line">    <span class="comment">//--------------------------sql</span></span><br><span class="line">    spark.sql(<span class="string">&quot;select * from tableemp where deptno=10 and job= &#x27;MANAGER&#x27; or deptno = 20 and job= &#x27;SALESMAN&#x27;&quot;</span>).show()</span><br><span class="line">/-------------------------------------------------------------<span class="number">-3</span></span><br><span class="line"><span class="comment">//查询所有员工详细信息，用工资降序排序，如果工资相同使用入职日期升序排序</span></span><br><span class="line">    <span class="comment">//----------------------api</span></span><br><span class="line">   emp.rdd.<span class="built_in">map</span>(<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (x.isNullAt(<span class="number">0</span>))&#123;</span><br><span class="line">     <span class="keyword">var</span> total = x.getDouble(<span class="number">7</span>)</span><br><span class="line">       <span class="keyword">var</span> hire = x.getString(<span class="number">4</span>).<span class="built_in">split</span>(<span class="string">&quot;Z&quot;</span>)</span><br><span class="line">       <span class="keyword">var</span> reallyhire = hire(<span class="number">0</span>).<span class="built_in">split</span>(<span class="string">&quot;T&quot;</span>)</span><br><span class="line">       val <span class="built_in">date</span> = reallyhire(<span class="number">0</span>)+<span class="string">&quot; &quot;</span> +reallyhire(<span class="number">1</span>)</span><br><span class="line">       <span class="keyword">var</span> Data = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).parse(<span class="built_in">date</span>)</span><br><span class="line">       (total,Data,x)</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> total = x.getDouble(<span class="number">0</span>)+x.getDouble(<span class="number">7</span>)</span><br><span class="line">       <span class="keyword">var</span> hire = x.getString(<span class="number">4</span>).<span class="built_in">split</span>(<span class="string">&quot;Z&quot;</span>)</span><br><span class="line">       <span class="keyword">var</span> reallyhire = hire(<span class="number">0</span>).<span class="built_in">split</span>(<span class="string">&quot;T&quot;</span>)</span><br><span class="line">       val <span class="built_in">date</span> = reallyhire(<span class="number">0</span>)+<span class="string">&quot; &quot;</span> +reallyhire(<span class="number">1</span>)</span><br><span class="line">       <span class="keyword">var</span> Data = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>).parse(<span class="built_in">date</span>)</span><br><span class="line">       (total,Data,x)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;).sortBy(<span class="function"><span class="params">x</span>=&gt;</span>(-x._1,x._2)).<span class="built_in">map</span>(<span class="function"><span class="params">x</span>=&gt;</span>&#123;x._3&#125;).saveAsTextFile(<span class="string">&quot;hdfs://bigdata3:9000/spark/3&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------------------sql</span></span><br><span class="line">    spark.sql(<span class="string">&quot;select * from (select (ifnull(comm,0)+sal) as total, hiredate,job,mgr,sal,empno,ename,deptno from tableemp ) order by total desc,hiredate asc&quot;</span>)</span><br><span class="line">------------------------------------------<span class="number">-4</span></span><br><span class="line"><span class="comment">//列出薪金大于1500的各种工作及从事此工作的员工人数。</span></span><br><span class="line">    <span class="comment">//----------------------------------------api</span></span><br><span class="line">    emp.<span class="built_in">filter</span>(<span class="function"><span class="params">Row</span>=&gt;</span>&#123;</span><br><span class="line">      Row.getDouble(<span class="number">7</span>) &gt; <span class="number">1500</span></span><br><span class="line">    &#125;).<span class="built_in">groupBy</span>(<span class="string">&quot;job&quot;</span>).<span class="built_in">count</span>().rdd.saveAsTextFile(<span class="string">&quot;hdfs://bigdata3:9000/spark/4&quot;</span>)</span><br><span class="line">    <span class="comment">//----------------------------------------sql</span></span><br><span class="line">    spark.sql(<span class="string">&quot;select job,count(*) from tableemp where sal &gt; 1500  group by job&quot;</span>).show()</span><br><span class="line">-------------------------------------------<span class="number">-5</span></span><br><span class="line"><span class="comment">//-列出在销售部工作的员工的姓名，假定不知道销售部的部门编号。</span></span><br><span class="line">    <span class="comment">//---------------------------api</span></span><br><span class="line">    dept.<span class="built_in">filter</span>(<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span><br><span class="line">      x.getString(<span class="number">1</span>)==<span class="string">&quot;SALES&quot;</span></span><br><span class="line">    &#125;).join(emp,<span class="string">&quot;deptno&quot;</span>).select(<span class="string">&quot;ename&quot;</span>).rdd.saveAsTextFile(<span class="string">&quot;hdfs://bigdata3:9000/spark/5&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//------------------------sql</span></span><br><span class="line">    spark.sql(<span class="string">&quot;select ename from tableemp where deptno in(select  deptno from tabledept where dname=&#x27;SALES&#x27;)&quot;</span>).show()</span><br><span class="line"><span class="comment">//-----------------------------------------------------------6</span></span><br><span class="line"><span class="comment">//查询姓名以S开头的\以S结尾\包含S字符\第二个字母为L  __</span></span><br><span class="line">    <span class="comment">//----------------------------------api</span></span><br><span class="line">    emp.<span class="built_in">filter</span>(<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span><br><span class="line">      (x.getString(<span class="number">3</span>).<span class="built_in">contains</span>(<span class="string">&quot;S&quot;</span>))||(x.getString(<span class="number">3</span>).startsWith(<span class="string">&quot;S&quot;</span>))||(x.getString(<span class="number">3</span>).endsWith(<span class="string">&quot;S&quot;</span>)||x.getString(<span class="number">3</span>).charAt(<span class="number">1</span>)==<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    &#125;).rdd.saveAsTextFile(<span class="string">&quot;hdfs://bigdata3:9000/spark/6&quot;</span>)</span><br><span class="line">    <span class="comment">//----------------------------------sql</span></span><br><span class="line">    spark.sql(<span class="string">&quot;select * from tableemp where ename like &#x27;%S%&#x27; or ename REGEXP &#x27;^.L&#x27;&quot;</span>).show()</span><br><span class="line"><span class="comment">//-----------------------------------------------------------7</span></span><br><span class="line"><span class="comment">//查询每种工作的最高工资、最低工资、人数</span></span><br><span class="line">    <span class="comment">//---------------------------------api</span></span><br><span class="line">val frame2 = emp.<span class="built_in">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (x.isNullAt(<span class="number">0</span>)) &#123;</span><br><span class="line">    val d = x.getDouble(<span class="number">7</span>)</span><br><span class="line">    (x.getString(<span class="number">5</span>), d)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    val d = x.getDouble(<span class="number">0</span>) + x.getDouble(<span class="number">7</span>)</span><br><span class="line">    (x.getString(<span class="number">5</span>), d)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="built_in">groupBy</span>(<span class="string">&quot;_1&quot;</span>).<span class="built_in">max</span>(<span class="string">&quot;_2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    val frame1 = emp.<span class="built_in">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (x.isNullAt(<span class="number">0</span>)) &#123;</span><br><span class="line">        val d = x.getDouble(<span class="number">7</span>)</span><br><span class="line">        (x.getString(<span class="number">5</span>), d)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val d = x.getDouble(<span class="number">0</span>) + x.getDouble(<span class="number">7</span>)</span><br><span class="line">        (x.getString(<span class="number">5</span>), d)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="built_in">groupBy</span>(<span class="string">&quot;_1&quot;</span>).<span class="built_in">min</span>(<span class="string">&quot;_2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    val frame = emp.<span class="built_in">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (x.isNullAt(<span class="number">0</span>)) &#123;</span><br><span class="line">        val d = x.getDouble(<span class="number">7</span>)</span><br><span class="line">        (x.getString(<span class="number">5</span>), d)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val d = x.getDouble(<span class="number">0</span>) + x.getDouble(<span class="number">7</span>)</span><br><span class="line">        (x.getString(<span class="number">5</span>), d)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).<span class="built_in">groupBy</span>(<span class="string">&quot;_1&quot;</span>).<span class="built_in">count</span>()</span><br><span class="line"></span><br><span class="line">    frame.join(frame1 , <span class="string">&quot;_1&quot;</span>).join(frame2,<span class="string">&quot;_1&quot;</span>).rdd.saveAsTextFile(<span class="string">&quot;hdfs://bigdata3:9000/spark/7&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//-------------------------------sql</span></span><br><span class="line">    spark.sql(<span class="string">&quot;select max(ifnull(comm,0)+sal),min(ifnull(comm,0)+sal),count(*),job from tableemp group by job &quot;</span>).show()</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------------------------8</span></span><br><span class="line"><span class="comment">//列出薪金 高于 公司平均薪金的所有员工号，员工姓名，所在部门名称，上级领导，工资，工资等级</span></span><br><span class="line">    <span class="comment">//--------------------------------------------api</span></span><br><span class="line">    import org.apache.spark.sql.functions._</span><br><span class="line">val list = emp.<span class="built_in">groupBy</span>().avg(<span class="string">&quot;sal&quot;</span>).rdd.<span class="built_in">map</span>(_.getDouble(<span class="number">0</span>)).collect().toList</span><br><span class="line">    println(list(<span class="number">0</span>))</span><br><span class="line">    val value = emp.<span class="built_in">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">      x.getDouble(<span class="number">7</span>) &gt; list(<span class="number">0</span>).toDouble</span><br><span class="line">    &#125;)</span><br><span class="line">    value.show()</span><br><span class="line">    val frame = emp.select($<span class="string">&quot;empno&quot;</span>.alias(<span class="string">&quot;mgr&quot;</span>), $<span class="string">&quot;ename&quot;</span>.alias(<span class="string">&quot;leader&quot;</span>)).join(value, <span class="string">&quot;mgr&quot;</span>).join(dept,<span class="string">&quot;deptno&quot;</span>)</span><br><span class="line"><span class="comment">//----------------------------------------------------工资等级</span></span><br><span class="line"><span class="comment">//    insert into salgrade values (1, 700, 1200);</span></span><br><span class="line"><span class="comment">//    insert into salgrade values (2, 1201, 1400);</span></span><br><span class="line"><span class="comment">//    insert into salgrade values (3, 1401, 2000);</span></span><br><span class="line"><span class="comment">//    insert into salgrade values (4, 2001, 3000);</span></span><br><span class="line"><span class="comment">//    insert into salgrade values (5, 3001, 9999);</span></span><br><span class="line">    frame.printSchema()</span><br><span class="line"><span class="comment">//    frame.rdd.collect().foreach(println(_))</span></span><br><span class="line">    val value1 = frame.rdd.<span class="built_in">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (x.isNullAt(<span class="number">3</span>)) &#123;</span><br><span class="line">        val tmp = x.getDouble(<span class="number">8</span>).toInt</span><br><span class="line">        <span class="keyword">if</span> (tmp &gt; <span class="number">700</span> &amp;&amp; tmp &lt; <span class="number">1200</span>)&#123;</span><br><span class="line">          (<span class="number">1</span>, x(<span class="number">1</span>),x)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (tmp &gt; <span class="number">1201</span> &amp;&amp; tmp &lt; <span class="number">1400</span>)&#123;</span><br><span class="line">            (<span class="number">2</span>, x(<span class="number">1</span>),x)</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp &gt; <span class="number">1401</span> &amp;&amp; tmp &lt; <span class="number">2000</span>)&#123;</span><br><span class="line">              (<span class="number">3</span>, x(<span class="number">1</span>),x)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (tmp &gt; <span class="number">2001</span> &amp;&amp; tmp &lt; <span class="number">3000</span>)&#123;</span><br><span class="line">                (<span class="number">4</span>, x(<span class="number">1</span>),x)</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (tmp &gt; <span class="number">3001</span> &amp;&amp; tmp &lt; <span class="number">9999</span>)&#123;</span><br><span class="line">                  (<span class="number">5</span>, x(<span class="number">1</span>),x)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  (<span class="number">5</span>, x(<span class="number">1</span>),x)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        val tmp =  (x.getDouble(<span class="number">3</span>) + x.getDouble(<span class="number">8</span>)).toInt</span><br><span class="line">        <span class="keyword">if</span> (tmp &gt; <span class="number">700</span> &amp;&amp; tmp &lt; <span class="number">1200</span>)&#123;</span><br><span class="line">          (<span class="number">1</span>, x(<span class="number">1</span>),x)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (tmp &gt; <span class="number">1201</span> &amp;&amp; tmp &lt; <span class="number">1400</span>)&#123;</span><br><span class="line">            (<span class="number">2</span>, x(<span class="number">1</span>),x)</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp &gt; <span class="number">1401</span> &amp;&amp; tmp &lt; <span class="number">2000</span>)&#123;</span><br><span class="line">              (<span class="number">3</span>, x(<span class="number">1</span>),x)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">if</span> (tmp &gt; <span class="number">2001</span> &amp;&amp; tmp &lt; <span class="number">3000</span>)&#123;</span><br><span class="line">                (<span class="number">4</span>, x(<span class="number">1</span>),x)</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (tmp &gt; <span class="number">3001</span> &amp;&amp; tmp &lt; <span class="number">9999</span>)&#123;</span><br><span class="line">                  (<span class="number">5</span>, x(<span class="number">1</span>),x)</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  (<span class="number">5</span>, x(<span class="number">1</span>),x)</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    value1.saveAsTextFile(<span class="string">&quot;hdfs://bigdata3:9000/spark/8&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------------------sql</span></span><br><span class="line">    emp.createOrReplaceTempView(<span class="string">&quot;tableemp1&quot;</span>)</span><br><span class="line">    spark.sql(<span class="string">&quot;\n\nselect \nking.ename,\nking.empno,\ne1.ename as leader,\nking.earn,\ns.grade\nas sallevel\nfrom (\n  select ename , empno , deptno , ifnull((sal + comm),sal) as earn ,mgr \n  from tableemp\n  where sal &gt; (\n    select avg(sal)\n    from tableemp1\n  )\n) as king \nleft join tabledept on king.deptno=tabledept.deptno \nleft join (\n  select empno,ename\n  from tableemp\n) e1 on king.mgr = e1.empno\nleft join salgrade as s on earn &gt;= losal and earn &lt;= hisal;&quot;</span>).show()</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------------------------------9</span></span><br><span class="line"><span class="comment">//列出薪金  高于  在各自部门工作的员工的平均薪金的员工姓名和薪金、部门名称。</span></span><br><span class="line">    <span class="comment">//----------------------------------------------api</span></span><br><span class="line">val frame = emp.<span class="built_in">groupBy</span>(<span class="string">&quot;deptno&quot;</span>).avg(<span class="string">&quot;sal&quot;</span>).rdd.collect().toList</span><br><span class="line">    frame.foreach(println(_))</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (elem &lt;- frame)&#123;</span><br><span class="line">     <span class="keyword">var</span> name = elem(<span class="number">0</span>).toString + <span class="string">&quot;deptno&quot;</span></span><br><span class="line">     <span class="keyword">var</span> frame1 = emp.<span class="built_in">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">       (x.getLong(<span class="number">1</span>).toString == elem(<span class="number">0</span>).toString) &amp;&amp; (x.getDouble(<span class="number">7</span>) &gt; elem(<span class="number">1</span>).toString.toDouble)</span><br><span class="line">     &#125;).join(dept, <span class="string">&quot;deptno&quot;</span>).rdd.saveAsTextFile(s<span class="string">&quot;hdfs://bigdata3:9000/spark/9/$name&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">//----------------------------------------------sql</span></span><br><span class="line">    spark.sql(<span class="string">&quot;\n\n\nselect  * \nfrom  \n(select\n*\nfrom (select avg(sal) as sal_avg, deptno as deptno1 from (select  sal ,deptno from tableemp group by sal , deptno) as king group by deptno) as avg_basic left join tableemp\non tableemp.deptno=avg_basic.deptno1  and tableemp.sal &gt; avg_basic.sal_avg) as basicinfo where basicinfo.deptno1 in (select deptno from tabledept);&quot;</span>).show()</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>点ok</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>sparksql-3</title>
    <url>/2023/01/13/1-13/</url>
    <content><![CDATA[<h1 id="案例：业务数据-日志数据"><a href="#案例：业务数据-日志数据" class="headerlink" title="案例：业务数据 + 日志数据"></a>案例：业务数据 + 日志数据</h1><p>业务数据 在mysql里 &#x3D;》</p>
<ul>
<li>city_info</li>
<li>user_info</li>
</ul>
<p>日志数据 在hive里 &#x3D;》</p>
<ul>
<li>user_click</li>
</ul>
<p>思路 &#x3D;》 先用代码把数据统计到df中对df进行操作</p>
<h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><figure class="highlight pony"><table><tr><td class="code"><pre><span class="line">package sparkfirst</span><br><span class="line"></span><br><span class="line">import org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> xiangmu1 &#123;</span><br><span class="line">  def main(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="meta">val</span> spark = <span class="type">SparkSession</span>.builder().appName(<span class="string">&quot;Sparksql01&quot;</span>).master(<span class="string">&quot;local[4]&quot;</span>).enableHiveSupport().getOrCreate()</span><br><span class="line">    import spark.implicits._</span><br><span class="line">    <span class="meta">val</span> city_info = spark.read.format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      .options(<span class="type">Map</span>(<span class="string">&quot;url&quot;</span>-&gt;args(<span class="number">0</span>),<span class="string">&quot;dbtable&quot;</span>-&gt;args(<span class="number">3</span>),<span class="string">&quot;user&quot;</span>-&gt;args(<span class="number">1</span>),<span class="string">&quot;password&quot;</span>-&gt;args(<span class="number">2</span>),<span class="string">&quot;driver&quot;</span>-&gt;<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>)).load()</span><br><span class="line"></span><br><span class="line">    <span class="meta">val</span> user_info = spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |select * from bigdata.product_info</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line"><span class="comment">//    city_info.show()</span></span><br><span class="line"><span class="comment">//    user_info.show()</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">val</span> product_info = spark.read.textFile(<span class="string">&quot;hdfs://bigdata3:9000/data/user_click.txt&quot;</span>)</span><br><span class="line"><span class="comment">//    product_info.show(false)</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">val</span> userlog = product_info.map(line =&gt; &#123;</span><br><span class="line">      <span class="meta">val</span> strings = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">      <span class="meta">val</span> userid = strings(<span class="number">0</span>)</span><br><span class="line">      <span class="meta">val</span> sessionid = strings(<span class="number">1</span>)</span><br><span class="line">      <span class="meta">val</span> dt = strings(<span class="number">2</span>)</span><br><span class="line">      <span class="meta">val</span> cityid = strings(<span class="number">3</span>)</span><br><span class="line">      <span class="meta">val</span> shopid = strings(<span class="number">4</span>)</span><br><span class="line">      (userid, sessionid, dt, cityid, shopid)</span><br><span class="line">    &#125;).toDF(<span class="string">&quot;userid&quot;</span>, <span class="string">&quot;sessionid&quot;</span>, <span class="string">&quot;dt&quot;</span>, <span class="string">&quot;cityid&quot;</span>, <span class="string">&quot;shopid&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    userlog.show(false)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------------------------------------------------------------</span></span><br><span class="line">    city_info.createOrReplaceTempView(<span class="string">&quot;city_info&quot;</span>)</span><br><span class="line">    userlog.createOrReplaceTempView(<span class="string">&quot;user_log&quot;</span>)</span><br><span class="line">    user_info.createOrReplaceTempView(<span class="string">&quot;product_info&quot;</span>)</span><br><span class="line">    <span class="comment">//--------------------------------------------------------------</span></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |drop table if exists bigdata.tmp</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |</span></span><br><span class="line"><span class="string">        |</span></span><br><span class="line"><span class="string">        |create table bigdata.tmp as</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |*</span></span><br><span class="line"><span class="string">        |from (</span></span><br><span class="line"><span class="string">        |    select * from city_info left join user_log on city_info.city_id = user_log.cityid left join product_info  on user_log.shopid = product_info.product_id</span></span><br><span class="line"><span class="string">        |)</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |drop table if exists bigdata.sparkfinish</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |create table bigdata.sparkfinish as</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |*</span></span><br><span class="line"><span class="string">        |from(</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |area,</span></span><br><span class="line"><span class="string">        |product_name,</span></span><br><span class="line"><span class="string">        |rank() over(partition by area order by cnt) as rk</span></span><br><span class="line"><span class="string">        |from (</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |area,</span></span><br><span class="line"><span class="string">        |product_name,</span></span><br><span class="line"><span class="string">        |count(1) as cnt</span></span><br><span class="line"><span class="string">        |from bigdata.tmp</span></span><br><span class="line"><span class="string">        |group by area,product_name</span></span><br><span class="line"><span class="string">        |)</span></span><br><span class="line"><span class="string">        |)where rk &lt; 3;</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="然后我们进行打包上传"><a href="#然后我们进行打包上传" class="headerlink" title="然后我们进行打包上传"></a>然后我们进行打包上传</h3><p>进行打包之前，我们要把我们的</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> spark = <span class="module-access"><span class="module"><span class="identifier">SparkSession</span>.</span></span>builder<span class="literal">()</span>.app<span class="constructor">Name(<span class="string">&quot;Sparksql01&quot;</span>)</span>.master(<span class="string">&quot;local[4]&quot;</span>).enable<span class="constructor">HiveSupport()</span>.get<span class="constructor">OrCreate()</span></span><br></pre></td></tr></table></figure>

<p>给注释掉，因为我们用spark-submit的时候会通过命令的方式指定他</p>
<p>打包上传之后我们可以进行调用脚本spark-submit脚本</p>
<p>但是这里还是有分歧的，因为spark-submit部署的时候一般是部署在yarn的要分几种模式的简单介绍一下两种模式</p>
<p>Cluster：</p>
<ul>
<li>提交作业  client作业提交  client就可以关闭了 对spark作业是没有影响的 而且运行的时候</li>
<li>driver  是在集群机器里的</li>
<li>上yarn上看日志</li>
</ul>
<p>client：</p>
<ul>
<li>提交作业  client作业提交 如果client关闭了 driver process 挂了  对spark作业有影响的</li>
<li>是在 client机器里的</li>
<li>可以直接看见日志的</li>
</ul>
<p>以下代码分别写一下</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">spark-submit <span class="string">\</span></span><br><span class="line">--master yarn <span class="string">\</span></span><br><span class="line">--deploy-mode client <span class="string">\</span></span><br><span class="line">--name userlog <span class="string">\</span></span><br><span class="line">--executor-memory <span class="number">1g</span> <span class="string">\</span></span><br><span class="line">--num-executors <span class="number">1</span> <span class="string">\</span></span><br><span class="line">--executor-cores <span class="number">1</span> <span class="string">\</span></span><br><span class="line">--<span class="keyword">class</span> <span class="title class_">sparkfirst</span>.xiangmu1 <span class="string">\</span></span><br><span class="line">/home/hadoop/project/jar/bigdatajava-<span class="number">1.0</span>-SNAPSHOT.jar <span class="string">\</span></span><br><span class="line"><span class="string">&quot;jdbc:mysql://bigdata2:3306/bigdata&quot;</span> root liuzihan010616 city_info</span><br><span class="line">--------------------------------------------------------cluster</span><br><span class="line">spark-submit <span class="string">\</span></span><br><span class="line">--master yarn <span class="string">\</span></span><br><span class="line">--deploy-mode cluster <span class="string">\</span></span><br><span class="line">--name userlog <span class="string">\</span></span><br><span class="line">--executor-memory <span class="number">1g</span> <span class="string">\</span></span><br><span class="line">--num-executors <span class="number">2</span> <span class="string">\</span></span><br><span class="line">--executor-cores <span class="number">1</span> <span class="string">\</span></span><br><span class="line">--<span class="keyword">class</span> <span class="title class_">sparkfirst</span>.xiangmu1 <span class="string">\</span></span><br><span class="line">/home/hadoop/project/jar/bigdatajava-<span class="number">1.0</span>-SNAPSHOT.jar <span class="string">\</span></span><br><span class="line"><span class="string">&quot;jdbc:mysql://bigdata2:3306/bigdata&quot;</span> root liuzihan010616 city_info</span><br><span class="line">-------------------------------------------------------------- 以下是正常的因为我把mysql的driver加入到spark的jars文件夹里了，所以上面不用指定jar</span><br><span class="line">spark-submit <span class="string">\</span></span><br><span class="line">--master yarn <span class="string">\</span></span><br><span class="line">--deploy-mode client  <span class="string">\</span></span><br><span class="line">--name userlog <span class="string">\</span></span><br><span class="line">--executor-memory <span class="number">1g</span> <span class="string">\</span></span><br><span class="line">--num-executors <span class="number">1</span> <span class="string">\</span></span><br><span class="line">--executor-cores <span class="number">1</span> <span class="string">\</span></span><br><span class="line">--jars /home/hadoop/software/mysql-connector-java-<span class="number">5.1</span>.<span class="number">28.jar</span> <span class="string">\</span></span><br><span class="line">--driver-<span class="keyword">class</span>-path /home/hadoop/software/mysql-connector-java-<span class="number">5.1</span>.<span class="number">28.jar</span> <span class="string">\</span></span><br><span class="line">--driver-library-path /home/hadoop/software/mysql-connector-java-<span class="number">5.1</span>.<span class="number">28.jar</span> <span class="string">\</span></span><br><span class="line">--<span class="keyword">class</span> <span class="title class_">sparkfirst</span>.xiangmu1 <span class="string">\</span></span><br><span class="line">/home/hadoop/project/jar/bigdatajava-<span class="number">1.0</span>-SNAPSHOT.jar <span class="string">\</span></span><br><span class="line"><span class="string">&quot;jdbc:mysql://bigdata2:3306/bigdata&quot;</span> root liuzihan010616 city_info user_info</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">spark-submit <span class="string">\</span></span><br><span class="line">--master yarn <span class="string">\</span></span><br><span class="line">--deploy-mode cluster <span class="string">\</span></span><br><span class="line">--name userlog <span class="string">\</span></span><br><span class="line">--executor-memory <span class="number">1g</span> <span class="string">\</span></span><br><span class="line">--num-executors <span class="number">1</span> <span class="string">\</span></span><br><span class="line">--executor-cores <span class="number">1</span> <span class="string">\</span></span><br><span class="line">--jars /home/hadoop/software/mysql-connector-java-<span class="number">5.1</span>.<span class="number">28.jar</span> <span class="string">\</span></span><br><span class="line">--driver-<span class="keyword">class</span>-path /home/hadoop/software/mysql-connector-java-<span class="number">5.1</span>.<span class="number">28.jar</span> <span class="string">\</span></span><br><span class="line">--driver-library-path /home/hadoop/software/mysql-connector-java-<span class="number">5.1</span>.<span class="number">28.jar</span> <span class="string">\</span></span><br><span class="line">--<span class="keyword">class</span> <span class="title class_">sparkfirst</span>.xiangmu1 <span class="string">\</span></span><br><span class="line">/home/hadoop/project/jar/bigdatajava-<span class="number">1.0</span>-SNAPSHOT.jar <span class="string">\</span></span><br><span class="line"><span class="string">&quot;jdbc:mysql://bigdata2:3306/bigdata&quot;</span> root liuzihan010616 city_info user_info</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="几种加入driver的方法是"><a href="#几种加入driver的方法是" class="headerlink" title="几种加入driver的方法是"></a>几种加入driver的方法是</h3><p>在执行命令的时候加入命令：如上</p>
<p>直接加到jars里</p>
<p>这里比较不推荐的就是第二种，因为怕和spark本身的包产生冲突</p>
<h3 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h3><p>spark到yarn的执行流程和hadoop基本一样，除了spark的持久化操作要用到catche，其余都一样</p>
<p>driver &#x3D;》manager</p>
<p>excuter &#x3D;》 container</p>
<h3 id="catlog"><a href="#catlog" class="headerlink" title="catlog"></a>catlog</h3><p>hive元数据 在mysql里</p>
<p>spark 访问hive元数据 通过jdbc</p>
<p>spark提供了个catlog</p>
<p>直接调用catlog可以直接拿到hive的元数据的功能</p>
<p>比如制作大数据分析平台</p>
<p>获取catlog</p>
<p><code>sparksesson.catlog</code></p>
<p>然后里面有很多的方法可以在idea里通过ctrl + f12 查看方法</p>
<p>冷数据可能放在cos 或者 oss上</p>
<h3 id="udf"><a href="#udf" class="headerlink" title="udf"></a>udf</h3><ul>
<li>代码的方式定义udf</li>
<li>hive的udf可以在spark可以直接用</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">idea里定义udf</span><br><span class="line">---------------------------------------</span><br><span class="line">先导包</span><br><span class="line">import org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.sql</span><span class="selector-class">.functions</span><span class="selector-class">.udf</span></span><br><span class="line">然后</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">val spark = SparkSession</span><br><span class="line">  <span class="selector-class">.builder</span>()</span><br><span class="line">  <span class="selector-class">.appName</span>(<span class="string">&quot;Spark SQL UDF scalar example&quot;</span>)</span><br><span class="line">  <span class="selector-class">.getOrCreate</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Define and register a zero-argument non-deterministic UDF</span></span><br><span class="line"><span class="comment">// UDF is deterministic by default, i.e. produces the same result for the same input.</span></span><br><span class="line">val random = <span class="built_in">udf</span>(() =&gt; Math<span class="selector-class">.random</span>())</span><br><span class="line">spark<span class="selector-class">.udf</span><span class="selector-class">.register</span>(<span class="string">&quot;random&quot;</span>, random<span class="selector-class">.asNondeterministic</span>())</span><br><span class="line">spark<span class="selector-class">.sql</span>(<span class="string">&quot;SELECT random()&quot;</span>)<span class="selector-class">.show</span>()</span><br><span class="line"><span class="comment">// +-------+</span></span><br><span class="line"><span class="comment">// |UDF()  |</span></span><br><span class="line"><span class="comment">// +-------+</span></span><br><span class="line"><span class="comment">// |xxxxxxx|</span></span><br><span class="line"><span class="comment">// +-------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define and register a one-argument UDF</span></span><br><span class="line">val plusOne = <span class="built_in">udf</span>((x: Int) =&gt; x + <span class="number">1</span>)</span><br><span class="line">spark<span class="selector-class">.udf</span><span class="selector-class">.register</span>(<span class="string">&quot;plusOne&quot;</span>, plusOne)</span><br><span class="line">spark<span class="selector-class">.sql</span>(<span class="string">&quot;SELECT plusOne(5)&quot;</span>)<span class="selector-class">.show</span>()</span><br><span class="line"><span class="comment">// +------+</span></span><br><span class="line"><span class="comment">// |UDF(5)|</span></span><br><span class="line"><span class="comment">// +------+</span></span><br><span class="line"><span class="comment">// |     6|</span></span><br><span class="line"><span class="comment">// +------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Define a two-argument UDF and register it with Spark in one step</span></span><br><span class="line">spark<span class="selector-class">.udf</span><span class="selector-class">.register</span>(<span class="string">&quot;strLenScala&quot;</span>, (_: String)<span class="selector-class">.length</span> + (_: Int))</span><br><span class="line">spark<span class="selector-class">.sql</span>(<span class="string">&quot;SELECT strLenScala(&#x27;test&#x27;, 1)&quot;</span>)<span class="selector-class">.show</span>()</span><br><span class="line"><span class="comment">// +--------------------+</span></span><br><span class="line"><span class="comment">// |strLenScala(test, 1)|</span></span><br><span class="line"><span class="comment">// +--------------------+</span></span><br><span class="line"><span class="comment">// |                   5|</span></span><br><span class="line"><span class="comment">// +--------------------+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UDF in a WHERE clause</span></span><br><span class="line">spark<span class="selector-class">.udf</span><span class="selector-class">.register</span>(<span class="string">&quot;oneArgFilter&quot;</span>, (n: Int) =&gt; &#123; n &gt; <span class="number">5</span> &#125;)</span><br><span class="line">spark<span class="selector-class">.range</span>(<span class="number">1</span>, <span class="number">10</span>)<span class="selector-class">.createOrReplaceTempView</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">spark<span class="selector-class">.sql</span>(<span class="string">&quot;SELECT * FROM test WHERE oneArgFilter(id)&quot;</span>)<span class="selector-class">.show</span>()</span><br><span class="line"><span class="comment">// +---+</span></span><br><span class="line"><span class="comment">// | id|</span></span><br><span class="line"><span class="comment">// +---+</span></span><br><span class="line"><span class="comment">// |  6|</span></span><br><span class="line"><span class="comment">// |  7|</span></span><br><span class="line"><span class="comment">// |  8|</span></span><br><span class="line"><span class="comment">// |  9|</span></span><br><span class="line"><span class="comment">// +---+</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>sparksql-2</title>
    <url>/2023/01/11/1-11/</url>
    <content><![CDATA[<h1 id="构建df"><a href="#构建df" class="headerlink" title="构建df"></a>构建df</h1><ul>
<li>rdd</li>
<li>hive</li>
<li>外部数据源<ul>
<li>json,csv,jdbc&#x2F;odbc</li>
</ul>
</li>
</ul>
<h1 id="加载外部数据源"><a href="#加载外部数据源" class="headerlink" title="加载外部数据源"></a>加载外部数据源</h1><h2 id="api简介"><a href="#api简介" class="headerlink" title="api简介"></a>api简介</h2><h3 id="TEXT"><a href="#TEXT" class="headerlink" title="TEXT"></a>TEXT</h3><table>
<thead>
<tr>
<th><strong>Property Name</strong></th>
<th><strong>Default</strong></th>
<th><strong>Meaning</strong></th>
<th><strong>Scope</strong></th>
</tr>
</thead>
<tbody><tr>
<td>wholetext</td>
<td>false</td>
<td>If true, read each file from input path(s) as a single row.</td>
<td>read</td>
</tr>
<tr>
<td>lineSep</td>
<td><code>\r</code>, <code>\r\n</code>, <code>\n</code> (for reading), <code>\n</code> (for writing)</td>
<td>Defines the line separator that should be used for reading or writing.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td>compression</td>
<td>(none)</td>
<td>Compression codec to use when saving to file.<br />This can be one of the known case-insensitive shorten names<br /> (none, bzip2, gzip, lz4, snappy and deflate).</td>
<td>write</td>
</tr>
</tbody></table>
<h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><table>
<thead>
<tr>
<th><strong>Property Name</strong></th>
<th><strong>Default</strong></th>
<th><strong>Meaning</strong></th>
<th><strong>Scope</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>timeZone</code></td>
<td>(value of <code>spark.sql.session.timeZone</code> configuration)</td>
<td>Sets the string that indicates a time zone ID to be used to format timestamps in the JSON datasources or partition values. The following formats of <code>timeZone</code> are supported:&#96;&#96;* Region-based zone ID: <br />It should have the form ‘area&#x2F;city’,<br /> such as ‘America&#x2F;Los_Angeles’.* Zone offset: It should be in the format ‘(+</td>
<td>-)HH:mm’, for example ‘-08:00’ or ‘+01:00’. Also ‘UTC’ and ‘Z’ are supported as aliases of ‘+00:00’.Other short names like ‘CST’ are not recommended to use because they can be ambiguous.</td>
</tr>
<tr>
<td><code>primitivesAsString</code></td>
<td><code>false</code></td>
<td>Infers all primitive values as a string type.</td>
<td>read</td>
</tr>
<tr>
<td><code>prefersDecimal</code></td>
<td><code>false</code></td>
<td>Infers all floating-point values as a decimal type.<br />If the values do not fit in decimal, then it infers them as doubles.</td>
<td>read</td>
</tr>
<tr>
<td><code>allowComments</code></td>
<td><code>false</code></td>
<td>Ignores Java&#x2F;C++ style comment in JSON records.</td>
<td>read</td>
</tr>
<tr>
<td><code>allowUnquotedFieldNames</code></td>
<td><code>false</code></td>
<td>Allows unquoted JSON field names.</td>
<td>read</td>
</tr>
<tr>
<td><code>allowSingleQuotes</code></td>
<td><code>true</code></td>
<td>Allows single quotes in addition to double quotes.</td>
<td>read</td>
</tr>
<tr>
<td><code>allowNumericLeadingZero</code></td>
<td><code>false</code></td>
<td>Allows leading zeros in numbers (e.g. 00012).</td>
<td>read</td>
</tr>
<tr>
<td><code>allowBackslashEscapingAnyCharacter</code></td>
<td><code>false</code></td>
<td>Allows accepting quoting of all character using backslash quoting mechanism<br />.</td>
<td>read</td>
</tr>
<tr>
<td><code>mode</code></td>
<td><code>PERMISSIVE</code></td>
<td>Allows a mode for dealing with corrupt records during parsing.&#96;&#96;<em><code>PERMISSIVE</code>: when it meets a corrupted record, puts the malformed string into a field configured by <code>columnNameOfCorruptRecord</code>, and sets malformed fields to <code>null</code>. To keep corrupt records, an user can set a string type field named <code>columnNameOfCorruptRecord</code> in an user-defined schema. If a schema does not have the field, it drops corrupt records during parsing. When inferring a schema, it implicitly adds a <code>columnNameOfCorruptRecord</code> field in an output schema.</em> <code>DROPMALFORMED</code>: ignores the whole corrupted records. This mode is unsupported in the JSON built-in functions.* <code>FAILFAST</code>: throws an exception when it meets corrupted records.</td>
<td>read</td>
</tr>
<tr>
<td><code>columnNameOfCorruptRecord</code></td>
<td>(value of <code>spark.sql.columnNameOfCorruptRecord</code> configuration)</td>
<td>Allows renaming the new field having malformed string created by <code>PERMISSIVE</code> mode. This overrides spark.sql.columnNameOfCorruptRecord.</td>
<td>read</td>
</tr>
<tr>
<td><code>dateFormat</code></td>
<td><code>yyyy-MM-dd</code></td>
<td>Sets the string that indicates a date format. Custom date formats follow the formats at<a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html">datetime pattern</a>. This applies to date type.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>timestampFormat</code></td>
<td><code>yyyy-MM-dd&#39;T&#39;HH:mm:ss[.SSS][XXX]</code></td>
<td>Sets the string that indicates a timestamp format. Custom date formats follow the formats at<a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html">datetime pattern</a>. This applies to timestamp type.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>timestampNTZFormat</code></td>
<td>yyyy-MM-dd’T’HH:mm:ss[.SSS]</td>
<td>Sets the string that indicates a timestamp without timezone format. Custom date formats follow the formats at<a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html">Datetime Patterns</a>. This applies to timestamp without timezone type, note that zone-offset and time-zone components are not supported when writing or reading this data type.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>multiLine</code></td>
<td><code>false</code></td>
<td>Parse one record, which may span multiple lines, per file. JSON built-in functions ignore this option.</td>
<td>read</td>
</tr>
<tr>
<td><code>allowUnquotedControlChars</code></td>
<td><code>false</code></td>
<td>Allows JSON Strings to contain unquoted control characters (ASCII characters with value less than 32, including tab and line feed characters) or not.</td>
<td>read</td>
</tr>
<tr>
<td><code>encoding</code></td>
<td>Detected automatically when <code>multiLine</code> is set to <code>true</code> (for reading), <code>UTF-8</code> (for writing)</td>
<td>For reading, allows to forcibly set one of standard basic or extended encoding for the JSON files. For example UTF-16BE, UTF-32LE. For writing, Specifies encoding (charset) of saved json files. JSON built-in functions ignore this option.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>lineSep</code></td>
<td><code>\r</code>, <code>\r\n</code>, <code>\n</code> (for reading), <code>\n</code> (for writing)</td>
<td>Defines the line separator that should be used for parsing. JSON built-in functions ignore this option.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>samplingRatio</code></td>
<td><code>1.0</code></td>
<td>Defines fraction of input JSON objects used for schema inferring.</td>
<td>read</td>
</tr>
<tr>
<td><code>dropFieldIfAllNull</code></td>
<td><code>false</code></td>
<td>Whether to ignore column of all null values or empty array&#x2F;struct during schema inference.</td>
<td>read</td>
</tr>
<tr>
<td><code>locale</code></td>
<td><code>en-US</code></td>
<td>Sets a locale as language tag in IETF BCP 47 format. For instance,<code>locale</code> is used while parsing dates and timestamps.</td>
<td>read</td>
</tr>
<tr>
<td><code>allowNonNumericNumbers</code></td>
<td><code>true</code></td>
<td>Allows JSON parser to recognize set of “Not-a-Number” (NaN) tokens as legal floating number values.&#96;&#96;<em><code>+INF</code>:<br /> for positive infinity, as well as alias of <code>+Infinity</code> and <code>Infinity</code>.</em> <code>-INF</code>: for negative infinity, alias <code>-Infinity</code>.* <code>NaN</code>: for other not-a-numbers, like result of division by zero.</td>
<td>read</td>
</tr>
<tr>
<td><code>compression</code></td>
<td>(none)</td>
<td>Compression codec to use when saving to file. This can be one of the known case-insensitive shorten names<br /> (none, bzip2, gzip, lz4, snappy and deflate). JSON built-in functions ignore this option.</td>
<td>write</td>
</tr>
<tr>
<td><code>ignoreNullFields</code></td>
<td>(value of <code>spark.sql.jsonGenerator.ignoreNullFields</code> configuration)</td>
<td>Whether to ignore null fields when generating JSON objects.</td>
<td>write</td>
</tr>
</tbody></table>
<h3 id="csv"><a href="#csv" class="headerlink" title="csv"></a>csv</h3><table>
<thead>
<tr>
<th><strong>Property Name</strong></th>
<th><strong>Default</strong></th>
<th><strong>Meaning</strong></th>
<th><strong>Scope</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>sep</code></td>
<td>,</td>
<td>Sets a separator for each field and value. This separator can be one or more characters.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>encoding</code></td>
<td>UTF-8</td>
<td>For reading, decodes the CSV files by the given encoding type. For writing, specifies encoding (charset) of saved CSV files. CSV built-in functions ignore this option.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>quote</code></td>
<td>“</td>
<td>Sets a single character used for escaping quoted values where the separator can be part of the value. For reading, if you would like to turn off quotations, you need to set not <code>null</code> but an empty string. For writing, if an empty string is set, it uses <code>u0000</code> (null character).</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>quoteAll</code></td>
<td>false</td>
<td>A flag indicating whether all values should always be enclosed in quotes. Default is to only escape values containing a quote character.</td>
<td>write</td>
</tr>
<tr>
<td><code>escape</code></td>
<td>\</td>
<td>Sets a single character used for escaping quotes inside an already quoted value.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>escapeQuotes</code></td>
<td>true</td>
<td>A flag indicating whether values containing quotes should always be enclosed in quotes. Default is to escape all values containing a quote character.</td>
<td>write</td>
</tr>
<tr>
<td><code>comment</code></td>
<td></td>
<td>Sets a single character used for skipping lines beginning with this character. By default, it is disabled.</td>
<td>read</td>
</tr>
<tr>
<td><code>header</code></td>
<td>false</td>
<td>For reading, uses the first line as names of columns. For writing, writes the names of columns as the first line. Note that if the given path is a RDD of Strings, this header option will remove all lines same with the header if exists. CSV built-in functions ignore this option.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>inferSchema</code></td>
<td>false</td>
<td>Infers the input schema automatically from data. It requires one extra pass over the data. CSV built-in functions ignore this option.</td>
<td>read</td>
</tr>
<tr>
<td><code>enforceSchema</code></td>
<td>true</td>
<td>If it is set to <code>true</code>, the specified or inferred schema will be forcibly applied to datasource files, and headers in CSV files will be ignored. If the option is set to <code>false</code>, the schema will be validated against all headers in CSV files in the case when the <code>header</code> option is set to <code>true</code>. Field names in the schema and column names in CSV headers are checked by their positions taking into account <code>spark.sql.caseSensitive</code>. Though the default value is true, it is recommended to disable the <code>enforceSchema</code> option to avoid incorrect results. CSV built-in functions ignore this option.</td>
<td>read</td>
</tr>
<tr>
<td><code>ignoreLeadingWhiteSpace</code></td>
<td><code>false</code> (for reading), <code>true</code> (for writing)</td>
<td>A flag indicating whether or not leading whitespaces from values being read&#x2F;written should be skipped.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>ignoreTrailingWhiteSpace</code></td>
<td><code>false</code> (for reading), <code>true</code> (for writing)</td>
<td>A flag indicating whether or not trailing whitespaces from values being read&#x2F;written should be skipped.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>nullValue</code></td>
<td></td>
<td>Sets the string representation of a null value. Since 2.0.1, this <code>nullValue</code> param applies to all supported types including the string type.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>nanValue</code></td>
<td>NaN</td>
<td>Sets the string representation of a non-number value.</td>
<td>read</td>
</tr>
<tr>
<td><code>positiveInf</code></td>
<td>Inf</td>
<td>Sets the string representation of a positive infinity value.</td>
<td>read</td>
</tr>
<tr>
<td><code>negativeInf</code></td>
<td>-Inf</td>
<td>Sets the string representation of a negative infinity value.</td>
<td>read</td>
</tr>
<tr>
<td><code>dateFormat</code></td>
<td>yyyy-MM-dd</td>
<td>Sets the string that indicates a date format. Custom date formats follow the formats at<a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html">Datetime Patterns</a>. This applies to date type.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>timestampFormat</code></td>
<td>yyyy-MM-dd’T’HH:mm:ss[.SSS][XXX]</td>
<td>Sets the string that indicates a timestamp format. Custom date formats follow the formats at<a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html">Datetime Patterns</a>. This applies to timestamp type.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>timestampNTZFormat</code></td>
<td>yyyy-MM-dd’T’HH:mm:ss[.SSS]</td>
<td>Sets the string that indicates a timestamp without timezone format. Custom date formats follow the formats at<a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html">Datetime Patterns</a>. This applies to timestamp without timezone type, note that zone-offset and time-zone components are not supported when writing or reading this data type.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>maxColumns</code></td>
<td>20480</td>
<td>Defines a hard limit of how many columns a record can have.</td>
<td>read</td>
</tr>
<tr>
<td><code>maxCharsPerColumn</code></td>
<td>-1</td>
<td>Defines the maximum number of characters allowed for any given value being read. By default, it is -1 meaning unlimited length</td>
<td>read</td>
</tr>
<tr>
<td><code>mode</code></td>
<td>PERMISSIVE</td>
<td>Allows a mode for dealing with corrupt records during parsing. It supports the following case-insensitive modes. Note that Spark tries to parse only required columns in CSV under column pruning. Therefore, corrupt records can be different based on required set of fields. This behavior can be controlled by <code>spark.sql.csv.parser.columnPruning.enabled</code> (enabled by default).&#96;&#96;* <code>PERMISSIVE</code>: when it meets a corrupted record, puts the malformed string into a field configured by <code>columnNameOfCorruptRecord</code>, and sets malformed fields to <code>null</code>. To keep corrupt records, an user can set a string type field named <code>columnNameOfCorruptRecord</code> in an user-defined schema. If a schema does not have the field, it drops corrupt records during parsing. A record with less&#x2F;more tokens than schema is not a corrupted record to CSV. When it meets a record having fewer tokens than the length of the schema, sets <code>null</code> to extra fields. When the record has more tokens than the length of the schema, it drops extra tokens.* <code>DROPMALFORMED</code>: ignores the whole corrupted records. This mode is unsupported in the CSV built-in functions.* <code>FAILFAST</code>: throws an exception when it meets corrupted records.</td>
<td>read</td>
</tr>
<tr>
<td><code>columnNameOfCorruptRecord</code></td>
<td>(value of <code>spark.sql.columnNameOfCorruptRecord</code> configuration)</td>
<td>Allows renaming the new field having malformed string created by <code>PERMISSIVE</code> mode. This overrides <code>spark.sql.columnNameOfCorruptRecord</code>.</td>
<td>read</td>
</tr>
<tr>
<td><code>multiLine</code></td>
<td>false</td>
<td>Parse one record, which may span multiple lines, per file. CSV built-in functions ignore this option.</td>
<td>read</td>
</tr>
<tr>
<td><code>charToEscapeQuoteEscaping</code></td>
<td><code>escape</code> or <code>\0</code></td>
<td>Sets a single character used for escaping the escape for the quote character. The default value is escape character when escape and quote characters are different,<code>\0</code> otherwise.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>samplingRatio</code></td>
<td>1.0</td>
<td>Defines fraction of rows used for schema inferring. CSV built-in functions ignore this option.</td>
<td>read</td>
</tr>
<tr>
<td><code>emptyValue</code></td>
<td>(for reading),<code>&quot;&quot;</code> (for writing)</td>
<td>Sets the string representation of an empty value.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>locale</code></td>
<td>en-US</td>
<td>Sets a locale as language tag in IETF BCP 47 format. For instance, this is used while parsing dates and timestamps.</td>
<td>read</td>
</tr>
<tr>
<td><code>lineSep</code></td>
<td><code>\r</code>, <code>\r\n</code> and <code>\n</code> (for reading), <code>\n</code> (for writing)</td>
<td>Defines the line separator that should be used for parsing&#x2F;writing. Maximum length is 1 character. CSV built-in functions ignore this option.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>unescapedQuoteHandling</code></td>
<td>STOP_AT_DELIMITER</td>
<td>Defines how the CsvParser will handle values with unescaped quotes.&#96;&#96;<em><code>STOP_AT_CLOSING_QUOTE</code>: If unescaped quotes are found in the input, accumulate the quote character and proceed parsing the value as a quoted value, until a closing quote is found.</em> <code>BACK_TO_DELIMITER</code>: If unescaped quotes are found in the input, consider the value as an unquoted value. This will make the parser accumulate all characters of the current parsed value until the delimiter is found. If no delimiter is found in the value, the parser will continue accumulating characters from the input until a delimiter or line ending is found.* <code>STOP_AT_DELIMITER</code>: If unescaped quotes are found in the input, consider the value as an unquoted value. This will make the parser accumulate all characters until the delimiter or a line ending is found in the input.* <code>SKIP_VALUE</code>: If unescaped quotes are found in the input, the content parsed for the given value will be skipped and the value set in nullValue will be produced instead.* <code>RAISE_ERROR</code>: If unescaped quotes are found in the input, a TextParsingException will be thrown.</td>
<td>read</td>
</tr>
<tr>
<td><code>compression</code></td>
<td>(none)</td>
<td>Compression codec to use when saving to file. This can be one of the known case-insensitive shorten names (<code>none</code>, <code>bzip2</code>, <code>gzip</code>, <code>lz4</code>, <code>snappy</code> and <code>deflate</code>). CSV built-in functions ignore this option.</td>
<td>write</td>
</tr>
</tbody></table>
<h3 id="jdbc"><a href="#jdbc" class="headerlink" title="jdbc"></a>jdbc</h3><table>
<thead>
<tr>
<th><strong>Property Name</strong></th>
<th><strong>Default</strong></th>
<th><strong>Meaning</strong></th>
<th><strong>Scope</strong></th>
</tr>
</thead>
<tbody><tr>
<td><code>url</code></td>
<td>(none)</td>
<td>The JDBC URL of the form <code>jdbc:subprotocol:subname</code> to connect to. The source-specific connection properties may be specified in the URL. e.g., <code>jdbc:postgresql://localhost/test?user=fred&amp;password=secret</code></td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>dbtable</code></td>
<td>(none)</td>
<td>The JDBC table that should be read from or written into. Note that when using it in the read path anything that is valid in a <code>FROM</code> clause of a SQL query can be used. For example, instead of a full table you could also use a subquery in parentheses. It is not allowed to specify <code>dbtable</code> and <code>query</code> options at the same time.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>query</code></td>
<td>(none)</td>
<td>A query that will be used to read data into Spark. The specified query will be parenthesized and used as a subquery in the <code>FROM</code> clause. Spark will also assign an alias to the subquery clause. As an example, spark will issue a query of the following form to the JDBC Source.<code>SELECT &lt;columns&gt; FROM (&lt;user_specified_query&gt;) spark_gen_alias</code>Below are a couple of restrictions while using this option.<code>1. It is not allowed to specify `dbtable` and `query` options at the same time.1. It is not allowed to specify `query` and `partitionColumn` options at the same time. When specifying `partitionColumn` option is required, the subquery can be specified using `dbtable` option instead and partition columns can be qualified using the subquery alias provided as part of `dbtable`.</code>Example:<code>spark.read.format(&quot;jdbc&quot;).option(&quot;url&quot;, jdbcUrl).option(&quot;query&quot;, &quot;select c1, c2 from t1&quot;).load()</code></td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>driver</code></td>
<td>(none)</td>
<td>The class name of the JDBC driver to use to connect to this URL.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>partitionColumn, lowerBound, upperBound</code></td>
<td>(none)</td>
<td>These options must all be specified if any of them is specified. In addition,<code>numPartitions</code> must be specified. They describe how to partition the table when reading in parallel from multiple workers. <code>partitionColumn</code> must be a numeric, date, or timestamp column from the table in question. Notice that <code>lowerBound</code> and <code>upperBound</code> are just used to decide the partition stride, not for filtering the rows in table. So all rows in the table will be partitioned and returned. This option applies only to reading.</td>
<td>read</td>
</tr>
<tr>
<td><code>numPartitions</code></td>
<td>(none)</td>
<td>The maximum number of partitions that can be used for parallelism in table reading and writing. This also determines the maximum number of concurrent JDBC connections. If the number of partitions to write exceeds this limit, we decrease it to this limit by calling <code>coalesce(numPartitions)</code> before writing.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>queryTimeout</code></td>
<td><code>0</code></td>
<td>The number of seconds the driver will wait for a Statement object to execute to the given number of seconds. Zero means there is no limit. In the write path, this option depends on how JDBC drivers implement the API <code>setQueryTimeout</code>, e.g., the h2 JDBC driver checks the timeout of each query instead of an entire JDBC batch.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>fetchsize</code></td>
<td><code>0</code></td>
<td>The JDBC fetch size, which determines how many rows to fetch per round trip. This can help performance on JDBC drivers which default to low fetch size (e.g. Oracle with 10 rows).</td>
<td>read</td>
</tr>
<tr>
<td><code>batchsize</code></td>
<td><code>1000</code></td>
<td>The JDBC batch size, which determines how many rows to insert per round trip. This can help performance on JDBC drivers. This option applies only to writing.</td>
<td>write</td>
</tr>
<tr>
<td><code>isolationLevel</code></td>
<td><code>READ_UNCOMMITTED</code></td>
<td>The transaction isolation level, which applies to current connection. It can be one of <code>NONE</code>, <code>READ_COMMITTED</code>, <code>READ_UNCOMMITTED</code>, <code>REPEATABLE_READ</code>, or <code>SERIALIZABLE</code>, corresponding to standard transaction isolation levels defined by JDBC’s Connection object, with default of <code>READ_UNCOMMITTED</code>. Please refer the documentation in <code>java.sql.Connection</code>.</td>
<td>write</td>
</tr>
<tr>
<td><code>sessionInitStatement</code></td>
<td>(none)</td>
<td>After each database session is opened to the remote DB and before starting to read data, this option executes a custom SQL statement (or a PL&#x2F;SQL block). Use this to implement session initialization code. Example:<code>option(&quot;sessionInitStatement&quot;, &quot;&quot;&quot;BEGIN execute immediate &#39;alter session set &quot;_serial_direct_read&quot;=true&#39;; END;&quot;&quot;&quot;)</code></td>
<td>read</td>
</tr>
<tr>
<td><code>truncate</code></td>
<td><code>false</code></td>
<td>This is a JDBC writer related option. When <code>SaveMode.Overwrite</code> is enabled, this option causes Spark to truncate an existing table instead of dropping and recreating it. This can be more efficient, and prevents the table metadata (e.g., indices) from being removed. However, it will not work in some cases, such as when the new data has a different schema. In case of failures, users should turn off <code>truncate</code> option to use <code>DROP TABLE</code> again. Also, due to the different behavior of <code>TRUNCATE TABLE</code> among DBMS, it’s not always safe to use this. MySQLDialect, DB2Dialect, MsSqlServerDialect, DerbyDialect, and OracleDialect supports this while PostgresDialect and default JDBCDirect doesn’t. For unknown and unsupported JDBCDirect, the user option <code>truncate</code> is ignored.</td>
<td>write</td>
</tr>
<tr>
<td><code>cascadeTruncate</code></td>
<td>the default cascading truncate behaviour of the JDBC database in question, specified in the <code>isCascadeTruncate</code> in each JDBCDialect</td>
<td>This is a JDBC writer related option. If enabled and supported by the JDBC database (PostgreSQL and Oracle at the moment), this options allows execution of a <code>TRUNCATE TABLE t CASCADE</code> (in the case of PostgreSQL a <code>TRUNCATE TABLE ONLY t CASCADE</code> is executed to prevent inadvertently truncating descendant tables). This will affect other tables, and thus should be used with care.</td>
<td>write</td>
</tr>
<tr>
<td><code>createTableOptions</code></td>
<td></td>
<td>This is a JDBC writer related option. If specified, this option allows setting of database-specific table and partition options when creating a table (e.g.,<code>CREATE TABLE t (name string) ENGINE=InnoDB.</code>).</td>
<td>write</td>
</tr>
<tr>
<td><code>createTableColumnTypes</code></td>
<td>(none)</td>
<td>The database column data types to use instead of the defaults, when creating the table. Data type information should be specified in the same format as CREATE TABLE columns syntax (e.g:<code>&quot;name CHAR(64), comments VARCHAR(1024)&quot;)</code>. The specified types should be valid spark sql data types.</td>
<td>write</td>
</tr>
<tr>
<td><code>customSchema</code></td>
<td>(none)</td>
<td>The custom schema to use for reading data from JDBC connectors. For example,<code>&quot;id DECIMAL(38, 0), name STRING&quot;</code>. You can also specify partial fields, and the others use the default type mapping. For example, <code>&quot;id DECIMAL(38, 0)&quot;</code>. The column names should be identical to the corresponding column names of JDBC table. Users can specify the corresponding data types of Spark SQL instead of using the defaults.</td>
<td>read</td>
</tr>
<tr>
<td><code>pushDownPredicate</code></td>
<td><code>true</code></td>
<td>The option to enable or disable predicate push-down into the JDBC data source. The default value is true, in which case Spark will push down filters to the JDBC data source as much as possible. Otherwise, if set to false, no filter will be pushed down to the JDBC data source and thus all filters will be handled by Spark. Predicate push-down is usually turned off when the predicate filtering is performed faster by Spark than by the JDBC data source.</td>
<td>read</td>
</tr>
<tr>
<td><code>pushDownAggregate</code></td>
<td><code>false</code></td>
<td>The option to enable or disable aggregate push-down in V2 JDBC data source. The default value is false, in which case Spark will not push down aggregates to the JDBC data source. Otherwise, if sets to true, aggregates will be pushed down to the JDBC data source. Aggregate push-down is usually turned off when the aggregate is performed faster by Spark than by the JDBC data source. Please note that aggregates can be pushed down if and only if all the aggregate functions and the related filters can be pushed down. If <code>numPartitions</code> equals to 1 or the group by key is the same as <code>partitionColumn</code>, Spark will push down aggregate to data source completely and not apply a final aggregate over the data source output. Otherwise, Spark will apply a final aggregate over the data source output.</td>
<td>read</td>
</tr>
<tr>
<td><code>pushDownLimit</code></td>
<td><code>false</code></td>
<td>The option to enable or disable LIMIT push-down into V2 JDBC data source. The LIMIT push-down also includes LIMIT + SORT , a.k.a. the Top N operator. The default value is false, in which case Spark does not push down LIMIT or LIMIT with SORT to the JDBC data source. Otherwise, if sets to true, LIMIT or LIMIT with SORT is pushed down to the JDBC data source. If <code>numPartitions</code> is greater than 1, SPARK still applies LIMIT or LIMIT with SORT on the result from data source even if LIMIT or LIMIT with SORT is pushed down. Otherwise, if LIMIT or LIMIT with SORT is pushed down and <code>numPartitions</code> equals to 1, SPARK will not apply LIMIT or LIMIT with SORT on the result from data source.</td>
<td>read</td>
</tr>
<tr>
<td><code>pushDownTableSample</code></td>
<td><code>false</code></td>
<td>The option to enable or disable TABLESAMPLE push-down into V2 JDBC data source. The default value is false, in which case Spark does not push down TABLESAMPLE to the JDBC data source. Otherwise, if value sets to true, TABLESAMPLE is pushed down to the JDBC data source.</td>
<td>read</td>
</tr>
<tr>
<td><code>keytab</code></td>
<td>(none)</td>
<td>Location of the kerberos keytab file (which must be pre-uploaded to all nodes either by <code>--files</code> option of spark-submit or manually) for the JDBC client. When path information found then Spark considers the keytab distributed manually, otherwise <code>--files</code> assumed. If both <code>keytab</code> and <code>principal</code> are defined then Spark tries to do kerberos authentication.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>principal</code></td>
<td>(none)</td>
<td>Specifies kerberos principal name for the JDBC client. If both <code>keytab</code> and <code>principal</code> are defined then Spark tries to do kerberos authentication.</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>refreshKrb5Config</code></td>
<td><code>false</code></td>
<td>This option controls whether the kerberos configuration is to be refreshed or not for the JDBC client before establishing a new connection. Set to true if you want to refresh the configuration, otherwise set to false. The default value is false. Note that if you set this option to true and try to establish multiple connections, a race condition can occur. One possble situation would be like as follows.1. refreshKrb5Config flag is set with security context 11. A JDBC connection provider is used for the corresponding DBMS1. The krb5.conf is modified but the JVM not yet realized that it must be reloaded1. Spark authenticates successfully for security context 11. The JVM loads security context 2 from the modified krb5.conf1. Spark restores the previously saved security context 11. The modified krb5.conf content just gone</td>
<td>read&#x2F;write</td>
</tr>
<tr>
<td><code>connectionProvider</code></td>
<td>(none)</td>
<td>The name of the JDBC connection provider to use to connect to this URL, e.g.<code>db2</code>, <code>mssql</code>. Must be one of the providers loaded with the JDBC data source. Used to disambiguate when more than one provider can handle the specified driver and options. The selected provider must not be disabled by <code>spark.sql.sources.disabledJdbcConnProviderList</code>.</td>
<td>read&#x2F;write</td>
</tr>
</tbody></table>
<h3 id="excel"><a href="#excel" class="headerlink" title="excel"></a>excel</h3><p>暂时没找到，找到再补</p>
<h3 id="hive"><a href="#hive" class="headerlink" title="hive"></a>hive</h3><p>对于hive我们要定义输入格式输出格式甚至是元素内部，以及每个元素之间的分隔符如下</p>
<table>
<thead>
<tr>
<th>Property Name</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td>fileFormat</td>
<td>A fileFormat is kind of a package of storage format specifications, including “serde”, “input format” and “output format”. Currently we support 6 fileFormats: ‘sequencefile’, ‘rcfile’, ‘orc’, ‘parquet’, ‘textfile’ and ‘avro’.</td>
</tr>
<tr>
<td>inputFormat, outputFormat</td>
<td>These 2 options specify the name of a corresponding <code>InputFormat</code> and <code>OutputFormat</code> class as a string literal, e.g. <code>org.apache.hadoop.hive.ql.io.orc.OrcInputFormat</code>. These 2 options must be appeared in a pair, and you can not specify them if you already specified the <code>fileFormat</code> option.</td>
</tr>
<tr>
<td>serde</td>
<td>This option specifies the name of a serde class. When the <code>fileFormat</code> option is specified, do not specify this option if the given <code>fileFormat</code> already include the information of serde. Currently “sequencefile”, “textfile” and “rcfile” don’t include the serde information and you can use this option with these 3 fileFormats.</td>
</tr>
<tr>
<td>fieldDelim, escapeDelim, collectionDelim, mapkeyDelim, lineDelim</td>
<td>These options can only be used with “textfile” fileFormat. They define how to read delimited files into rows.</td>
</tr>
</tbody></table>
<p>关于不同版本的spark关联到hive的源数据库如下配置</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">One <span class="keyword">of</span> the most important pieces <span class="keyword">of</span> Spark <span class="keyword">SQL</span>’s Hive support <span class="keyword">is</span> interaction <span class="keyword">with</span> Hive metastore, which enables Spark <span class="keyword">SQL</span> <span class="keyword">to</span> <span class="keyword">access</span> metadata <span class="keyword">of</span> Hive <span class="keyword">tables</span>. Starting <span class="keyword">from</span> Spark <span class="number">1.4</span><span class="number">.0</span>, a single binary build <span class="keyword">of</span> Spark <span class="keyword">SQL</span> can be used <span class="keyword">to</span> query different versions <span class="keyword">of</span> Hive metastores, <span class="keyword">using</span> the <span class="keyword">configuration</span> described below. Note that independent <span class="keyword">of</span> the <span class="keyword">version</span> <span class="keyword">of</span> Hive that <span class="keyword">is</span> being used <span class="keyword">to</span> talk <span class="keyword">to</span> the metastore, internally Spark <span class="keyword">SQL</span> will compile against built-<span class="keyword">in</span> Hive <span class="keyword">and</span> use those classes <span class="keyword">for</span> <span class="type">internal</span> execution (serdes, UDFs, UDAFs, etc).</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Property Name</th>
<th>Default</th>
<th>Meaning</th>
<th>Since Version</th>
</tr>
</thead>
<tbody><tr>
<td>spark.sql.hive.metastore.version</td>
<td>2.3.9</td>
<td>Version of the Hive metastore. Available options are <code>0.12.0</code> through <code>2.3.9</code> and <code>3.0.0</code> through <code>3.1.2</code>.</td>
<td>1.40</td>
</tr>
<tr>
<td>spark.sql.hive.metastore.jars</td>
<td>builtin</td>
<td>Location of the jars that should be used to instantiate the HiveMetastoreClient.<br />This property can be one of four options:<br />1.builtin<br />Use Hive 2.3.9, which is bundled with the Spark assembly when <code>-Phive</code> is enabled. When this option is chosen, <code>spark.sql.hive.metastore.version</code> must be either <code>2.3.9</code> or not defined.<br />maven<br />Use Hive jars of specified version downloaded from Maven repositories. This configuration is not generally recommended for production deployments.<br />path<br />Use Hive jars configured by <code>spark.sql.hive.metastore.jars.path</code> in comma separated format. Support both local or remote paths. The provided jars should be the same version as <code>spark.sql.hive.metastore.version</code>.<br />A classpath in the standard format for the JVM. This classpath must include all of Hive and its dependencies, including the correct version of Hadoop. The provided jars should be the same version as <code>spark.sql.hive.metastore.version</code>. These jars only need to be present on the driver, but if you are running in yarn cluster mode then you must ensure they are packaged with your application.</td>
<td>1.40</td>
</tr>
<tr>
<td>spark.sql.hive.metastore.jars.path</td>
<td>(empty)</td>
<td>Comma-separated paths of the jars that used to instantiate the HiveMetastoreClient. This configuration is useful only when <code>spark.sql.hive.metastore.jars</code> is set as <code>path</code>.&#96;&#96;The paths can be any of the following format:1. <code>file://path/to/jar/foo.jar</code>1. <code>hdfs://nameservice/path/to/jar/foo.jar</code>1. <code>/path/to/jar/</code>(path without URI scheme follow conf <code>fs.defaultFS</code>‘s URI schema)1. <code>[http/https/ftp]://path/to/jar/foo.jar</code>Note that 1, 2, and 3 support wildcard. For example:1. <code>file://path/to/jar/*,file://path2/to/jar/*/*.jar</code>1. <code>hdfs://nameservice/path/to/jar/*,hdfs://nameservice2/path/to/jar/*/*.jar</code></td>
<td>3.10</td>
</tr>
<tr>
<td>spark.sql.hive.metastore.sharedPrefixes</td>
<td>com.mysql.jdbc,<br />org.postgresql,<br />com.microsoft.sqlserver,<br />oracle.jdbc</td>
<td>A comma-separated list of class prefixes that should be loaded using the classloader that is shared between Spark SQL and a specific version of Hive. An example of classes that should be shared is JDBC drivers that are needed to talk to the metastore. Other classes that need to be shared are those that interact with classes that are already shared. For example, custom appenders that are used by log4j.</td>
<td>1.40</td>
</tr>
<tr>
<td>spark.sql.hive.metastore.barrierPrefixes</td>
<td>(empty)</td>
<td>A comma separated list of class prefixes that should explicitly be reloaded for each version of Hive that Spark SQL is communicating with. For example, Hive UDFs that are declared in a prefix that typically would be shared (i.e.<code>org.apache.spark.*</code>).</td>
<td>1.40</td>
</tr>
</tbody></table>
<h2 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h2><h3 id="TEXT-1"><a href="#TEXT-1" class="headerlink" title="TEXT"></a>TEXT</h3><p>官方简介</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Spark SQL provides spark.<span class="built_in">read</span>().<span class="keyword">text</span>(<span class="string">&quot;file_name&quot;</span>) <span class="built_in">to</span> <span class="built_in">read</span> <span class="keyword">a</span> <span class="built_in">file</span> <span class="keyword">or</span> <span class="built_in">directory</span> <span class="keyword">of</span> <span class="keyword">text</span> <span class="built_in">files</span> <span class="keyword">into</span> <span class="keyword">a</span> Spark DataFrame, <span class="keyword">and</span> dataframe.<span class="built_in">write</span>().<span class="keyword">text</span>(<span class="string">&quot;path&quot;</span>) <span class="built_in">to</span> <span class="built_in">write</span> <span class="built_in">to</span> <span class="keyword">a</span> <span class="keyword">text</span> <span class="built_in">file</span>. When reading <span class="keyword">a</span> <span class="keyword">text</span> <span class="built_in">file</span>, <span class="keyword">each</span> <span class="built_in">line</span> becomes <span class="keyword">each</span> row that has <span class="keyword">string</span> “<span class="built_in">value</span>” column <span class="keyword">by</span> default. The <span class="built_in">line</span> separator can be changed <span class="keyword">as</span> shown <span class="keyword">in</span> <span class="keyword">the</span> example below. The option() <span class="function"><span class="keyword">function</span> <span class="title">can</span> <span class="title">be</span> <span class="title">used</span> <span class="title">to</span> <span class="title">customize</span> <span class="title">the</span> <span class="title">behavior</span> <span class="title">of</span> <span class="title">reading</span> <span class="title">or</span> <span class="title">writing</span>, <span class="title">such</span> <span class="title">as</span> <span class="title">controlling</span> <span class="title">behavior</span> <span class="title">of</span> <span class="title">the</span> <span class="title">line</span> <span class="title">separator</span>, <span class="title">compression</span>, <span class="title">and</span> <span class="title">so</span> <span class="title">on</span>.</span></span><br></pre></td></tr></table></figure>

<p>读的时候我们不用设置压缩格式，它和mr一样会自动解压</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">package sparkfirst</span><br><span class="line"></span><br><span class="line">import org.apache.spark.sql.SparkSession</span><br><span class="line"></span><br><span class="line">object sparksql2 &#123;</span><br><span class="line"><span class="code">  def main(args: Array[String]): Unit = &#123;</span></span><br><span class="line"><span class="code">    val spark = SparkSession.builder().appName(&quot;Sparksql01&quot;).master(&quot;local[4]&quot;).getOrCreate()</span></span><br><span class="line"><span class="code">    val df = spark.read.text(&quot;file:///D:\\test.txt&quot;) // 返回值是DF</span></span><br><span class="line"><span class="code">    df.show()</span></span><br><span class="line"><span class="code">    df.printSchema()</span></span><br><span class="line"><span class="code">  </span></span><br><span class="line"><span class="code">  </span></span><br><span class="line"><span class="code">    var result =</span></span><br><span class="line"><span class="section">      &quot;&quot;&quot;</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line"><span class="section">|               value|</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line">|as,s,ed,f,,,qq,eq...|</span><br><span class="line"><span class="section">|,w,wq,e,w,ewq,we,...|</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line"><span class="code">      &quot;&quot;&quot;</span></span><br><span class="line"><span class="code">  </span></span><br><span class="line"><span class="code">    //text所带有的schame信息是他自己给我们添加上的，所以有时候我们用这个会不方便</span></span><br><span class="line"><span class="code">    val df1 = spark.read.textFile(&quot;file:///D:\\test.txt&quot;) // 返回值是dataset</span></span><br><span class="line"><span class="code">    df1.printSchema()</span></span><br><span class="line"><span class="code">    //--------------------------------------------------------------------</span></span><br><span class="line"><span class="code">    //使用lineSep改变分隔符如下</span></span><br><span class="line"><span class="code">    val df2 = spark.read.option(&quot;lineSep&quot;,&quot;,&quot;).text(&quot;file:///D:\\test.txt&quot;)</span></span><br><span class="line"><span class="code">    df2.show()</span></span><br><span class="line"><span class="code">    result =</span></span><br><span class="line"><span class="section">      &quot;&quot;&quot;</span></span><br><span class="line"><span class="section">+---------+</span></span><br><span class="line"><span class="section">|    value|</span></span><br><span class="line"><span class="section">+---------+</span></span><br><span class="line">|       as|</span><br><span class="line">|        s|</span><br><span class="line">|       ed|</span><br><span class="line">|        f|</span><br><span class="line">|         |</span><br><span class="line">|         |</span><br><span class="line">|       qq|</span><br><span class="line">|eqedqwe\n|</span><br><span class="line">|        w|</span><br><span class="line">|       wq|</span><br><span class="line">|        e|</span><br><span class="line">|        w|</span><br><span class="line">|      ewq|</span><br><span class="line">|       we|</span><br><span class="line">|        q|</span><br><span class="line">|        e|</span><br><span class="line">|wewqeqwel|</span><br><span class="line">|       qe|</span><br><span class="line">| lqeweqwl|</span><br><span class="line"><span class="section">|     qw\n|</span></span><br><span class="line"><span class="section">+---------+</span></span><br><span class="line"><span class="code">      &quot;&quot;&quot;</span></span><br><span class="line"><span class="code">    //---------------------------------------------------------------------</span></span><br><span class="line"><span class="code">    //使用wholetext把一整个文件当作一行来接受</span></span><br><span class="line"><span class="code">    val df3 = spark.read.option(&quot;wholetext&quot;,true).text(&quot;file:///D:\\test.txt&quot;)</span></span><br><span class="line"><span class="code">    df3.show()</span></span><br><span class="line"><span class="code">    var result =</span></span><br><span class="line"><span class="section">      &quot;&quot;&quot;</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line"><span class="section">|               value|</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line"><span class="section">|as,s,ed,f,,,qq,eq...|</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line"><span class="code">      &quot;&quot;&quot;</span></span><br><span class="line"><span class="code">    //这里的text和textFile是可以相互用的</span></span><br><span class="line"><span class="code">    val df4 = spark.read.option(&quot;wholetext&quot;,true).textFile(&quot;file:///D:\\test.txt&quot;)</span></span><br><span class="line"><span class="code">    df4.show()</span></span><br><span class="line"><span class="code">    var result =</span></span><br><span class="line"><span class="section">      &quot;&quot;&quot;</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line"><span class="section">|               value|</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line"><span class="section">|as,s,ed,f,,,qq,eq...|</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line"><span class="code">      &quot;&quot;&quot;</span></span><br><span class="line"><span class="code">    val df5 = spark.read.option(&quot;wholetext&quot;,true).format(&quot;text&quot;).load(&quot;file:///D:\\test.txt&quot;)</span></span><br><span class="line"><span class="code">    df5.show()</span></span><br><span class="line"><span class="code">    var result =</span></span><br><span class="line"><span class="section">      &quot;&quot;&quot;</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line"><span class="section">|               value|</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line"><span class="section">|as,s,ed,f,,,qq,eq...|</span></span><br><span class="line"><span class="section">+--------------------+</span></span><br><span class="line"><span class="code">      &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们点进去源码发现text的底层是</p>
<p><code>def text(paths: String*): DataFrame = format(&quot;text&quot;).load(paths : _*)</code></p>
<p>所以我们使用的时候可以</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">val df5=spark.<span class="keyword">read</span>.<span class="keyword">option</span>(&quot;wholetext&quot;,<span class="keyword">true</span>).format(&quot;text&quot;).<span class="keyword">load</span>(&quot;file:///D:\\test.txt&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="json-1"><a href="#json-1" class="headerlink" title="json"></a>json</h3><p>简介</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Spark <span class="keyword">SQL</span> can automatically infer the <span class="keyword">schema</span> <span class="keyword">of</span> a <span class="type">JSON</span> dataset <span class="keyword">and</span> <span class="keyword">load</span> it <span class="keyword">as</span> a Dataset[<span class="keyword">Row</span>]. This <span class="keyword">conversion</span> can be done <span class="keyword">using</span> SparkSession.<span class="keyword">read</span>.json() <span class="keyword">on</span> either a Dataset[String], <span class="keyword">or</span> a <span class="type">JSON</span> file.</span><br><span class="line"></span><br><span class="line">Note that the file that <span class="keyword">is</span> offered <span class="keyword">as</span> a <span class="type">json</span> file <span class="keyword">is</span> <span class="keyword">not</span> a typical <span class="type">JSON</span> file. <span class="keyword">Each</span> <span class="type">line</span> must contain a separate, self-contained <span class="keyword">valid</span> <span class="type">JSON</span> <span class="keyword">object</span>. <span class="keyword">For</span> more information, please see <span class="type">JSON</span> Lines <span class="type">text</span> <span class="keyword">format</span>, <span class="keyword">also</span> <span class="keyword">called</span> newline-delimited <span class="type">JSON</span>.</span><br><span class="line"></span><br><span class="line"><span class="keyword">For</span> a regular multi-<span class="type">line</span> <span class="type">JSON</span> file, <span class="keyword">set</span> the multiLine <span class="keyword">option</span> <span class="keyword">to</span> <span class="keyword">true</span>.</span><br></pre></td></tr></table></figure>

<p>json分为简单json和嵌套json</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">val spark = SparkSession.builder().appName(<span class="string">&quot;Sparksql01&quot;</span>).master(<span class="string">&quot;local[4]&quot;</span>).getOrCreate()</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>-------------------------普通json</span><br><span class="line">val df = spark.read.json(<span class="string">&quot;file:///C:\\Users\\dell\\Desktop\\dept.json&quot;</span>)</span><br><span class="line">df.show()</span><br><span class="line">df.printSchema()</span><br><span class="line"><span class="regexp">//</span>--------------------------嵌套json如果嵌套的是STruct =&gt; 打点 / ARRAY 类型 先炸开 再打点</span><br><span class="line">var df1 = spark.read.format(<span class="string">&quot;json&quot;</span>).load(<span class="string">&quot;file:///C:\\Users\\dell\\Desktop\\Skills.json&quot;</span>)</span><br><span class="line">df1.printSchema()</span><br><span class="line"><span class="regexp">//</span>--------------------------api</span><br><span class="line"><span class="regexp">//</span>-withColumn可以增加一个字段，或者把一个字段重命名 =》 提出字段</span><br><span class="line">df1=df1.withColumn(<span class="string">&quot;critical&quot;</span>,col(<span class="string">&quot;damage.critical&quot;</span>))</span><br><span class="line">df1=df1.withColumn(<span class="string">&quot;elementId&quot;</span>,explode(col(<span class="string">&quot;damage.elementId&quot;</span>)))</span><br><span class="line">df1.printSchema()</span><br><span class="line"><span class="regexp">//</span>------------------------删除字段</span><br><span class="line">df1=df1.drop(<span class="string">&quot;damage.critical&quot;</span>,<span class="string">&quot;damage.elementId&quot;</span>)</span><br><span class="line"><span class="regexp">//</span>-------------------------sql</span><br><span class="line"><span class="regexp">//</span>------------------------对比hivesql</span><br><span class="line">df1.createOrReplaceTempView(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="regexp">//</span>spark.sql(<span class="string">&quot;SELECT get_json_object(&#x27;&#123;\&quot;a\&quot;:\&quot;b\&quot;&#125;&#x27;, &#x27;$.a&#x27;);&quot;</span>).show()</span><br><span class="line"><span class="regexp">//</span> struct可以用下面打点的方法</span><br><span class="line">spark.sql(</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    |select</span></span><br><span class="line"><span class="string">    |effects.ddd,</span></span><br><span class="line"><span class="string">    |damage.ddddds</span></span><br><span class="line"><span class="string">    |from</span></span><br><span class="line"><span class="string">    |test</span></span><br><span class="line"><span class="string">    |&quot;&quot;&quot;</span>.stripMargin).show()</span><br><span class="line"><span class="regexp">//</span>或者用爆炸加侧写进行 ：array元素,嵌套json</span><br><span class="line">spark.sql(</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    |select</span></span><br><span class="line"><span class="string">    |effects.ddd,</span></span><br><span class="line"><span class="string">    |damage.ddddds</span></span><br><span class="line"><span class="string">    |from</span></span><br><span class="line"><span class="string">    |test</span></span><br><span class="line"><span class="string">    |lateral view explode(store.fruit) as fruit</span></span><br><span class="line"><span class="string">    |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="csv-1"><a href="#csv-1" class="headerlink" title="csv"></a>csv</h3><p>简介</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Spark SQL provides spark.<span class="built_in">read</span>().csv(<span class="string">&quot;file_name&quot;</span>) <span class="built_in">to</span> <span class="built_in">read</span> <span class="keyword">a</span> <span class="built_in">file</span> <span class="keyword">or</span> <span class="built_in">directory</span> <span class="keyword">of</span> <span class="built_in">files</span> <span class="keyword">in</span> CSV <span class="built_in">format</span> <span class="keyword">into</span> Spark DataFrame, <span class="keyword">and</span> dataframe.<span class="built_in">write</span>().csv(<span class="string">&quot;path&quot;</span>) <span class="built_in">to</span> <span class="built_in">write</span> <span class="built_in">to</span> <span class="keyword">a</span> CSV <span class="built_in">file</span>. Function option() can be used <span class="built_in">to</span> customize <span class="keyword">the</span> behavior <span class="keyword">of</span> reading <span class="keyword">or</span> writing, such <span class="keyword">as</span> controlling behavior <span class="keyword">of</span> <span class="keyword">the</span> header, delimiter <span class="keyword">character</span>, <span class="keyword">character</span> <span class="built_in">set</span>, <span class="keyword">and</span> so on.</span><br></pre></td></tr></table></figure>

<p>csv文件默认的分隔符是，但是可以更改</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">val spark = SparkSession.builder().appName(<span class="string">&quot;Sparksql01&quot;</span>).master(<span class="string">&quot;local[4]&quot;</span>).getOrCreate()</span><br><span class="line"></span><br><span class="line">val df = spark.read.format(<span class="string">&quot;csv&quot;</span>).load(<span class="string">&quot;file:///C:\\Users\\dell\\Desktop\\user_profile.csv&quot;</span>)</span><br><span class="line">df.show()</span><br><span class="line">var result=</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">|+---+---------+------+----+----------+---+--------------------+------------+----------+</span></span><br><span class="line">    <span class="string">||_c0|      _c1|   _c2| _c3|       _c4|_c5|                 _c6|         _c7|       _c8|</span></span><br><span class="line">    <span class="string">|+---+---------+------+----+----------+---+--------------------+------------+----------+</span></span><br><span class="line">    <span class="string">|| id|device_id|gender| age|university|gpa|active_days_withi...|question_cnt|answer_cnt|</span></span><br><span class="line">    <span class="string">||  1|     2138|  male|  21|  北京大学|3.4|                   7|           2|        12|</span></span><br><span class="line">    <span class="string">||  2|     3214|  male|null|  复旦大学|  4|                  15|           5|        25|</span></span><br><span class="line">    <span class="string">||  3|     6543|female|  20|  北京大学|3.2|                  12|           3|        30|</span></span><br><span class="line">    <span class="string">||  4|     2315|female|  23|  浙江大学|3.6|                   5|           1|         2|</span></span><br><span class="line">    <span class="string">||  5|     5432|  male|  25|  山东大学|3.8|                  20|          15|        70|</span></span><br><span class="line">    <span class="string">||  6|     2131|  male|  28|  山东大学|3.3|                  15|           7|        13|</span></span><br><span class="line">    <span class="string">||  7|     4321|  male|  28|  复旦大学|3.6|                   9|           6|        52|</span></span><br><span class="line">    <span class="string">|+---+---------+------+----+----------+---+--------------------+------------+----------+</span></span><br><span class="line">    <span class="string">|&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line"><span class="comment">// 这样默认是通过，进行分割的</span></span><br><span class="line"><span class="comment">//可以通过delimiter来设置分割参数，sep和他一样</span></span><br><span class="line">val df1 = spark.read.option(<span class="string">&quot;delimiter&quot;</span>,<span class="string">&quot;;&quot;</span>).csv(<span class="string">&quot;file:///C:\\Users\\dell\\Desktop\\user_profile.csv&quot;</span>)</span><br><span class="line">df1.show()</span><br><span class="line">result =</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">|+------------------------+</span></span><br><span class="line">    <span class="string">||                     _c0|</span></span><br><span class="line">    <span class="string">|+------------------------+</span></span><br><span class="line">    <span class="string">||    &quot;</span>id<span class="string">&quot;,&quot;</span>device_id<span class="string">&quot;,...|</span></span><br><span class="line">    <span class="string">||  1,2138,male,21,北京...|</span></span><br><span class="line">    <span class="string">||2,3214,male,,复旦大学...|</span></span><br><span class="line">    <span class="string">||    3,6543,female,20,...|</span></span><br><span class="line">    <span class="string">||    4,2315,female,23,...|</span></span><br><span class="line">    <span class="string">||  5,5432,male,25,山东...|</span></span><br><span class="line">    <span class="string">||  6,2131,male,28,山东...|</span></span><br><span class="line">    <span class="string">||  7,4321,male,28,复旦...|</span></span><br><span class="line">    <span class="string">|+------------------------+</span></span><br><span class="line">    <span class="string">|&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">val df4 = spark.read.option(<span class="string">&quot;sep&quot;</span>,<span class="string">&quot;;&quot;</span>).csv(<span class="string">&quot;file:///C:\\Users\\dell\\Desktop\\user_profile.csv&quot;</span>)</span><br><span class="line">df4.show()</span><br><span class="line">result =</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">|+------------------------+</span></span><br><span class="line">    <span class="string">||                     _c0|</span></span><br><span class="line">    <span class="string">|+------------------------+</span></span><br><span class="line">    <span class="string">||    &quot;</span>id<span class="string">&quot;,&quot;</span>device_id<span class="string">&quot;,...|</span></span><br><span class="line">    <span class="string">||  1,2138,male,21,北京...|</span></span><br><span class="line">    <span class="string">||2,3214,male,,复旦大学...|</span></span><br><span class="line">    <span class="string">||    3,6543,female,20,...|</span></span><br><span class="line">    <span class="string">||    4,2315,female,23,...|</span></span><br><span class="line">    <span class="string">||  5,5432,male,25,山东...|</span></span><br><span class="line">    <span class="string">||  6,2131,male,28,山东...|</span></span><br><span class="line">    <span class="string">||  7,4321,male,28,复旦...|</span></span><br><span class="line">    <span class="string">|+------------------------+</span></span><br><span class="line">    <span class="string">|&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line"><span class="comment">//还可以从csv里加载表头</span></span><br><span class="line">val df2 = spark.read.option(<span class="string">&quot;delimiter&quot;</span>,<span class="string">&quot;,&quot;</span>).option(<span class="string">&quot;header&quot;</span>,<span class="string">&quot;true&quot;</span>).format(<span class="string">&quot;csv&quot;</span>).load(<span class="string">&quot;file:///C:\\Users\\dell\\Desktop\\user_profile.csv&quot;</span>)</span><br><span class="line">df2.show()</span><br><span class="line">result=</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">|+---+---------+------+----+----------+---+---------------------+------------+----------+</span></span><br><span class="line">    <span class="string">|| id|device_id|gender| age|university|gpa|active_days_within_30|question_cnt|answer_cnt|</span></span><br><span class="line">    <span class="string">|+---+---------+------+----+----------+---+---------------------+------------+----------+</span></span><br><span class="line">    <span class="string">||  1|     2138|  male|  21|  北京大学|3.4|                    7|           2|        12|</span></span><br><span class="line">    <span class="string">||  2|     3214|  male|null|  复旦大学|  4|                   15|           5|        25|</span></span><br><span class="line">    <span class="string">||  3|     6543|female|  20|  北京大学|3.2|                   12|           3|        30|</span></span><br><span class="line">    <span class="string">||  4|     2315|female|  23|  浙江大学|3.6|                    5|           1|         2|</span></span><br><span class="line">    <span class="string">||  5|     5432|  male|  25|  山东大学|3.8|                   20|          15|        70|</span></span><br><span class="line">    <span class="string">||  6|     2131|  male|  28|  山东大学|3.3|                   15|           7|        13|</span></span><br><span class="line">    <span class="string">||  7|     4321|  male|  28|  复旦大学|3.6|                    9|           6|        52|</span></span><br><span class="line">    <span class="string">|+---+---------+------+----+----------+---+---------------------+------------+----------+</span></span><br><span class="line">    <span class="string">|&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line"><span class="comment">//还可以把上面两个option合并</span></span><br><span class="line">val df3 = spark.read.options(Map(<span class="string">&quot;delimiter&quot;</span> -&gt; <span class="string">&quot;,&quot;</span> ,<span class="string">&quot;header&quot;</span> -&gt; <span class="string">&quot;true&quot;</span>)).csv(<span class="string">&quot;file:///C:\\Users\\dell\\Desktop\\user_profile.csv&quot;</span>)</span><br><span class="line">df3.show()</span><br><span class="line">result=</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">|+---+---------+------+----+----------+---+---------------------+------------+----------+</span></span><br><span class="line">    <span class="string">|| id|device_id|gender| age|university|gpa|active_days_within_30|question_cnt|answer_cnt|</span></span><br><span class="line">    <span class="string">|+---+---------+------+----+----------+---+---------------------+------------+----------+</span></span><br><span class="line">    <span class="string">||  1|     2138|  male|  21|  北京大学|3.4|                    7|           2|        12|</span></span><br><span class="line">    <span class="string">||  2|     3214|  male|null|  复旦大学|  4|                   15|           5|        25|</span></span><br><span class="line">    <span class="string">||  3|     6543|female|  20|  北京大学|3.2|                   12|           3|        30|</span></span><br><span class="line">    <span class="string">||  4|     2315|female|  23|  浙江大学|3.6|                    5|           1|         2|</span></span><br><span class="line">    <span class="string">||  5|     5432|  male|  25|  山东大学|3.8|                   20|          15|        70|</span></span><br><span class="line">    <span class="string">||  6|     2131|  male|  28|  山东大学|3.3|                   15|           7|        13|</span></span><br><span class="line">    <span class="string">||  7|     4321|  male|  28|  复旦大学|3.6|                    9|           6|        52|</span></span><br><span class="line">    <span class="string">|+---+---------+------+----+----------+---+---------------------+------------+----------+</span></span><br><span class="line">    <span class="string">|&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line"><span class="comment">//还可以加上自动推断类型，如果不加，它就会默认是字符串类型inferSchema</span></span><br><span class="line">val df5 = spark.read.options(Map(<span class="string">&quot;sep&quot;</span>-&gt;<span class="string">&quot;,&quot;</span>,<span class="string">&quot;header&quot;</span>-&gt;<span class="string">&quot;true&quot;</span>,<span class="string">&quot;inferSchema&quot;</span>-&gt;<span class="string">&quot;true&quot;</span>,<span class="string">&quot;encoding&quot;</span>-&gt;<span class="string">&quot;UTF8&quot;</span>)).csv(<span class="string">&quot;file:///C:\\Users\\dell\\Desktop\\user_profile.csv&quot;</span>)</span><br><span class="line">df5.show()</span><br><span class="line">result=</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">|+---+---------+------+----+----------+---+---------------------+------------+----------+</span></span><br><span class="line">    <span class="string">|| id|device_id|gender| age|university|gpa|active_days_within_30|question_cnt|answer_cnt|</span></span><br><span class="line">    <span class="string">|+---+---------+------+----+----------+---+---------------------+------------+----------+</span></span><br><span class="line">    <span class="string">||  1|     2138|  male|  21|  北京大学|3.4|                    7|           2|        12|</span></span><br><span class="line">    <span class="string">||  2|     3214|  male|null|  复旦大学|4.0|                   15|           5|        25|</span></span><br><span class="line">    <span class="string">||  3|     6543|female|  20|  北京大学|3.2|                   12|           3|        30|</span></span><br><span class="line">    <span class="string">||  4|     2315|female|  23|  浙江大学|3.6|                    5|           1|         2|</span></span><br><span class="line">    <span class="string">||  5|     5432|  male|  25|  山东大学|3.8|                   20|          15|        70|</span></span><br><span class="line">    <span class="string">||  6|     2131|  male|  28|  山东大学|3.3|                   15|           7|        13|</span></span><br><span class="line">    <span class="string">||  7|     4321|  male|  28|  复旦大学|3.6|                    9|           6|        52|</span></span><br><span class="line">    <span class="string">|+---+---------+------+----+----------+---+---------------------+------------+----------+</span></span><br><span class="line">    <span class="string">|&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">df5.printSchema()</span><br><span class="line">result=</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">|root</span></span><br><span class="line">    <span class="string">| |-- id: integer (nullable = true)</span></span><br><span class="line">    <span class="string">| |-- device_id: integer (nullable = true)</span></span><br><span class="line">    <span class="string">| |-- gender: string (nullable = true)</span></span><br><span class="line">    <span class="string">| |-- age: integer (nullable = true)</span></span><br><span class="line">    <span class="string">| |-- university: string (nullable = true)</span></span><br><span class="line">    <span class="string">| |-- gpa: double (nullable = true)</span></span><br><span class="line">    <span class="string">| |-- active_days_within_30: integer (nullable = true)</span></span><br><span class="line">    <span class="string">| |-- question_cnt: integer (nullable = true)</span></span><br><span class="line">    <span class="string">| |-- answer_cnt: integer (nullable = true)</span></span><br><span class="line">    <span class="string">|&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line"><span class="comment">//等 剩下的请看api简介</span></span><br><span class="line"></span><br><span class="line">df5.createOrReplaceTempView(<span class="string">&quot;csv&quot;</span>)</span><br><span class="line">spark.sql(</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">|select</span></span><br><span class="line">    <span class="string">|gender,</span></span><br><span class="line">    <span class="string">|device_id,</span></span><br><span class="line">    <span class="string">|active_days_within_30,</span></span><br><span class="line">    <span class="string">|university</span></span><br><span class="line">    <span class="string">|from</span></span><br><span class="line">    <span class="string">|csv</span></span><br><span class="line">    <span class="string">|where university = &#x27;北京大学&#x27;</span></span><br><span class="line">    <span class="string">|&quot;&quot;&quot;</span>.stripMargin).show()</span><br><span class="line"></span><br><span class="line">result=</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">|+------+---------+---------------------+----------+</span></span><br><span class="line">    <span class="string">||gender|device_id|active_days_within_30|university|</span></span><br><span class="line">    <span class="string">|+------+---------+---------------------+----------+</span></span><br><span class="line">    <span class="string">||  male|     2138|                    7|  北京大学|</span></span><br><span class="line">    <span class="string">||female|     6543|                   12|  北京大学|</span></span><br><span class="line">    <span class="string">|+------+---------+---------------------+----------+</span></span><br><span class="line">    <span class="string">|&quot;&quot;&quot;</span>.stripMargin</span><br></pre></td></tr></table></figure>

<h3 id="jdbc-1"><a href="#jdbc-1" class="headerlink" title="jdbc"></a>jdbc</h3><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">val spark = SparkSession.builder().appName(<span class="string">&quot;Sparksql01&quot;</span>).master(<span class="string">&quot;local[4]&quot;</span>).getOrCreate()</span><br><span class="line"></span><br><span class="line"><span class="comment">//用代码创建</span></span><br><span class="line">val df = spark.read.format(<span class="string">&quot;JDBC&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;jdbc:mysql://bigdata2:3306/try&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;emp&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;liuzihan010616&quot;</span>)</span><br><span class="line">  .load()</span><br><span class="line">df.printSchema()</span><br><span class="line">df.show()</span><br><span class="line"><span class="comment">// 但是这样传入是把整个表直接传进来，但是有时候我们只要其中一一部分可以这样相当于谓词下压</span></span><br><span class="line">    val sal =</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">|select</span></span><br><span class="line">    <span class="string">|*</span></span><br><span class="line">    <span class="string">|from</span></span><br><span class="line">    <span class="string">|emp where sal &gt; 1500</span></span><br><span class="line">    <span class="string">|&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">val df1 = spark.read.format(<span class="string">&quot;JDBC&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;jdbc:mysql://bigdata2:3306/try&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;dbtable&quot;</span>, s<span class="string">&quot;($sal) as tmp&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;liuzihan010616&quot;</span>)</span><br><span class="line">  .load()</span><br><span class="line">df1.show()</span><br><span class="line"> result =</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">|+-----+------+---------+----+-------------------+-------+-------+------+</span></span><br><span class="line">    <span class="string">||empno| ename|      job| mgr|           hiredate|    sal|   comm|deptno|</span></span><br><span class="line">    <span class="string">|+-----+------+---------+----+-------------------+-------+-------+------+</span></span><br><span class="line">    <span class="string">|| 7499| ALLEN| SALESMAN|7698|1981-02-20 00:00:00|1600.00| 300.00|    30|</span></span><br><span class="line">    <span class="string">|| 7566| JONES|  MANAGER|7839|1981-04-02 00:00:00|2975.00|   null|    20|</span></span><br><span class="line">    <span class="string">|| 7698| BLAKE|  MANAGER|7839|1981-05-01 00:00:00|2850.00|   null|    30|</span></span><br><span class="line">    <span class="string">|| 7782| CLARK|  MANAGER|7839|1981-06-09 00:00:00|2450.00|   null|    10|</span></span><br><span class="line">    <span class="string">|| 7788| SCOTT|  ANALYST|7566|1982-12-09 00:00:00|3000.00|   null|    20|</span></span><br><span class="line">    <span class="string">|| 7839|  KING|PRESIDENT|null|1981-11-17 00:00:00|5000.00|   null|    10|</span></span><br><span class="line">    <span class="string">|| 7902|  FORD|  ANALYST|7566|1981-12-03 00:00:00|3000.00|   null|    20|</span></span><br><span class="line">    <span class="string">|| 7839|  KING|PRESIDENT|null|1981-11-17 00:00:00|5000.00|   null|    10|</span></span><br><span class="line">    <span class="string">|| 7654|MARTIN| SALESMAN|7698|1981-09-28 00:00:00|3200.00|1400.00|    30|</span></span><br><span class="line">    <span class="string">|| 7788| SCOTT|  ANALYST|7566|1982-12-09 00:00:00|3000.00|   null|    20|</span></span><br><span class="line">    <span class="string">|| 7788| SCOTT|  ANALYST|7566|1982-12-09 00:00:00|3000.00|   null|    20|</span></span><br><span class="line">    <span class="string">|| 7788| SCOTT|  ANALYST|7566|1982-12-09 00:00:00|3000.00|   null|    20|</span></span><br><span class="line">    <span class="string">|| 7788| SCOTT|  ANALYST|7566|1982-12-09 00:00:00|3000.00|   null|    20|</span></span><br><span class="line">    <span class="string">|| 7788| SCOTT|  ANALYST|7566|1982-12-09 00:00:00|3000.00|   null|    20|</span></span><br><span class="line">    <span class="string">|| 7788| SCOTT|  ANALYST|7566|1982-12-09 00:00:00|3000.00|   null|    20|</span></span><br><span class="line">    <span class="string">|| 7788| SCOTT|  ANALYST|7566|1982-12-09 00:00:00|3000.00|   null|    20|</span></span><br><span class="line">    <span class="string">|| 7788| SCOTT|  ANALYST|7566|1982-12-09 00:00:00|3000.00|   null|    20|</span></span><br><span class="line">    <span class="string">|| 7788| SCOTT|  ANALYST|7566|1982-12-09 00:00:00|3000.00|   null|    20|</span></span><br><span class="line">    <span class="string">|| 7788| SCOTT|  ANALYST|7566|1982-12-09 00:00:00|3000.00|   null|    20|</span></span><br><span class="line">    <span class="string">|| 7788| SCOTT|  ANALYST|7566|1982-12-09 00:00:00|3000.00|   null|    20|</span></span><br><span class="line">    <span class="string">|+-----+------+---------+----+-------------------+-------+-------+------+</span></span><br><span class="line">    <span class="string">|only showing top 20 rows</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">|Process finished with exit code 0</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">|&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line"><span class="comment">//用Properties传入</span></span><br><span class="line">val connectionProperties = new Properties()</span><br><span class="line">connectionProperties.put(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">connectionProperties.put(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;liuzihan010616&quot;</span>)</span><br><span class="line">val jdbcDF2 = spark.read</span><br><span class="line">  .jdbc(<span class="string">&quot;jdbc:mysql://bigdata2:3306/try&quot;</span>, <span class="string">&quot;try.emp&quot;</span>, connectionProperties)</span><br></pre></td></tr></table></figure>

<h3 id="excel-1"><a href="#excel-1" class="headerlink" title="excel"></a>excel</h3><p>在idea里要先导入spark-excel的pom：这里的版本要和scala对应上</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;dependency&gt;</span></span><br><span class="line">   <span class="section">&lt;groupId&gt;</span><span class="attribute">com</span>.crealytics&lt;/groupId&gt;</span><br><span class="line">   <span class="section">&lt;artifactId&gt;</span><span class="attribute">spark</span>-excel_2.<span class="number">12</span>&lt;/artifactId&gt;</span><br><span class="line">   <span class="section">&lt;version&gt;</span><span class="attribute">0</span>.<span class="number">14</span>.<span class="number">0</span>&lt;/version&gt;</span><br><span class="line"> <span class="section">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后代码</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">package sparkfirst</span><br><span class="line"></span><br><span class="line">import java.util.Properties</span><br><span class="line"></span><br><span class="line">import org.apache.spark.sql.SparkSession</span><br><span class="line">import org.apache.spark.sql.functions._</span><br><span class="line">import com.crealytics.spark.excel._</span><br><span class="line">object sparksql2 &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    val spark = SparkSession.builder().appName(<span class="string">&quot;Sparksql01&quot;</span>).master(<span class="string">&quot;local[4]&quot;</span>).getOrCreate()</span><br><span class="line">    val df = spark.read.excel(header = true,inferSchema = true).load(<span class="string">&quot;file:////C:\\Users\\dell\\Desktop\\2023届毕业设计题目-计算机-选题志愿表.xlsx&quot;</span>)</span><br><span class="line">    df.show()</span><br><span class="line">    val result =</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">|+--------------------------------------+--------+-------------------------------------+------+--------+--------+--------+</span></span><br><span class="line">        <span class="string">||2023届计算机科学与技术专业毕业设计选题|     _c1|                                  _c2|   _c3|     _c4|     _c5|     _c6|</span></span><br><span class="line">        <span class="string">|+--------------------------------------+--------+-------------------------------------+------+--------+--------+--------+</span></span><br><span class="line">        <span class="string">||                                  序号|指导老师|                                 题目|学生数|第一志愿|第二志愿|第三志愿|</span></span><br><span class="line">        <span class="string">||                                     1|  王海涛|          基于android的房产中介app...|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                     2|  王海涛|        基于android的酒店预约入住a...|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                     3|  王海涛|          基于android的有声书app的...|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                     4|  王海涛|          基于android的掌上医院app...|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                     5|  王海涛|    基于web的考试管理系统的设计与实现|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                     6|    王琢|           电商平台产品评论爬虫的设计|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                     7|    王琢|     基于Django的智能水务系统前端开发|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                     8|    王琢|           个人账本管理微信小程序开发|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                     9|    王琢|       智能水务系统远程监控模块的开发|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                    10|  张文波|基于安卓系统的硕士研究生招生预报名...|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                    11|  张文波|面向工业互联网的联网设备故障检测技...|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                    12|  张文波|面向工业互联网的联网设备运行维护系...|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                    13|    曹烨|     疫情防控管理信息系统的设计与开发|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                    14|    曹烨|             多线程下载器的设计与开发|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                    15|    曹烨|             坦克对战游戏的设计与开发|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                    16|    曹烨|           五子棋游戏大厅的设计与开发|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                    17|    杜焱|       疫情封闭人员及物资管理系统开发|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                    18|    杜焱|                   志愿者服务系统开发|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">||                                    19|    杜焱|         高校教师工作绩效管理系统开发|     1|    null|    null|    null|</span></span><br><span class="line">        <span class="string">|+--------------------------------------+--------+-------------------------------------+------+--------+--------+--------+</span></span><br><span class="line">        <span class="string">|only showing top 20 rows</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">|Process finished with exit code 0</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">|&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="hive-1"><a href="#hive-1" class="headerlink" title="hive"></a>hive</h3><p>在生产上我们要对配置文件进行修改</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Configuration</span> <span class="keyword">of</span> Hive <span class="keyword">is</span> done <span class="keyword">by</span> <span class="keyword">placing</span> your hive-site.xml, core-site.xml (<span class="keyword">for</span> <span class="keyword">security</span> <span class="keyword">configuration</span>), <span class="keyword">and</span> hdfs-site.xml (<span class="keyword">for</span> HDFS <span class="keyword">configuration</span>) file <span class="keyword">in</span> conf/.</span><br></pre></td></tr></table></figure>

<p>直接cp hivehome 下的配置文件 hive-site.xml到spark的配置下或者做软连接到spark的配置文件下</p>
<p>即使hive和spark不在同一台机器上也是可以的，只不过不能做软连接了</p>
<p>如果缺少mysql驱动的化把mysql驱动添加到spark的jar文件夹里就好</p>
<p>或者用 –jars 路径 来配置启动方式</p>
<p>接下来我们直接执行如下语句</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">scala&gt; spark.sql(&quot;show databases&quot;).show</span></span><br><span class="line"><span class="section">+-------------+</span></span><br><span class="line"><span class="section">|    namespace|</span></span><br><span class="line"><span class="section">+-------------+</span></span><br><span class="line">|      bigdata|</span><br><span class="line">| bigdata<span class="emphasis">_hive|</span></span><br><span class="line"><span class="emphasis">|bigdata_hive2|</span></span><br><span class="line"><span class="emphasis">|bigdata_hive3|</span></span><br><span class="line"><span class="emphasis">|bigdata_</span>hive4|</span><br><span class="line">|      default|</span><br><span class="line"><span class="section">|         test|</span></span><br><span class="line"><span class="section">+-------------+</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们可以用spark-sql脚本来执行hive的语句</p>
<p>如下：</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">[hadoop@bigdata5 conf]$ spark-sql --master <span class="keyword">local</span>[<span class="number">4</span>]</span><br><span class="line">Setting <span class="keyword">default</span> <span class="built_in">log</span> level to <span class="string">&quot;WARN&quot;</span>.</span><br><span class="line">To adjust logging level <span class="keyword">use</span> sc.setLogLevel(newLevel). For SparkR, <span class="keyword">use</span> setLogLevel(newLevel).</span><br><span class="line"><span class="number">23</span>/<span class="number">01</span>/<span class="number">12</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">13</span> WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes <span class="keyword">where</span> applicable</span><br><span class="line"><span class="number">23</span>/<span class="number">01</span>/<span class="number">12</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">15</span> WARN HiveConf: HiveConf of <span class="keyword">name</span> hive.stats.jdbc.timeout does not <span class="keyword">exist</span></span><br><span class="line"><span class="number">23</span>/<span class="number">01</span>/<span class="number">12</span> <span class="number">10</span>:<span class="number">10</span>:<span class="number">15</span> WARN HiveConf: HiveConf of <span class="keyword">name</span> hive.stats.retries.<span class="keyword">wait</span> does not <span class="keyword">exist</span></span><br><span class="line">Spark master: <span class="keyword">local</span>[<span class="number">4</span>], Application Id: <span class="keyword">local</span>-<span class="number">1673489414801</span></span><br><span class="line">spark-sql (<span class="keyword">default</span>)&gt; show databases;</span><br><span class="line">namespace</span><br><span class="line">bigdata</span><br><span class="line">bigdata_hive</span><br><span class="line">bigdata_hive2</span><br><span class="line">bigdata_hive3</span><br><span class="line">bigdata_hive4</span><br><span class="line"><span class="keyword">default</span></span><br><span class="line">test</span><br><span class="line">Time taken: <span class="number">2.213</span> seconds, Fetched <span class="number">7</span> row(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们一般都在spark-sql里进行测试sql语句，然后再通过代码部署&#x3D;》不要再sparksql里创建表会有点问题&#x3D;》尽可能再hive里键</p>
<p>维护数仓 &#x3D;》 可以用spark-sql -e&#x2F;-f  sql文件 &#x3D;》 推荐的方式维护离线数仓 好维护 简单</p>
<p>hive引擎如果改成spark &#x3D;》 不稳定 &#x3D;》 bug &#x3D;》 有的时候spark的function无法使用</p>
<p>hive里有的function &#x3D;》 spark始终有</p>
<p>但是spark里有的hive里没有</p>
<p>idea里也是要把hive-site放到resource文件夹里</p>
<p>东西很多想要什么上官网查看 <code>https://spark.apache.org/docs/latest/sql-ref-syntax.html#ddl-statements</code></p>
<p>idea里要提前加上依赖</p>
<p>如下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;dependency&gt;</span></span><br><span class="line">  <span class="section">&lt;groupId&gt;</span><span class="attribute">org</span>.apache.spark&lt;/groupId&gt;</span><br><span class="line">  <span class="section">&lt;artifactId&gt;</span><span class="attribute">spark</span>-hive_2.<span class="number">12</span>&lt;/artifactId&gt;</span><br><span class="line">  <span class="section">&lt;version&gt;</span><span class="attribute">3</span>.<span class="number">2</span>.<span class="number">1</span>&lt;/version&gt;</span><br><span class="line"><span class="section">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后执行以下代码就ok了</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">package sparkfirst</span><br><span class="line"></span><br><span class="line">import org.apache.spark.sql.SparkSession</span><br><span class="line"></span><br><span class="line">object sparksql3 &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    val spark = SparkSession.builder().appName(<span class="string">&quot;Sparksql01&quot;</span>).master(<span class="string">&quot;local[4]&quot;</span>).enableHiveSupport().getOrCreate()</span><br><span class="line">    val frame = spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">|select</span></span><br><span class="line">        <span class="string">|*</span></span><br><span class="line">        <span class="string">|from</span></span><br><span class="line">        <span class="string">|bigdata_hive3.emp</span></span><br><span class="line">        <span class="string">|&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    frame.show()</span><br><span class="line">    frame.printSchema()</span><br><span class="line">    val result =</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">|+-----+--------+---------+----+--------+----+----+------+</span></span><br><span class="line">        <span class="string">||empno|   ename|      job| mgr|hiredate| sal|comm|deptno|</span></span><br><span class="line">        <span class="string">|+-----+--------+---------+----+--------+----+----+------+</span></span><br><span class="line">        <span class="string">|| 7369|   SMITH|    CLERK|7902|    null| 800|null|    20|</span></span><br><span class="line">        <span class="string">|| 7499|   ALLEN| SALESMAN|7698|    null|1600| 300|    30|</span></span><br><span class="line">        <span class="string">|| 7521|    WARD| SALESMAN|7698|    null|1250| 500|    30|</span></span><br><span class="line">        <span class="string">|| 7566|   JONES|  MANAGER|7839|    null|2975|null|    20|</span></span><br><span class="line">        <span class="string">|| 7654|  MARTIN| SALESMAN|7698|    null|1250|1400|    30|</span></span><br><span class="line">        <span class="string">|| 7698|   BLAKE|  MANAGER|7839|    null|2850|null|    30|</span></span><br><span class="line">        <span class="string">|| 7782|   CLARK|  MANAGER|7839|    null|2450|null|    10|</span></span><br><span class="line">        <span class="string">|| 7788|   SCOTT|  ANALYST|7566|    null|3000|null|    20|</span></span><br><span class="line">        <span class="string">|| 7839|    KING|PRESIDENT|null|    null|5000|null|    10|</span></span><br><span class="line">        <span class="string">|| 7844|  TURNER| SALESMAN|7698|    null|1500|   0|    30|</span></span><br><span class="line">        <span class="string">|| 7876|   ADAMS|    CLERK|7788|    null|1100|null|    20|</span></span><br><span class="line">        <span class="string">|| 7900|lebulang|    CLERK|7698|    null| 950|null|    30|</span></span><br><span class="line">        <span class="string">|| 7902|    FORD|  ANALYST|7566|    null|3000|null|    20|</span></span><br><span class="line">        <span class="string">|| 7934|  MILLER|    CLERK|7782|    null|1300|null|    10|</span></span><br><span class="line">        <span class="string">|| 7839|    KING|PRESIDENT|null|    null|5000|null|    10|</span></span><br><span class="line">        <span class="string">|| 7654|  MARTIN| SALESMAN|7698|    null|3200|1400|    30|</span></span><br><span class="line">        <span class="string">|| 7788|   SCOTT|  ANALYST|7566|    null|3000|null|    20|</span></span><br><span class="line">        <span class="string">|| 7788|   SCOTT|  ANALYST|7566|    null|3000|null|    20|</span></span><br><span class="line">        <span class="string">|| 7788|   SCOTT|  ANALYST|7566|    null|3000|null|    20|</span></span><br><span class="line">        <span class="string">|| 7788|   SCOTT|  ANALYST|7566|    null|3000|null|    20|</span></span><br><span class="line">        <span class="string">|+-----+--------+---------+----+--------+----+----+------+</span></span><br><span class="line">        <span class="string">|only showing top 20 rows</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">|root</span></span><br><span class="line">        <span class="string">| |-- empno: string (nullable = true)</span></span><br><span class="line">        <span class="string">| |-- ename: string (nullable = true)</span></span><br><span class="line">        <span class="string">| |-- job: string (nullable = true)</span></span><br><span class="line">        <span class="string">| |-- mgr: long (nullable = true)</span></span><br><span class="line">        <span class="string">| |-- hiredate: date (nullable = true)</span></span><br><span class="line">        <span class="string">| |-- sal: decimal(10,0) (nullable = true)</span></span><br><span class="line">        <span class="string">| |-- comm: decimal(10,0) (nullable = true)</span></span><br><span class="line">        <span class="string">| |-- deptno: long (nullable = true)</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">|Process finished with exit code 0</span></span><br><span class="line">        <span class="string">|</span></span><br><span class="line">        <span class="string">|&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="写数据"><a href="#写数据" class="headerlink" title="写数据"></a>写数据</h2><p>写数据的时候一般会伴随crc文件</p>
<h3 id="TEXT-2"><a href="#TEXT-2" class="headerlink" title="TEXT"></a>TEXT</h3><p>注意text仅仅支持一列的数据进行输出，不支持多列，因为我们的resource文件夹里有配置文件所以它走我们的配置文件压缩格式为bz2，不过可以自己指定格式，一般不指定且无配置文件是不压缩的</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package sparkfirst</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="keyword">sql</span>.SparkSession</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> sparksql2 &#123;</span><br><span class="line">  def main(args: <span class="keyword">Array</span>[String]): Unit = &#123;</span><br><span class="line">    val spark = SparkSession.builder().appName(&quot;Sparksql01&quot;).master(&quot;local[4]&quot;).getOrCreate()</span><br><span class="line">    val df2 = spark.<span class="keyword">read</span>.<span class="keyword">option</span>(&quot;lineSep&quot;,&quot;,&quot;).text(&quot;file:///D:\\test.txt&quot;)</span><br><span class="line">    df2.<span class="keyword">show</span>()</span><br><span class="line">    //<span class="comment">-----------------------------------------写数据</span></span><br><span class="line">    df2.<span class="keyword">write</span>.text(&quot;file:///D:\\test1.txt&quot;)</span><br><span class="line">    //<span class="comment">-------------------------------------------加压缩</span></span><br><span class="line">    df2.<span class="keyword">write</span>.<span class="keyword">option</span>(&quot;compression&quot;, &quot;gzip&quot;).text(&quot;file:///D:\\test2.txt&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果想解决，要自己定义外部数据源，相当于自己修改源码</p>
<p>或者把dataframe变成rdd进行输出 因为saveasTextFile是可以多列输出的</p>
<p><code>df2.rdd.saveAsTextFile(&quot;file:///D:\\test3.txt&quot;)</code></p>
<p><img src="https://pic.imgdb.cn/item/63be1a9cbe43e0d30e184271.jpg"></p>
<p>查看文件格式</p>
<p><img src="https://pic.imgdb.cn/item/63be1ad7be43e0d30e18aa99.jpg"></p>
<h3 id="json-2"><a href="#json-2" class="headerlink" title="json"></a>json</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>常用的输出方式追加append，或者覆盖(overwrite),或者忽略（ignore），错误等（error）</span><br><span class="line"><span class="regexp">//</span>df.write.mode(saveMode = <span class="string">&quot;overwrite&quot;</span>).json(<span class="string">&quot;hdfs://bigdata3:9000/spark&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="csv-2"><a href="#csv-2" class="headerlink" title="csv"></a>csv</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写出可以用sep进行设置导出的分隔符，mode设置是不是覆盖，compression设置压缩</span></span><br><span class="line">  df5<span class="selector-class">.write</span><span class="selector-class">.options</span>(<span class="built_in">Map</span>(<span class="string">&quot;sep&quot;</span>-&gt;<span class="string">&quot;;&quot;</span>,<span class="string">&quot;compression&quot;</span>-&gt;<span class="string">&quot;gzip&quot;</span>))<span class="selector-class">.mode</span>(<span class="string">&quot;overwrite&quot;</span>)<span class="selector-class">.format</span>(<span class="string">&quot;csv&quot;</span>)<span class="selector-class">.save</span>(<span class="string">&quot;file:///C:\\Users\\dell\\Desktop\\user_profile1.csv&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结果如下</p>
<p><img src="https://pic.imgdb.cn/item/63be621fbe43e0d30e93423c.jpg"></p>
<h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//写出 --------------------------代码</span></span><br><span class="line">    <span class="comment">//如果用overwrite，会把之前的表删掉，然后重新建一个，表的数据结构会发生改变</span></span><br><span class="line">    df<span class="selector-class">.write</span><span class="selector-class">.mode</span>(<span class="string">&quot;append&quot;</span>)</span><br><span class="line">      <span class="selector-class">.format</span>(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">      <span class="selector-class">.option</span>(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://bigdata2:3306/try&quot;</span>)</span><br><span class="line">      <span class="selector-class">.option</span>(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;emp1&quot;</span>)</span><br><span class="line">      <span class="selector-class">.option</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">      <span class="selector-class">.option</span>(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;liuzihan010616&quot;</span>)</span><br><span class="line">      <span class="selector-class">.save</span>()</span><br><span class="line">      <span class="comment">// --------------------------Properties</span></span><br><span class="line">    df<span class="selector-class">.write</span><span class="selector-class">.mode</span>(<span class="string">&quot;append&quot;</span>)</span><br><span class="line">      <span class="selector-class">.jdbc</span>(<span class="string">&quot;jdbc:mysql://bigdata2:3306/try&quot;</span>, <span class="string">&quot;emp1&quot;</span>, connectionProperties)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以在写的时候多创建列</span></span><br><span class="line">    df<span class="selector-class">.write</span><span class="selector-class">.mode</span>(<span class="string">&quot;append&quot;</span>)</span><br><span class="line">      <span class="selector-class">.option</span>(<span class="string">&quot;createTableColumnTypes&quot;</span>, <span class="string">&quot;name CHAR(64), comments VARCHAR(1024)&quot;</span>)</span><br><span class="line">      <span class="selector-class">.jdbc</span>(<span class="string">&quot;jdbc:mysql://bigdata2:3306/try&quot;</span>, <span class="string">&quot;try.emp&quot;</span>, connectionProperties)</span><br></pre></td></tr></table></figure>

<h3 id="excel-2"><a href="#excel-2" class="headerlink" title="excel"></a>excel</h3><p>如下</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">df<span class="selector-class">.write</span><span class="selector-class">.mode</span>(<span class="string">&quot;overwrite&quot;</span>)<span class="selector-class">.excel</span>(<span class="selector-tag">header</span> = true,<span class="string">&quot;A1&quot;</span>)<span class="selector-class">.save</span>(<span class="string">&quot;file:///C:\\Users\\dell\\Desktop\\2023届毕业设计题目-计算机-选题志愿表1.xlsx&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h3 id="hive-2"><a href="#hive-2" class="headerlink" title="hive"></a>hive</h3><p>一共有几种方法</p>
<ul>
<li>ctas</li>
</ul>
<figure class="highlight pony"><table><tr><td class="code"><pre><span class="line">  <span class="meta">val</span> spark = <span class="type">SparkSession</span>.builder().appName(<span class="string">&quot;Sparksql01&quot;</span>).master(<span class="string">&quot;local[4]&quot;</span>).enableHiveSupport().getOrCreate()</span><br><span class="line">  def main(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |create table bigdata.sparkfinish as</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |*</span></span><br><span class="line"><span class="string">        |from(</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |area,</span></span><br><span class="line"><span class="string">        |product_name,</span></span><br><span class="line"><span class="string">        |rank() over(partition by area order by cnt) as rk</span></span><br><span class="line"><span class="string">        |from (</span></span><br><span class="line"><span class="string">        |select</span></span><br><span class="line"><span class="string">        |area,</span></span><br><span class="line"><span class="string">        |product_name,</span></span><br><span class="line"><span class="string">        |count(1) as cnt</span></span><br><span class="line"><span class="string">        |from bigdata.tmp</span></span><br><span class="line"><span class="string">        |group by area,product_name</span></span><br><span class="line"><span class="string">        |)</span></span><br><span class="line"><span class="string">        |)where rk &lt; 3;</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------------------------insert into  数据追加</span></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert into table bigdata.sparkfinish</span></span><br><span class="line"><span class="string">        |select * from bigdata.sparkfinish</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------------------------------------数据覆盖</span></span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table bigdata.sparkfinish</span></span><br><span class="line"><span class="string">        |select * from bigdata.sparkfinish</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    <span class="comment">// ----------------------------------------分区表 emp_partition是元数据分区表 emp_partition1是后来键的分区表</span></span><br><span class="line">    <span class="comment">// ---------------------------------------执行动态分区的时候要配置参数 静态分区不用</span></span><br><span class="line">    spark.conf.set(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>,<span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">    spark.conf.set(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>,<span class="string">&quot;true&quot;</span>)</span><br><span class="line">    spark.sql(</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |insert overwrite table bigdata_hive3.emp_partition1 partition(deptno)</span></span><br><span class="line"><span class="string">        |select * from bigdata_hive3.emp_partition</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line"><span class="comment">//-----------------------------------------------------------------api</span></span><br><span class="line">	  <span class="meta">val</span> frame = checksql(hivesqlchoose(<span class="string">&quot;empno , ename , job , mgr , deptno &quot;</span>, <span class="string">&quot;bigdata_hive3.emp&quot;</span>, <span class="string">&quot;where sal &gt; 3000&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------------------------这里如果用覆盖模式是会把整个表都弄美哦然后重新建表到数据的，所以一般不用，放置我们只对一个分区数据进行操作的时候别的数据不见</span></span><br><span class="line">    <span class="comment">// -------------------------------------普通表</span></span><br><span class="line">    frame.write.mode(saveMode = <span class="string">&quot;append&quot;</span>).format(<span class="string">&quot;hive&quot;</span>).saveAsTable(<span class="string">&quot;bigdata_hive3.emp89&quot;</span>)</span><br><span class="line">        spark.conf.set(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>,<span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">        spark.conf.set(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>,<span class="string">&quot;true&quot;</span>)</span><br><span class="line">    <span class="comment">// -------------------------------------分区表</span></span><br><span class="line">    frame.write.partitionBy(<span class="string">&quot;deptno&quot;</span>).mode(saveMode = <span class="string">&quot;append&quot;</span>).format(<span class="string">&quot;hive&quot;</span>).saveAsTable(<span class="string">&quot;bigdata_hive3.emp891&quot;</span>)</span><br><span class="line">    <span class="comment">// ---------------------------------------insertInto 插入数据 如果是用于分区表它会自动使用动态分区 对普通表可以</span></span><br><span class="line">    <span class="comment">// Exception in thread &quot;main&quot; org.apache.spark.sql.AnalysisException:  insertInto() can&#x27;t be used together with partitionBy(). Partition columns have already been defined for the table. It is not necessary to use partitionBy().</span></span><br><span class="line">    <span class="comment">//frame.write.partitionBy(&quot;deptno&quot;).mode(saveMode = &quot;overwrite&quot;).format(&quot;hive&quot;).insertInto(&quot;bigdata_hive3.emp891&quot;)</span></span><br><span class="line">    <span class="comment">// 可以把数据作为路径写入到hdfs上 ，写入他对应的table path下</span></span><br><span class="line"></span><br><span class="line">    frame.select(<span class="string">&quot;empno&quot;</span>,<span class="string">&quot;ename&quot;</span>,<span class="string">&quot;job&quot;</span>,<span class="string">&quot;mgr&quot;</span>).write.mode(<span class="string">&quot;overwrite&quot;</span>).parquet(<span class="string">&quot;hdfs://bigdata3:9000/user/hive/warehouse/bigdata_hive3.db/emp_partition1/deptno=20&quot;</span>)</span><br><span class="line">    <span class="comment">// 对于普通表这样写入是ok的，但是对于分区表 因为元数据的不同 所以可能会导致元数据关联不上</span></span><br><span class="line">    <span class="comment">// 修复元数据库就ok了</span></span><br><span class="line">    <span class="comment">// 注意这里要是parquet的存储格式的或者orc的，如果是text的会成乱码</span></span><br><span class="line">    <span class="comment">// 修复元数据</span></span><br><span class="line">    <span class="comment">// msck repair table table_name [ADD/DROP/SYNC partition]</span></span><br><span class="line">    <span class="comment">// 或者通过rdd的方法进行存储</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  def hivesqlchoose(string: <span class="type">String</span>*)=&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">val</span> str = <span class="string">&quot;select&quot;</span> + <span class="string">&quot; &quot;</span> + string(<span class="number">0</span>) + <span class="string">&quot; &quot;</span> + <span class="string">&quot;from&quot;</span> + <span class="string">&quot; &quot;</span> +  string(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (string.length &gt; <span class="number">2</span>)&#123;</span><br><span class="line">      str +<span class="string">&quot; &quot;</span> + string(<span class="number">2</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      str</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def descfunctionsql(string: <span class="type">String</span>)=&#123;</span><br><span class="line">    s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">      |desc function extended $string</span></span><br><span class="line"><span class="string">      |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def checksql(string: <span class="type">String</span>)=&#123;</span><br><span class="line">    spark.sql(string).show(<span class="literal">false</span>)</span><br><span class="line">    spark.sql(string)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>java中异常的相关知识</title>
    <url>/2022/10/15/10-15/</url>
    <content><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="因为一些原因导致开发的程序出现问题"><a href="#因为一些原因导致开发的程序出现问题" class="headerlink" title="因为一些原因导致开发的程序出现问题"></a>因为一些原因导致开发的程序出现问题</h3><p>Throwable是error和Exception的父类，是Java里所有异常的父类<br>##error<br>如果出现了error，则代表计算机出现了重大的错误，比如jvm无法解决的问题等。</p>
<h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p>如果出现了Exception，则代表计算机代码出现了问题，编译或者运行的时候出现了问题。但是Exception还分为运行时异常和编译时异常</p>
<h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p>运行时异常比如：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ArrayIndexOutOfBoundsException<span class="regexp">//</span>这就是个数组越界的异常</span><br></pre></td></tr></table></figure>

<p>这些都是运行的时候产生的异常，编译可以通过的，其中最常见的就是数组越界，下表越剧等</p>
<h3 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h3><p>编译时异常比如：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">The final <span class="built_in">local</span> <span class="built_in">variable</span> m cannot be assigned. It must be blank <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">using</span> <span class="keyword">a</span> <span class="built_in">compound</span> assignment<span class="comment"> //这个就是个简单的final修饰的变量不可被改变的异常</span></span><br></pre></td></tr></table></figure>

<p>这些是在程序未被运行之前就报出的错误。会被编译器会进行优先的处理。<br>最常见的就是作用域的问题，比如static变量和非static的变量等。</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><p>我们可以通过try catch的方法进行捕获异常，让异常出现的时候不至于停止程序的运行<br>代码如下：</p>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line"><span class="title function_">try</span> &#123;<span class="comment">//放会报错的语句，这个是个简单数组越界</span></span><br><span class="line">	<span class="variable">a</span>[<span class="variable">m</span>] <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">	<span class="title class_">System</span>.<span class="property">out</span>.<span class="property">println</span>(<span class="string">&quot;输入正确&quot;</span>);</span><br><span class="line">	&#125; <span class="title function_">catch</span> (<span class="title class_">Exception</span> <span class="variable">e</span>) &#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">	<span class="comment">// 在错误发生时怎么处理</span></span><br><span class="line">	<span class="title class_">System</span>.<span class="property">out</span>.<span class="property">println</span>(<span class="string">&quot;成功抛出异常&quot;</span>);</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="title function_">catch</span>(<span class="params">xxxxx</span>) &#123;</span><br><span class="line">	&#125;<span class="comment">// 这里的catch还可以继续往下写，但是要注意其中异常的类型必须是越在后面类型越大的，因为Exception还分多个子类异常，这样可以更精确的分辨是什么异常，不过直接写Exception也不算错</span></span><br><span class="line">	<span class="title function_">finally</span> &#123;</span><br><span class="line">		<span class="comment">// finally里放一定会执行的代码，不过不写finally也不算错</span></span><br><span class="line">		&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是要注意，我们不可以捕获error异常，因为error异常已经超出了代码捕获的范围，我们一般都要进行硬件及软件的处理</p>
<h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p>我们可以通过throws把异常向上抛出，让他们的上层去处理，可是一般上层如果不能处理，还会继续向上抛出，这种方法我简称为逃避，我们，一般使用try catch语句较多，一般是抛到main方法里进行try catch处理，<br>如果异常一直不处理，那编译器最后会报错</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>spark</title>
    <url>/2023/01/04/1-4/</url>
    <content><![CDATA[<h1 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h1><p>spark产生背景？<br>mr,hive批处理，离线处理存在一些局限性：</p>
<ul>
<li>mr api 开发复杂</li>
<li>只能做离线计算，不能实时计算</li>
<li>性能不高</li>
</ul>
<p>需求：</p>
<p>sql &#x3D;》 mr</p>
<p>会产生多个job去完成一个需求</p>
<p>mr1&#x3D;&gt;mr2&#x3D;&gt;mr3</p>
<p>map &#x3D;&gt; reduce</p>
<p>map处理完数据&#x3D;》dask数据落盘 &#x3D;》 reduce mr</p>
<p>kv进行操作 &#x3D;》 k进行排序</p>
<p>什么是spark？</p>
<p>官网：<code>spark.apache.org  </code></p>
<p>计算特点： 不关注数据存储</p>
<h3 id="特点-："><a href="#特点-：" class="headerlink" title="特点 ："></a>特点 ：</h3><ul>
<li>Batch&#x2F;streaming data &#x3D;》 批流一体</li>
<li>SQL analytics</li>
<li>Data science at scale</li>
<li>Machine learning</li>
</ul>
<h3 id="速度快："><a href="#速度快：" class="headerlink" title="速度快："></a>速度快：</h3><ul>
<li>基于内存的运算</li>
<li>DAG &#x3D;》 链式编程&#x3D;》mr1&#x3D;&gt;mr2&#x3D;&gt;mr3</li>
<li>pipline通道的</li>
<li>编程模型 线程级别的</li>
</ul>
<h3 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h3><ul>
<li>开发语言：java ，Scala ， python ， sql</li>
<li>外部数据源</li>
<li>80多个高级算子&#x3D;》Scala算子</li>
<li>mr&#x3D;》 去读mysql数据库 &#x3D;》 DBinputformat</li>
<li>spark &#x3D;&gt; 封装好了多种外部数据源 &#x3D;》 jdbc ， json ，csv</li>
<li>mr map&#x2F;reduce</li>
<li>spark :80</li>
</ul>
<p>通用性</p>
<ul>
<li>子模块</li>
<li>sparkcore &#x3D;》 ：离线计算</li>
<li>sparksql &#x3D;》 离线计算</li>
<li>sparkstreaming，structstreaming &#x3D;》 实时计算</li>
<li>mllib &#x3D;》 机器学习</li>
<li>图计算 &#x3D;》 图处理</li>
</ul>
<p>对于spark的子模块之间可以用交互式使用</p>
<p>运行作业的地方</p>
<ul>
<li>yarn ***</li>
<li>mesos</li>
<li>k8s ***</li>
<li>standalone</li>
</ul>
<p>hadoop生态圈 vs spark生态圈</p>
<ul>
<li>Batch： mr ， hive vs sparkcore，sparksql</li>
<li>Sql：hive，impala vs sparksql</li>
<li>stream ： Strom vs spark streaming，sss</li>
<li>MLLib：Mahout vs MLLib</li>
<li>real存储 ： HBase，cassandra vs DataSource Api</li>
</ul>
<h3 id="spark-能不能替换hadoop-x3D-》-替换不了-x3D-》spark-x3D-》-可以mr"><a href="#spark-能不能替换hadoop-x3D-》-替换不了-x3D-》spark-x3D-》-可以mr" class="headerlink" title="spark 能不能替换hadoop &#x3D;》 替换不了&#x3D;》spark &#x3D;》 可以mr"></a>spark 能不能替换hadoop &#x3D;》 替换不了&#x3D;》spark &#x3D;》 可以mr</h3><p>spqrk版本：</p>
<ul>
<li>spark 1.x</li>
<li>spark 2.x主流</li>
<li>spark 3.x主流</li>
</ul>
<p>编程模型：</p>
<p>sparkcore &#x3D;》 RDD</p>
<p>sparksql &#x3D;》 dataframe &amp; dataset</p>
<p>sparkstreaming &#x3D;》 DS</p>
<p>sparkcore</p>
<p>RDD：rdd开发 降低开发人员的开发成本 vs mr</p>
<p>什么是rdd？</p>
<p>lower level &#x3D; 》mr</p>
<p>high level &#x3D;》 spark 高级算子</p>
<h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul>
<li>弹性 分布式 数据集</li>
<li>数据集 &#x3D;》 partitions 元素 &#x3D;》 一条一条数据</li>
<li>可以用并行的方式进行计算</li>
</ul>
<h3 id="弹性？"><a href="#弹性？" class="headerlink" title="弹性？"></a>弹性？</h3><ul>
<li>容错 &#x3D;》 计算的时候 可以重试</li>
</ul>
<h3 id="分布式？"><a href="#分布式？" class="headerlink" title="分布式？"></a>分布式？</h3><ul>
<li>存储<ul>
<li>rdd：1 2 3 4 5 6<ul>
<li>partition1:1 2 3</li>
<li>partition2: 4 5</li>
<li>partition:6</li>
</ul>
</li>
<li>bigdata3:p1</li>
<li>bigdata4:p2</li>
<li>bigdtat5:p3</li>
</ul>
</li>
<li>计算<ul>
<li>对rdd的操作是操作里面的数据</li>
</ul>
</li>
<li>数据集<ul>
<li>就是构建rdd本身的数据</li>
</ul>
</li>
<li>immutable 不可变的<ul>
<li>scala ： val var</li>
<li>rdda &#x3D;》 rddb</li>
<li>不可变 &#x3D; 》rdda 通过一个计算到新的rdd</li>
</ul>
</li>
<li>partition collection of elements &#x3D;&gt; rdd可以被分区存储&#x2F;计算</li>
<li>一个rdd 是由多个partition所构成的</li>
<li>rdd数据存储是分布式的，是跨节点进行存储的</li>
</ul>
<p>abstract</p>
<p>T泛型 &#x3D;》 限定在人dd里面数据 是什么类型的如：RDD[String] , RDD[Int],RDD[Student]</p>
<p>Serializable序列化&#x3D;》可以经过网络传输</p>
<p>@transient注解 这个属性不用序列化 [了解]</p>
<h3 id="RDD-的特性："><a href="#RDD-的特性：" class="headerlink" title="RDD 的特性："></a>RDD 的特性：</h3><ul>
<li>rdd 的底层存储是系列的partition</li>
<li>针对rdd做计算&#x2F;操作其实就是对rdd底层的partition进行计算&#x2F;操作</li>
<li>rdd之间的依赖关系<ul>
<li>rdda &#x3D;》rddb</li>
<li>rdd 不可变</li>
<li>rdda &#x3D; 》b &#x3D;》 c</li>
</ul>
</li>
<li>Partitioner &#x3D;》 kv类型的rdd</li>
<li>默认分区是hash</li>
<li>数据本地性 &#x3D;》 减少数据传输的io ，优点<ul>
<li>rdd进行操作的好处 ：<ul>
<li>有限的作业调度在数据所在的节点上 &#x3D;》 理想状况</li>
<li>常见计算 &#x3D;》 作业调度在别的节点上 ，数据另外存储在一台节点上，只能把数据通过网络传过去再进行计算</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>在rdd中可以用scala的map和其他高级函数</p>
<p>RDD操作 ：</p>
<p>构建sparkcore 作业 ：idea</p>
<p>添加依赖 ：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;dependency&gt;</span></span><br><span class="line">     <span class="section">&lt;groupId&gt;</span><span class="attribute">org</span>.apache.spark&lt;/groupId&gt;</span><br><span class="line">     <span class="section">&lt;artifactId&gt;</span><span class="attribute">spark</span>-core_2.<span class="number">12</span>&lt;/artifactId&gt;</span><br><span class="line">     <span class="section">&lt;version&gt;</span><span class="attribute">3</span>.<span class="number">2</span>.<span class="number">1</span>&lt;/version&gt;</span><br><span class="line">   <span class="section">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>

<p>mapreduce  ：程序入口：job</p>
<h3 id="初始化spark："><a href="#初始化spark：" class="headerlink" title="初始化spark："></a>初始化spark：</h3><ul>
<li><p>sparkContext &#x3D;》 sparkcore 程序入口</p>
</li>
<li><p>SparkConf &#x3D;&gt; 指定spark app 详细信息</p>
<ul>
<li>AppName &#x3D; 》作业名字</li>
<li>Master &#x3D;》作业运行在什么地方 spark作业运行模式<ul>
<li>local，yarn，stanalone，k8s,mesos</li>
<li>公共中：yarn，k8s，local</li>
<li>测试的时候：local</li>
<li>一个spark作业里面只能由一个sparkcontext</li>
</ul>
</li>
</ul>
</li>
<li><p>如和指定Master spark作业运行模式</p>
<ul>
<li><p>local【K】模式</p>
<ul>
<li>k指的是线程数</li>
</ul>
</li>
<li><p>standalone &#x3D;&gt; spark:&#x2F;&#x2F;HOST:PORT</p>
</li>
<li><p>yarn 两种模式：</p>
<ul>
<li>client模式</li>
<li>cluster模式</li>
</ul>
</li>
<li><p>k8s</p>
<ul>
<li>k8s:&#x2F;&#x2F;HOST:PORT</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>rdd进行编程</p>
<p>创建rdd</p>
<p>parallelize existing collection  &#x3D;》 已经存在的集合</p>
<p>referencing a dataset in an external storage system，hdfs、hbase、其他数据存储系统</p>
<p>外部数据源存储<br>            hdfs、local、hbase、s3、cos、<br>数据文件类型：<br>            text files, SequenceFiles, and any other Hadoop InputFormat.</p>
<p>spark部署：</p>
<p>spark不是部署分布式的 参考hive</p>
<p>spark支持分布式部署 &#x3D;》 standalone</p>
<p>步骤 ： 解压 &#x3D;》 软连接 &#x3D;》 source</p>
<p>spark-core的脚本spark-shell</p>
<p>例子 ： <code>spark -shell --master local[2]</code></p>
<p>启动spark-shell：测试code</p>
<ul>
<li>web ui &#x3D;》 每个spark作业的 <a href="http://bigdata32:4040/">http://bigdata32:4040</a></li>
<li>参数：<code>--master =&gt; spark shell 以什么模式去运行</code></li>
<li>可以用 <code>--name </code>更改spark shell的名字</li>
</ul>
<p>以下是关于参数的详细情况</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">spark-shell : </span><br><span class="line">	<span class="attr">--master</span>  spark作业运行环境 </span><br><span class="line">	<span class="attr">--deploy-mode</span> yarn模式 运行选择</span><br><span class="line">	<span class="attr">--class</span>  spark作业包 运行主类<span class="selector-tag">main</span>  class 包名 </span><br><span class="line">	<span class="attr">--name</span>  指定spark作业的名字 </span><br><span class="line">	<span class="attr">--jars</span> 指定第三方的依赖包</span><br><span class="line">	<span class="attr">--conf</span> 指定spark作业配置参数 </span><br><span class="line">yarn 参数补充： </span><br><span class="line">	<span class="attr">--num-executors</span> 指定 申请资源的参数 </span><br><span class="line">	<span class="attr">--executor-memory</span> 指定 申请资源的参数 </span><br><span class="line">	<span class="attr">--executor-cores</span> 指定 申请资源的参数</span><br><span class="line">	<span class="attr">--queue</span> 指定作业 运行在yarn的哪个队列上 </span><br><span class="line"></span><br><span class="line">spark-shell 交互式命令 底层调用 =》 spark-submit </span><br><span class="line">	开发者 主要使用的脚本 用于提交用户自己开发的spark作业</span><br><span class="line"></span><br><span class="line">spark-shell: </span><br><span class="line">	spark-submit \</span><br><span class="line">	<span class="attr">--class</span> org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.repl</span><span class="selector-class">.Main</span> \</span><br><span class="line">	<span class="attr">--name</span> <span class="string">&quot;Spark shell&quot;</span> <span class="string">&quot;$@&quot;</span></span><br><span class="line"></span><br><span class="line">spark-shell <span class="attr">--master</span> <span class="string">&quot;local[2]&quot;</span>: </span><br><span class="line">	spark-submit \</span><br><span class="line">	<span class="attr">--class</span> org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.repl</span><span class="selector-class">.Main</span> \</span><br><span class="line">	<span class="attr">--name</span> <span class="string">&quot;Spark shell&quot;</span>  <span class="attr">--master</span> <span class="string">&quot;local[2]&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="算子："><a href="#算子：" class="headerlink" title="算子："></a>算子：</h3><p>filter：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scala</span>&gt; test.collect</span><br><span class="line"><span class="attribute">res15</span>: Array[Int] = Array(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>...</span><br><span class="line"></span><br><span class="line"><span class="attribute">scala</span>&gt; test.filter(_&gt;<span class="number">999</span>).collect</span><br><span class="line"><span class="attribute">res16</span>: Array[Int] = Array(<span class="number">1000</span>)</span><br><span class="line"><span class="attribute">scala</span>&gt; test.collect</span><br><span class="line"><span class="attribute">res15</span>: Array[Int] = Array(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, <span class="number">169</span>, <span class="number">170</span>, <span class="number">171</span>...</span><br><span class="line"></span><br><span class="line"><span class="attribute">scala</span>&gt; test.filter(_&gt;<span class="number">999</span>).collect</span><br><span class="line"><span class="attribute">res16</span>: Array[Int] = Array(<span class="number">1000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>mapPartitionsWithIndex：就是和mappartition是基本上一样的就是多了个索引</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd = sc.make<span class="constructor">RDD(List(1,2,3,4)</span>,numSlices = <span class="number">2</span>)<span class="comment">//分区为2</span></span><br><span class="line">scala&gt; rdd.map<span class="constructor">PartitionsWithIndex((<span class="params">index</span>,<span class="params">iter</span>)</span>=&gt; &#123;<span class="keyword">if</span>(index ==<span class="number">1</span>) &#123; iter &#125; <span class="keyword">else</span> &#123; <span class="module-access"><span class="module"><span class="identifier">Nil</span>.</span></span>iterator&#125;&#125;).collect.foreach(println)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line">scala&gt; rdd.map<span class="constructor">PartitionsWithIndex((<span class="params">index</span>,<span class="params">iter</span>)</span>=&gt; &#123;iter.map(num =&gt; &#123;(index , num)&#125;)&#125;).collect.foreach(println)</span><br><span class="line">(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">(<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">-=--------------------------------------------------------mappartition</span><br><span class="line">scala&gt; test1.map<span class="constructor">Partitions(<span class="params">_</span>.<span class="params">map</span>(<span class="params">_</span>.<span class="params">_2</span>)</span>,<span class="literal">true</span>).collect.foreach(print)</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931941951961971981992002012022032042052062072082092102112122132142152162172182192202212222232242252262272282292302312322332342352362372382392402412422432442452462472482492502512522532542552562572582592602612622632642652662672682692702712722732742752762772782792802812822832842852862872882892902912922932942952962972982993003013023033043053063073083093103113123133143153163173183193203213223233243253263273283293303313323333343353363373383393403413423433443453463473483493503513523533543553563573583593603613623633643653663673683693703713723733743753763773783793803813823833843853863873883893903913923933943953963973983994004014024034044054064074084094104114124134144154164174184194204214224234244254264274284294304314324334344354364374384394404414424434444454464474484494504514524534544554564574584594604614624634644654664674684694704714724734744754764774784794804814824834844854864874884894904914924934944954964974984995005015025035045055065075085095105115125135145155165175185195205215225235245255265275285295305315325335345355365375385395405415425435445455465475485495505515525535545555565575585595605615625635645655665675685695705715725735745755765775785795805815825835845855865875885895905915925935945955965975985996006016026036046056066076086096106116126136146156166176186196206216226236246256266276286296306316326336346356366376386396406416426436446456466476486496506516526536546556566576586596606616626636646656666676686696706716726736746756766776786796806816826836846856866876886896906916926936946956966976986997007017027037047057067077087097107117127137147157167177187197207217227237247257267277287297307317327337347357367377387397407417427437447457467477487497507517527537547557567577587597607617627637647657667677687697707717727737747757767777787797807817827837847857867877887897907917927937947957967977987998008018028038048058068078088098108118128138148158168178188198208218228238248258268278288298308318328338348358368378388398408418428438448458468478488498508518528538548558568578588598608618628638648658668678688698708718728738748758768778788798808818828838848858868878888898908918928938948958968978988999009019029039049059069079089099109119129139149159169179189199209219229239249259269279289299309319329339349359369379389399409419429439449459469479489499509519529539549559569579589599609619629639649659669679689699709719729739749759769779789799809819829839849859869879889899909919929939949959969979989991000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一般的使用场景是查看partition里的元素</p>
<p>每个rdd的数据落到是什么分区上，我们不用太管，后面会讲</p>
<p>mapValues：只对kv类型的数据进行操作，相当于是单独对每个values做处理</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">scala&gt; test<span class="number">1.</span>mapValues<span class="comment">(_+3)</span>.collect.foreach<span class="comment">(print)</span></span><br><span class="line"><span class="comment">(0,4)</span><span class="comment">(0,5)</span><span class="comment">(0,6)</span><span class="comment">(0,7)</span><span class="comment">(0,8)</span><span class="comment">(0,9)</span><span class="comment">(0,10)</span><span class="comment">(0,11)</span><span class="comment">(0,12)</span><span class="comment">(0,13)</span><span class="comment">(0,14)</span><span class="comment">(0,15)</span><span class="comment">(0,16)</span><span class="comment">(0,17)</span><span class="comment">(0,18)</span><span class="comment">(0,19)</span><span class="comment">(0,20)</span><span class="comment">(0,21)</span><span class="comment">(0,22)</span><span class="comment">(0,23)</span><span class="comment">(0,24)</span><span class="comment">(0,25)</span><span class="comment">(0,26)</span><span class="comment">(0,27)</span><span class="comment">(0,28)</span><span class="comment">(0,29)</span><span class="comment">(0,30)</span><span class="comment">(0,31)</span><span class="comment">(0,32)</span><span class="comment">(0,33)</span><span class="comment">(0,34)</span><span class="comment">(0,35)</span><span class="comment">(0,36)</span><span class="comment">(0,37)</span><span class="comment">(0,38)</span><span class="comment">(0,39)</span><span class="comment">(0,40)</span><span class="comment">(0,41)</span><span class="comment">(0,42)</span><span class="comment">(0,43)</span><span class="comment">(0,44)</span><span class="comment">(0,45)</span><span class="comment">(0,46)</span><span class="comment">(0,47)</span><span class="comment">(0,48)</span><span class="comment">(0,49)</span><span class="comment">(0,50)</span><span class="comment">(0,51)</span><span class="comment">(0,52)</span><span class="comment">(0,53)</span><span class="comment">(0,54)</span><span class="comment">(0,55)</span><span class="comment">(0,56)</span><span class="comment">(0,57)</span><span class="comment">(0,58)</span><span class="comment">(0,59)</span><span class="comment">(0,60)</span><span class="comment">(0,61)</span><span class="comment">(0,62)</span><span class="comment">(0,63)</span><span class="comment">(0,64)</span><span class="comment">(0,65)</span><span class="comment">(0,66)</span><span class="comment">(0,67)</span><span class="comment">(0,68)</span><span class="comment">(0,69)</span><span class="comment">(0,70)</span><span class="comment">(0,71)</span><span class="comment">(0,72)</span><span class="comment">(0,73)</span><span class="comment">(0,74)</span><span class="comment">(0,75)</span><span class="comment">(0,76)</span><span class="comment">(0,77)</span><span class="comment">(0,78)</span><span class="comment">(0,79)</span><span class="comment">(0,80)</span><span class="comment">(0,81)</span><span class="comment">(0,82)</span><span class="comment">(0,83)</span><span class="comment">(0,84)</span><span class="comment">(0,85)</span><span class="comment">(0,86)</span><span class="comment">(0,87)</span><span class="comment">(0,88)</span><span class="comment">(0,89)</span><span class="comment">(0,90)</span><span class="comment">(0,91)</span><span class="comment">(0,92)</span><span class="comment">(0,93)</span><span class="comment">(0,94)</span><span class="comment">(0,95)</span><span class="comment">(0,96)</span><span class="comment">(0,97)</span><span class="comment">(0,98)</span><span class="comment">(0,99)</span><span class="comment">(0,100)</span><span class="comment">(0,101)</span><span class="comment">(0,102)</span><span class="comment">(0,103)</span><span class="comment">(0,104)</span><span class="comment">(0,105)</span><span class="comment">(0,106)</span><span class="comment">(0,107)</span><span class="comment">(0,108)</span><span class="comment">(0,109)</span><span class="comment">(0,110)</span><span class="comment">(0,111)</span><span class="comment">(0,112)</span><span class="comment">(0,113)</span><span class="comment">(0,114)</span><span class="comment">(0,115)</span><span class="comment">(0,116)</span><span class="comment">(0,117)</span><span class="comment">(0,118)</span><span class="comment">(0,119)</span><span class="comment">(0,120)</span><span class="comment">(0,121)</span><span class="comment">(0,122)</span><span class="comment">(0,123)</span><span class="comment">(0,124)</span><span class="comment">(0,125)</span><span class="comment">(0,126)</span><span class="comment">(0,127)</span><span class="comment">(0,128)</span><span class="comment">(0,129)</span><span class="comment">(0,130)</span><span class="comment">(0,131)</span><span class="comment">(0,132)</span><span class="comment">(0,133)</span><span class="comment">(0,134)</span><span class="comment">(0,135)</span><span class="comment">(0,136)</span><span class="comment">(0,137)</span><span class="comment">(0,138)</span><span class="comment">(0,139)</span><span class="comment">(0,140)</span><span class="comment">(0,141)</span><span class="comment">(0,142)</span><span class="comment">(0,143)</span><span class="comment">(0,144)</span><span class="comment">(0,145)</span><span class="comment">(0,146)</span><span class="comment">(0,147)</span><span class="comment">(0,148)</span><span class="comment">(0,149)</span><span class="comment">(0,150)</span><span class="comment">(0,151)</span><span class="comment">(0,152)</span><span class="comment">(0,153)</span><span class="comment">(0,154)</span><span class="comment">(0,155)</span><span class="comment">(0,156)</span><span class="comment">(0,157)</span><span class="comment">(0,158)</span><span class="comment">(0,159)</span><span class="comment">(0,160)</span><span class="comment">(0,161)</span><span class="comment">(0,162)</span><span class="comment">(0,163)</span><span class="comment">(0,164)</span><span class="comment">(0,165)</span><span class="comment">(0,166)</span><span class="comment">(0,167)</span><span class="comment">(0,168)</span><span class="comment">(0,169)</span><span class="comment">(0,170)</span><span class="comment">(0,171)</span><span class="comment">(0,172)</span><span class="comment">(0,173)</span><span class="comment">(0,174)</span><span class="comment">(0,175)</span><span class="comment">(0,176)</span><span class="comment">(0,177)</span><span class="comment">(0,178)</span><span class="comment">(0,179)</span><span class="comment">(0,180)</span><span class="comment">(0,181)</span><span class="comment">(0,182)</span><span class="comment">(0,183)</span><span class="comment">(0,184)</span><span class="comment">(0,185)</span><span class="comment">(0,186)</span><span class="comment">(0,187)</span><span class="comment">(0,188)</span><span class="comment">(0,189)</span><span class="comment">(0,190)</span><span class="comment">(0,191)</span><span class="comment">(0,192)</span><span class="comment">(0,193)</span><span class="comment">(0,194)</span><span class="comment">(0,195)</span><span class="comment">(0,196)</span><span class="comment">(0,197)</span><span class="comment">(0,198)</span><span class="comment">(0,199)</span><span class="comment">(0,200)</span><span class="comment">(0,201)</span><span class="comment">(0,202)</span><span class="comment">(0,203)</span><span class="comment">(0,204)</span><span class="comment">(0,205)</span><span class="comment">(0,206)</span><span class="comment">(0,207)</span><span class="comment">(0,208)</span><span class="comment">(0,209)</span><span class="comment">(0,210)</span><span class="comment">(0,211)</span><span class="comment">(0,212)</span><span class="comment">(0,213)</span><span class="comment">(0,214)</span><span class="comment">(0,215)</span><span class="comment">(0,216)</span><span class="comment">(0,217)</span><span class="comment">(0,218)</span><span class="comment">(0,219)</span><span class="comment">(0,220)</span><span class="comment">(0,221)</span><span class="comment">(0,222)</span><span class="comment">(0,223)</span><span class="comment">(0,224)</span><span class="comment">(0,225)</span><span class="comment">(0,226)</span><span class="comment">(0,227)</span><span class="comment">(0,228)</span><span class="comment">(0,229)</span><span class="comment">(0,230)</span><span class="comment">(0,231)</span><span class="comment">(0,232)</span><span class="comment">(0,233)</span><span class="comment">(0,234)</span><span class="comment">(0,235)</span><span class="comment">(0,236)</span><span class="comment">(0,237)</span><span class="comment">(0,238)</span><span class="comment">(0,239)</span><span class="comment">(0,240)</span><span class="comment">(0,241)</span><span class="comment">(0,242)</span><span class="comment">(0,243)</span><span class="comment">(0,244)</span><span class="comment">(0,245)</span><span class="comment">(0,246)</span><span class="comment">(0,247)</span><span class="comment">(0,248)</span><span class="comment">(0,249)</span><span class="comment">(0,250)</span><span class="comment">(0,251)</span><span class="comment">(0,252)</span><span class="comment">(0,253)</span><span class="comment">(0,254)</span><span class="comment">(0,255)</span><span class="comment">(0,256)</span><span class="comment">(0,257)</span><span class="comment">(0,258)</span><span class="comment">(0,259)</span><span class="comment">(0,260)</span><span class="comment">(0,261)</span><span class="comment">(0,262)</span><span class="comment">(0,263)</span><span class="comment">(0,264)</span><span class="comment">(0,265)</span><span class="comment">(0,266)</span><span class="comment">(0,267)</span><span class="comment">(0,268)</span><span class="comment">(0,269)</span><span class="comment">(0,270)</span><span class="comment">(0,271)</span><span class="comment">(0,272)</span><span class="comment">(0,273)</span><span class="comment">(0,274)</span><span class="comment">(0,275)</span><span class="comment">(0,276)</span><span class="comment">(0,277)</span><span class="comment">(0,278)</span><span class="comment">(0,279)</span><span class="comment">(0,280)</span><span class="comment">(0,281)</span><span class="comment">(0,282)</span><span class="comment">(0,283)</span><span class="comment">(0,284)</span><span class="comment">(0,285)</span><span class="comment">(0,286)</span><span class="comment">(0,287)</span><span class="comment">(0,288)</span><span class="comment">(0,289)</span><span class="comment">(0,290)</span><span class="comment">(0,291)</span><span class="comment">(0,292)</span><span class="comment">(0,293)</span><span class="comment">(0,294)</span><span class="comment">(0,295)</span><span class="comment">(0,296)</span><span class="comment">(0,297)</span><span class="comment">(0,298)</span><span class="comment">(0,299)</span><span class="comment">(0,300)</span><span class="comment">(0,301)</span><span class="comment">(0,302)</span><span class="comment">(0,303)</span><span class="comment">(0,304)</span><span class="comment">(0,305)</span><span class="comment">(0,306)</span><span class="comment">(0,307)</span><span class="comment">(0,308)</span><span class="comment">(0,309)</span><span class="comment">(0,310)</span><span class="comment">(0,311)</span><span class="comment">(0,312)</span><span class="comment">(0,313)</span><span class="comment">(0,314)</span><span class="comment">(0,315)</span><span class="comment">(0,316)</span><span class="comment">(0,317)</span><span class="comment">(0,318)</span><span class="comment">(0,319)</span><span class="comment">(0,320)</span><span class="comment">(0,321)</span><span class="comment">(0,322)</span><span class="comment">(0,323)</span><span class="comment">(0,324)</span><span class="comment">(0,325)</span><span class="comment">(0,326)</span><span class="comment">(0,327)</span><span class="comment">(0,328)</span><span class="comment">(0,329)</span><span class="comment">(0,330)</span><span class="comment">(0,331)</span><span class="comment">(0,332)</span><span class="comment">(0,333)</span><span class="comment">(0,334)</span><span class="comment">(0,335)</span><span class="comment">(0,336)</span><span class="comment">(0,337)</span><span class="comment">(0,338)</span><span class="comment">(0,339)</span><span class="comment">(0,340)</span><span class="comment">(0,341)</span><span class="comment">(0,342)</span><span class="comment">(0,343)</span><span class="comment">(0,344)</span><span class="comment">(0,345)</span><span class="comment">(0,346)</span><span class="comment">(0,347)</span><span class="comment">(0,348)</span><span class="comment">(0,349)</span><span class="comment">(0,350)</span><span class="comment">(0,351)</span><span class="comment">(0,352)</span><span class="comment">(0,353)</span><span class="comment">(0,354)</span><span class="comment">(0,355)</span><span class="comment">(0,356)</span><span class="comment">(0,357)</span><span class="comment">(0,358)</span><span class="comment">(0,359)</span><span class="comment">(0,360)</span><span class="comment">(0,361)</span><span class="comment">(0,362)</span><span class="comment">(0,363)</span><span class="comment">(0,364)</span><span class="comment">(0,365)</span><span class="comment">(0,366)</span><span class="comment">(0,367)</span><span class="comment">(0,368)</span><span class="comment">(0,369)</span><span class="comment">(0,370)</span><span class="comment">(0,371)</span><span class="comment">(0,372)</span><span class="comment">(0,373)</span><span class="comment">(0,374)</span><span class="comment">(0,375)</span><span class="comment">(0,376)</span><span class="comment">(0,377)</span><span class="comment">(0,378)</span><span class="comment">(0,379)</span><span class="comment">(0,380)</span><span class="comment">(0,381)</span><span class="comment">(0,382)</span><span class="comment">(0,383)</span><span class="comment">(0,384)</span><span class="comment">(0,385)</span><span class="comment">(0,386)</span><span class="comment">(0,387)</span><span class="comment">(0,388)</span><span class="comment">(0,389)</span><span class="comment">(0,390)</span><span class="comment">(0,391)</span><span class="comment">(0,392)</span><span class="comment">(0,393)</span><span class="comment">(0,394)</span><span class="comment">(0,395)</span><span class="comment">(0,396)</span><span class="comment">(0,397)</span><span class="comment">(0,398)</span><span class="comment">(0,399)</span><span class="comment">(0,400)</span><span class="comment">(0,401)</span><span class="comment">(0,402)</span><span class="comment">(0,403)</span><span class="comment">(0,404)</span><span class="comment">(0,405)</span><span class="comment">(0,406)</span><span class="comment">(0,407)</span><span class="comment">(0,408)</span><span class="comment">(0,409)</span><span class="comment">(0,410)</span><span class="comment">(0,411)</span><span class="comment">(0,412)</span><span class="comment">(0,413)</span><span class="comment">(0,414)</span><span class="comment">(0,415)</span><span class="comment">(0,416)</span><span class="comment">(0,417)</span><span class="comment">(0,418)</span><span class="comment">(0,419)</span><span class="comment">(0,420)</span><span class="comment">(0,421)</span><span class="comment">(0,422)</span><span class="comment">(0,423)</span><span class="comment">(0,424)</span><span class="comment">(0,425)</span><span class="comment">(0,426)</span><span class="comment">(0,427)</span><span class="comment">(0,428)</span><span class="comment">(0,429)</span><span class="comment">(0,430)</span><span class="comment">(0,431)</span><span class="comment">(0,432)</span><span class="comment">(0,433)</span><span class="comment">(0,434)</span><span class="comment">(0,435)</span><span class="comment">(0,436)</span><span class="comment">(0,437)</span><span class="comment">(0,438)</span><span class="comment">(0,439)</span><span class="comment">(0,440)</span><span class="comment">(0,441)</span><span class="comment">(0,442)</span><span class="comment">(0,443)</span><span class="comment">(0,444)</span><span class="comment">(0,445)</span><span class="comment">(0,446)</span><span class="comment">(0,447)</span><span class="comment">(0,448)</span><span class="comment">(0,449)</span><span class="comment">(0,450)</span><span class="comment">(0,451)</span><span class="comment">(0,452)</span><span class="comment">(0,453)</span><span class="comment">(0,454)</span><span class="comment">(0,455)</span><span class="comment">(0,456)</span><span class="comment">(0,457)</span><span class="comment">(0,458)</span><span class="comment">(0,459)</span><span class="comment">(0,460)</span><span class="comment">(0,461)</span><span class="comment">(0,462)</span><span class="comment">(0,463)</span><span class="comment">(0,464)</span><span class="comment">(0,465)</span><span class="comment">(0,466)</span><span class="comment">(0,467)</span><span class="comment">(0,468)</span><span class="comment">(0,469)</span><span class="comment">(0,470)</span><span class="comment">(0,471)</span><span class="comment">(0,472)</span><span class="comment">(0,473)</span><span class="comment">(0,474)</span><span class="comment">(0,475)</span><span class="comment">(0,476)</span><span class="comment">(0,477)</span><span class="comment">(0,478)</span><span class="comment">(0,479)</span><span class="comment">(0,480)</span><span class="comment">(0,481)</span><span class="comment">(0,482)</span><span class="comment">(0,483)</span><span class="comment">(0,484)</span><span class="comment">(0,485)</span><span class="comment">(0,486)</span><span class="comment">(0,487)</span><span class="comment">(0,488)</span><span class="comment">(0,489)</span><span class="comment">(0,490)</span><span class="comment">(0,491)</span><span class="comment">(0,492)</span><span class="comment">(0,493)</span><span class="comment">(0,494)</span><span class="comment">(0,495)</span><span class="comment">(0,496)</span><span class="comment">(0,497)</span><span class="comment">(0,498)</span><span class="comment">(0,499)</span><span class="comment">(0,500)</span><span class="comment">(0,501)</span><span class="comment">(0,502)</span><span class="comment">(0,503)</span><span class="comment">(1,504)</span><span class="comment">(1,505)</span><span class="comment">(1,506)</span><span class="comment">(1,507)</span><span class="comment">(1,508)</span><span class="comment">(1,509)</span><span class="comment">(1,510)</span><span class="comment">(1,511)</span><span class="comment">(1,512)</span><span class="comment">(1,513)</span><span class="comment">(1,514)</span><span class="comment">(1,515)</span><span class="comment">(1,516)</span><span class="comment">(1,517)</span><span class="comment">(1,518)</span><span class="comment">(1,519)</span><span class="comment">(1,520)</span><span class="comment">(1,521)</span><span class="comment">(1,522)</span><span class="comment">(1,523)</span><span class="comment">(1,524)</span><span class="comment">(1,525)</span><span class="comment">(1,526)</span><span class="comment">(1,527)</span><span class="comment">(1,528)</span><span class="comment">(1,529)</span><span class="comment">(1,530)</span><span class="comment">(1,531)</span><span class="comment">(1,532)</span><span class="comment">(1,533)</span><span class="comment">(1,534)</span><span class="comment">(1,535)</span><span class="comment">(1,536)</span><span class="comment">(1,537)</span><span class="comment">(1,538)</span><span class="comment">(1,539)</span><span class="comment">(1,540)</span><span class="comment">(1,541)</span><span class="comment">(1,542)</span><span class="comment">(1,543)</span><span class="comment">(1,544)</span><span class="comment">(1,545)</span><span class="comment">(1,546)</span><span class="comment">(1,547)</span><span class="comment">(1,548)</span><span class="comment">(1,549)</span><span class="comment">(1,550)</span><span class="comment">(1,551)</span><span class="comment">(1,552)</span><span class="comment">(1,553)</span><span class="comment">(1,554)</span><span class="comment">(1,555)</span><span class="comment">(1,556)</span><span class="comment">(1,557)</span><span class="comment">(1,558)</span><span class="comment">(1,559)</span><span class="comment">(1,560)</span><span class="comment">(1,561)</span><span class="comment">(1,562)</span><span class="comment">(1,563)</span><span class="comment">(1,564)</span><span class="comment">(1,565)</span><span class="comment">(1,566)</span><span class="comment">(1,567)</span><span class="comment">(1,568)</span><span class="comment">(1,569)</span><span class="comment">(1,570)</span><span class="comment">(1,571)</span><span class="comment">(1,572)</span><span class="comment">(1,573)</span><span class="comment">(1,574)</span><span class="comment">(1,575)</span><span class="comment">(1,576)</span><span class="comment">(1,577)</span><span class="comment">(1,578)</span><span class="comment">(1,579)</span><span class="comment">(1,580)</span><span class="comment">(1,581)</span><span class="comment">(1,582)</span><span class="comment">(1,583)</span><span class="comment">(1,584)</span><span class="comment">(1,585)</span><span class="comment">(1,586)</span><span class="comment">(1,587)</span><span class="comment">(1,588)</span><span class="comment">(1,589)</span><span class="comment">(1,590)</span><span class="comment">(1,591)</span><span class="comment">(1,592)</span><span class="comment">(1,593)</span><span class="comment">(1,594)</span><span class="comment">(1,595)</span><span class="comment">(1,596)</span><span class="comment">(1,597)</span><span class="comment">(1,598)</span><span class="comment">(1,599)</span><span class="comment">(1,600)</span><span class="comment">(1,601)</span><span class="comment">(1,602)</span><span class="comment">(1,603)</span><span class="comment">(1,604)</span><span class="comment">(1,605)</span><span class="comment">(1,606)</span><span class="comment">(1,607)</span><span class="comment">(1,608)</span><span class="comment">(1,609)</span><span class="comment">(1,610)</span><span class="comment">(1,611)</span><span class="comment">(1,612)</span><span class="comment">(1,613)</span><span class="comment">(1,614)</span><span class="comment">(1,615)</span><span class="comment">(1,616)</span><span class="comment">(1,617)</span><span class="comment">(1,618)</span><span class="comment">(1,619)</span><span class="comment">(1,620)</span><span class="comment">(1,621)</span><span class="comment">(1,622)</span><span class="comment">(1,623)</span><span class="comment">(1,624)</span><span class="comment">(1,625)</span><span class="comment">(1,626)</span><span class="comment">(1,627)</span><span class="comment">(1,628)</span><span class="comment">(1,629)</span><span class="comment">(1,630)</span><span class="comment">(1,631)</span><span class="comment">(1,632)</span><span class="comment">(1,633)</span><span class="comment">(1,634)</span><span class="comment">(1,635)</span><span class="comment">(1,636)</span><span class="comment">(1,637)</span><span class="comment">(1,638)</span><span class="comment">(1,639)</span><span class="comment">(1,640)</span><span class="comment">(1,641)</span><span class="comment">(1,642)</span><span class="comment">(1,643)</span><span class="comment">(1,644)</span><span class="comment">(1,645)</span><span class="comment">(1,646)</span><span class="comment">(1,647)</span><span class="comment">(1,648)</span><span class="comment">(1,649)</span><span class="comment">(1,650)</span><span class="comment">(1,651)</span><span class="comment">(1,652)</span><span class="comment">(1,653)</span><span class="comment">(1,654)</span><span class="comment">(1,655)</span><span class="comment">(1,656)</span><span class="comment">(1,657)</span><span class="comment">(1,658)</span><span class="comment">(1,659)</span><span class="comment">(1,660)</span><span class="comment">(1,661)</span><span class="comment">(1,662)</span><span class="comment">(1,663)</span><span class="comment">(1,664)</span><span class="comment">(1,665)</span><span class="comment">(1,666)</span><span class="comment">(1,667)</span><span class="comment">(1,668)</span><span class="comment">(1,669)</span><span class="comment">(1,670)</span><span class="comment">(1,671)</span><span class="comment">(1,672)</span><span class="comment">(1,673)</span><span class="comment">(1,674)</span><span class="comment">(1,675)</span><span class="comment">(1,676)</span><span class="comment">(1,677)</span><span class="comment">(1,678)</span><span class="comment">(1,679)</span><span class="comment">(1,680)</span><span class="comment">(1,681)</span><span class="comment">(1,682)</span><span class="comment">(1,683)</span><span class="comment">(1,684)</span><span class="comment">(1,685)</span><span class="comment">(1,686)</span><span class="comment">(1,687)</span><span class="comment">(1,688)</span><span class="comment">(1,689)</span><span class="comment">(1,690)</span><span class="comment">(1,691)</span><span class="comment">(1,692)</span><span class="comment">(1,693)</span><span class="comment">(1,694)</span><span class="comment">(1,695)</span><span class="comment">(1,696)</span><span class="comment">(1,697)</span><span class="comment">(1,698)</span><span class="comment">(1,699)</span><span class="comment">(1,700)</span><span class="comment">(1,701)</span><span class="comment">(1,702)</span><span class="comment">(1,703)</span><span class="comment">(1,704)</span><span class="comment">(1,705)</span><span class="comment">(1,706)</span><span class="comment">(1,707)</span><span class="comment">(1,708)</span><span class="comment">(1,709)</span><span class="comment">(1,710)</span><span class="comment">(1,711)</span><span class="comment">(1,712)</span><span class="comment">(1,713)</span><span class="comment">(1,714)</span><span class="comment">(1,715)</span><span class="comment">(1,716)</span><span class="comment">(1,717)</span><span class="comment">(1,718)</span><span class="comment">(1,719)</span><span class="comment">(1,720)</span><span class="comment">(1,721)</span><span class="comment">(1,722)</span><span class="comment">(1,723)</span><span class="comment">(1,724)</span><span class="comment">(1,725)</span><span class="comment">(1,726)</span><span class="comment">(1,727)</span><span class="comment">(1,728)</span><span class="comment">(1,729)</span><span class="comment">(1,730)</span><span class="comment">(1,731)</span><span class="comment">(1,732)</span><span class="comment">(1,733)</span><span class="comment">(1,734)</span><span class="comment">(1,735)</span><span class="comment">(1,736)</span><span class="comment">(1,737)</span><span class="comment">(1,738)</span><span class="comment">(1,739)</span><span class="comment">(1,740)</span><span class="comment">(1,741)</span><span class="comment">(1,742)</span><span class="comment">(1,743)</span><span class="comment">(1,744)</span><span class="comment">(1,745)</span><span class="comment">(1,746)</span><span class="comment">(1,747)</span><span class="comment">(1,748)</span><span class="comment">(1,749)</span><span class="comment">(1,750)</span><span class="comment">(1,751)</span><span class="comment">(1,752)</span><span class="comment">(1,753)</span><span class="comment">(1,754)</span><span class="comment">(1,755)</span><span class="comment">(1,756)</span><span class="comment">(1,757)</span><span class="comment">(1,758)</span><span class="comment">(1,759)</span><span class="comment">(1,760)</span><span class="comment">(1,761)</span><span class="comment">(1,762)</span><span class="comment">(1,763)</span><span class="comment">(1,764)</span><span class="comment">(1,765)</span><span class="comment">(1,766)</span><span class="comment">(1,767)</span><span class="comment">(1,768)</span><span class="comment">(1,769)</span><span class="comment">(1,770)</span><span class="comment">(1,771)</span><span class="comment">(1,772)</span><span class="comment">(1,773)</span><span class="comment">(1,774)</span><span class="comment">(1,775)</span><span class="comment">(1,776)</span><span class="comment">(1,777)</span><span class="comment">(1,778)</span><span class="comment">(1,779)</span><span class="comment">(1,780)</span><span class="comment">(1,781)</span><span class="comment">(1,782)</span><span class="comment">(1,783)</span><span class="comment">(1,784)</span><span class="comment">(1,785)</span><span class="comment">(1,786)</span><span class="comment">(1,787)</span><span class="comment">(1,788)</span><span class="comment">(1,789)</span><span class="comment">(1,790)</span><span class="comment">(1,791)</span><span class="comment">(1,792)</span><span class="comment">(1,793)</span><span class="comment">(1,794)</span><span class="comment">(1,795)</span><span class="comment">(1,796)</span><span class="comment">(1,797)</span><span class="comment">(1,798)</span><span class="comment">(1,799)</span><span class="comment">(1,800)</span><span class="comment">(1,801)</span><span class="comment">(1,802)</span><span class="comment">(1,803)</span><span class="comment">(1,804)</span><span class="comment">(1,805)</span><span class="comment">(1,806)</span><span class="comment">(1,807)</span><span class="comment">(1,808)</span><span class="comment">(1,809)</span><span class="comment">(1,810)</span><span class="comment">(1,811)</span><span class="comment">(1,812)</span><span class="comment">(1,813)</span><span class="comment">(1,814)</span><span class="comment">(1,815)</span><span class="comment">(1,816)</span><span class="comment">(1,817)</span><span class="comment">(1,818)</span><span class="comment">(1,819)</span><span class="comment">(1,820)</span><span class="comment">(1,821)</span><span class="comment">(1,822)</span><span class="comment">(1,823)</span><span class="comment">(1,824)</span><span class="comment">(1,825)</span><span class="comment">(1,826)</span><span class="comment">(1,827)</span><span class="comment">(1,828)</span><span class="comment">(1,829)</span><span class="comment">(1,830)</span><span class="comment">(1,831)</span><span class="comment">(1,832)</span><span class="comment">(1,833)</span><span class="comment">(1,834)</span><span class="comment">(1,835)</span><span class="comment">(1,836)</span><span class="comment">(1,837)</span><span class="comment">(1,838)</span><span class="comment">(1,839)</span><span class="comment">(1,840)</span><span class="comment">(1,841)</span><span class="comment">(1,842)</span><span class="comment">(1,843)</span><span class="comment">(1,844)</span><span class="comment">(1,845)</span><span class="comment">(1,846)</span><span class="comment">(1,847)</span><span class="comment">(1,848)</span><span class="comment">(1,849)</span><span class="comment">(1,850)</span><span class="comment">(1,851)</span><span class="comment">(1,852)</span><span class="comment">(1,853)</span><span class="comment">(1,854)</span><span class="comment">(1,855)</span><span class="comment">(1,856)</span><span class="comment">(1,857)</span><span class="comment">(1,858)</span><span class="comment">(1,859)</span><span class="comment">(1,860)</span><span class="comment">(1,861)</span><span class="comment">(1,862)</span><span class="comment">(1,863)</span><span class="comment">(1,864)</span><span class="comment">(1,865)</span><span class="comment">(1,866)</span><span class="comment">(1,867)</span><span class="comment">(1,868)</span><span class="comment">(1,869)</span><span class="comment">(1,870)</span><span class="comment">(1,871)</span><span class="comment">(1,872)</span><span class="comment">(1,873)</span><span class="comment">(1,874)</span><span class="comment">(1,875)</span><span class="comment">(1,876)</span><span class="comment">(1,877)</span><span class="comment">(1,878)</span><span class="comment">(1,879)</span><span class="comment">(1,880)</span><span class="comment">(1,881)</span><span class="comment">(1,882)</span><span class="comment">(1,883)</span><span class="comment">(1,884)</span><span class="comment">(1,885)</span><span class="comment">(1,886)</span><span class="comment">(1,887)</span><span class="comment">(1,888)</span><span class="comment">(1,889)</span><span class="comment">(1,890)</span><span class="comment">(1,891)</span><span class="comment">(1,892)</span><span class="comment">(1,893)</span><span class="comment">(1,894)</span><span class="comment">(1,895)</span><span class="comment">(1,896)</span><span class="comment">(1,897)</span><span class="comment">(1,898)</span><span class="comment">(1,899)</span><span class="comment">(1,900)</span><span class="comment">(1,901)</span><span class="comment">(1,902)</span><span class="comment">(1,903)</span><span class="comment">(1,904)</span><span class="comment">(1,905)</span><span class="comment">(1,906)</span><span class="comment">(1,907)</span><span class="comment">(1,908)</span><span class="comment">(1,909)</span><span class="comment">(1,910)</span><span class="comment">(1,911)</span><span class="comment">(1,912)</span><span class="comment">(1,913)</span><span class="comment">(1,914)</span><span class="comment">(1,915)</span><span class="comment">(1,916)</span><span class="comment">(1,917)</span><span class="comment">(1,918)</span><span class="comment">(1,919)</span><span class="comment">(1,920)</span><span class="comment">(1,921)</span><span class="comment">(1,922)</span><span class="comment">(1,923)</span><span class="comment">(1,924)</span><span class="comment">(1,925)</span><span class="comment">(1,926)</span><span class="comment">(1,927)</span><span class="comment">(1,928)</span><span class="comment">(1,929)</span><span class="comment">(1,930)</span><span class="comment">(1,931)</span><span class="comment">(1,932)</span><span class="comment">(1,933)</span><span class="comment">(1,934)</span><span class="comment">(1,935)</span><span class="comment">(1,936)</span><span class="comment">(1,937)</span><span class="comment">(1,938)</span><span class="comment">(1,939)</span><span class="comment">(1,940)</span><span class="comment">(1,941)</span><span class="comment">(1,942)</span><span class="comment">(1,943)</span><span class="comment">(1,944)</span><span class="comment">(1,945)</span><span class="comment">(1,946)</span><span class="comment">(1,947)</span><span class="comment">(1,948)</span><span class="comment">(1,949)</span><span class="comment">(1,950)</span><span class="comment">(1,951)</span><span class="comment">(1,952)</span><span class="comment">(1,953)</span><span class="comment">(1,954)</span><span class="comment">(1,955)</span><span class="comment">(1,956)</span><span class="comment">(1,957)</span><span class="comment">(1,958)</span><span class="comment">(1,959)</span><span class="comment">(1,960)</span><span class="comment">(1,961)</span><span class="comment">(1,962)</span><span class="comment">(1,963)</span><span class="comment">(1,964)</span><span class="comment">(1,965)</span><span class="comment">(1,966)</span><span class="comment">(1,967)</span><span class="comment">(1,968)</span><span class="comment">(1,969)</span><span class="comment">(1,970)</span><span class="comment">(1,971)</span><span class="comment">(1,972)</span><span class="comment">(1,973)</span><span class="comment">(1,974)</span><span class="comment">(1,975)</span><span class="comment">(1,976)</span><span class="comment">(1,977)</span><span class="comment">(1,978)</span><span class="comment">(1,979)</span><span class="comment">(1,980)</span><span class="comment">(1,981)</span><span class="comment">(1,982)</span><span class="comment">(1,983)</span><span class="comment">(1,984)</span><span class="comment">(1,985)</span><span class="comment">(1,986)</span><span class="comment">(1,987)</span><span class="comment">(1,988)</span><span class="comment">(1,989)</span><span class="comment">(1,990)</span><span class="comment">(1,991)</span><span class="comment">(1,992)</span><span class="comment">(1,993)</span><span class="comment">(1,994)</span><span class="comment">(1,995)</span><span class="comment">(1,996)</span><span class="comment">(1,997)</span><span class="comment">(1,998)</span><span class="comment">(1,999)</span><span class="comment">(1,1000)</span><span class="comment">(1,1001)</span><span class="comment">(1,1002)</span><span class="comment">(1,1003)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>flatMap：和Scala里的是一样的</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scala</span>&gt; test.flatMap(x=&gt;x.to(<span class="number">3</span>)).collect</span><br><span class="line"><span class="attribute">res98</span>: Array[Int] = Array(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其他的算子</p>
<p>glom：把每个分区的数据形成一个数组，比mapPartitionWithIndex好用</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scala</span>&gt; test.glom.collect</span><br><span class="line"><span class="attribute">res62</span>: Array[Array[Int]] = Array(Array(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">106</span>, <span class="number">107</span>, <span class="number">108</span>, <span class="number">109</span>, <span class="number">110</span>, <span class="number">111</span>, <span class="number">112</span>, <span class="number">113</span>, <span class="number">114</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">118</span>, <span class="number">119</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">122</span>, <span class="number">123</span>, <span class="number">124</span>, <span class="number">125</span>, <span class="number">126</span>, <span class="number">127</span>, <span class="number">128</span>, <span class="number">129</span>, <span class="number">130</span>, <span class="number">131</span>, <span class="number">132</span>, <span class="number">133</span>, <span class="number">134</span>, <span class="number">135</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">138</span>, <span class="number">139</span>, <span class="number">140</span>, <span class="number">141</span>, <span class="number">142</span>, <span class="number">143</span>, <span class="number">144</span>, <span class="number">145</span>, <span class="number">146</span>, <span class="number">147</span>, <span class="number">148</span>, <span class="number">149</span>, <span class="number">150</span>, <span class="number">151</span>, <span class="number">152</span>, <span class="number">153</span>, <span class="number">154</span>, <span class="number">155</span>, <span class="number">156</span>, <span class="number">157</span>, <span class="number">158</span>, <span class="number">159</span>, <span class="number">160</span>, <span class="number">161</span>, <span class="number">162</span>, <span class="number">163</span>, <span class="number">164</span>, <span class="number">165</span>, <span class="number">166</span>, <span class="number">167</span>, <span class="number">168</span>, ...</span><br></pre></td></tr></table></figure>

<p>sample：抽样，随机抽样的</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">scala</span>&gt; (<span class="keyword">test</span>.<span class="keyword">sample</span>(false,0.77)).collect.<span class="keyword">foreach</span>(<span class="keyword">print</span>)</span><br><span class="line">236781112141516182022232425262728303132333435363738394041434446474850515254555657596061626364666768697172747576777879818285868789919293969798991001011021031041051061071081091101111121131161181191201211221241251271281301311321331341351361371381391401411441461471491501531541551561611621631641651661671681691701711721731741751761781791801811831841861871891901911931951961971982002012022042052072082092112122132142162172182202212222242252262272282302322332352362372382402412432442452472482502512522532542552562572582602612632642652662672682692702712732742752762772782812822832842892902922932942952962972982993003013023033043053063073083093113123133143153163173183193203213223233263293303313323333343353363373383393403413423443463473483493513523543573583593603613623633663673683693703713723743763773783793803813823833873903913923943954004014024034044054074084094114124134144154164174184194224234244264274284294304314324334344354364374384394404414424454464494504514524534544554564574584604614634644654664674684694714724744754764794804814824834844854864874884904914924934944954974984995005015025065075085105115125135145165175185195225235245255265275295305315325355375385395405415425445455465475485495515525545565575585595605625635645655675685715735755765795805815825835845855895905925935955965975985996016026036046066086096106116126136146156166176206216226236246256266276296316326336346356366376386396406416436446456466476486496506516536546556576586596606616626636646676696706716726736746756766776796806816836846856866876896906916926936946976986997007037047057067087097107117127157167177187197217227237267277297307327337347357367377387417427447457467477487497517527537547557567577587597607627637667677697707727737747757777787797807817827837847867887897907917937957967987998018028038048058068078098108128138148178198208228248258268278288308318328348358368378388408418428438458468478488498508528538548558588598608618628638648658668678688698708718758768778788798808828838848878888898908918958988999009019029039049059069079099129149159179189199209219229249259269279289299309319329339349359369379389399419429439449469489499509519549559569589599609619629639649659679689699709729749759769799809819829839859869879889899909919939949969979989991000</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>union：简单的数据合并，不去重</p>
<p>intersection：两个rdd的交集</p>
<p>subtract：出现在a里的没有出现在b里</p>
<p>.collect:把结果以数组的形式转到控制台</p>
<p>distinct：去重和sql效果一样 &#x3D;》 底层去重的方法是用reduceByKey进行去重的目的</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">scala&gt; val <span class="selector-tag">dd</span> = sc<span class="selector-class">.parallelize</span>(<span class="built_in">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>))</span><br><span class="line"><span class="selector-tag">dd</span>: org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rdd</span><span class="selector-class">.RDD</span><span class="selector-attr">[Int]</span> = ParallelCollectionRDD<span class="selector-attr">[28]</span> at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="selector-tag">dd</span><span class="selector-class">.collect</span><span class="selector-class">.foreach</span>(print)</span><br><span class="line"><span class="number">122345678</span></span><br><span class="line">scala&gt; <span class="selector-tag">dd</span><span class="selector-class">.collect</span><span class="selector-class">.foreach</span>(println)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="selector-tag">dd</span><span class="selector-class">.distinct</span><span class="selector-class">.collect</span><span class="selector-class">.foreach</span>(println)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>kv算子 ： groupbykey &#x3D;》 就是对key进行分组，和wordcount里的分组是一样的&#x3D;》工作中不要使用，效率低，不灵活</p>
<p>预聚合：</p>
<ul>
<li>mr ： input &#x3D; &gt; map &#x3D;&gt; combine(调优的过程) &#x3D;&gt; reduce &#x3D;&gt; output</li>
<li>combine &#x3D;&gt; 预聚合 按照map的输出的key进行数据聚合</li>
</ul>
<p>mapSideCombine &#x3D; false 代表预聚合关闭</p>
<p>一般groupbykey是关闭预聚合的，reducebykey是开启的</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">scala&gt; test<span class="number">1.</span>collect</span><br><span class="line">res<span class="number">25</span>: Array[<span class="comment">(Int, Int)</span>] = Array<span class="comment">((0,1)</span>, <span class="comment">(0,2)</span>, <span class="comment">(0,3)</span>, <span class="comment">(0,4)</span>, <span class="comment">(0,5)</span>, <span class="comment">(0,6)</span>, <span class="comment">(0,7)</span>, <span class="comment">(0,8)</span>, <span class="comment">(0,9)</span>, <span class="comment">(0,10)</span>, <span class="comment">(0,11)</span>, <span class="comment">(0,12)</span>, <span class="comment">(0,13)</span>, <span class="comment">(0,14)</span>, <span class="comment">(0,15)</span>, <span class="comment">(0,16)</span>, <span class="comment">(0,17)</span>, <span class="comment">(0,18)</span>, <span class="comment">(0,19)</span>, <span class="comment">(0,20)</span>, <span class="comment">(0,21)</span>, <span class="comment">(0,22)</span>, <span class="comment">(0,23)</span>, <span class="comment">(0,24)</span>, <span class="comment">(0,25)</span>, <span class="comment">(0,26)</span>, <span class="comment">(0,27)</span>, <span class="comment">(0,28)</span>, <span class="comment">(0,29)</span>, <span class="comment">(0,30)</span>, <span class="comment">(0,31)</span>, <span class="comment">(0,32)</span>, <span class="comment">(0,33)</span>, <span class="comment">(0,34)</span>, <span class="comment">(0,35)</span>, <span class="comment">(0,36)</span>, <span class="comment">(0,37)</span>, <span class="comment">(0,38)</span>, <span class="comment">(0,39)</span>, <span class="comment">(0,40)</span>, <span class="comment">(0,41)</span>, <span class="comment">(0,42)</span>, <span class="comment">(0,43)</span>, <span class="comment">(0,44)</span>, <span class="comment">(0,45)</span>, <span class="comment">(0,46)</span>, <span class="comment">(0,47)</span>, <span class="comment">(0,48)</span>, <span class="comment">(0,49)</span>, <span class="comment">(0,50)</span>, <span class="comment">(0,51)</span>, <span class="comment">(0,52)</span>, <span class="comment">(0,53)</span>, <span class="comment">(0,54)</span>, <span class="comment">(0,55)</span>, <span class="comment">(0,56)</span>, <span class="comment">(0,57)</span>, <span class="comment">(0,58)</span>, <span class="comment">(0,59)</span>, <span class="comment">(0,60)</span>, <span class="comment">(0,61)</span>, <span class="comment">(0,62)</span>, <span class="comment">(0,63)</span>, <span class="comment">(0,64)</span>, <span class="comment">(0,65)</span>, <span class="comment">(0,66)</span>, <span class="comment">(0,67)</span>, <span class="comment">(0,68)</span>, <span class="comment">(0,69)</span>, <span class="comment">(0,70)</span>, <span class="comment">(0,71)</span>, <span class="comment">(0,72)</span>, <span class="comment">(0,73)</span>, <span class="comment">(0,74)</span>, <span class="comment">(0,75)</span>, <span class="comment">(0,76)</span>, <span class="comment">(0,77)</span>, <span class="comment">(0,78)</span>, <span class="comment">(0,79)</span>, <span class="comment">(0,80)</span>, <span class="comment">(0,81)</span>, <span class="comment">(0,82)</span>, <span class="comment">(0,83)</span>, <span class="comment">(0,84)</span>, <span class="comment">(0,85)</span>, <span class="comment">(0,86)</span>, <span class="comment">(0,87)</span>, <span class="comment">(0,88)</span>, <span class="comment">(0,89)</span>, <span class="comment">(0,90)</span>, <span class="comment">(0,91)</span>, <span class="comment">(0,92)</span>, <span class="comment">(0,93)</span>, <span class="comment">(0,...</span></span><br><span class="line"><span class="comment">scala&gt; test1.groupByKey.collect.foreach(print)</span></span><br><span class="line"><span class="comment">(0,CompactBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500)</span>)<span class="comment">(1,CompactBuffer(501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000)</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>reducebykey：对比groupby是相当于可以统计之后进行计算的</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">scala&gt; test1.reduceByKey(<span class="function"><span class="params">(x,y)</span>=&gt;</span>&#123;x+y&#125;).collect.foreach(<span class="built_in">print</span>)</span><br><span class="line">(<span class="number">0</span>,<span class="number">125250</span>)(<span class="number">1</span>,<span class="number">375250</span>)</span><br><span class="line"><span class="comment">--------------------------------------其中的x+y代表拉完成之后，对他们进行相加</span></span><br><span class="line"><span class="comment">--------------------------------------通过reduceByKey实现distinct</span></span><br><span class="line">scala&gt; test1.reduceByKey(<span class="function"><span class="params">(x,_)</span>=&gt;</span>&#123;x&#125;).map(_._1).collect.foreach(println)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>groupby：自定义分组</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scala</span>&gt; test.groupBy(x=&gt;&#123;if(x%<span class="number">2</span>==<span class="number">0</span>)&#123;<span class="string">&quot;2e&quot;</span>&#125;else&#123;<span class="string">&quot;e2&quot;</span>&#125;&#125;).collect</span><br><span class="line"><span class="attribute">res99</span>: Array[(String, Iterable[Int])] = Array((e2,CompactBuffer(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">23</span>, <span class="number">25</span>, <span class="number">27</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">33</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">45</span>, <span class="number">47</span>, <span class="number">49</span>, <span class="number">51</span>, <span class="number">53</span>, <span class="number">55</span>, <span class="number">57</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">63</span>, <span class="number">65</span>, <span class="number">67</span>, <span class="number">69</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">75</span>, <span class="number">77</span>, <span class="number">79</span>, <span class="number">81</span>, <span class="number">83</span>, <span class="number">85</span>, <span class="number">87</span>, <span class="number">89</span>, <span class="number">91</span>, <span class="number">93</span>, <span class="number">95</span>, <span class="number">97</span>, <span class="number">99</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">105</span>, <span class="number">107</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">113</span>, <span class="number">115</span>, <span class="number">117</span>, <span class="number">119</span>, <span class="number">121</span>, <span class="number">123</span>, <span class="number">125</span>, <span class="number">127</span>, <span class="number">129</span>, <span class="number">131</span>, <span class="number">133</span>, <span class="number">135</span>, <span class="number">137</span>, <span class="number">139</span>, <span class="number">141</span>, <span class="number">143</span>, <span class="number">145</span>, <span class="number">147</span>, <span class="number">149</span>, <span class="number">151</span>, <span class="number">153</span>, <span class="number">155</span>, <span class="number">157</span>, <span class="number">159</span>, <span class="number">161</span>, <span class="number">163</span>, <span class="number">165</span>, <span class="number">167</span>, <span class="number">169</span>, <span class="number">171</span>, <span class="number">173</span>, <span class="number">175</span>, <span class="number">177</span>, <span class="number">179</span>, <span class="number">181</span>, <span class="number">183</span>, <span class="number">185</span>, <span class="number">187</span>, <span class="number">189</span>, <span class="number">191</span>, <span class="number">193</span>, <span class="number">195</span>, <span class="number">197</span>, <span class="number">199</span>, <span class="number">201</span>, <span class="number">203</span>, <span class="number">205</span>, <span class="number">207</span>, <span class="number">209</span>, <span class="number">211</span>, <span class="number">213</span>, <span class="number">215</span>, <span class="number">217</span>, <span class="number">219</span>, <span class="number">221</span>, <span class="number">223</span>, <span class="number">225</span>, <span class="number">227</span>, <span class="number">229</span>, <span class="number">231</span>, <span class="number">233</span>, <span class="number">235</span>, <span class="number">237</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">243</span>, <span class="number">245</span>, <span class="number">247</span>, <span class="number">249</span>, <span class="number">251</span>, <span class="number">253</span>, <span class="number">255</span>, <span class="number">257</span>, <span class="number">259</span>, <span class="number">261</span>, <span class="number">263</span>, <span class="number">265</span>, <span class="number">267</span>, <span class="number">269</span>, <span class="number">271</span>, <span class="number">273</span>, <span class="number">275</span>, <span class="number">277</span>, <span class="number">279</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">285</span>, <span class="number">287</span>, <span class="number">289</span>, <span class="number">291</span>, <span class="number">293</span>, <span class="number">295</span>, <span class="number">297</span>, <span class="number">299</span>, <span class="number">301</span>, <span class="number">303</span>, <span class="number">30</span>...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>sortbykey：按照key进行排序，分区排序，如果想达到全局排序，则要求你rdd里的只有一个的分区，降序就是把true变成false</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">scala&gt; val r2 = sc<span class="selector-class">.parallelize</span>(<span class="built_in">List</span>((<span class="string">&quot;zuan&quot;</span>,<span class="number">18</span>),(<span class="string">&quot;kaige&quot;</span>,<span class="number">20</span>),(<span class="string">&quot;zihang&quot;</span>,<span class="number">21</span>)),<span class="number">1</span>)</span><br><span class="line">r2: org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rdd</span><span class="selector-class">.RDD</span><span class="selector-attr">[(String, Int)]</span> = ParallelCollectionRDD<span class="selector-attr">[69]</span> at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; r2<span class="selector-class">.sortByKey</span>(true)</span><br><span class="line">res89: org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rdd</span><span class="selector-class">.RDD</span><span class="selector-attr">[(String, Int)]</span> = ShuffledRDD<span class="selector-attr">[70]</span> at sortByKey at &lt;console&gt;:<span class="number">25</span></span><br><span class="line"></span><br><span class="line">scala&gt; res89<span class="selector-class">.collect</span></span><br><span class="line">res90: Array<span class="selector-attr">[(String, Int)]</span> = <span class="built_in">Array</span>((kaige,<span class="number">20</span>), (zihang,<span class="number">21</span>), (zuan,<span class="number">18</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>自定义排序：sortby</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">scala&gt; r2.sort<span class="constructor">By(<span class="params">x</span>=&gt;<span class="params">x</span>.<span class="params">_2</span>,<span class="params">true</span>)</span>.collect</span><br><span class="line">res92: Array<span class="literal">[(S<span class="identifier">tring</span>, I<span class="identifier">nt</span>)]</span> = <span class="constructor">Array((<span class="params">zuan</span>,18)</span>, (kaige,<span class="number">20</span>), (zihang,<span class="number">21</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>join：他默认就是按照key进行关联的&#x3D;》底层调用的是cogroup</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">scala&gt; val r3 = sc<span class="selector-class">.parallelize</span>(<span class="built_in">List</span>((<span class="string">&quot;zuan&quot;</span>,<span class="string">&quot;广西&quot;</span>),(<span class="string">&quot;kaige&quot;</span>,<span class="string">&quot;中国&quot;</span>),(<span class="string">&quot;zihang&quot;</span>,<span class="string">&quot;黑龙江&quot;</span>)))</span><br><span class="line">r3: org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rdd</span><span class="selector-class">.RDD</span><span class="selector-attr">[(String, String)]</span> = ParallelCollectionRDD<span class="selector-attr">[77]</span> at parallelize at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; r1<span class="selector-class">.join</span>(r3)<span class="selector-class">.collect</span></span><br><span class="line">res93: Array<span class="selector-attr">[(String, (Int, String))]</span> = <span class="built_in">Array</span>((zuan,(<span class="number">18</span>,广西)), (kaige,(<span class="number">20</span>,中国)), (zihang,(<span class="number">21</span>,黑龙江)))</span><br><span class="line"></span><br><span class="line">-----------------------<span class="attr">--cogroup</span></span><br><span class="line">scala&gt; r1<span class="selector-class">.cogroup</span>(r3)<span class="selector-class">.collect</span></span><br><span class="line">res94: Array<span class="selector-attr">[(String, (Iterable[Int]</span>, Iterable<span class="selector-attr">[String]</span>))] = <span class="built_in">Array</span>((zuan,(<span class="built_in">CompactBuffer</span>(<span class="number">18</span>),<span class="built_in">CompactBuffer</span>(广西))), (kaige,(<span class="built_in">CompactBuffer</span>(<span class="number">20</span>),<span class="built_in">CompactBuffer</span>(中国))), (zihang,(<span class="built_in">CompactBuffer</span>(<span class="number">21</span>),<span class="built_in">CompactBuffer</span>(黑龙江))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>都是根据key进行关联</p>
<p>但是cogroup的返回是集合当作value的</p>
<p>join则是返回的是值当value</p>
<p>分区规则：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">分区号：0，元素是4 4%<span class="attribute">4</span>=0</span><br><span class="line">分区号：1，元素是9 9%<span class="attribute">4</span>=1</span><br></pre></td></tr></table></figure>

<p>action算子：会执行job的算子</p>
<p>collect&#x3D;》把rdd的数据集拉回控制台 &#x3D; 》driver端</p>
<p>foreach</p>
<p>foreachpartition：对每个分区进行处理&#x3D;》首选的mysql数据集导入是它，因为获取mysql的次数能少一点</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">  def foreach<span class="constructor">Partition(<span class="params">f</span>: Iterator[T] =&gt; Unit)</span>: Unit = withScope &#123;</span><br><span class="line">    <span class="keyword">val</span> cleanF = sc.clean(f)</span><br><span class="line">    sc.run<span class="constructor">Job(<span class="params">this</span>, (<span class="params">iter</span>: Iterator[T])</span> =&gt; clean<span class="constructor">F(<span class="params">iter</span>)</span>)</span><br><span class="line">  &#125;</span><br><span class="line">-----------------------------------使用</span><br><span class="line">scala&gt; test.foreach<span class="constructor">Partition(<span class="params">ax</span>=&gt;<span class="params">ax</span>.<span class="params">foreach</span>(<span class="params">print</span>)</span>)</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931941951961971981992002012022032042052062072082092102112122132142152162172182192202212222232242252262272282292302312322332342352362372382392402412422432442452462472482492502512522532542552562572582592602612622632642652662672682692702712722732742752762772782792802812822832842852862872882892902912922932942952962972982993003013023033043053063073083093103113123133143153163173183193203213223233243253263273283293303313323333343353363373383393403413423433443453463473483493503513523533543553563573583593603613623633643653663673683693703713723733743753763773783793803813823833843853863873883893903913923933943953963973983994004014024034044054064074084094104114124134144154164174184194204214224234244254264274284294304314324334344354364374384394404414424434444454464474484494504514524534544554564574584594604614624634644654664674684694704714724734744754764774784794804814824834844854864874884894904914924934944954964974984995005015025035045055065075085095105115125135145155165175185195205215225235245255265275285295305315325335345355365375385395405415425435445455465475485495505515525535545555565575585595605615625635645655665675685695705715725735745755765775785795805815825835845855865875885895905915925935945955965975985996006016026036046056066076086096106116126136146156166176186196206216226236246256266276286296306316326336346356366376386396406416426436446456466476486496506516526536546556566576586596606616626636646656666676686696706716726736746756766776786796806816826836846856866876886896906916926936946956966976986997007017027037047057067077087097107117127137147157167177187197207217227237247257267277287297307317327337347357367377387397407417427437447457467477487497507517527537547557567577587597607617627637647657667677687697707717727737747757767777787797807817827837847857867877887897907917927937947957967977987998008018028038048058068078088098108118128138148158168178188198208218228238248258268278288298308318328338348358368378388398408418428438448458468478488498508518528538548558568578588598608618628638648658668678688698708718728738748758768778788798808818828838848858868878888898908918928938948958968978988999009019029039049059069079089099109119129139149159169179189199209219229239249259269279289299309319329339349359369379389399409419429439449459469479489499509519529539549559569579589599609619629639649659669679689699709719729739749759769779789799809819829839849859869879889899909919929939949959969979989991000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>reduce：mr里的reduce，这里不可以接collect，因为已经完成了</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">scala&gt; test.<span class="built_in">reduce</span>(<span class="function">(<span class="params">x,y</span>)=&gt;</span>x+y)</span><br><span class="line">res108: Int = <span class="number">500500</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>first：取出数据集里的第一个元素底层是take</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">scala<span class="operator">&gt;</span> test.first()</span><br><span class="line">res109: <span class="type">Int</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="comment">-------------------------take</span></span><br><span class="line">scala<span class="operator">&gt;</span> test.take(<span class="number">77</span>)</span><br><span class="line">res112: <span class="keyword">Array</span>[<span class="type">Int</span>] <span class="operator">=</span> <span class="keyword">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>takeOrderd:升序获取前n个</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scala</span>&gt; test.takeOrdered(<span class="number">2</span>)</span><br><span class="line"><span class="attribute">res127</span>: Array[Int] = Array(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">scala</span>&gt; test.takeOrdered(<span class="number">55</span>)</span><br><span class="line"><span class="attribute">res128</span>: Array[Int] = Array(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>top:就是取排名前几的数据底层是takeOrederd&#x3D;》数据量比较小的时候可以使用</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scala</span>&gt; test.top(<span class="number">1</span>)</span><br><span class="line"><span class="attribute">res113</span>: Array[Int] = Array(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">scala</span>&gt; test.top(<span class="number">5</span>)</span><br><span class="line"><span class="attribute">res114</span>: Array[Int] = Array(<span class="number">1000</span>, <span class="number">999</span>, <span class="number">998</span>, <span class="number">997</span>, <span class="number">996</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>saveASTextFile</p>
<p>saveASSequenceFile</p>
<p>saveAsObjectFile</p>
<p>countByKey:统计key的个数</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">scala&gt; test1<span class="selector-class">.countByKey</span></span><br><span class="line">res125: scala<span class="selector-class">.collection</span><span class="selector-class">.Map</span><span class="selector-attr">[Int,Long]</span> = <span class="built_in">Map</span>(<span class="number">0</span> -&gt; <span class="number">500</span>, <span class="number">1</span> -&gt; <span class="number">500</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>collectAsMap：和countByKey有点类似</p>
<p>count:返回rdd里有多少个数</p>
<p>判断action算子和普通算子的方法&#x3D;》源码底层有runjob</p>
<p>&#x3D;》调用collect&#x2F;其他action算子</p>
<h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">一张表：</span><br><span class="line">name price num</span><br><span class="line">diar<span class="number"> 300 </span>1000</span><br><span class="line">香奈儿<span class="number"> 4000 </span>2</span><br><span class="line">螺蛳粉<span class="number"> 200 </span>98</span><br><span class="line">30显卡<span class="number"> 200 </span>10</span><br><span class="line">-----------------------------------------------按照价格进行排序【desc】，如果价格相同，按照库存排序【asc】</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">数据类型：tuple【推荐】 ， <span class="class"><span class="keyword">class</span> <span class="title">，</span> <span class="title">case</span> <span class="title">class【推荐】</span></span></span><br><span class="line">用tuple做</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">    <span class="keyword">val</span> value = sc.parallelize(<span class="type">List</span>(<span class="string">&quot;diar 300 1000&quot;</span>,</span><br><span class="line">      <span class="string">&quot;香奈儿 4000 2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;螺蛳粉 200 98&quot;</span>,</span><br><span class="line">      <span class="string">&quot;30显卡 200 10&quot;</span>)，<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> etlData = value.map(x=&gt;&#123;</span><br><span class="line">      <span class="keyword">val</span> strings=x.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">      <span class="keyword">val</span> name=strings(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">val</span> price=strings(<span class="number">1</span>).toInt</span><br><span class="line">      <span class="keyword">val</span> store=strings(<span class="number">2</span>)</span><br><span class="line">      (name,price,store)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    etlData.sortBy(x =&gt; ( -x._2 , x._3)).saveAsTextFile(<span class="string">&quot;hdfs://bigdata3:9000/data&quot;</span>)</span><br><span class="line">----------------------------------------------------------<span class="class"><span class="keyword">class</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="keyword">import</span> sparkfirst.<span class="type">ContextUtils</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">sparktest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sc:<span class="type">SparkContext</span> = <span class="type">ContextUtils</span>.getSparkContext(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> bb = <span class="keyword">new</span> <span class="type">SparkContext</span>(<span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;test&quot;</span>).setMaster(<span class="string">&quot;local[2]&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value = sc.parallelize(<span class="type">List</span>(<span class="string">&quot;diar 300 1000&quot;</span>,</span><br><span class="line">      <span class="string">&quot;香奈儿 4000 2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;螺蛳粉 200 98&quot;</span>,</span><br><span class="line">      <span class="string">&quot;30显卡 200 10&quot;</span>)，<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> etlData = value.map(x=&gt;&#123;</span><br><span class="line">      <span class="keyword">val</span> strings=x.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">      <span class="keyword">val</span> name=strings(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">val</span> price=strings(<span class="number">1</span>).toDouble</span><br><span class="line">      <span class="keyword">val</span> store=strings(<span class="number">2</span>).toInt</span><br><span class="line">      <span class="keyword">new</span> skuu(name,price,store)</span><br><span class="line">    &#125;)</span><br><span class="line">    etlData.sortBy(x=&gt;(-x.d,x.str1)).collect.foreach(print(_))</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">skuu</span>(<span class="params">val str: <span class="type">String</span>,val d: <span class="type">Double</span>,val str1: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> =str + <span class="string">&quot;\t&quot;</span> + d + <span class="string">&quot;\t&quot;</span> + str1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------------------------------------------<span class="keyword">case</span> <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="keyword">case</span>好处=》重写了toString，hashcode方法，自动实现了序列化，不用实例化</span><br><span class="line"><span class="keyword">package</span> sparkfirst</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="keyword">import</span> sparkfirst.<span class="type">ContextUtils</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">sparktest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sc:<span class="type">SparkContext</span> = <span class="type">ContextUtils</span>.getSparkContext(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> bb = <span class="keyword">new</span> <span class="type">SparkContext</span>(<span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;test&quot;</span>).setMaster(<span class="string">&quot;local[2]&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value = sc.parallelize(<span class="type">List</span>(<span class="string">&quot;diar 300 1000&quot;</span>,</span><br><span class="line">      <span class="string">&quot;香奈儿 4000 2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;螺蛳粉 200 98&quot;</span>,</span><br><span class="line">      <span class="string">&quot;30显卡 200 10&quot;</span>)，<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> etlData = value.map(x=&gt;&#123;</span><br><span class="line">      <span class="keyword">val</span> strings=x.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">      <span class="keyword">val</span> name=strings(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">val</span> price=strings(<span class="number">1</span>).toDouble</span><br><span class="line">      <span class="keyword">val</span> store=strings(<span class="number">2</span>).toInt</span><br><span class="line">      skuu(name,price,store)</span><br><span class="line">    &#125;)</span><br><span class="line">    etlData.sortBy(x=&gt;(-x.d,x.str1)).collect.foreach(print(_))</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">skuu</span>(<span class="params">val str: <span class="type">String</span>,val d: <span class="type">Double</span>,val str1: <span class="type">Int</span></span>)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当用 <code>saveAsTextFile(&quot;hdfs://bigdata3:9000/data/test&quot;)</code></p>
<p>的时候它会根据你的分区数来生成文件</p>
<h3 id="需求：用两类进行-对比："><a href="#需求：用两类进行-对比：" class="headerlink" title="需求：用两类进行 对比："></a>需求：用两类进行 对比：</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sparkfirst</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="keyword">import</span> sparkfirst.<span class="type">ContextUtils</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">sparktest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sc:<span class="type">SparkContext</span> = <span class="type">ContextUtils</span>.getSparkContext(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> bb = <span class="keyword">new</span> <span class="type">SparkContext</span>(<span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;test&quot;</span>).setMaster(<span class="string">&quot;local[2]&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value = sc.parallelize(<span class="type">List</span>(</span><br><span class="line">      <span class="string">&quot;diar 300 1000&quot;</span>,</span><br><span class="line">      <span class="string">&quot;香奈儿 4000 2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;螺蛳粉 200 98&quot;</span>,</span><br><span class="line">      <span class="string">&quot;30显卡 200 10&quot;</span>),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> etlData = value.map(x=&gt;&#123;</span><br><span class="line">      <span class="keyword">val</span> strings=x.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">      <span class="keyword">val</span> name=strings(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">val</span> price=strings(<span class="number">1</span>).toDouble</span><br><span class="line">      <span class="keyword">val</span> store=strings(<span class="number">2</span>).toInt</span><br><span class="line">      skuu(name,price,store)</span><br><span class="line">    &#125;)</span><br><span class="line">    etlData.sortBy(x=&gt;(-x.d,x.str1)).collect.foreach(print(_))</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">skuu</span>(<span class="params">val str: <span class="type">String</span>,val d: <span class="type">Double</span>,val str1: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Ordered</span>[skuu]</span>&#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(that: skuu): <span class="type">Int</span> = &#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.d == that.d)&#123;</span><br><span class="line">       <span class="keyword">this</span>.str1-that.str1</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">       -(<span class="keyword">this</span>.d - that.d).toInt</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>隐式转换</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sparkfirst</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"><span class="keyword">import</span> sparkfirst.<span class="type">ContextUtils</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">sparktest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sc:<span class="type">SparkContext</span> = <span class="type">ContextUtils</span>.getSparkContext(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> bb = <span class="keyword">new</span> <span class="type">SparkContext</span>(<span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;test&quot;</span>).setMaster(<span class="string">&quot;local[2]&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value = sc.parallelize(<span class="type">List</span>(</span><br><span class="line">      <span class="string">&quot;diar 300 1000&quot;</span>,</span><br><span class="line">      <span class="string">&quot;香奈儿 4000 2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;螺蛳粉 200 98&quot;</span>,</span><br><span class="line">      <span class="string">&quot;30显卡 200 10&quot;</span>),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> etlData = value.map(x=&gt;&#123;</span><br><span class="line">      <span class="keyword">val</span> strings=x.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">      <span class="keyword">val</span> name=strings(<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">val</span> price=strings(<span class="number">1</span>).toDouble</span><br><span class="line">      <span class="keyword">val</span> store=strings(<span class="number">2</span>).toInt</span><br><span class="line">      skuu(name,price,store)</span><br><span class="line">    &#125;)</span><br><span class="line">    etlData.sortBy(x=&gt;(-x.d,x.str1)).collect.foreach(print(_))</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">    implicitly <span class="function"><span class="keyword">def</span> <span class="title">skutooreder</span></span>(sku:skuu):<span class="type">Ordered</span>[skuu]=&#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="type">Ordered</span>[skuu]&#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">compare</span></span>(that: skuu): <span class="type">Int</span> = &#123;</span><br><span class="line">          <span class="keyword">if</span> (sku.d == that.d)&#123;</span><br><span class="line">            sku.str1-that.str1</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            -(sku.d - that.d).toInt</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"> <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">skuu</span>(<span class="params">val str: <span class="type">String</span>,val d: <span class="type">Double</span>,val str1: <span class="type">Int</span></span>)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">数据：</span><br><span class="line">word <span class="keyword">show</span> click</span><br><span class="line">a,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">b,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">c,<span class="number">4</span>,<span class="number">5</span></span><br><span class="line">f,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line">g,<span class="number">7</span>,<span class="number">8</span></span><br><span class="line">k,<span class="number">8</span>,<span class="number">9</span></span><br><span class="line">a,<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">a,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">a,<span class="number">4</span>,<span class="number">5</span></span><br><span class="line">b,<span class="number">5</span>,<span class="number">6</span></span><br><span class="line"><span class="comment">------------------------------------------------------------------------------</span></span><br><span class="line">package sparkfirst</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;SparkConf, SparkContext&#125;</span><br><span class="line"><span class="keyword">import</span> sparkfirst.ContextUtils</span><br><span class="line"><span class="keyword">object</span> sparktest &#123;</span><br><span class="line"></span><br><span class="line">  def sub(<span class="type">name</span>: String, tuple: (<span class="type">Double</span>, <span class="type">Int</span>))=&#123;</span><br><span class="line">    (<span class="type">name</span> , tuple)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def main(args: <span class="keyword">Array</span>[String]): Unit = &#123;</span><br><span class="line">    val sc:SparkContext = ContextUtils.getSparkContext(&quot;test&quot;)</span><br><span class="line">    val bb = <span class="built_in">new</span> SparkContext(<span class="built_in">new</span> SparkConf().setAppName(&quot;test&quot;).setMaster(&quot;local[2]&quot;))</span><br><span class="line"></span><br><span class="line">    val <span class="keyword">value</span> = sc.parallelize(List(</span><br><span class="line">      &quot;a,2,3&quot;,</span><br><span class="line">      &quot;b,1,1&quot;,</span><br><span class="line">      &quot;c,4,5&quot;,</span><br><span class="line">      &quot;f,5,6&quot;,</span><br><span class="line">      &quot;g,7,8&quot;,</span><br><span class="line">      &quot;k,8,9&quot;,</span><br><span class="line">      &quot;a,1,2&quot;,</span><br><span class="line">      &quot;a,1,1&quot;,</span><br><span class="line">      &quot;a,4,5&quot;,</span><br><span class="line">      &quot;b,5,6&quot;),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    val etlData = <span class="keyword">value</span>.map(x=&gt;&#123;</span><br><span class="line">      val strings=x.split(&quot;,&quot;)</span><br><span class="line">      val <span class="type">name</span>=strings(<span class="number">0</span>)</span><br><span class="line">      val price=strings(<span class="number">1</span>).toDouble</span><br><span class="line">      val store=strings(<span class="number">2</span>).toInt</span><br><span class="line">      sub(<span class="type">name</span>,(price,store))</span><br><span class="line">     // (<span class="type">name</span>,(price,store))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    etlData.reduceByKey((x,y)=&gt;&#123;</span><br><span class="line">      (x._1+y._1,x._2+y._2)</span><br><span class="line">    &#125;).map(x=&gt;x._1+&quot;\t&quot;+x._2._1+&quot;\t&quot;+x._2._2+&quot;\t&quot;)</span><br><span class="line">   // etlData.reduceByKey((x,y)=&gt;&#123;(x._1+y._1,x._2+y._2)&#125;).map(x=&gt;x._1+&quot;\t&quot;+x._2._1+&quot;\t&quot;+x._2._2+&quot;\t&quot;)</span><br><span class="line">  </span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="理论："><a href="#理论：" class="headerlink" title="理论："></a>理论：</h3><p>spark架构：</p>
<ul>
<li>Application &#x3D;》 spark作业 &#x3D;》 driver program 和 executor on the cluster两个进程<ul>
<li>driver：运行sparkContext</li>
<li>exacutor：运行任务并保存数据在内存和磁盘中</li>
</ul>
</li>
<li>web ui</li>
<li>sparkcontext</li>
<li>application jar &#x3D;》 开发好的代码生成的jar包 &#x3D;》 包含spark作业 &#x3D;》 包含 main方法 &#x3D;》 用户自己开发完spark之后可以部署到服务器上</li>
<li>driver program &#x3D;》 运行 jar包里的main方法 &#x3D;》 创建sparkContext</li>
<li>Custer manager &#x3D;》 集群管理者 &#x3D;》 通过集群获取资源</li>
<li>Deploy mode &#x3D;》 当把作业提交到yarn上的时候<ul>
<li>cluster模式：是跑在集群内布的（driver）&#x3D;》 yarn所在的机器里面</li>
<li>client模式：跑在集群外外的</li>
</ul>
</li>
<li>Worker node &#x3D;》 工作节点&#x3D;》打工人&#x3D;》运行集群代码&#x3D;&#x3D;node manager</li>
<li>excutor &#x3D; 》相当于yarn的container&#x3D;》每个spark都有自己的excutor</li>
<li>task &#x3D;》partition &#x3D;》 rdd</li>
<li>job &#x3D;》 spark 里的job &#x3D;》 application里的job &#x3D;》 一个application里可能会有多个job</li>
<li>stage &#x3D;》 job的小单位，且每个stage之间是有依赖关系的</li>
<li>一个application会包含1-n个job，一个job包含1-n个stage</li>
<li>一个stage可以包含1-n个task</li>
<li>task和rdd里的分区数一一对应</li>
</ul>
<h3 id="spark的执行流程"><a href="#spark的执行流程" class="headerlink" title="spark的执行流程"></a>spark的执行流程</h3><p>sc去链接cluster manager</p>
<p>cluster manager 会给spark作业分配资源</p>
<p>spark一旦连接上Custer</p>
<p>启动&#x3D;》exector&#x3D;》存储和计算</p>
<p>sc发送代码 给 exector 发送task给他去运行</p>
<p>每个作业都是有自己的exector的</p>
<p>exector是相当于container&#x3D;》资源隔离&#x3D;》调度隔离</p>
<p>多个作业之间产生的数据是不可以进行共享的，但是当写到一个外部存储上，就可以了</p>
<p>spark-shell简单就是&#x3D;》 提交很多个job &#x3D;》相当于外部存储</p>
<p>用户无感知的连接到集群</p>
<p>可以监听exector的生命周期&#x3D;》和driver之间有 通信</p>
<p>只要driver可以连接到Custer集群上，他就可以&#x3D;》也就是说外部dirver也可以</p>
<p>提议：driver和work节点靠近一点，这样可以减少网络发送的时间，就是可以用本地来实现</p>
<h3 id="spark整合yarn"><a href="#spark整合yarn" class="headerlink" title="spark整合yarn"></a>spark整合yarn</h3><p>首先在spark的conf文件夹里执行 <code>cp spark-env.sh.template spark-env.sh</code></p>
<p>然后 <code>vim spark-env.sh</code></p>
<p>把 <code>HADOOP_CONF_DIR=/home/hadoop/app/hadoop/etc/hadoop 和 YARN_CONF_DIR=/home/hadoop/app/hadoop/etc/hadoop</code></p>
<p>加上之后重新启动spark执行 <code>spark-shell --master yarn</code></p>
<p>就可以了</p>
<p>一般启动之后，不配别的，一般这样是占用5G的内存</p>
<h3 id="案例：-1"><a href="#案例：-1" class="headerlink" title="案例："></a>案例：</h3><p>spark统计用户行为分析</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">    val value = sc<span class="selector-class">.parallelize</span>(<span class="built_in">List</span>(</span><br><span class="line">      <span class="string">&quot;u01,英雄联盟|绝活&amp;职业|云顶|奴神,1,1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;u01,英雄联盟|绝活&amp;职业|云顶|金潺潺,1,1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;u01,英雄联盟|绝活&amp;职业|云顶|带粉上车,1,0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;u02,星秀|好声音|女团|三年一班,1,1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;u02,星秀|好声音|女团|奴神,1,1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;u02,星秀|好声音|女团|将神,1,0&quot;</span>,</span><br><span class="line">      <span class="string">&quot;u02,星秀|好声音|女团|西索,1,1&quot;</span>),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    val etlData = value<span class="selector-class">.flatMap</span>(x=&gt;&#123;</span><br><span class="line">      val strings=x<span class="selector-class">.split</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">      val name=<span class="built_in">strings</span>(<span class="number">0</span>)</span><br><span class="line">      val type_log_total=<span class="built_in">strings</span>(<span class="number">1</span>)</span><br><span class="line">      val show=<span class="built_in">strings</span>(<span class="number">2</span>)<span class="selector-class">.toInt</span></span><br><span class="line">      val click=<span class="built_in">strings</span>(<span class="number">3</span>)<span class="selector-class">.toInt</span></span><br><span class="line">      val type_log_total_ni=type_log_total<span class="selector-class">.split</span>(<span class="string">&quot;\\|&quot;</span>)</span><br><span class="line">      type_log_total_ni<span class="selector-class">.map</span>(x=&gt;&#123;</span><br><span class="line">        ((name,x),(show,click))</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">//sub(name,(price,store))</span></span><br><span class="line">      <span class="comment">//(name,(price,store))</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//    etlData.reduceByKey((x,y)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//      (x._1+y._1,x._2+y._2)</span></span><br><span class="line"><span class="comment">//    &#125;).map(x=&gt;x._1+&quot;\t&quot;+x._2._1+&quot;\t&quot;+x._2._2+&quot;\t&quot;)</span></span><br><span class="line">   <span class="comment">//etlData.reduceByKey((x,y)=&gt;&#123;(x._1+y._1,x._2+y._2)&#125;).map(x=&gt;x._1+&quot;\t&quot;+x._2._1+&quot;\t&quot;+x._2._2+&quot;\t&quot;)</span></span><br><span class="line"></span><br><span class="line">    etlData<span class="selector-class">.reduceByKey</span>((x,y)=&gt;&#123;</span><br><span class="line">      (x._1+y._1,x._2+y._2)</span><br><span class="line">    &#125;)<span class="selector-class">.collect</span>()<span class="selector-class">.foreach</span>(println)</span><br></pre></td></tr></table></figure>

<h3 id="spark持久化"><a href="#spark持久化" class="headerlink" title="spark持久化:"></a>spark持久化:</h3><ul>
<li>RDD持久化 &#x3D;》 一个操作会有很多次的生成rdd，比如会有100个rdd，我们为了节省时间以及链路资源，可以把第99个rdd持久化，然后只用对第99个操作就好了</li>
<li>持久化也是可以容错的</li>
<li>就是保存在内存中</li>
<li>是针对rdd的每个分区来的</li>
<li>持久化操作，是下次操作的时候才会从持久化的地方加载数据</li>
<li>默认存储级别是在内存中存储</li>
<li>用persist或者cache都可以 &#x3D;》 是lazy的</li>
<li>当内存不足的时候是不能进行持久化的 我们可以通过序列化，进行配置&#x3D; 》 减少使用空间</li>
<li>一般我们要在内存和cpu之间做权衡 &#x3D;》4步选择法<ul>
<li>官方&#x3D;》memory_only</li>
<li>memory_only_ser &#x3D;&gt; 对空间会节省</li>
<li>磁盘上 &#x3D; 》 memory_only_desk &#x3D;&gt; 没有不做序列化快</li>
<li>容错 &#x3D;》 带有副本的方式，的确是更安全可是数据太大对磁盘是负担</li>
</ul>
</li>
<li>移除持久化数据：可以设置自动的级别（<a href="https://blog.csdn.net/qq_46517733/article/details/123092629">LRU</a>），就会过一段时间，然后自动&#x2F;或者通过rdd调用 <code>unpersist(true)</code>他是立即执行的</li>
<li></li>
</ul>
<p>启动spark-shell本身也是一个spark作业</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">scala&gt; val test = sc<span class="selector-class">.parallelize</span>(<span class="string">&quot;hdfs://bigdata3:9000/flume/events/2022-12-13/events.1670898548750.log&quot;</span>)</span><br><span class="line">test: org<span class="selector-class">.apache</span><span class="selector-class">.spark</span><span class="selector-class">.rdd</span><span class="selector-class">.RDD</span><span class="selector-attr">[Char]</span> = ParallelCollectionRDD<span class="selector-attr">[0]</span> at parallelize at &lt;console&gt;:<span class="number">23</span></span><br><span class="line"></span><br><span class="line">scala&gt; test<span class="selector-class">.collect</span></span><br><span class="line">collect   collectAsync</span><br><span class="line"></span><br><span class="line">scala&gt; test<span class="selector-class">.collect</span></span><br><span class="line">res0: Array<span class="selector-attr">[Char]</span> = <span class="built_in">Array</span>(h, d, f, s, :, /, /, <span class="selector-tag">b</span>, <span class="selector-tag">i</span>, g, d, <span class="selector-tag">a</span>, t, <span class="selector-tag">a</span>, <span class="number">3</span>, :, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, /, f, l, u, m, e, /, e, v, e, n, t, s, /, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, -, <span class="number">1</span>, <span class="number">2</span>, -, <span class="number">1</span>, <span class="number">3</span>, /, e, v, e, n, t, s, ., <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">0</span>, ., l, o, g)</span><br><span class="line"></span><br><span class="line">scala&gt; test<span class="selector-class">.persist</span></span><br><span class="line">res1: test<span class="selector-class">.type</span> = ParallelCollectionRDD<span class="selector-attr">[0]</span> at parallelize at &lt;console&gt;:<span class="number">23</span></span><br><span class="line"></span><br><span class="line">scala&gt; test<span class="selector-class">.ca</span></span><br><span class="line">cache   cartesian</span><br><span class="line"></span><br><span class="line">scala&gt; test<span class="selector-class">.cache</span></span><br><span class="line">res2: test<span class="selector-class">.type</span> = ParallelCollectionRDD<span class="selector-attr">[0]</span> at parallelize at &lt;console&gt;:<span class="number">23</span></span><br><span class="line">-------------------------------------------------------------------------------------<span class="attr">--java</span>的序列化方法</span><br><span class="line">    val names = Array<span class="selector-attr">[String]</span>(<span class="string">&quot;刘子航&quot;</span>,<span class="string">&quot;李信&quot;</span>,<span class="string">&quot;花木兰&quot;</span>,<span class="string">&quot;达摩&quot;</span>,<span class="string">&quot;耀&quot;</span>,<span class="string">&quot;貂蝉&quot;</span>,<span class="string">&quot;吕布&quot;</span>)</span><br><span class="line">    val gar = Array<span class="selector-attr">[String]</span>(<span class="string">&quot;男&quot;</span>,<span class="string">&quot;女&quot;</span>)</span><br><span class="line">    val addres= Array<span class="selector-attr">[String]</span>(<span class="string">&quot;山东&quot;</span>,<span class="string">&quot;广西&quot;</span>,<span class="string">&quot;大连&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    val value1 = sc<span class="selector-class">.parallelize</span>(<span class="number">1</span> to <span class="number">300000</span>)</span><br><span class="line"></span><br><span class="line">    val value2 = new ArrayBuffer<span class="selector-attr">[persion]</span>()</span><br><span class="line">    val value3 = value1<span class="selector-class">.map</span>(x =&gt; &#123;</span><br><span class="line">      val name = <span class="built_in">names</span>(Random<span class="selector-class">.nextInt</span>(<span class="number">6</span>))</span><br><span class="line">      val s = <span class="built_in">gar</span>(Random<span class="selector-class">.nextInt</span>(<span class="number">1</span>))</span><br><span class="line">      val s1 = <span class="built_in">addres</span>(Random<span class="selector-class">.nextInt</span>(<span class="number">2</span>))</span><br><span class="line">      value2 += (<span class="built_in">persion</span>(name, s, s1))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    value3<span class="selector-class">.persist</span>(StorageLevel.MEMORY_ONLY_SER)</span><br><span class="line">    value3<span class="selector-class">.count</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case class <span class="built_in">persion</span>(name: String,gre:String,add:String)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------<span class="attr">--Kyro</span>序列化</span><br><span class="line">速度比java快，但是不是支持所有的序列化的，有的没有，使用前要加上注册类</span><br><span class="line"></span><br><span class="line">要先在conf里使用它</span><br><span class="line"> conf<span class="selector-class">.set</span>(<span class="string">&quot;spark.serializer&quot;</span>,<span class="string">&quot;org.apache.spark.serializer.KryoSerializer&quot;</span>)</span><br><span class="line">然后要注册所用的case class或者class </span><br><span class="line"> conf<span class="selector-class">.registerKryoClasses</span>(<span class="built_in">Array</span>(classOf<span class="selector-attr">[Info]</span>))</span><br><span class="line">然后其余和上述一样</span><br><span class="line"></span><br><span class="line">    val names = Array<span class="selector-attr">[String]</span>(<span class="string">&quot;刘子航&quot;</span>,<span class="string">&quot;李信&quot;</span>,<span class="string">&quot;花木兰&quot;</span>,<span class="string">&quot;达摩&quot;</span>,<span class="string">&quot;耀&quot;</span>,<span class="string">&quot;貂蝉&quot;</span>,<span class="string">&quot;吕布&quot;</span>)</span><br><span class="line">    val gar = Array<span class="selector-attr">[String]</span>(<span class="string">&quot;男&quot;</span>,<span class="string">&quot;女&quot;</span>)</span><br><span class="line">    val addres= Array<span class="selector-attr">[String]</span>(<span class="string">&quot;山东&quot;</span>,<span class="string">&quot;广西&quot;</span>,<span class="string">&quot;大连&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    val value1 = sc<span class="selector-class">.parallelize</span>(<span class="number">1</span> to <span class="number">300000</span>)</span><br><span class="line"></span><br><span class="line">    val value2 = new ArrayBuffer<span class="selector-attr">[persion]</span>()</span><br><span class="line">    val value3 = value1<span class="selector-class">.map</span>(x =&gt; &#123;</span><br><span class="line">      val name = <span class="built_in">names</span>(Random<span class="selector-class">.nextInt</span>(<span class="number">6</span>))</span><br><span class="line">      val s = <span class="built_in">gar</span>(Random<span class="selector-class">.nextInt</span>(<span class="number">1</span>))</span><br><span class="line">      val s1 = <span class="built_in">addres</span>(Random<span class="selector-class">.nextInt</span>(<span class="number">2</span>))</span><br><span class="line">      value2 += (<span class="built_in">persion</span>(name, s, s1))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    value3<span class="selector-class">.persist</span>(StorageLevel.MEMORY_ONLY_SER)</span><br><span class="line">    value3<span class="selector-class">.count</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case class <span class="built_in">persion</span>(name: String,gre:String,add:String)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="依赖关系和血缘关系"><a href="#依赖关系和血缘关系" class="headerlink" title="依赖关系和血缘关系"></a>依赖关系和血缘关系</h3><p>血缘关系 ： &#x3D;》就是不同rdd之间的转化</p>
<p>依赖关系 &#x3D;》</p>
<ul>
<li>宽依赖 ： 一个父RDD里的parttion会被子RDD的partition使用多次 &#x3D;》 会产生shuffer &#x3D;》 有新的stage产生 &#x3D; 》一个shuffle会划分两个stage &#x3D;》引起shuffle就会产生stage</li>
<li>窄依赖 ： 同一个父RDD里的分区最多被子RDD使用一次 &#x3D;》一个stage里完成的 &#x3D;》 无shuffle</li>
</ul>
<h3 id="补充算子-："><a href="#补充算子-：" class="headerlink" title="补充算子 ："></a>补充算子 ：</h3><p>repartition ： <code>repartition（num）</code>重新分区 ，引起shuffle &#x3D;》 底层调用的是coalesce &#x3D;》 不可以减少分取数</p>
<p>coalesce ： 一般用于减少RDD的分区数量，<code>coalesce(num)</code>窄依赖的 &#x3D;》 不引起shuffle &#x3D;》 可以增加分区数</p>
<p>生产上用于调整计算的并行度</p>
<h3 id="判断执行位置"><a href="#判断执行位置" class="headerlink" title="判断执行位置"></a>判断执行位置</h3><p>判断是不是对rdd里的元素进行操作，如果是操作，则是executor端的，如果不是则是driver端</p>
<p>例子 ：求top2</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    val value = sc<span class="selector-class">.parallelize</span>(<span class="built_in">List</span>(</span><br><span class="line">      <span class="string">&quot;www.bvaidu,u01,20&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.githuba,u02,2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bvaidu,u02,100&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibi,u02,199&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.githuba,u01,100&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.githuba,u01,1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.githuba,u01,10&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibi,u02,19&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibi,u01,199&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.baidu.com,uid01,1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.baidu.com,uid01,10&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.baidu.com,uid02,3&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.baidu.com,uid02,5&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.github.com,uid01,11&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.github.com,uid01,10&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.github.com,uid02,30&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.github.com,uid02,50&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibili.com,uid01,110&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibili.com,uid01,10&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibili.com,uid02,2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibili.com,uid02,3&quot;</span>),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    val etlData = value<span class="selector-class">.map</span>(x=&gt;&#123;</span><br><span class="line">      val strings=x<span class="selector-class">.split</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">      val yuming=<span class="built_in">strings</span>(<span class="number">0</span>)</span><br><span class="line">      val user=<span class="built_in">strings</span>(<span class="number">1</span>)</span><br><span class="line">      val cishu=<span class="built_in">strings</span>(<span class="number">2</span>)<span class="selector-class">.toInt</span></span><br><span class="line">      ((yuming,user),(cishu))</span><br><span class="line">      <span class="comment">//sub(name,(price,store))</span></span><br><span class="line">      <span class="comment">//(name,(price,store))</span></span><br><span class="line">    &#125;)</span><br><span class="line">etlData<span class="selector-class">.reduceByKey</span>((x,y)=&gt;&#123;</span><br><span class="line">      x+y</span><br><span class="line">    &#125;)<span class="selector-class">.sortBy</span>(x=&gt; -x._2,true)<span class="selector-class">.map</span>(x=&gt;&#123;</span><br><span class="line">      (x._1._2,(x._1._1,x._2))</span><br><span class="line">    &#125;)<span class="selector-class">.groupByKey</span>()<span class="selector-class">.map</span>(x=&gt;&#123;</span><br><span class="line">        x._2<span class="selector-class">.map</span>(s=&gt;&#123;</span><br><span class="line">          (x._1,s._1,s._2)</span><br><span class="line">      &#125;)<span class="selector-class">.take</span>(<span class="number">2</span>)&#125;)<span class="selector-class">.saveAsTextFile</span>(<span class="string">&quot;hdfs://bigdata3:9000/input/10.txt&quot;</span>)</span><br><span class="line">------------------------------------------------------------------------------简化版本</span><br><span class="line">    val value = sc<span class="selector-class">.parallelize</span>(<span class="built_in">List</span>(</span><br><span class="line">      <span class="string">&quot;www.bvaidu,u01,20&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.githuba,u02,2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bvaidu,u02,100&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibi,u02,199&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.githuba,u01,100&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.githuba,u01,1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.githuba,u01,10&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibi,u02,19&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibi,u01,199&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.baidu.com,uid01,1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.baidu.com,uid01,10&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.baidu.com,uid02,3&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.baidu.com,uid02,5&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.github.com,uid01,11&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.github.com,uid01,10&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.github.com,uid02,30&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.github.com,uid02,50&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibili.com,uid01,110&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibili.com,uid01,10&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibili.com,uid02,2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;www.bibili.com,uid02,3&quot;</span>),<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    val etlData = value<span class="selector-class">.map</span>(x=&gt;&#123;</span><br><span class="line">      val strings=x<span class="selector-class">.split</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">      val yuming=<span class="built_in">strings</span>(<span class="number">0</span>)</span><br><span class="line">      val user=<span class="built_in">strings</span>(<span class="number">1</span>)</span><br><span class="line">      val cishu=<span class="built_in">strings</span>(<span class="number">2</span>)<span class="selector-class">.toInt</span></span><br><span class="line">      ((yuming,user),(cishu))</span><br><span class="line">      <span class="comment">//sub(name,(price,store))</span></span><br><span class="line">      <span class="comment">//(name,(price,store))</span></span><br><span class="line">    &#125;)</span><br><span class="line">    val value4 = etlData<span class="selector-class">.map</span>(x =&gt; &#123;</span><br><span class="line">      (x._1._2)</span><br><span class="line">    &#125;)<span class="selector-class">.distinct</span>()<span class="selector-class">.collect</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (elem &lt;- value4)&#123;</span><br><span class="line">     etlData<span class="selector-class">.filter</span>(_._1._2 == elem)<span class="selector-class">.reduceByKey</span>(_ + _)<span class="selector-class">.sortBy</span>( -_._2)<span class="selector-class">.take</span>(<span class="number">2</span>)<span class="selector-class">.foreach</span>(<span class="built_in">println</span>(_))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>累加器：广播变量&#x3D;》后续再补充</p>
<p>案例 ： wordcount</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">val wc = sc.textFile(<span class="string">&quot;hdfs://bigdata3:9000/3.log&quot;</span>)</span><br><span class="line"></span><br><span class="line">wc.flatMap(<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span><br><span class="line">  x.<span class="built_in">split</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">&#125;).<span class="built_in">map</span>(<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span><br><span class="line">  (x,<span class="number">1</span>)</span><br><span class="line">&#125;).reduceByKey(<span class="function">(<span class="params">x,y</span>)=&gt;</span>&#123;</span><br><span class="line">  x+y</span><br><span class="line">&#125;).saveAsTextFile(<span class="string">&quot;hdfs://bigdata3:9000/input/11.txt&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>部署spark作业</p>
<ul>
<li>jar</li>
<li>spark-submit</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">spark-submit <span class="string">\</span></span><br><span class="line">--<span class="keyword">class</span> 包名 <span class="string">\</span></span><br><span class="line">--master 模式 <span class="string">\</span></span><br><span class="line">--name 作业名字 <span class="string">\</span></span><br><span class="line">jar包在机器上的路径 <span class="string">\</span></span><br><span class="line">想传的参数</span><br><span class="line">-------------------------------------例子</span><br><span class="line">spark-submit <span class="string">\</span></span><br><span class="line">--<span class="keyword">class</span> <span class="title class_">tool</span>.jdbc.readjdbc <span class="string">\</span></span><br><span class="line">/home/hadoop/project/jar/bigdatajava-<span class="number">1.0</span>-SNAPSHOT.jar <span class="string">\</span></span><br><span class="line"><span class="string">&quot;jdbc:mysql://bigdata2:3306/try&quot;</span> <span class="string">&quot;root&quot;</span> <span class="string">&quot;liuzihan010616&quot;</span> <span class="string">&quot;emp&quot;</span></span><br><span class="line">-----------------------------------------我这里不加msater是因为我再代码里已经加了</span><br></pre></td></tr></table></figure>

<p>还可以用其内封装的方法进行传值&#x3D;》不用 args</p>
<p>就是在submit的时候用 <code>--conf</code>传入</p>
<p>代码如下  :</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dl2262.sparkcore.day02</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.dl2262.sparkcore.util.&#123;<span class="type">ContextUtils</span>, <span class="type">FileUtils</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkContext</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.internal.<span class="type">Logging</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @author sxwang</span></span><br><span class="line"><span class="comment">  *         01 05 8:28</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WCApp</span> <span class="keyword">extends</span> <span class="title">Logging</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    if(args.size != 2)&#123;</span></span><br><span class="line">    <span class="comment">//      logError(&quot;请正确输入2个参数：&lt;input&gt; &lt;output&gt;&quot;)</span></span><br><span class="line">    <span class="comment">//      System.exit(0)</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//    val in = args(0)</span></span><br><span class="line">    <span class="comment">//    val out = args(1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> sc: <span class="type">SparkContext</span> = <span class="type">ContextUtils</span>.getSparkContext(<span class="keyword">this</span>.getClass.getSimpleName)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> in = sc.getConf.get(<span class="string">&quot;spark.input.path&quot;</span>,<span class="string">&quot;hdfs://bigdata32:9000/input/&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> out = sc.getConf.get(<span class="string">&quot;spark.output.path&quot;</span>,<span class="string">&quot;hdfs://bigdata32:9000/output/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> input = sc.textFile(in)</span><br><span class="line"></span><br><span class="line">    <span class="type">FileUtils</span>.deletePath( sc.hadoopConfiguration,out)</span><br><span class="line"></span><br><span class="line">    input.flatMap(line  =&gt; &#123;</span><br><span class="line">      line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    &#125;).map(word =&gt; (word,<span class="number">1</span>))</span><br><span class="line">      .reduceByKey(_+_)</span><br><span class="line">      .saveAsTextFile(out)</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">数据类型如下：</span><br><span class="line">域名，用户，用户所在地，展示次数，点击次数</span><br><span class="line">求分别按照域名，用户，用户所在地进行统计其top2</span><br><span class="line">-----------------------------------------------------------------------------------制造数据</span><br><span class="line">  val domin = Array<span class="selector-attr">[String]</span>(<span class="string">&quot;www.baidu.com&quot;</span>,<span class="string">&quot;www.taobao.com&quot;</span>,<span class="string">&quot;www.github.com&quot;</span>,<span class="string">&quot;www.bilbil.com&quot;</span>,<span class="string">&quot;www.csdn.com&quot;</span>,<span class="string">&quot;www.zihang.com&quot;</span>)</span><br><span class="line">    val userList = Array<span class="selector-attr">[String]</span>(<span class="string">&quot;zihang&quot;</span>,<span class="string">&quot;zuan&quot;</span>,<span class="string">&quot;zihao&quot;</span>,<span class="string">&quot;shuangxi&quot;</span>,<span class="string">&quot;yuhang&quot;</span>)</span><br><span class="line">    val beianlocal = Array<span class="selector-attr">[String]</span>(<span class="string">&quot;广州&quot;</span>,<span class="string">&quot;江西&quot;</span>,<span class="string">&quot;太原&quot;</span>,<span class="string">&quot;新疆&quot;</span>,<span class="string">&quot;上海&quot;</span>)</span><br><span class="line">    <span class="selector-tag">var</span> stringe:List<span class="selector-attr">[String]</span> = Nil</span><br><span class="line">    <span class="built_in">for</span>(<span class="selector-tag">i</span> &lt;- <span class="number">1</span> <span class="built_in">to</span>(<span class="number">30000</span>))&#123;</span><br><span class="line">      val Randomdomin = <span class="built_in">domin</span>(Random<span class="selector-class">.nextInt</span>(domin.length-<span class="number">1</span>))</span><br><span class="line">      val RandomUserList = <span class="built_in">userList</span>(Random<span class="selector-class">.nextInt</span>(userList.length-<span class="number">1</span>))</span><br><span class="line">      val Randombeianlocal = <span class="built_in">beianlocal</span>(Random<span class="selector-class">.nextInt</span>(beianlocal.length-<span class="number">1</span>))</span><br><span class="line">      val tmp = <span class="built_in">List</span>(Randomdomin + <span class="string">&quot;,&quot;</span> + RandomUserList + <span class="string">&quot;,&quot;</span> + Randombeianlocal )</span><br><span class="line">      stringe = stringe++tmp</span><br><span class="line">    &#125;</span><br><span class="line">-------------------------------------------------------------------------------域名 =&gt;其他有时间再补充把，和这个一样</span><br><span class="line"> val basicdata = sc<span class="selector-class">.parallelize</span>(stringe)</span><br><span class="line">-------------------------------------------------------------------------------解析数据</span><br><span class="line">    val ETLDATA = basicdata<span class="selector-class">.map</span>(x=&gt;&#123;</span><br><span class="line">      val strings = x<span class="selector-class">.split</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">      val currentdomin = <span class="built_in">strings</span>(<span class="number">0</span>)</span><br><span class="line">      val currentuser = <span class="built_in">strings</span>(<span class="number">1</span>)</span><br><span class="line">      val currentadd = <span class="built_in">strings</span>(<span class="number">2</span>)</span><br><span class="line">      val click = Random<span class="selector-class">.nextInt</span>(<span class="number">100</span>)<span class="selector-class">.toInt</span></span><br><span class="line">      val show = Random<span class="selector-class">.nextInt</span>(<span class="number">200</span>)<span class="selector-class">.toInt</span></span><br><span class="line">      ((currentdomin,currentuser,currentadd),(click,show))</span><br><span class="line">    &#125;)</span><br><span class="line">--------------------------------------------------------------------------------处理并排序</span><br><span class="line">      <span class="keyword">for</span> (elem &lt;- domin)&#123;</span><br><span class="line">        ETLDATA<span class="selector-class">.filter</span>(_._1._1==elem)<span class="selector-class">.reduceByKey</span>((x,y)=&gt;&#123;</span><br><span class="line">          (x._1+y._1,x._2+y._2)</span><br><span class="line">        &#125;)<span class="selector-class">.sortBy</span>( -_._2._1)<span class="selector-class">.take</span>(<span class="number">2</span>)<span class="selector-class">.foreach</span>(<span class="built_in">println</span>(_))</span><br><span class="line">      &#125;</span><br><span class="line">---------------------------------------------------------------------------------方法<span class="number">2</span></span><br><span class="line">    ETLDATA<span class="selector-class">.reduceByKey</span>((x,y)=&gt;&#123;</span><br><span class="line">      (x._1+y._1,y._2+x._2)</span><br><span class="line">    &#125;)<span class="selector-class">.sortBy</span>(x=&gt; -x._2._1)<span class="selector-class">.map</span>(x=&gt;&#123;</span><br><span class="line">      (x._1._1,(x._1._2,x._1._3,x._2))</span><br><span class="line">    &#125;)<span class="selector-class">.groupByKey</span>()<span class="selector-class">.map</span>(x=&gt;&#123;</span><br><span class="line">      x._2<span class="selector-class">.map</span>(s=&gt;&#123;</span><br><span class="line">        (x._1,(s._1,s._2,s._3))</span><br><span class="line">      &#125;)<span class="selector-class">.take</span>(<span class="number">2</span>)</span><br><span class="line">    &#125;).collect</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>数字及big类</title>
    <url>/2022/10/17/10-17/</url>
    <content><![CDATA[<h1 id="关于数学包里常用的几个类"><a href="#关于数学包里常用的几个类" class="headerlink" title="关于数学包里常用的几个类"></a>关于数学包里常用的几个类</h1><h2 id="abs"><a href="#abs" class="headerlink" title="abs"></a>abs</h2><p>abs是取绝对值</p>
<h2 id="cell"><a href="#cell" class="headerlink" title="cell"></a>cell</h2><p>向上（正方向）取整</p>
<h2 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h2><p>向下（负方向）取整</p>
<h2 id="round"><a href="#round" class="headerlink" title="round"></a>round</h2><p> 四舍五入</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 简单的例子 ，5舍6入</span></span><br><span class="line">可以通过<span class="built_in">floor</span>进行</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h1><p>BigInteger类型的数字范围较Integer，Long类型的数字范围要大得多，它支持任意精度的整数，也就是说在运算中 BigInteger 类型可以准确地表示任何大小的整数值而不会丢失任何信息。</p>
<h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="regexp">//</span><span class="number">1</span>.加</span><br><span class="line">BigInteger bigNum1 = a.add(b);			<span class="regexp">//</span><span class="number">17</span></span><br><span class="line"><span class="regexp">//</span><span class="number">2</span>.减</span><br><span class="line">BigInteger bigNum2 = a.subtract(b);		<span class="regexp">//</span><span class="number">9</span></span><br><span class="line"><span class="regexp">//</span><span class="number">3</span>.乘</span><br><span class="line">BigInteger bigNum3 = a.multiply(b);		<span class="regexp">//</span><span class="number">52</span></span><br><span class="line"><span class="regexp">//</span><span class="number">4</span>.除</span><br><span class="line">BigInteger bigNum4 = a.divide(b);		<span class="regexp">//</span><span class="number">3</span></span><br><span class="line"><span class="regexp">//</span><span class="number">5</span>.取模(需 b &gt; <span class="number">0</span>，否则出现异常：ArithmeticException(<span class="string">&quot;BigInteger: modulus not positive&quot;</span>))</span><br><span class="line">BigInteger bigNum5 = a.mod(b);			<span class="regexp">//</span><span class="number">1</span></span><br><span class="line"><span class="regexp">//</span><span class="number">6</span>.求余</span><br><span class="line">BigInteger bigNum6 = a.remainder(b);	<span class="regexp">//</span><span class="number">1</span></span><br><span class="line"><span class="regexp">//</span><span class="number">7</span>.平方(需 n &gt;= <span class="number">0</span>，否则出现异常：ArithmeticException(<span class="string">&quot;Negative exponent&quot;</span>))</span><br><span class="line">BigInteger bigNum7 = a.pow(n);			<span class="regexp">//</span><span class="number">2197</span></span><br><span class="line"><span class="regexp">//</span><span class="number">8</span>.取绝对值</span><br><span class="line">BigInteger bigNum8 = a.abs();			<span class="regexp">//</span><span class="number">13</span></span><br><span class="line"><span class="regexp">//</span><span class="number">9</span>.取相反数</span><br><span class="line">BigInteger bigNum9 = a.negate();		<span class="regexp">//</span>-<span class="number">13</span></span><br></pre></td></tr></table></figure>

<h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读入方法：nextBigInteger()</span></span><br><span class="line">@Test</span><br><span class="line">public void test5<span class="literal">()</span> &#123;</span><br><span class="line">	Scanner scan = <span class="keyword">new</span> <span class="constructor">Scanner(System.<span class="params">in</span>)</span>;				<span class="comment">// 读入</span></span><br><span class="line">	<span class="built_in">int</span> n = scan.next<span class="constructor">Int()</span>; 							<span class="comment">// 读入一个int;</span></span><br><span class="line">	BigInteger m = scan.next<span class="constructor">BigInteger()</span>;				<span class="comment">// 读入一个BigInteger;</span></span><br><span class="line">	<span class="keyword">while</span>(scan.has<span class="constructor">Next()</span>)&#123;</span><br><span class="line">		<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.print(<span class="string">&quot;scan.hasNext()=&quot;</span> + scan.has<span class="constructor">Next()</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中除了这个还有big浮点型，用法和上面一样</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>sparksql-4</title>
    <url>/2023/01/16/1-16/</url>
    <content><![CDATA[<h1 id="sparkstreaming"><a href="#sparkstreaming" class="headerlink" title="sparkstreaming"></a>sparkstreaming</h1><p>用于实时计算的模块 &#x3D;》 sparkstreaming，structuredstreaming</p>
<h2 id="流处理-：-实时"><a href="#流处理-：-实时" class="headerlink" title="流处理 ： 实时"></a>流处理 ： 实时</h2><ul>
<li>实时 来一套数据处理一条 storm，flink 数据叫event</li>
<li>近实时 来一批数据处理 mini-batch sparkstreaming</li>
<li>数据会源源不断地来</li>
</ul>
<h2 id="批处理-：-离线"><a href="#批处理-：-离线" class="headerlink" title="批处理 ： 离线"></a>批处理 ： 离线</h2><ul>
<li><p>代码或者程序处理一个批次的数据</p>
<ul>
<li>例子：数据放在hdfs上，我们对他进行处理 &#x3D;》 ok</li>
</ul>
</li>
</ul>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>生产上：</p>
<ul>
<li>sparkstreaming，structuredstreaming 10%</li>
<li>flink 90%</li>
<li>storm 2%</li>
</ul>
<p>开发角度：</p>
<ul>
<li>code &#x3D;》 flink &gt; sparkstreaming</li>
<li>sql &#x3D;&gt; flink &gt; spark streaming</li>
</ul>
<p>业务：</p>
<ul>
<li>实施指标 ：都差不多</li>
<li>实时数仓：<ul>
<li>代码 ： 差不多</li>
<li>sql文件 ： flinksql维护实时数仓 &#x3D;》 ok</li>
</ul>
</li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>容易使用 &#x3D;》 客观看</p>
<p>批流一体的处理方法 &#x3D;》 sparksql &lt;&#x3D;&gt; 流处理</p>
<p>低延迟高消费</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>sparkstreaming开发是spark-core的一个扩展</li>
<li>接收数据的渠道多</li>
<li>还可以对数据进行流处理的可以机器学习等</li>
</ul>
<p>一般来说流式处理会比批处理负载小，但不绝对</p>
<h3 id="数据源-："><a href="#数据源-：" class="headerlink" title="数据源 ："></a>数据源 ：</h3><ul>
<li>kafka ****** 流式引擎重要的数据源 -》 通过topic进行数据缓冲，它会根据sp的吞吐量来进行处理，两个引擎之间会有联系</li>
<li>flume **** 可以使用但是一般不用 flume 没有数据缓冲 致命 -》 直接把数据弄到sp里，如果数据量特别多，会让sp程序挂掉，因为如果sa程序的吞吐量比较小，则会崩掉，和sp无联系</li>
<li>hdfs</li>
</ul>
<h3 id="数据积压：kafka数据太大，导致sp程序一直处理不过来，一个出不来报表-x3D-gt-解决方法"><a href="#数据积压：kafka数据太大，导致sp程序一直处理不过来，一个出不来报表-x3D-gt-解决方法" class="headerlink" title="数据积压：kafka数据太大，导致sp程序一直处理不过来，一个出不来报表 &#x3D;&gt;解决方法"></a>数据积压：kafka数据太大，导致sp程序一直处理不过来，一个出不来报表 &#x3D;&gt;解决方法</h3><ul>
<li>吞吐量提高</li>
<li>数据量减少</li>
</ul>
<h3 id="sparkstreaming运行机制"><a href="#sparkstreaming运行机制" class="headerlink" title="sparkstreaming运行机制"></a>sparkstreaming运行机制</h3><ul>
<li>接收数据</li>
<li>拆分成batches</li>
</ul>
<h3 id="sparkstreaming-gt-kafka-："><a href="#sparkstreaming-gt-kafka-：" class="headerlink" title="sparkstreaming -&gt; kafka ："></a>sparkstreaming -&gt; kafka ：</h3><ul>
<li>5s处理数据</li>
<li>每5s会切分成一次batch</li>
<li>交给sparkngine处理</li>
<li>处理完的也是一个batch</li>
</ul>
<h3 id="sparkstreaming编程模型：Dstream"><a href="#sparkstreaming编程模型：Dstream" class="headerlink" title="sparkstreaming编程模型：Dstream"></a>sparkstreaming编程模型：Dstream</h3><ul>
<li>外部数据源</li>
<li>高级算子</li>
<li>类似RDD</li>
</ul>
<h3 id="idea开发先配置pom文件"><a href="#idea开发先配置pom文件" class="headerlink" title="idea开发先配置pom文件"></a>idea开发先配置pom文件</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;dependency&gt;</span></span><br><span class="line">  <span class="section">&lt;groupId&gt;</span><span class="attribute">org</span>.apache.spark&lt;/groupId&gt;</span><br><span class="line">  <span class="section">&lt;artifactId&gt;</span><span class="attribute">spark</span>-streaming_2.<span class="number">12</span>&lt;/artifactId&gt;</span><br><span class="line">  <span class="section">&lt;version&gt;</span><span class="attribute">3</span>.<span class="number">2</span>.<span class="number">1</span>&lt;/version&gt;</span><br><span class="line"><span class="section">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="idea代码"><a href="#idea代码" class="headerlink" title="idea代码"></a>idea代码</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package sparkstreaming</span><br><span class="line">import org.apache.spark._</span><br><span class="line">import org.apache.spark.streaming._</span><br><span class="line">import org.apache.spark.streaming.<span class="module-access"><span class="module"><span class="identifier">StreamingContext</span>.</span><span class="module"><span class="identifier">_</span></span></span></span><br><span class="line"><span class="module"><span class="module-access">i</span></span>mport org.apache.spark.SparkConf</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> sparkstreaming1 &#123;</span><br><span class="line">  def main(args: Array<span class="literal">[S<span class="identifier">tring</span>]</span>): Unit = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> conf = <span class="keyword">new</span> <span class="constructor">SparkConf()</span>.set<span class="constructor">Master(<span class="string">&quot;local[4]&quot;</span>)</span>.set<span class="constructor">AppName(<span class="string">&quot;NetworkWordCount&quot;</span>)</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="constructor">StreamingContext(<span class="params">conf</span>, Seconds(5)</span>)</span><br><span class="line">    <span class="comment">// 或者通过sparkcontext进行创建</span></span><br><span class="line">    <span class="comment">//val ssc = new StreamingContext(sc, Seconds(1))</span></span><br><span class="line">    <span class="comment">// 数据源</span></span><br><span class="line">    <span class="keyword">val</span> lines = ssc.socket<span class="constructor">TextStream(<span class="string">&quot;bigdata5&quot;</span>, 9999)</span></span><br><span class="line">    <span class="comment">// 处理数据</span></span><br><span class="line">    <span class="keyword">val</span> words = lines.flat<span class="constructor">Map(<span class="params">_</span>.<span class="params">split</span>(<span class="string">&quot; &quot;</span>)</span>)</span><br><span class="line">    <span class="keyword">val</span> pairs = words.map(word =&gt; (word, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">val</span> wordCounts = pairs.reduce<span class="constructor">ByKey(<span class="params">_</span> + <span class="params">_</span>)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印数据当前批次</span></span><br><span class="line">    wordCounts.print<span class="literal">()</span></span><br><span class="line">    ssc.start<span class="literal">()</span>             <span class="comment">// Start</span></span><br><span class="line">    ssc.await<span class="constructor">Termination()</span>  <span class="comment">// Wait</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置数据源在目标机器上执行nc -lk 9999 然后输入数据就ok了</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>还可以在webui上查看</p>
<p>如下：</p>
<p><img src="https://pic.imgdb.cn/item/63c4b657be43e0d30e191256.jpg"></p>
<p>他的打印数据是处理当前批次的数据，不是累积批次的数据</p>
<h3 id="双流join"><a href="#双流join" class="headerlink" title="双流join"></a>双流join</h3><p>api :</p>
<ul>
<li>flink -》调用api</li>
<li>sparkstreaming code 很多 -》 api join stste</li>
</ul>
<p> 延迟数据</p>
<ul>
<li>processtime + udf</li>
<li>eventime + watermaker<ul>
<li>数据和离线对不上（容易）</li>
</ul>
</li>
</ul>
<p>如何构建DStream</p>
<ul>
<li>从inputstream的方式 生产上</li>
<li>receiver 测试用 为面试准备</li>
</ul>
<h2 id="构建Dstream"><a href="#构建Dstream" class="headerlink" title="构建Dstream"></a>构建Dstream</h2><h3 id="inputstrteam"><a href="#inputstrteam" class="headerlink" title="inputstrteam"></a>inputstrteam</h3><p>比如卡夫卡</p>
<h3 id="receiver"><a href="#receiver" class="headerlink" title="receiver"></a>receiver</h3><p>用receiver接受的时候如果是本地则要大于1 -&gt; local[2+]</p>
<p>因为sparkstreaming最少是有两部分切分以及处理，如果只给1则会没有资源进行处理</p>
<p>所以针对于receiver一个要大于等于</p>
<p>上面仅仅是针对receiver</p>
<p>例子 ：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> lines = ssc.socket<span class="constructor">TextStream(<span class="string">&quot;bigdata5&quot;</span>, 9999)</span></span><br></pre></td></tr></table></figure>

<p>因为他底层源码是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">socketTextStream</span>(</span><br><span class="line">    <span class="attr">hostname</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="title class_">Int</span>,</span><br><span class="line">    <span class="attr">storageLevel</span>: <span class="title class_">StorageLevel</span> = <span class="title class_">StorageLevel</span>.<span class="property">MEMORY_AND_DISK_SER_2</span></span><br><span class="line">  ): <span class="title class_">ReceiverInputDStream</span>[<span class="title class_">String</span>] = <span class="title function_">withNamedScope</span>(<span class="params"><span class="string">&quot;socket text stream&quot;</span></span>) &#123;</span><br><span class="line">  socketStream[<span class="title class_">String</span>](hostname, port, <span class="title class_">SocketReceiver</span>.<span class="property">bytesToLines</span>, storageLevel)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Dstream算子"><a href="#Dstream算子" class="headerlink" title="Dstream算子"></a>Dstream算子</h2><p>转换操作：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Similar</span> <span class="keyword">to</span> that <span class="keyword">of</span> RDDs, transformations allow the data <span class="keyword">from</span> the <span class="keyword">input</span> DStream <span class="keyword">to</span> be modified. DStreams support many <span class="keyword">of</span> the transformations available <span class="keyword">on</span> normal Spark RDD’s. <span class="keyword">Some</span> <span class="keyword">of</span> the common ones are <span class="keyword">as</span> follows.</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>Transformation</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td><strong>map</strong> ( <em>func</em> )</td>
<td>Return a new DStream by passing each element of the source DStream through a function<em>func</em> .</td>
</tr>
<tr>
<td><strong>flatMap</strong> ( <em>func</em> )</td>
<td>Similar to map, but each input item can be mapped to 0 or more output items.</td>
</tr>
<tr>
<td><strong>filter</strong> ( <em>func</em> )</td>
<td>Return a new DStream by selecting only the records of the source DStream on which<em>func</em> returns true.</td>
</tr>
<tr>
<td><strong>repartition</strong> ( <em>numPartitions</em> )</td>
<td>Changes the level of parallelism in this DStream by creating more or fewer partitions.</td>
</tr>
<tr>
<td><strong>union</strong> ( <em>otherStream</em> )</td>
<td>Return a new DStream that contains the union of the elements in the source DStream and<em>otherDStream</em> .</td>
</tr>
<tr>
<td><strong>count</strong> ()</td>
<td>Return a new DStream of single-element RDDs by counting the number of elements in each RDD of the source DStream.</td>
</tr>
<tr>
<td><strong>reduce</strong> ( <em>func</em> )</td>
<td>Return a new DStream of single-element RDDs by aggregating the elements in each RDD of the source DStream using a function<em>func</em> (which takes two arguments and returns one). The function should be associative and commutative so that it can be computed in parallel.</td>
</tr>
<tr>
<td><strong>countByValue</strong> ()</td>
<td>When called on a DStream of elements of type K, return a new DStream of (K, Long) pairs where the value of each key is its frequency in each RDD of the source DStream.</td>
</tr>
<tr>
<td><strong>reduceByKey</strong> ( <em>func</em> , [ <em>numTasks</em> ])</td>
<td>When called on a DStream of (K, V) pairs, return a new DStream of (K, V) pairs where the values for each key are aggregated using the given reduce function.<strong>Note:</strong> By default, this uses Spark’s default number of parallel tasks (2 for local mode, and in cluster mode the number is determined by the config property <code>spark.default.parallelism</code>) to do the grouping. You can pass an optional <code>numTasks</code> argument to set a different number of tasks.</td>
</tr>
<tr>
<td><strong>join</strong> ( <em>otherStream</em> , [ <em>numTasks</em> ])</td>
<td>When called on two DStreams of (K, V) and (K, W) pairs, return a new DStream of (K, (V, W)) pairs with all pairs of elements for each key.</td>
</tr>
<tr>
<td><strong>cogroup</strong> ( <em>otherStream</em> , [ <em>numTasks</em> ])</td>
<td>When called on a DStream of (K, V) and (K, W) pairs, return a new DStream of (K, Seq[V], Seq[W]) tuples.</td>
</tr>
<tr>
<td><strong>transform</strong> ( <em>func</em> )</td>
<td>Return a new DStream by applying a RDD-to-RDD function to every RDD of the source DStream. This can be used to do arbitrary RDD operations on the DStream.</td>
</tr>
<tr>
<td><strong>updateStateByKey</strong> ( <em>func</em> )</td>
<td>Return a new “state” DStream where the state for each key is updated by applying the given function on the previous state of the key and the new values for the key. This can be used to maintain arbitrary state data for each key.</td>
</tr>
</tbody></table>
<p>输出操作：</p>
<table>
<thead>
<tr>
<th>Output Operation</th>
<th>Meaning</th>
</tr>
</thead>
<tbody><tr>
<td><strong>print</strong> ()</td>
<td>Prints the first ten elements of every batch of data in a DStream on the driver node running the streaming application. This is useful for development and debugging.&#96;&#96;Python API This is called<strong>pprint()</strong> in the Python API.</td>
</tr>
<tr>
<td><strong>saveAsTextFiles</strong> ( <em>prefix</em> , [ <em>suffix</em> ])</td>
<td>Save this DStream’s contents as text files. The file name at each batch interval is generated based on<em>prefix</em> and  <em>suffix</em> :  <em>“prefix-TIME_IN_MS[.suffix]”</em> .</td>
</tr>
<tr>
<td><strong>saveAsObjectFiles</strong> ( <em>prefix</em> , [ <em>suffix</em> ])</td>
<td>Save this DStream’s contents as <code>SequenceFiles</code> of serialized Java objects. The file name at each batch interval is generated based on <em>prefix</em> and  <em>suffix</em> :  <em>“prefix-TIME_IN_MS[.suffix]”</em> .&#96;&#96;Python API This is not available in the Python API.</td>
</tr>
<tr>
<td><strong>saveAsHadoopFiles</strong> ( <em>prefix</em> , [ <em>suffix</em> ])</td>
<td>Save this DStream’s contents as Hadoop files. The file name at each batch interval is generated based on<em>prefix</em> and  <em>suffix</em> :  <em>“prefix-TIME_IN_MS[.suffix]”</em> .&#96;&#96;Python API This is not available in the Python API.</td>
</tr>
<tr>
<td><strong>foreachRDD</strong> ( <em>func</em> )</td>
<td>The most generic output operator that applies a function,<em>func</em> , to each RDD generated from the stream. This function should push the data in each RDD to an external system, such as saving the RDD to files, or writing it over the network to a database. Note that the function <em>func</em> is executed in the driver process running the streaming application, and will usually have RDD actions in it that will force the computation of the streaming RDDs.</td>
</tr>
</tbody></table>
<p>我们之前的计算代码只是计算当前批次的数据，也是sparkstreaming默认的</p>
<p>基于上面官方提出了状态</p>
<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><ul>
<li>有状态 前后批次有联系</li>
<li>无状态 前后批次无联系</li>
</ul>
<p>用于解决统计类问题</p>
<p><strong>updateStateByKey</strong> ( <em>func</em> )：这个算子</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">def updateFunction(<span class="keyword">new</span><span class="type">Values</span>: Seq[<span class="keyword">Int</span>], runningCount: <span class="type">Option</span>[<span class="keyword">Int</span>]): <span class="type">Option</span>[<span class="keyword">Int</span>] = &#123;</span><br><span class="line">    val <span class="keyword">new</span><span class="type">Count</span> = ...  <span class="comment">// add the new values with the previous running count to get the new count</span></span><br><span class="line">    Some(<span class="keyword">new</span><span class="type">Count</span>)</span><br><span class="line">&#125;</span><br><span class="line">val runningCounts = pairs.updateStateByKey[<span class="keyword">Int</span>](updateFunction <span class="literal">_</span>)</span><br></pre></td></tr></table></figure>

<p>代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package sparkstreaming</span><br><span class="line"><span class="keyword">import</span> org.apache.spark._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.StreamingContext._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf</span><br><span class="line"><span class="keyword">import</span> tool.streamingcontext</span><br><span class="line"><span class="keyword">object</span> sparkstreaming1 &#123;</span><br><span class="line">  private val streamingcontext = <span class="built_in">new</span> streamingcontext</span><br><span class="line">  def main(args: <span class="keyword">Array</span>[String]): Unit = &#123;</span><br><span class="line"></span><br><span class="line">    val ssc = streamingcontext.getstreamcotext()</span><br><span class="line">    // 或者通过sparkcontext进行创建</span><br><span class="line">    //val ssc = <span class="built_in">new</span> StreamingContext(sc, Seconds(<span class="number">1</span>))</span><br><span class="line">    // 数据源</span><br><span class="line">    val lines = ssc.socketTextStream(&quot;bigdata5&quot;, <span class="number">9999</span>)</span><br><span class="line">    // 处理数据</span><br><span class="line">    val words = lines.flatMap(_.split(&quot; &quot;))</span><br><span class="line">    val pairs = words.map(word =&gt; (word, <span class="number">1</span>))</span><br><span class="line">    val wordCounts = pairs.reduceByKey(_ + _)</span><br><span class="line">    // 要指定<span class="keyword">checkpoint</span>目录</span><br><span class="line">    ssc.<span class="keyword">checkpoint</span>(&quot;file:///D:\\checkpoint&quot;)</span><br><span class="line">    val totalwc = pairs.updateStateByKey(updateFunction _)</span><br><span class="line">    //wordCounts.updateStateByKey()</span><br><span class="line">    // 打印数据当前批次</span><br><span class="line">    wordCounts.print()</span><br><span class="line">    totalwc.print()</span><br><span class="line">    ssc.<span class="keyword">start</span>()             // <span class="keyword">Start</span></span><br><span class="line">    ssc.awaitTermination()  // Wait</span><br><span class="line"></span><br><span class="line">    // 配置数据源在目标机器上执行nc -lk <span class="number">9999</span> 然后输入数据就ok了</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def updateFunction(newValues: Seq[<span class="type">Int</span>], runningCount: <span class="keyword">Option</span>[<span class="type">Int</span>]): <span class="keyword">Option</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line">      // <span class="keyword">add</span> the <span class="built_in">new</span> <span class="keyword">values</span> <span class="keyword">with</span> the previous running count <span class="keyword">to</span> <span class="keyword">get</span> the <span class="built_in">new</span> count</span><br><span class="line">    val sum = newValues.sum</span><br><span class="line">    val i = runningCount.getOrElse(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">Some</span>(sum+i)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是这样也产生了个新问题</p>
<p>我们观察checkpoint文件夹</p>
<p><img src="https://pic.imgdb.cn/item/63c4fa26be43e0d30e9044af.jpg"></p>
<p>生成很多个小文件</p>
<p>我们该如何解决</p>
<p>生产上我们不用</p>
<p>但是必备的知识还是要的</p>
<p>为了容错，恢复作业，和kafka里的一样</p>
<h2 id="checkpoint的存储东西"><a href="#checkpoint的存储东西" class="headerlink" title="checkpoint的存储东西"></a>checkpoint的存储东西</h2><p>matestore 元数据</p>
<ul>
<li>conf 作业里的配置信息</li>
<li>算子操作</li>
<li>未完成的批次</li>
</ul>
<p>Data</p>
<ul>
<li>就是批次的数据</li>
</ul>
<p>使用场景</p>
<ul>
<li>作业失败的时候回复的时候用</li>
<li>转换算子的时候</li>
</ul>
<p>但是注意生产上用不了</p>
<p>如何使用</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Checkpointing can be enabled <span class="keyword">by</span> setting a directory <span class="keyword">in</span> a fault-tolerant, reliable file <span class="keyword">system</span> (e.g., HDFS, S3, etc.) <span class="keyword">to</span> which the <span class="keyword">checkpoint</span> information will be saved. This <span class="keyword">is</span> done <span class="keyword">by</span> <span class="keyword">using</span> streamingContext.<span class="keyword">checkpoint</span>(checkpointDirectory). This will allow you <span class="keyword">to</span> use the aforementioned stateful transformations. Additionally, <span class="keyword">if</span> you want <span class="keyword">to</span> make the application recover <span class="keyword">from</span> driver failures, you should rewrite your streaming application <span class="keyword">to</span> have the <span class="keyword">following</span> behavior.</span><br><span class="line"></span><br><span class="line"><span class="keyword">When</span> the program <span class="keyword">is</span> being started <span class="keyword">for</span> the first <span class="type">time</span>, it will <span class="keyword">create</span> a <span class="built_in">new</span> StreamingContext, <span class="keyword">set</span> up <span class="keyword">all</span> the streams <span class="keyword">and</span> <span class="keyword">then</span> <span class="keyword">call</span> <span class="keyword">start</span>().</span><br><span class="line"><span class="keyword">When</span> the program <span class="keyword">is</span> being restarted <span class="keyword">after</span> failure, it will re-<span class="keyword">create</span> a StreamingContext <span class="keyword">from</span> the <span class="keyword">checkpoint</span> data <span class="keyword">in</span> the <span class="keyword">checkpoint</span> directory.</span><br></pre></td></tr></table></figure>

<p>idea代码</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Function to create and setup a new StreamingContext</span></span><br><span class="line">def <span class="keyword">function</span><span class="constructor">ToCreateContext()</span>: StreamingContext = &#123;</span><br><span class="line">  <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="constructor">StreamingContext(<span class="operator">...</span>)</span>   <span class="comment">// new context</span></span><br><span class="line">  <span class="keyword">val</span> lines = ssc.socket<span class="constructor">TextStream(<span class="operator">...</span>)</span> <span class="comment">// create DStreams</span><span class="operator"></span></span><br><span class="line"><span class="operator">  ...</span></span><br><span class="line"><span class="operator">  </span>ssc.checkpoint(checkpointDirectory)   <span class="comment">// set checkpoint directory</span></span><br><span class="line">  ssc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get StreamingContext from checkpoint data or create a new one</span></span><br><span class="line"><span class="keyword">val</span> context = <span class="module-access"><span class="module"><span class="identifier">StreamingContext</span>.</span></span>get<span class="constructor">OrCreate(<span class="params">checkpointDirectory</span>, <span class="params">functionToCreateContext</span> <span class="params">_</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Do additional setup on context that needs to be done,</span></span><br><span class="line"><span class="comment">// irrespective of whether it is being started or restarted</span></span><br><span class="line">context.<span class="operator"> ...</span></span><br><span class="line"><span class="operator"></span></span><br><span class="line"><span class="operator"></span><span class="comment">// Start the context</span></span><br><span class="line">context.start<span class="literal">()</span></span><br><span class="line">context.await<span class="constructor">Termination()</span></span><br></pre></td></tr></table></figure>

<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>小文件</p>
<p>修改代码就费了，就要重整</p>
<p>checkpoint用不了-》累计批次指标问题 -》 出现问题</p>
<h2 id="如何实现相同功能？"><a href="#如何实现相同功能？" class="headerlink" title="如何实现相同功能？"></a>如何实现相同功能？</h2><p>实现存储到外部，如何根据而外部文件进行累计</p>
<h2 id="使用checkpoint"><a href="#使用checkpoint" class="headerlink" title="使用checkpoint"></a>使用checkpoint</h2><p>解决checkpoint修改代码报错和小文件问题</p>
<p>所以简历上不可以出现我在生产上用过updateStateByKey，坚决不会用</p>
<h2 id="如何把处理好的数据存储到外部"><a href="#如何把处理好的数据存储到外部" class="headerlink" title="如何把处理好的数据存储到外部"></a>如何把处理好的数据存储到外部</h2><p>如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">dstream.foreachRDD &#123;<span class="function"> <span class="params">rdd</span> =&gt;</span></span><br><span class="line">  <span class="keyword">val</span> connection = create<span class="constructor">NewConnection()</span>  <span class="comment">// executed at the driver</span></span><br><span class="line">  rdd.foreach &#123;<span class="function"> <span class="params">record</span> =&gt;</span></span><br><span class="line">    connection.send(record) <span class="comment">// executed at the worker</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>idea</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sparkstreaming</span><br><span class="line"><span class="keyword">import</span> org.apache.spark._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.StreamingContext._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.SparkSession</span><br><span class="line"><span class="keyword">import</span> tool.&#123;mysqlutils, streamingcontext,savefile&#125;</span><br><span class="line">object sparkstreaming1 &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">val</span> <span class="variable">mysqlutils</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">mysqlutils</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">val</span> <span class="variable">streamingcontext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">streamingcontext</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">val</span> <span class="variable">savefile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">savefile</span></span><br><span class="line">  def <span class="title function_">main</span><span class="params">(args: Array[String])</span>: Unit = &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">val</span> <span class="variable">ssc</span> <span class="operator">=</span> streamingcontext.getstreamcotext()</span><br><span class="line">    <span class="comment">// 或者通过sparkcontext进行创建</span></span><br><span class="line">    <span class="comment">//val ssc = new StreamingContext(sc, Seconds(1))</span></span><br><span class="line">    <span class="comment">// 数据源</span></span><br><span class="line">    <span class="type">val</span> <span class="variable">lines</span> <span class="operator">=</span> ssc.socketTextStream(<span class="string">&quot;bigdata5&quot;</span>, <span class="number">9999</span>)</span><br><span class="line">    <span class="comment">// 处理数据</span></span><br><span class="line">    <span class="type">val</span> <span class="variable">words</span> <span class="operator">=</span> lines.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">    <span class="type">val</span> <span class="variable">pairs</span> <span class="operator">=</span> words.map(word =&gt; (word, <span class="number">1</span>))</span><br><span class="line">    <span class="type">val</span> <span class="variable">wordCounts</span> <span class="operator">=</span> pairs.reduceByKey(_ + _)</span><br><span class="line">    <span class="comment">//val totalwc = pairs.updateStateByKey(updateFunction _)</span></span><br><span class="line">    <span class="comment">//wordCounts.updateStateByKey()</span></span><br><span class="line">    <span class="comment">// 打印数据当前批次</span></span><br><span class="line">    wordCounts.print()</span><br><span class="line">    <span class="comment">//totalwc.print()</span></span><br><span class="line">    <span class="comment">// 把结果输入到mysql里 先在mysql里创建完表了</span></span><br><span class="line">    <span class="comment">// 下面会报错-&gt; mysql链接没有进行序列化 ，我们不能加除非更改底层源码</span></span><br><span class="line">    <span class="comment">// closure 闭包 -&gt; 方法内使用了方法外的变量 比如下述的connect</span></span><br><span class="line">    wordCounts.foreachRDD(rdd=&gt;&#123;</span><br><span class="line">      <span class="type">val</span> <span class="variable">connection</span> <span class="operator">=</span> mysqlutils.getconnect(<span class="string">&quot;jdbc:mysql://bigdata2:3306/bigdata&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;liuzihan010616&quot;</span>)</span><br><span class="line">      rdd.foreach &#123; record =&gt;</span><br><span class="line">        <span class="type">val</span> <span class="variable">sql</span> <span class="operator">=</span> s<span class="string">&quot;insert into wc values(&#x27;$&#123;record._1&#125;&#x27;,&#x27;$&#123;record._2&#125;&#x27;)&quot;</span></span><br><span class="line">        connection.createStatement.execute(sql)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">// --------------------------------------------------------</span></span><br><span class="line">    <span class="comment">//对上述进行修改之后</span></span><br><span class="line">    <span class="comment">//这样是可以的但是性能不高</span></span><br><span class="line">    <span class="comment">//因为会一直拿链接，会造成性能下降</span></span><br><span class="line">        wordCounts.foreachRDD(rdd=&gt;&#123;</span><br><span class="line">          rdd.foreach &#123; record =&gt;</span><br><span class="line">            <span class="type">val</span> <span class="variable">sql</span> <span class="operator">=</span> s<span class="string">&quot;insert into wc values(&#x27;$&#123;record._1&#125;&#x27;,&#x27;$&#123;record._2&#125;&#x27;)&quot;</span></span><br><span class="line">            <span class="type">val</span> <span class="variable">connection</span> <span class="operator">=</span> mysqlutils.getconnect(<span class="string">&quot;jdbc:mysql://bigdata2:3306/bigdata&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;liuzihan010616&quot;</span>)</span><br><span class="line">            connection.createStatement.execute(sql)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment">//优化性能</span></span><br><span class="line">    wordCounts.foreachRDD(rdd=&gt;&#123;</span><br><span class="line">      rdd.foreachPartition(record=&gt;&#123;</span><br><span class="line">        <span class="type">val</span> <span class="variable">connection</span> <span class="operator">=</span> mysqlutils.getconnect(<span class="string">&quot;jdbc:mysql://bigdata2:3306/bigdata&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;liuzihan010616&quot;</span>)</span><br><span class="line">        record.foreach(pari =&gt; &#123;</span><br><span class="line">          <span class="type">val</span> <span class="variable">sql</span> <span class="operator">=</span> s<span class="string">&quot;insert into wc values(&#x27;$&#123;pari._1&#125;&#x27;,&#x27;$&#123;pari._2&#125;&#x27;)&quot;</span></span><br><span class="line">          connection.createStatement.execute(sql)</span><br><span class="line">        &#125;)</span><br><span class="line">        mysqlutils.closeconnect(connection)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 再次进行优化 原因 -》 partition的数量过高</span></span><br><span class="line">    <span class="comment">// 通过连接池来进行</span></span><br><span class="line">    <span class="comment">// 或者通过coalse来控制这个分区数量</span></span><br><span class="line">    dstream.foreachRDD &#123; rdd =&gt;</span><br><span class="line">      rdd.foreachPartition &#123; partitionOfRecords =&gt;</span><br><span class="line">        <span class="comment">// ConnectionPool is a static, lazily initialized pool of connections</span></span><br><span class="line">        <span class="type">val</span> <span class="variable">connection</span> <span class="operator">=</span> ConnectionPool.getConnection()</span><br><span class="line">        partitionOfRecords.foreach(record =&gt; connection.send(record))</span><br><span class="line">        ConnectionPool.returnConnection(connection)  <span class="comment">// return to the pool for future reuse</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 利用sparksql的方式写入 最推荐</span></span><br><span class="line">    <span class="comment">// 性能也很好因为用的是spark的</span></span><br><span class="line">    wordCounts.foreachRDD(rdd=&gt;&#123;</span><br><span class="line">      <span class="type">val</span> <span class="variable">spark</span> <span class="operator">=</span> SparkSession.builder.config(rdd.sparkContext.getConf).getOrCreate()</span><br><span class="line">      <span class="keyword">import</span> spark.implicits._</span><br><span class="line">      <span class="comment">// Convert RDD[String] to DataFrame</span></span><br><span class="line">      <span class="type">val</span> <span class="variable">wordsDataFrame</span> <span class="operator">=</span> rdd.toDF(<span class="string">&quot;word&quot;</span>,<span class="string">&quot;cnt&quot;</span>)</span><br><span class="line">      val srray:Array[String] = Array(<span class="string">&quot;append&quot;</span>,<span class="string">&quot;jdbc:mysql://bigdata2:3306/bigdata&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;liuzihan010616&quot;</span>,<span class="string">&quot;wc&quot;</span>,<span class="string">&quot;word&quot;</span>)</span><br><span class="line">      savefile.savetojdbc(spark,wordsDataFrame,srray)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ssc.start()             <span class="comment">// Start</span></span><br><span class="line">    ssc.awaitTermination()  <span class="comment">// Wait</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置数据源在目标机器上执行nc -lk 9999 然后输入数据就ok了</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def <span class="title function_">updateFunction</span><span class="params">(newValues: Seq[Int], runningCount: Option[Int])</span>: Option[Int] = &#123;</span><br><span class="line">      <span class="comment">// add the new values with the previous running count to get the new count</span></span><br><span class="line">    <span class="type">val</span> <span class="variable">sum</span> <span class="operator">=</span> newValues.sum</span><br><span class="line">    <span class="type">val</span> <span class="variable">i</span> <span class="operator">=</span> runningCount.getOrElse(<span class="number">0</span>)</span><br><span class="line">    Some(sum+i)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><h3 id="DStream和RDD之间交互的算子"><a href="#DStream和RDD之间交互的算子" class="headerlink" title="DStream和RDD之间交互的算子"></a>DStream和RDD之间交互的算子</h3><p>需求 ：</p>
<ul>
<li>一个数据是来自于mysql&#x2F;文本数据 ： 量小 伪表</li>
<li>一个数据 来自kafka sss读取形成的DStream 量大 主业务线</li>
</ul>
<p>实例：弹幕过滤功能</p>
<ul>
<li>离线</li>
<li>实时</li>
</ul>
<h3 id="数据如下"><a href="#数据如下" class="headerlink" title="数据如下"></a>数据如下</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">主表：</span><br><span class="line">不好看</span><br><span class="line">垃圾</span><br><span class="line">女主真好看</span><br><span class="line">666</span><br><span class="line">过滤的弹幕：</span><br><span class="line">热巴真丑</span><br><span class="line">鸡儿真美</span><br><span class="line">王退出娱乐圈</span><br></pre></td></tr></table></figure>

<h3 id="离线"><a href="#离线" class="headerlink" title="离线:"></a>离线:</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sparkstreaming</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.SparkSession</span><br><span class="line"><span class="keyword">import</span> tool._</span><br><span class="line"><span class="keyword">object</span> sparkstreaming2 &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> spark = SparkSession.builder().appName(<span class="string">&quot;Sparksql01&quot;</span>).master(<span class="string">&quot;local[4]&quot;</span>).enableHiveSupport().getOrCreate()</span><br><span class="line">  def main(args: Array[String]): <span class="built_in">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> mainsql = List(</span><br><span class="line">      <span class="string">&quot;不好看&quot;</span>,</span><br><span class="line">      <span class="string">&quot;垃圾&quot;</span>,</span><br><span class="line">      <span class="string">&quot;女主真好看&quot;</span>,</span><br><span class="line">      <span class="string">&quot;666&quot;</span>,</span><br><span class="line">      <span class="string">&quot;热巴真丑&quot;</span>,</span><br><span class="line">      <span class="string">&quot;鸡儿真美&quot;</span>,</span><br><span class="line">      <span class="string">&quot;王退出娱乐圈&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> maintable = spark.sparkContext.parallelize(mainsql)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> black = List(</span><br><span class="line">      <span class="string">&quot;热巴真丑&quot;</span>,</span><br><span class="line">        <span class="string">&quot;鸡儿真美&quot;</span>,</span><br><span class="line">      <span class="string">&quot;王退出娱乐圈&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> blacktable = spark.sparkContext.parallelize(black)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value1 = maintable.map(x =&gt; &#123;</span><br><span class="line">      (x, <span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">val</span> value = blacktable.map(x =&gt; &#123;</span><br><span class="line">      (x, <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    value1.leftOuterJoin(value).filter(_._2._2.getOrElse(<span class="literal">false</span>)!=<span class="literal">true</span>).map(_._1).foreach(println(_))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="实时："><a href="#实时：" class="headerlink" title="实时："></a>实时：</h3><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">private val streamingcontext = <span class="keyword">new</span> streamingcontext</span><br><span class="line">def main(args: <span class="built_in">Array</span>[String]): Unit = &#123;</span><br><span class="line">  val ssc = streamingcontext.getstreamcotext()</span><br><span class="line">  val maintable = ssc.socketTextStream(<span class="string">&quot;bigdata5&quot;</span>, <span class="number">9099</span>)</span><br><span class="line">  <span class="keyword">var</span> black = List(</span><br><span class="line">    <span class="string">&quot;热巴真丑&quot;</span>,</span><br><span class="line">    <span class="string">&quot;鸡儿真美&quot;</span>,</span><br><span class="line">    <span class="string">&quot;王退出娱乐圈&quot;</span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  val blacktable = ssc.sparkContext.parallelize(black)</span><br><span class="line"></span><br><span class="line">  val value = blacktable.<span class="built_in">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    (x, <span class="literal">true</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  val value1 = maintable.<span class="built_in">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    (x, <span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  val value2 = value1.transform(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    x.leftOuterJoin(value).<span class="built_in">filter</span>(_._2._2.getOrElse(<span class="literal">false</span>) != <span class="literal">true</span>).<span class="built_in">map</span>(_._1)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  value2.print()</span><br><span class="line">  </span><br><span class="line">  ssc.start()</span><br><span class="line">  ssc.awaitTermination()</span><br></pre></td></tr></table></figure>

<h2 id="sparkstreaming和kafka整合"><a href="#sparkstreaming和kafka整合" class="headerlink" title="sparkstreaming和kafka整合"></a>sparkstreaming和kafka整合</h2><p>通过receiver方式读取kafka数据</p>
<p>kafka版本我们选择的是2.2.1</p>
<p>在sparkstreaming里默认的时候是至少一次</p>
<p>spark消费kafka数据形成的DStream里的分区数量和Kafka里的topic的分区数是一一对应的</p>
<p>分区数和task数是一一对应的-》并行度一一对应</p>
<p>官网：<a href="https://spark.apache.org/docs/latest/streaming-kafka-0-10-integration">kafkaonspark</a></p>
<p>idea里的依赖</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;dependency&gt;</span></span><br><span class="line">  <span class="section">&lt;groupId&gt;</span><span class="attribute">org</span>.apache.spark&lt;/groupId&gt;</span><br><span class="line">  <span class="section">&lt;artifactId&gt;</span><span class="attribute">spark</span>-streaming-kafka-<span class="number">0</span>-<span class="number">10</span>_2.<span class="number">12</span>&lt;/artifactId&gt;</span><br><span class="line">  <span class="section">&lt;version&gt;</span><span class="attribute">3</span>.<span class="number">2</span>.<span class="number">1</span>&lt;/version&gt;</span><br><span class="line"><span class="section">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="comment">-------------------------------kafka消费数据</span></span><br><span class="line"><span class="title">kafka</span>-console-consumer.sh \</span><br><span class="line"><span class="comment">--bootstrap-server bigdata3:9092,bigdata4:9092,bigdata5:9092 \</span></span><br><span class="line"><span class="comment">--topic dl2262 \</span></span><br><span class="line"><span class="comment">--from-beginning </span></span><br><span class="line"><span class="comment">-----------------------------kafka创建topic</span></span><br><span class="line"><span class="title">kafka</span>-topics.sh \</span><br><span class="line"><span class="comment">--create \</span></span><br><span class="line"><span class="comment">--zookeeper bigdata3:2181,bigdata4:2181,bigdata5:2181/kafka \</span></span><br><span class="line"><span class="comment">--topic dl2262 \</span></span><br><span class="line"><span class="comment">--partitions 6 \</span></span><br><span class="line"><span class="comment">--replication-factor 3</span></span><br><span class="line"><span class="comment">-------------------------------kafka生产数据</span></span><br><span class="line"><span class="title">kafka</span>-console-producer.sh \</span><br><span class="line"><span class="comment">--broker-list bigdata3:9092,bigdata4:9092,bigdata5:9092 \</span></span><br><span class="line"><span class="comment">--topic dl2262</span></span><br><span class="line"><span class="comment">-------------------------------kafka查看topic</span></span><br><span class="line"><span class="title">kafka</span>-topics.sh \</span><br><span class="line"><span class="comment">--describe \</span></span><br><span class="line"><span class="comment">--zookeeper bigdata3:2181,bigdata4:2181,bigdata5:2181/kafka \</span></span><br><span class="line"><span class="comment">--topic dl2262 </span></span><br><span class="line"><span class="comment">-----------------------------代码</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.SparkSession</span><br><span class="line"><span class="keyword">import</span> tool._</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka010._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe</span><br><span class="line"><span class="title">object</span> sparkstreaming2 &#123;</span><br><span class="line"></span><br><span class="line">  private val streamingcontext = new streamingcontext</span><br><span class="line"></span><br><span class="line">  def main(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    val kafkaParams = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Object</span>](</span><br><span class="line">      <span class="string">&quot;bootstrap.servers&quot;</span> -&gt; <span class="string">&quot;bigdata3:9092,bigdata4:9092,bigdata5:9092&quot;</span>, // kafka地址</span><br><span class="line">      <span class="string">&quot;key.deserializer&quot;</span> -&gt; classOf[<span class="type">StringDeserializer</span>], // 反序列化</span><br><span class="line">      <span class="string">&quot;value.deserializer&quot;</span> -&gt; classOf[<span class="type">StringDeserializer</span>], // 反序列化</span><br><span class="line">      <span class="string">&quot;group.id&quot;</span> -&gt; <span class="string">&quot;dl2262-1&quot;</span>, // 指定消费者组</span><br><span class="line">      <span class="string">&quot;auto.offset.reset&quot;</span> -&gt; <span class="string">&quot;latest&quot;</span>, // 从什么地方开始消费</span><br><span class="line">      <span class="string">&quot;enable.auto.commit&quot;</span> -&gt; (false: java.lang.<span class="type">Boolean</span>) // offset的提交 是不是自动提交</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">     val example = streamingcontext.getstreamcotext()</span><br><span class="line">    val topics = <span class="type">Array</span>(<span class="string">&quot;dl2262&quot;</span>)</span><br><span class="line">    val stream = <span class="type">KafkaUtils</span>.createDirectStream[<span class="type">String</span>, <span class="type">String</span>](</span><br><span class="line">      example,</span><br><span class="line">      <span class="type">PreferConsistent</span>, // 数据存储策略 <span class="type">Kafka</span>数据均匀分在各个exector上，一共有三种</span><br><span class="line">      <span class="type">Subscribe</span>[<span class="type">String</span>, <span class="type">String</span>](topics, kafkaParams) // 固定写法</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    stream.map(record =&gt; (record.value)).print()</span><br><span class="line"></span><br><span class="line">    example.start()</span><br><span class="line">    example.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述用的是新版本的kafka的api</p>
<p>消费kafka数据做wc 将结果-》mysql</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package sparkstreaming</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">spark</span>.<span class="property">sql</span>.<span class="property">SparkSession</span></span><br><span class="line"><span class="keyword">import</span> tool.<span class="property">_</span></span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">kafka</span>.<span class="property">clients</span>.<span class="property">consumer</span>.<span class="property">ConsumerRecord</span></span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">kafka</span>.<span class="property">common</span>.<span class="property">serialization</span>.<span class="property">StringDeserializer</span></span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">spark</span>.<span class="property">streaming</span>.<span class="property">kafka010</span>.<span class="property">_</span></span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">spark</span>.<span class="property">streaming</span>.<span class="property">kafka010</span>.<span class="property">LocationStrategies</span>.<span class="property">PreferConsistent</span></span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">spark</span>.<span class="property">streaming</span>.<span class="property">kafka010</span>.<span class="property">ConsumerStrategies</span>.<span class="property">Subscribe</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span> sparkstreaming2 &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> val streamingcontext = <span class="keyword">new</span> streamingcontext</span><br><span class="line">  <span class="keyword">private</span> val savefile = <span class="keyword">new</span> savefile</span><br><span class="line">  def <span class="title function_">main</span>(<span class="attr">args</span>: <span class="title class_">Array</span>[<span class="title class_">String</span>]): <span class="title class_">Unit</span> = &#123;</span><br><span class="line">    val kafkaParams = <span class="title class_">Map</span>[<span class="title class_">String</span>, <span class="title class_">Object</span>](</span><br><span class="line">      <span class="string">&quot;bootstrap.servers&quot;</span> -&gt; <span class="string">&quot;bigdata3:9092,bigdata4:9092,bigdata5:9092&quot;</span>, <span class="comment">// kafka地址</span></span><br><span class="line">      <span class="string">&quot;key.deserializer&quot;</span> -&gt; classOf[<span class="title class_">StringDeserializer</span>], <span class="comment">// 反序列化</span></span><br><span class="line">      <span class="string">&quot;value.deserializer&quot;</span> -&gt; classOf[<span class="title class_">StringDeserializer</span>], <span class="comment">// 反序列化</span></span><br><span class="line">      <span class="string">&quot;group.id&quot;</span> -&gt; <span class="string">&quot;dl2262-1&quot;</span>, <span class="comment">// 指定消费者组</span></span><br><span class="line">      <span class="string">&quot;auto.offset.reset&quot;</span> -&gt; <span class="string">&quot;latest&quot;</span>, <span class="comment">// 从什么地方开始消费</span></span><br><span class="line">      <span class="string">&quot;enable.auto.commit&quot;</span> -&gt; (<span class="attr">false</span>: java.<span class="property">lang</span>.<span class="property">Boolean</span>) <span class="comment">// offset的提交 是不是自动提交</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    val example = streamingcontext.<span class="title function_">getstreamcotext</span>()</span><br><span class="line">    val topics = <span class="title class_">Array</span>(<span class="string">&quot;dl2262&quot;</span>)</span><br><span class="line">    val stream = <span class="title class_">KafkaUtils</span>.<span class="property">createDirectStream</span>[<span class="title class_">String</span>, <span class="title class_">String</span>](</span><br><span class="line">      example,</span><br><span class="line">      <span class="title class_">PreferConsistent</span>, <span class="comment">// 数据存储策略 Kafka数据均匀分在各个exector上，一共有三种</span></span><br><span class="line">      <span class="title class_">Subscribe</span>[<span class="title class_">String</span>, <span class="title class_">String</span>](topics, kafkaParams) <span class="comment">// 固定写法</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    stream.<span class="title function_">map</span>(<span class="function"><span class="params">record</span> =&gt;</span> (record.<span class="property">value</span>)).<span class="title function_">print</span>()</span><br><span class="line"></span><br><span class="line">    val value = stream.<span class="title function_">map</span>(<span class="function"><span class="params">record</span> =&gt;</span> (record.<span class="property">value</span>)).<span class="title function_">flatMap</span>(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">      x.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    &#125;).<span class="title function_">map</span>(<span class="function"><span class="params">word</span> =&gt;</span> &#123;</span><br><span class="line">      (word, <span class="number">1</span>)</span><br><span class="line">    &#125;).<span class="title function_">reduceByKey</span>(_ + _)</span><br><span class="line"></span><br><span class="line">    value.<span class="title function_">foreachRDD</span>(<span class="function"><span class="params">rdd</span>=&gt;</span>&#123;</span><br><span class="line">      val spark = <span class="title class_">SparkSession</span>.<span class="title function_">builder</span>().<span class="title function_">config</span>(rdd.<span class="property">sparkContext</span>.<span class="property">getConf</span>).<span class="title function_">getOrCreate</span>()</span><br><span class="line">      <span class="keyword">import</span> spark.<span class="property">implicits</span>.<span class="property">_</span></span><br><span class="line">      val wordsDataFrame = rdd.<span class="title function_">toDF</span>(<span class="string">&quot;word&quot;</span>,<span class="string">&quot;cnt&quot;</span>)</span><br><span class="line">      val <span class="attr">srray</span>:<span class="title class_">Array</span>[<span class="title class_">String</span>] = <span class="title class_">Array</span>(<span class="string">&quot;append&quot;</span>,<span class="string">&quot;jdbc:mysql://bigdata2:3306/bigdata&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;liuzihan010616&quot;</span>,<span class="string">&quot;wc&quot;</span>,<span class="string">&quot;word&quot;</span>)</span><br><span class="line">      savefile.<span class="title function_">savetojdbc</span>(spark,wordsDataFrame,srray)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    example.<span class="title function_">start</span>()</span><br><span class="line">    example.<span class="title function_">awaitTermination</span>()</span><br><span class="line">  &#125;&#125;</span><br></pre></td></tr></table></figure>

<p>消费完之后如果重启从上次挂掉的位置继续消费</p>
<p>要设置</p>
<ul>
<li>enable.auto.commit</li>
<li>auto.offset.reset</li>
</ul>
<p>才可以从断掉的位置开始</p>
<p>解决：</p>
<ul>
<li>获取kafka offset</li>
<li>提交kafka offset</li>
</ul>
<p>获取kafka的offset信息</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">stream<span class="selector-class">.foreachRDD</span> &#123; rdd =&gt;</span><br><span class="line">  val offsetRanges = rdd<span class="selector-class">.asInstanceOf</span><span class="selector-attr">[HasOffsetRanges]</span><span class="selector-class">.offsetRanges</span></span><br><span class="line">  rdd<span class="selector-class">.foreachPartition</span> &#123; iter =&gt;</span><br><span class="line">    val o: OffsetRange = <span class="built_in">offsetRanges</span>(TaskContext<span class="selector-class">.get</span>.partitionId)</span><br><span class="line">    <span class="built_in">println</span>(rdd<span class="selector-class">.partitions</span>.size)</span><br><span class="line">    <span class="built_in">println</span>(s<span class="string">&quot;$&#123;o.topic&#125; $&#123;o.partition&#125; $&#123;o.fromOffset&#125; $&#123;o.untilOffset&#125;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于offset信息的解释：只要最后两列数据一样就代表这个topic里的数据都消费完了</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">dl2262 5 19 19</span><br><span class="line">dl2262 4 18 18</span><br><span class="line">dl2262 0 19 19</span><br><span class="line">dl2262 2 77 77</span><br><span class="line">dl2262 1 19 19</span><br><span class="line"><span class="section">dl2262 3 46 47</span></span><br><span class="line"><span class="section">-------------------------------------------</span></span><br><span class="line"><span class="section">Time: 1673939535000 ms</span></span><br><span class="line"><span class="section">-------------------------------------------</span></span><br><span class="line">bidhashdas</span><br><span class="line"></span><br><span class="line">6</span><br><span class="line">dl2262 4 18 18</span><br><span class="line">dl2262 3 47 47</span><br><span class="line">dl2262 0 19 19</span><br><span class="line">dl2262 5 19 19</span><br><span class="line">dl2262 2 77 77</span><br><span class="line">dl2262 1 19 19</span><br></pre></td></tr></table></figure>

<p>注意：这些操作是获取到数据之后立刻这样做，就可以获得offset信息</p>
<p>其他对数据的进行操作，可以在这个里面做</p>
<p>如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">stream<span class="selector-class">.foreachRDD</span> &#123; rdd =&gt;</span><br><span class="line">  val offsetRanges = rdd<span class="selector-class">.asInstanceOf</span><span class="selector-attr">[HasOffsetRanges]</span><span class="selector-class">.offsetRanges</span></span><br><span class="line">  <span class="built_in">println</span>(rdd<span class="selector-class">.partitions</span>.size)</span><br><span class="line">  rdd<span class="selector-class">.foreachPartition</span> &#123; iter =&gt;</span><br><span class="line">    val o: OffsetRange = <span class="built_in">offsetRanges</span>(TaskContext<span class="selector-class">.get</span>.partitionId)</span><br><span class="line">    <span class="built_in">println</span>(s<span class="string">&quot;$&#123;o.topic&#125; $&#123;o.partition&#125; $&#123;o.fromOffset&#125; $&#123;o.untilOffset&#125;&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// wc</span></span><br><span class="line">  val spark = SparkSession<span class="selector-class">.builder</span>()<span class="selector-class">.config</span>(rdd<span class="selector-class">.sparkContext</span>.getConf)<span class="selector-class">.getOrCreate</span>()</span><br><span class="line">  import spark<span class="selector-class">.implicits</span>._</span><br><span class="line"></span><br><span class="line">  val wordsDataFrame = rdd<span class="selector-class">.map</span>(_.value)<span class="selector-class">.flatMap</span>(_<span class="selector-class">.split</span>(<span class="string">&quot;,&quot;</span>))<span class="selector-class">.map</span>((_, <span class="number">1</span>))<span class="selector-class">.reduceByKey</span>(_ + _)<span class="selector-class">.toDF</span>(<span class="string">&quot;word&quot;</span>,<span class="string">&quot;cnt&quot;</span>)</span><br><span class="line">  val srray:Array<span class="selector-attr">[String]</span> = <span class="built_in">Array</span>(<span class="string">&quot;append&quot;</span>,<span class="string">&quot;jdbc:mysql://bigdata2:3306/bigdata&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;liuzihan010616&quot;</span>,<span class="string">&quot;wc&quot;</span>,<span class="string">&quot;word&quot;</span>)</span><br><span class="line">  savefile<span class="selector-class">.savetojdbc</span>(spark,wordsDataFrame,srray)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 存储offset</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提交offset</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，我们要进行提交offset</p>
<p>在提交offset之前</p>
<p>我们要存储offset</p>
<p>spark流处理 默认的就是至少一次</p>
<p>存储offfset</p>
<ul>
<li>checkpoints 不能用</li>
<li>kafka本身 简单高效 -》消费语义-》至少一次&#x2F;最多一次 ：但是最多一次我们不用 -》因为不支持事务 -》 无法支持精准一次</li>
<li>可以使用支持事务的存储结构进行精准一次的交付语义</li>
</ul>
<p>kafka本身 ： 他存储的offset信息是存储在kafka的一共特殊的offset里比如_customer_offsets</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">stream.asInstanceOf<span class="literal">[C<span class="identifier">anCommitOffsets</span>]</span>.commit<span class="constructor">Async(<span class="params">offsetRanges</span>)</span></span><br><span class="line">-------------------------------------------整体代码</span><br><span class="line">package sparkstreaming</span><br><span class="line">import org.apache.spark.sql.SparkSession</span><br><span class="line">import tool._</span><br><span class="line">import org.apache.kafka.clients.consumer.ConsumerRecord</span><br><span class="line">import org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line">import org.apache.spark.TaskContext</span><br><span class="line">import org.apache.spark.streaming.kafka010._</span><br><span class="line">import org.apache.spark.streaming.kafka010.LocationStrategies.PreferConsistent</span><br><span class="line">import org.apache.spark.streaming.kafka010.ConsumerStrategies.Subscribe</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> sparkstreaming2 &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> streamingcontext = <span class="keyword">new</span> streamingcontext</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> savefile = <span class="keyword">new</span> savefile</span><br><span class="line">  def main(args: Array<span class="literal">[S<span class="identifier">tring</span>]</span>): Unit = &#123;</span><br><span class="line">    <span class="keyword">val</span> kafkaParams = Map<span class="literal">[S<span class="identifier">tring</span>, O<span class="identifier">bject</span>]</span>(</span><br><span class="line">      <span class="string">&quot;bootstrap.servers&quot;</span> -&gt; <span class="string">&quot;bigdata3:9092,bigdata4:9092,bigdata5:9092&quot;</span>, <span class="comment">// kafka地址</span></span><br><span class="line">      <span class="string">&quot;key.deserializer&quot;</span> -&gt; classOf<span class="literal">[S<span class="identifier">tringDeserializer</span>]</span>, <span class="comment">// 反序列化</span></span><br><span class="line">      <span class="string">&quot;value.deserializer&quot;</span> -&gt; classOf<span class="literal">[S<span class="identifier">tringDeserializer</span>]</span>, <span class="comment">// 反序列化</span></span><br><span class="line">      <span class="string">&quot;group.id&quot;</span> -&gt; <span class="string">&quot;dl2262-1&quot;</span>, <span class="comment">// 指定消费者组</span></span><br><span class="line">      <span class="string">&quot;auto.offset.reset&quot;</span> -&gt; <span class="string">&quot;latest&quot;</span>, <span class="comment">// 从什么地方开始消费</span></span><br><span class="line">      <span class="string">&quot;enable.auto.commit&quot;</span> -&gt; (<span class="literal">false</span>: java.lang.Boolean) <span class="comment">// offset的提交 是不是自动提交</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> example = streamingcontext.getstreamcotext<span class="literal">()</span></span><br><span class="line">    <span class="keyword">val</span> topics = <span class="constructor">Array(<span class="string">&quot;dl2262&quot;</span>)</span></span><br><span class="line">    <span class="keyword">val</span> stream = <span class="module-access"><span class="module"><span class="identifier">KafkaUtils</span>.</span></span>createDirectStream<span class="literal">[S<span class="identifier">tring</span>, S<span class="identifier">tring</span>]</span>(</span><br><span class="line">      example,</span><br><span class="line">      PreferConsistent, <span class="comment">// 数据存储策略 Kafka数据均匀分在各个exector上，一共有三种</span></span><br><span class="line">      Subscribe<span class="literal">[S<span class="identifier">tring</span>, S<span class="identifier">tring</span>]</span>(topics, kafkaParams) <span class="comment">// 固定写法</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment">// 获取offset信息</span></span><br><span class="line">    stream.foreachRDD &#123;<span class="function"> <span class="params">rdd</span> =&gt;</span></span><br><span class="line">      <span class="keyword">val</span> offsetRanges = rdd.asInstanceOf<span class="literal">[H<span class="identifier">asOffsetRanges</span>]</span>.offsetRanges</span><br><span class="line">      println(rdd.partitions.size)</span><br><span class="line">      rdd.foreachPartition &#123;<span class="function"> <span class="params">iter</span> =&gt;</span></span><br><span class="line">        <span class="keyword">val</span> o: OffsetRange = offset<span class="constructor">Ranges(TaskContext.<span class="params">get</span>.<span class="params">partitionId</span>)</span></span><br><span class="line">        println(s<span class="string">&quot;$&#123;o.topic&#125; $&#123;o.partition&#125; $&#123;o.fromOffset&#125; $&#123;o.untilOffset&#125;&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// wc</span></span><br><span class="line">      <span class="keyword">val</span> spark = <span class="module-access"><span class="module"><span class="identifier">SparkSession</span>.</span></span>builder<span class="literal">()</span>.config(rdd.sparkContext.getConf).get<span class="constructor">OrCreate()</span></span><br><span class="line">      import spark.implicits._</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> wordsDataFrame = rdd.map(<span class="module-access"><span class="module"><span class="identifier">_</span>.</span></span>value).flat<span class="constructor">Map(<span class="params">_</span>.<span class="params">split</span>(<span class="string">&quot;,&quot;</span>)</span>).map((_, <span class="number">1</span>)).reduce<span class="constructor">ByKey(<span class="params">_</span> + <span class="params">_</span>)</span>.<span class="keyword">to</span><span class="constructor">DF(<span class="string">&quot;word&quot;</span>,<span class="string">&quot;cnt&quot;</span>)</span></span><br><span class="line">      <span class="keyword">val</span> srray:Array<span class="literal">[S<span class="identifier">tring</span>]</span> = <span class="constructor">Array(<span class="string">&quot;append&quot;</span>,<span class="string">&quot;jdbc:mysql://bigdata2:3306/bigdata&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;liuzihan010616&quot;</span>,<span class="string">&quot;wc&quot;</span>,<span class="string">&quot;word&quot;</span>)</span></span><br><span class="line">      savefile.savetojdbc(spark,wordsDataFrame,srray)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 存储offset和提交offset</span></span><br><span class="line">      stream.asInstanceOf<span class="literal">[C<span class="identifier">anCommitOffsets</span>]</span>.commit<span class="constructor">Async(<span class="params">offsetRanges</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    example.start<span class="literal">()</span></span><br><span class="line">    example.await<span class="constructor">Termination()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其他数据源：官方的</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The details depend on your data store, but the general idea looks like this</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// begin from the offsets committed to the database</span></span><br><span class="line">val fromOffsets = selectOffsetsFromYourDatabase<span class="selector-class">.map</span> &#123; resultSet =&gt;</span><br><span class="line">  new <span class="built_in">TopicPartition</span>(resultSet<span class="selector-class">.string</span>(<span class="string">&quot;topic&quot;</span>), resultSet<span class="selector-class">.int</span>(<span class="string">&quot;partition&quot;</span>)) -&gt; resultSet<span class="selector-class">.long</span>(<span class="string">&quot;offset&quot;</span>)</span><br><span class="line">&#125;<span class="selector-class">.toMap</span></span><br><span class="line"></span><br><span class="line">val stream = KafkaUtils<span class="selector-class">.createDirectStream</span><span class="selector-attr">[String, String]</span>(</span><br><span class="line">  streamingContext,</span><br><span class="line">  PreferConsistent,</span><br><span class="line">  Assign<span class="selector-attr">[String, String]</span>(fromOffsets<span class="selector-class">.keys</span><span class="selector-class">.toList</span>, kafkaParams, fromOffsets)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">stream<span class="selector-class">.foreachRDD</span> &#123; rdd =&gt;</span><br><span class="line">  val offsetRanges = rdd<span class="selector-class">.asInstanceOf</span><span class="selector-attr">[HasOffsetRanges]</span><span class="selector-class">.offsetRanges</span></span><br><span class="line"></span><br><span class="line">  val results = <span class="built_in">yourCalculation</span>(rdd)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// begin your transaction</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// update results</span></span><br><span class="line">  <span class="comment">// update offsets where the end of existing offsets matches the beginning of this batch of offsets</span></span><br><span class="line">  <span class="comment">// assert that offsets were updated correctly</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// end your transaction</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SSL的一些配置</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">val kafkaParams = Map[<span class="type">String</span>, Object](</span><br><span class="line">  <span class="comment">// the usual params, make sure to change the port in bootstrap.servers if 9092 is not TLS</span></span><br><span class="line">  <span class="string">&quot;security.protocol&quot;</span> <span class="punctuation">-&gt;</span> <span class="string">&quot;SSL&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ssl.truststore.location&quot;</span> <span class="punctuation">-&gt;</span> <span class="string">&quot;/some-directory/kafka.client.truststore.jks&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ssl.truststore.password&quot;</span> <span class="punctuation">-&gt;</span> <span class="string">&quot;test1234&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ssl.keystore.location&quot;</span> <span class="punctuation">-&gt;</span> <span class="string">&quot;/some-directory/kafka.client.keystore.jks&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ssl.keystore.password&quot;</span> <span class="punctuation">-&gt;</span> <span class="string">&quot;test1234&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ssl.key.password&quot;</span> <span class="punctuation">-&gt;</span> <span class="string">&quot;test1234&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>java里的日期和Object的一些方法</title>
    <url>/2022/10/18/10-18/</url>
    <content><![CDATA[<h1 id="Java-util-Date"><a href="#Java-util-Date" class="headerlink" title="Java.util.Date"></a>Java.util.Date</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">Date</span> d = <span class="built_in">new</span> <span class="type">Date</span>();</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.Println(d);</span><br></pre></td></tr></table></figure>

<p>一般这样直接打印出，是中国国际化标准化时间<br>但是一般除了getTime别的都过时了，保不准会在什么时候就舍弃</p>
<h2 id="getmonth"><a href="#getmonth" class="headerlink" title="getmonth"></a>getmonth</h2><p>他是用农历算的，范围是0-11</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">d.<span class="keyword">get</span><span class="built_in">Month</span>();</span><br></pre></td></tr></table></figure>

<h2 id="getYear"><a href="#getYear" class="headerlink" title="getYear"></a>getYear</h2><p>获取从1900年到现在的年数</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">d.<span class="keyword">get</span><span class="built_in">Year</span>();</span><br></pre></td></tr></table></figure>

<h2 id="getDate"><a href="#getDate" class="headerlink" title="getDate"></a>getDate</h2><p>获取到现在的日期</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">d.<span class="keyword">get</span><span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure>

<h2 id="getHours"><a href="#getHours" class="headerlink" title="getHours"></a>getHours</h2><p>获取现在的小时</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">d.getHours()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="getMinutes"><a href="#getMinutes" class="headerlink" title="getMinutes"></a>getMinutes</h2><p>获取现在的分钟数</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">d.getMinutes()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="getSeconds"><a href="#getSeconds" class="headerlink" title="getSeconds"></a>getSeconds</h2><p>获取当前的秒数</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">d.getSeconds()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="getDays"><a href="#getDays" class="headerlink" title="getDays"></a>getDays</h2><p>获取当前日期范围是0-6，周一到周六</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">d.<span class="keyword">get</span><span class="built_in">Day</span>();</span><br></pre></td></tr></table></figure>

<h2 id="getTime"><a href="#getTime" class="headerlink" title="getTime"></a>getTime</h2><p>获取从1970年到现在时间</p>
<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">d.<span class="keyword">get</span><span class="built_in">Time</span>();</span><br></pre></td></tr></table></figure>

<h2 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo"></a>compareTo</h2><p>自动排序：正数是大于 ， 0是相等 ， -1 是小于</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">d.compare<span class="constructor">To(<span class="params">d</span>)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"> 代表过时的，会让方法上面画上横线</span><br></pre></td></tr></table></figure>

<h1 id="java-sql-Date"><a href="#java-sql-Date" class="headerlink" title="java.sql.Date"></a>java.sql.Date</h1><h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">java.<span class="keyword">sql</span>.Date d = <span class="built_in">new</span> java.<span class="keyword">sql</span>.Date(<span class="type">date</span>.getTime);</span><br><span class="line">// 获取时间,包含天月的</span><br></pre></td></tr></table></figure>

<h2 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">java.<span class="keyword">sql</span>.Time d  = <span class="built_in">new</span> java.<span class="keyword">sql</span>.Time(<span class="type">date</span>.getTime);</span><br><span class="line">// 获取时间</span><br></pre></td></tr></table></figure>

<h2 id="Timestamp"><a href="#Timestamp" class="headerlink" title="Timestamp"></a>Timestamp</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">java.<span class="keyword">sql</span>.Timestamp d = <span class="built_in">new</span> java.<span class="keyword">sql</span>.Timestamp(<span class="type">date</span>.getTime);</span><br><span class="line">// 获取精确到毫秒数的时间</span><br></pre></td></tr></table></figure>

<h1 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h1><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">SimpleDateFormat s <span class="operator">=</span> new SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd:mm:ss.SSS&quot;</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="format日期变字符串"><a href="#format日期变字符串" class="headerlink" title="format日期变字符串"></a>format日期变字符串</h2><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="keyword">string</span> s.format(<span class="keyword">date</span>);</span><br></pre></td></tr></table></figure>

<h2 id="字符串变日期"><a href="#字符串变日期" class="headerlink" title="字符串变日期"></a>字符串变日期</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">s.parse(<span class="string">&quot;2000-11-12 13:14:15.000&quot;</span>);</span><br><span class="line"><span class="regexp">//</span> 但是这个可能会有错误，所以，我们需要用try catch包住他</span><br></pre></td></tr></table></figure>

<h1 id="Ccalender"><a href="#Ccalender" class="headerlink" title="Ccalender"></a>Ccalender</h1><p>用静态方法实例化，new 不了</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">Calendar c <span class="operator">=</span> Calendar.getLnstance()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="set设置"><a href="#set设置" class="headerlink" title="set设置"></a>set设置</h2><p>set和get基本相同</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">c1.<span class="keyword">set</span>(Calendar.MONTH ， xxx)；</span><br><span class="line">c1.<span class="keyword">set</span>(Calendar.HOURS , xxx)<span class="comment">;等</span></span><br><span class="line"><span class="comment">// 这里xxx代表一个int型的数字，会自动进位，如果xxx超过11则会自动进位，对其他的小时，秒数也同样是适用</span></span><br></pre></td></tr></table></figure>

<h2 id="get获取"><a href="#get获取" class="headerlink" title="get获取"></a>get获取</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">c.<span class="built_in">get</span>(Calendar.MONTH);</span><br><span class="line">c.<span class="built_in">get</span>(Calendar.DATE);</span><br><span class="line">等,要通过一系列常量来控制他</span><br></pre></td></tr></table></figure>

<h2 id="add计算"><a href="#add计算" class="headerlink" title="add计算"></a>add计算</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">c.add(Calendar.<span class="built_in">MONTH</span> , <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 单纯是加到其中前一个变量上，可以进位。还有其他的方法，比如huors等</span></span><br></pre></td></tr></table></figure>

<h2 id="getTime-1"><a href="#getTime-1" class="headerlink" title="getTime"></a>getTime</h2><p>转换成Date型，然后就可以用SimpleDateFormat了</p>
<h1 id="Localdate"><a href="#Localdate" class="headerlink" title="Localdate"></a>Localdate</h1><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">LocalDate l <span class="operator">=</span> LocalDate.now()<span class="comment">; // 获取当前日期</span></span><br></pre></td></tr></table></figure>

<ul>
<li>最大支持999999999-12-31</li>
<li>最小支持-999999999-01-01</li>
</ul>
<h2 id="adjiustInto"><a href="#adjiustInto" class="headerlink" title="adjiustInto"></a>adjiustInto</h2><p>调整指定的时间对象与此对象时间相同</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">l.adjust<span class="constructor">Into(<span class="params">l</span>)</span></span><br></pre></td></tr></table></figure>

<h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><p>检查这个日期是不是等于另外一个日期</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">l.<span class="keyword">equals</span>(d)</span><br></pre></td></tr></table></figure>

<h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><p>使用指定格式格式化日期</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">l.format(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h2 id="getDayofMonth"><a href="#getDayofMonth" class="headerlink" title="getDayofMonth"></a>getDayofMonth</h2><p>获取月份字段</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.getDayofMonth()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="getDayofWeek"><a href="#getDayofWeek" class="headerlink" title="getDayofWeek"></a>getDayofWeek</h2><p>同上只是获取星期几，这个是个枚举</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.getDayOfWeek()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="getDayofYear"><a href="#getDayofYear" class="headerlink" title="getDayofYear"></a>getDayofYear</h2><p>同上只是获取日期字段</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.getDayofYear()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="getChronology"><a href="#getChronology" class="headerlink" title="getChronology"></a>getChronology</h2><p>获取ios的日历系统的</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.getChronology()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="hashcode"><a href="#hashcode" class="headerlink" title="hashcode"></a>hashcode</h2><p>返回这个日期的哈希码</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.hashcode()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="isAfter"><a href="#isAfter" class="headerlink" title="isAfter"></a>isAfter</h2><p>检查日期是不是在这个日期之后</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">l.is<span class="constructor">After(<span class="params">l</span>)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="isBefore"><a href="#isBefore" class="headerlink" title="isBefore"></a>isBefore</h2><p>同上</p>
<h2 id="isEqual"><a href="#isEqual" class="headerlink" title="isEqual"></a>isEqual</h2><p>检查这个日期是不是等于指定日期</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">l.is<span class="constructor">Equal(<span class="params">l</span>)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="isLeapYear"><a href="#isLeapYear" class="headerlink" title="isLeapYear"></a>isLeapYear</h2><p>根据ios日历，检查是不是闰年</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.isLeapYear()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="now"><a href="#now" class="headerlink" title="now"></a>now</h2><p>获取当前的时间<br>初始化方法</p>
<h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><p>同上面的parse</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">l.<span class="built_in">parse</span>(<span class="built_in">null</span>);</span><br></pre></td></tr></table></figure>

<h2 id="plus"><a href="#plus" class="headerlink" title="plus"></a>plus</h2><p>返回此日期的副本，并添加指定的金额。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">l.<span class="keyword">plus</span>(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<h2 id="plusDays"><a href="#plusDays" class="headerlink" title="plusDays"></a>plusDays</h2><p>返回指定天数的副本</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.plusDays(<span class="number">0</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="plusMonths"><a href="#plusMonths" class="headerlink" title="plusMonths"></a>plusMonths</h2><p>返回这个LocalDate的副本，其指定的时间段以月为单位</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.plusMonths(<span class="number">0</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="plusweeks"><a href="#plusweeks" class="headerlink" title="plusweeks"></a>plusweeks</h2><p>返回这个LocalDate的副本并以指定周期添加周数</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.plusWeeks(<span class="number">0</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="plusYears"><a href="#plusYears" class="headerlink" title="plusYears"></a>plusYears</h2><p>返回这个LocalDate的副本其中指定的时间段以添加的年数访问</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">l.plusYears(<span class="number">0</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="query"><a href="#query" class="headerlink" title="query"></a>query</h2><p>返回指定的查询查询日期</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">l.query(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>返回此日期的调整的副本</p>
<ul>
<li>其和上面一样有对单独地方调整的函数，比如日期月份等</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">l.<span class="keyword">with</span>(l);</span><br><span class="line">		l.<span class="keyword">with</span><span class="constructor">DayOfMonth(0)</span>;</span><br><span class="line">		l.<span class="keyword">with</span><span class="constructor">DayOfYear(0)</span>;</span><br><span class="line">		l.<span class="keyword">with</span><span class="constructor">Month(0)</span>;</span><br><span class="line">		l.<span class="keyword">with</span><span class="constructor">Year(0)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>将日期转换为字符串</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">l.<span class="keyword">to</span><span class="constructor">String()</span>;</span><br></pre></td></tr></table></figure>

<h1 id="方法的综合应用"><a href="#方法的综合应用" class="headerlink" title="方法的综合应用"></a>方法的综合应用</h1><h2 id="计算每个月的天数通过Calendar运行"><a href="#计算每个月的天数通过Calendar运行" class="headerlink" title="计算每个月的天数通过Calendar运行"></a>计算每个月的天数通过Calendar运行</h2><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">C1</span>.</span></span>add(Calendar.MONTH, <span class="number">1</span>);</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">C1</span>.</span></span>add(Calendar.DAY_OF_MONTH, -(当前天数));</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">C1</span>.</span></span>get<span class="constructor">Time()</span>);</span><br></pre></td></tr></table></figure>

<h2 id="LocalDateTime的实际应用"><a href="#LocalDateTime的实际应用" class="headerlink" title="LocalDateTime的实际应用"></a>LocalDateTime的实际应用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalField;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain4</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//		LocalTime</span></span><br><span class="line"><span class="comment">//		LocalDate</span></span><br><span class="line">		<span class="type">LocalDateTime</span> <span class="variable">ldtDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">		System.out.println(ldtDateTime);</span><br><span class="line">		System.out.println(ldtDateTime.getDayOfWeek().getValue()); <span class="comment">// 2</span></span><br><span class="line">		System.out.println(ldtDateTime.getMonth()); <span class="comment">// 10不会走 国外的历法</span></span><br><span class="line">		System.out.println(ldtDateTime.getMonthValue()); </span><br><span class="line">	</span><br><span class="line">		<span class="type">LocalDateTime</span> <span class="variable">ldtDateTime2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2022</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>);</span><br><span class="line">		System.out.println(ldtDateTime2);</span><br><span class="line">	</span><br><span class="line">		<span class="type">DateTimeFormatter</span> <span class="variable">dFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> dFormatter.format(ldtDateTime);</span><br><span class="line">		System.out.println(string);</span><br><span class="line">	</span><br><span class="line">		<span class="type">LocalDateTime</span> <span class="variable">ldtDateTime3</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2022-10-18 15:21:30&quot;</span>, dFormatter);</span><br><span class="line">		System.out.println(ldtDateTime3);</span><br><span class="line">	</span><br><span class="line">		<span class="type">LocalDateTime</span> <span class="variable">ldtDateTime4</span> <span class="operator">=</span> LocalDateTime.from(dFormatter.parse(<span class="string">&quot;2022-10-18 15:21:30&quot;</span>));</span><br><span class="line">		System.out.println(ldtDateTime4);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h2 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h2><p>获取反射</p>
<h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><p>获取hash值，约等于地址</p>
<h2 id="equals-1"><a href="#equals-1" class="headerlink" title="equals"></a>equals</h2><ul>
<li>比较对象的值</li>
<li>&#x3D;&#x3D;对比的是地址</li>
</ul>
<h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>暂时不让用，意义是克隆属性,但是对于引用类型直接克隆是克隆地址，就会造成改一个进而全部都改变，但是有办法，可以进行深克隆进而解决</p>
<ul>
<li>浅克隆：就是只用一次克隆</li>
<li>深克隆：通过多次克隆进而使每个被克隆出来的个体都有不同地址的相同引用类型</li>
</ul>
<h3 id="使用克隆的方法"><a href="#使用克隆的方法" class="headerlink" title="使用克隆的方法"></a>使用克隆的方法</h3><ul>
<li><p>Cloneable:  标记型接口，先实现标记性接口 。 JDK就2个标记接口Serializable和Cloneable</p>
<ul>
<li><ol>
<li>覆盖Object的clone方法;</li>
<li>实现标记Cloneable;</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h2><p>finalize代表GC回调，就是让垃圾回收不要回收他，但是一般不让用，因为会容易造成卡死，或者因为有关联关系的对象而无法进行进行回收</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">java</span><br><span class="line">  package lesson12;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestMain6</span> &#123;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">  		Student student = <span class="keyword">new</span> Student(<span class="string">&quot;jerry&quot;</span>, <span class="number">2</span>);</span><br><span class="line">  		abc();</span><br><span class="line">  		student = <span class="literal">null</span>;</span><br><span class="line">  		System.<span class="keyword">out</span>.println(<span class="number">111</span>);</span><br><span class="line">  	</span><br><span class="line">  		<span class="comment">// 通知jvm在适当时候进行GC</span></span><br><span class="line">  		System.gc();</span><br><span class="line">  		System.<span class="keyword">out</span>.println(<span class="number">222</span>);</span><br><span class="line">  		<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  		</span><br><span class="line">  		&#125;</span><br><span class="line">  	</span><br><span class="line">  	&#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">abc</span>()</span> &#123;</span><br><span class="line">  		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  		Student student = <span class="keyword">new</span> Student(<span class="string">&quot;tom&quot;</span>, <span class="number">1</span>);</span><br><span class="line">  	&#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  Student &#123;</span><br><span class="line">  	@Override</span><br><span class="line">  	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span>() throws Throwable</span> &#123;</span><br><span class="line">  		System.<span class="keyword">out</span>.println(<span class="keyword">this</span> + <span class="string">&quot;被回收了&quot;</span>);</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="static-代码块和非static代码块"><a href="#static-代码块和非static代码块" class="headerlink" title="static 代码块和非static代码块"></a>static 代码块和非static代码块</h1><ul>
<li><p>static 静态代码块。  运行时记载类，只调用一次。</p>
<ul>
<li>一次性的操作。例如： 加载资源，加载驱动。</li>
</ul>
</li>
<li><p>非静态代码块，       每次实例化都会调用</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain7</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是静态代码块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这是非静态代码块&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">TestMain7</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestMain7</span>();</span><br><span class="line">		<span class="type">TestMain7</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestMain7</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>flink</title>
    <url>/2023/01/25/1-25/</url>
    <content><![CDATA[<h1 id="flink"><a href="#flink" class="headerlink" title="flink"></a>flink</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>从14年到15年1月就正式开始</p>
<p>flink本身是德语词，代表快速灵巧</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Apache Flink <span class="keyword">is</span> a framework <span class="keyword">and</span> distributed processing engine <span class="keyword">for</span> stateful computations <span class="keyword">over</span> <span class="keyword">unbounded</span> <span class="keyword">and</span> bounded data streams. Flink has been designed <span class="keyword">to</span> run <span class="keyword">in</span> <span class="keyword">all</span> common <span class="keyword">cluster</span> environments, <span class="keyword">perform</span> computations at <span class="keyword">in</span>-memory speed <span class="keyword">and</span> at <span class="keyword">any</span> scale.</span><br><span class="line"></span><br><span class="line">Here, we <span class="keyword">explain</span> important aspects <span class="keyword">of</span> Flink’s architecture.</span><br></pre></td></tr></table></figure>

<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>边界流：<strong>Bounded streams ： 有明确的开始以及结束的流 也为人所知是批处理（batch processing）</strong></p>
<p>无边界流：<strong>Unbounded streams :有开始无结束的边界流</strong></p>
<h2 id="flink特点"><a href="#flink特点" class="headerlink" title="flink特点"></a>flink特点</h2><p>flink处理的数据类型也在从边界流逐渐转向无边界流 :一起是边界流 现在是无边界流</p>
<p>flink是个分布式系统</p>
<p>flink针对本地访问进行了优化-&gt; 任务的状态始终保存在内存中如果追昂太大小超过可用内存，那么则会把他存储在能高效访问的磁盘数据结构中-&gt;任务通过访问本地（通常在内存中）状态来进行所有的计算，从而产生非常低的处理延迟。Flink 通过定期和异步地对本地状态进行持久化存储来保证故障场景下精确一次的状态一致性。</p>
<h2 id="flink应用"><a href="#flink应用" class="headerlink" title="flink应用"></a>flink应用</h2><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><ul>
<li>有界</li>
<li>无界</li>
<li>实时</li>
<li>离线</li>
</ul>
<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>只有在每一个单独的事件上进行转换操作的应用才不需要状态，换言之，每一个具有一定复杂度的流处理应用都是有状态的。</p>
<p>Flink 提供了许多状态管理相关的特性支持，其中包括：</p>
<ul>
<li><strong>多种状态基础类型</strong> ： 例如 value ，map ，list</li>
<li><strong>插件化的State Backend</strong> ： State Backend 负责管理应用程序状态，并在需要的时候进行 checkpoint。Flink 支持多种 state backend，可以将状态存在内存或者 <a href="https://rocksdb.org/">RocksDB</a>。RocksDB 是一种高效的嵌入式、持久化键值存储引擎。Flink 也支持插件式的自定义 state backend 进行状态存储。</li>
<li><strong>精确一次语义</strong> ： 就是kafka里的精准一次 -&gt; 说明flink支持事务</li>
<li><strong>超大数据量状态</strong> ： Flink 能够利用其异步以及增量式的 checkpoint 算法，存储数 TB 级别的应用状态。</li>
<li><strong>可弹性伸缩的应用</strong> ： Flink 能够通过在更多或更少的工作节点上对状态进行重新分布，支持有状态应用的分布式的横向伸缩。</li>
</ul>
<h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>时间是流处理应用另一个重要的组成部分。因为事件总是在特定时间点发生，所以大多数的事件流都拥有事件本身所固有的时间语义。进一步而言，许多常见的流计算都基于时间语义，例如窗口聚合、会话计算、模式检测和基于时间的 join。流处理的一个重要方面是应用程序如何衡量时间，即区分事件时间（event-time）和处理时间（processing-time）。</p>
<ul>
<li><strong>事件时间模式</strong> ： 使用事件时间语义的流处理应用根据事件本身自带的时间戳进行结果的计算。因此，无论处理的是历史记录的事件还是实时的事件，事件时间模式的处理总能保证结果的准确性和一致性。</li>
<li><strong>Watermark 支持</strong> ： Flink 引入了 watermark 的概念，用以衡量事件时间进展。Watermark 也是一种平衡处理延时和完整性的灵活机制。</li>
<li><strong>迟到数据处理</strong> ：当以带有 watermark 的事件时间模式处理数据流时，在计算完成之后仍会有相关数据到达。这样的事件被称为迟到事件。Flink 提供了多种处理迟到数据的选项，例如将这些数据重定向到旁路输出（side output）或者更新之前完成计算的结果</li>
<li><strong>处理时间模式</strong> ：除了事件时间模式，Flink 还支持处理时间语义。处理时间模式根据处理引擎的机器时钟触发计算，一般适用于有着严格的低延迟需求，并且能够容忍近似结果的流处理应用。</li>
</ul>
<h2 id="分层APi"><a href="#分层APi" class="headerlink" title="分层APi"></a>分层APi</h2><p>Flink 根据抽象程度分层，提供了三种不同的 API。每一种 API 在简洁性和表达力上有着不同的侧重，并且针对不同的应用场景。</p>
<p>如下 ：</p>
<p><img src="https://pic.imgdb.cn/item/63d7aea6face21e9ef369bfb.jpg"></p>
<h3 id="ProcessFunction"><a href="#ProcessFunction" class="headerlink" title="ProcessFunction"></a>ProcessFunction</h3><p><a href="https://nightlies.apache.org/flink/flink-docs-stable/dev/stream/operators/process_function.html">ProcessFunction</a> 是 Flink 所提供的最具表达力的接口。ProcessFunction 可以处理一或两条输入数据流中的单个事件或者归入一个特定窗口内的多个事件。它提供了对于时间和状态的细粒度控制。开发者可以在其中任意地修改状态，也能够注册定时器用以在未来的某一时刻触发回调函数。因此，你可以利用 ProcessFunction 实现许多<a href="https://flink.apache.org/zh/usecases.html#eventDrivenApps">有状态的事件驱动应用</a>所需要的基于单个事件的复杂业务逻辑。</p>
<p>相当于计时器的用处，下处是官方的例子：</p>
<p>官方的例子是设置开始，并登记一个4小时的的计时器，当提前返回end，则是提前结束并返回时间，当到4小时则清空状态并结束</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 将相邻的 keyed START 和 END 事件相匹配并计算两者的时间间隔</span></span><br><span class="line"><span class="comment"> * 输入数据为 Tuple2&lt;String, String&gt; 类型，第一个字段为 key 值， </span></span><br><span class="line"><span class="comment"> * 第二个字段标记 START 和 END 事件。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">static</span> <span class="keyword">class</span> <span class="title class_">StartEndDuration</span></span><br><span class="line">    extends KeyedProcessFunction&lt;<span class="type">String</span>, Tuple2&lt;<span class="type">String</span>, <span class="type">String</span>&gt;, Tuple2&lt;<span class="type">String</span>, Long&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ValueState&lt;Long&gt; startTime;</span><br><span class="line"></span><br><span class="line">  @<span class="function">Override</span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="type">void</span> <span class="title">open</span><span class="params">(Configuration conf)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// obtain state handle</span></span><br><span class="line">    startTime = <span class="built_in">getRuntimeContext</span>()</span><br><span class="line">      .<span class="built_in">getState</span>(<span class="keyword">new</span> <span class="built_in">ValueStateDescriptor</span>&lt;Long&gt;(<span class="string">&quot;startTime&quot;</span>, Long.<span class="keyword">class</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Called for each processed event. */</span></span><br><span class="line">  @<span class="function">Override</span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="type">void</span> <span class="title">processElement</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      Tuple2&lt;<span class="type">String</span>, <span class="type">String</span>&gt; in,</span></span></span><br><span class="line"><span class="params"><span class="function">      Context ctx,</span></span></span><br><span class="line"><span class="params"><span class="function">      Collector&lt;Tuple2&lt;<span class="type">String</span>, Long&gt;&gt; out)</span> throws Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (in.f1) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;START&quot;</span>:</span><br><span class="line">        <span class="comment">// set the start time if we receive a start event.</span></span><br><span class="line">        startTime.<span class="built_in">update</span>(ctx.<span class="built_in">timestamp</span>());</span><br><span class="line">        <span class="comment">// register a timer in four hours from the start event.</span></span><br><span class="line">        ctx.<span class="built_in">timerService</span>()</span><br><span class="line">          .<span class="built_in">registerEventTimeTimer</span>(ctx.<span class="built_in">timestamp</span>() + <span class="number">4</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;END&quot;</span>:</span><br><span class="line">        <span class="comment">// emit the duration between start and end event</span></span><br><span class="line">        Long sTime = startTime.<span class="built_in">value</span>();</span><br><span class="line">        <span class="keyword">if</span> (sTime != null) &#123;</span><br><span class="line">          out.<span class="built_in">collect</span>(Tuple2.<span class="built_in">of</span>(in.f0, ctx.<span class="built_in">timestamp</span>() - sTime));</span><br><span class="line">          <span class="comment">// clear the state</span></span><br><span class="line">          startTime.<span class="built_in">clear</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Called when a timer fires. */</span></span><br><span class="line">  @<span class="function">Override</span></span><br><span class="line"><span class="function">  <span class="keyword">public</span> <span class="type">void</span> <span class="title">onTimer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="type">long</span> timestamp,</span></span></span><br><span class="line"><span class="params"><span class="function">      OnTimerContext ctx,</span></span></span><br><span class="line"><span class="params"><span class="function">      Collector&lt;Tuple2&lt;<span class="type">String</span>, Long&gt;&gt; out)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Timeout interval exceeded. Cleaning up the state.</span></span><br><span class="line">    startTime.<span class="built_in">clear</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DataStream-API"><a href="#DataStream-API" class="headerlink" title="DataStream API"></a>DataStream API</h3><p><a href="https://nightlies.apache.org/flink/flink-docs-stable/dev/datastream_api.html">DataStream API</a> 为许多通用的流处理操作提供了处理原语。这些操作包括窗口、逐条记录的转换操作，在处理事件时进行外部数据库查询等。DataStream API 支持 Java 和 Scala 语言，预先定义了例如 <code>map()</code>、<code>reduce()</code>、<code>aggregate()</code> 等函数。你可以通过扩展实现预定义接口或使用 Java、Scala 的 lambda 表达式实现自定义的函数。</p>
<p>下面的代码示例展示了如何捕获会话时间范围内所有的点击流事件，并对每一次会话的点击量进行计数。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 网站点击 Click 的数据流</span></span><br><span class="line">DataStream&lt;Click&gt; clicks = <span class="params">...</span></span><br><span class="line"></span><br><span class="line">DataStream&lt;Tuple2&lt;<span class="built_in">String</span>, Long&gt;&gt; result = clicks</span><br><span class="line">  <span class="comment">// 将网站点击映射为 (userId, 1) 以便计数</span></span><br><span class="line">  .<span class="built_in">map</span>(</span><br><span class="line">    <span class="comment">// 实现 MapFunction 接口定义函数</span></span><br><span class="line">    <span class="literal">new</span> MapFunction&lt;Click, Tuple2&lt;<span class="built_in">String</span>, Long&gt;&gt;() &#123;</span><br><span class="line">      @Override</span><br><span class="line">      <span class="keyword">public</span> Tuple2&lt;<span class="built_in">String</span>, Long&gt; <span class="built_in">map</span>(Click click) &#123;</span><br><span class="line">        <span class="keyword">return</span> Tuple2.of(click.userId, <span class="number">1</span>L);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">// 以 userId (field 0) 作为 key</span></span><br><span class="line">  .keyBy(<span class="number">0</span>)</span><br><span class="line">  <span class="comment">// 定义 30 分钟超时的会话窗口</span></span><br><span class="line">  .window(EventTimeSessionWindows.withGap(Time.minutes(<span class="number">30</span>L)))</span><br><span class="line">  <span class="comment">// 对每个会话窗口的点击进行计数，使用 lambda 表达式定义 reduce 函数</span></span><br><span class="line">  .reduce((a, b) -&gt; Tuple2.of(a.f0, a.f1 + b.f1));</span><br></pre></td></tr></table></figure>

<h3 id="SQL-amp-Table-API"><a href="#SQL-amp-Table-API" class="headerlink" title="SQL &amp; Table API"></a>SQL &amp; Table API</h3><p>Flink 支持两种关系型的 API，<a href="https://nightlies.apache.org/flink/flink-docs-stable/dev/table/index.html">Table API 和 SQL</a>。这两个 API 都是批处理和流处理统一的 API，这意味着在无边界的实时数据流和有边界的历史记录数据流上，关系型 API 会以相同的语义执行查询，并产生相同的结果。Table API 和 SQL 借助了 <a href="https://calcite.apache.org/">Apache Calcite</a> 来进行查询的解析，校验以及优化。它们可以与 DataStream 和 DataSet API 无缝集成，并支持用户自定义的标量函数，聚合函数以及表值函数。</p>
<p>Flink 的关系型 API 旨在简化<a href="https://flink.apache.org/zh/usecases.html#analytics">数据分析</a>、<a href="https://flink.apache.org/zh/usecases.html#pipelines">数据流水线和 ETL 应用</a>的定义。</p>
<p>下面的代码示例展示了如何使用 SQL 语句查询捕获会话时间范围内所有的点击流事件，并对每一次会话的点击量进行计数。此示例与上述 DataStream API 中的示例有着相同的逻辑。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> userId, COUNT(*)</span><br><span class="line"><span class="keyword">FROM</span> clicks</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SESSION</span>(clicktime, <span class="type">INTERVAL</span> <span class="string">&#x27;30&#x27;</span> MINUTE), userId</span><br></pre></td></tr></table></figure>

<h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><p>Flink 具有数个适用于常见数据处理应用场景的扩展库。这些库通常嵌入在 API 中，且并不完全独立于其它 API。它们也因此可以受益于 API 的所有特性，并与其他库集成。</p>
<ul>
<li><strong><a href="https://nightlies.apache.org/flink/flink-docs-stable/dev/libs/cep.html">复杂事件处理(CEP)</a></strong> ：模式检测是事件流处理中的一个非常常见的用例。Flink 的 CEP 库提供了 API，使用户能够以例如正则表达式或状态机的方式指定事件模式。CEP 库与 Flink 的 DataStream API 集成，以便在 DataStream 上评估模式。CEP 库的应用包括网络入侵检测，业务流程监控和欺诈检测。</li>
<li><strong><a href="https://nightlies.apache.org/flink/flink-docs-stable/dev/batch/index.html">DataSet API</a></strong> ：DataSet API 是 Flink 用于批处理应用程序的核心 API。DataSet API 所提供的基础算子包括 <em>map</em> 、 <em>reduce</em> 、 <em>(outer) join</em> 、 <em>co-group</em> 、<em>iterate</em>等。所有算子都有相应的算法和数据结构支持，对内存中的序列化数据进行操作。如果数据大小超过预留内存，则过量数据将存储到磁盘。Flink 的 DataSet API 的数据处理算法借鉴了传统数据库算法的实现，例如混合散列连接（hybrid hash-join）和外部归并排序（external merge-sort）。</li>
<li><strong><a href="https://nightlies.apache.org/flink/flink-docs-stable/dev/libs/gelly/index.html">Gelly</a></strong> : Gelly 是一个可扩展的图形处理和分析库。Gelly 是在 DataSet API 之上实现的，并与 DataSet API 集成。因此，它能够受益于其可扩展且健壮的操作符。Gelly 提供了<a href="https://nightlies.apache.org/flink/flink-docs-stable/dev/libs/gelly/library_methods.html">内置算法</a>，如 label propagation、triangle enumeration 和 page rank 算法，也提供了一个简化自定义图算法实现的 <a href="https://nightlies.apache.org/flink/flink-docs-stable/dev/libs/gelly/graph_api.html">Graph API</a>。</li>
</ul>
<h2 id="flink运维"><a href="#flink运维" class="headerlink" title="flink运维"></a>flink运维</h2><p>Flink通过几下多种机制维护应用可持续运行及其一致性:</p>
<ul>
<li><strong>检查点的一致性</strong> : Flink的故障恢复机制是通过建立分布式应用服务状态一致性检查点实现的，当有故障产生时，应用服务会重启后，再重新加载上一次成功备份的状态检查点信息。结合可重放的数据源，该特性可保证 <em>精确一次（exactly-once）</em> 的状态一致性。</li>
<li><strong>高效的检查点</strong> : 如果一个应用要维护一个TB级的状态信息，对此应用的状态建立检查点服务的资源开销是很高的，为了减小因检查点服务对应用的延迟性（SLAs服务等级协议）的影响，Flink采用异步及增量的方式构建检查点服务。</li>
<li><strong>端到端的精确一次</strong> : Flink 为某些特定的存储支持了事务型输出的功能，及时在发生故障的情况下，也能够保证精确一次的输出。</li>
<li><strong>集成多种集群管理服务</strong> : Flink已与多种集群管理服务紧密集成，如 <a href="https://hadoop.apache.org/">Hadoop YARN</a>, <a href="https://mesos.apache.org/">Mesos</a>, 以及 <a href="https://kubernetes.io/">Kubernetes</a>。当集群中某个流程任务失败后，一个新的流程服务会自动启动并替代它继续执行。</li>
<li><strong>内置高可用服务</strong> : Flink内置了为解决单点故障问题的高可用性服务模块，此模块是基于<a href="https://zookeeper.apache.org/">Apache ZooKeeper</a> 技术实现的，<a href="https://zookeeper.apache.org/">Apache ZooKeeper</a>是一种可靠的、交互式的、分布式协调服务组件。</li>
</ul>
<h2 id="Flink能够更方便地升级、迁移、暂停、恢复应用服务"><a href="#Flink能够更方便地升级、迁移、暂停、恢复应用服务" class="headerlink" title="Flink能够更方便地升级、迁移、暂停、恢复应用服务"></a>Flink能够更方便地升级、迁移、暂停、恢复应用服务</h2><p>而Flink的 <em>Savepoint</em> 服务就是为解决升级服务过程中记录流应用状态信息及其相关难题而产生的一种唯一的、强大的组件。一个 Savepoint，就是一个应用服务状态的一致性快照，因此其与checkpoint组件的很相似，但是与checkpoint相比，Savepoint 需要手动触发启动，而且当流应用服务停止时，它并不会自动删除。Savepoint 常被应用于启动一个已含有状态的流服务，并初始化其（备份时）状态。Savepoint 有以下特点：</p>
<ul>
<li><strong>便于升级应用服务版本</strong> : Savepoint 常在应用版本升级时使用，当前应用的新版本更新升级时，可以根据上一个版本程序记录的 Savepoint 内的服务状态信息来重启服务。它也可能会使用更早的 Savepoint 还原点来重启服务，以便于修复由于有缺陷的程序版本导致的不正确的程序运行结果。</li>
<li><strong>方便集群服务移植</strong> : 通过使用 Savepoint，流服务应用可以自由的在不同集群中迁移部署。</li>
<li><strong>方便Flink版本升级</strong> : 通过使用 Savepoint，可以使应用服务在升级Flink时，更加安全便捷。</li>
<li><strong>增加应用并行服务的扩展性</strong> : Savepoint 也常在增加或减少应用服务集群的并行度时使用。</li>
<li><strong>便于A&#x2F;B测试及假设分析场景对比结果</strong> : 通过把同一应用在使用不同版本的应用程序，基于同一个 Savepoint 还原点启动服务时，可以测试对比2个或多个版本程序的性能及服务质量。</li>
<li><strong>暂停和恢复服务</strong> : 一个应用服务可以在新建一个 Savepoint 后再停止服务，以便于后面任何时间点再根据这个实时刷新的 Savepoint 还原点进行恢复服务。</li>
<li><strong>归档服务</strong> : Savepoint 还提供还原点的归档服务，以便于用户能够指定时间点的 Savepoint 的服务数据进行重置应用服务的状态，进行恢复服务。</li>
</ul>
<h2 id="监控和控制应用服务"><a href="#监控和控制应用服务" class="headerlink" title="监控和控制应用服务"></a>监控和控制应用服务</h2><p>如其它应用服务一样，持续运行的流应用服务也需要监控及集成到一些基础设施资源管理服务中，例如一个组件的监控服务及日志服务等。监控服务有助于预测问题并提前做出反应，日志服务提供日志记录能够帮助追踪、调查、分析故障发生的根本原因。最后，便捷易用的访问控制应用服务运行的接口也是Flink的一个重要的亮点特征。</p>
<p>Flink与许多常见的日志记录和监视服务集成得很好，并提供了一个REST API来控制应用服务和查询应用信息。具体表现如下：</p>
<ul>
<li><strong>Web UI方式</strong> : Flink提供了一个web UI来观察、监视和调试正在运行的应用服务。并且还可以执行或取消组件或任务的执行。</li>
<li><strong>日志集成服务</strong> :Flink实现了流行的slf4j日志接口，并与日志框架<a href="https://logging.apache.org/log4j/2.x/">log4j</a>或<a href="https://logback.qos.ch/">logback</a>集成。</li>
<li><strong>指标服务</strong> : Flink提供了一个复杂的度量系统来收集和报告系统和用户定义的度量指标信息。度量信息可以导出到多个报表组件服务，包括 <a href="https://en.wikipedia.org/wiki/Java_Management_Extensions">JMX</a>, Ganglia, <a href="https://graphiteapp.org/">Graphite</a>, <a href="https://prometheus.io/">Prometheus</a>, <a href="https://github.com/etsy/statsd">StatsD</a>, <a href="https://www.datadoghq.com/">Datadog</a>, 和 <a href="https://www.slf4j.org/">Slf4j</a>.</li>
<li><strong>标准的WEB REST API接口服务</strong> : Flink提供多种REST API接口，有提交新应用程序、获取正在运行的应用程序的Savepoint服务信息、取消应用服务等接口。REST API还提供元数据信息和已采集的运行中或完成后的应用服务的指标信息。</li>
</ul>
<h2 id="flink优点"><a href="#flink优点" class="headerlink" title="flink优点"></a>flink优点</h2><p>处理流式数据</p>
<p>事件驱动</p>
<p>低延迟</p>
<p>高吞吐</p>
<p>准确性，以及容错性</p>
<p>支持精准一次</p>
<p>应用：</p>
<p>数据源 -&gt; etl -&gt; 数仓 -&gt; flink -&gt; 报表业务等</p>
<h2 id="flink解析"><a href="#flink解析" class="headerlink" title="flink解析"></a>flink解析</h2><p>state ： 存储在内存中的数据 ，内存的数据响应快 ，但是不稳定</p>
<p>checkpoint ： 备份checkpoint ，当机器出现故障的时候可以恢复数据 -&gt; 会周期行进行保存</p>
<p>对于数据的准确性：以lambad为例</p>
<p>通过两个系统（lambad系统,sparkStreaming）</p>
<ul>
<li>流式处理 -&gt; 实现快速</li>
<li>批处理 -&gt; 保证顺序</li>
</ul>
<p>先把数据通过流式处理进行数据处理，然后设定一定时间或者一定的数据量，当达到一定时间的时候或者数据量达到一定程度，再进行往下通过批处理发送，保证结果的顺序</p>
<p>衍生出flink</p>
<p>storm第一代</p>
<p>lambda第二代</p>
<p>flink第三代 -&gt; 集成上面所有的</p>
<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>sparkStreaming：</p>
<p> 采用RDD 实际上就是一组小数据的集合RDD</p>
<p>flink：</p>
<p>基本就是数据流 ，以event序列</p>
<h3 id="运行时架构"><a href="#运行时架构" class="headerlink" title="运行时架构"></a>运行时架构</h3><p>spark是批计算，将DAG划分为不同的stage，一个完成才开始下一个</p>
<p>flink是标准的流执行，一个事件再一个节点处理完后可以直接发送到下一个节点</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>jobmanager ：针对整个job的 &#x3D;》 driver &#x3D;》 会在启动的机器上  &#x3D;》 其会和taskmanager进行通信，默认通信端口是 6123</p>
<p>rpc.address : 启动的机器，在配置文件里设置的</p>
<p>rpc.port : 通信端口</p>
<p>heap.size : 堆的内存 jvm中</p>
<p>process.size : taskmanager 的占用的内存，包括jvm以及堆外内存 默认开启</p>
<p>flink.size : task占用的内存，包括一些状态什么的 process.size 包含flink.size</p>
<p>numberTaskSlots: 一个任务在几个Solt上执行</p>
<p>parallelism：并行度 这个参数和上面的不一样，这个是运行的时候来的，上一个是直接给你分，不是在运行的时候的</p>
<p>taskmanager ： 针对job下的一个task的 &#x3D;》 worker</p>
<h2 id="搭建flink项目"><a href="#搭建flink项目" class="headerlink" title="搭建flink项目"></a>搭建flink项目</h2><p>在idea里</p>
<p>pom</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line">   <span class="section">&lt;dependency&gt;</span></span><br><span class="line">  <span class="section">&lt;groupId&gt;</span><span class="attribute">org</span>.apache.flink&lt;/groupId&gt;</span><br><span class="line">  <span class="section">&lt;artifactId&gt;</span><span class="attribute">flink</span>-scala_2.<span class="number">12</span>&lt;/artifactId&gt;</span><br><span class="line">  <span class="section">&lt;version&gt;</span><span class="attribute">1</span>.<span class="number">13</span>.<span class="number">6</span>&lt;/version&gt;</span><br><span class="line"><span class="section">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">&lt;dependency&gt;</span></span><br><span class="line">  <span class="section">&lt;groupId&gt;</span><span class="attribute">org</span>.apache.flink&lt;/groupId&gt;</span><br><span class="line">  <span class="section">&lt;artifactId&gt;</span><span class="attribute">flink</span>-streaming-scala_2.<span class="number">12</span>&lt;/artifactId&gt;</span><br><span class="line">  <span class="section">&lt;version&gt;</span><span class="attribute">1</span>.<span class="number">13</span>.<span class="number">6</span>&lt;/version&gt;</span><br><span class="line"><span class="section">&lt;/dependency&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight roboconf"><table><tr><td class="code"><pre><span class="line">package flinklearn</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.scala.ExecutionEnvironment</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">object frist &#123;</span><br><span class="line">  <span class="attribute">def apply()</span>: frist = new frist()</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">   // frist()<span class="variable">.piwc</span>()</span><br><span class="line">    frist()<span class="variable">.Streamwc</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class frist() &#123;</span><br><span class="line"></span><br><span class="line">  //创建批处理执行环境类比sparksession</span><br><span class="line">  val pienvironment =org<span class="variable">.apache</span><span class="variable">.flink</span><span class="variable">.api</span><span class="variable">.scala</span><span class="variable">.ExecutionEnvironment</span><span class="variable">.getExecutionEnvironment</span></span><br><span class="line">  val streamingenv= org<span class="variable">.apache</span><span class="variable">.flink</span><span class="variable">.streaming</span><span class="variable">.api</span><span class="variable">.scala</span><span class="variable">.StreamExecutionEnvironment</span><span class="variable">.getExecutionEnvironment</span></span><br><span class="line"></span><br><span class="line">  // 批处理wc</span><br><span class="line">  def piwc()=&#123;</span><br><span class="line"></span><br><span class="line">    import org<span class="variable">.apache</span><span class="variable">.flink</span><span class="variable">.api</span><span class="variable">.scala</span><span class="variable">._</span></span><br><span class="line">    // 从文件中取数据</span><br><span class="line">    val path = &quot;F:\\bigdatajava\\src\\main\\resources\\wc<span class="variable">.data</span>&quot;</span><br><span class="line">    val value = pienvironment<span class="variable">.readTextFile</span>(path)</span><br><span class="line"></span><br><span class="line">    // 对数据进行转换处理</span><br><span class="line">    val resultds:DataSet[(String,Int)] = value<span class="variable">.flatMap</span>(_<span class="variable">.split</span>(&quot;,&quot;))<span class="variable">.map</span>((_,1))<span class="variable">.groupBy</span>(0)<span class="variable">.sum</span>(1)</span><br><span class="line">    resultds<span class="variable">.print</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 流处理wc</span><br><span class="line">  def Streamwc() = &#123;</span><br><span class="line"></span><br><span class="line">    import org<span class="variable">.apache</span><span class="variable">.flink</span><span class="variable">.streaming</span><span class="variable">.api</span><span class="variable">.scala</span><span class="variable">._</span></span><br><span class="line"></span><br><span class="line">    // 设置并行度 -&gt; 界面的数字就是并行度，10&gt; (flume,2) 前面的数字就是哪一个任务的id -&gt; 是根据hash值进行分的 -&gt; 默认是电脑的最大配置</span><br><span class="line">    // 下面是全局设置</span><br><span class="line">    // 还可按照每个算子后面设置</span><br><span class="line">    // 因为每个算子都算一个单独的任务</span><br><span class="line">    // val value1 = value<span class="variable">.flatMap</span>(_<span class="variable">.split</span>(&quot;,&quot;))<span class="variable">.filter</span>(_<span class="variable">.nonEmpty</span>)<span class="variable">.setParallelism</span>(3)<span class="variable">.map</span>((_, 1))<span class="variable">.keyBy</span>(0)<span class="variable">.sum</span>(1)<span class="variable">.setParallelism</span>(1)</span><br><span class="line">    streamingenv<span class="variable">.setParallelism</span>(1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 接受一个socket文本流</span><br><span class="line">    val value = streamingenv<span class="variable">.socketTextStream</span>(&quot;bigdata3&quot;,8888)</span><br><span class="line"></span><br><span class="line">    val value1 = value<span class="variable">.flatMap</span>(_<span class="variable">.split</span>(&quot;,&quot;))<span class="variable">.filter</span>(_<span class="variable">.nonEmpty</span>)<span class="variable">.map</span>((_, 1))<span class="variable">.keyBy</span>(0)<span class="variable">.sum</span>(1)</span><br><span class="line"></span><br><span class="line">    value1<span class="variable">.print</span>()<span class="variable">.setParallelism</span>(1)</span><br><span class="line"></span><br><span class="line">    // 启动任务执行</span><br><span class="line">    streamingenv<span class="variable">.execute</span>(&quot;first&quot;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="部署flink并运行"><a href="#部署flink并运行" class="headerlink" title="部署flink并运行"></a>部署flink并运行</h2><p>先下载flink的包，我用的scala是2.12的所以下的是flink_scala_2.12的</p>
<p>根据自己的版本选择</p>
<p>地址：<a href="https://archive.apache.org/dist/flink">flink</a></p>
<p>下载完成上传到服务器</p>
<p>然后解压 -&gt; 设置环境变量 -&gt; 进入到flink的conf文件夹，编辑 flink-conf.yaml 文件 把参数 <code>jobmanager.rpc.address:</code>设置成主节点，然后按照需求是不是开启高可用，以及设置检查点的文件夹（如果文件夹放在hdfs上，则flink要两个依赖包，flink自己没有的分别是 <code>flink-shaded-hadoop-3-uber-3.1.1.7.2.9.0-173-9.0.jar</code>以及 <code>commons-cli-1.5.0.jar</code>）可以区<a href="https://mvnrepository.com/">maven官网</a>下载，然后放到flink&#x2F;lib下，这两个jar包要按照自己hadoop的版本进行下载</p>
<p>-&gt;然后再编辑workers -&gt; 添加上子节点的名字 -&gt; 分发到各个机器上</p>
<p>然后再主节点启动start-cluster.sh</p>
<p>就成功了 访问 <code>主节点:8081</code></p>
<p>就可以访问flink的web页面</p>
<p>编写启动脚本如下：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">case $<span class="number">1</span> in </span><br><span class="line"><span class="string">&quot;start&quot;</span>)</span><br><span class="line">ssh <span class="keyword">bigdata5 </span><span class="string">&quot;/home/hadoop/app/flink/bin/start-cluster.sh&quot;</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="string">&quot;stop&quot;</span>)</span><br><span class="line">ssh <span class="keyword">bigdata5 </span><span class="string">&quot;/home/hadoop/app/flink/bin/stop-cluster.sh&quot;</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line"><span class="string">&quot;status&quot;</span>)</span><br><span class="line">echo <span class="string">&quot;web ui : bigdata5:8081&quot;</span></span><br><span class="line"><span class="keyword">jps| </span>grep TaskManagerRunner</span><br><span class="line">ssh <span class="keyword">bigdata4 </span><span class="string">&quot;jps| grep TaskManagerRunner&quot;</span></span><br><span class="line">ssh <span class="keyword">bigdata5 </span><span class="string">&quot;jps| grep StandaloneSessionClusterEntrypoint&quot;</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line">*)</span><br><span class="line">echo <span class="string">&quot;error input you should use by start|stop|status&quot;</span></span><br><span class="line"><span class="comment">;;</span></span><br><span class="line">esac</span><br></pre></td></tr></table></figure>

<p>把上述scala代码打包成jar包</p>
<h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><p>上传到服务器的web界面如下</p>
<p><img src="https://pic.imgdb.cn/item/63ddd0414757feff338bbb5c.jpg" alt="img">然后设置运行主类，以及并行度，参数，checkpoint点就好</p>
<p>如果上述没有放置两个jar包，则是无法执行再hdfs上设置checkpoint文件夹的</p>
<p>上述的代码执行之后输出在哪里呢？</p>
<p>他会输出在task manager里，至于具体在哪个里，应该点击输出任务</p>
<p>如下：</p>
<p><img src="https://pic.imgdb.cn/item/63ddd2334757feff338eaa2e.jpg" alt="img"></p>
<p>然后在web界面上点击task-manager -&gt; 点击相应机器 -&gt; 点击Stdout 就会看见控制台信息了</p>
<p>这就是web部署成功了</p>
<p>然后停止如下：</p>
<p><img src="https://pic.imgdb.cn/item/63ddd30c4757feff338fe87d.jpg"></p>
<h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>执行：<code>flink run -m bigdata5:8081 -c flinklearn.frist -p 2 ./bigdatajava-1.0-SNAPSHOT.jar</code></p>
<p>就可以了，参数以及checkpoint可以加载后面，如果不设置，就走默认的</p>
<p>因为对于sockt文本流他的并行度就是1，所以外面无法改变</p>
<p>如下：</p>
<p><img src="https://pic.imgdb.cn/item/63ddd5304757feff339342a7.jpg"></p>
<p>经过ctrl + c 或者其他操作之后，这个作业并不会停掉</p>
<p>通过 <code>flink list 9723a168e896e048b777473cb871e10a</code>后面的是job的id，其实知识为了更精准一下，这个参数是可选的</p>
<p>还可以接-a 代表查看所有的</p>
<p>通过 <code>flink cancel jobid</code>就可以对只定的jobid进行停止</p>
<p>如下 ：<br><img src="https://pic.imgdb.cn/item/63ddd64f4757feff3394d986.jpg"></p>
<h2 id="部署模式"><a href="#部署模式" class="headerlink" title="部署模式"></a>部署模式</h2><p>flink为我们的不同场景设置了不同的模式</p>
<ul>
<li>会话模式</li>
<li>单作业模式</li>
<li>应用模式</li>
</ul>
<h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><p>先启动集群，然后其他的进行提交作业，就是我们上述的模式</p>
<p>优点：相当于集群先启动，索要的资源已经固定好了，集群的生命周期高于任何的job，不和job的结束而改变</p>
<p>缺点：资源不够的时候会出问题</p>
<p>和另外的资源管理平台结合用</p>
<h3 id="单作业"><a href="#单作业" class="headerlink" title="单作业"></a>单作业</h3><p>每个作业都启动一个flink集群，就不会出现上述资源不够的问题</p>
<p>就是按照把资源按照作业来划分</p>
<p>相当于container</p>
<p>一般的时候是首选的，但是flink本身是没有办法用单作业的</p>
<p>他要借助别人的容器化的管理机制-&gt; yarn&#x2F; k8s</p>
<h3 id="应用模式"><a href="#应用模式" class="headerlink" title="应用模式"></a>应用模式</h3><p>上述两种是都先在客户端进行执行的，然后再发送给jobmanager，但是会占用网络带宽，</p>
<p>而且对于单作业模式的情况很可能会在客户端拆分成好几个作业，任何根据他每个作业就启动一个集群的说法，会造成大量的资源浪费</p>
<p>然后我们直接把作业发送到jobmanager上直接由他做处理，就是应用模式</p>
<p>和单作业很像</p>
<p>单作业是作业和集群一对一</p>
<p>应用是应用和集群一对一</p>
<h2 id="独立模式"><a href="#独立模式" class="headerlink" title="独立模式"></a>独立模式</h2><p>不依赖任何外部资源管理平台</p>
<p>最基本，也是最简单的</p>
<p>在实际项目中使用会比较少</p>
<p>因为对资源的管理有要求</p>
<p>再独立模式的时候，没有单作业的，因为必须要外部平台</p>
<p>应用模式 -&gt; 可以 但是使用少</p>
<p>首先把要运行的jar包放在flink的lib文件夹下</p>
<p>然后执行 <code>standalone-job.sh start --job-classname flinklearn.frist</code>因为flink会默认扫描lib包下的所有的jar包所以这里指定入口就好</p>
<p>然后 执行 <code>taskmanager.sh start</code></p>
<p>停掉集群：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">standlone-job.<span class="keyword">sh</span> <span class="keyword">stop</span></span><br><span class="line"></span><br><span class="line">taskmanager.<span class="keyword">sh</span> <span class="keyword">stop</span></span><br></pre></td></tr></table></figure>

<h2 id="yarn模式"><a href="#yarn模式" class="headerlink" title="yarn模式"></a>yarn模式</h2><p>客户端先把flink的一个应用提交到yarn上</p>
<p>yarn他的resourcemanager会向nodemanager申请容器 ?</p>
<p>在这些容器上flink会部署他的作业flink会根据作业所要的sloat的数量进行动态分配taskmanager的资源</p>
<p>hadoop至少是2.2及其以上</p>
<p>flink在1.8之前hadoop的版本和正常的版本是分开的，就是人家给了你两套</p>
<p>但是1.8-1.11我们要下载的仅仅只是hadoop的插件</p>
<p>但是1.11之后就更不用下载hadoop的插件了，我们主要就进行环境变量的配置就好了</p>
<p>要配置</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">HADOOP_HOME</span>=/home/hadoop/app/hadoop</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">HADOOP_CONF_DIR</span>=<span class="variable">$&#123;HADOOP_HOME&#125;</span>/etc/hadoop</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">HADOOP_CLASSPATH</span>=`hadoop classpath`</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$&#123;HADOOP_HOME&#125;</span>/bin:$&#123;HADOOP_HOME&#125;/sbin:<span class="variable">$PATH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>就好</p>
<p>然后要创建一个Yarnsession</p>
<p>在flink的主节点下用 <code>yarn-session.sh -nm name</code>就能关联上yarn</p>
<p>如下</p>
<p><img src="https://pic.imgdb.cn/item/63dde0144757feff33a46f1b.jpg"></p>
<p>但是仅仅这样启动的集群他的web界面查看后发现插槽是0，如下</p>
<p><img src="https://pic.imgdb.cn/item/63dde0a24757feff33a54533.jpg"></p>
<p>这是因为我们启动的是yarn的模式的应用模式</p>
<p>当我们关掉它的时候yarnsession就会关掉了，我们可以加如下参数对它进行控制</p>
<p>-d ： 分离模式 ，前台关掉，后面不会把yarnsession关掉</p>
<p>-jm ： 配置jobmanager索要的内存 默认单位 MB</p>
<p>-nm : 配置名字</p>
<p>-qu :  指定yarn的队列名字</p>
<p>-tm:  配置每个taskmanager的内存</p>
<p>注意：flink 从1.11之后就不再使用 -s和-n 指定插槽数量以及taskmanager的数量了，yarn会动态的进行分配的</p>
<p>然后用户还是可以通过web和命令行两种进行提交作业和上述standlone的时候是一样的</p>
<p>其实上述就是很简单的会话模式</p>
<h3 id="单作业-1"><a href="#单作业-1" class="headerlink" title="单作业"></a>单作业</h3><p>在yarn模式的时候由于有了外部资源管理平台，就可以进行单作业模式了</p>
<p>执行 <code>flink run -d -t yarn-per-job -c flinklearn.frist jar包的绝对路径</code></p>
<p>-d : 就是分离模式</p>
<p>-t ：是指定yarn模式的模式 <code>yarn-per-job</code> 就是单作业</p>
<p>-c ： 是class入口</p>
<p>后面还可以接参数等等</p>
<p>早期还有一种把 -t  pre-yarn-job 用 -m yarn-cluster 代替的写法</p>
<h3 id="应用模式-1"><a href="#应用模式-1" class="headerlink" title="应用模式"></a>应用模式</h3><p>和单作业模式很像，就是运行的参数不同</p>
<p><code>flink run-application -t yarn-application -c ....</code></p>
<p>查看作业</p>
<p><code>flink list -t yarn-application -Dyarn.application.id = ....</code></p>
<p>取消作业</p>
<p><code>flink cancel -t yarn-application -Dyarn.application.id = ....</code></p>
<p>还可以通过yarn.provided.lib.dirs配置选项指定位置 ，把jar上传到远程</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">flink run-application -t yarn-application -Dyarn.provided.lib.dirs=<span class="string">&quot;hdfs://bigdata3:9000/tmp/flinktmp&quot;</span> hdfs:<span class="regexp">//</span>bigdata3:<span class="number">9000</span><span class="regexp">/tmp/</span>flinktmp</span><br></pre></td></tr></table></figure>

<p>上传到hdfs上运行</p>
<h2 id="flink运行时的架构"><a href="#flink运行时的架构" class="headerlink" title="flink运行时的架构"></a>flink运行时的架构</h2><h3 id="flink系统架构"><a href="#flink系统架构" class="headerlink" title="flink系统架构"></a>flink系统架构</h3><p>作业管理器（jobmanager）</p>
<p>是flink集群中的任务管理中心以及调度中心</p>
<p>最核心的组件，负责单独处理job</p>
<p>在作业提交的时候jobmaster会先接受到要执行的应用，一般是客户端提交的，包括：jar，数据流图，作业图</p>
<p>jobmaster会把jobGraph转换成一个物理层面的数据流图，这个图被叫做执行图（ExecutionGraph），它包含了所有可以并发的任务，jobMaster会向资源管理器（ResourceManager）发送请求，申请执行任务必要的资源，一旦它获取了足够的资源，就会将执行图分别发到他们真正运行的TaskManager上</p>
<p>在运行过程中jobmaster会负责监控指标以及调度，比如说检查点的协调</p>
<p>资源管理器（resourcemanager）</p>
<p>在一个flink集群里只有一个，负责分配资源，所谓资源其实主要是taskmanager的任务槽（slot），任务槽就是flink集群中的资源调度单位，包含机器用来计算的我cpu和内存资源，每一个任务都要分配到一个solt上，主要是内存分开</p>
<p>分发器（Dispatcher）</p>
<p>他主要是负责提供一个rest接口，用来提交应用的，并且为每一个新提交的作业启动一个新的jobMaster组件，Diapatcher也会启动一个web UI 用来方便和展示监控作业的信息，Diapatcher在架构中并不是必须的在不同的模式种可能会被忽略</p>
<p>任务管理器（taskmanager）</p>
<p>flink种的worker</p>
<p>每一个taskmanager包含了一定的solt</p>
<p>插槽的数量限制了并行度 ： 设置并行度的优先级 代码最高 其次是命令 其次是配置文件</p>
<p>启动之后taskmanager 会将一个或者多个插槽提供给jobmaster调用，jobmaster就可以向插槽分配任务来执行</p>
<p>执行过程中，一个taskManager可以和其他的与运行同一job的taskmanager来交互数据</p>
<p>一些执行流程图如下：<br><img src="https://pic.imgdb.cn/item/63ddf0284757feff33bd9e11.jpg"></p>
<p><img src="https://pic.imgdb.cn/item/63ddf0414757feff33bdc9a6.jpg"></p>
<p><img src="https://pic.imgdb.cn/item/63ddf0564757feff33bdead7.jpg"></p>
<p><img src="https://pic.imgdb.cn/item/63ddf06d4757feff33be0cab.jpg"></p>
<p><img src="https://pic.imgdb.cn/item/63ddf0944757feff33be4b31.jpg"></p>
<h2 id="flink的细节"><a href="#flink的细节" class="headerlink" title="flink的细节"></a>flink的细节</h2><h3 id="程序和数据流："><a href="#程序和数据流：" class="headerlink" title="程序和数据流："></a>程序和数据流：</h3><p>所有的flink程序都是要由三部分组成的 source transform sink</p>
<p>在运行flink项目的时候flink的程序会被映射成逻辑数据流（dataflow），它包含了三个部分 ，每一个dataflow都以一个或者多个source开始，以一个或者多个sink结束，其类似有向无环图（DAG）</p>
<p>大部分情况，程序中的转换操作（transform）和dataflow的算子（operation）是一一对应的关系</p>
<h3 id="并行度"><a href="#并行度" class="headerlink" title="并行度"></a>并行度</h3><p>每一个算子可以包含多个或者一个子任务 ，这些子任务在不同的线程，不同的物理机，不同的容器中是完全独立的</p>
<p>一个特定的算子的子任务的个数就被称为并行度</p>
<p>任务并行：就是相当于多个线程<br>数据并行：同一个算子可以茶城多分町是处理多份数据</p>
<p>例子：suorce的时候如何设置多并行?</p>
<p>它是把数据源进行复制，如何让每一个线程去处理不同数据最后再合到一起</p>
<h3 id="数据传输形式"><a href="#数据传输形式" class="headerlink" title="数据传输形式"></a>数据传输形式</h3><p>一个程序之间不同的算子可能有不同的并行度</p>
<p>算子之间的传输数据的形式可以是one-to-one也可以是redistributing的模式具体是什么取决于算子的种类</p>
<p>one-to-one:streaming维护着分区的顺序以及元素的顺序（比如source以及map之间）这意味着元素的个数顺序相同，map,filiter,flatMap,等算子，都是one-to-one的</p>
<p>Redistributing:指分区数量可能会发生改变，每一个算子，的子任务依据所选择的transform发送数据到不同的目标任务</p>
<p>例如：keyBy基于hashcode重新分区，而broadcast和rebalance会随即重新分区，这些算子都是引起redistributing的而这个过程就相当于spar中的shuffle</p>
<p>于是就诞生了算子链</p>
<p>flink使用一种称为任务链的优化技术，减少通信的开销，为了满足任务链的需求，将两个或者多个算子设为相同的并行度，通过本地转发（local forward）的放式进行链接</p>
<p>相同并行度的one-to-one操作，flink放在一起，链接形成一个task，并行度相同，并且是one-to-one操作，两个条件缺一不可</p>
<h3 id="执行图"><a href="#执行图" class="headerlink" title="执行图"></a>执行图</h3><p>flink中的执行图可以分为StreamingGraph -&gt; jobGraph -&gt; ExcutionGraph -&gt; 物理执行图</p>
<ul>
<li>StreamingGraph：是根据用户的api自动生成的最初的图用来表明程序的拓扑结构</li>
<li>jobGraph：上面一个经过优化，提交给jobmanager的数据结构，将多个符合条件的节点chain到一起作为一个节点</li>
<li>ExcutionGraph ： jobmanager 根据jobGraph生成的并行化版本，是调度曾的核心的数据结构</li>
<li>物理执行图：在各个taskmanager上的，就是告诉他们怎么做的，是部署到taskmanager上的，不是一个数据结构</li>
</ul>
<p>如下：</p>
<p><img src="https://pic.imgdb.cn/item/63ddfdf24757feff33d5175f.jpg"></p>
<p><img src="https://pic.imgdb.cn/item/63ddfe204757feff33d56469.jpg"></p>
<p><img src="https://pic.imgdb.cn/item/63ddfe3a4757feff33d59272.jpg"></p>
<h3 id="任务和任务槽"><a href="#任务和任务槽" class="headerlink" title="任务和任务槽"></a>任务和任务槽</h3><p>flink中每一个taskmanager就相当于是一个进程，他会在独立的线程上执行一个或者多个子任务</p>
<p>为了控制taskmanager能接收多少个task，Taskmanager通过task solt来进行控制 ，（一个taskmanager最少有一个slot）</p>
<p>slot最主要的作用就是隔离内存，因为cpu是没有办法真正隔离开的</p>
<p>flink里默认是允许子任务进行共享slot的，简单来说就是一个slot可以作为我们保存作业的整个管道</p>
<p>当我们将资源密集型和资源非密集型的任务放到一个slot中，他们就可以自行分配对资源占用的比例，从而保证最重的活平均分配给所有的taskmanager</p>
<p>slot和并行度</p>
<p>solt：静态概念：是指taskmanager具有的并发的执行的能力</p>
<p>通过参数taskmanager.numberOfTaskSlot进行配置</p>
<p>并行度：动态概念，就是真正所用到的并发能力</p>
<p>通过参数：parallelism.default进行设置</p>
<p>简单来说就是我可以拿起多沉的东西，但是我不用那么大的力气</p>
<h3 id="flink控制任务调度（代码）"><a href="#flink控制任务调度（代码）" class="headerlink" title="flink控制任务调度（代码）"></a>flink控制任务调度（代码）</h3><p>可以禁用算子链</p>
<p>通过 <code>xxx.disableChaining()</code></p>
<p>可以实现一个slot单独给一个算子用，同时也不能把他纳入任何一条算子链</p>
<p>还可以用 <code>xxx.startNewChain()</code></p>
<p>可以实现从xxx开始一个新的算子链，不管前面如何都要分开</p>
<p>还可以设置slot共享组</p>
<p>就是在一个共享组里的slot才可以共享slot</p>
<p>不在一个共享组里的slot他们必须分开</p>
<p>通过 <code>xxx.slotSharingGroup(String)</code>实现 代表后面的算子默认情况下就是在String所在的共享组</p>
<h1 id="DataStreamAPI"><a href="#DataStreamAPI" class="headerlink" title="DataStreamAPI"></a>DataStreamAPI</h1><p>对于以后的apiDatasetapi即将被弃用</p>
<p>所以我们用datasetapi</p>
<p>可以把DS堪称一种比较特殊的java集合类型</p>
<p>比如一个socket文本流底层就是DataStream</p>
<p>如果想调用DS的api要进行先创建环境</p>
<h2 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h2><h3 id="getExecutionEnvironment"><a href="#getExecutionEnvironment" class="headerlink" title="getExecutionEnvironment"></a>getExecutionEnvironment</h3><p>它是相当于把下面两种放在一起了，自动判断</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">val pienvironment =org<span class="selector-class">.apache</span><span class="selector-class">.flink</span><span class="selector-class">.api</span><span class="selector-class">.scala</span><span class="selector-class">.ExecutionEnvironment</span><span class="selector-class">.getExecutionEnvironment</span></span><br><span class="line">val streamingenv= org<span class="selector-class">.apache</span><span class="selector-class">.flink</span><span class="selector-class">.streaming</span><span class="selector-class">.api</span><span class="selector-class">.scala</span><span class="selector-class">.StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br></pre></td></tr></table></figure>

<p>上述的getExecutionEnvironment方法是很智能的，它会自动识别我们是在本地调试还是在集群中调试，它会自动进行转换</p>
<h3 id="createLocalEnvironment"><a href="#createLocalEnvironment" class="headerlink" title="createLocalEnvironment"></a>createLocalEnvironment</h3><p>是创建一个本地的环境，在调用的时候可以传入一个参数指定默认的并行度，如果不传入默认就是当前电脑的cpu核心数量</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">private val environment: StreamExecutionEnvironment = org<span class="selector-class">.apache</span><span class="selector-class">.flink</span><span class="selector-class">.streaming</span><span class="selector-class">.api</span><span class="selector-class">.scala</span><span class="selector-class">.StreamExecutionEnvironment</span><span class="selector-class">.createLocalEnvironment</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="createRemoteEnvironment"><a href="#createRemoteEnvironment" class="headerlink" title="createRemoteEnvironment"></a>createRemoteEnvironment</h3><p>调用远程的执行环境</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">private val environment: StreamExecutionEnvironment = org<span class="selector-class">.apache</span><span class="selector-class">.flink</span><span class="selector-class">.streaming</span><span class="selector-class">.api</span><span class="selector-class">.scala</span><span class="selector-class">.StreamExecutionEnvironment</span><span class="selector-class">.createRemoteEnvironment</span>(<span class="string">&quot;bigdata5&quot;</span>,<span class="number">8081</span>,<span class="number">1</span>,<span class="string">&quot;jar包的路径&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>它底层是这样定义的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">def <span class="title function_ invoke__">createRemoteEnvironment</span>(</span><br><span class="line">      <span class="attr">host</span>: String,</span><br><span class="line">      <span class="attr">port</span>: Int,</span><br><span class="line">      <span class="attr">parallelism</span>: Int,</span><br><span class="line">      <span class="attr">jarFiles</span>: String*): StreamExecutionEnvironment = &#123;</span><br><span class="line"></span><br><span class="line">    val javaEnv = JavaEnv.<span class="title function_ invoke__">createRemoteEnvironment</span>(host, port, <span class="attr">jarFiles</span>: _*)</span><br><span class="line">    javaEnv.<span class="title function_ invoke__">setParallelism</span>(parallelism)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">StreamExecutionEnvironment</span>(javaEnv)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="执行模式"><a href="#执行模式" class="headerlink" title="执行模式"></a>执行模式</h2><p>经过上面获取的环境，我们就可以开始对其设置执行模式</p>
<p>在早期的代码中它把批处理和流处理分开了</p>
<p>通过代码</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">val pienvironment =org<span class="selector-class">.apache</span><span class="selector-class">.flink</span><span class="selector-class">.api</span><span class="selector-class">.scala</span><span class="selector-class">.ExecutionEnvironment</span><span class="selector-class">.getExecutionEnvironment</span></span><br><span class="line">val streamingenv= org<span class="selector-class">.apache</span><span class="selector-class">.flink</span><span class="selector-class">.streaming</span><span class="selector-class">.api</span><span class="selector-class">.scala</span><span class="selector-class">.StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br></pre></td></tr></table></figure>

<p>这样的方式</p>
<p>上面一个是批处理的</p>
<p>下面一个是流处理的</p>
<p>他们的api是基本相同的，但是包不同</p>
<p>但是现在的做法是直接用下面的那个</p>
<p>对于批处理而言：我们只要在提交的时候通过命令</p>
<p><code>flink run -Dexecution.runtime-mode=BATCH 。。。。</code></p>
<p>就可以证明他是批处理的</p>
<p>如果不处理上述的参数默认是STREAMING ：就是流处理的格式</p>
<p>或者在代码的时候直接通过</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">val streamingenv= org<span class="selector-class">.apache</span><span class="selector-class">.flink</span><span class="selector-class">.streaming</span><span class="selector-class">.api</span><span class="selector-class">.scala</span><span class="selector-class">.StreamExecutionEnvironment</span><span class="selector-class">.getExecutionEnvironment</span></span><br><span class="line"> streamingenv<span class="selector-class">.setRuntimeMode</span>(RuntimeExecutionMode.AUTOMATIC)</span><br><span class="line">streamingenv<span class="selector-class">.setRuntimeMode</span>(RuntimeExecutionMode.BATCH)</span><br><span class="line">streamingenv<span class="selector-class">.setRuntimeMode</span>(RuntimeExecutionMode.STREAMING)</span><br></pre></td></tr></table></figure>

<p>里面传入相应的参数即可</p>
<p>但是一般不推荐这样做，因为这相当于固定死了，直接当命令行参数传递更好一点</p>
<p>在flink中批处理数据被划分到有界流中了，为什么还要批处理模式？</p>
<p>因为性能问题，流处理是来一条数据我处理一个数据，然后发送一条，批处理是来一堆数据我处理，如何再一起发送</p>
<p>对于批处理数据，它来的时候就是一堆来的，然后流处理的时候要一条一条发送，发送的次数多了，而对于批处理，我只用处理，然后一次发过去，就好了</p>
<p>这就是批处理还在flink中的原因</p>
<p>我们的flink代码是懒执行的，和懒加载是一个道理的，只有通过excute才开张真正的执行</p>
<h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>源算子：就是读取数据源的算子</p>
<h3 id="有界数据"><a href="#有界数据" class="headerlink" title="有界数据"></a>有界数据</h3><p>读取有界数据的简单的测试方法</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"> val streamingenv= org<span class="selector-class">.apache</span><span class="selector-class">.flink</span><span class="selector-class">.streaming</span><span class="selector-class">.api</span><span class="selector-class">.scala</span><span class="selector-class">.StreamExecutionEnvironment</span><span class="selector-class">.getExecutionEnvironment</span></span><br><span class="line"></span><br><span class="line"> case class <span class="built_in">event</span>(uaer:String,url:String,timestamp:Long)</span><br><span class="line"></span><br><span class="line">streamingenv<span class="selector-class">.setParallelism</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 从元素中读取数据</span></span><br><span class="line">    streamingenv<span class="selector-class">.fromElements</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">65</span>,<span class="number">67</span>,<span class="number">7</span>,<span class="number">7</span>)<span class="selector-class">.print</span>(<span class="string">&quot;from elem&quot;</span>)</span><br><span class="line">    streamingenv<span class="selector-class">.fromElements</span>(</span><br><span class="line">      <span class="built_in">event</span>(<span class="string">&quot;zihan&quot;</span>,<span class="string">&quot;1211&quot;</span>,<span class="number">1111</span>),</span><br><span class="line">      <span class="built_in">event</span>(<span class="string">&quot;bob&quot;</span>,<span class="string">&quot;1333&quot;</span>,<span class="number">22222</span>)</span><br><span class="line">    )<span class="selector-class">.print</span>(<span class="string">&quot;from case class&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个可以从迭代器中读取数据，具体可以ctrl + p 查看</span></span><br><span class="line">    val events = <span class="built_in">List</span>(<span class="built_in">event</span>(<span class="string">&quot;zihan&quot;</span>, <span class="string">&quot;1211&quot;</span>, <span class="number">1111</span>), <span class="built_in">event</span>(<span class="string">&quot;bob&quot;</span>, <span class="string">&quot;1333&quot;</span>, <span class="number">22222</span>))</span><br><span class="line">    streamingenv<span class="selector-class">.fromCollection</span>(events)<span class="selector-class">.print</span>(<span class="string">&quot;from list&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取文本文件</span></span><br><span class="line">    streamingenv<span class="selector-class">.readTextFile</span>(<span class="string">&quot;F:\\bigdatajava\\src\\main\\resources\\wc.data&quot;</span>)<span class="selector-class">.print</span>(<span class="string">&quot;from text&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> elem&gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">from</span> elem&gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">from</span> elem&gt; <span class="number">3</span></span><br><span class="line"><span class="keyword">from</span> elem&gt; <span class="number">4</span></span><br><span class="line"><span class="keyword">from</span> elem&gt; <span class="number">5</span></span><br><span class="line"><span class="keyword">from</span> elem&gt; <span class="number">65</span></span><br><span class="line"><span class="keyword">from</span> elem&gt; <span class="number">67</span></span><br><span class="line"><span class="keyword">from</span> elem&gt; <span class="number">7</span></span><br><span class="line"><span class="keyword">from</span> elem&gt; <span class="number">7</span></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">case</span> <span class="keyword">class</span>&gt; <span class="keyword">event</span>(zihan,<span class="number">1211</span>,<span class="number">1111</span>)</span><br><span class="line"><span class="keyword">from</span> list&gt; <span class="keyword">event</span>(zihan,<span class="number">1211</span>,<span class="number">1111</span>)</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">case</span> <span class="keyword">class</span>&gt; <span class="keyword">event</span>(bob,<span class="number">1333</span>,<span class="number">22222</span>)</span><br><span class="line"><span class="keyword">from</span> list&gt; <span class="keyword">event</span>(bob,<span class="number">1333</span>,<span class="number">22222</span>)</span><br><span class="line">feom <span class="keyword">text</span>&gt; spark,linux，spark,spark</span><br><span class="line">feom <span class="keyword">text</span>&gt; hadoop</span><br><span class="line">feom <span class="keyword">text</span>&gt; linux,hive</span><br><span class="line">feom <span class="keyword">text</span>&gt; flume,flink</span><br><span class="line">feom <span class="keyword">text</span>&gt; gg,dd</span><br><span class="line">feom <span class="keyword">text</span>&gt; ttm,ff</span><br><span class="line">feom <span class="keyword">text</span>&gt; <span class="string">&quot;zihan&quot;</span>,<span class="string">&quot;1211&quot;</span>,<span class="number">1111</span></span><br><span class="line">feom <span class="keyword">text</span>&gt; <span class="string">&quot;bob&quot;</span>,<span class="string">&quot;1333&quot;</span>,<span class="number">22222</span></span><br><span class="line">[WARN ][<span class="number">2023</span>-<span class="number">02</span>-<span class="number">04</span> <span class="number">16</span>:<span class="number">15</span>:<span class="number">57</span>][org.apache.flink.streaming.api.functions.source.ContinuousFileReaderOperator$ReaderState$<span class="number">6</span>.prepareToProcessRecord(ContinuousFileReaderOperator.java:<span class="number">178</span>)]<span class="built_in">not</span> processing any records <span class="keyword">while</span> closed</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> <span class="keyword">exit</span> code <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们还可以把一些数据写进文本文件中然后进行读取</p>
<h3 id="无界数据"><a href="#无界数据" class="headerlink" title="无界数据"></a>无界数据</h3><p>我们一般是从kafka来接受数据的</p>
<p>我们先要引入链接kafka的依赖</p>
<p>如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;dependency&gt;</span></span><br><span class="line">  <span class="section">&lt;groupId&gt;</span><span class="attribute">org</span>.apache.flink&lt;/groupId&gt;</span><br><span class="line">  <span class="section">&lt;artifactId&gt;</span><span class="attribute">flink</span>-connector-kafka_2.<span class="number">12</span>&lt;/artifactId&gt;</span><br><span class="line">  <span class="section">&lt;version&gt;</span><span class="attribute">1</span>.<span class="number">13</span>.<span class="number">6</span>&lt;/version&gt;</span><br><span class="line"><span class="section">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>

<p>值得注意的是这个是官方的，他会自动根据kafka的版本进行更新，目前支持kafka0.10.0版本及以上的</p>
<p>有特殊需要就去找特殊的版本的</p>
<p>而且对于1.14版本之后的时候对我们要引入的方法有了更改从FlinkKafkaConsumer变成KafkaSource</p>
<p>代码如下</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">import org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer</span><br><span class="line">streamingenv.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    // 链接kafka</span><br><span class="line">    val <span class="built_in">properties</span> = <span class="built_in">new</span> Properties()</span><br><span class="line">    <span class="built_in">properties</span>.<span class="built_in">put</span>(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;bigdata3:9092,bigdata4:9092,bigdata5:9092 &quot;</span>)</span><br><span class="line"></span><br><span class="line">    // 注意使用下面的那个方法的时候不用在此设置下面的参数，因为这个FlinkKafkaConsumer[T]里面已经封装好了，而且默认采用的就是精准一次</span><br><span class="line">//    <span class="built_in">properties</span>.<span class="built_in">put</span>(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>)</span><br><span class="line">//    <span class="built_in">properties</span>.<span class="built_in">put</span>(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>)</span><br><span class="line">//    <span class="built_in">properties</span>.<span class="built_in">put</span>(<span class="string">&quot;acks&quot;</span>, <span class="string">&quot;all&quot;</span>)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    传入参数说明FlinkKafkaConsumer[T]</span></span><br><span class="line"><span class="comment">    topic , 反序列化器 ， kafka配置参数</span></span><br><span class="line"><span class="comment">    上面的T是代表把获得的数据当作什么类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    streamingenv.addSource(<span class="built_in">new</span> FlinkKafkaConsumer[String](<span class="string">&quot;dl2262&quot;</span>,<span class="built_in">new</span> SimpleStringSchema(),<span class="built_in">properties</span>)).<span class="built_in">print</span>(<span class="string">&quot;kafka&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="读取自定义数据源"><a href="#读取自定义数据源" class="headerlink" title="读取自定义数据源"></a>读取自定义数据源</h3><p>如下</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">streamingenv.set<span class="constructor">Parallelism(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 自己定义外部数据源</span></span><br><span class="line"><span class="comment"> 实现SourceFunction接口</span></span><br><span class="line"><span class="comment"> 重写两个方法run()和cancel()</span></span><br><span class="line"><span class="comment"> run()获取数据的方法</span></span><br><span class="line"><span class="comment"> cance()控制停止的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">import flinklearn.clickSource</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> stream = streamingenv.add<span class="constructor">Source(<span class="params">new</span> <span class="params">clickSource</span>)</span></span><br><span class="line"></span><br><span class="line">stream.print(<span class="string">&quot;makebyself&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>source方法</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flinklearn</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Calendar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.<span class="type">SourceFunction</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.util.<span class="type">Random</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">clickSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): clickSource = <span class="keyword">new</span> clickSource()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SourceFunction[T]</span></span><br><span class="line"><span class="comment">其中的泛型就是我们对应的返回的数据的类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">clickSource</span> <span class="keyword">extends</span> <span class="title">SourceFunction</span>[event]</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 标志位</span></span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">excute</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(sourceContext: <span class="type">SourceFunction</span>.<span class="type">SourceContext</span>[event]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 随机数生成器</span></span><br><span class="line">    <span class="keyword">val</span> random =<span class="keyword">new</span>  <span class="type">Random</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义选择的范围</span></span><br><span class="line">    <span class="keyword">val</span> user = <span class="type">Array</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> url = <span class="type">Array</span>(<span class="string">&quot;/cat&quot;</span>,<span class="string">&quot;/.dog&quot;</span>,<span class="string">&quot;/info&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用循环不停的发送数据，标志位做为判断题条件，不停的发送数据</span></span><br><span class="line">    <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">      <span class="keyword">val</span> eventtmp = event(user(random.nextInt(<span class="number">2</span>)),url(random.nextInt(<span class="number">2</span>)),<span class="type">Calendar</span>.getInstance().getTimeInMillis)</span><br><span class="line">      <span class="comment">// 调用上下文sourceContext的方法向下游发送数据</span></span><br><span class="line">      sourceContext.collect(eventtmp)</span><br><span class="line">      <span class="comment">// 每隔1s发送一条数据</span></span><br><span class="line">      <span class="type">Thread</span>.sleep(<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">cancel</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    flag = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是对于SourceFunction它本身就是个并行度只能为1的接口</p>
<p>和socket文本流一样</p>
<p>如果想设置多并行度的就要用ParallelSourceFunction这个接口，其使用和上面一样</p>
<h2 id="flink支持的类型"><a href="#flink支持的类型" class="headerlink" title="flink支持的类型"></a>flink支持的类型</h2><p>flink里DS的数据类型都是由他的泛型进行控制的</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> stream:DataStream<span class="literal">[<span class="identifier">event</span>]</span> = streamingenv.add<span class="constructor">Source(<span class="params">new</span> <span class="params">clickSource</span>)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>基本上scala和java里所有的他都支持，但只是基本上，因为flink是分布式的，它再每个节点之间交付数据的时候是要经网络传输的，序列化和反序列化，所以对于一些的数据类型就无法支持</p>
<p>他的底层类型都是封装在TypeInformation和types中的，可以点进去查看</p>
<p>泛型的时候不是由flink进行序列化的，他是由Kyro进行的所以就可能出现问题，要尽可能避免</p>
<h2 id="算子"><a href="#算子" class="headerlink" title="算子"></a>算子</h2><h3 id="转换算子"><a href="#转换算子" class="headerlink" title="转换算子"></a>转换算子</h3><ul>
<li>map</li>
<li>filter</li>
<li>FlatMap</li>
<li>KeyBy:根据key进行聚合里面可以传入字符串，或者数字，或者和map里一样传入一个function</li>
<li>简单聚合方法 -&gt; sum , min ,max 等</li>
<li>reduce：就是和spark里的reducebykey一样</li>
</ul>
<p>调用的时候都是得到DS进行调用</p>
<p>使用如下:</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">    val value: DataStream[<span class="built_in">String</span>] = streamingenv.readTextFile(<span class="string">&quot;F:\\bigdatajava\\src\\main\\resources\\wc.data&quot;</span>)</span><br><span class="line">    value.flatMap(_.split(<span class="string">&quot;,&quot;</span>)).map(<span class="function"><span class="params">(_,<span class="number">1</span>)</span>).keyBy<span class="params">(_._1)</span>.reduce(<span class="params">(x,y)</span>=&gt;</span>&#123;</span><br><span class="line">      (x._1,x._2+y._2)</span><br><span class="line">    &#125;).<span class="built_in">print</span>()</span><br><span class="line">-------------------------------------------数据</span><br><span class="line">spark,linux,spark,spark</span><br><span class="line">hadoop</span><br><span class="line">linux,hive</span><br><span class="line">flume,flink</span><br><span class="line">gg,dd</span><br><span class="line">ttm,ff</span><br><span class="line"><span class="string">&quot;zihan&quot;</span>,<span class="string">&quot;1211&quot;</span>,<span class="number">1111</span></span><br><span class="line"><span class="string">&quot;bob&quot;</span>,<span class="string">&quot;1333&quot;</span>,<span class="number">22222</span></span><br></pre></td></tr></table></figure>

<h3 id="函数类（udf）"><a href="#函数类（udf）" class="headerlink" title="函数类（udf）"></a>函数类（udf）</h3><p>为什么他们里面可以放function</p>
<p>查看底层源码可以看见</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">Public</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="function"><span class="keyword">Function</span></span> <span class="keyword">extends</span> java.io.Serializable &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>他们继承于这个接口，并实现了各自的方法，所以就可以传入Function</p>
<p>进而导出udf是如何实现的</p>
<p>对于flink里的udf我们可以让它继承不同的function，然后再放进去</p>
<p>测试自定义udf的做法</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flinklearn</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.<span class="type">FilterFunction</span></span><br><span class="line"><span class="keyword">import</span> tool._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">udf</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): udf = <span class="keyword">new</span> udf()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    udf().udftest</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">udf</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> streamingcontext = <span class="keyword">new</span> streamingcontext</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">udftest</span> </span>= &#123;</span><br><span class="line">    <span class="keyword">val</span> environment = streamingcontext.getflinkenv()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> testdata = <span class="type">List</span>(</span><br><span class="line">      event(<span class="string">&quot;zihan&quot;</span>, <span class="string">&quot;1211&quot;</span>, <span class="number">1111</span>),</span><br><span class="line">      event(<span class="string">&quot;bob&quot;</span>, <span class="string">&quot;1333&quot;</span>, <span class="number">22222</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> testDS = environment.fromCollection(testdata)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 筛选特定数据</span></span><br><span class="line">    testDS.filter( <span class="keyword">new</span> myfiliterfunction() ).print()</span><br><span class="line">  </span><br><span class="line">    testDS.filter( <span class="keyword">new</span> <span class="type">FilterFunction</span>[event] &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">filter</span></span>(value: event): <span class="type">Boolean</span> = &#123;</span><br><span class="line">        value.uaer.contains(<span class="string">&quot;zihan&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).print()</span><br><span class="line"></span><br><span class="line">    environment.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现自定义的function</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myfiliterfunction</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">FilterFunction</span>[event]</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">filter</span></span>(value: event): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    value.uaer.contains(<span class="string">&quot;zi&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，这里不要引用错包，如果引用错包，就会报错，因为scala和java的api名字是一样的</p>
<h3 id="富函数（udf）"><a href="#富函数（udf）" class="headerlink" title="富函数（udf）"></a>富函数（udf）</h3><p>因为我们上述所说的udf是针对一条数据进行操作的</p>
<p>但是假如我们想对一批数据进行操作，也就是数据来之前对其进行操作怎么办？</p>
<p>我们要通过更加复杂的用户自定义类，是函数类的扩展版本</p>
<p>最大的不同就是富函数类，可以获取运行环境的上下文，以及有生命周期等</p>
<p>富函数类的继承接口是Rich…Fnction</p>
<p>它里面有两个方法：</p>
<ul>
<li>open ： 相当于算子初始化的时候 和spring 里的初始化一样</li>
<li>close ： 结束的时候 和spring里的销毁是一样的</li>
</ul>
<p>如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flinklearn</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.&#123;<span class="type">FilterFunction</span>, <span class="type">RichMapFunction</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.<span class="type">Configuration</span></span><br><span class="line"><span class="keyword">import</span> tool._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">udf</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): udf = <span class="keyword">new</span> udf()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    udf().udftest</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">udf</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> streamingcontext = <span class="keyword">new</span> streamingcontext</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">udftest</span> </span>= &#123;</span><br><span class="line">    <span class="keyword">val</span> environment = streamingcontext.getflinkenv()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> testdata = <span class="type">List</span>(</span><br><span class="line">      event(<span class="string">&quot;zihan&quot;</span>, <span class="string">&quot;1211&quot;</span>, <span class="number">1111</span>),</span><br><span class="line">      event(<span class="string">&quot;bob&quot;</span>, <span class="string">&quot;1333&quot;</span>, <span class="number">22222</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> testDS = environment.fromCollection(testdata)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义富函数</span></span><br><span class="line">    testDS.map( <span class="keyword">new</span> myRichmap).print(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> result =</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |索引号0</span></span><br><span class="line"><span class="string">        |编号为4a4f30b513560b972fd0e372460b71c4</span></span><br><span class="line"><span class="string">        |2&gt; 1211</span></span><br><span class="line"><span class="string">        |2&gt; 1333</span></span><br><span class="line"><span class="string">        |这个是结束方法0</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">    environment.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现富函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myRichmap</span> <span class="keyword">extends</span> <span class="title">RichMapFunction</span>[event,<span class="type">String</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">map</span></span>(value: event): <span class="type">String</span> = &#123;</span><br><span class="line">    value.url</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在所有数据到来之前进行处理</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">open</span></span>(parameters: <span class="type">Configuration</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;索引号&quot;</span> + getRuntimeContext.getIndexOfThisSubtask)</span><br><span class="line">    println(<span class="string">&quot;编号为&quot;</span> + getRuntimeContext.getJobId)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// closa</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">close</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;这个是结束方法&quot;</span> + getRuntimeContext.getIndexOfThisSubtask)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意，当多个并行度进行的时候，每一个并行调用map的时候都会进行初始化，以及销毁</p>
<h2 id="分区函数"><a href="#分区函数" class="headerlink" title="分区函数"></a>分区函数</h2><p>简单来说就是数据的重新分区的操作</p>
<p>简单介绍一下：keyby</p>
<p>keyby：是把每个key根据hash值然后取模运算的方法进行分区也就造成了，每一个相同的key一定可以在同一分区，不同的不一定不在同一分区</p>
<p>接下来我们要学习的算子，是可以真正控制分区的</p>
<p>如果用上面keyby有可能会造成数据倾斜，也就是我们现在的操作就是控制数据倾斜的</p>
<p>物理分区，一般在并行度减少的时候会自动进行</p>
<h3 id="随机分区（shuffle）"><a href="#随机分区（shuffle）" class="headerlink" title="随机分区（shuffle）"></a>随机分区（shuffle）</h3><p>使用方法很简单直接DS.shuffle就可以了</p>
<h3 id="轮询分区（Round-Robin）"><a href="#轮询分区（Round-Robin）" class="headerlink" title="轮询分区（Round-Robin）"></a>轮询分区（Round-Robin）</h3><p>对比上面的shuffle是洗牌，则他就是发牌，和打扑克一样的那种，和kafka以及nginx是一样的</p>
<p>调用方式DS.rebalance()，其实Ds里上游到下游默认的就是轮询</p>
<h3 id="重缩放分区（rescale）"><a href="#重缩放分区（rescale）" class="headerlink" title="重缩放分区（rescale）"></a>重缩放分区（rescale）</h3><p>它和上面的轮询很像</p>
<p>轮询是把每一个并行子任务的数据都进行轮询，就是如果上游是两个任务，下游是三个任务</p>
<p>轮询会让第一个子任务的第一个数据 给下游的第一个，第一个第二个给下游的第二个，第一个的第三个给下游的第三个</p>
<p>上游的第二个子任务同理</p>
<p>但是这个并不是，它是做了个分组，旨在当前的组内进行轮询</p>
<p>就是相当于玩游戏局大了，要分开玩一样</p>
<p>每一个上游任务都会对应下游的一个组，然后再组里进行轮询，不能发牌给其他组</p>
<p>其本质上也就是按照taskmanager进行分组，每个taskmanager之间如果项进行通信则要经过网络传输代价比较大，</p>
<p>然后轮询其实就是再一个taskmanager（上游）和另外一个taskmanager（下游）之间进行通信，所以轮询的数据通道要建立M（上游数量）* N (下游数量)个通信</p>
<p>而现在的则不是，因为他是按照taskmanager进行分开的，所以它理论上是按照它组内的来进行的1上游数量）* N (下游数量)来通信，但是这里的n的数量都比上述小得多</p>
<p>但是要注意如果想优化性能要让上游子任务和下游子任务的数量是倍数的关系最好</p>
<p>使用的时候直接DS.rescale就好</p>
<p>可以用自定义数据源进行测试如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flinklearn</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.functions.&#123;<span class="type">FilterFunction</span>, <span class="type">RichMapFunction</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.<span class="type">Configuration</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.&#123;<span class="type">RichParallelSourceFunction</span>, <span class="type">SourceFunction</span>&#125;</span><br><span class="line"><span class="keyword">import</span> tool._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">udf</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): udf = <span class="keyword">new</span> udf()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    udf().udftest</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">udf</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> streamingcontext = <span class="keyword">new</span> streamingcontext</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">udftest</span> </span>= &#123;</span><br><span class="line">    <span class="keyword">val</span> environment = streamingcontext.getflinkenv(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> testdata = <span class="type">List</span>(</span><br><span class="line">      event(<span class="string">&quot;zihan&quot;</span>, <span class="string">&quot;1211&quot;</span>, <span class="number">1111</span>),</span><br><span class="line">      event(<span class="string">&quot;bob&quot;</span>, <span class="string">&quot;1333&quot;</span>, <span class="number">22222</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> testDS = environment.addSource(<span class="keyword">new</span> trysource).setParallelism(<span class="number">3</span>)</span><br><span class="line">    testDS.rescale.print(<span class="string">&quot;rescale&quot;</span>)</span><br><span class="line">    environment.execute()</span><br><span class="line">    <span class="keyword">val</span> result =</span><br><span class="line">      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |rescale:1&gt; 2</span></span><br><span class="line"><span class="string">        |rescale:2&gt; 1</span></span><br><span class="line"><span class="string">        |rescale:2&gt; 3</span></span><br><span class="line"><span class="string">        |rescale:1&gt; 4</span></span><br><span class="line"><span class="string">        |rescale:2&gt; 5</span></span><br><span class="line"><span class="string">        |rescale:1&gt; 6</span></span><br><span class="line"><span class="string">        |rescale:2&gt; 7</span></span><br><span class="line"><span class="string">        |rescale:1&gt; 8</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">trysource</span> <span class="keyword">extends</span> <span class="title">RichParallelSourceFunction</span>[<span class="type">Int</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(ctx: <span class="type">SourceFunction</span>.<span class="type">SourceContext</span>[<span class="type">Int</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">0</span> to <span class="number">7</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (getRuntimeContext.getIndexOfThisSubtask == (i+<span class="number">1</span>)%<span class="number">2</span>)&#123;</span><br><span class="line">        ctx.collect(i+<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">cancel</span></span>(): <span class="type">Unit</span> = ???</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过结果我们可以知道1，3，5，7对应的子任务的id都是2 ，则2，4，6，8是1</p>
<p>满足我们设置的条件</p>
<h3 id="广播分区（broadcast）"><a href="#广播分区（broadcast）" class="headerlink" title="广播分区（broadcast）"></a>广播分区（broadcast）</h3><p>把一份数据复制成多个然后发送到下游所有子任务</p>
<p>但是一般会造成数据重复，但还是有作用的在用广播创建广播流的时候用</p>
<h3 id="自定义分区"><a href="#自定义分区" class="headerlink" title="自定义分区"></a>自定义分区</h3><p>接口叫做partitionCustom</p>
<p>源码如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Partitions a DataStream on the key returned by the selector, using a custom partitioner.</span></span><br><span class="line"><span class="comment"> * This method takes the key selector to get the key to partition on, and a partitioner that</span></span><br><span class="line"><span class="comment"> * accepts the key type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note: This method works only on single field keys, i.e. the selector cannot return tuples</span></span><br><span class="line"><span class="comment"> * of fields.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">def partitionCustom<span class="literal">[K: T<span class="identifier">ypeInformation</span>]</span>(partitioner: Partitioner<span class="literal">[K]</span>, <span class="keyword">fun</span>: T =&gt; K)</span><br><span class="line">    : DataStream<span class="literal">[T]</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> keyType = implicitly<span class="literal">[T<span class="identifier">ypeInformation</span>[K]</span>]</span><br><span class="line">  <span class="keyword">val</span> cleanFun = clean(<span class="keyword">fun</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> keyExtractor = <span class="keyword">new</span> KeySelector<span class="literal">[T, K]</span> <span class="keyword">with</span> ResultTypeQueryable<span class="literal">[K]</span> &#123;</span><br><span class="line">    def get<span class="constructor">Key(<span class="params">in</span>: T)</span> = clean<span class="constructor">Fun(<span class="params">in</span>)</span></span><br><span class="line">    override def get<span class="constructor">ProducedType()</span>: TypeInformation<span class="literal">[K]</span> = keyType</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">as</span><span class="constructor">ScalaStream(<span class="params">stream</span>.<span class="params">partitionCustom</span>(<span class="params">partitioner</span>, <span class="params">keyExtractor</span>)</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Partitioner是分区器，后面的lambda表达式是提取当前分区字段的方法</p>
<p>点进去查看发现</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Partitioner</span>&lt;<span class="title">K</span>&gt; <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Function</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes the partition for the given key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key The key.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> numPartitions The number of partitions to partition into.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The partition index.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(K key, <span class="keyword">int</span> numPartitions)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>它也是一个接口，他的返回值是要返回到下游子任务的编号，也就是分区的编号</p>
<p>如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package flinklearn</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.<span class="keyword">functions</span>.&#123;FilterFunction, Partitioner, RichMapFunction&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.<span class="keyword">configuration</span>.<span class="keyword">Configuration</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.<span class="keyword">functions</span>.source.&#123;RichParallelSourceFunction, SourceFunction&#125;</span><br><span class="line"><span class="keyword">import</span> tool._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">object</span> udf &#123;</span><br><span class="line"></span><br><span class="line">  def apply(): udf = <span class="built_in">new</span> udf()</span><br><span class="line"></span><br><span class="line">  def main(args: <span class="keyword">Array</span>[String]): Unit = &#123;</span><br><span class="line">    udf().udftest</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> udf&#123;</span><br><span class="line"></span><br><span class="line">  private val streamingcontext = <span class="built_in">new</span> streamingcontext</span><br><span class="line"></span><br><span class="line">  def udftest = &#123;</span><br><span class="line">    val environment = streamingcontext.getflinkenv(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    val testDS = environment.fromElements(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">67</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">    testDS.partitionCustom( <span class="built_in">new</span> Partitioner[<span class="type">Int</span>]&#123;</span><br><span class="line">      override def <span class="keyword">partition</span>(key: <span class="type">Int</span>, numPartitions: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">        key % <span class="number">2</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, x=&gt;x ).print(&quot;rescale&quot;)</span><br><span class="line">    environment.<span class="keyword">execute</span>()</span><br><span class="line">    val result =</span><br><span class="line">      &quot;&quot;&quot;</span><br><span class="line">        |rescale:1&gt; 2</span><br><span class="line">        |rescale:1&gt; 4</span><br><span class="line">        |rescale:2&gt; 1</span><br><span class="line">        |rescale:1&gt; 6</span><br><span class="line">        |rescale:2&gt; 1</span><br><span class="line">        |rescale:1&gt; 8</span><br><span class="line">        |rescale:2&gt; 3</span><br><span class="line">        |rescale:1&gt; 8</span><br><span class="line">        |rescale:2&gt; 5</span><br><span class="line">        |rescale:1&gt; 6</span><br><span class="line">        |rescale:2&gt; 67</span><br><span class="line">        |rescale:1&gt; 4</span><br><span class="line">        |rescale:2&gt; 7</span><br><span class="line">        |rescale:2&gt; 5</span><br><span class="line">        |rescale:2&gt; 3</span><br><span class="line">        |</span><br><span class="line">        |Process finished with exit code 0</span><br><span class="line">        |</span><br><span class="line">        |&quot;&quot;&quot;.stripMargin</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是对于case class 可能不好使，我用就是不好用</p>
<h2 id="输出算子"><a href="#输出算子" class="headerlink" title="输出算子"></a>输出算子</h2><p>可以调用addSink就可以自己定义一个sink</p>
<p>里面最关键的构造方法是一个invoke具体在源码里</p>
<p>当然SinkFunction一般我们不用用，因为官方给我们提供了好多</p>
<p>接下来我们按照官网进行学习</p>
<h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><p>先在idea里添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>已创建的 JDBC Sink 能够保证至少一次的语义。 更有效的精确执行一次可以通过 upsert 语句或幂等更新实现。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">val value1: DataStreamSink[Yarninfo] = value.<span class="built_in">addSink</span>(</span><br><span class="line">  JdbcSink.<span class="built_in">sink</span>(</span><br><span class="line">    <span class="string">&quot;insert into yarninfo(id,host,applicationtype,name,startime,endtime,user,memeveryscends,vcoreeveryscends,size,cores,state,url) values(?,?,?,?,?,?,?,?,?,?,?,?,?)&quot;</span>,</span><br><span class="line">    new JdbcStatementBuilder[Yarninfo] &#123;</span><br><span class="line">      override def <span class="built_in">accept</span>(t: PreparedStatement, u: Yarninfo): Unit = &#123;</span><br><span class="line">        t<span class="selector-class">.setString</span>(<span class="number">1</span>, u.id)</span><br><span class="line">        t<span class="selector-class">.setString</span>(<span class="number">2</span>, u.host)</span><br><span class="line">        t<span class="selector-class">.setString</span>(<span class="number">3</span>, u.applicationtype)</span><br><span class="line">        t<span class="selector-class">.setString</span>(<span class="number">4</span>, u.name)</span><br><span class="line">        t<span class="selector-class">.setString</span>(<span class="number">5</span>, u.startime)</span><br><span class="line">        t<span class="selector-class">.setString</span>(<span class="number">6</span>, u.endtime)</span><br><span class="line">        t<span class="selector-class">.setString</span>(<span class="number">7</span>, u.user)</span><br><span class="line">        t<span class="selector-class">.setString</span>(<span class="number">8</span>, u.memeveryscends)</span><br><span class="line">        t<span class="selector-class">.setString</span>(<span class="number">9</span>, u.vcoreeveryscends)</span><br><span class="line">        t<span class="selector-class">.setString</span>(<span class="number">10</span>, u.size)</span><br><span class="line">        t<span class="selector-class">.setString</span>(<span class="number">11</span>, u.cores)</span><br><span class="line">        t<span class="selector-class">.setString</span>(<span class="number">12</span>, u.state)</span><br><span class="line">        t<span class="selector-class">.setString</span>(<span class="number">13</span>, u.url)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    new JdbcConnectionOptions<span class="selector-class">.JdbcConnectionOptionsBuilder</span>()</span><br><span class="line">      <span class="selector-class">.withUrl</span>(&quot;jdbc:mysql://bigdata2:<span class="number">3306</span>/bigdata&quot;)</span><br><span class="line">      <span class="selector-class">.withDriverName</span>(&quot;com.mysql.jdbc.Driver&quot;)</span><br><span class="line">      <span class="selector-class">.withUsername</span>(&quot;root&quot;)</span><br><span class="line">      <span class="selector-class">.withPassword</span>(&quot;liuzihan010616&quot;)</span><br><span class="line">      <span class="selector-class">.build</span>()</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>如果要实现幂等性等要自己家进行操作</p>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>flink写入到文件中</p>
<p>如下：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">testDS.map(<span class="literal">_</span>.toString).addSink(StreamingFileSink.</span><br><span class="line">  forRowFormat(<span class="keyword">new</span> <span class="type">Path</span>(<span class="string">&quot;./output&quot;</span>),</span><br><span class="line">   <span class="keyword">new</span> <span class="type">SimpleStringEncoder</span>[<span class="keyword">String</span>](<span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line">  .build())</span><br></pre></td></tr></table></figure>

<p>分区数量等于生成的文件数量</p>
<p><img src="https://pic.imgdb.cn/item/63df221a4757feff33a88620.jpg"></p>
<p>还可以在.bulid之前用with来设置一些写入的参数</p>
<ul>
<li>withBucketCheckInterval()：设置多长时间进行滚动一次</li>
<li>等，具体自己看下就ok</li>
</ul>
<p>写入到hdfs上的时候也直接改一下path就好</p>
<h3 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h3><p>如下：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">testDS.map(<span class="literal">_</span>.toString).addSink(</span><br><span class="line">  <span class="keyword">new</span> <span class="type">FlinkKafkaProducer</span>[<span class="keyword">String</span>]</span><br><span class="line">  (<span class="string">&quot;bigdata3:9092,bigdata4:9092,bigdata5:9092&quot;</span>,<span class="string">&quot;dl2262&quot;</span>,<span class="keyword">new</span> <span class="type">SimpleStringSchema</span>())</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>就可以往kafka里写入了</p>
<h3 id="自定义外部连接器"><a href="#自定义外部连接器" class="headerlink" title="自定义外部连接器"></a>自定义外部连接器</h3><p>就是通过继承SinkFunction，以及对应的RichSinkfunction</p>
<p>实现invoke方法，放入自己写入的方法</p>
<h2 id="时间语义"><a href="#时间语义" class="headerlink" title="时间语义"></a>时间语义</h2><p>对于无界流，我们要查看它一定时间内的数据</p>
<p>对于分布式系统，我们没有一个绝对的时间指标</p>
<p>窗口进行数据的收集是以什么为标准的？</p>
<h3 id="处理时间"><a href="#处理时间" class="headerlink" title="处理时间"></a>处理时间</h3><p>就是我们对数据进行处理的时候的时间</p>
<h3 id="事件事件"><a href="#事件事件" class="headerlink" title="事件事件"></a>事件事件</h3><p>就是这个数据什么时候产生的</p>
<h3 id="水位线"><a href="#水位线" class="headerlink" title="水位线"></a>水位线</h3><p>用来度量事件时间的度量</p>
<p>当我们使用事件事件的时候，假如我们要采集8点到9点的数据</p>
<p>那么当我们用事件事件，就是在数据生成的时候打上标记，进行统计他的事件的话，</p>
<p>假如下游还有对时间进行操作的事情，则只能去提取事件时间的时间戳，进行计算，</p>
<p>这样下游的操作就会延迟数据的输出时间，导致输出的数据是一段一段的</p>
<p>于是就把时间戳提出，当作一个变量，当对这个数据进行处理的时候，在时间戳上打个标记</p>
<p>并包装成一个特殊形式，直接插入数据流，跟随着数据一起流动，然后如果看见这个标志就会放到下游</p>
<p>就是在对每一条数据进行处理之后，我们会在这个数据之后加一个类似标记的东西，而这个东西是和数据时间有关系的，作用就是告诉下游我当前处理的数据是这个时间的</p>
<p><strong>有序流中的水位线</strong>：</p>
<p>就是按照时间顺序进行插入时间戳，保证了数据的顺序</p>
<p>但是如果事件生成的特别快时间特别密，则水位线打上的时间会有所相同，然后因为数据量特别大，则打上所需要的时间和资源会特别多，于是我们从上面的转变成，每间隔一段时间插入一条水位线，每间隔一段时间插入一段水位线，然后这个插入的标准就是它之前最近一次提取到的时间戳，插入的时间周期默认是200ms（可以设置）ps：这插入的周期，是按照系统时间200ms之后就生成一次的</p>
<p>但是假设：</p>
<p>上游是三个分区。下游是一个分区，那么则可能出现乱序，</p>
<p>就是假如第一个分区正常处理时间数据。而对于第二个分区则是有问题或者延迟什么的，它发送了一个在之前时间的数据，就会发生乱序</p>
<p>第一个分区发送的数据如下：1，2，3，4数据全到下面的分区了</p>
<p>第二个分区又发送了个2的数据，就会出现数据集乱序的问题</p>
<p><strong>解决方法</strong>：</p>
<p>设置一个标志位，保存之前最大的时间戳，然后用这个标志位进行推进时间并对比数据的时间戳，然后如过来的数据特别多可以采用和上面一样的方法进行周期执行的判断最大时间戳</p>
<p>但是上述的方法会出现问题，假如按照上述规则处理窗口，则可能会出问题，假如我们定义一个0-9s的一个窗口，按照这个方法，可能会出现迟到的数据，然后就会丢数据</p>
<p><strong>解决方法</strong>：</p>
<p>设置延迟函数，就是让他延迟2s，就是真实数据的时间2s的话，则让水位线的时间是0s，这样就可以减少数据丢失的时间了，因为窗口是按照水位线的时间来的，但是上述的方法也不严谨，最终解决方法就是等足够长的时间</p>
<p>就是我们判断一个数据流中的最大乱序从程度，进行设置时间，假如22s后面跟着一个17s的数据，则说他的最大乱序程度是22-17&#x3D;5s如果还有比这个大的，则就更新这个时间，同时这个时间也是要延迟多少秒的时间</p>
<p>水位线特性：</p>
<ul>
<li>水位线是一个插入到数据流中的一个标记，可以认为是一个特殊的数据</li>
<li>水位线的主要内容就是一个时间戳，用来表示当前事件时间的进展的</li>
<li>水位线是基于数据的时间戳进行生成的</li>
<li>水位线的时间戳必须是单调递增的，以确保时间的推进</li>
<li>水位线可以通过设置延迟来进行处理迟到的数据</li>
</ul>
<p>然后就不会出现小于等于t的时间数据了</p>
<h3 id="但是如何确认最大乱序时间？"><a href="#但是如何确认最大乱序时间？" class="headerlink" title="但是如何确认最大乱序时间？"></a>但是如何确认最大乱序时间？</h3><p>一般这个最大乱序时间，是按照一个正态分布的，最易最终我们就是在正确性和延时时间做一个权衡</p>
<p>在idea代码如下：</p>
<p>水位线的基本使用：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flinklearn</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.<span class="type">Duration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.eventtime.&#123;<span class="type">SerializableTimestampAssigner</span>, <span class="type">Watermark</span>, <span class="type">WatermarkGenerator</span>, <span class="type">WatermarkGeneratorSupplier</span>, <span class="type">WatermarkOutput</span>, <span class="type">WatermarkStrategy</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.utils.<span class="type">ParameterTool</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">f3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(parameterTool: <span class="type">ParameterTool</span>): f3 = <span class="keyword">new</span> f3(parameterTool)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> tool = <span class="type">ParameterTool</span>.fromArgs(args)</span><br><span class="line">    f3(tool).excute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">f3</span>(<span class="params">parameterTool: <span class="type">ParameterTool</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">excute</span></span>()=&#123;</span><br><span class="line">    <span class="keyword">val</span> env = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    env.setParallelism(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 设置水位线的默认事件默认是毫秒</span></span><br><span class="line">    env.getConfig.setAutoWatermarkInterval(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value = env.addSource(<span class="keyword">new</span> clickSource)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 有序流的水位线生成策略</span></span><br><span class="line">    value.assignTimestampsAndWatermarks( <span class="type">WatermarkStrategy</span>.forMonotonousTimestamps().withTimestampAssigner(<span class="keyword">new</span> <span class="type">SerializableTimestampAssigner</span>[event] &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(element: event, recordTimestamp: <span class="type">Long</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">        element.timestamp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 乱序流的水位线生成方法</span></span><br><span class="line">    <span class="comment">// 这里的Duration 是java.time下的</span></span><br><span class="line">    value.assignTimestampsAndWatermarks( <span class="type">WatermarkStrategy</span>.forBoundedOutOfOrderness[event](<span class="type">Duration</span>.ofSeconds(<span class="number">5</span>)).withTimestampAssigner(<span class="keyword">new</span> <span class="type">SerializableTimestampAssigner</span>[event] &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(element: event, recordTimestamp: <span class="type">Long</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">        element.timestamp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义水位线</span></span><br><span class="line">    value.assignTimestampsAndWatermarks(<span class="keyword">new</span> <span class="type">WatermarkStrategy</span>[event] &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createWatermarkGenerator</span></span>(context: <span class="type">WatermarkGeneratorSupplier</span>.<span class="type">Context</span>): <span class="type">WatermarkGenerator</span>[event] = &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="type">WatermarkGenerator</span>[event] &#123;</span><br><span class="line">          <span class="comment">// 底层默认要实现的两个方法 但是flink内置了几种基本的策略，在WatermarkStrategy源码中</span></span><br><span class="line">          <span class="comment">// 事件触发</span></span><br><span class="line">          <span class="keyword">val</span> delay = <span class="number">5000</span>L</span><br><span class="line">          <span class="comment">// 定义属性保存最大时间戳</span></span><br><span class="line">          <span class="keyword">var</span> maxtx = <span class="type">Long</span>.<span class="type">MinValue</span> + delay + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">// 判断最大时间戳</span></span><br><span class="line">          <span class="comment">// 按照系统时间做调度</span></span><br><span class="line">          <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onEvent</span></span>(event: event, eventTimestamp: <span class="type">Long</span>, output: <span class="type">WatermarkOutput</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">            maxtx = <span class="type">Math</span>.max(maxtx,event.timestamp)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//          // 按照数据进行调度</span></span><br><span class="line"><span class="comment">//          override def onEvent(event: event, eventTimestamp: Long, output: WatermarkOutput): Unit = &#123;</span></span><br><span class="line"><span class="comment">//            maxtx = Math.max(maxtx,event.timestamp)</span></span><br><span class="line"><span class="comment">//            val watermark = new Watermark[event](maxtx)</span></span><br><span class="line"><span class="comment">//            output.emitWatermark(watermark)</span></span><br><span class="line"><span class="comment">//          &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 周期行的生产水位线</span></span><br><span class="line">          <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onPeriodicEmit</span></span>(output: <span class="type">WatermarkOutput</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">            <span class="keyword">val</span> watermark = <span class="keyword">new</span> <span class="type">Watermark</span>[event](maxtx -delay <span class="number">-1</span>)</span><br><span class="line">            <span class="comment">// 周期性发射</span></span><br><span class="line">            output.emitWatermark(watermark)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是我们还可以在数据源机械能配置，自定义source的时候可以直接定义水位线等参数如下</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flinklearn</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Calendar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.source.&#123;<span class="type">RichParallelSourceFunction</span>, <span class="type">RichSourceFunction</span>, <span class="type">SourceFunction</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.watermark.<span class="type">Watermark</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.util.<span class="type">Random</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">clickSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): clickSource = <span class="keyword">new</span> clickSource()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SourceFunction[T]</span></span><br><span class="line"><span class="comment">其中的泛型就是我们对应的返回的数据的类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">clickSource</span> <span class="keyword">extends</span> <span class="title">RichParallelSourceFunction</span>[event]</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 标志位</span></span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">excute</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(sourceContext: <span class="type">SourceFunction</span>.<span class="type">SourceContext</span>[event]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 随机数生成器</span></span><br><span class="line">    <span class="keyword">val</span> random =<span class="keyword">new</span>  <span class="type">Random</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义选择的范围</span></span><br><span class="line">    <span class="keyword">val</span> user = <span class="type">Array</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> url = <span class="type">Array</span>(<span class="string">&quot;/cat&quot;</span>,<span class="string">&quot;/.dog&quot;</span>,<span class="string">&quot;/info&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用循环不停的发送数据，标志位做为判断题条件，不停的发送数据</span></span><br><span class="line">    <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">      <span class="keyword">val</span> eventtmp = event(user(random.nextInt(<span class="number">2</span>)),url(random.nextInt(<span class="number">2</span>)),<span class="type">Calendar</span>.getInstance().getTimeInMillis)</span><br><span class="line">      <span class="comment">// 为要发送的数据指定时间戳,按照下面指定完成之后发送数据的时候就会知道哪一个是时间戳，就可以不实现withTimestampAssigner了</span></span><br><span class="line">      sourceContext.collectWithTimestamp(eventtmp,eventtmp.timestamp)</span><br><span class="line">      <span class="comment">// 往下游直接发送水位线,然后下游就可以不用assignTimestampsAndWatermarks这个方法了，因为水位线已经生成完了</span></span><br><span class="line">      sourceContext.emitWatermark(<span class="keyword">new</span> <span class="type">Watermark</span>(eventtmp.timestamp))</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 每隔1s发送一条数据</span></span><br><span class="line">      sourceContext.collect(eventtmp)</span><br><span class="line">      <span class="type">Thread</span>.sleep(<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">cancel</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    flag = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就可以了</p>
<p>水位线的正常就是像数据一样正常的流动，这个是单分区的时候</p>
<p>如果想发送到多个下游的子任务，我们应该广播出去，</p>
<p>但是如果上游有多个分区，那么他们广播的水位线如果不一样，下游该采用哪一个水位线？</p>
<p>答案是<strong>最小的数据</strong></p>
<p>我们会设置一个分区水位线的概念，就是采取最小的分区水位线</p>
<h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><p>我们要观察，或者对一定时间内的数据进行操作，一般定义窗口的时候都是左闭右开，滑动窗口是可以出现重复的数据</p>
<p>但是对于时间时间语义下乱序的时候，就会有迟到的数据，然后我们就要设置延迟时间</p>
<p>但是，既然又迟到的数据，那么也就会有超前的数据在这个窗口中，于是我们不能简单的理解把窗口想象成简单的窗口</p>
<p>我们可以想象成桶的概念，就是简单的，如果这个时间戳是复合这个窗口规定的时间，则会被拉到一个桶中，</p>
<p>这样就不会出现时间不对的数据导致观察错误</p>
<p><strong>窗口的分类：</strong></p>
<ul>
<li><p>时间窗口</p>
<ul>
<li>滚动窗口：就是头连着尾巴一样，一直看，生产很多都是基于滚动窗口的，就类似于把数据分成很多个框框，挨个看</li>
<li>滑动窗口：基于上面滚动窗口，就像一个滑块一样的，从头滑到尾，也叫跳动窗口，滑动窗口的参数是滑动步长，就是每次滑动滑动的距离，如果把滑动步长跳到整个数据那么长，就会变成滚动窗口了</li>
<li>会话窗口：他的标准并不是给窗口设置一个固定的大小，开始和结束的规律也是完全没有的，窗口之间一定没有重叠的，会复杂点</li>
<li>全局窗口：就是全局的，默认是不会触发计算的因为数据不会停下，但是可以设置触发器，进行设置</li>
</ul>
</li>
<li><p>计数窗口</p>
<ul>
<li>滚动窗口：同上</li>
<li>滑动窗口：同上</li>
<li>会话窗口：同上</li>
<li>全局窗口：同上</li>
</ul>
</li>
</ul>
<p>时间窗口略微的复杂点，计数则更为简单</p>
<p>窗口api：可以堪称df的api的一小部分</p>
<p>首先，我们要确定我们做没做keyby</p>
<p>如果keyby了，则要通过调用.window进行开始，会在多个并行子任务上执行，针对每一个key进行执行</p>
<p>如果没做keyby，则是用调用.windowall(),相当于并行度都变成1</p>
<p>无论是上面的哪一个window&#x2F;windowall</p>
<p>都要街上窗口分配器，然后加上聚合函数</p>
<p>除了全都要我们自定义的窗口分配器以外，flink都提供了内置的function</p>
<p>如下：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">package</span> flinklearn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.eventtime.&#123;SerializableTimestampAssigner, WatermarkStrategy&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.utils.ParameterTool</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.&#123;EventTimeSessionWindows, ProcessingTimeSessionWindows, SlidingEventTimeWindows, SlidingProcessingTimeWindows, TumblingEventTimeWindows, TumblingProcessingTimeWindows&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.catalyst.expressions.aggregate.AggregateFunction</span><br><span class="line"></span><br><span class="line"><span class="title">object</span> flinkWindos &#123;</span><br><span class="line">  def apply(parameterTool: <span class="type">ParameterTool</span>): flinkWindos = new flinkWindos(parameterTool)</span><br><span class="line"></span><br><span class="line">  def main(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    val tool = <span class="type">ParameterTool</span>.fromArgs(args)</span><br><span class="line">    flinkWindos(tool).ecxcute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> flinkWindos(<span class="title">parameterTool</span>: <span class="type">ParameterTool</span>)&#123;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  import org.apache.flink.streaming.api.scala._</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  def ecxcute()=&#123;</span></span><br><span class="line"><span class="class">    val env = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span></span><br><span class="line"><span class="class">    val zihan = env.addSource(<span class="title">new</span> <span class="title">clickSource</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    val zihan1 = zihan.assignTimestampsAndWatermarks(<span class="type">WatermarkStrategy</span>.<span class="title">forMonotonousTimestamps</span>().withTimestampAssigner(</span></span><br><span class="line"><span class="class">      <span class="title">new</span> <span class="type">SerializableTimestampAssigner</span>[<span class="title">event</span>] &#123;</span></span><br><span class="line"><span class="class">        <span class="title">override</span> <span class="title">def</span> <span class="title">extractTimestamp</span>(<span class="title">element</span>: <span class="title">event</span>, <span class="title">recordTimestamp</span>: <span class="type">Long</span>): <span class="type">Long</span> = &#123;</span></span><br><span class="line"><span class="class">          element.timestamp</span></span><br><span class="line"><span class="class">        &#125;</span></span><br><span class="line"><span class="class">      &#125;))</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    zihan1.map(<span class="title">data</span> =&gt; &#123;(<span class="title">data</span>.<span class="title">uaer</span>,1)&#125;)</span></span><br><span class="line"><span class="class">      .keyBy(<span class="title">_</span>.<span class="title">_1</span>)</span></span><br><span class="line"><span class="class">      .window(<span class="type">TumblingEventTimeWindows</span>.<span class="title">of</span>(<span class="type">Time</span>.<span class="title">seconds</span>(7)))// 基于事件时间的滚动窗口 , 偏移量为后面的参数</span></span><br><span class="line"><span class="class">//      .window(<span class="type">TumblingProcessingTimeWindows</span>.<span class="title">of</span>(<span class="type">Time</span>.<span class="title">days</span>(1),<span class="type">Time</span>.hours(-8))) // 基于处理时间的滚动窗口</span></span><br><span class="line"><span class="class">//      .window(<span class="type">SlidingEventTimeWindows</span>.<span class="title">of</span>(<span class="type">Time</span>.<span class="title">days</span>(1),<span class="type">Time</span>.minutes(10),<span class="type">Time</span>.hours(-8))) // 基于时间时间的滑动窗口 步长为10min</span></span><br><span class="line"><span class="class">//      .window(<span class="type">SlidingProcessingTimeWindows</span>.<span class="title">of</span>(<span class="type">Time</span>.<span class="title">days</span>(1),<span class="type">Time</span>.minutes(10),<span class="type">Time</span>.hours(-8))) // 基于处理时间的滑动窗口 步长为10min</span></span><br><span class="line"><span class="class">//      .window(<span class="type">EventTimeSessionWindows</span>.<span class="title">withGap</span>(<span class="type">Time</span>.<span class="title">seconds</span>(10))) //  基于事件时间的会话窗口</span></span><br><span class="line"><span class="class">//      .window(<span class="type">ProcessingTimeSessionWindows</span>.<span class="title">withGap</span>(<span class="type">Time</span>.<span class="title">seconds</span>(10))) // 基于处理时间的会话窗口</span></span><br><span class="line"><span class="class">//      .countWindow(10) // 大小为10的滚动计数窗口</span></span><br><span class="line"><span class="class">//      .countWindow(10,2) // 大小为10的滑动计数窗口，步长为2</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    //  窗口函数</span></span><br><span class="line"><span class="class">    // 分为增量窗口 和 全窗口</span></span><br><span class="line"><span class="class">    // 增量聚合 是每来一条数据，就处理一条数据，然后存储他的状态，等窗口满足条件，直接输出</span></span><br><span class="line"><span class="class">    // 全窗口，则是类似批处理的形式，把数据都聚集在一起，然后满足条件执行操作，在输出</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    /*</span></span><br><span class="line"><span class="class">    增量聚合函数包括（典型） ： <span class="type">ReduceFunction</span> <span class="type">AggregateFunction</span></span></span><br><span class="line"><span class="class">    规约聚合：reduceFunction -&gt; 两两进行规约，就和之前简单函数的那个是一样的</span></span><br><span class="line"><span class="class">    */</span></span><br><span class="line"><span class="class">      // reduce 他在规约的过程中，中间是不能变的，就是数据的输入，输出，规则都一样</span></span><br><span class="line"><span class="class">//      .reduce( (<span class="title">x</span>,<span class="title">y</span>)=&gt; &#123;</span></span><br><span class="line"><span class="class">//        (<span class="title">x</span>.<span class="title">_1</span>,<span class="title">x</span>.<span class="title">_2</span>+<span class="title">y</span>.<span class="title">_2</span>)</span></span><br><span class="line"><span class="class">//      &#125; )</span></span><br><span class="line"><span class="class">//      .print()</span></span><br><span class="line"><span class="class">    // aggre 则可以改变类型，比上面更为灵活</span></span><br><span class="line"><span class="class">        .aggregate(<span class="title">new</span> <span class="title">tryFunction</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    env.execute()</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> tryFunction extends org.apache.flink.api.common.functions.<span class="type">AggregateFunction</span>[(<span class="type">String</span>,<span class="type">Int</span>),(<span class="type">Long</span>,<span class="type">Set</span>[<span class="type">String</span>]),<span class="type">Double</span>] &#123;</span></span><br><span class="line"><span class="class">  override def createAccumulator(): (<span class="type">Long</span>, <span class="type">Set</span>[<span class="type">String</span>]) = &#123;</span></span><br><span class="line"><span class="class">    (0,<span class="type">Set</span>[<span class="type">String</span>]()) // 赋初值</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  // 计算过程</span></span><br><span class="line"><span class="class">  override def add(<span class="title">value</span>: (<span class="type">String</span>, <span class="type">Int</span>), accumulator: (<span class="type">Long</span>, <span class="type">Set</span>[<span class="type">String</span>])): (<span class="type">Long</span>, <span class="type">Set</span>[<span class="type">String</span>]) = &#123;</span></span><br><span class="line"><span class="class">    (<span class="title">value</span>.<span class="title">_2</span> + <span class="title">accumulator</span>.<span class="title">_1</span> , <span class="title">accumulator</span>.<span class="title">_2</span> + <span class="title">value</span>.<span class="title">_1</span>)</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  // 结果</span></span><br><span class="line"><span class="class">  override def getResult(<span class="title">accumulator</span>: (<span class="type">Long</span>, <span class="type">Set</span>[<span class="type">String</span>])): <span class="type">Double</span> = &#123;</span></span><br><span class="line"><span class="class">    accumulator._1/accumulator._2.size</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  // 会话窗口要用的</span></span><br><span class="line"><span class="class">  override def merge(<span class="title">a</span>: (<span class="type">Long</span>, <span class="type">Set</span>[<span class="type">String</span>]), b: (<span class="type">Long</span>, <span class="type">Set</span>[<span class="type">String</span>])): (<span class="type">Long</span>, <span class="type">Set</span>[<span class="type">String</span>]) = ???</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure>

<p>全窗口函数：</p>
<p>就相当于针对于全局的窗口函数，而且它可以获取更多的信息</p>
<p>窗口函数现在处于一个迭代的过程中，所以可能会略微复杂些</p>
<p>首先本身上的窗口函数是通过.apply进行调用的里面的传入参数是WindowFunction，这个是最早的时候用的不过现在已经快被弃用了</p>
<p>因为出现了个比他更好的Function，是ProcessWindowFunction，因为这个方法不光可以获取上下文window信息，还可以获取很多其他的属性</p>
<p>WindowFunction：而且他是富函数</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">WindowFunction</span>[<span class="type">IN</span>, <span class="type">OUT</span>, <span class="type">KEY</span>, <span class="type">W</span> &lt;: <span class="type">Window</span>] <span class="keyword">extends</span> <span class="title">Function</span> <span class="keyword">with</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Evaluates the window and outputs none or several elements.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @param key    The key for which this window is evaluated.</span></span><br><span class="line"><span class="comment">    * @param window The window that is being evaluated.</span></span><br><span class="line"><span class="comment">    * @param input  The elements in the window being evaluated.</span></span><br><span class="line"><span class="comment">    * @param out    A collector for emitting elements.</span></span><br><span class="line"><span class="comment">    * @throws Exception The function may throw exceptions to fail the program and trigger recovery.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(key: <span class="type">KEY</span>, window: <span class="type">W</span>, input: <span class="type">Iterable</span>[<span class="type">IN</span>], out: <span class="type">Collector</span>[<span class="type">OUT</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ProcessWindowFunction</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">abstract</span> <span class="selector-tag">class</span> <span class="selector-tag">ProcessWindowFunction</span><span class="selector-attr">[IN, OUT, KEY, W &lt;: Window]</span></span><br><span class="line">    <span class="selector-tag">extends</span> <span class="selector-tag">AbstractRichFunction</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Evaluates the window and outputs none or several elements.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @param key      The key for which this window is evaluated.</span></span><br><span class="line"><span class="comment">    * @param context  The context in which the window is being evaluated.</span></span><br><span class="line"><span class="comment">    * @param elements The elements in the window being evaluated.</span></span><br><span class="line"><span class="comment">    * @param out      A collector for emitting elements.</span></span><br><span class="line"><span class="comment">    * @throws Exception The function may throw exceptions to fail the program and trigger recovery.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="variable">@throws</span>[Exception]</span><br><span class="line">  def <span class="built_in">process</span>(<span class="attribute">key</span>: KEY, <span class="attribute">context</span>: Context, <span class="attribute">elements</span>: Iterable[IN], <span class="attribute">out</span>: Collector[OUT])</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Deletes any state in the [[Context]] when the Window expires</span></span><br><span class="line"><span class="comment">    * (the watermark passes its `maxTimestamp` + `allowedLateness`).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * @param context The context to which the window is being evaluated</span></span><br><span class="line"><span class="comment">    * @throws Exception The function may throw exceptions to fail the program and trigger recovery.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="variable">@throws</span>[Exception]</span><br><span class="line">  def <span class="built_in">clear</span>(<span class="attribute">context</span>: Context) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The context holding window metadata</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  abstract class Context &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Returns the window that is being evaluated.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="selector-tag">def</span> <span class="selector-tag">window</span>: <span class="selector-tag">W</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Returns the current processing time.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="selector-tag">def</span> <span class="selector-tag">currentProcessingTime</span>: <span class="selector-tag">Long</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Returns the current event-time watermark.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="selector-tag">def</span> <span class="selector-tag">currentWatermark</span>: <span class="selector-tag">Long</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * State accessor for per-key and per-window state.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="selector-tag">def</span> <span class="selector-tag">windowState</span>: <span class="selector-tag">KeyedStateStore</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * State accessor for per-key global state.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="selector-tag">def</span> <span class="selector-tag">globalState</span>: <span class="selector-tag">KeyedStateStore</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Emits a record to the side output identified by the [[OutputTag]].</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="selector-tag">def</span> <span class="selector-tag">output</span><span class="selector-attr">[X]</span>(<span class="attribute">outputTag</span>: OutputTag[X], <span class="attribute">value</span>: X);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面我简单用ProcessWindowFunction进行创建</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flinklearn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala.function.&#123;<span class="type">ProcessWindowFunction</span>, <span class="type">WindowFunction</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.<span class="type">TumblingEventTimeWindows</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.<span class="type">Time</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.<span class="type">TimeWindow</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.<span class="type">Collector</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">flinkwindowall</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): flinkwindowall = <span class="keyword">new</span> flinkwindowall()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    flinkwindowall().excute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flinkwindowall</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">excute</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    <span class="keyword">val</span> env = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value = env.addSource(<span class="keyword">new</span> clickSource)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定一个无关的数据，代表全局</span></span><br><span class="line">    value.assignAscendingTimestamps(_.timestamp) <span class="comment">// 创建水位线</span></span><br><span class="line">      .keyBy(data =&gt; <span class="string">&quot;key&quot;</span>) <span class="comment">// 设置全局分区</span></span><br><span class="line">      .window(<span class="type">TumblingEventTimeWindows</span>.of(<span class="type">Time</span>.seconds(<span class="number">10</span>))) <span class="comment">// 开窗</span></span><br><span class="line">      .process(<span class="keyword">new</span> firstProcessWindowFunction ) <span class="comment">// 调用ProcessWimdowFunction的方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">firstProcessWindowFunction</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>[event,<span class="type">String</span>,<span class="type">String</span>,<span class="type">TimeWindow</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(key: <span class="type">String</span>, context: <span class="type">Context</span>, elements: <span class="type">Iterable</span>[event], out: <span class="type">Collector</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 使用set进行去重</span></span><br><span class="line">    <span class="keyword">var</span> userset = <span class="type">Set</span>[<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从element中提取元素</span></span><br><span class="line">    elements.map(userset += _.uaer)</span><br><span class="line">    <span class="keyword">val</span> uv = userset.size</span><br><span class="line">    <span class="comment">// 提取窗口信息，进行输出</span></span><br><span class="line">    <span class="keyword">val</span> end = context.window.getEnd</span><br><span class="line">    <span class="keyword">val</span> start = context.window.getStart</span><br><span class="line"></span><br><span class="line">    println(<span class="string">s&quot;从<span class="subst">$&#123;start&#125;</span> 到 <span class="subst">$&#123;end&#125;</span> 的uv是<span class="subst">$&#123;uv&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以把上述的全窗口和增量放到一起，通过Aggregatortion里面可以传入两个参数，一个是增量的，一个是全窗口的</p>
<p>就表式，增量的结果变成了全窗口的输入，就是两者结合如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flinklearn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.eventtime.&#123;<span class="type">SerializableTimestampAssigner</span>, <span class="type">WatermarkStrategy</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.utils.<span class="type">ParameterTool</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala.function.<span class="type">ProcessWindowFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.&#123;<span class="type">EventTimeSessionWindows</span>, <span class="type">ProcessingTimeSessionWindows</span>, <span class="type">SlidingEventTimeWindows</span>, <span class="type">SlidingProcessingTimeWindows</span>, <span class="type">TumblingEventTimeWindows</span>, <span class="type">TumblingProcessingTimeWindows</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.<span class="type">Time</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.<span class="type">TimeWindow</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.<span class="type">Collector</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">flinkWindos</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(parameterTool: <span class="type">ParameterTool</span>): flinkWindos = <span class="keyword">new</span> flinkWindos(parameterTool)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> tool = <span class="type">ParameterTool</span>.fromArgs(args)</span><br><span class="line">    flinkWindos(tool).ecxcute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flinkWindos</span>(<span class="params">parameterTool: <span class="type">ParameterTool</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">ecxcute</span></span>()=&#123;</span><br><span class="line">    <span class="keyword">val</span> env = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    <span class="keyword">val</span> zihan = env.addSource(<span class="keyword">new</span> clickSource)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> zihan1 = zihan.assignTimestampsAndWatermarks(<span class="type">WatermarkStrategy</span>.forMonotonousTimestamps().withTimestampAssigner(</span><br><span class="line">      <span class="keyword">new</span> <span class="type">SerializableTimestampAssigner</span>[event] &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(element: event, recordTimestamp: <span class="type">Long</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">          element.timestamp</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;))</span><br><span class="line"></span><br><span class="line">   <span class="keyword">val</span> zihan2 =  zihan1.map(data =&gt; &#123;(data.uaer,<span class="number">1</span>)&#125;)</span><br><span class="line">      .keyBy(data =&gt; <span class="string">&quot;key&quot;</span>)</span><br><span class="line"><span class="comment">//      .window(TumblingEventTimeWindows.of(Time.seconds(7)))// 基于事件时间的滚动窗口 , 偏移量为后面的参数</span></span><br><span class="line"><span class="comment">//      .window(TumblingProcessingTimeWindows.of(Time.days(1),Time.hours(-8))) // 基于处理时间的滚动窗口</span></span><br><span class="line">      .window(<span class="type">SlidingEventTimeWindows</span>.of(<span class="type">Time</span>.seconds(<span class="number">10</span>),<span class="type">Time</span>.minutes(<span class="number">2</span>))) <span class="comment">// 基于时间时间的滑动窗口 步长为10min</span></span><br><span class="line"><span class="comment">//      .window(SlidingProcessingTimeWindows.of(Time.days(1),Time.minutes(10),Time.hours(-8))) // 基于处理时间的滑动窗口 步长为10min</span></span><br><span class="line"><span class="comment">//      .window(EventTimeSessionWindows.withGap(Time.seconds(10))) //  基于事件时间的会话窗口</span></span><br><span class="line"><span class="comment">//      .window(ProcessingTimeSessionWindows.withGap(Time.seconds(10))) // 基于处理时间的会话窗口</span></span><br><span class="line"><span class="comment">//      .countWindow(10) // 大小为10的滚动计数窗口</span></span><br><span class="line"><span class="comment">//      .countWindow(10,2) // 大小为10的滑动计数窗口，步长为2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  窗口函数</span></span><br><span class="line">    <span class="comment">// 分为增量窗口 和 全窗口</span></span><br><span class="line">    <span class="comment">// 增量聚合 是每来一条数据，就处理一条数据，然后存储他的状态，等窗口满足条件，直接输出</span></span><br><span class="line">    <span class="comment">// 全窗口，则是类似批处理的形式，把数据都聚集在一起，然后满足条件执行操作，在输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    增量聚合函数包括（典型） ： ReduceFunction AggregateFunction</span></span><br><span class="line"><span class="comment">    规约聚合：reduceFunction -&gt; 两两进行规约，就和之前简单函数的那个是一样的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">      <span class="comment">// reduce 他在规约的过程中，中间是不能变的，就是数据的输入，输出，规则都一样</span></span><br><span class="line"><span class="comment">//      .reduce( (x,y)=&gt; &#123;</span></span><br><span class="line"><span class="comment">//        (x._1,x._2+y._2)</span></span><br><span class="line"><span class="comment">//      &#125; )</span></span><br><span class="line"><span class="comment">//      .print()</span></span><br><span class="line">    <span class="comment">// aggre 则可以改变类型，比上面更为灵活</span></span><br><span class="line">       zihan2.aggregate(<span class="keyword">new</span> tryFunction11, <span class="keyword">new</span> firstProcessWindowFunction1).print()</span><br><span class="line"></span><br><span class="line">    env.execute()</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>  org.apache.flink.api.common.functions._</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tryFunction11</span> <span class="keyword">extends</span> <span class="title">AggregateFunction</span>[(<span class="type">String</span>,<span class="type">Int</span>),(<span class="type">Long</span>,<span class="type">Set</span>[<span class="type">String</span>]),<span class="title">Double</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createAccumulator</span></span>(): (<span class="type">Long</span>, <span class="type">Set</span>[<span class="type">String</span>]) = &#123;</span><br><span class="line">    (<span class="number">0</span>L,<span class="type">Set</span>[<span class="type">String</span>]()) <span class="comment">// 赋初值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算过程</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(value: (<span class="type">String</span>, <span class="type">Int</span>), accumulator: (<span class="type">Long</span>, <span class="type">Set</span>[<span class="type">String</span>])) = &#123;</span><br><span class="line">    (value._2 + accumulator._1 , accumulator._2 + value._1)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 结果</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getResult</span></span>(accumulator: (<span class="type">Long</span>, <span class="type">Set</span>[<span class="type">String</span>])): <span class="type">Double</span> = &#123;</span><br><span class="line">    accumulator._1/accumulator._2.size</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 会话窗口要用的</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(a: (<span class="type">Long</span>, <span class="type">Set</span>[<span class="type">String</span>]), b: (<span class="type">Long</span>, <span class="type">Set</span>[<span class="type">String</span>])): (<span class="type">Long</span>, <span class="type">Set</span>[<span class="type">String</span>]) = ???</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">firstProcessWindowFunction1</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>[<span class="type">Double</span>,<span class="type">Double</span>,<span class="type">String</span>,<span class="type">TimeWindow</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(key: <span class="type">String</span>, context: <span class="type">Context</span>, elements:<span class="type">Iterable</span>[<span class="type">Double</span>], out: <span class="type">Collector</span>[<span class="type">Double</span>]): <span class="type">Unit</span> =&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> total:<span class="type">Double</span> = <span class="number">0</span></span><br><span class="line">    elements.map(total+=_)</span><br><span class="line">    <span class="comment">// 提取窗口信息，进行输出</span></span><br><span class="line">    <span class="keyword">val</span> end = context.window.getEnd</span><br><span class="line">    <span class="keyword">val</span> start = context.window.getStart</span><br><span class="line">    println(<span class="string">s&quot;从<span class="subst">$&#123;start&#125;</span> 到 <span class="subst">$&#123;end&#125;</span> 的rate是<span class="subst">$&#123;elements&#125;</span>额外的统计信息是<span class="subst">$&#123;total&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="处理迟到数据"><a href="#处理迟到数据" class="headerlink" title="处理迟到数据"></a>处理迟到数据</h2><p>可以允许迟到数据</p>
<p>通过调用windowStream下的allowedLateness,设置允许迟到时间，等到达时间，则会发送到下游</p>
<p>还可以通过测输出流，进行收集过于迟到的数据，但是对这个侧输出流的操作是影响不到窗口的，和窗口相当于是分开的</p>
<p>代码：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flinklearn</span><br><span class="line"><span class="keyword">import</span> java.time.<span class="type">Duration</span></span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Calendar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.eventtime.&#123;<span class="type">SerializableTimestampAssigner</span>, <span class="type">WatermarkStrategy</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala.function.<span class="type">ProcessWindowFunction</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.assigners.&#123;<span class="type">TumblingEventTimeWindows</span>, <span class="type">TumblingProcessingTimeWindows</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.<span class="type">Time</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.windows.<span class="type">TimeWindow</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.<span class="type">Collector</span></span><br><span class="line"><span class="keyword">import</span> tool._</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">dealdelaydata</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> environment = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">    <span class="keyword">val</span> value = environment.socketTextStream(<span class="string">&quot;43.140.193.43&quot;</span>, <span class="number">6000</span>).map(data=&gt;&#123;</span><br><span class="line">      <span class="keyword">val</span> strings = data.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">      loginfo(strings(<span class="number">0</span>),strings(<span class="number">1</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">val</span> resulttmp = value.assignTimestampsAndWatermarks(<span class="type">WatermarkStrategy</span>.forBoundedOutOfOrderness(<span class="type">Duration</span>.ofSeconds(<span class="number">2</span>)).withTimestampAssigner(<span class="keyword">new</span> <span class="type">SerializableTimestampAssigner</span>[loginfo] &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">extractTimestamp</span></span>(element: loginfo, recordTimestamp: <span class="type">Long</span>): <span class="type">Long</span> = &#123;</span><br><span class="line">        element.dt.toLong</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">//    val resulttmp2 = resulttmp.keyBy(_.log).window(new TumblingProcessingTimeWindows()).process(new myprocessTimeWindow)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    resulttmp2.print()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> flag = <span class="keyword">new</span> <span class="type">OutputTag</span>[loginfo](<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> resluttmp3 = resulttmp.keyBy(_.log).window(  <span class="type">TumblingProcessingTimeWindows</span>.of(<span class="type">Time</span>.seconds(<span class="number">10</span>))).allowedLateness(<span class="type">Time</span>.seconds(<span class="number">10</span>)).sideOutputLateData(flag).process( <span class="keyword">new</span> myprocessTimeWindow)</span><br><span class="line">    resluttmp3.print(<span class="string">&quot;resulttmp3的原始数据&quot;</span>)</span><br><span class="line">    resluttmp3.getSideOutput(flag).print(<span class="string">&quot;侧输出流&quot;</span>)</span><br><span class="line"></span><br><span class="line">    environment.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myprocessTimeWindow</span> <span class="keyword">extends</span> <span class="title">ProcessWindowFunction</span>[loginfo,<span class="type">String</span>,<span class="type">String</span>,<span class="type">TimeWindow</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">process</span></span>(key: <span class="type">String</span>, context: <span class="type">Context</span>, elements: <span class="type">Iterable</span>[loginfo], out: <span class="type">Collector</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    out.collect(<span class="string">s&quot;处理时间<span class="subst">$&#123;context.window.getStart&#125;</span>~<span class="subst">$&#123;context.window.getEnd&#125;</span>用户<span class="subst">$&#123;key&#125;</span>的点击次数<span class="subst">$&#123;elements.size&#125;</span>当前水位线为<span class="subst">$&#123;context.currentWatermark&#125;</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>  org.apache.flink.api.common.functions._</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myeventTimewindow</span> <span class="keyword">extends</span> <span class="title">AggregateFunction</span>[loginfo,<span class="type">String</span>,<span class="type">String</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">createAccumulator</span></span>(): <span class="type">String</span> = ???</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(value: loginfo, accumulator: <span class="type">String</span>): <span class="type">String</span> = ???</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getResult</span></span>(accumulator: <span class="type">String</span>): <span class="type">String</span> = ???</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(a: <span class="type">String</span>, b: <span class="type">String</span>): <span class="type">String</span> = ???</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="处理函数"><a href="#处理函数" class="headerlink" title="处理函数"></a>处理函数</h2><h3 id="基本处理函数（ProcessFunction）"><a href="#基本处理函数（ProcessFunction）" class="headerlink" title="基本处理函数（ProcessFunction）"></a>基本处理函数（ProcessFunction）</h3>]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式和反射</title>
    <url>/2022/10/19/10-19/</url>
    <content><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><ul>
<li>一个类只有一个实例</li>
<li>通过private ， 构造方法</li>
<li>static方法</li>
<li>饿汉式</li>
</ul>
<hr>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testmain1</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		A a1 = A.<span class="title function_">getInstance</span>();</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">A</span>(<span class="params"></span>) &#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> A a1 = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> A <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> a1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li>懒汉式</li>
</ul>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testmain1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	<span class="type">A</span> <span class="variable">a1</span> <span class="operator">=</span> A.getInstance();</span><br><span class="line">	<span class="type">B</span> <span class="variable">a2</span> <span class="operator">=</span> B.getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="title function_">B</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> B ai;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> B <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(ai == <span class="literal">null</span>) &#123;</span><br><span class="line">		ai = <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ai;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>开发的时候懒汉式用的比较多，因为可控</li>
<li>但是一般都在懒汉式哪里添加一个线程锁，为了线程安全，就是synchronized</li>
</ul>
<h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><ul>
<li>创建型设计模式</li>
<li>通过方法创建对象</li>
</ul>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul>
<li>静态工厂方法模式，例如单例模式，单例模式是特殊的工厂模式</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Diver</span> </span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Car driverCar(<span class="keyword">String</span> s) &#123;</span><br><span class="line">		<span class="keyword">if</span>(s.equalsIgnoreCase(<span class="string">&quot;宝马&quot;</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Car</span>(<span class="string">&quot;宝马&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(s.equalsIgnoreCase(<span class="string">&quot;奔驰&quot;</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Car</span>(<span class="string">&quot;奔驰&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(s.equalsIgnoreCase(<span class="string">&quot;奥迪&quot;</span>)) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Car</span>(<span class="string">&quot;奥迪&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><ul>
<li>非静态方法，不同的工厂生成不同的产品</li>
</ul>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> factory;</span><br><span class="line">public  <span class="class"><span class="keyword">class</span> <span class="title">bzfactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">public  <span class="type">Car</span> product() &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Car</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BenzCar</span> <span class="keyword">extends</span> <span class="title">bzfactory</span></span>&#123;</span><br><span class="line">public <span class="type">Car</span> product() &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> bz();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bmwfactory</span> <span class="keyword">extends</span> <span class="title">bzfactory</span></span>&#123;</span><br><span class="line">public <span class="type">Car</span> product() &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> bmw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bz</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bmw</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">audi</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这样可以不用动代码，可以直接加类，进而直接引</li>
<li>而第一种要把别的人已经打包好的解包进而对其代码进行操作</li>
<li>而这种不用，只要新加几个类就可以</li>
</ul>
<h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ul>
<li>工厂的工厂模式</li>
<li>给用户提供一个接口，可以创建多个产品族中的对象</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">	package com.<span class="property">icss</span>.<span class="property">javasechapter</span>.<span class="property">factory</span>;</span><br><span class="line"><span class="comment">//抽象工厂模式</span></span><br><span class="line">	<span class="keyword">interface</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">drive</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">interface</span> <span class="title class_">SportsCar</span> <span class="keyword">extends</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">isConvertible</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">interface</span> <span class="title class_">BussinessCar</span> <span class="keyword">extends</span> <span class="title class_">Car</span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">isAutoDoor</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 具体产品角色</span></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BenzSprotsCar</span> <span class="keyword">implements</span> <span class="title class_">SportsCar</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;Driving Benz S&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">isConvertible</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BenzBussinessCar</span> <span class="keyword">implements</span> <span class="title class_">BussinessCar</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;Driving Benz B&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">isAutoDoor</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BmwSprotsCar</span> <span class="keyword">implements</span> <span class="title class_">SportsCar</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;Driving Bmw S &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">isConvertible</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BmwBussinessCar</span> <span class="keyword">implements</span> <span class="title class_">BussinessCar</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;Driving Bmw B &quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">isAutoDoor</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">interface</span> <span class="title class_">CarFactory</span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="title class_">SportsCar</span> <span class="title function_">getSportsCar</span>();</span><br><span class="line">		<span class="keyword">public</span> <span class="title class_">BussinessCar</span> <span class="title function_">getBussinessCar</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BenzCarFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="title class_">SportsCar</span> <span class="title function_">getSportsCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BenzSprotsCar</span>();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">BussinessCar</span> <span class="title function_">getBussinessCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BenzBussinessCar</span>();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">BmwCarFactroy</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="title class_">SportsCar</span> <span class="title function_">getSportsCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BmwSprotsCar</span>();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="keyword">public</span> <span class="title class_">BussinessCar</span> <span class="title function_">getBussinessCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BmwBussinessCar</span>();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 抽象产品角色，具体产品角色与简单工厂模式类似，只是变得复杂了些，这里略。</span></span><br><span class="line">	<span class="comment">// 抽象工厂角色</span></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">AbstractCarFactory</span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="title class_">CarFactory</span> <span class="title function_">getCarFactory</span>(<span class="params"><span class="built_in">String</span> name</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="string">&quot;Benz&quot;</span>.<span class="title function_">equals</span>(name))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BenzCarFactory</span>();</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;Bmw&quot;</span>.<span class="title function_">equals</span>(name))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BmwCarFactroy</span>();</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MagnateAbstractFactory</span> &#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="title class_">CarFactory</span> factory = <span class="title class_">AbstractCarFactory</span>.<span class="title function_">getCarFactory</span>(<span class="string">&quot;Bmw&quot;</span>);</span><br><span class="line">				<span class="title class_">BussinessCar</span> car = factory.<span class="title function_">getBussinessCar</span>();</span><br><span class="line">				car.<span class="title function_">drive</span>();</span><br><span class="line">				<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(car.<span class="title function_">isAutoDoor</span>());</span><br><span class="line">			&#125; <span class="keyword">catch</span> (<span class="title class_">Exception</span> e) &#123;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul>
<li>订阅与发布</li>
<li>java通过Observable和Observer来实现</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> lesson13 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> aaa =<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">public</span> MyObsever[] <span class="keyword">array</span> = <span class="built_in">new</span> MyObsever[<span class="number">10</span>];</span><br><span class="line">	<span class="type">int</span> <span class="keyword">index</span> = <span class="number">-1</span>;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> addObsever(MyObsever obs) &#123;</span><br><span class="line">			<span class="keyword">array</span>[++<span class="keyword">index</span> &gt; <span class="number">9</span> ? <span class="keyword">index</span> = <span class="number">0</span> : <span class="keyword">index</span>] =obs;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> setAaa(<span class="type">int</span> newvalue) &#123;</span><br><span class="line">		this.aaa = newvalue;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>; i &lt; <span class="keyword">array</span>.length ; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="keyword">array</span>[i] == <span class="keyword">null</span>)break;</span><br><span class="line">				<span class="keyword">array</span>[i].<span class="keyword">update</span>(this.aaa , newvalue);</span><br><span class="line">			&#125;</span><br><span class="line">		this.aaa = newvalue;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		MyObsever ob = <span class="built_in">new</span> MyObsever();</span><br><span class="line">		lesson13 data = <span class="built_in">new</span> lesson13();</span><br><span class="line">		data.addObsever(ob);</span><br><span class="line">		data.setAaa(<span class="number">10000</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MyObsever &#123;</span><br><span class="line">	String <span class="type">name</span>;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> <span class="keyword">update</span>(<span class="type">int</span> aaa , <span class="type">int</span> newvalue) &#123;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;观察者&quot; + this.name + &quot;,&quot; + aaa + &quot;变成&quot; + newvalue);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>简单来说就是群发消息，或者说是改变github上的代码的那种改变</li>
</ul>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ul>
<li>代理模式给一个对象提供代理对象，比如代打，比如代刷xxx等</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestMain4</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Target t = <span class="keyword">new</span> Target();</span><br><span class="line">		Proxy proxy = <span class="keyword">new</span> Proxy();</span><br><span class="line">		proxy.target = t;</span><br><span class="line">		proxy.price();</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Target</span> &#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">price</span>()</span> &#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">&quot;---100--&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Proxy</span> &#123;</span><br><span class="line">	Target target;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">price</span>()</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">			target.price();</span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">&quot;50&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">			System.<span class="keyword">out</span>.println(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>就相当于中间商赚差价，商家会把货发送到代理这里，代理再提高价格发送出去，上面的这个叫静态代理</li>
</ul>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul>
<li>动态代理要用接口来实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson13;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.NonWritableChannelException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain4</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="comment">// 主方法调用代理的 </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">DynamicTargetInf</span> <span class="variable">inf</span> <span class="operator">=</span> DynamicProxFactory.getInstance();</span><br><span class="line">		inf.price();</span><br><span class="line">		<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> inf.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">		System.out.println(r);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DynamicTargetInf</span> <span class="comment">// 要代理的接口 </span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">price</span><span class="params">()</span>;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DynamicTarget</span> <span class="keyword">implements</span> <span class="title class_">DynamicTargetInf</span> <span class="comment">// 要代理的目标类，我们接下来要代理这里的方法</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">price</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;--target-100--&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;--target-i + j--&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> i + j;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// invocationHandle   invoke执行 handle句柄    welcome,xxx</span></span><br><span class="line">	<span class="keyword">class</span> <span class="title class_">DynamicProxFactory</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> <span class="comment">// 代理控制器，就是代理对象每次要运行方法都要经过他</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="type">DynamicTargetInf</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DynamicTarget</span>();	<span class="comment">// 一般这个地方是要传值进来的，不过这里为了方便，我们就直接赋值了</span></span><br><span class="line">	<span class="comment">// 代理对象每次运行方法的时候会执行</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable <span class="comment">// invoke方法是InvocationHandler接口的方法，这个方法是执行的意思</span></span><br><span class="line">	&#123;</span><br><span class="line">			<span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 定义一个返回值 ，Object类代表可以转化成任何类型</span></span><br><span class="line">		<span class="keyword">try</span> &#123;  <span class="comment">// try catch包裹，一是为了判断是不是出错，二是为了安全性</span></span><br><span class="line">		System.out.println(<span class="string">&quot;-之前-100---&quot;</span>);</span><br><span class="line">		<span class="comment">// 反射。当前方法执行。target对象的当前方法， args方法的参数</span></span><br><span class="line">		result = method.invoke(target, args);</span><br><span class="line">		<span class="comment">//	target.price();</span></span><br><span class="line">		System.out.println(<span class="string">&quot;-之后-50---&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;-异常-10---&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> DynamicTargetInf <span class="title function_">getInstance</span><span class="params">()</span> <span class="comment">// 要代理的目标的接口的实例化方法 ， 通过这个方法会把要代理对象的接口和代理工厂连接到一起</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> java.lang.reflect.Proxy.newProxyInstance(DynamicProxFactory.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;DynamicTargetInf.class&#125;, <span class="keyword">new</span> <span class="title class_">DynamicProxFactory</span>()); <span class="comment">// 这里的三个参数其实是，第一个是类加载器 ， 第二个是目标接口的类数组 ， 第三个是代理工厂的句柄，也就是句柄</span></span><br><span class="line">	<span class="keyword">return</span> (DynamicTargetInf) object;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对于静态的代理，每一个方法都要写一个代理，于是就很麻烦，可是对于动态的代理，他会自动的把那个方法里的方法都代理一边，只要在主函数里调用就行，</li>
<li>其实基本上思想就是，把要代理的目标变成一个接口，然后通过实例化这个接口，再通过接口的特性，让代理去实现目标的方法</li>
<li>私有的方法无法代理</li>
</ul>
<h1 id="反射，类的类型"><a href="#反射，类的类型" class="headerlink" title="反射，类的类型"></a>反射，类的类型</h1><p>类的类型，就是所有类都可以有的东西比如：属性，构造方法，方法。</p>
<ul>
<li>可以用这些类的类型去创建一个新类</li>
<li>而我们如果想获取这个类的类型，就要用到反射，</li>
<li>他可以获取这个类的类型，就是上面说的属性，构造方法，方法</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> wjw1 &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">	<span class="comment">// 获取反射的三种方式 第一种</span></span><br><span class="line">	<span class="keyword">Class</span> clzz1 = student.<span class="keyword">class</span>;</span><br><span class="line">	<span class="comment">// 第二中 </span></span><br><span class="line">	student student = <span class="keyword">new</span> student();</span><br><span class="line">	<span class="keyword">Class</span> a = student.getClass();</span><br><span class="line">	<span class="comment">// 第三种</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">Class</span> ae = <span class="keyword">Class</span>.forName(<span class="string">&quot;作业.student&quot;</span>);</span><br><span class="line">	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	Constructor[] cons = clzz1.getConstructors(); <span class="comment">// 查看构造器</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cons.length; i++) &#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(cons[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	Field[] d = a.getFields(); <span class="comment">// 查看变量，非私有的</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d.length; i++) &#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(d[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	Field[] f = a.getDeclaredFields(); <span class="comment">// 私有变量只能这样查看</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; f.length; i++) &#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(f[i]);</span><br><span class="line">	&#125;</span><br><span class="line">		Constructor Con; <span class="comment">// 获取有特定参数的构造器</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		Con = clzz1.getConstructor(<span class="keyword">new</span> <span class="keyword">Class</span>[] &#123;String.<span class="keyword">class</span> , <span class="keyword">int</span>.<span class="keyword">class</span>&#125;);<span class="comment">//里面放那个类型的对应的.class</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (NoSuchMethodException | SecurityException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">try</span> &#123; <span class="comment">// 通过反射进行实例化，证明了，实例化不一定非要用new</span></span><br><span class="line">		Object object = Con.newInstance(<span class="keyword">new</span> Object[] &#123;<span class="number">343</span>,<span class="string">&quot;sdajkdha&quot;</span>&#125;);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException | IllegalArgumentException</span><br><span class="line">			| InvocationTargetException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面，是我们要运行的方法里如何写</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">student</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line"><span class="keyword">private</span> <span class="title class_">String</span> num;</span><br><span class="line"><span class="keyword">private</span> <span class="title class_">String</span> sex;</span><br><span class="line"><span class="keyword">public</span> int age;</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setName</span>(<span class="params"><span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setNum</span>(<span class="params"><span class="built_in">String</span> num</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getSex</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setSex</span>(<span class="params"><span class="built_in">String</span> sex</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> int <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setAge</span>(<span class="params">int age</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">student</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">super</span>();</span><br><span class="line">	<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">student</span>(<span class="params"> int x , <span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = x;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line">clzz1.<span class="title function_">getMethods</span>() <span class="comment">// 获取里面所有可以访问的方法</span></span><br><span class="line">clzz1.<span class="title function_">getMethod</span>(name, parameterTypes) <span class="comment">// 获取特定的可以访问的方法</span></span><br><span class="line">clzz1.<span class="title function_">getDeclaredMethod</span>(name, parameterTypes); <span class="comment">// 查找特定参数的自己定义的方法</span></span><br><span class="line">clzz1.<span class="title function_">getDeclaredMethods</span>(); <span class="comment">// 查询所有自己定义的方法</span></span><br><span class="line"><span class="title class_">Method</span> m = clzz1.<span class="title function_">getDeclaredMethod</span>(name, parameterTypes);</span><br><span class="line"><span class="title class_">Object</span> r = m.<span class="title function_">invoke</span>(obj, args); <span class="comment">// 执行前面一个参数里的方法m方法 ， 后面的一个是这个方法的参数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="title class_">Field</span> f1 =	clzz1.<span class="title function_">getField</span>(<span class="string">&quot;name&quot;</span>); <span class="comment">// 获取单独的与里面字符串匹配的变量 ， 如果是私有的要用declaer方法，比如</span></span><br><span class="line"> <span class="title class_">Field</span> f2 = clzz1.<span class="title function_">getDeclaredField</span>(<span class="string">&quot;name&quot;</span>); <span class="comment">// 可以获取私有的变量</span></span><br><span class="line"> f1.<span class="title function_">setAccessible</span>(<span class="literal">true</span>); <span class="comment">// 修改访问权限修饰符，true代表public false代表private</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>下面只是个普通的方法</li>
<li>这是两个class，要注意，因为都是public，所以必须单独建立两个class，才可以</li>
</ul>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ul>
<li>用@interface</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"><span class="meta">@Target</span> (value = &#123;ElementType.CONSTRUCTOR,ElementType.FIELD,ElementType.METHOD,ElementType.TYPE&#125;) <span class="comment">// target是代表要修饰的目标种类，比如方法，构造器，属性等</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.SOURCE)</span> <span class="comment">// 代表这个存活的位置，一般我们用不到，这个是存活于源码里，编译之后就无了</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.CLASS)</span> <span class="comment">// 这个是存活与class中</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span> <span class="comment">// 这个是存活在运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> lesson14 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面的@Retention只能用一个，而且只能选择一个</li>
<li>而后再有一个类</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"><span class="meta">@lesson14</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">try1</span> &#123;</span><br><span class="line">	<span class="meta">@lesson14</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面是一般用法。</li>
<li>如果在接口上面增加@Target，就是代表让你可以修饰的东西</li>
<li>@Retention 代表设置其存活的地方</li>
</ul>
<h2 id="value"><a href="#value" class="headerlink" title="value"></a>value</h2><p>可以在接口内写value，如果加上了value则在引用的时候要在括号内写上内容<br>如下：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">lesson14</span> </span>&#123;</span><br><span class="line"><span class="keyword">String</span> value()</span><br><span class="line"><span class="keyword">default</span> <span class="string">&quot;默认信息&quot;</span>; <span class="comment">// 代表默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@lesson14</span>(<span class="string">&quot;klsdajhal&quot;</span>)</span><br><span class="line">或者<span class="variable">@lesson14</span>(value = <span class="string">&quot;sadajd&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>io流</title>
    <url>/2022/10/20/10-20/</url>
    <content><![CDATA[<h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><ul>
<li>字节流的结尾一般都是InputStream ， OutputStream</li>
<li>是个抽象类</li>
<li>可以自动关闭</li>
<li>顶层类，上面就是Object</li>
<li>这个东西是要有参照物的</li>
</ul>
<h2 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sd3333sdfse</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		OutputStream os1;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			os1 = <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>( <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\a.txt&quot;</span>), <span class="literal">false</span>); <span class="comment">// 这个false代表是覆盖源文件，如果是true就是把字符串加入</span></span><br><span class="line">			<span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;hello word&quot;</span>;</span><br><span class="line">			os1.write(s.getBytes());</span><br><span class="line">			os1.flush();  <span class="comment">// 落盘到磁盘上</span></span><br><span class="line">			os1.close(); <span class="comment">// 关闭文件输出流</span></span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e1) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">read</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line"><span class="comment">//			while(is.available() != 0) &#123;</span></span><br><span class="line"><span class="comment">//				System.out.println((char)is.read()); // 默认一次只读一个字符</span></span><br><span class="line"><span class="comment">//			&#125;</span></span><br><span class="line">	</span><br><span class="line">		<span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>]; <span class="comment">// 通过设置缓冲区进行扩展一次可读的字符数量，如果是字符型，那这个byte要变char</span></span><br><span class="line">		<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 设置个长度</span></span><br><span class="line">		<span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>) <span class="comment">// 判断我是不是超出缓冲区的限定，如果超出，就只读取超出的部分</span></span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buffer , <span class="number">0</span> , len)); </span><br><span class="line">		&#125;</span><br><span class="line">		is.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li>定义：File d &#x3D; new File(“XXxxx”，”name”); &#x2F;&#x2F; 这里XXxxx是文件目录 , 第二个是文件名字</li>
<li>文件或者目录</li>
</ul>
<h2 id="exist（）"><a href="#exist（）" class="headerlink" title="exist（）"></a>exist（）</h2><ul>
<li>文件是有大小的，目录是无大小</li>
<li>判断文件&#x2F;目录是不是存在</li>
</ul>
<h2 id="isFile"><a href="#isFile" class="headerlink" title="isFile"></a>isFile</h2><ul>
<li>代表判断是不是文件</li>
</ul>
<h2 id="isDirectory"><a href="#isDirectory" class="headerlink" title="isDirectory"></a>isDirectory</h2><ul>
<li>代表是不是文件夹</li>
</ul>
<h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><ul>
<li>代表查看其字节的长度，大小，但是文件有大小，目录无大小</li>
</ul>
<h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><ul>
<li>代表删除文件，注意这里删除的文件不是送进回收站里的，如果要删除目录，要先把里面的文件清空</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> file &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">	// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line"></span><br><span class="line">	File m = <span class="built_in">new</span> File(&quot;D:\\&quot; , &quot;a.txt&quot;);</span><br><span class="line">	File k = <span class="built_in">new</span> File(&quot;D//&quot;);</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println(m.<span class="keyword">exists</span>());</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println(k.<span class="keyword">exists</span>());</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println(k.isFile());</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println(m.isDirectory());</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println(k.length());</span><br><span class="line">	<span class="keyword">System</span>.<span class="keyword">out</span>.println(k.<span class="keyword">delete</span>());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h2><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">public static void SHANCHU(File k) &#123;</span><br><span class="line">	File[] ds <span class="operator">=</span>	k.listFiles()<span class="comment">; </span></span><br><span class="line">	for (int i <span class="operator">=</span> <span class="number">0</span><span class="comment">; i &lt; ds.length ; i++ ) &#123;</span></span><br><span class="line">		File[] h <span class="operator">=</span> ds[i].listFiles()<span class="comment">;</span></span><br><span class="line">		if(h <span class="operator">=</span><span class="operator">=</span> null) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;这个是个文件&quot;</span>)<span class="comment">;</span></span><br><span class="line">			ds[i].delete()<span class="comment">;</span></span><br><span class="line">		&#125; else &#123;</span><br><span class="line">			k.delete()<span class="comment">;</span></span><br><span class="line">			SHANCHU(ds[i])<span class="comment">;</span></span><br><span class="line">				&#125;</span><br><span class="line">		k.delete()<span class="comment">;</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="makedir"><a href="#makedir" class="headerlink" title="makedir"></a>makedir</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> adsgqjd &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;D:/a/abc.txt&quot;</span>);</span><br><span class="line">	System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.exists());</span><br><span class="line">	System.out.<span class="keyword">println</span>(<span class="keyword">file</span>.mkdir());</span><br><span class="line">	<span class="keyword">File</span> file2 =<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;D:/a/c/v/bv/nb&quot;</span>);</span><br><span class="line">	System.out.<span class="keyword">println</span>(file2.mkdirs());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>我们通过mkdirs可以直接深度创建</li>
<li>但是如果没有父目录，一般的文件就无法创建</li>
</ul>
<h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> File getCopy(File f1) &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="keyword">String</span> sufString = f1.getName().substring(f1.getName().lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">	<span class="keyword">String</span> qi = f1.getName().substring(<span class="number">0</span>, f1.getName().lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">	<span class="keyword">String</span> use = qi + <span class="string">&quot;-副本&quot;</span> + sufString;</span><br><span class="line">	File <span class="keyword">new</span><span class="type">f</span> = <span class="keyword">new</span> <span class="type">File</span>(f1.getParent() , use);</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">new</span><span class="type">f</span>.exists()) &#123;</span><br><span class="line">	<span class="keyword">return</span>	getCopy(<span class="keyword">new</span><span class="type">f</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span><span class="type">f</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>字符流</title>
    <url>/2022/10/21/10-21/</url>
    <content><![CDATA[<h1 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h1><ul>
<li>Write是抽象方法</li>
<li>其里面定义了传输大小（在源码中）</li>
<li>在write里</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">static</span> <span class="keyword">final</span> <span class="type">int</span> WRITE_BUFFER_SIZE = <span class="number">1024</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>所谓的字符流只是把字节流包装起来，证据在源码里</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line">	<span class="keyword">import</span> java.io.IOException;</span><br><span class="line">	<span class="keyword">import</span> java.io.Writer;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">char</span>流 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">Writer</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line">		w.write(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">		w.append(<span class="string">&quot;hello Bgido&quot;</span>);</span><br><span class="line">		w.write(<span class="string">&quot;hello java&quot;</span>.toCharArray());</span><br><span class="line">		w.flush();</span><br><span class="line">		w.close();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意这里的write是直接在文件里重写数据，而append是增加数据，因为write底层调用的是write方法</li>
</ul>
<h1 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h1><ul>
<li>出现的原因，是因为字节流可能存不住，所以才出现，会造成乱码</li>
</ul>
<h2 id="字符分类以及编码格式"><a href="#字符分类以及编码格式" class="headerlink" title="字符分类以及编码格式"></a>字符分类以及编码格式</h2><ul>
<li>一般在英文状态下一个字母或字符占用一个字节，一个汉字用两个字节表示。</li>
<li>ASCII 码中，一个英文字母(不分大小写)为一个字节，一个中文汉字为两个字节。</li>
<li>UTF-8 编码中，一个英文字为一个字节，一个中文为三个字节。</li>
<li>Unicode 编码中，一个英文为一个字节，一个中文为两个字节。</li>
<li>符号：英文标点为一个字节，中文标点为两个字节。例如：英文句号 . 占1个字节的大小，中文句号 。占2个字节的大小。</li>
<li>UTF-16 编码中，一个英文字母字符或一个汉字字符存储都需要 2 个字节(Unicode 扩展区的一些汉字存储需要 4 个字节)。</li>
<li>UTF-32 编码中，世界上任何字符的存储都需要 4 个字节。</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">inputchar1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">Reader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line">		reader.close();</span><br><span class="line">		<span class="comment">// 这个也可以读取文件</span></span><br><span class="line">		<span class="type">Reader</span> <span class="variable">reader1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/a.txt&quot;</span>) , <span class="string">&quot;UTF-8&quot;</span>); <span class="comment">// 古老的方式，不过可以直接改代码的编码格式</span></span><br><span class="line">		<span class="type">char</span>[] buffer = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>((len = reader1.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buffer , <span class="number">0</span> ,len));</span><br><span class="line">		&#125;</span><br><span class="line">		reader1.close();</span><br><span class="line">		<span class="keyword">while</span>((len = reader.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buffer, <span class="number">0</span>, len));</span><br><span class="line">		&#125;</span><br><span class="line">		reader.close();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">		<span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="具体的流"><a href="#具体的流" class="headerlink" title="具体的流"></a>具体的流</h1><h2 id="buffered系类"><a href="#buffered系类" class="headerlink" title="buffered系类"></a>buffered系类</h2><ul>
<li>代表缓冲区系类</li>
<li></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sdahasdk</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">BufferedInputStream</span> <span class="variable">us</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/a.txt&quot;</span>)); <span class="comment">// 要自己定义缓冲区</span></span><br><span class="line">		us.skip(<span class="number">1</span>);</span><br><span class="line">		<span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>((len = us.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">			System.out.println( <span class="keyword">new</span> <span class="title class_">String</span>(buffer , <span class="number">0</span> ,len ));</span><br><span class="line">		&#125;</span><br><span class="line">		us.close();</span><br><span class="line">	</span><br><span class="line">		<span class="type">BufferedReader</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;D:/a.txt&quot;</span>)); <span class="comment">// 里面有设置默认的缓冲区在源码里可以点进去查看</span></span><br><span class="line">		<span class="keyword">while</span>(r.ready()) <span class="comment">// ready是可读性，可读就true，不可读就fasle</span></span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(	r.readLine());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>只有顶层类的方法是没有线程锁的</li>
<li>同样也有writer的方法</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">BufferedWriter wwe = <span class="keyword">new</span> <span class="type">BufferedWriter</span>( <span class="keyword">new</span> <span class="type">FileWriter</span>(<span class="string">&quot;D:/a.txt&quot;</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>然后通过wwe.xxx访问方法</li>
</ul>
<h1 id="InputStreamReader-x2F-Writer"><a href="#InputStreamReader-x2F-Writer" class="headerlink" title="InputStreamReader&#x2F;Writer"></a>InputStreamReader&#x2F;Writer</h1><ul>
<li>比较古老</li>
<li>因为可以设置编码格式</li>
<li>在构造方法里</li>
<li>和上面的FileInputStream一样</li>
</ul>
<h1 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h1><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">io</span>.<span class="property">Serializable</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">stu</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="variable language_">super</span>();</span><br><span class="line">	<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params">int x , <span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = x;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line"><span class="keyword">private</span> transient int age;</span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setName</span>(<span class="params"><span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> int <span class="title function_">getAge</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setAge</span>(<span class="params">int age</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;stu [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这个是个学生类，代表我们要实例化的类，要加个可序列化的标记性接口</li>
<li>transient是不参与序列化的</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lesson15</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">ObjectOutputStream</span> <span class="variable">oo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:/student.dat&quot;</span>));</span><br><span class="line">			<span class="type">stu</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">stu</span>(<span class="number">15</span> , <span class="string">&quot;tom&quot;</span>);</span><br><span class="line">			oo.writeObject(s);</span><br><span class="line">			oo.flush();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lesson15</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">	</span><br><span class="line">		<span class="type">ObjectInputStream</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/student.dat&quot;</span>));</span><br><span class="line">		<span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> d.readObject();</span><br><span class="line">		System.out.println(o);</span><br><span class="line">		d.close();</span><br><span class="line">	</span><br><span class="line">	&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">scanner</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>( <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/a.txt&quot;</span>) , <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">			System.out.println(scanner.nextLine());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Channnel流"><a href="#Channnel流" class="headerlink" title="Channnel流"></a>Channnel流</h1><ul>
<li>其是新io包里的</li>
<li>是nio里的，用的是堆外内存</li>
<li>就是jvm内存，所以效率会比在堆里的数组缓冲区效率更高</li>
<li>追主要的是对接，管道分为输入管道和输出管道</li>
<li>当他们对接上就可以实现复制等操作了</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Channel</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line">	FileInputStream ii;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		ii = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">		<span class="type">FileChannel</span> <span class="variable">cha</span> <span class="operator">=</span> ii.getChannel();</span><br><span class="line">		<span class="type">FileChannel</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:/a1.txt&quot;</span>).getChannel();	</span><br><span class="line">		cha.transferTo(<span class="number">0</span>, file.length(), out); <span class="comment">// 这个输入管道的对接口 三个参数 ，第一个是开始复制的起始下标，第二个是文件长度 ，第三个是输出管道</span></span><br><span class="line">		out.transferFrom(cha, <span class="number">0</span>, file.length()); <span class="comment">// 这个是输出管道的接口 三个参数 ，第一个是输入管道，第二个是起始下标 ，第三个是文件长度</span></span><br><span class="line">	&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>两种管道对接的方式造成的结果是一样的，都是复制文件，但是如果这两个代码要制作的文件存在，则进行覆盖</li>
</ul>
<h1 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h1><ul>
<li>解决字符串的加法的问题，</li>
<li>字符串的+是方法的重载，每次都会返回一个对象</li>
<li>而下面两个则是用堆运存运算省区了一个变量</li>
<li>而builder无线程锁，所以比buffer要快</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">package 项目实训;</span><br><span class="line">public <span class="keyword">class</span> sr &#123;</span><br><span class="line">public static void main(String<span class="literal">[]</span> args) &#123;</span><br><span class="line">	String s = <span class="string">&quot;shdghgsg&quot;</span>;</span><br><span class="line">	long start = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">	 <span class="comment">// 拼接太费事</span></span><br><span class="line">	String h = s + <span class="string">&quot;shak&quot;</span>;</span><br><span class="line">	long <span class="keyword">end</span> = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">	StringBuffer sb =<span class="keyword">new</span> <span class="constructor">StringBuffer()</span>;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="keyword">end</span> - start);</span><br><span class="line">	sb.append(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">	long start1 = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">	 <span class="comment">// 拼接太费事</span></span><br><span class="line">	sb.append(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">	long end1 = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(end1 - start1);</span><br><span class="line">	 <span class="comment">// 更快的</span></span><br><span class="line">	StringBuilder sd = <span class="keyword">new</span> <span class="constructor">StringBuilder()</span>;</span><br><span class="line">	long start2 = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">	 <span class="comment">// 拼接太费事</span></span><br><span class="line">	sd.append(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">	long end2 = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>current<span class="constructor">TimeMillis()</span>;</span><br><span class="line">	<span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(end2 - start2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="比较快的排序方式"><a href="#比较快的排序方式" class="headerlink" title="比较快的排序方式"></a>比较快的排序方式</h2><ul>
<li>Arrays.sort(要排序的数组)默认是正序</li>
<li>也可以变成倒序，但是要是泛型数组就可以</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line">Arrays.<span class="keyword">sort</span>(a);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">	System.out.<span class="keyword">println</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ul>
<li>进程是程序对应的资源</li>
<li>线程是cpu运行的最小单位</li>
<li>线程是随机切换，一个程序中</li>
</ul>
<h2 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xiancheng</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">	System.out.println(Thread.currentThread());</span><br><span class="line"></span><br><span class="line">	<span class="type">Task1</span> <span class="variable">task1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Task1</span>();</span><br><span class="line">	<span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task1);</span><br><span class="line">	t1.setName(<span class="string">&quot;第一个线程&quot;</span>); <span class="comment">// 线程的名字</span></span><br><span class="line">	t1.start(); <span class="comment">// 线程开始</span></span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">Thread</span>(task1).start(); <span class="comment">// 这种方式也可以进行线程启动</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Task1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> <span class="comment">// 任务</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">101</span>; i++) &#123;</span><br><span class="line">	</span><br><span class="line">		System.out.println(Thread.currentThread() + <span class="string">&quot;@&quot;</span> +i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在做一件事的时候还是单线程比较快，多线程可以一起干很多事情，所以就相当于一个人和多个人的差距</li>
<li>意思就是单线程不一定比多线程慢，因为多线程存在上下文切换</li>
<li>首先分配cpu资源的单位是进程。一个进程所获得到的cpu资源是一定的。程序在执行的过程中消耗的是cpu，比如一个单核cpu，多个线程同时执行工作时，需要不断切换执行(上下文切换)，单个线程时间耗费更多了，而单线程只是一个线程跑。</li>
<li>多线程的总体执行时间和单线程是一样的，但是多线程中单个线程的执行时间是单线程的多倍。<br>多线程提高的是并发数量，比如现在有一个4核cpu的服务器，同一时间可执行4个线程，这样处理线程任务的速度比较快。但是多出来的线程，5个，6个，7个，多出的线程还是要等待。</li>
</ul>
<h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。</p>
<p>概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换会这个任务时，可以再加载这个任务的状态。任务从保存到再加载的过程就是一次上下文切换。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以说其实多线程不一定能够比单线程快是因为上下文切换，以及线程等待的问题</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>线程</title>
    <url>/2022/10/24/10-24/</url>
    <content><![CDATA[<h1 id="线程的概念以及原理"><a href="#线程的概念以及原理" class="headerlink" title="线程的概念以及原理"></a>线程的概念以及原理</h1><h2 id="操作系统中线程和进程的概念"><a href="#操作系统中线程和进程的概念" class="headerlink" title="操作系统中线程和进程的概念"></a>操作系统中线程和进程的概念</h2><ul>
<li>进程是指一个内存中运行的应用程序，每个进程都有自己的独立空间，一个进程中可以启动多个线程，比如在windows里一个运行的exe就是一个进程</li>
<li>线程是指进程中的一个执行流程，一个进程中可以用运行多个线程。线程总是属于某个进程的，进程中多个线程共享进程的内存</li>
</ul>
<h2 id="java中的线程"><a href="#java中的线程" class="headerlink" title="java中的线程"></a>java中的线程</h2><ul>
<li>在java中，线程是指两件不同的事</li>
<li>java.lang.Thread类的一个实例</li>
<li>线程的执行</li>
<li>使用java.lang.Thread类或者java.lang.Runnable接口编写代码来定义实例化，和启动新线程。</li>
<li>一个Thread类实例只是一个对象，像java和其他对象一样，有变量和方法，生死于堆上</li>
<li>在java里每个线程都拥有一个调用栈，即使不在程序中创建任何的新线程，线程也会在后台运行着</li>
<li>一个java应用总是从main方法开始，main方法运行在一个线程里，他被称为主线程</li>
<li>一旦创建一个线程，就会产生一个新的栈调用。</li>
<li>线程总体分为两类，用户线程和守护线程</li>
<li>当所有用户距线程执行完毕，jvm自己关闭，守护线程一般是由操作系统或者或者用户自己创建</li>
</ul>
<h1 id="创建与启动"><a href="#创建与启动" class="headerlink" title="创建与启动"></a>创建与启动</h1><ul>
<li>扩展java.lang.Thread</li>
<li>这个类中有个run方法，应该注意其用法</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果该线程是使用独立的Runnable运行对象构造的，则调用该Runnable对象的run方法，要不然，该方法不执行任何操作并返回</li>
<li>Thread的子类应该重写这个方法，因为其底层也是继承的Runnable接口</li>
<li>run操作里是他会执行的事情</li>
</ul>
<h2 id="实例化线程"><a href="#实例化线程" class="headerlink" title="实例化线程"></a>实例化线程</h2><ul>
<li>如果是用Thread，则直接new就行</li>
<li>如果是实现了，java.lang.Runnable接口的类，则用Thread的构造方法:</li>
<li></li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="constructor">Thread(Runnable <span class="params">target</span>)</span></span><br><span class="line"><span class="constructor">Thread(Runnable <span class="params">target</span> , String <span class="params">name</span>)</span></span><br><span class="line"><span class="constructor">Thread(ThreadGroup <span class="params">group</span>, Runnable <span class="params">target</span>)</span></span><br><span class="line"><span class="constructor">Thread(ThreadGroup <span class="params">group</span>, Runnable <span class="params">target</span>, String <span class="params">name</span>)</span></span><br><span class="line"><span class="constructor">Thread(ThreadGroup <span class="params">group</span>, Runnable <span class="params">target</span>, String <span class="params">name</span>, <span class="params">long</span> <span class="params">stackSize</span>)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h2><ul>
<li>在线程的Thread对象上调用Start（）方法而不是用run或者别的</li>
<li>在调用start之前线程处于新状态中，新状态指有一个Thread对象，但是还没有一个真正的线程</li>
<li>调用了之后发生了一系列复杂的事情</li>
<li>尝试启动新的线程（具有新的调用栈）</li>
<li>该线程从新状态转移到可运行状态</li>
<li>当线程获得执行机会，就会调用run</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 实现Runnable接口的类</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> leizhimin 2008-9-13 18:12:10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span><span class="keyword">class</span> <span class="title class_">DoSomethingimplements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">DoSomething</span>(<span class="title class_">String</span> name) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoid <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (long k = <span class="number">0</span>; k &lt; <span class="number">100000000</span>; k++) ;</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(name + <span class="string">&quot;: &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试Runnable类实现的多线程程序</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> leizhimin 2008-9-13 18:15:02</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span><span class="keyword">class</span> <span class="title class_">TestRunnable</span> &#123;</span><br><span class="line">    publicstaticvoid <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">DoSomething</span> ds1 = <span class="keyword">new</span> <span class="title class_">DoSomething</span>(<span class="string">&quot;阿三&quot;</span>);</span><br><span class="line">        <span class="title class_">DoSomething</span> ds2 = <span class="keyword">new</span> <span class="title class_">DoSomething</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Thread</span> t1 = <span class="keyword">new</span> <span class="title class_">Thread</span>(ds1);</span><br><span class="line">        <span class="title class_">Thread</span> t2 = <span class="keyword">new</span> <span class="title class_">Thread</span>(ds2);</span><br><span class="line"></span><br><span class="line">        t1.<span class="title function_">start</span>();</span><br><span class="line">        t2.<span class="title function_">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="扩展Thread类实现多线程的例子"><a href="#扩展Thread类实现多线程的例子" class="headerlink" title="扩展Thread类实现多线程的例子"></a>扩展Thread类实现多线程的例子</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试扩展Thread类实现的多线程程序</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> leizhimin 2008-9-13 18:22:13</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span><span class="keyword">class</span> <span class="title class_">TestThreadextends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">TestThread</span>(<span class="title class_">String</span> name) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoid <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(long k= <span class="number">0</span>; k &lt;<span class="number">100000000</span>;k++);</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="variable language_">this</span>.<span class="title function_">getName</span>()+<span class="string">&quot; :&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicstaticvoid <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="title class_">Thread</span> t1 = <span class="keyword">new</span> <span class="title class_">TestThread</span>(<span class="string">&quot;阿三&quot;</span>);</span><br><span class="line">        <span class="title class_">Thread</span> t2 = <span class="keyword">new</span> <span class="title class_">TestThread</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        t1.<span class="title function_">start</span>();</span><br><span class="line">        t2.<span class="title function_">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul>
<li>线程的名字，一个运行中的线程总是有名字的，名字有两个来源，第一是自己，第二是虚拟机</li>
<li>而且主线程的名字总是mian，非主线程的名字不确定</li>
<li>线程都可以设置名字，主线程的也不例外</li>
<li>线程的调用不一定是顺序的他们是随机的</li>
<li>线程一旦启动，他就不可能重新启动</li>
<li>线程的调度是jvm的一部分，在cpu的机器上，实际上一次只能运行一个线程，一次只有一个线程栈执行，jvm线程调度程序决定实际运行的哪个处于可运行的状态</li>
<li>尽管我们无法控制线程调度的程序，但是可以通过别的方式来影响线程调度的方式</li>
</ul>
<h1 id="线程的转换"><a href="#线程的转换" class="headerlink" title="线程的转换"></a>线程的转换</h1><ul>
<li>线程的状态转换是线程控制的基础。线程状态总的可分为五大状态：分别是生、死、可运行、运行、等待&#x2F;阻塞。</li>
<li>可运行状态：当线程有资格运行，但调度程序还没有把它选定为运行线程时线程所处的状态。当start()方法调用时，线程首先进入可运行状态。在线程运行之后或者从阻塞、等待或睡眠状态回来后，也返回到可运行状态。</li>
<li>运行状态：线程调度程序从可运行池中选择一个线程作为当前线程时线程所处的状态。这也是线程进入运行状态的唯一一种方式</li>
<li>等待&#x2F;阻塞&#x2F;睡眠状态：这是线程有资格运行时它所处的状态。实际上这个三状态组合为一种，其共同点是：线程仍旧是活的，但是当前没有条件运行。换句话说，它是可运行的，但是如果某件事件出现，他可能返回到可运行状态。</li>
<li>死亡态：当线程的run()方法完成时就认为它死去。这个线程对象也许是活的，但是，它已经不是一个单独执行的线程。线程一旦死亡，就不能复生。如果在一个死去的线程上调用start()方法，会抛出java.lang.IllegalThreadStateException异常。</li>
</ul>
<h2 id="阻止线程的执行"><a href="#阻止线程的执行" class="headerlink" title="阻止线程的执行"></a>阻止线程的执行</h2><ul>
<li>对于线程的阻止，考虑一下三个方面，不考虑IO阻塞的情况：</li>
<li>睡眠</li>
<li>等待</li>
<li>睡眠：Thread.sleep(long millis)和Thread.sleep(long millis, int nanos)静态方法强制当前正在执行的线程休眠（暂停执行），以“减慢线程”。当线程睡眠时，它入睡在某个地方，在苏醒之前不会返回到可运行状态。当睡眠时间到期，则返回到可运行状态。</li>
<li>线程睡眠的原因：线程执行太快，或者需要强制进入下一轮，因为Java规范不保证合理的轮换。</li>
<li>睡眠的实现：调用静态方法。</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>sleep(<span class="number">123</span>);</span><br><span class="line">      &#125; catch (InterruptedException e) &#123;</span><br><span class="line">          e.print<span class="constructor">StackTrace()</span>; </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>睡眠的位置：为了让其他线程有机会执行，可以将Thread.sleep()的调用放线程run()之内。这样才能保证该线程执行过程中会睡眠。</li>
<li>线程睡眠是帮助所有线程获得运行机会的最好方法。</li>
<li>线程睡眠到期自动苏醒，并返回到可运行状态，不是运行状态。sleep()中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就开始执行。</li>
<li>sleep()是静态方法，只能控制当前正在运行的线程。</li>
</ul>
<h2 id="线程的优先级和线程让步yield"><a href="#线程的优先级和线程让步yield" class="headerlink" title="线程的优先级和线程让步yield()"></a>线程的优先级和线程让步yield()</h2><ul>
<li>线程的让步是通过Thread.yield()来实现的。yield()方法的作用是：暂停当前正在执行的线程对象，并执行其他线程。</li>
<li>线程总是存在优先级，优先级范围在1~10之间。JVM线程调度程序是基于优先级的抢先调度机制。在大多数情况下，当前运行的线程优先级将大于或等于线程池中任何线程的优先级。但这仅仅是大多数情况。</li>
<li>注意：当设计多线程应用程序的时候，一定不要依赖于线程的优先级。因为线程调度优先级操作是没有保障的，只能把线程优先级作用作为一种提高程序效率的方法，但是要保证程序不依赖这种操作。</li>
<li>当线程池中线程都具有相同的优先级，调度程序的JVM实现自由选择它喜欢的线程。这时候调度程序的操作有两种可能：一是选择一个线程运行，直到它阻塞或者运行完成为止。二是时间分片，为池内的每个线程提供均等的运行机会。<br>-设置线程的优先级：线程默认的优先级是创建它的执行线程的优先级。可以通过setPriority(int newPriority)更改线程的优先级。例如：</li>
</ul>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">Thread t <span class="operator">=</span> new MyThread()<span class="comment">;</span></span><br><span class="line">       t.setPriority(<span class="number">8</span>)<span class="comment">;</span></span><br><span class="line">       t.start()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>线程优先级为1<del>10之间的正整数，JVM从不会改变一个线程的优先级。然而，1</del>10之间的值是没有保证的。一些JVM可能不能识别10个不同的值，而将这些优先级进行每两个或多个合并，变成少于10个的优先级，则两个或多个优先级的线程可能被映射为一个优先级。</li>
<li>线程默认优先级是5，Thread类中有三个常量，定义线程优先级范围：</li>
<li>static int MAX_PRIORITY线程可以具有的最高优先级。</li>
<li>static int MIN_PRIORITY线程可以具有的最低优先级。</li>
<li>static int NORM_PRIORITY分配给线程的默认优先级。</li>
</ul>
<h2 id="Thread-yield-方法"><a href="#Thread-yield-方法" class="headerlink" title="Thread.yield()方法"></a>Thread.yield()方法</h2><ul>
<li>Thread.yield()方法作用是：暂停当前正在执行的线程对象，并执行其他线程。</li>
<li>yield()应该做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。</li>
<li>结论：yield()从未导致线程转到等待&#x2F;睡眠&#x2F;阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。</li>
</ul>
<h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><ul>
<li>Thread的非静态方法join()让一个线程B“加入”到另外一个线程A的尾部。在A执行完毕之前，B不能工作</li>
</ul>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">Thread t <span class="operator">=</span> new MyThread()<span class="comment">;</span></span><br><span class="line">      t.start()<span class="comment">;</span></span><br><span class="line">      t.join()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>另外，join()方法还有带超时限制的重载版本。例如t.join(5000);则让线程等待5000毫秒，如果超过这个时间，则停止等待，变为可运行状态。</li>
<li>线程的加入join()对线程栈导致的结果是线程栈发生了变化，当然这些变化都是瞬时的。</li>
</ul>
<h2 id="Object类的wait方法"><a href="#Object类的wait方法" class="headerlink" title="Object类的wait方法"></a>Object类的wait方法</h2><ul>
<li>让当前线程进入等待池</li>
<li>通过Object类的notify方法通知线程池随机让一条回归</li>
<li>而notifyall 是让所有回归</li>
</ul>
<h1 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h1><ul>
<li>synchronized</li>
<li>是一种对象锁，可重入，不可中断，实际上就是一个字节码</li>
<li>基于jvm的监控机制</li>
<li>栈帧线程独享，不用锁，堆是内存共享的需要线程考虑，方法区也是要线程共享</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">sdhakdh</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="string">&quot;线程1&quot;</span>) &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">					System.<span class="keyword">out</span>.println(Thread.currentThread().getName().toString() + <span class="string">&quot;@&quot;</span> + flag++);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="string">&quot;线程2&quot;</span>) &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">					System.<span class="keyword">out</span>.println(Thread.currentThread().getName().toString() + <span class="string">&quot;@&quot;</span> + flag++);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这样的会出现线程抢占的问题，容易让一个线程卡住，然后另外一个框框执行</li>
<li>结果就是无序的</li>
<li>如果加上synchronized则不会出现这个请况</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package 作业;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">sdhakdh</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> flag = <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="string">&quot;线程1&quot;</span>) &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">				synchronized (<span class="string">&quot;hello&quot;</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">						System.<span class="keyword">out</span>.println(Thread.currentThread().getName().toString() + <span class="string">&quot;@&quot;</span> + flag++);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="string">&quot;线程2&quot;</span>) &#123;</span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">				synchronized (<span class="string">&quot;hello&quot;</span>) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">						System.<span class="keyword">out</span>.println(Thread.currentThread().getName().toString() + <span class="string">&quot;@&quot;</span> + flag++);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;.start();</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这样就不会发生问题了</li>
<li>就会出现顺序的，因为线程回退的时候，下次会继续线程锁锁住的位置进行执行，同时不让同一个锁内的其他线程执行，直到被所著的线程回来</li>
<li>多线程不加锁不安全，可是慢，如果能解决这个问题，就厉害了</li>
<li>如果锁不是同一个名字则无用</li>
<li>下面的例子,是生产者消费者的例子</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> repo &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">count</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> add() &#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">count</span> &gt;= <span class="number">100</span>) &#123; <span class="comment">// 设置上限</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		notifyAll(); <span class="comment">// 把减少线程从等待池放出来</span></span><br><span class="line">		<span class="keyword">count</span>++;</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="keyword">count</span>);</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> substrct() &#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">count</span> &lt;= <span class="number">0</span>) &#123; <span class="comment">// 设置下限</span></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				wait();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		notifyAll(); <span class="comment">// 把add线程从等待池放出来</span></span><br><span class="line">		<span class="keyword">count</span>--;</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="keyword">count</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">product</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		<span class="type">repo</span> <span class="variable">r</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">repo</span>();</span><br><span class="line">		<span class="type">Prou</span> <span class="variable">P</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prou</span>();</span><br><span class="line">		P.re = r;</span><br><span class="line">		<span class="type">Consumer</span> <span class="variable">C</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>();</span><br><span class="line">		C.re = r;</span><br><span class="line">		<span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(P , <span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">		<span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(C , <span class="string">&quot;消费者&quot;</span>);</span><br><span class="line">		t1.start();</span><br><span class="line">		t2.start();</span><br><span class="line">	</span><br><span class="line">		<span class="type">Prou</span> <span class="variable">P1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Prou</span>();</span><br><span class="line">		P1.re = r;</span><br><span class="line">		<span class="type">Consumer</span> <span class="variable">C1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumer</span>();</span><br><span class="line">		C1.re = r;</span><br><span class="line">		<span class="type">Thread</span> <span class="variable">t11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(P , <span class="string">&quot;生产者&quot;</span>);</span><br><span class="line">		<span class="type">Thread</span> <span class="variable">t21</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(C , <span class="string">&quot;消费者&quot;</span>);</span><br><span class="line">		t11.start();</span><br><span class="line">		t21.start();</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Prou</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">	repo re;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">				re.add();</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">	repo re;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">				re.substrct();</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意，wait的时候是直接放开锁的</li>
</ul>
<h1 id="创建线程的第三种和第四种方式"><a href="#创建线程的第三种和第四种方式" class="headerlink" title="创建线程的第三种和第四种方式"></a>创建线程的第三种和第四种方式</h1><h2 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"><span class="comment">//实现Callable接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableTest</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//执行Callable 方式，需要FutureTask 实现实现，用于接收运算结果</span></span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;Integer&gt;(<span class="keyword">new</span> <span class="title class_">MyCallable</span>());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line">        <span class="comment">//接收线程运算后的结果</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//结果：</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">4950</span></span><br><span class="line"><span class="comment">Process finished with exit code 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="线程池创建线程"><a href="#线程池创建线程" class="headerlink" title="线程池创建线程"></a>线程池创建线程</h2><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">//线程池实现</span><br><span class="line">public class ThreadPoolExecutorTest &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建线程池</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(10);</span><br><span class="line">        ThreadPool threadPool = new ThreadPool();</span><br><span class="line">        for(int i =0;i&lt;5;i++)&#123;</span><br><span class="line">            //为线程池分配任务</span><br><span class="line">            executorService.submit(threadPool);</span><br><span class="line">        &#125;</span><br><span class="line">        //关闭线程池</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class ThreadPool implements Runnable &#123;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for(int i = 0 ;i&lt;10;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;:&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 打印结果（不唯一）：</span><br><span class="line">/*</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:0</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:0</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:1</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:0</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:1</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:2</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:2</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:3</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:4</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:5</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:1</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:0</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:1</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:2</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:3</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:6</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:7</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:8</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:3</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span>:9</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:4</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:0</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:1</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:2</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:3</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:4</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:5</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:6</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:7</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:8</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span>:9</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:2</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:3</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:4</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:5</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:5</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:4</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:5</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:6</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:7</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:8</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-3</span>:9</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:6</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:6</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:7</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:7</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:8</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:8</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-4</span>:9</span><br><span class="line">pool<span class="string">-1</span>-thread<span class="string">-5</span>:9</span><br><span class="line">Process finished with exit code 0</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2022/10/25/10-25/</url>
    <content><![CDATA[<h1 id="泛型（任意引用类型）"><a href="#泛型（任意引用类型）" class="headerlink" title="泛型（任意引用类型）"></a>泛型（任意引用类型）</h1><ul>
<li>作用:就是可以让其内的变量无类型，直到用的时候才指定类型，解决了强制转换问题</li>
<li>代码如下：</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	package 作业;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> <span class="keyword">class</span> gdg &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line">	</span><br><span class="line">		sfdhkja&lt;String&gt; a = <span class="built_in">new</span> sfdhkja(); // 尖括号里面的就是泛型的类型</span><br><span class="line">		a.setName(&quot;小明&quot;);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(a.getName());</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(a);</span><br><span class="line">		sfdhkja&lt;<span class="type">Integer</span>&gt; b = <span class="built_in">new</span> sfdhkja();</span><br><span class="line">		b.setName(<span class="number">11111</span>);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(b.getName());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> sfdhkja&lt;E&gt; &#123;</span><br><span class="line">	E <span class="type">name</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> sfdhkja() &#123;</span><br><span class="line">		super();</span><br><span class="line">		this.name = <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> E getName() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> setName(E <span class="type">name</span>) &#123;</span><br><span class="line">		this.name = <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="boolean-add-E"><a href="#boolean-add-E" class="headerlink" title="boolean add(E)"></a>boolean add(E)</h3><p>把任意对象类型加进list中</p>
<h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><p>返回集合的迭代器，用于遍历集合</p>
<h3 id="default修饰的"><a href="#default修饰的" class="headerlink" title="default修饰的"></a>default修饰的</h3><p>代表接口中有方法体</p>
<h3 id="int-size"><a href="#int-size" class="headerlink" title="int size"></a>int size</h3><h3 id="并行流和串型流"><a href="#并行流和串型流" class="headerlink" title="并行流和串型流"></a>并行流和串型流</h3><h3 id="Object-toArray"><a href="#Object-toArray" class="headerlink" title="Object toArray()"></a>Object toArray()</h3><p>可以指定泛型的</p>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>代码如下</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package 重新开始;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line">	</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> jeiko &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line">	</span><br><span class="line">		Collection&lt;String&gt; c1 =<span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		c1.<span class="keyword">add</span>(&quot;中国&quot;);</span><br><span class="line">		c1.<span class="keyword">add</span>(&quot;韩国哦&quot;);</span><br><span class="line">		c1.<span class="keyword">add</span>(&quot;hsakdj&quot;);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(c1.size());</span><br><span class="line">		Iterator&lt;String&gt; ra = c1.iterator();</span><br><span class="line">		<span class="keyword">while</span>(ra.hasNext()) &#123;</span><br><span class="line">			String item = ra.next();</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println(item);</span><br><span class="line">			ra.remove(); // 删除元素</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;-------------------------------&quot;);</span><br><span class="line">		<span class="keyword">for</span> (String string : c1) &#123;</span><br><span class="line">			<span class="keyword">System</span>.<span class="keyword">out</span>.println(string);</span><br><span class="line">		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;------------------------------------&quot;);</span><br><span class="line">		c1.<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>只有第一种才可以进行便循环边删除</li>
<li>其他都不可以</li>
<li>但是第三种最帅，代码量也最少</li>
</ul>
<h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><ul>
<li>Colllection继承了Iterable接口</li>
<li>list线性，有序集合</li>
<li>set无序集合</li>
<li>旗下是</li>
<li>ArrayLinst</li>
<li>LinkedList</li>
<li>Vector</li>
<li>下面是set的</li>
<li>HashSet</li>
<li>TreeSet</li>
</ul>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul>
<li>线性集合 ，有下标</li>
<li>add(index , E)</li>
<li>set(index ,E)</li>
<li>get(index)</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="keyword">package</span> 重新开始;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Main1 &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	</span><br><span class="line">		List&lt;String&gt; list = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">		list.add(<span class="string">&quot;1&quot;</span>);  <span class="comment">// 先往list里添加元素</span></span><br><span class="line">		list.add(<span class="string">&quot;12&quot;</span>); <span class="comment">// 同上</span></span><br><span class="line">		System.out.<span class="keyword">println</span>(list);  <span class="comment">// 直接打印是全部打印出来</span></span><br><span class="line">		list.add(<span class="number">0</span>,<span class="string">&quot;121&quot;</span>); <span class="comment">// 在下表为0的地方添加121</span></span><br><span class="line">		list.set(<span class="number">2</span>, <span class="string">&quot;dhkjsdhj&quot;</span>); <span class="comment">// 把下表为2的地方设置为dhkjsdhj</span></span><br><span class="line">		System.out.<span class="keyword">println</span>(list.<span class="keyword">size</span>()); <span class="comment">// 获取list的size就是大小</span></span><br><span class="line">	</span><br><span class="line">		list.forEach(System.out::<span class="keyword">println</span>); <span class="comment">// 超级帅气的循环语句，本身是lambal表达式</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; list.<span class="keyword">size</span>() ; i++) &#123;</span><br><span class="line">			String item = list.get(i);</span><br><span class="line">			System.out.<span class="keyword">println</span>(item);</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul>
<li>底层封装的数组</li>
<li>扩容的时候每次扩容一半</li>
<li>海量添加的时候是很慢的，就是修改长度很慢</li>
<li>查询快，因为有下标</li>
</ul>
<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><ul>
<li>可控增量，且线程安全</li>
<li>底层是数组，且有线程锁，</li>
<li>10，20，40 ，每次扩容一倍，但是是可以控制增量的</li>
<li>比ArrayList慢</li>
</ul>
<h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul>
<li>底层封装的是节点，双向链表，每一个节点都有前一个节点和后一个节点的引用</li>
<li>单向链：修改快</li>
<li>双向链：就是双向的，前后都有元素</li>
<li>特点：修改快，但是查询慢</li>
<li>可以用作与自己定义栈</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span>&lt;<span class="type">E</span>&gt; &#123;</span><br><span class="line">	LinkedList&lt;E&gt; <span class="keyword">data</span>;</span><br><span class="line">	<span class="keyword">public</span> E pop()  &#123;</span><br><span class="line">	<span class="keyword">return</span>	<span class="keyword">data</span>.pollLast();</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul>
<li>无序集合</li>
<li>会自动去重，就是有重复的就会	不添加新的元素</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Set</span>&lt;<span class="type">Integer</span>&gt; <span class="keyword">set</span> = <span class="built_in">new</span> HashSet&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">11</span>);</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">1111</span>);</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">898</span>);</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">11</span>);</span><br><span class="line"><span class="keyword">set</span>.<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul>
<li>因为这里的去重机制是根据hashcode和equals来的，默认的时候，可以像正常的列表一样，但是我们可以进行覆盖hashcode和equals</li>
<li>不覆盖</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line">		</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">Set</span>;</span><br><span class="line">		</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Sst &#123;</span><br><span class="line">		</span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">Set</span>&lt;<span class="type">Integer</span>&gt; <span class="keyword">set</span> = <span class="built_in">new</span> HashSet&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">11</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">1111</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">898</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">11</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">Set</span>&lt;stu&gt; s1 =<span class="built_in">new</span> HashSet&lt;stu&gt;();</span><br><span class="line">		s1.<span class="keyword">add</span>(<span class="built_in">new</span> stu());</span><br><span class="line">		s1.<span class="keyword">add</span>(<span class="built_in">new</span> stu());</span><br><span class="line">		s1.<span class="keyword">add</span>(<span class="built_in">new</span> stu());</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(s1.size());</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> stu&#123;</span><br><span class="line">	private <span class="type">int</span> num;</span><br><span class="line">	private String <span class="type">name</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> stu() &#123;</span><br><span class="line">		super();</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> getNum() &#123;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> setNum(<span class="type">int</span> num) &#123;</span><br><span class="line">		this.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> String getName() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> setName(String <span class="type">name</span>) &#123;</span><br><span class="line">		this.name = <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> String toString() &#123;</span><br><span class="line">		<span class="keyword">return</span> &quot;stu [num=&quot; + num + &quot;, name=&quot; + <span class="type">name</span> + &quot;]&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>覆盖之后</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">Set</span>;</span><br><span class="line">	</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Sst &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">Set</span>&lt;<span class="type">Integer</span>&gt; <span class="keyword">set</span> = <span class="built_in">new</span> HashSet&lt;<span class="type">Integer</span>&gt;();</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">11</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">1111</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">898</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(<span class="number">11</span>);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">Set</span>&lt;stu&gt; s1 =<span class="built_in">new</span> HashSet&lt;stu&gt;();</span><br><span class="line">		s1.<span class="keyword">add</span>(<span class="built_in">new</span> stu());</span><br><span class="line">		s1.<span class="keyword">add</span>(<span class="built_in">new</span> stu());</span><br><span class="line">		s1.<span class="keyword">add</span>(<span class="built_in">new</span> stu());</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(s1.size());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> stu&#123;</span><br><span class="line">	private <span class="type">int</span> num;</span><br><span class="line">	private String <span class="type">name</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">public</span> stu() &#123;</span><br><span class="line">		super();</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> constructor stub</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> getNum() &#123;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> setNum(<span class="type">int</span> num) &#123;</span><br><span class="line">		this.num = num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> String getName() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">public</span> <span class="type">void</span> setName(String <span class="type">name</span>) &#123;</span><br><span class="line">		this.name = <span class="type">name</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> String toString() &#123;</span><br><span class="line">		<span class="keyword">return</span> &quot;stu [num=&quot; + num + &quot;, name=&quot; + <span class="type">name</span> + &quot;]&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">int</span> hashCode() &#123;</span><br><span class="line">		final <span class="type">int</span> prime = <span class="number">31</span>;</span><br><span class="line">		<span class="type">int</span> result = <span class="number">1</span>;</span><br><span class="line">		result = prime * result + ((<span class="type">name</span> == <span class="keyword">null</span>) ? <span class="number">0</span> : <span class="type">name</span>.hashCode());</span><br><span class="line">		result = prime * result + num;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	@Override</span><br><span class="line">	<span class="built_in">public</span> <span class="type">boolean</span> equals(<span class="keyword">Object</span> obj) &#123;</span><br><span class="line">		<span class="keyword">if</span> (this == obj)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (getClass() != obj.getClass())</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		stu other = (stu) obj;</span><br><span class="line">		<span class="keyword">if</span> (<span class="type">name</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (other.name != <span class="keyword">null</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="type">name</span>.equals(other.name))</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (num != other.num)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>也可以在生成覆盖的时候少选几个变量这样这些变量就会变成唯一的筛选变量 ，相当于放宽变量范围</li>
<li>原理是封装了hashmap，利用key和value</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SetTree</title>
    <url>/2022/10/26/10-26/</url>
    <content><![CDATA[<h1 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h1><ul>
<li>其是基于compareable的，</li>
<li>进行add的时候放的如果是引用类型，则要实现compareable接口，因为他就是用这个接口来实现的</li>
<li>对于基本类型，则不用</li>
<li>如果这样就会报错</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">package 重新开始;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="keyword">Set</span>;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line">	</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> copyfilethread &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		// TODO Auto-<span class="keyword">generated</span> <span class="keyword">method</span> stub</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">Set</span>&lt;String&gt; <span class="keyword">set</span> = <span class="built_in">new</span> TreeSet&lt;String&gt;();</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(&quot;2020-10-19&quot;);</span><br><span class="line">		<span class="keyword">set</span>.<span class="keyword">add</span>(&quot;1010-10-20&quot;);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(<span class="keyword">set</span>);</span><br><span class="line">		<span class="keyword">Set</span>&lt;stu&gt; <span class="keyword">SET</span> = <span class="built_in">new</span> TreeSet&lt;stu&gt;();</span><br><span class="line">		<span class="keyword">SET</span>.<span class="keyword">add</span>(<span class="built_in">new</span> stu(&quot;小明&quot; , <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">SET</span>.<span class="keyword">add</span>(<span class="built_in">new</span> stu(&quot;snisnh&quot; , <span class="number">2</span>));</span><br><span class="line">		<span class="keyword">SET</span>.<span class="keyword">add</span>(<span class="built_in">new</span> stu(&quot;狗蛋&quot;  , <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">SET</span>.<span class="keyword">forEach</span>(<span class="keyword">System</span>.<span class="keyword">out</span>::println);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>stu类</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">stu</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> int num;</span><br><span class="line">	<span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"> <span class="built_in">String</span> name , int num</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">super</span>();</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">getNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setNum</span>(<span class="params">int num</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setName</span>(<span class="params"><span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;stu [num=&quot;</span> + num + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">hashCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">		final int prime = <span class="number">31</span>;</span><br><span class="line">		int result = <span class="number">1</span>;</span><br><span class="line">		result = prime * result + ((name == <span class="literal">null</span>) ? <span class="number">0</span> : name.<span class="title function_">hashCode</span>());</span><br><span class="line">		result = prime * result + num;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">equals</span>(<span class="params"><span class="built_in">Object</span> obj</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable language_">this</span> == obj)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_">getClass</span>() != obj.<span class="title function_">getClass</span>())</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		stu other = (stu) obj;</span><br><span class="line">		<span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (other.<span class="property">name</span> != <span class="literal">null</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.<span class="title function_">equals</span>(other.<span class="property">name</span>))</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (num != other.<span class="property">num</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 大于0是正数，小于0是负数 ，等于0是相等 ，</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这样会报错，是类型转换的错误。</li>
<li>因为它实现的是compareable接口，对比引用类型的时候用的是这个接口里的方法</li>
<li>所以在stu类实现这个接口就可以不报错了</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">stu</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;stu&gt;&#123;</span><br><span class="line">	<span class="keyword">private</span> int num;</span><br><span class="line">	<span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"> <span class="built_in">String</span> name , int num</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">super</span>();</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">getNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setNum</span>(<span class="params">int num</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setName</span>(<span class="params"><span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;stu [num=&quot;</span> + num + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">hashCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">		final int prime = <span class="number">31</span>;</span><br><span class="line">		int result = <span class="number">1</span>;</span><br><span class="line">		result = prime * result + ((name == <span class="literal">null</span>) ? <span class="number">0</span> : name.<span class="title function_">hashCode</span>());</span><br><span class="line">		result = prime * result + num;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">equals</span>(<span class="params"><span class="built_in">Object</span> obj</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable language_">this</span> == obj)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_">getClass</span>() != obj.<span class="title function_">getClass</span>())</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		stu other = (stu) obj;</span><br><span class="line">		<span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (other.<span class="property">name</span> != <span class="literal">null</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!name.<span class="title function_">equals</span>(other.<span class="property">name</span>))</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (num != other.<span class="property">num</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 大于0是正数，小于0是负数 ，等于0是相等 ，</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">compareTo</span>(<span class="params">stu o</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>但是这样他只能往set里添加一个值</li>
<li>因为这个compare默认的时候就是这样</li>
<li>如果要再进行精度筛选则要，在被覆盖的compareto方法中自己定义，可以改成</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> int compareTo(stu o) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">this</span>.num == o.num) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.name.length() - o.name.length();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.num - o.num;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这样就会让如果学号相同，就会按照姓名的长度排序，小的在上面</li>
<li>总之就是可以在这个compareto这里设置规则</li>
<li>可控性强</li>
<li>这里只有数组的是length是属性，其他都是方法</li>
<li>集合的叫size</li>
<li>这个是用于实体类，数据类实现接口用 ， 表达的是自然的顺序，又叫自然排序</li>
</ul>
<h1 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h1><ul>
<li>比较器是对于list来说的</li>
<li>comparetor ：比较器，比上一个更自由 ，可以控制排序的方式，升序或者降序</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">List</span>&lt;stu&gt; list = new ArrayList&lt;stu&gt;();</span><br><span class="line"><span class="attribute">System</span>.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">1</span> , <span class="number">89</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">2</span> , <span class="number">88</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">21</span> , <span class="number">87</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">22</span> , <span class="number">86</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">21</span> , <span class="number">85</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">221</span> , <span class="number">84</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">21</span> , <span class="number">83</span>.<span class="number">1</span>));</span><br><span class="line"><span class="attribute">list</span>.add(new stu(<span class="string">&quot;下&quot;</span> , <span class="number">21</span> , <span class="number">82</span>.<span class="number">1</span>));</span><br><span class="line">	</span><br><span class="line"><span class="attribute">Collections</span>.sort(list , (a,b) -&gt; -((int)(b.getScore() - a.getScore() * <span class="number">100</span> ))); // 这个里面的代表 ， 我们的比较规则， 前面代表要排序的集合，list不去重 ， a,b代表两个元素list中的，后面的就是比较的规则了，一般是升序排序，但是我们可以通过添加-的方法，让他进行降序，他底层也是tree</span><br><span class="line"><span class="attribute">list</span>.forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过lambal表达式进行比较排序</li>
<li>但是其实这个sort方法也是Arrays.sort，它是将所有元素转入一个数组，对数组进行排序，然后，将排好序 的序列复制回列表 ，</li>
<li>sort()是根据需要排序的数组的长度进行区分的:</li>
<li>首先先判断需要排序的数据量是否大于60。</li>
<li>小于60：使用插入排序，插入排序是稳定的</li>
<li>大于60的数据量会根据数据类型选择排序方式：</li>
<li>基本类型：使用快速排序。「因为基本类型不需要考虑稳定性」</li>
<li>Object类型：使用归并排序「因为归并排序具有稳定性」</li>
<li>注意：不管是快速排序还是归并排序。在二分的时候小于60的数据量依旧会使用插入排序</li>
<li>Collections.reverseOrder()也可以进行降序排序 , 只不过是要基本类型</li>
</ul>
<h1 id="映射Map"><a href="#映射Map" class="headerlink" title="映射Map"></a>映射Map</h1><ul>
<li>是一种接口</li>
<li>是一种&lt;k , V&gt; 结构 ，就是一个key对应一个value，其key不会重复，而value可以重复</li>
<li>一个&lt;Ｋ，V&gt;叫一个ｅｎｔｒｙ</li>
<li>万能&lt;Ｋ，V&gt;他可以代表一个对象</li>
</ul>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul>
<li>ｃｌｅａｒ清除所有映射</li>
<li>ｂｏｏｌｅａｎ　ｃｏｎｔａｉｎｓＫｅｙ（Ｏｂｊｅｃｔ　ｋｅｙ）：判断一个ｋｅｙ是不是存在</li>
<li>ｅｎｔｒｙＳｅｔ（）获取ｅｎｔｒｙ集合，就是条目集合<br>，返回类型是一个Ｓｅｔ</li>
<li>ｇｅｔ（ｋｅｙ）根据ｋｅｙ获取ｖａｌｕｅ</li>
<li>ｋｅｙＳｅｔ（）返回ｋｅｙ的集合</li>
<li>ｐｕｔ（K，ｖ），往，ｍａｐ加入一条数据，但是存在相同的ｋｅｙ就覆盖</li>
<li>ｒｅｍｏｖｅ（ｋ）删除ｋｅｙ</li>
<li>ｓｉｚｅ（）条目个数</li>
<li>Ｃｏｌｌｅｃｔｉｏｎ＜Ｖ＞　ｖａｌｕｅｓ（）获取值组成的集合</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package 重新开始;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line">	</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Main2 &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">public</span> static <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">		Map&lt;String , String&gt; map = <span class="built_in">new</span> HashMap&lt;&gt;();</span><br><span class="line">		map.put(&quot;akjsdhs&quot;, &quot;sdjal&quot;);</span><br><span class="line">		map.put(&quot;dshd&quot; , &quot;sdjjdjd&quot;);</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.<span class="keyword">get</span>(&quot;dshd&quot;));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.containsKey(&quot;dshd&quot;));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.remove(&quot;dshd&quot;));</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.size());</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.entrySet());</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.containsKey(&quot;dshd&quot;));</span><br><span class="line">		map.clear();</span><br><span class="line">		<span class="keyword">System</span>.<span class="keyword">out</span>.println(map.size());</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>细节</title>
    <url>/2022/10/28/10-28/</url>
    <content><![CDATA[<h1 id="关于Map的遍历"><a href="#关于Map的遍历" class="headerlink" title="关于Map的遍历"></a>关于Map的遍历</h1><ul>
<li>我们可以用Set来遍历</li>
<li>代码如下:</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">map2.<span class="keyword">put</span>(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Corejava&quot;</span>);</span><br><span class="line">map2.<span class="keyword">put</span>(<span class="string">&quot;Jerry&quot;</span>, <span class="string">&quot;Jsp&quot;</span>);</span><br><span class="line">map2.<span class="keyword">put</span>(<span class="string">&quot;KJSHHKJ&quot;</span> , <span class="string">&quot;Oracle&quot;</span>);</span><br><span class="line"><span class="keyword">Set</span> m <span class="comment">= map2.entrySet()</span>;</span><br><span class="line">m.forEach(<span class="keyword">System</span>.out::println);</span><br></pre></td></tr></table></figure>

<ul>
<li>我们还可以用，把map转换成流再进行</li>
<li>代码如下：</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">map2.entrySet<span class="function"><span class="params">()</span>.<span class="title">stream</span><span class="params">()</span>.<span class="title">filter</span><span class="params">((item) -&gt; <span class="string">&quot;Oracle&quot;</span>.equals(item.getValue()))</span>.<span class="title">forEach</span><span class="params">((item) -&gt; System.out.println(item.getKey()))</span>;</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<ul>
<li>特别帅气，</li>
<li>而且foreach的本质就是流</li>
<li>先通过entryset转换成集合</li>
<li>然后集合有Stream方法，可以转化成流</li>
<li>然后对于流我们加上filter（过滤器）</li>
<li>筛选我们想要的结构，这个过滤器里面只能放返回值是布尔的</li>
<li>然后筛选完了，我们可以对他进行lambda的表达输出语句</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Map</title>
    <url>/2022/10/27/10-27/</url>
    <content><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><ul>
<li>Map和集合是无关系的</li>
<li>Map是个接口</li>
<li>旗下有hashMap和TreeMap</li>
<li>简单代码</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Map&lt;String , String&gt; map1 = new HashMap&lt;&gt;();</span><br><span class="line">	map1.<span class="keyword">put</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;事假&quot;</span>);</span><br><span class="line">	map1.<span class="keyword">put</span>(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;病假&quot;</span>);</span><br><span class="line">	map1.<span class="keyword">put</span>(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;产假&quot;</span>);</span><br><span class="line">	map1.<span class="keyword">put</span>(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;施加&quot;</span>);</span><br><span class="line">	Set&lt;String&gt; ks = map1.keySet();</span><br><span class="line">	Iterator&lt;String&gt; <span class="keyword">it</span> = ks.iterator();</span><br><span class="line">	<span class="keyword">while</span>(<span class="keyword">it</span>.hasNext()) &#123;</span><br><span class="line">		String <span class="built_in">item</span> = <span class="keyword">it</span>.next();</span><br><span class="line">		System.out.println(<span class="string">&quot;key&quot;</span> + <span class="built_in">item</span> + <span class="string">&quot;@value:&quot;</span> + map1.<span class="keyword">get</span>(<span class="built_in">item</span>));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>entrySet</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="title class_">Set</span>&lt;<span class="title class_">Map</span>.<span class="property">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt;&gt; km = map1.<span class="title function_">entrySet</span>();</span><br><span class="line"><span class="title class_">Iterator</span>&lt;<span class="title class_">Map</span>.<span class="property">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt;&gt; il = km.<span class="title function_">iterator</span>();</span><br><span class="line"></span><br><span class="line">			</span><br><span class="line"><span class="keyword">while</span>(il.<span class="title function_">hasNext</span>()) &#123;</span><br><span class="line"><span class="title class_">Entry</span>&lt;<span class="title class_">String</span> , <span class="title class_">String</span>&gt; entry = il.<span class="title function_">next</span>();</span><br><span class="line"><span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(entry.<span class="title function_">getKey</span>() + entry.<span class="title function_">getValue</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="title class_">Entry</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; entry : km) &#123;</span><br><span class="line">	<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(entry.<span class="title function_">getKey</span>() + entry.<span class="title function_">getValue</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">km.<span class="title function_">forEach</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">accept</span>(<span class="params"><span class="built_in">Object</span> t</span>) &#123;</span><br><span class="line">	<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	<span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(t);</span><br><span class="line">&#125;&#125;); <span class="comment">// Consumer里面有个抽象方法 ，accept，我们要做的事情放进这个accept里，就代表对其每个元素进行accept里的操作 ，就是lambda的表达式</span></span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>上述是两种遍历方式，迭代器可边遍历便删除，是我们最古老的，可是也是唯一有这个功能的 ，iterator</li>
<li>其他的都要遍历完了才能再删除</li>
<li>而且entrySet比keySet是要更快点的（单纯遍历）</li>
<li>迭代器的算法是要比后来的算法速度快的，遍历的时候</li>
</ul>
<h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><ul>
<li>lambda表达式是很便捷的一种方法</li>
<li>要求：定义规则，定义几个变量</li>
<li>首先，我们要定义一个接口</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="symbol">Yunsuan</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> yunsuan(<span class="built_in">int</span> i , <span class="built_in">int</span> j);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>然后在这个接口上增加@FunctionalInterface ，注意这个标志是让这个接口只有一个抽象方法，多个抽象方法会报错</li>
<li>这一步是定义我们的，几个元素</li>
<li>接下来我们定义一个函数 ，让这个接口当作参数 ，并且给这个接口传入两个参数</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">int</span> <span class="title">getresult</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b, Yunsuan yunsuan)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span>	yunsuan.<span class="built_in">yunsuan</span>(a, b);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这样 ，我们就算是把这个规则实体化了，接下来我们只要调用这个规则的实例化，就可以对这两个数进行任意操作了</li>
<li>比如</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">System.out.println<span class="function"><span class="params">(getresult(<span class="number">3</span>,<span class="number">2</span>, (i,j)-&gt;i+j))</span>; // 前面两个是实参 ，后面的是规则就这样写就行 ，格式固定，但是语法不固定</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<ul>
<li>上面的foreach里嵌套的就算lambda的表达式</li>
</ul>
<h1 id="Map特殊事项"><a href="#Map特殊事项" class="headerlink" title="Map特殊事项"></a>Map特殊事项</h1><ul>
<li>如果在map里把key放入引用类型，则对比key的操作会变成对比hashcode和equals，可控性更强</li>
</ul>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> 重新开始;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">HashMap</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">Map</span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TEstmain1</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	</span><br><span class="line">		Map&lt;stu , <span class="built_in">Object</span>&gt; <span class="built_in">map</span> = <span class="keyword">new </span><span class="class title_">HashMap</span>&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">		<span class="built_in">map</span>.<span class="property">put</span>(<span class="keyword">new </span><span class="class title_">stu</span>(<span class="string">&quot;小明&quot;</span>  , <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">map</span>.<span class="property">put</span>(<span class="literal">null</span> , <span class="literal">null</span>);</span><br><span class="line">		<span class="built_in">map</span>.<span class="property">put</span>(<span class="keyword">new </span><span class="class title_">stu</span>(<span class="string">&quot;狗蛋&quot;</span> , <span class="number">1</span>) , <span class="number">2</span>);</span><br><span class="line">		System.<span class="property">out</span>.<span class="property">println</span>(<span class="built_in">map</span>.<span class="property">size</span>());</span><br><span class="line">		<span class="built_in">map</span>.<span class="property">forEach</span>((k , v) -&gt; &#123;System.<span class="property">out</span>.<span class="property">println</span>(k + <span class="string">&quot;@&quot;</span> +v);&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>stu类，通过自动生成hashcode和equals，（我这里只生成了num的）</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">stu</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;stu&gt;&#123;</span><br><span class="line">	<span class="keyword">private</span> int num;</span><br><span class="line">	<span class="keyword">private</span> <span class="title class_">String</span> name;</span><br><span class="line">	<span class="keyword">private</span> double score;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"> <span class="built_in">String</span> name , int num</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"> <span class="built_in">String</span> name , int num , double m</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">score</span> = m;</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">stu</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">super</span>();</span><br><span class="line">		<span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">getNum</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setNum</span>(<span class="params">int num</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">num</span> = num;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setName</span>(<span class="params"><span class="built_in">String</span> name</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;stu [num=&quot;</span> + num + <span class="string">&quot;, name=&quot;</span> + name + <span class="string">&quot;, score=&quot;</span> + score + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">hashCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">		final int prime = <span class="number">31</span>;</span><br><span class="line">		int result = <span class="number">1</span>;</span><br><span class="line">		result = prime * result + num;</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">boolean</span> <span class="title function_">equals</span>(<span class="params"><span class="built_in">Object</span> obj</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="variable language_">this</span> == obj)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_">getClass</span>() != obj.<span class="title function_">getClass</span>())</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		stu other = (stu) obj;</span><br><span class="line">		<span class="keyword">if</span> (num != other.<span class="property">num</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 大于0是正数，小于0是负数 ，等于0是相等 ，</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> int <span class="title function_">compareTo</span>(<span class="params">stu o</span>) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">num</span> == o.<span class="property">num</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>.<span class="title function_">length</span>() - o.<span class="property">name</span>.<span class="title function_">length</span>();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> o.<span class="property">num</span> - <span class="variable language_">this</span>.<span class="property">num</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> double <span class="title function_">getScore</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> score;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setScore</span>(<span class="params">double score</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="lambda加for循环-加上TreeMap"><a href="#lambda加for循环-加上TreeMap" class="headerlink" title="lambda加for循环 加上TreeMap"></a>lambda加for循环 加上TreeMap</h1><ul>
<li>通过treeMap实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> 重新开始;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TEstmain1</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">		TreeMap&lt;stu , Object&gt; map11 = <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line">		map11.put(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;小明&quot;</span>,  <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">		map11.put(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;狗蛋&quot;</span> ,  <span class="number">2</span>) ,<span class="number">2</span>);</span><br><span class="line">		map11.put(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;linux&quot;</span> , <span class="number">3</span>), <span class="number">3</span>);</span><br><span class="line">		map11.put(<span class="keyword">new</span> <span class="title class_">stu</span>(<span class="string">&quot;狗蛋&quot;</span> ,  <span class="number">2</span>) ,<span class="number">99</span>);</span><br><span class="line">		map11.forEach(TEstmain1::abc);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">abc</span><span class="params">(stu s , Object value)</span> &#123;</span><br><span class="line">		System.out.println(s + <span class="string">&quot;@&quot;</span> +value);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>上述的是针对foreach有两个参数的情况，可以定义一个函数，让他去传递参数，和lambda一样</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令</title>
    <url>/2022/10/31/10-31/</url>
    <content><![CDATA[<h1 id="linux的目录形式"><a href="#linux的目录形式" class="headerlink" title="linux的目录形式"></a>linux的目录形式</h1><ul>
<li>层级式</li>
<li>当用了Xshell登录了管理员之后会显示</li>
<li>root@bigdata1 liuzihan</li>
<li>前面表示root用户</li>
<li>@后面的是机器名字</li>
<li>在后面的是普通用户的名字</li>
<li>~表示当前用户的家目录</li>
<li>有命令帮助 应用 xx–help ， 这个xx代表是命令</li>
<li>例如： 用法：ls [选项]… [文件]…</li>
<li>上面代表ls后面可以加多个辅助命令 ， 还可以加多个文件</li>
<li>中断命令 ： ctrl + c 或者 ctrl + z</li>
<li>用键盘自动补全 ，</li>
<li>按一次 ： 匹配当前据有唯一标识的补全</li>
<li>按两次 ： 把所有匹配的项目都展示出来</li>
</ul>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul>
<li>pwd : 查看当前所在的目录</li>
<li>ls ： 查看所在的目录下有文件或者文件夹</li>
<li>mkdir ： 创建文件夹 ， 后面加文件夹的名字</li>
<li>cd ： 切换路径 ， 就算现在所在的目录 ， 只能切换文件夹</li>
<li>ls -l ： 表示看这个文件夹的额外的详细信息 ， 权限 ，用户 ， 用户组 ， 大小 ， 创建时间。</li>
<li>ls -l -a ：显示以.开头的文件或者文件夹 ， 就是隐藏文件</li>
<li>ls -l -h ：查看文件的大小 ， 文件夹是不可以的</li>
<li>上面的 ls -l &#x3D;&#x3D; ll 但是在一些操作系统里是不行的在centos里是可以的但是ubanto上是不行的</li>
<li>其实现是通过别名</li>
<li>ll -r -t ： 可以看见按照时间顺序降序的排序文件 ，就算最下面的就是最近更改的</li>
<li>上述还可以改成 ll -rt &#x3D;&#x3D;ll -r -t</li>
</ul>
<h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹##"></a>创建文件夹##</h2><h3 id="并级创建"><a href="#并级创建" class="headerlink" title="并级创建"></a>并级创建</h3><ul>
<li>mkdir 1 2 3</li>
</ul>
<h3 id="串级创建"><a href="#串级创建" class="headerlink" title="串级创建"></a>串级创建</h3><ul>
<li>mkdir 1&#x2F;2&#x2F;3</li>
<li>但是这样要求必须有上级目录</li>
<li>不过可以用</li>
<li>mkdir -p 1&#x2F;2&#x2F;3</li>
<li>就可以了</li>
</ul>
<h2 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h2><ul>
<li>cd</li>
<li>不过有绝对路径和相对路径的区别</li>
<li>绝对路径 ： 从根目录</li>
<li>相对路径 ： 从当前目录</li>
<li>cd的可以是绝对，也可以是相对</li>
<li>cd..&#x2F; : 返回上级目录</li>
<li>cd.&#x2F; : 表示当前目录</li>
<li>可以这样用 ： cd .&#x2F;1</li>
</ul>
<h3 id="快速回到家目录"><a href="#快速回到家目录" class="headerlink" title="快速回到家目录"></a>快速回到家目录</h3><ul>
<li>1 , cd &#x2F;xx</li>
<li>2 , cd + 回车 &#x3D;&#x3D;&gt;推荐</li>
<li>3 , cd + ~</li>
<li>cd - 回到上次操作的目录</li>
</ul>
<h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><ul>
<li>touch 1.log</li>
<li>vi&#x2F;vim 1.log</li>
<li>echo “bigdata” &gt; 3.log</li>
<li><blockquote>
<p>: 表示创建或者覆盖一个文件</p>
</blockquote>
</li>
<li>cat ： 查看文件内容</li>
<li>比如 ： cat 3.log</li>
<li><blockquote>
<blockquote>
<p>: 追加 ，上述一个 &gt; 是覆盖 ，这个是追加</p>
</blockquote>
</blockquote>
</li>
</ul>
<h2 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h2><ul>
<li>命令行模式</li>
<li>编辑模式</li>
<li>尾行模式</li>
<li>vi&#x2F;vim xxx</li>
<li>然后用insert</li>
<li>编辑完了</li>
<li>用esc ， 之后有几种选项</li>
<li>:q ：代表退出并且不保存</li>
<li>:w ：代表写入，但是不退出</li>
<li>:wq ：代表保存且退出</li>
<li>：！ ：强制</li>
<li>还可以以应用nano</li>
<li>就nano Xxx</li>
<li>然后下面就会有提示</li>
<li>如果没有这个文件，就会创建文件</li>
</ul>
<h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><ul>
<li>cat ： 查看文件所有内容</li>
<li>more ： 查看文件内容，按空格是往下翻，按q退出</li>
<li>less ： 查看大文件，也是一页一页的 ， q是退出，按小键盘的上下键，是翻页</li>
<li>一般小文件，用 cat 大文件more或者less</li>
<li>实时查看文件产生的内容</li>
<li>tail ：</li>
<li>-f</li>
<li>-F &#x3D;&#x3D; -f + retry</li>
<li>意义：-F ， 如果我们查看一个文件的时候，文件被删了，然后又重新生成了给一样文件名的文件 ， 则f就不会动态显示了</li>
<li>但是F会重显示新的那个文件</li>
<li>用法 tail -f xxx</li>
<li>用法 tail -F xxx</li>
</ul>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul>
<li>查找特定日志里的xx字段</li>
<li>通过 vi&#x2F;vim 进入 然后进行搜索</li>
<li>在尾行模式 ，输入要查找的字符 例如 &#x2F;error</li>
<li>然后键盘 n 查找下一个词 N 查找上一个词</li>
<li>通过cat</li>
<li>cat xxxx文件 | grep error 通过后面的grep 过滤文件</li>
<li>查看进程也可以用这种方式筛选</li>
<li>可以和其他命令联用 比如 把所有error的信息收集起来</li>
<li>cat xxx文件 | grep error &gt; xxx文件</li>
<li>grep的常用的参数</li>
<li>grep -A xx行： 查看某一个词的后xx行</li>
<li>grep -B xx行： 查看某一个词的前xx行</li>
<li>grep -C xx行： 查看某一个词的前后xx行</li>
<li>与上面的了连用为</li>
<li>cat xxx文件 | grep -A xx行 error &gt; xxx文件</li>
<li>nano方式</li>
<li>管道符| ：代表让上一个语句的输出代表 代表下一个语句的输入</li>
</ul>
<h2 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h2><ul>
<li>上传 ： win 到 linux</li>
<li>下载 ： linux 到 win</li>
</ul>
<h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><ul>
<li>工具 ： Xshell 通过Xshell的Xftp进行下载和上传</li>
<li>linux命令 ： yum install lzxx ，通过他进行下载上传</li>
</ul>
<h2 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h2><ul>
<li>clear : 清屏</li>
<li>ctrl + l ： 清屏</li>
</ul>
<h2 id="查看操作命令历史"><a href="#查看操作命令历史" class="headerlink" title="查看操作命令历史"></a>查看操作命令历史</h2><ul>
<li>history</li>
<li>或者键盘上的上下箭头号</li>
<li>按键盘的！ + 命令行数</li>
</ul>
<h2 id="移动与复制"><a href="#移动与复制" class="headerlink" title="移动与复制"></a>移动与复制</h2><ul>
<li>mv[选项]..源文件..目录</li>
<li>例如： mv dir1 bigdata</li>
<li>cp[选项]..源文件..目录</li>
<li>例如： cp -r dir2 bigdata</li>
<li>但是 cp还可以复制的时候改文件名字</li>
<li>例如 cp 源文件 目标文件</li>
<li>就会把源文件中的内容给目标文件，命名就是这里的目标文件</li>
<li>也可以和上一个复制到文件夹联用</li>
<li>例如 ： cp xx xxx目录&#x2F;xx文件</li>
<li>mv始终是一份</li>
<li>而cp则是两份</li>
<li>所以mv比cp快</li>
</ul>
<h2 id="删除文件或者文件夹"><a href="#删除文件或者文件夹" class="headerlink" title="删除文件或者文件夹"></a>删除文件或者文件夹</h2><ul>
<li>rm[选项]..文件..</li>
<li>有删除提示 ： rm reeor.log</li>
<li>删除文件夹 ： rm -r xxxx文件夹</li>
<li>无删除提示 ： rm -f</li>
<li>用法和上面一样</li>
<li>且 rm-r -f xxx &#x3D; rm-rf xxx</li>
<li>比如 我们可以 rm -rf&#x2F; &#x3D;&gt; 把整个全删除了</li>
</ul>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><ul>
<li>alias</li>
<li>创建别名：</li>
<li>alias aa &#x3D;”cd&#x2F;tmp” &#x3D;&gt;仅仅当前会话生效 ， 让aa代表cd&#x2F;tmp</li>
<li>但是在其他会话里就不会生效，因为这个没有在环境变量里设置</li>
</ul>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul>
<li>就像java的jdk环境一样 我们也有环境变量</li>
<li>全局环境变量 &#x2F;etc&#x2F;profile</li>
<li>个人变量 ： 只能当前用户使用 其他用户不能使用</li>
<li>~&#x2F;.bashrcc</li>
<li>~&#x2F;.bash_profile</li>
<li>生效环境变量</li>
<li>source &#x2F;etc&#x2F;profile</li>
<li>重新打开一个会话</li>
<li>然后这个别名就会好用了</li>
<li>但是这个不能跨用户访问，比如root的不能在普通用户这么用，相反也是</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令（运维）</title>
    <url>/2022/11/01/11-1/</url>
    <content><![CDATA[<h1 id="用户常用命令"><a href="#用户常用命令" class="headerlink" title="用户常用命令"></a>用户常用命令</h1><ul>
<li>ll &#x2F;usr&#x2F;sbin&#x2F;user* 查看用户命令</li>
<li>ll &#x2F;usr&#x2F;sbin&#x2F;group* 查看组命令</li>
<li>查看用户信息 &#x2F;etc&#x2F;passwd</li>
<li>查看组信息 &#x2F;etc&#x2F;group</li>
<li>查看用户 id xxx名称</li>
<li>userdel xxx ： 代表删除xx用户</li>
<li>useradd xxx ： 代表添加xx用户</li>
<li>usermod xxx ： 代表对一个用户进行操作</li>
</ul>
<h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><ul>
<li>su xxx</li>
<li>su -xxx</li>
<li>切换用户 ，如果用下面的那种，会获得该用户的环境变量并且执行</li>
<li>用上面的那种目录不会跑到所切换的用户的home</li>
<li>而下面的会跑到切换用户的home</li>
<li>用exit退回</li>
<li>如果删除了一个已经存在的user ， 再次添加相同名称的用户的时候，会有警告，说明此用户的目录已经存在</li>
<li>在skel文件夹下有隐藏文件</li>
<li>如果把这个里的东西删掉，就会出现环境变量丢失的情况</li>
<li>我们可以从别的地方的给他cp过来</li>
<li>就会恢复了</li>
</ul>
<h1 id="组常见命令"><a href="#组常见命令" class="headerlink" title="组常见命令"></a>组常见命令</h1><ul>
<li>groupadd xxx</li>
<li>把一个用户添加到一个组上</li>
<li>usermod -a -G xxx组 xxx用户</li>
<li>usermod -g ： 更改用户主组 ，但是这样会让追加组丢失</li>
</ul>
<h1 id="设置用户密码"><a href="#设置用户密码" class="headerlink" title="设置用户密码"></a>设置用户密码</h1><ul>
<li>passwd</li>
<li>默认修改当前用户的密码</li>
</ul>
<h2 id="修改其他用户的密码"><a href="#修改其他用户的密码" class="headerlink" title="修改其他用户的密码"></a>修改其他用户的密码</h2><ul>
<li>只有root有权限修改其他的密码</li>
<li>passwd xxx名字</li>
</ul>
<h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><ul>
<li>是一个普通用户临时具有最大权限</li>
<li>修改 etc&#x2F;sudoers</li>
<li>xxx用户 ALL&#x3D;(root) NOPASSWD:ALL</li>
<li>然后就可以用 sudo xxx 命令这就代表这条指令具有了最高的权限</li>
<li>su 和 sudo 联用</li>
<li>sudo su xx人员</li>
<li>代表通过root权限切换</li>
</ul>
<h3 id="etc-x2F-paswd"><a href="#etc-x2F-paswd" class="headerlink" title="etc&#x2F;paswd"></a>etc&#x2F;paswd</h3><ul>
<li>这个文件是密码文件</li>
<li>在这个文件里 有解释器 如果后面变成nologin代表不让登录</li>
<li>如果最后变成false 则你无论如何都登陆不成功</li>
<li>CDH平台 可能会用到</li>
<li>把上面两中改成 bin&#x2F;bash 就可以成功了</li>
</ul>
<h1 id="权限相关命令"><a href="#权限相关命令" class="headerlink" title="权限相关命令"></a>权限相关命令</h1><ul>
<li>第一个字母</li>
<li>d :文件夹</li>
<li>-(横杠) ： 文件</li>
<li>l ： 链接</li>
<li>后面9个字母 ，每三个一组</li>
<li>r表示read  代表数字 4</li>
<li>w表示write 代表数字 2</li>
<li>x表示执行权限 代表数字 1</li>
<li>-表示无权限 代表数字 0</li>
<li>例子 ：-rw-r- -r- -. 1 root root 2047 10月 31 09:48 initial-setup-ks.cfg</li>
<li>第一组 ： rw- 4+2+0&#x3D;6 代表文件或者文件夹的所属用户拥有的权限</li>
<li>第二组 ： r- - 4+0+0&#x3D;4 代表文件或者文件夹的组的成员的权限</li>
<li>第三组 ： r- - 4+0+0&#x3D;4 代表文件或者文件夹的其他组的权限</li>
<li>字母顺序只能按照rwxr这个顺序</li>
</ul>
<h2 id="权限修改命令"><a href="#权限修改命令" class="headerlink" title="权限修改命令"></a>权限修改命令</h2><ul>
<li>chmod 修改文件或者文件夹权限</li>
<li>chown 修改文件或者文件夹的组 ， 或者用户</li>
<li>例子 ： chmod xxx（数字）xxx名字</li>
<li>如果要该文件夹 则要 chmod -R xxx数字 xxx名字</li>
<li>例子 ： chown xxx用户：xxx用户 文件名</li>
<li>同样也可以用-R ，来修改文件夹</li>
</ul>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul>
<li>如果要访问问文件夹里的文件，要先看上面的文件夹的权限是啥样的</li>
</ul>
<h2 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h2><ul>
<li>ll -h ，du -sh</li>
<li>而对于文件夹 du -sh也可以查看 ，ll -h 就不行</li>
<li>du -sh ： 最小是4k ， 但是他无法查看权限</li>
</ul>
<h2 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h2><ul>
<li>find</li>
<li>locate（没有网，不建议用）</li>
<li>例子 ： find 【path】 【表达式】</li>
<li>表达式 ： -name “xxx” : 按照名字查找</li>
<li>比如 ： find &#x2F; -name “1.log”</li>
</ul>
<h2 id="vi-x2F-vim"><a href="#vi-x2F-vim" class="headerlink" title="vi&#x2F;vim"></a>vi&#x2F;vim</h2><ul>
<li>编辑文件</li>
<li>尾行模式 ： wq 退出保存</li>
<li>如果编辑文件的时候突然不小心把编辑的时候中断了，就是ctrl + c 或者 ctrl + z</li>
<li>解决方法 ： 删除Swap文件是隐藏文件 ，.开头的</li>
<li>行号 ： 首先进入尾行模式</li>
<li>set nu 就会有行号</li>
<li>set nonu就可以取消行号</li>
</ul>
<h2 id="常用快捷方式"><a href="#常用快捷方式" class="headerlink" title="常用快捷方式"></a>常用快捷方式</h2><ul>
<li>dd ： 删除当前行</li>
<li>dG ： 删除当前行 以及以下所有行</li>
<li>ndd ： 删除这个行 以及下面n行</li>
<li>u ：　撤回</li>
<li>ｇｇ　：　跳转到第一行的第一个字母</li>
<li>Ｇ　：　跳转到最后一行的第一个字母</li>
<li>ｓｈｉｆｔ　＋ $  ： 就是跳转到行尾</li>
<li>ｓｈｉｆｔ　＋ ^  : 跳转到行头</li>
<li>i ： 是当前行编辑</li>
<li>o ： 是跳转到下一行编辑</li>
</ul>
<h3 id="清空文件内容"><a href="#清空文件内容" class="headerlink" title="清空文件内容"></a>清空文件内容</h3><ul>
<li>gg -&gt; dG</li>
<li>linux 有一个空的文件</li>
<li>然后 cat &#x2F;dev&#x2F;null  &gt; xxx文件名字</li>
</ul>
<h2 id="系统相关命令"><a href="#系统相关命令" class="headerlink" title="系统相关命令"></a>系统相关命令</h2><ul>
<li>内存 ： free</li>
<li>磁盘 ： df</li>
<li>可能会添加磁盘</li>
<li>可通过这个来判断</li>
<li>后来挂载的一般是vdb的</li>
<li>负载 ： top</li>
<li>load average ： xxx xxx xxx</li>
<li>第一个是5分钟之内的负载</li>
<li>第二个是10分钟</li>
<li>第三个是15分钟</li>
<li>如果任意一个超过十 ，说明当前公司的服务器 比较卡</li>
<li>pid是进程号</li>
<li>user是那个用户</li>
<li>重启的目的 ：</li>
<li>检查是不是硬件有无问题</li>
</ul>
<h2 id="yum-x2F-rpm"><a href="#yum-x2F-rpm" class="headerlink" title="yum&#x2F;rpm"></a>yum&#x2F;rpm</h2><ul>
<li>安装linux软件的方式 联网</li>
<li>yum search xxx</li>
<li>下载下来的一个安装包以rpm存储</li>
<li>yum install xxx</li>
</ul>
<h2 id="通讯命令"><a href="#通讯命令" class="headerlink" title="通讯命令"></a>通讯命令</h2><ul>
<li>ping + ip</li>
<li>telnet ip 端口 :检查对面的端口是不是开放</li>
<li>端口 ： 1-65535</li>
<li>两个机器要在一个网段</li>
<li>ping通就代表是网络ok</li>
</ul>
<h2 id="补充命令"><a href="#补充命令" class="headerlink" title="补充命令"></a>补充命令</h2><ul>
<li>which + 命令</li>
<li>whereis + 命令</li>
<li>查看linux或者某个软件的shell脚本是不是存在</li>
<li>which ： 是查看自己环境变量的命令存在吗</li>
<li>whereis ： 是查看全局变量的名利给的存在吗</li>
</ul>
<h2 id="修改机器名字"><a href="#修改机器名字" class="headerlink" title="修改机器名字"></a>修改机器名字</h2><ul>
<li>hostnamectl ： xxxx</li>
</ul>
<h2 id="解压缩命令"><a href="#解压缩命令" class="headerlink" title="解压缩命令"></a>解压缩命令</h2><ul>
<li>linux 对zip和gz可以解压</li>
<li>zip xxx.zip （-r） xxx文件（这里压缩可以多个）如果是文件夹则要加上-r</li>
<li>代表压缩到xxx.zip里</li>
<li>解压</li>
<li>unzip xxx.zip （-d xxx文件夹）</li>
<li>tar ：</li>
<li>例子 ： tar -cf xxx.tar xxx文件（可以多个）</li>
<li>解压：</li>
<li>例子 ： tar -xf xxx.tar -C xxx文件夹</li>
<li>可以不加-C就是默认解压当前文件目录</li>
<li>压缩：</li>
<li>用z命令</li>
<li>tar -zcf xxx.tar xxx文件（可以多个）</li>
<li>解压：</li>
<li>tar -zxf xxx.tar -C xxx文件夹</li>
<li>我们可以再加上v让他们显示详细得处理文件的过程</li>
<li>zxvf：同上</li>
<li>zxcf：同上</li>
</ul>
<h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><ul>
<li>当用yum安装成功之后 ，可以直接用系统命令启动</li>
<li>比如 ： service name start|status|restart|stop  : centos6</li>
<li>syystemctl start|status|restart|stop name : centos7</li>
<li>查看进程</li>
<li>ps -ef</li>
<li>可以进行筛选</li>
<li>ps -ef|grep xxx名字</li>
<li>杀死进程</li>
<li>kill -9 + 进程号</li>
<li>查端口：</li>
<li>netstat -nlp | grep xxxname</li>
<li>通过</li>
<li>:::80</li>
<li>ip:80</li>
<li>0.0.0.0:80</li>
<li>我们可以通过外部机器访问这个端口进入服务界面</li>
<li>kill -9 $(pgrep -f xxx名字)</li>
<li>下面的会强制把他们全杀掉 ， 包括子进程</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop</title>
    <url>/2022/11/11/11-10/</url>
    <content><![CDATA[<h1 id="hadoop简介"><a href="#hadoop简介" class="headerlink" title="hadoop简介"></a>hadoop简介</h1><ul>
<li>以阿帕奇软件 ，hadoop为主的生态圈</li>
<li>狭义就是Hadoop</li>
</ul>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul>
<li>hdfs ： 存储海量的数据</li>
<li>mapreduce ： 计算分析</li>
<li>yarn ： 资源和作业的调度</li>
</ul>
<h3 id="观点"><a href="#观点" class="headerlink" title="观点"></a>观点</h3><ul>
<li>存储是第一位的</li>
<li>计算是第二位的</li>
</ul>
<h2 id="学习介绍"><a href="#学习介绍" class="headerlink" title="学习介绍"></a>学习介绍</h2><ul>
<li>官网进行学习</li>
<li><code>hadoop.apache.org</code></li>
<li>但是后面的其余框架对应的官网就是 把hadoop 改掉</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">The Apache Hadoop software library <span class="keyword">is</span> a framework that allows <span class="keyword">for</span> the distributed processing <span class="keyword">of</span> <span class="keyword">large</span> data sets across clusters <span class="keyword">of</span> computers <span class="keyword">using</span> simple programming models. It <span class="keyword">is</span> designed <span class="keyword">to</span> scale up <span class="keyword">from</span> single servers <span class="keyword">to</span> thousands <span class="keyword">of</span> machines, <span class="keyword">each</span> offering <span class="keyword">local</span> computation <span class="keyword">and</span> <span class="keyword">storage</span>. Rather than rely <span class="keyword">on</span> hardware <span class="keyword">to</span> deliver high-availability, the library itself <span class="keyword">is</span> designed <span class="keyword">to</span> detect <span class="keyword">and</span> handle failures at the application layer, so delivering a highly-available service <span class="keyword">on</span> top <span class="keyword">of</span> a <span class="keyword">cluster</span> <span class="keyword">of</span> computers, <span class="keyword">each</span> <span class="keyword">of</span> which may be prone <span class="keyword">to</span> failures.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="hadoop模块的简介"><a href="#hadoop模块的简介" class="headerlink" title="hadoop模块的简介"></a>hadoop模块的简介</h3><ul>
<li>hdfs ：</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">A distributed <span class="built_in">file</span> system <span class="keyword">that</span> provides high-throughput access <span class="keyword">to</span> <span class="built_in">application</span> data.</span><br></pre></td></tr></table></figure>

<ul>
<li>mapredurce :</li>
</ul>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">A YARN-based system for parallel processing of large <span class="meta">data</span> <span class="meta">sets</span></span><br></pre></td></tr></table></figure>

<ul>
<li>yarm :</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">A framework for <span class="keyword">job </span><span class="keyword">scheduling </span><span class="keyword">and </span>cluster resource management</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="版本以及主流"><a href="#版本以及主流" class="headerlink" title="版本以及主流"></a>版本以及主流</h3><ul>
<li>版本 ： 1.x ， 2.x ， 3.x</li>
<li>主流 ： 2.x -》 3.x</li>
<li>公司所用 ：</li>
<li>apache 原生</li>
<li>cdh ： 5.x ， 6.x 从6.3之后开始收费</li>
</ul>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul>
<li>安装的是什么？</li>
<li>Hadoop有什么？</li>
<li>我们只用部署 yarn hdfs 因为mapredurce是java代码人员给我们的 ：都是主从架构的</li>
<li>hdfs ：</li>
<li>namenode : 老大 负责指挥数据的存储</li>
<li>datanode ： 主要负责数据的存储</li>
<li>seconderynamenode ： 负责辅助namenode的</li>
<li>yarn :</li>
<li>resourcemanager : 老大 负责资源分配</li>
<li>nodemanager ： 小弟负责资源分配给xxx</li>
</ul>
<h3 id="部署模式"><a href="#部署模式" class="headerlink" title="部署模式"></a>部署模式</h3><ul>
<li>单点模式 ：所有都在一台机器上</li>
<li>完全分布式模式 ：分布在多台机器上</li>
</ul>
<h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul>
<li>部署平台 ： windows 和linux</li>
<li>一般linux用的多 ，而且在linux上最少2000台</li>
<li>jdk ： 安装java的要求</li>
<li>3.3-目前 ： java8 - 11</li>
<li>3.0-3.2 ： java8</li>
<li>2.7-2.10 ： java8</li>
<li>但是有些的java8 的版本也不行 ，详细参考官网</li>
<li>要下载补丁安装就好</li>
<li>ssh ： 默认centos是安装的，但是ubantu是没安装的</li>
<li>个人要求 ：创建hadoop用户 ，以后我们都用那个用户开发</li>
<li>而且创建 几个文件夹进行规范</li>
<li>app ：app</li>
<li>data ：数据</li>
<li>log ：监控日志</li>
<li>project ：项目</li>
<li>shell ： shell脚本</li>
<li>software ： 安装包</li>
<li>以前版本的apche 版本框架 在</li>
<li><code>archive.apache.org/dist</code></li>
<li>部署jdk</li>
<li>hadoop ： 无要求</li>
</ul>
<h3 id="配置开始"><a href="#配置开始" class="headerlink" title="配置开始"></a>配置开始</h3><ul>
<li>把文件解压</li>
<li>配置环境变量</li>
<li>个人 ： 修改 .&#x2F;bashrc</li>
<li>添加 exprot JAVA_HOME&#x3D; xxxx</li>
<li>export PATH&#x3D;${JAVA_HOME}&#x2F;bin:$PATH</li>
<li>export HADOOP_HOME&#x3D;mmm</li>
<li>export PATH&#x3D;${HADOOP_HOME}&#x2F;bin:${HADOOP_HOME}&#x2F;sbin:$PATH</li>
<li>上面xxxx和mmm</li>
<li>分别代表我们的java的和hadoop的解压目录</li>
<li>然后我们导入个人环境变量 ，</li>
<li>source ~&#x2F;.bashrc</li>
<li>然后验证安装 java -version 和 hadoop version</li>
<li>如果成功就代表安装成功了</li>
<li>接下来我们更改hadoop的配置文件</li>
<li>进入到hadoop的etc文件夹里</li>
<li>编辑 core-site.xml</li>
<li>在两个标签之间输入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://你的机器名:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>编辑hdfs-site.xml</li>
<li>在两个标签之间输入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>接下来我们进行开放访问 ， 我们先执行</li>
<li><code>ssh user@hostname [com]</code> 进行登录</li>
<li>然后通过输入密码登陆一次</li>
<li>上一条的的命令如果加上com则代表登录并执行这个命令</li>
<li>然后我们要设置免密登录</li>
</ul>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -P <span class="string">&#x27;&#x27;</span> -f ~<span class="regexp">/.ssh/i</span>d_rsa</span><br><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub &gt;&gt; ~<span class="regexp">/.ssh/</span>authorized_keys</span><br><span class="line">chmod <span class="number">0600</span> ~<span class="regexp">/.ssh/</span>authorized_keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>然后继续上述的命令：看看能不能免密登录</li>
<li>成功之后，我们要更改文件格式 ： 相当于初始化操作</li>
<li>然后我们启动dhfs</li>
<li><code>start-dfs.sh</code></li>
<li>然后我们访问 <code>http://你的虚拟机ip:9870/</code></li>
<li>成功看见hadoop的web页面就好了</li>
<li>然后可以更简便的方法</li>
<li>在c盘找到 windows 然后进去system32</li>
<li>然后进去driver</li>
<li>然后进入etc文件</li>
<li>然后在hosts文件最后的加上我们在linux里的主机和ip映射</li>
<li>就可以通过 <code>http://你的虚拟机名称:9870/</code>访问我们的hadoop了</li>
</ul>
<h3 id="部署yarn"><a href="#部署yarn" class="headerlink" title="部署yarn"></a>部署yarn</h3><ul>
<li>对于部署单点的yarn</li>
<li>我们可以通过配置yarn的配置文件</li>
<li><code>mapred-site.xml</code> 和 <code>yarn-site.xml</code></li>
</ul>
<h4 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><ul>
<li>对于这个文件我们这样更改</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><ul>
<li>对于这个文件我们进行</li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="variable">&lt;configuration&gt;</span></span><br><span class="line"><span class="comment">#设置web访问的端口</span></span><br><span class="line"> <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.resourcemanager.webapp.address<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>你的主机名称:9999<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="comment">#设置运行在那个虚拟机上</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.resourcemanager.hostname<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>你的主机名<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">#下面两个要基本配置</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>mapreduce_shuffle<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.nodemanager.env-whitelist<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_HOME,PATH,LANG,TZ,HADOOP_MAPRED_HOME<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="variable">&lt;/configuration&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>配置完成之后我们要进行 <code>start-yarn.sh</code></li>
<li>然后开启这个服务 ： 我们可以通过访问浏览器的 <code>xxx你的ip:9999</code> ,访问这个服务</li>
<li>这样我们的单点就算配置完成了</li>
</ul>
<h2 id="关于分布式的配置"><a href="#关于分布式的配置" class="headerlink" title="关于分布式的配置"></a>关于分布式的配置</h2><ul>
<li>分布式的配置就是把单点的配置分到多台机器上</li>
<li>比如 ： 把hdfs的namenode 和 datanode 和secondnamenode分到三台机器上</li>
<li>把yarn的部署也分到三台机器上</li>
</ul>
<h3 id="开始分布式"><a href="#开始分布式" class="headerlink" title="开始分布式"></a>开始分布式</h3><ul>
<li>首先我们要明确一点 ： namenode是老大 ，只能有一个</li>
<li>datanode是小弟 ：  可以有多个</li>
<li>secondnamenode ：是秘书只能有一个</li>
<li>对于yarn ： resourcemanager只能有一个</li>
<li>而 ：nodemanagers ：可有多个</li>
</ul>
<h4 id="开始之前的配置"><a href="#开始之前的配置" class="headerlink" title="开始之前的配置"></a>开始之前的配置</h4><ul>
<li>关于hdfs和上面部署的一样</li>
<li>只不过在配置免密登录的时候不同</li>
<li>因为我们现在要做三台机器互相免密</li>
<li>所以我们要用</li>
<li><code>ssh-keygen -t rsa</code> 然后三次回车生成公钥和私钥</li>
<li>然后三台机器都要用一遍</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> 第一台机器名</span><br><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> 第二台机器名</span><br><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span> 第三台机器名</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>然后分别对三台机器用</li>
</ul>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ssh <span class="symbol">hadoop@</span>第一台机器名</span><br><span class="line">ssh <span class="symbol">hadoop@</span>第二台机器名</span><br><span class="line">ssh <span class="symbol">hadoop@</span>第三台机器名</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>最后分别ssh一下然后如果能成功就代表成功了</li>
</ul>
<h4 id="hdfs"><a href="#hdfs" class="headerlink" title="hdfs"></a>hdfs</h4><ul>
<li><code>core-site.xml</code></li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;configuration&gt;</span></span><br><span class="line"><span class="comment">#设置存储位置</span></span><br><span class="line"><span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>hadoop.tmp.dir<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>/home/hadoop/data/hadoopdate<span class="variable">&lt;/value&gt;</span></span><br><span class="line"> <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="comment">#设置namenode在哪一台机器上运行</span></span><br><span class="line"><span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>fs.defaultFS<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>hdfs://主机器的名称:9000<span class="variable">&lt;/value&gt;</span></span><br><span class="line"> <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="variable">&lt;/configuration&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>-<code>workers</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">第一台机器的名称</span><br><span class="line">第二台机器的名称</span><br><span class="line">第三台机器的名称</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>hdfs-site.xml</code></li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;configuration&gt;</span></span><br><span class="line"> <span class="comment">#下面的values代表是几台机器，我这个是三台机器</span></span><br><span class="line"> <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>dfs.replication<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>3<span class="variable">&lt;/value&gt;</span></span><br><span class="line">  <span class="variable">&lt;/property&gt;</span></span><br><span class="line">  <span class="comment">#设置secondarynamenode的端口和在哪一台机器上</span></span><br><span class="line"> <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>dfs.namenode.secondary.http-address<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>bigdata4:9868<span class="variable">&lt;/value&gt;</span></span><br><span class="line">  <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="comment">#同上一个</span></span><br><span class="line"> <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>dfs.namenode.secondary.https-address<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>bigdata4:9869<span class="variable">&lt;/value&gt;</span></span><br><span class="line">  <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="variable">&lt;/configuration&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>然后三台机器都要配置相同的环境变量</li>
</ul>
<h4 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h4><ul>
<li><code>mapred-site.xml</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.application.classpath<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><code>yarn-site.xml</code></li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;configuration&gt;</span></span><br><span class="line"><span class="comment">#设置resourcemanager其所占用的端口</span></span><br><span class="line"> <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.resourcemanager.webapp.address<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>bigdata5:9999<span class="variable">&lt;/value&gt;</span></span><br><span class="line">  <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="comment">#设置resourcemanager其所在的机器</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.resourcemanager.hostname<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>bigdata5<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="comment">#下面两个是正常yarn的配置文件</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.nodemanager.aux-services<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>mapreduce_shuffle<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line">    <span class="variable">&lt;property&gt;</span></span><br><span class="line">        <span class="variable">&lt;name&gt;</span>yarn.nodemanager.env-whitelist<span class="variable">&lt;/name&gt;</span></span><br><span class="line">        <span class="variable">&lt;value&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_HOME,PATH,LANG,TZ,HADOOP_MAPRED_HOME<span class="variable">&lt;/value&gt;</span></span><br><span class="line">    <span class="variable">&lt;/property&gt;</span></span><br><span class="line"><span class="variable">&lt;/configuration&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>同样三台机器也要配置相同的文件</li>
<li>然后我们要在我们的namenode机器上</li>
<li>开始初始化： <code>hdfs namenode -format</code></li>
<li>然后我们在namenode上开始运行 <code>start-dfs.sh</code></li>
<li>然后我们在resourcemanager上开始运行 <code>start-yarn.sh</code></li>
<li>然后我们可以用jps查看每个机器的进程</li>
<li>查看是不是符合我们的想法</li>
</ul>
<h3 id="关于datanode缺失"><a href="#关于datanode缺失" class="headerlink" title="关于datanode缺失"></a>关于datanode缺失</h3><ul>
<li>因为默认hadoop有一个id文件是在 <code>/tmp/hadoop-hadoop/dfs</code>下的</li>
<li>我们默认启动的时候可能有多个原因 ，造成生成的id不一致</li>
<li>比如 ； 我们忘记关闭hadoop服务之类的，或者卸载的时候忘记删掉他了</li>
<li>这些都会造成id不一致的问题</li>
<li>解决方法：</li>
<li>如果dfs文件夹中没有重要的数据，那么删除dfs文件夹，再重新运行下列指令（格式化指令）</li>
<li>如果dfs文件中有重要的数据，那么在dfs&#x2F;name目录下找到一个current&#x2F;VERSION文件，记录clusterID并复制。然后dfs&#x2F;data目录下找到一个current&#x2F;VERSION文件，将其中clustreID的值替换成刚刚复制的clusterID的值即可</li>
</ul>
<h2 id="hdfs的命令"><a href="#hdfs的命令" class="headerlink" title="hdfs的命令"></a>hdfs的命令</h2><ul>
<li>创建文件夹 <code>hdfs dfs -mkdir xxx</code> : 创建xxx文件夹，可以多层创建文件夹</li>
<li>创建文件 <code>hdfs dfs -touchz path</code></li>
<li>复制文件 <code>hdfs dfs -cp 源目录 目标路径</code> ：这个是把整个文件夹结构都cp过去：属于hdfs的内部操作不是上传下载</li>
<li>移动文件 <code>hdfs dfs -mv 源目录 目标目录</code></li>
<li>赋予权限 <code>hdfs dfs -chmod 权限参数 </code></li>
<li>上传文件 <code>hdfs dfs -put 源文件夹路径 目标文件夹路径</code></li>
<li>上传文件 <code>hdfs dfs -copyFromLocal 源文件夹 目标文件夹</code></li>
<li>上传文件且删除本地文件 <code>hdfs dfs -moveFromLocal 源文件 目标文件</code></li>
<li>下载文件 <code>hdfs dfs -get 源文件夹路径 目标文件夹路径</code></li>
<li>查看文件内容 <code>hdfs dfs -cat path</code>从头看这个文件</li>
<li>查看文件内容 <code>hdfs dfs -tail path</code>查看这个文件的最后1k</li>
<li>删除文件 <code>hdfs dfs -rm 文件路径</code></li>
<li>删除文件夹 <code>hdfs dfs -rm -R 文件夹</code></li>
</ul>
<h2 id="javaapi的方式操作hdfs"><a href="#javaapi的方式操作hdfs" class="headerlink" title="javaapi的方式操作hdfs"></a>javaapi的方式操作hdfs</h2><ul>
<li>单元测试 ： 代表我们可以 ， 单独运行某个方法</li>
<li>进行部份调试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hdfsapi</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">mkdir</span><span class="params">()</span> <span class="keyword">throws</span> IOException, URISyntaxException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 获取程序入口</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">org</span>.apache.hadoop.conf.Configuration(); <span class="comment">//  配置参数</span></span><br><span class="line">        <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://192.168.41.132:9000&quot;</span>); <span class="comment">//创建uri作为要连接的地址和端口</span></span><br><span class="line">        <span class="type">FileSystem</span> <span class="variable">fs</span> <span class="operator">=</span> FileSystem.get( uri , conf , <span class="string">&quot;hadoop&quot;</span>); <span class="comment">// 开始链接 ，三个参数分别是其所在地地方，配置参数 ，用户名</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/ggd&quot;</span>); <span class="comment">// 路径</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">mkdir</span> <span class="operator">=</span> fs.mkdirs(path); <span class="comment">// 判断是不是执行成功</span></span><br><span class="line">        Assert.assertEquals(<span class="literal">true</span> , mkdir);</span><br><span class="line">	</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>实现创建文件夹并移动且改名</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hdfsapi</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> FileSystem  fs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span> , <span class="string">&quot;hdfs://192.168.41.132:9000&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span> ,<span class="string">&quot;hadoop&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs = FileSystem.get(conf);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移动之前的文件存储路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> args[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 移动之后的文件存储路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">det</span> <span class="operator">=</span> args[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">hozhui</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要上传的文件目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pathlocalfile</span> <span class="operator">=</span> args[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">date</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">up</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">down</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">6</span>]);</span><br><span class="line"></span><br><span class="line">        String[] string = <span class="keyword">new</span> <span class="title class_">String</span>[args.length - <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">        System.arraycopy(args , <span class="number">7</span> , string , <span class="number">0</span> , args.length - <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        makeream(hozhui,url,det,pathlocalfile,date , up ,down , string);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//rm(20221115 , 1 , 1);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rm</span><span class="params">(<span class="type">int</span> m , <span class="type">int</span> up ,<span class="type">int</span> down )</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过递归调用本身函数，进行递归调用，删除不同日期的文件夹以及</span></span><br><span class="line">        <span class="keyword">while</span> (up &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            rm(m+<span class="number">1</span> , --up , <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 同上</span></span><br><span class="line">        <span class="keyword">while</span> (down &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            rm(m-<span class="number">1</span> , <span class="number">0</span> ,--down);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把数字改变成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> String.valueOf(m);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基础路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/data/dt=&quot;</span> + uri);</span><br><span class="line">        <span class="type">Path</span> <span class="variable">path1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/data/hive&quot;</span> + <span class="string">&quot;/&quot;</span> + uri + <span class="string">&quot;-01.data&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs.delete(path);</span><br><span class="line">            fs.delete(path1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makeream</span><span class="params">(String hozhui, String url , String det ,String pathlocalfile , <span class="type">int</span> nowday , <span class="type">int</span> up , <span class="type">int</span> down , String ...args)</span> &#123;</span><br><span class="line">        <span class="comment">// 基礎路徑</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">dataurl</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            String[] arg1 = <span class="keyword">new</span> <span class="title class_">String</span>[args.length-<span class="number">1</span>];</span><br><span class="line">            System.arraycopy(args , <span class="number">1</span> , arg1 ,<span class="number">0</span> ,args.length-<span class="number">1</span>);</span><br><span class="line">            dataurl = args[<span class="number">0</span>];</span><br><span class="line">            makeream(hozhui,url,det,pathlocalfile,nowday,up,down,arg1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dataurl = String.valueOf(nowday);</span><br><span class="line">            <span class="comment">// 通过递归的方式 ， 进行创建文件夹等操作</span></span><br><span class="line">            <span class="keyword">while</span> (up &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                makeream(hozhui,url,det,pathlocalfile,nowday+<span class="number">1</span> , --up , <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (down &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                makeream(hozhui,url,det,pathlocalfile,nowday-<span class="number">1</span> , <span class="number">0</span> ,--down);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取文件名字</span></span><br><span class="line">        String[] split = pathlocalfile.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filname</span> <span class="operator">=</span> split[split.length-<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 上传的文件路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">pathfile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(pathlocalfile);</span><br><span class="line">        <span class="comment">// 最后的文件的名字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">settotal</span> <span class="operator">=</span> det+ <span class="string">&quot;/&quot;</span> + dataurl + hozhui;</span><br><span class="line">        <span class="comment">// 刚开始创建的文件目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">urltotal</span> <span class="operator">=</span> url + dataurl;</span><br><span class="line">        <span class="comment">// 创建文件夹的Path</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(urltotal);</span><br><span class="line">        <span class="comment">// 移动前的文件路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">pathfilehdfs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>( path + <span class="string">&quot;/&quot;</span> + filname);</span><br><span class="line">        <span class="comment">// 新的名字文件路径</span></span><br><span class="line">        <span class="type">Path</span> <span class="variable">newname</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Path</span>(settotal);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 要移动到的路径</span></span><br><span class="line"><span class="comment">//        Path detPath = new Path(url1);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后来的文件目录</span></span><br><span class="line">        <span class="comment">// Path detpathfile = new Path(det + &quot;/&quot; + filname);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!fs.exists(<span class="keyword">new</span> <span class="title class_">Path</span>(det)))&#123;</span><br><span class="line">                fs.mkdirs(<span class="keyword">new</span> <span class="title class_">Path</span>(det));</span><br><span class="line">            &#125;</span><br><span class="line">            fs.mkdirs(path);</span><br><span class="line">            fs.copyFromLocalFile(pathfile , path);</span><br><span class="line">            <span class="comment">// fs.rename(pathfilehdfs , detPath);</span></span><br><span class="line">            fs.rename(pathfilehdfs , newname);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>单词统计</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="built_in">Map</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">wordcount</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> FileSystem fs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span> , <span class="string">&quot;hdfs://192.168.41.132:9000&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span> ,<span class="string">&quot;hadoop&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fs = FileSystem.get(conf);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="literal">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line"></span><br><span class="line">        wordcounts(<span class="string">&quot;/2.log&quot;</span> , <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">static</span> <span class="literal">void</span> wordcounts( <span class="built_in">String</span> path ,  <span class="built_in">String</span> regx ) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">String</span> basic = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>( FSDataInputStream fis = fs.open(<span class="keyword">new</span> Path(path));</span><br><span class="line">             OutputStream outputStream = <span class="keyword">new</span> FileOutputStream( <span class="keyword">new</span> File(<span class="string">&quot;D:\\ bg1.txt&quot;</span>) , <span class="literal">false</span>);</span><br><span class="line">             InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;D:\\ bg1.txt&quot;</span>));</span><br><span class="line">             )</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            IOUtils.copyBytes(fis,outputStream,<span class="number">4096</span> , <span class="literal">true</span>);</span><br><span class="line">            byte[] buffer = <span class="keyword">new</span> byte[<span class="number">1024</span>];</span><br><span class="line">            int len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((len = inputStream.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                basic = <span class="keyword">new</span> <span class="built_in">String</span>(buffer, <span class="number">0</span>, len);</span><br><span class="line">                System.out.println(basic);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="built_in">String</span>[] split = basic.split(regx);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">Map</span>&lt;<span class="built_in">String</span> , Integer&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (int i=<span class="number">0</span>;i&lt;split.length;i++)&#123;</span><br><span class="line">                result.put(split[i] , result.getOrDefault(split[i] , <span class="number">0</span> )+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">                result.forEach<span class="function"><span class="params">((k,v)-&gt;System.out.println(k+<span class="string">&quot;,&quot;</span>+v))</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">            <span class="title">int</span>[] <span class="title">flag</span> = <span class="title">new</span> <span class="title">int</span>[<span class="title">split</span>.<span class="title">length</span>];</span></span><br><span class="line"><span class="function">            <span class="title">for</span> <span class="params">(int i =<span class="number">0</span>; i&lt; split.length; i++)</span>&#123;</span></span><br><span class="line"><span class="function">                <span class="title">for</span> <span class="params">(int j = <span class="number">0</span>; j&lt; split.length;j++)</span>&#123;</span></span><br><span class="line"><span class="function">                    <span class="title">if</span> <span class="params">(split[i].equals(split[j]))</span>&#123;</span></span><br><span class="line"><span class="function">                        <span class="title">flag</span>[<span class="title">i</span>]++;</span></span><br><span class="line"><span class="function">                    &#125;<span class="title">else</span>&#123;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">                    &#125;</span></span><br><span class="line"><span class="function">                &#125;</span></span><br><span class="line"><span class="function">            &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">            <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;--------------------------------------------------------&quot;</span>)</span>;</span></span><br><span class="line"><span class="function">            <span class="title">for</span> <span class="params">(int i =<span class="number">0</span>; i&lt;split.length-<span class="number">1</span>;i++)</span>&#123;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">                <span class="title">if</span> <span class="params">(!(split[i].equals(split[i+<span class="number">1</span>])))</span>&#123;</span></span><br><span class="line"><span class="function">                    <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(split[i] + <span class="string">&quot;\t&quot;</span> + flag[i])</span>;</span></span><br><span class="line"><span class="function">                &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">            &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//            <span class="title">System</span>.<span class="title">out</span>.<span class="title">print</span><span class="params">(<span class="string">&quot;\n&quot;</span>)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//            <span class="title">for</span> <span class="params">(int i =<span class="number">0</span>; i&lt; flag.length;i++)</span>&#123;</span></span><br><span class="line"><span class="function">//                <span class="title">System</span>.<span class="title">out</span>.<span class="title">print</span><span class="params">(flag[i])</span>;</span></span><br><span class="line"><span class="function">//                <span class="title">System</span>.<span class="title">out</span>.<span class="title">print</span><span class="params">(<span class="string">&quot;\t&quot;</span>)</span>;</span></span><br><span class="line"><span class="function">//            &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">            <span class="title">System</span>.<span class="title">out</span>.<span class="title">println</span><span class="params">(<span class="string">&quot;--------------------------------------&quot;</span>)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        &#125; <span class="title">catch</span> <span class="params">(IOException e)</span> &#123;</span></span><br><span class="line"><span class="function">            <span class="title">e</span>.<span class="title">printStackTrace</span><span class="params">()</span>;</span></span><br><span class="line"><span class="function">        &#125;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<h3 id="关于文件的存储"><a href="#关于文件的存储" class="headerlink" title="关于文件的存储"></a>关于文件的存储</h3><ul>
<li>架构设计 ： 面试必问</li>
<li>namenode —–nn</li>
<li>负责对外的访问接口</li>
<li>负责块的映射</li>
<li>元数据 ； 描述数据的数据</li>
<li>文件名称</li>
<li>文件的目录</li>
<li>文件的属性，权限，创建时间，副本数据</li>
<li>blockmap ： 块映射</li>
<li>一个 文件被分割成多个数据块，</li>
<li>块映射不会永久化这个存储</li>
<li>是通过集群运行的时候dn定期发送blockreport给nn进行维护</li>
<li>控制其数据块在哪一个节点上的</li>
<li>nn作用 ： 管理文件的命名空间 ，其实就算维护文件系统树的文件以及文件夹</li>
<li>是以两种的方式永久的存储在磁盘</li>
<li>镜像文件 ： fsimage</li>
<li>编辑日志文件 editlogs</li>
<li>seconderynamenode ——snn</li>
<li>去老大的节点上拿镜像文件和日志文件，进行合并和备份，然后换给nn</li>
<li>datanode —–dn</li>
<li>每个节点都会有这个进程</li>
<li>负责关于客户端的文件的读写</li>
<li>负责存储数据</li>
<li>存储数据块，以及对于数据块的校验</li>
<li>每隔3秒发送一次心跳给namenode ，告诉你我还在</li>
<li>每个一定时间（6h）发送一次块报告,这个报告，是扫描磁盘和内存之中的数据一不一样</li>
<li>目的 ： 生产上 ： 可能会发生文件块丢失或者损坏</li>
<li></li>
</ul>
<h2 id="mapreduce"><a href="#mapreduce" class="headerlink" title="mapreduce"></a>mapreduce</h2><ul>
<li>简介 ： 其设计理念是计算向数据靠拢，采用分而治之的策略，将庞大的数据分为很多个很多个小切片，并且为每个小切片单独的启动一个map任务</li>
<li>适合mapredurce处理的数据集要满足一个前提：待处理的数据集可以分解成许多更小的数据集，且每一个更小的数据集都可以并行的处理</li>
<li>其采用的是主从架构（master&#x2F;Slave），就是一个主服务器多个从服务器（salve），master上运行jobTracker，slaver运行TaskTracker</li>
</ul>
<h3 id="mapreduce体系架构"><a href="#mapreduce体系架构" class="headerlink" title="mapreduce体系架构"></a>mapreduce体系架构</h3><ul>
<li>其主要是由四个部分组成 ： 分别是Client , JobTracker,TaskTracker以及Task</li>
<li>Client ： 用户编写的Mapredurce程序通过Client提交到jobTracker</li>
<li>jobTracker(运行在主服务器上) : 负责监控和资源调度</li>
<li>监控所有的TaskTracker与job的健康情况，一旦发现失败，就把相应的任务转移到其他的节点</li>
<li>其会跟踪任务的执行调度，资源使用量，并将这些信息告诉任务调度器（TaskScheduler），而调度器会在资源调度器出现空闲时，选择合适的任务去使用这些资源</li>
<li>jobTracker（运行在服务器）</li>
<li>TaskTracker会周期性的通过心跳将本节点上资源的使用情况和任务运行进度汇报给jobTracker，同时接受jobTracker发送过来的命令并执行相应的操作（如 ： 启动新任务 ，杀死任务等）</li>
<li>TaskTracker使用“slot”等量划分本节点上的资源量（CPU ，内存）。一个Task获取到一个slot后才有机会运行，而hadoop调度器的作用就是将各个TaskTracker上的空闲slot分配给Task使用。slot分为Map slot和Reduce slot两种，分别提供Map Task和Redurce Task使用</li>
<li>Task</li>
<li>Map Task和Redurce Task 均由TaskTracker</li>
</ul>
<h3 id="mapreduce的工作流程"><a href="#mapreduce的工作流程" class="headerlink" title="mapreduce的工作流程"></a>mapreduce的工作流程</h3><ul>
<li>一个大的mapredurce任务，首先会被分为为若干个Map任务在多台机器上执行运行（map任务通常运行在存储节点上），每一个map任务会输出一个&lt;key , value&gt;形式的中间结果，一个map任务只有全部执行完成之后才会进行reduce任务，map的输出结果&lt;key, value&gt;（存储在本地磁盘） ， 具有相同的key会被发送到同一个reduce任务</li>
<li>注意 ：不同的map之间不会有通信</li>
<li>不同的reduce之间也不会</li>
<li>用户不能显式的从一台机器向另外一台机器发送消息，所有的信息交换都是通过Mapredurce框架自身去实现</li>
<li>map的输入文件，redurce任务的输出结果都是保存在hdfs分布式文件系统中，map的输出结果保存在本地磁盘文件中</li>
<li>当一个map任务处理全部结束之后，reduce任务才能开始去取相应的数据</li>
<li>只有map任务需要考虑数据局限性，实现计算向数据靠拢，reduce无需考虑数据局限性</li>
</ul>
<h4 id="各阶段执行内容"><a href="#各阶段执行内容" class="headerlink" title="各阶段执行内容"></a>各阶段执行内容</h4><ul>
<li>分为 ：5个阶段 预处理，map，shuffle，reduce，输出</li>
<li>预处理 ： 由inputFormat 进行格式验证以及逻辑上的分区inputSplit ， inputSplit经过redodrdreader</li>
<li>根据inputSplit的信息来处理inputSplit中的具体记录，转换为键值对 ，输入给map</li>
<li>map ： 接受来自RR键值对，进行分区，排序，合并，归并，得到&lt;key , value-list&gt;形式的中间结果，输入给reduce，此处包括map端的shuffle和reduce端的shuffle</li>
<li>reduce ： 接受shuffle输出的&lt;key , value&gt;,执行用户子自定义，输出给outputFromat</li>
<li>输出 ： outputFromat，模块会验证输出目录是不是已经存在以及输出结果是不是符合配置文件中的配置类型，如果满足，就输出reduce的结果到分布式文件系统</li>
</ul>
<h4 id="map的shuffle"><a href="#map的shuffle" class="headerlink" title="map的shuffle"></a>map的shuffle</h4><ul>
<li>过程有四部</li>
<li>输入数据并执行map任务</li>
<li>map任务结果输出，写入缓存</li>
<li>溢写 ： 如果输出结果超过了一定的比例，每一次溢写会在磁盘上生成一个磁盘文件，写入之前进行会分区，，排序，如果指定了commbiner还可以进行合并，这样经过溢写的磁盘文件就包含了多个分区，且分区内部都是经过排序的</li>
<li>merge ： 随着map任务的进行，当有多个溢写文件时（就是大于等于2的适合），就会发现merge，生成一个更大的磁盘文件，这个大的溢写文件也是经过排序和分区的，默认情况下每10个溢写会变成一个大文件，通常在merge过程中，如果文件数量大于3则进行combine操作，从而减少磁盘的数据量，如果只有一两个溢写，合并操作得不偿失</li>
</ul>
<h4 id="reduce的shuttle"><a href="#reduce的shuttle" class="headerlink" title="reduce的shuttle"></a>reduce的shuttle</h4><ul>
<li>领取数据 ： 经过map的suffle后，map的输出结果保存在磁盘，此时，需要将磁盘数据取回到reduce机器，此时如果线程被占满，同样会和map端一样开启溢写操作，reduce通过RPC询问JobTracker是不是还拥有未完成的map任务，如果有，将数据提取到reduce机器上，此时实际上是多个reduce机器，同时多线程从map机器领回数据</li>
<li>merge ： 一个map的shuffle结果因为拥有多个分区，所以会有不同的reduce机器取回自己的数据，而每一个reduce也从不同的map机器取回数据，如果每个reduce机器内存达到阈值，就进行溢写操作，溢写的时候一般有很多键值对可以进行merge，如果定义了combiner还可以进行合并，进行溢写操作的过程中还可以进行combine。并非是一个reduce程序从map机器上取回数据就生成一个溢写文件，而是缓存不够用，则发生溢写，如果缓存够用，则是直接在内存里进行操作</li>
<li>把数据输出给map任务（对一个reduce而言）：执行用户自定义的逻辑，最终输出</li>
</ul>
<h2 id="mapredurce里的数据类型"><a href="#mapredurce里的数据类型" class="headerlink" title="mapredurce里的数据类型"></a>mapredurce里的数据类型</h2><ul>
<li>intWritable</li>
<li>longWritable</li>
<li>等等，</li>
<li>就是基本数据类型加上Writable</li>
<li>在redurce里数据类型也是一样的</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop面试会问</title>
    <url>/2022/11/17/11-17/</url>
    <content><![CDATA[<h1 id="hdfs的写流程"><a href="#hdfs的写流程" class="headerlink" title="hdfs的写流程"></a>hdfs的写流程</h1><ul>
<li>面试|必备</li>
<li>通过客户端，写文件</li>
<li>首先客户端会调用 FileSystem 的creat</li>
<li>去和namenode进行通信 ， 是通过rpc通信</li>
<li>然后namenode会去检查这个路径的文件是不是存在并且检查你的权限</li>
<li>假如都ok ， 则执行你的操作</li>
<li>但是这个时候还没有写数据</li>
<li>是不关联任何block的</li>
<li>而namenode根据上传文件的大小，和块的大小，以及副本数</li>
<li>计算要上传多少块以及后续要在datanode上的什么位置</li>
<li>最后把信息返回到客户端</li>
<li>就是 ： fsdataoutputstream</li>
<li>Client 调用 fdsdataoutputstream</li>
<li>将第一个块的第一个副本数写第一个dn节点</li>
<li>写完去写第二个</li>
<li>然后是第三个</li>
<li>当三个都写完了 ， 会返回一个ack package</li>
<li>把确认包给dn2</li>
<li>当dn2确认并加上自己的</li>
<li>然后给dn3，同上</li>
<li>最后将ack package 返回给 fdsdataoutputstream</li>
<li>上面只是对于第一个块</li>
<li>当所有的块全部写完的时候，我们会调用</li>
<li>这个流对象的close方法</li>
<li>告诉namenode ，文件写入成功</li>
</ul>
<h1 id="hdfs读操作"><a href="#hdfs读操作" class="headerlink" title="hdfs读操作"></a>hdfs读操作</h1><ul>
<li>面试|必备</li>
<li>Cilent调用FS.open(filepath)</li>
<li>nn和pc进行通信，返回该文件的部分或者全部的block列表</li>
<li>以fdsdatainputstream的形式</li>
<li>Client的FSDDataInputstream的read方法</li>
<li>会去和最近的dn进行匹配，读取完成</li>
<li>会check，假如ok，就关闭通信</li>
<li>假如读取失败</li>
<li>会记录dn+block信息</li>
<li>下次就也不会从这个节点读取，转而从其他的节点读取</li>
<li>然后会去和第二块的最近的dn进行读取，以此类推</li>
<li>当整个block全部读取完之后，文件还没读取完，就会继续调用fs的方法进行下一次block的读取</li>
<li>以此类推</li>
<li>最后用close方法关闭</li>
</ul>
<h1 id="hdfs的副本放置策略"><a href="#hdfs的副本放置策略" class="headerlink" title="hdfs的副本放置策略"></a>hdfs的副本放置策略</h1><ul>
<li>机架</li>
<li>生产上读写操作，选择dn节点进行读取</li>
<li>第一副本 ：</li>
<li>放置在client上传的dn节点</li>
<li>client 不在dn节点 ，就随机选择一个dn</li>
<li>第二副本 ：</li>
<li>放置在第一个副本不同的机架上的一个dn节点</li>
<li>第三副本 ：</li>
<li>和第二副本相同机架但是不同节点</li>
<li>补充 ；</li>
<li>副本数是三</li>
<li>上述都是以副本数为3的情况</li>
<li>如果是4就多几个随机</li>
</ul>
<h1 id="hdfs的安全模式"><a href="#hdfs的安全模式" class="headerlink" title="hdfs的安全模式"></a>hdfs的安全模式</h1><ul>
<li>什么时候会发生安全模式</li>
<li>刚启动hadoop的时候</li>
<li>hsdf发生故障的时候 ： 集群文件大量会丢失</li>
<li>人为进入</li>
<li>命令 ： <code>hdfs dfsadmin -safemode &lt;enter | leave | get | wait | forceExit&gt;</code></li>
</ul>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><ul>
<li>kill 命令 不只有一个-9</li>
<li>还有很多 ： 目前我所看见的至少有64个</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">1</span>) SIGHUP     <span class="number">2</span>) SIGINT     <span class="number">3</span>) SIGQUIT     <span class="number">4</span>) SIGILL     <span class="number">5</span>) SIGTRAP</span><br><span class="line"><span class="attribute">6</span>) SIGABRT     <span class="number">7</span>) SIGBUS     <span class="number">8</span>) SIGFPE     <span class="number">9</span>) SIGKILL    <span class="number">10</span>) SIGUSR1</span><br><span class="line"><span class="attribute">11</span>) SIGSEGV    <span class="number">12</span>) SIGUSR2    <span class="number">13</span>) SIGPIPE    <span class="number">14</span>) SIGALRM    <span class="number">15</span>) SIGTERM</span><br><span class="line"><span class="attribute">16</span>) SIGSTKFLT    <span class="number">17</span>) SIGCHLD    <span class="number">18</span>) SIGCONT    <span class="number">19</span>) SIGSTOP    <span class="number">20</span>) SIGTSTP</span><br><span class="line"><span class="attribute">21</span>) SIGTTIN    <span class="number">22</span>) SIGTTOU    <span class="number">23</span>) SIGURG    <span class="number">24</span>) SIGXCPU    <span class="number">25</span>) SIGXFSZ</span><br><span class="line"><span class="attribute">26</span>) SIGVTALRM    <span class="number">27</span>) SIGPROF    <span class="number">28</span>) SIGWINCH    <span class="number">29</span>) SIGIO    <span class="number">30</span>) SIGPWR</span><br><span class="line"><span class="attribute">31</span>) SIGSYS    <span class="number">34</span>) SIGRTMIN    <span class="number">35</span>) SIGRTMIN+<span class="number">1</span>    <span class="number">36</span>) SIGRTMIN+<span class="number">2</span>    <span class="number">37</span>) SIGRTMIN+<span class="number">3</span></span><br><span class="line"><span class="attribute">38</span>) SIGRTMIN+<span class="number">4</span>    <span class="number">39</span>) SIGRTMIN+<span class="number">5</span>    <span class="number">40</span>) SIGRTMIN+<span class="number">6</span>    <span class="number">41</span>) SIGRTMIN+<span class="number">7</span>    <span class="number">42</span>) SIGRTMIN+<span class="number">8</span></span><br><span class="line"><span class="attribute">43</span>) SIGRTMIN+<span class="number">9</span>    <span class="number">44</span>) SIGRTMIN+<span class="number">10</span>    <span class="number">45</span>) SIGRTMIN+<span class="number">11</span>    <span class="number">46</span>) SIGRTMIN+<span class="number">12</span>    <span class="number">47</span>) SIGRTMIN+<span class="number">13</span></span><br><span class="line"><span class="attribute">48</span>) SIGRTMIN+<span class="number">14</span>    <span class="number">49</span>) SIGRTMIN+<span class="number">15</span>    <span class="number">50</span>) SIGRTMAX-<span class="number">14</span>    <span class="number">51</span>) SIGRTMAX-<span class="number">13</span>    <span class="number">52</span>) SIGRTMAX-<span class="number">12</span></span><br><span class="line"><span class="attribute">53</span>) SIGRTMAX-<span class="number">11</span>    <span class="number">54</span>) SIGRTMAX-<span class="number">10</span>    <span class="number">55</span>) SIGRTMAX-<span class="number">9</span>    <span class="number">56</span>) SIGRTMAX-<span class="number">8</span>    <span class="number">57</span>) SIGRTMAX-<span class="number">7</span></span><br><span class="line"><span class="attribute">58</span>) SIGRTMAX-<span class="number">6</span>    <span class="number">59</span>) SIGRTMAX-<span class="number">5</span>    <span class="number">60</span>) SIGRTMAX-<span class="number">4</span>    <span class="number">61</span>) SIGRTMAX-<span class="number">3</span>    <span class="number">62</span>) SIGRTMAX-<span class="number">2</span></span><br><span class="line"><span class="attribute">63</span>) SIGRTMAX-<span class="number">1</span>    <span class="number">64</span>) SIGRTMAX</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这个简单介绍几个 ：</li>
<li>1 ： 重新加载合格进程</li>
<li>9 ： 杀死一个进程</li>
<li>15 ： 正常停止一个进程</li>
</ul>
<h1 id="公司内部的逻辑"><a href="#公司内部的逻辑" class="headerlink" title="公司内部的逻辑"></a>公司内部的逻辑</h1><ul>
<li>一般一个组件都会有一个用户进行管理</li>
<li>比如 ： mysql ： 可以创建一个mysql用户</li>
<li>等</li>
<li>创建数据库的流程 ：</li>
<li><code>create dataase dl2262;</code></li>
<li><code>grant all priviledges on dl2262 identified by &quot;1234546;&quot;</code></li>
<li><code>flush priviledges;</code></li>
</ul>
<h1 id="hdfs生产最佳实践"><a href="#hdfs生产最佳实践" class="headerlink" title="hdfs生产最佳实践"></a>hdfs生产最佳实践</h1><ul>
<li>如何查看hdfs的文件块是不是丢失<br>-<code>hdfs fsck&lt;path&gt;</code></li>
</ul>
<h2 id="hdfs-的block块丢失了如何解决"><a href="#hdfs-的block块丢失了如何解决" class="headerlink" title="hdfs 的block块丢失了如何解决"></a>hdfs 的block块丢失了如何解决</h2><ul>
<li>第一种 ： 不用解决 ，也因为hdfs会自动回复，一般是6h ， 就是dn上传的时候</li>
<li>第二种 ： 手动进行回复</li>
<li><code>hdfs debug recoverLease -path &lt;filename&gt; retries num</code></li>
<li>后面的是重试次数</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>shell</title>
    <url>/2022/11/02/11-2/</url>
    <content><![CDATA[<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><ul>
<li>文件命名 ： 结尾一般以.sh结尾</li>
<li>不要编译</li>
<li>文件第一行 ，一般写一个编辑器 ，就比如：#！bin&#x2F;bash</li>
<li>编写脚本</li>
<li>添加权限</li>
<li>chmod添加权限</li>
</ul>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul>
<li>sh .&#x2F;xxx.sh（脚本名字）</li>
<li>如果给予了执行权限就可以直接执行</li>
<li>debug</li>
<li>在 #！bin&#x2F;bash 后面加一个 -x</li>
<li>就可以看见程序运行的过程</li>
<li>还可以用 sh -x xxx脚本名字</li>
</ul>
<h1 id="在shell里定义变量以及引用"><a href="#在shell里定义变量以及引用" class="headerlink" title="在shell里定义变量以及引用"></a>在shell里定义变量以及引用</h1><ul>
<li>用read xx xx xx ：代表要从键盘输入3次，以空格分割 ， 如果要在自变量里面定义空格可以用 “xxx xxx” 这样就可以当成一个变量输入了</li>
<li>key&#x3D;value ： 定义变量</li>
<li>等号前后不能有空格</li>
<li>引用变量则用$xxx（变量的名字）</li>
<li>但是其中有单引号和双引号和反引号的区别</li>
<li>如果是单引号和双引号都是默认定义成字符串</li>
<li>如果是反引号&#96;&#96; 里面的会被解释成系统命令，并且执行</li>
<li>引用变量一般是要通过${} 而不是$</li>
<li>因为如果要拼接字符串的时候 ，我们就可以${name}xxxx（要拼接的内容）</li>
</ul>
<h2 id="特殊的命令"><a href="#特殊的命令" class="headerlink" title="特殊的命令"></a>特殊的命令</h2><ul>
<li>如果要在里面定义参数 ， 则$1代表脚本的第一个需要输入的参数 ， $2 ,$3…要第二个第三个。。。</li>
<li>而$0 :获取当前的文件名字</li>
<li>$? : 返回执行之后的状态 ： 0是正常执行 ， 非0是错误</li>
<li>$*代表所有传入的内容</li>
<li>$#代表传入的数量</li>
<li>$$<br>代表是当前进程的进程号<br>$$</li>
<li>$@把传入的参数作为一个字符串输出，但是里面仍然认为由多个字符串而$*则是认为他只有一个字符串</li>
<li>转义字符 ： 和c一样</li>
<li>定义数组 ： arr&#x3D;（zs lis ww zl wrm）</li>
<li>获取数组里的元素 ： ${arr[*]} :这个是获取所有的 。</li>
<li>但是这个里面不能由；</li>
<li>如果要查看单个和java里一样，把【】中的换成从0开始的数字</li>
<li>代表查看数组里的元素个数 ： <code>$&#123;井号arr[*]&#125;</code></li>
<li>两种括号的形式</li>
<li>由子shell执行 ，不会影响到这个shell <code>（）</code></li>
<li>由当前shell执行 ，会影响到这个shell <code>&#123;&#125;</code></li>
<li>权限判断：</li>
<li><code>-r</code> ：读权限</li>
<li><code>-w</code> ：写权限</li>
<li><code>-x</code> ：执行权限</li>
<li><code>-e</code> ：文件是不是存在</li>
<li><code>-d</code> ：是不是目录</li>
<li><code>-f</code> ：是不是文件</li>
<li><code>-c</code> ：是不是字符设备</li>
<li><code>-b</code> ：是不是块设备</li>
<li><code>-s</code> ：文件是不是非空</li>
<li><code>-l</code> ：符号连接</li>
</ul>
<h2 id="对变量以及字符串的操作"><a href="#对变量以及字符串的操作" class="headerlink" title="对变量以及字符串的操作"></a>对变量以及字符串的操作</h2><ul>
<li><code>$&#123;num:-val&#125;</code> : 若num存在则是num , 要不然就是val</li>
<li><code>$&#123;num!=val&#125;</code> : 如果num存在，则是num 要不然就是val 且将num赋值为val</li>
</ul>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><ul>
<li><code>if else</code></li>
<li><code>if condition(条件判断);then</code></li>
<li><code>command</code></li>
<li><code>else</code></li>
<li><code>command</code></li>
<li><code>fi</code></li>
<li><code>condition</code> ： [] 比如：[ 1 &#x3D;&#x3D; 2 ] 变量以及判断符号前后有空格</li>
<li>值判断 ：</li>
<li>常规的都可以用</li>
<li><code>=</code> 等于</li>
<li><code>==</code>等于</li>
<li><code>-ne</code> 数值不等</li>
<li><code>-eq</code> 数值相等</li>
<li><code>-gt</code> 大于</li>
<li><code>-ge</code> 大于等于</li>
<li><code>-le</code> 小于等于</li>
<li><code>-lt</code> 小于</li>
<li><code>if con; then</code></li>
<li><code>command</code></li>
<li><code>elif con; then</code></li>
<li><code>com</code></li>
<li><code>....</code></li>
<li>后面 <code>elif</code>可以无限加</li>
<li>同时也有 <code>break</code>和 <code>countinue</code></li>
</ul>
<h2 id="与或非"><a href="#与或非" class="headerlink" title="与或非"></a>与或非</h2><ul>
<li>与 <code>||</code></li>
<li>或 <code>&amp;&amp;</code></li>
</ul>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul>
<li><code>for var in con1 con2 con3</code></li>
<li><code>do</code></li>
<li><code>程序段</code></li>
<li><code>done</code></li>
<li><code>for((i=0;i&lt;10;i++))</code></li>
<li><code>do</code></li>
<li><code>程序段</code></li>
<li><code>done</code></li>
</ul>
<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><ul>
<li><code>while【con】</code></li>
<li><code>do</code></li>
<li><code>程序段</code></li>
<li><code>done</code></li>
</ul>
<h2 id="until"><a href="#until" class="headerlink" title="until"></a>until</h2><ul>
<li><code>until【con】</code></li>
<li><code>do</code></li>
<li><code>程序段</code></li>
<li><code>done</code></li>
<li>这个和 <code>while</code>相反 ，条件为错，一直执行</li>
<li>上述的程序段中可以用let i++等</li>
<li>这个 <code>con</code>可以应用（（））或者中括号都行</li>
</ul>
<h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><ul>
<li><code>case $变量名 in</code></li>
<li><code>&quot;值 1&quot;）</code></li>
<li><code>如果变量的值等于1 ，则执行程序1</code></li>
<li><code>；；</code></li>
<li><code>&quot;值 2&quot;）</code></li>
<li><code>如果变量的值等于2 ，则执行程序2</code></li>
<li><code>；；</code></li>
<li><code>。。。还可以衔接很多的</code></li>
<li><code>*)</code></li>
</ul>
<h2 id="对字符串的操作"><a href="#对字符串的操作" class="headerlink" title="对字符串的操作"></a>对字符串的操作</h2><ul>
<li>字符串的长度 ： <code>$&#123;井号xxx&#125;</code></li>
<li>从下标n处开始进行提取 ： <code>$&#123;xxx:n&#125;</code></li>
<li>从下表为n处提取m个 ： <code>$&#123;xxx:n:m&#125;</code></li>
<li>用new替换xxx中出现的第一个mm ： <code>$&#123;xxx/mm/new&#125;</code></li>
<li>用new替换xxx中出现的所有mm ： <code>$&#123;xxx//mm/new&#125;</code></li>
<li>IFS变量进行字符串分割</li>
<li></li>
</ul>
<h1 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h1><ul>
<li>函数名（）{}</li>
<li>fnction 函数名（）{}</li>
<li>函数的返回值可以应用return来进行结束</li>
</ul>
<h1 id="shell分析工具"><a href="#shell分析工具" class="headerlink" title="shell分析工具"></a>shell分析工具</h1><ul>
<li>cut ：剪</li>
<li>cut[选项参数] filename</li>
<li><code>-f</code> 列号，第几列</li>
<li><code>-f 2 </code>：代表第二列</li>
<li><code>-f 2-</code> ：代表第二列之后的所有</li>
<li><code>-d</code> 分隔符，按照指定的分隔符分割列，默认是\t</li>
<li><code>-c</code> 按照字符切割 后面夹n表示第几列 如-c1</li>
<li><code>awk</code> : 文本分析工具 或者叫 gawk</li>
<li><code>awk[选项参数] &#39;/pattern1&#123;action1&#125; /pattern2/&#123;action2&#125;...&#39; (filename)</code></li>
<li>选项参数</li>
<li><code>-F</code> ：指定输入文件分隔符</li>
<li><code>-v</code> ：赋值一个用户自己定义的变量</li>
<li>打印第一和第二列 ： <code>awk &#39;&#123;print $1，$2&#125;&#39; （filename）</code></li>
<li>awk一般和cat联用 ： <code>cat xxx | awk &#39;&#123;print $1，$2&#125;&#39;</code></li>
<li>也可以这样 ： <code>cat xxx | awk &#39;&#123;print $1&quot;,&quot;$2&#125;&#39;</code> : 这样代表会让其中两列用，分割的形式表示出来</li>
<li>还可以加上 ：<code>cat xxx | awk &#39;BEGINH&#123;print xxx&#125;&#123;print $1&quot;,&quot;$2&#125;END&#123;print mmm&#125;&#39;</code> ：就会在开始及结束的时候分别加上xxx和mmm</li>
<li><code>-f</code> 则是执行脚本</li>
<li>还可以 <code>cat xxx | awk -v i=1 -F &quot;:&quot; &#39;&#123;print $3 +i&#125;&#39;</code> :代表xxx文件的由：分割的第3列都加一在输出</li>
<li>内置变量</li>
<li><code>FILENAME</code> ：文件名</li>
<li><code>NR</code> ： 已读的记录数（行号）</li>
<li><code>NF</code> ： 浏览记录的域的个数（切割后的列的个数）</li>
<li>获取第一行 <code>cat xxx | awk &#39;NR==1&#123;print&#125;&#39;</code></li>
<li>里面的条件&#x3D;&#x3D;可以换成  &gt; &lt; &gt;&#x3D; &lt;&#x3D;</li>
<li></li>
<li><code>sed</code> : 文本替换(回去自己查)</li>
<li>把文本中 d 替换成 m ,每行第一次遇见a才会替换</li>
<li><code>sed -i &#39;s/d/m/&#39;</code> xxx文件名</li>
<li>全文替换</li>
<li><code>sed -i &#39;s/d/m/g&#39;</code> xxx文件名</li>
<li>把值路径替换成&#x2F;root</li>
<li><code>sed -i &#39;s//fata/spark//root</code> xxx文件’</li>
<li>不过会爆错</li>
<li>不过加上\就对了</li>
<li><code>sed -i &#39;s\/fata\/spark\/root&#39;</code> xxx文件’</li>
<li><code>sed -i &#39;s#/root#/data/spark#g&#39;</code> xxx文件</li>
</ul>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul>
<li>模糊式的匹配搜索</li>
<li>pattern</li>
<li>最简单的正则 ： 直接给一个关键字 就是grep的时候</li>
<li>特殊字符</li>
<li>^作为一行的开头 ：比如^a 代表以a开头</li>
<li>$作为一行的结束 ：比如n$ 代表以n结尾</li>
<li>正则可以多种一起应用</li>
<li>比如 ^$代表空行</li>
<li>grep -n显示行号</li>
<li>通配符 ： . 代表匹配一个任意的字符</li>
<li>比如 ： r..t :代表r和t中间有两个字符的</li>
<li>特殊字符 ： * ：代表一个字符出现任意次数</li>
<li>比如 o* 代表o出现任意次数</li>
<li>.*则表示任意一个字符出现任意次数 ，甚至可以匹配空字符串</li>
<li>于是可以和上面的联用 ： ^a.*b$</li>
<li>代表以a开头 b结尾 中间任意字符的</li>
<li>字符区间：</li>
<li>[]表示匹配其中范围内的字符</li>
<li>比如[0-9]* ：任意长度的数字</li>
<li>[0,7] : 0或7</li>
<li>还可以这样写 ： [a-c , b-f]</li>
<li>[ab]* ：代表任意以ab组成的 比如 ：aab<br>abb 等</li>
<li>转义字符 \</li>
<li>当我们要搜索$等关键字的时候</li>
<li>要’反斜杠$’ :表示转义 ，才可以用做搜索</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul>
<li>匹配手机号</li>
<li><code>^1[345678][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$</code></li>
<li><code>^1[345678][0-9]&#123;9&#125;$</code></li>
<li>但是下面的花括号是扩展</li>
<li>要用 <code>grep -E ^1[345678][0-9]&#123;9&#125;$ </code>才可以</li>
<li>但是上面的最开始的是都可以支持的</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>mapreduce</title>
    <url>/2022/11/21/11-21/</url>
    <content><![CDATA[<h1 id="续讲Hadoop"><a href="#续讲Hadoop" class="headerlink" title="续讲Hadoop"></a>续讲Hadoop</h1><h2 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h2><p>关于mapreduce的操作模式就是模板模式，加上自定义的变量</p>
<h3 id="模板模式-1"><a href="#模板模式-1" class="headerlink" title="模板模式"></a>模板模式</h3><p>关于模板模式，就是三步走</p>
<p>开始阶段 ： map阶段</p>
<p>处理阶段 ： reduce阶段</p>
<p>结束阶段 ： 关闭流并输出</p>
<h3 id="自定义的变量"><a href="#自定义的变量" class="headerlink" title="自定义的变量"></a>自定义的变量</h3><p>BooleanWriteable : 布尔类型</p>
<p>ByteWriteable : Byte类型</p>
<p>DoubleWriteable : double类型</p>
<p>FloatWriteable ：float类型</p>
<p>intWriteable ： int类型</p>
<p>…（等等）</p>
<h3 id="mapreduce的核心方法"><a href="#mapreduce的核心方法" class="headerlink" title="mapreduce的核心方法"></a>mapreduce的核心方法</h3><ul>
<li>input : InputFormat &#x3D;&gt; 如何加载数据</li>
<li>查看源码发现有DBInputFormat 和 FileInputFormat，代表我们可以从db（数据库中），或者文件中加载数据（上述两个是抽象类，我们实例化的时候其实是实例化其子类）</li>
<li>简单来说就是读取数据的方法</li>
<li>默认实例化的时候是实例化 TextInputFormat</li>
<li>关于TextInputFormat ： 其有两个参数<ul>
<li>key 和 value<ul>
<li>key 是 读取文件的位置</li>
<li>value 是 一行一行的内容<ul>
<li>在value中有个属性 判断文件可不可以被切分 ： isSpiltable<ul>
<li>map task 数据 是由 input 的切片数量决定的 ， 当不可被切片的时候对应的数量就是1，对应一个map task</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>creatRecordReader</p>
<h2 id="一个文件加载的时候会被切分成几个切片"><a href="#一个文件加载的时候会被切分成几个切片" class="headerlink" title="一个文件加载的时候会被切分成几个切片"></a>一个文件加载的时候会被切分成几个切片</h2><p>前提 ： 文件可以被切分</p>
<p>当一个文件 在hdfs上的时候是按我们的大小进行切分的 以128m为基础单位</p>
<p>而我们的map的切片是按照blocksize进行切分的简单来说就是以blocksize的大小进行切分</p>
<p>总结  ：</p>
<ul>
<li>文件大小小于128m<ul>
<li>那么切分成1片</li>
</ul>
</li>
<li>如果文件大于128m<ul>
<li>filesize&#x2F;splitesize &#x3D; num 切片数</li>
<li>filesize剩余的部分 ： 和splitesize的10%比较<ul>
<li>如果大，则开启一个切片文件</li>
<li>如果小，则是和上面最后一个合并到一起</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>不能被切分的文件： 某些被压缩文件</p>
<ul>
<li>关于这个切片大小的标准 ：<ul>
<li>在hdfs上是128m</li>
<li>但是在idea上是32m（在源码里能看）</li>
</ul>
</li>
</ul>
<h2 id="redurce-task-个数是由上面决定"><a href="#redurce-task-个数是由上面决定" class="headerlink" title="redurce task 个数是由上面决定?"></a>redurce task 个数是由上面决定?</h2><p>默认是 1</p>
<p>如果要更改要手动更改</p>
<p>setNumReduceTasks(数量)</p>
<p>如果 reduce阶段数量变多</p>
<p>则会把相同的文件拉到一起，就是按照一个规则进行的分区</p>
<p>默认是走的hashcode ： 这个按照规则来分的就是分区</p>
<p>一般来说 ： 分区的结果是 suffler 的输出结果是 reduce的输入</p>
<h3 id="简单需求"><a href="#简单需求" class="headerlink" title="简单需求"></a>简单需求</h3><p>基于phone的存储数据 ，进行分文件存储</p>
<p>比如</p>
<p>13开头的存储在一个上</p>
<p>15开头的在一个文件上</p>
<p>这就要自定义分区</p>
<p>通过继承Partitioner类实现方法然后导入方法</p>
<p>实现getPartition方法进行分区 ： 以下是一个简单的分区函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">myPartionit</span> <span class="keyword">extends</span> <span class="title class_">Partitioner</span>&lt;Text , IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPartition</span><span class="params">(Text text, IntWritable intWritable, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (text.toString().equals(<span class="string">&quot;ANALYST&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (text.toString().equals(<span class="string">&quot;CLERK&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (text.toString().equals(<span class="string">&quot;MANAGER&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (text.toString().equals(<span class="string">&quot;PRESIDENT&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (text.toString().equals(<span class="string">&quot;SALESMAN&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们要在我们的主程序中调用这个类 ， test类：就是我们的主类，如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sxwang</span></span><br><span class="line"><span class="comment"> * 11 18 14:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * driver</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">2</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;出现问题最少两个参数&quot;</span>);</span><br><span class="line">System.exit(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">        String input=args[<span class="number">0</span>];</span><br><span class="line">String output=args[<span class="number">1</span>];</span><br><span class="line"><span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line"><span class="comment">//0.todo... 删除目标路径</span></span><br><span class="line">FileUtils.deletePath(conf,output);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.设置 作业名称</span></span><br><span class="line"><span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;WCAPP&quot;</span>);</span><br><span class="line"><span class="comment">//2.设置map reduce 执行代码的主类</span></span><br><span class="line">job.setJarByClass(test.class);</span><br><span class="line">job.setMapperClass(MyMapper.class);</span><br><span class="line">job.setReducerClass(MyReducer.class);</span><br><span class="line"><span class="comment">//3.指定 oupput kv类型</span></span><br><span class="line">job.setOutputKeyClass(Text.class);</span><br><span class="line">job.setOutputValueClass(IntWritable.class);</span><br><span class="line">job.setNumReduceTasks(<span class="number">6</span>);</span><br><span class="line">job.setPartitionerClass(myPartionit.class);</span><br><span class="line"><span class="comment">//4. 设置数据源路径 数据输出路径</span></span><br><span class="line">FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(input));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(output));</span><br><span class="line"><span class="comment">//5. 提交mr yarn</span></span><br><span class="line">System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyMapper</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 1.按照分隔符 进行拆分 每个单词 ，每个单词赋值为1</span></span><br><span class="line"><span class="comment">             * (word ,1)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">String[] words = value.toString().split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">                String[] split = word.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">context.write(<span class="keyword">new</span> <span class="title class_">Text</span>(split[<span class="number">2</span>]) ,<span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * reducer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyReducer</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text,IntWritable,Text,IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  (word ,1)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  (word,&lt;1,1,1,1&gt;)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  1.聚合value</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  2.写出去</span></span><br><span class="line"><span class="comment">*  (word ,3)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">                sum +=Integer.parseInt(value.toString());</span><br><span class="line">&#125;</span><br><span class="line">            context.write(key,<span class="keyword">new</span> <span class="title class_">IntWritable</span>(sum));</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="sql-vs-mr-mapreduce"><a href="#sql-vs-mr-mapreduce" class="headerlink" title="sql vs mr(mapreduce)"></a>sql vs mr(mapreduce)</h2><ul>
<li>sql  :<ul>
<li>group by</li>
<li>distinct</li>
<li>join</li>
<li>order by</li>
<li>union<ul>
<li><p>group by 用mr实现</p>
</li>
<li><p>就是再map阶段进行处理reduce阶段进行合并</p>
</li>
<li><p>distinct</p>
</li>
<li></li>
<li><p>去重 ： sql ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>(ename) <span class="keyword">from</span> emp;</span><br><span class="line">#或者可以通过分组进行去重</span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> <span class="keyword">group</span> <span class="keyword">by</span> name;</span><br></pre></td></tr></table></figure></li>
<li><p>通过上述我们可知group by 也可以进行去重 ，所以后面我们能用group by 就要用group by</p>
</li>
<li><p>因为distinct只有一个task进行处理</p>
</li>
<li><p>而group by 则是多个task 进行处理 ， 所以效率会比较高</p>
</li>
<li><p>接下来是在mr里实现</p>
</li>
<li><p>order by</p>
</li>
<li><p>mr :</p>
</li>
<li><p>全局排序 ： reduce task 是 1</p>
</li>
<li><p>分区排序 ： reduce task 是 多个</p>
</li>
<li><p>mr : 实现</p>
</li>
<li></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>如果你的reduce task 大于分区数 ： 会有空白文件</p>
<p>如果 reduce task 小于分区数 且大于1 ： 则会报错</p>
<p>如果 reduce task 且分区数 等于 1 ： 则会把东西整合到一个文件</p>
<h2 id="关于mapreduce在linux上运行的学习，官方提供了源码库"><a href="#关于mapreduce在linux上运行的学习，官方提供了源码库" class="headerlink" title="关于mapreduce在linux上运行的学习，官方提供了源码库"></a>关于mapreduce在linux上运行的学习，官方提供了源码库</h2><p>地址在github上：</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>ts</title>
    <url>/2022/11/24/11-24/</url>
    <content><![CDATA[<h1 id="typeScript"><a href="#typeScript" class="headerlink" title="typeScript"></a>typeScript</h1><h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>ts：typescript ： 简单来说就是js的超集，可以向下兼容js，所以我们使用ts不用对js进行更改，ts会自动转换成js</p>
<p>因为现在的浏览器不支持ts的语法 ： ts的编译环境是node.js</p>
<p>安装运行 ： npm install -g typescript</p>
<p>安装之后用tsv -v 查看</p>
<p>与逆行的时候下载一个json</p>
<p>命令行 : tsc -init</p>
<p>然后运行命令 ： ts-node .&#x2F;文件名</p>
<p>下面是关于ts的简单介绍</p>
<p>首先ts是静态类型，js是动态类型</p>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>静态类型是编译阶段就会发现问题，而动态类型则是直到运行阶段才会问问题的</p>
<p>所以相比较而言，静态类型，比动态类型更加可控</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>ts的类型 ：</p>
<p>包括 : 布尔 ， 数值，字符串， null , symbol , BigInt,undefined</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone :<span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span> = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">number</span> = <span class="title class_">Infinity</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">my</span>: <span class="built_in">string</span> = <span class="string">&#x27;yon&#x27;</span></span><br><span class="line"><span class="keyword">let</span> o : <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">nme</span>: <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alertName</span>(<span class="params"></span>) : <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;my first name&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">any</span>[] = [<span class="string">&quot;hello&quot;</span> , <span class="number">1</span> , <span class="literal">true</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">ids</span>:<span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">names</span>: <span class="title class_">String</span>[] = [<span class="string">&quot;xxx&quot;</span> , <span class="string">&quot;yyy&quot;</span> , <span class="string">&quot;zzzz&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">book</span>: <span class="title class_">Object</span>[] = [&#123;<span class="attr">name1</span>:<span class="string">&#x27;tom&#x27;</span> , <span class="attr">animal</span>:<span class="string">&#x27;cont&#x27;</span>&#125;,&#123;<span class="attr">name1</span>:<span class="string">&#x27;gggg&#x27;</span>,<span class="attr">animal</span>:<span class="string">&#x27;hhhh&#x27;</span>&#125;];</span><br><span class="line">ids.<span class="title function_">push</span>(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>:(<span class="built_in">string</span>|<span class="built_in">number</span>|<span class="built_in">boolean</span>)[]=[<span class="string">&#x27;aslkdjla&#x27;</span>,<span class="number">1</span>,<span class="literal">true</span>]; <span class="comment">// 这个是三个值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person1</span>:[<span class="built_in">string</span>,<span class="built_in">number</span>,<span class="built_in">boolean</span>]=[<span class="string">&#x27;sdfjkl&#x27;</span>,<span class="number">1</span>,<span class="literal">true</span>]; <span class="comment">// 这个是一个值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(isDone)<span class="keyword">let</span> isDone :<span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span> = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">number</span> = <span class="title class_">Infinity</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">my</span>: <span class="built_in">string</span> = <span class="string">&#x27;yon&#x27;</span></span><br><span class="line"><span class="keyword">let</span> o : <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">nme</span>: <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">alertName</span>(<span class="params"></span>) : <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;my first name&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(isDone)</span><br></pre></td></tr></table></figure>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>我们定义接口的方式如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> a&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">isP</span>:<span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和上述数组的作用一样，不过这样定义可以增强复用性，随便让一个东西继承一下他，就可以了</p>
<p>比如：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> a&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">isP</span>:<span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p</span>:a=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;kjds&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">11</span>,</span><br><span class="line">    <span class="attr">isP</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数合上述的接口很像，他是在接口创建了几个方法，如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> s&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="attr">name</span>:<span class="built_in">string</span>):<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">j</span>:s=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;lkasdj&#x27;</span>,</span><br><span class="line">    <span class="attr">eat</span>:<span class="keyword">function</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;eat$&#123;name&#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span>,c?:<span class="built_in">number</span>|<span class="built_in">string</span></span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问号代表从后面的类型里选数据，这里是number和string</p>
<p>上面的是lambad多</p>
<p>把ts转换成js的语法是any</p>
<h2 id="Dom和类型转换"><a href="#Dom和类型转换" class="headerlink" title="Dom和类型转换"></a>Dom和类型转换</h2><p>ts无法像js一样进行访问dom这个就意味着ts无法确定这些dom是不是存在，所以使用非空断言，我们可用明确的告诉他，这个表达式是null&#x2F;undefined</p>
<p>非空断言 X! 代表把x中的null和undefined给去除了</p>
<p>例如 ：下面是关于ts和获取dom的</p>
<p><code>const link = document.querySelector(&#39;a&#39;);</code></p>
<p>当我们要通过class来选择一个dom元素的时候，可以进行一层转化</p>
<p>例如 ： <code>const from = document.getElementById(&#39;form&#39;) as HTMLAnchorElement</code></p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>和java中的类异常类似</p>
<p>比如 ：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Preson</span> &#123; </span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">iscool</span>:<span class="built_in">boolean</span>;</span><br><span class="line">    <span class="attr">age</span>:<span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">n:<span class="built_in">string</span>,c:<span class="built_in">boolean</span>,a:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>=n</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">iscool</span>=c</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span>=a</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayhai</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hi,wosshi$&#123;this.name&#125;,jinnnan$&#123;this.age&#125;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类的修饰符</p>
<p>readonly,privatee,protected,public</p>
<p>简单的介绍就到这里为止，具体以后再慢慢补充</p>
]]></content>
      <categories>
        <category>杂货技术栈</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn</title>
    <url>/2022/11/28/11-28/</url>
    <content><![CDATA[<h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p>主从架构 ： resourcemanager(资源的分配) : nodemanager(资源的供给与隔离)</p>
<h3 id="资源调度"><a href="#资源调度" class="headerlink" title="资源调度"></a>资源调度</h3><p>通过rm把nm的资源分配给我们的 task上</p>
<h3 id="资源隔离"><a href="#资源隔离" class="headerlink" title="资源隔离"></a>资源隔离</h3><p>nm按照要求给task提供资源，保证提供的资源具有独占性</p>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>nm指挥分配的资源</p>
<p>一个task对应一个container ： cpu&#x2F;mem（cpu和内存）</p>
<p>每个container之间是相互隔离的</p>
<h2 id="yarn的架构设计"><a href="#yarn的架构设计" class="headerlink" title="yarn的架构设计"></a>yarn的架构设计</h2><p>作业提交的流程：<br>client &#x3D;&gt; 给rm 的apps 发送请求 去运行 jar （app master）</p>
<p>apps 分配一个container 去运行 app master</p>
<p>app master 会向apps manager 去注册我的作业</p>
<p>app master 向resource scheduler 申请资源去运行 我的代码</p>
<p>nodemanager 会开启资源 container 去运行map task 以及reduce task</p>
<p>tsak 会向 app master 汇报代码与运行情况</p>
<p>当代码运行完成 app master 会给apps 发送请求 ，通知我的作业完成了</p>
<p>apps manager 收到请求之后会通知你的客户端 ，告诉已经运行完成</p>
<p>输入阶段 ： map tsak 的个数 &#x3D;》container 的申请个数 redurce task 同理</p>
<h2 id="面试会问"><a href="#面试会问" class="headerlink" title="面试会问"></a>面试会问</h2><p>yarn的架构设计 &#x3D;&#x3D;mr作业提交流程</p>
<h2 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h2><p>FIFO ：</p>
<ul>
<li>先进先出</li>
<li>单队列</li>
</ul>
<p>Capacity ：容量调度器</p>
<ul>
<li>多队列</li>
<li>先进先出（针对一个队列）</li>
<li>每个队列之间互不影响</li>
<li>每个队列之间是事先定好的</li>
</ul>
<p>Fair：公平调度器</p>
<ul>
<li>多队列</li>
<li>每个队列之间的每个job是有影响的 不是先进先出</li>
<li>哪一个job的优先级高就执行哪一个</li>
<li>如果相同优先级，则是顺序</li>
</ul>
<p>主流的中小企业：Capacity</p>
<p>大公司会用：fair</p>
<h3 id="默认调度器"><a href="#默认调度器" class="headerlink" title="默认调度器"></a>默认调度器</h3><p>3.x：默认是容量调度器</p>
<p>通过调度器进行其作业调度</p>
<p>2.x: 版本是fair（默认）</p>
<h2 id="yarn的web界面的简介"><a href="#yarn的web界面的简介" class="headerlink" title="yarn的web界面的简介"></a>yarn的web界面的简介</h2><p>左侧侧边栏 ： 有几个选项卡 ： 分别是</p>
<h2 id="yarn资源的调优"><a href="#yarn资源的调优" class="headerlink" title="yarn资源的调优"></a>yarn资源的调优</h2><p>container?</p>
<p>一定比例的cpu和mem</p>
<p>刀片服务器的配置 ： 128G 16 core :假设一个机器的配置</p>
<p>刀片服务器 装完系统 消耗内存 1G</p>
<p>系统预留 ： 预留 20%左右 包含装完成系统 消耗的1G</p>
<p>原因 ：给未来部署组件预留空间，防止全部使用 ： 会导致系统夯住 就是卡住 ，oom机制【linux系统】：系统会自己杀死进程当内存不足的时候</p>
<p>预留空间 ： 128 * 0.2 &#x3D; 26G</p>
<p>其余空间用于大数据 102G</p>
<p>hadoop ：</p>
<ul>
<li>datanode  进程内存 ： 默认 1G &#x3D;》 生产上 2G</li>
<li>nodemanager 进程内存 ： ，默认 1G &#x3D;》 生产上 4G</li>
</ul>
<p>接下来还有96G全部给我们的yarn资源 ： 96G</p>
<p>container的资源分配 ：</p>
<p>内存</p>
<p>cpu</p>
<p>相比：cpu更重要一些</p>
<p>container的内存划分 ：默认是86G</p>
<p>其最小是 1G（默认）</p>
<p>最大是 8G（默认） 但是可以设置</p>
<p>注意 container的内存会自动增加 默认以1G递增</p>
<p>container cpu ： 是虚拟核 &#x3D;》 考虑初衷是不同节点的cpu性能不同</p>
<p>比如 ： 一个cpu是另外一个cpu的2倍</p>
<p>第一机器 ： pcore ：vcore &#x3D; 1：2 相当于1个物理核当成两个虚拟核用</p>
<p>给container的核数 ： 默认是8core</p>
<p>总数 ：</p>
<p>最小:1c  (默认)</p>
<p>最大:4c（默认）</p>
<p>实际开发角度 ：</p>
<p>mem：最大不要超过32G ，如果超过32G则会导致压缩指针失效</p>
<p>cpu ： cloudera的公司推荐一个container的core最好不要超过5</p>
<p>配置core  ：在yarn-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>4096<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1024<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">cpu： </span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.pcores-vcores-multiplier<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.cpu-vcores<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-vcores<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-vcores<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="mapreduce"><a href="#mapreduce" class="headerlink" title="mapreduce"></a>mapreduce</h2><p>map task :mem  : 默认是1024m ，一个map task 申请的资源是1024m ， 但是如果实际使用的资源的内存量超过这个值，你的task会强制被杀死 ，reduce task 也一样</p>
<p>map task :vcore ： 默认是1</p>
<p>reduce task :mem : 默认是1024m</p>
<p>reduce task :vcore : 默认是1</p>
<p>mr作业是进程级别 &#x3D;》 jvm</p>
<p>map task</p>
<p>reduce task</p>
<p>jvm参数调优 ：</p>
<p>存储 hdfs</p>
<p>存储文件</p>
<p>压缩</p>
<ul>
<li>为什么使用压缩？</li>
<li>节省空间</li>
<li>节省时间<ul>
<li>网络io核磁盘io会减少</li>
<li>指的是mapreduce数据计算过程中</li>
<li>经过网络传输的数据会变少，</li>
<li>同样到磁盘上的时候，数据量少也会减少磁盘的io</li>
</ul>
</li>
<li>使用场景<ul>
<li>采用压缩 ， 对机器的cpu要求比较高</li>
<li>存储数据的空间不够了，才会用压缩</li>
</ul>
</li>
<li>两面性</li>
<li>采用压缩的确会让空间和时间减少</li>
<li>cpu消耗 cpu利用率高 &#x3D;》会导致处理的时间变长一点</li>
<li>如何使用压缩？</li>
</ul>
<p>常见的压缩格式</p>
<ul>
<li>gzip</li>
<li>bzip2</li>
<li>Lzo</li>
<li>Snappy</li>
<li>LZ4</li>
</ul>
<p>常见的压缩注意点：</p>
<p>压缩比 Bzip2 30%  GZIP    snappy、lzo 50%  ： 这个30%和50%代表能把源文件压缩到源文件的%多少</p>
<p>解压速度 ： snappy、lzo GZIP   Bzip2</p>
<p>压缩文件可不可以一被切分</p>
<p>假设一个 5G文件 不能被切分 split 意味着 只能使用一个map task去处理</p>
<p>map task  5G</p>
<p>假设一个 5G文件 能被切片  splits 10map task 去并行处理</p>
<p>5*1024 &#x2F;10 &#x3D; 一个map task 处理的数据</p>
<p>能否被切分 决定了 你的 一个map task处理的数据量有多少</p>
<p>压缩后的文件是否支持分割？<br>            gzip  不可分割<br>            bzip2  可分割<br>            lzo   带索引的可以分割 (默认是不支持分割的)<br>            snappy 不可分割的</p>
<p>mapreduce 每个阶段该如何采用这些算法？</p>
<p>input &#x3D;》 maps &#x3D;》 reduce &#x3D;》 output</p>
<p>input：<br>    1.Bzip2 ：支持分割 多个map task 进行出</p>
<p>map out：</p>
<ul>
<li>snappy 、lzo</li>
<li>shuffle 过程 要选择一个解压 速度快的压缩格式</li>
</ul>
<p>reduce out ：</p>
<ul>
<li>1.高的压缩比 + 支持分片  &#x3D;》 节省空间</li>
<li>2.bzip2  、lzo带索引的</li>
</ul>
<p>reduce out 数据 作为下一个<br>map 的输入咋办？<br>建议使用bzip2【如果采用压缩的话】</p>
<p>进行压缩配置的两种方式 ：</p>
<p>job &#x3D;》 code 针对少数job生产生效</p>
<p>集群所有的job 在配置文件里配置</p>
<p>对mapreduce 进行配置</p>
<ul>
<li>配置压缩的codec</li>
<li>map reduce 输出配置<ul>
<li>先打开压缩的开关</li>
<li>配置codec即可</li>
</ul>
</li>
<li>hadoop是不是支持哪些压缩 ，通过命令 ：或者配置文件</li>
<li>core-site.xml<ul>
<li>配置支持的压缩有什么</li>
<li>原生的hadoop默认不支持lzo的算法，因为lzo要把整个hadooop重新编译一遍才可以重新实行</li>
</ul>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;io<span class="selector-class">.compression</span>.codecs&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.io</span><span class="selector-class">.compress</span><span class="selector-class">.BZip2Codec</span>,</span><br><span class="line">		org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.io</span><span class="selector-class">.compress</span><span class="selector-class">.SnappyCodec</span>,</span><br><span class="line">		org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.io</span><span class="selector-class">.compress</span><span class="selector-class">.GzipCodec</span>,</span><br><span class="line">		org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.io</span><span class="selector-class">.compress</span><span class="selector-class">.DefaultCodec</span></span><br><span class="line">	&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>mapred-site.xml:</p>
<ul>
<li>1.先打开压缩的开关</li>
<li>2.map reduce 输出 压缩算法</li>
</ul>
<p>reduce： 开关</p>
<p>mapreduce.output.fileoutputformat.compress</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.output.fileoutputformat.compress<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce<span class="selector-class">.output</span><span class="selector-class">.fileoutputformat</span><span class="selector-class">.compress</span>.codec&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.io</span><span class="selector-class">.compress</span>.BZip2Codec&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>map阶段的：</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置在map输出阶段压缩</span></span><br><span class="line">        <span class="keyword">conf</span>.<span class="keyword">set</span>(<span class="string">&quot;mapreduce.map.output.compress&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置解压缩编码器</span></span><br><span class="line">        <span class="keyword">conf</span>.<span class="keyword">set</span>(<span class="string">&quot;mapreduce.map.output.compress.codec&quot;</span>, <span class="string">&quot;org.apache.hadoop.io.compress.DefaultCodec&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>各个datanode数据节点的平衡</p>
<ul>
<li>DN1 存储空间 90%</li>
<li>DN2 存储空间 60%</li>
<li>DN3 存储空间 80%</li>
</ul>
<p>如何做呢？</p>
<p><code>sbin/start-balancer.sh</code></p>
<p>parameters &#x3D; Balancer.BalancerParameters</p>
<p>[BalancingPolicy.Node, threshold &#x3D; 10.0, max idle iteration &#x3D; 5</p>
<p>数据平衡的默认阈值：threshold &#x3D; 10.0</p>
<p>每个节点的磁盘使用率 - 平均的磁盘使用率 &lt;10%</p>
<p>DN1 存储空间 90%  -76% &#x3D; 14% 说明这个节点数据多 往别的节点迁移数据 出<br>DN2 存储空间 60%  -76% &#x3D; -12% 说明这个节点数据少 别的节点迁移数据 进<br>DN3 存储空间 80%  -76% &#x3D; 4% 	说明这个节点数据多 往别的节点迁移数据</p>
<p>avg&#x3D;90 + 80 +60 &#x2F;3 &#x3D; 76%</p>
<p>生产上 从现在开始 start-balancer.sh -threshold 10  每天要定时做的</p>
<p>放到业务低谷期去做 数据平衡操作</p>
<p>注意： 不要在业务高峰期做</p>
<p>数据平衡 数据传输  带宽有关</p>
<p>调优参数 ：平衡的网络带宽 </p>
<p>dfs.datanode.balance.bandwidthPerSec 100m 【2.x 默认是10m】</p>
<p>每个节点数据几十T  需要数据平衡的数据 几十T  可以申请维护窗口时间 然后可以把</p>
<p><code>dfs.datanode.balance.bandwidthPerSec 临时调大 200M</code></p>
<p>单个DN节点 多块磁盘的数据平衡</p>
<p>投产前规划：<br>        DN 机器   10块 2T 【不做raid】  &#x3D;》 20T   副本的</p>
<p>1.dn 配置多个磁盘</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/data01,/data02,/data03<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>挂载磁盘一般最省钱的是 2W 转数 2T的</p>
<p>2.为什么要使用多块物理磁盘？</p>
<ul>
<li>存储</li>
<li>因为多个磁盘的io也是叠加的<br>每块磁盘 磁盘io 每秒 100m<br>三块磁盘 1s 能 300m文件内容<br>一块磁盘 1s 100m</li>
<li>可以让服务一直运行，加入一个磁盘挂了，服务不会减少</li>
</ul>
<p>做多个磁盘数据均衡<br>    <code>dfs.disk.balancer.enabled  true </code>【3.x有这个功能 cdh 2.x 也有】 apache 2.x 没有这个功能</p>
<p>得通过命令去解决磁盘数据均衡？</p>
<p>hdfs diskbalancer</p>
<p>步骤</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">hdfs <span class="keyword">diskbalancer </span>-plan  <span class="keyword">bigdata32 </span> =&gt; 生成一个  <span class="keyword">bigdata32.plan.json </span>文件</span><br><span class="line">hdfs <span class="keyword">diskbalancer </span>-execute <span class="keyword">bigdata32.plan.json </span>=》 执行<span class="keyword">disk </span>数据均衡计划文件</span><br><span class="line">hdfs <span class="keyword">diskbalancer </span>-query <span class="keyword">bigdata32</span></span><br></pre></td></tr></table></figure>

<p>生产上 当你发现 磁盘写入不均衡 可以做一下 【一般 一个月 半个月 做一次即可】</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>hive</title>
    <url>/2022/11/29/11-29/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>简单来说就是用sql处理hadoop的数据的</p>
<p>除了hive之外 ： sparksql ，presto ， impala</p>
<h2 id="要求掌握"><a href="#要求掌握" class="headerlink" title="要求掌握"></a>要求掌握</h2><p>sql</p>
<p>udf</p>
<h2 id="hadoop包含"><a href="#hadoop包含" class="headerlink" title="hadoop包含"></a>hadoop包含</h2><p>hdfs ：命令行</p>
<p>mapreduce ：目前工作中几乎不用，但是关于核心类和思想要掌握</p>
<p>yarn：提交作业 xxx （mr&#x2F;spark&#x2F;flink）on yarn ： 必须会</p>
<p>mapreduce的弊端 ：</p>
<ul>
<li>开发大量代码</li>
<li>编程基础不错</li>
<li>部署麻烦</li>
<li>修改code蛮麻烦</li>
<li>对于DBA和RDBMS的小伙伴是不友好的</li>
</ul>
<p>大数据处理来说最终落地最好是sql</p>
<p>大数据开发角度 ：</p>
<ul>
<li>基础平台开发<ul>
<li>涉及很多框架底层的面很广</li>
</ul>
</li>
<li>应用层面开发<ul>
<li>基于基础平台开发 ，写sql</li>
</ul>
</li>
</ul>
<p>根据你的兴趣点 + 公司的定位</p>
<p>必然有新的东西诞生去解决一个场景的问题</p>
<p>mr主要适用于我们的p计算（离线计算）：不要求时效性 ，但是mr开发太麻烦，就诞生了hive</p>
<p>hive 介绍 ：</p>
<p>hive.apache.org</p>
<p>是由什么人提供出来的？</p>
<p>facebook 开源 去解决结构化的数据统计问题</p>
<p>是什么？</p>
<p>构建在hadoop之上的数据仓库</p>
<p>hdfs：hive 的数据是在hdfs之上的</p>
<p>yarn：可以跑在yarn之上</p>
<p>mmapreduce ： 可以用mr形式去运行</p>
<p>如何使用：</p>
<p>定义了一中类sql的语言，类似sql但是又有不同</p>
<p>适用于离线&#x2F;p处理的</p>
<p>开发就是写sql &#x3D;》 mr  &#x3D;》 运行在yarn上</p>
<p>hive的底层引擎是：</p>
<ul>
<li>mr （默认）：sql&#x3D;》mr</li>
<li>Tez：sql&#x3D;》Tez</li>
<li>Spark：sql&#x3D;》Spark</li>
</ul>
<p>hive on spark &#x3D;》生厂上用的用的不多</p>
<p>spark on hive &#x3D;》 用sparksql查看hive的数据</p>
<p>hive的存储格式，压缩格式等</p>
<p>官网：</p>
<ul>
<li>in distributed storage （分布式存储）：hdfs , cos,oss,aws</li>
<li>A command line tool and JDBC driver are provided to connect users to Hive.</li>
</ul>
<p>版本介绍 ：</p>
<p>x.y.z：x是大版本，y是小版本，z是小版本的修复版本</p>
<p>为什么要学习hive</p>
<ul>
<li>简单易用 ： 可以用sql开发</li>
<li>扩展性好：<ul>
<li>用自定义函数udf</li>
<li>数据存储 和 计算角度 ： 如果表中数据存不下，可以加几个节点就好了<ul>
<li>注意hive不是分布式的，它仅仅是个客户端</li>
</ul>
</li>
<li>Metastore ：hive的元数据管理<ul>
<li>sparksql ,presto ,impala 只要可以访问hive的元数据就可以访问里面表的数据</li>
<li>可以分享元数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>hive的架构 ：</p>
<ul>
<li>元数据 ： 描述数据的数据<ul>
<li>表的名字，字段的名字，字段的类型，什么人创建的，数据存储在哪里等</li>
<li>元数据的内部内置了一个Derby但是有弊端</li>
<li>元数据都是用mysql进行存储的</li>
<li>测试的时候一个mysql就可以了</li>
<li>但是生产上则一个不够</li>
<li>生产上要遵循 HA ：高可用</li>
<li>就是要一台做备份</li>
<li>两个mysql是主从架构</li>
</ul>
</li>
</ul>
<p>hive和RDBMS的区别</p>
<ul>
<li>共同点 sql</li>
<li>延时性 ： hive 适用于离线计算 慢，千万不要拿hive和mysql的性能做对比，无可比性，mysql要必hive高（数据量小）数据量大的时候就反过来了</li>
<li>事务 ： 都支持</li>
<li>update ，delete<ul>
<li>上面两个语句在hive里基本不用，因为性能太差了</li>
</ul>
</li>
<li>都支持分布式</li>
<li>部署成本 ：<ul>
<li>hive ：廉价</li>
<li>mysql ：成本很高</li>
</ul>
</li>
<li>数据体量<ul>
<li>hive ：Tb</li>
<li>mysql：处理Pb都比较费劲</li>
</ul>
</li>
</ul>
<p>对hive进行部署</p>
<p>分布式部署 ： cwiki.apache.org(官网)</p>
<p>首先把用压缩包上传到linux机器上</p>
<p>然后对linux进行解压</p>
<p>解压完成之后，我们要对他的的配置进行修改在解压之后的</p>
<p><code>vim hive-site.xml</code></p>
<p>编辑完成之后我们把以下内容放进去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;jdbc:mysql://bigdata2:3306/hive?createDatabaseIfNotExist=true&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;root&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;liuzihan010616&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>然后在环境变量中编辑我们的hive_home</p>
<p><code>vim ~/.bashrc </code></p>
<p>把下列加进去</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">HIVE_HOME</span></span><br><span class="line">export HIVE_HOME=/home/hadoop/app/hive</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;HIVE_HOME&#125;/bin</span><br></pre></td></tr></table></figure>

<p>然后我们要把我们的mysql链接包放在lib文件夹下</p>
<p>就是 <code>mysql-connector-java-5.1.28.jar</code></p>
<p>要放在hive的lib文件夹下</p>
<p>然后对我们的hive进行初始化</p>
<p><code>schematool -dbType mysql -initSchema</code></p>
<p>初始化成功之后，先启动hdfs ，然后命令行输入 hive 然后输入show databases;</p>
<p>成功就ok了</p>
<p>然后再mysql的数据库里会有hive这个数据库</p>
<p>mysql里\G是格式化的意思</p>
<h2 id="思考-：-表中的字段-存在哪里？"><a href="#思考-：-表中的字段-存在哪里？" class="headerlink" title="思考 ： 表中的字段 存在哪里？"></a>思考 ： 表中的字段 存在哪里？</h2><p>我们先进入hive ： <code>create table test(name String); </code></p>
<p>一个 hive 表 会被拆分成n个表存储再mysql里</p>
<p>比如　： TBl表存放的是我们的表名 <code>select * from tbls \G;</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">**<span class="emphasis">* 1. row *</span>**</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span></span><br><span class="line"><span class="code">            TBL_ID: 1</span></span><br><span class="line"><span class="code">       CREATE_TIME: 1669707861</span></span><br><span class="line"><span class="code">             DB_ID: 1</span></span><br><span class="line"><span class="code">  LAST_ACCESS_TIME: 0</span></span><br><span class="line"><span class="code">             OWNER: hadoop</span></span><br><span class="line"><span class="code">        OWNER_TYPE: USER</span></span><br><span class="line"><span class="code">         RETENTION: 0</span></span><br><span class="line"><span class="code">             SD_ID: 1</span></span><br><span class="line"><span class="code">          TBL_NAME: test</span></span><br><span class="line"><span class="code">          TBL_TYPE: MANAGED_TABLE</span></span><br><span class="line"><span class="code">VIEW_EXPANDED_TEXT: NULL</span></span><br><span class="line"><span class="code">VIEW_ORIGINAL_TEXT: NULL</span></span><br><span class="line"><span class="code">IS_REWRITE_ENABLED:  </span></span><br><span class="line"><span class="code">1 row in set (0.00 sec)</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure>

<p>比如 ： columns_v2表存放的是我们的字段 <code>select * from columns_v2 \G;</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">**<span class="emphasis">* 1. row *</span>**</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span></span><br><span class="line"><span class="code">      CD_ID: 1</span></span><br><span class="line"><span class="code">    COMMENT: NULL</span></span><br><span class="line"><span class="code">COLUMN_NAME: name</span></span><br><span class="line"><span class="code">  TYPE_NAME: string</span></span><br><span class="line"><span class="code">INTEGER_IDX: 0</span></span><br><span class="line"><span class="code">1 row in set (0.00 sec)</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure>

<p>比如 ： DBS是存放的我们的物理存储路径的 <code>select * from DBS \G;</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">**<span class="emphasis">* 1. row *</span>**</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span></span><br><span class="line"><span class="code">          DB_ID: 1</span></span><br><span class="line"><span class="code">           DESC: Default Hive database</span></span><br><span class="line"><span class="code">DB_LOCATION_URI: hdfs://bigdata3:9000/user/hive/warehouse</span></span><br><span class="line"><span class="code">           NAME: default</span></span><br><span class="line"><span class="code">     OWNER_NAME: public</span></span><br><span class="line"><span class="code">     OWNER_TYPE: ROLE</span></span><br><span class="line"><span class="code">      CTLG_NAME: hive</span></span><br><span class="line"><span class="code">1 row in set (0.00 sec)</span></span><br></pre></td></tr></table></figure>

<h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><p>hive有个默认数据库 是default 路径 ：&#x2F;user&#x2F;hive&#x2F;warehouse</p>
<p>非默认数据库 ： &#x2F;user&#x2F;hive&#x2F;warehouse&#x2F;dbname.db</p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>CREATE [REMOTE] (DATABASE|SCHEMA) [IF NOT EXISTS] database_name<br>  [COMMENT database_comment]<br>  [LOCATION hdfs_path]<br>  [MANAGEDLOCATION hdfs_path]<br>  [WITH DBPROPERTIES (property_name&#x3D;property_value, …)];</p>
<p>[] 可有可无<br>(|) 选择其中一个即可</p>
<p>CREATE DATABASE 名称；</p>
<p>CREATE DATABASE 名称 LOCATION ‘创建的地方’；</p>
<p>例子 ：</p>
<p>create database if not exists bigdata_hive;<br>create database  bigdata_hive2  LOCATION ‘&#x2F;data&#x2F;bigdata_hive2’;<br>create database  bigdata_hive3 WITH DBPROPERTIES (‘creator’&#x3D;’doublehappy’, ‘create_dt’&#x3D;”2099-11-29”);<br>create database if not exists bigdata_hive4 COMMENT “这是一个数据库4”;</p>
<p>解决此处中文乱码的问题</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> hive.dbs MODIFY <span class="keyword">COLUMN</span> `<span class="keyword">DESC</span>` <span class="type">varchar</span>(<span class="number">4000</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure>

<h3 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h3><p>show databases;<br>show databases like “bigdata_hive*”<br>desc database  bigdata_hive3;<br>desc database EXTENDED bigdata_hive3;</p>
<h2 id="思考-：-这个数据库在hdfs的哪一个地方"><a href="#思考-：-这个数据库在hdfs的哪一个地方" class="headerlink" title="思考 ： 这个数据库在hdfs的哪一个地方"></a>思考 ： 这个数据库在hdfs的哪一个地方</h2><p>可以通过查看DBS表</p>
<h1 id="hive-的注释-comment-中文乱码的解决方法"><a href="#hive-的注释-comment-中文乱码的解决方法" class="headerlink" title="hive 的注释(comment) 中文乱码的解决方法"></a>hive 的注释(comment) 中文乱码的解决方法</h1><p>（1）修改表字段注解和表注解</p>
<p>alter table COLUMNS_V2 modify column COMMENT varchar(256) character set utf8;<br>alter table TABLE_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;</p>
<p>（2）修改分区字段注解</p>
<p>alter table PARTITION_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8 ;<br>alter table PARTITION_KEYS modify column PKEY_COMMENT varchar(4000) character set utf8;</p>
<p>（3）修改索引注解</p>
<p>alter table INDEX_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;</p>
<p>修改hive-site.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://IP:3306/db_name?createDatabaseIfNotExist=true&amp;useUnicode=true&amp;characterEncoding=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述的 <code>&amp; 是 &amp;amp; </code></p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2022/11/03/11-3/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>关系型数据库</li>
<li>非关系型数据库 ： nosql</li>
<li>存储方式 ， 类似excel</li>
<li>学习 ： 基于官网</li>
<li>版本 ：</li>
<li>5.7 ：主流</li>
<li>5.6 ：也有</li>
<li>8.x ：不是主流 ： java团队</li>
<li>极限是在几tb级别 秒级别 毫秒级别 添加索引还可以更快</li>
</ul>
<h1 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h1><ul>
<li>5.7</li>
<li>安装包种类</li>
<li>rpm ： 不可以完成二次开发，只能用mysql官网的</li>
<li>tar ： 相当于自己魔改的有很多官方没有的功能</li>
<li>rpm ； 要注意el7的 是centos7的</li>
<li>用lazz</li>
<li>上传 ：rz</li>
<li>下载 ：sz</li>
</ul>
<h2 id="mysql的卸载"><a href="#mysql的卸载" class="headerlink" title="mysql的卸载"></a>mysql的卸载</h2><ul>
<li>在windows下 ， mysql 是先在控制面板里卸载，</li>
<li>然后把安装目录卸载掉</li>
<li>在c盘的 ProgramData 里也有文件残留，不过是隐藏文件要自己打开的</li>
<li>然后删除注册表上的</li>
<li>linux</li>
<li>先停掉mysql</li>
<li>然后通过&#96;rpm - qa | grep mysql | xargs -n1 rpm -e –nodeps</li>
<li>然后找到mysql生成的文件</li>
<li>find &#x2F; -name <code>&quot;*mysql*&quot;</code></li>
<li>把该删的文件全部删掉</li>
<li>然后重新安装</li>
</ul>
<h2 id="mysql的安装linux版本"><a href="#mysql的安装linux版本" class="headerlink" title="mysql的安装linux版本"></a>mysql的安装linux版本</h2><ul>
<li>这里安装的是mysql的tar包</li>
<li>首先要解压  :  通过 <code>tar -vxf xxxxxxxxxx</code></li>
<li>一般安装mysql的软件的时候要卸载一个东西 ，就是 <code>mariadb-libs-5.5.56-2.el7.x86_64</code></li>
<li>通过 <code>rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64</code></li>
<li>就卸载了</li>
<li>然后再进行安装</li>
<li>我是创建了一个sh脚本</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">rpm</span> -ivh mysql-community-common-<span class="number">5</span>.<span class="number">7</span>.<span class="number">28</span>-<span class="number">1</span>.el7.x86_64.rpm</span><br><span class="line"><span class="attribute">rpm</span> -ivh mysql-community-libs-<span class="number">5</span>.<span class="number">7</span>.<span class="number">28</span>-<span class="number">1</span>.el7.x86_64.rpm</span><br><span class="line"><span class="attribute">rpm</span> -ivh mysql-community-libs-compat-<span class="number">5</span>.<span class="number">7</span>.<span class="number">28</span>-<span class="number">1</span>.el7.x86_64.rpm</span><br><span class="line"><span class="attribute">rpm</span> -ivh mysql-community-client-<span class="number">5</span>.<span class="number">7</span>.<span class="number">28</span>-<span class="number">1</span>.el7.x86_64.rpm</span><br><span class="line"><span class="attribute">rpm</span> -ivh mysql-community-server-<span class="number">5</span>.<span class="number">7</span>.<span class="number">28</span>-<span class="number">1</span>.el7.x86_64.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后运行脚本</p>
<ul>
<li>安装成功了之后，我们初始化mysql</li>
<li>mysqld initialize user&#x3D;mysql</li>
<li>然后启动mysql</li>
<li>systemctl start mysql</li>
<li>然后查看&#x2F;var&#x2F;log&#x2F;mysql.log</li>
<li>就可以查看到我们的初始密码</li>
<li>然后通过</li>
<li>mysql -uroot -pxxx</li>
<li>就可以进行登录</li>
<li>而如果有敏感字符，则要用转义字符的方式比如 / : 代表一个 &#x2F;</li>
<li>然后再进行设置密码</li>
<li>&#96;set password &#x3D; password(“xxxxxxxx”)</li>
<li>再通过flash privileges 进行更改</li>
</ul>
<h1 id="mysql的操作"><a href="#mysql的操作" class="headerlink" title="mysql的操作"></a>mysql的操作</h1><ul>
<li>show databases;</li>
<li>展示数据库</li>
<li>展示的数据库的软件 ：</li>
<li>navcat</li>
<li>sqlyog</li>
<li>dbvear</li>
<li>但是当他是 <code>root@localhost</code>的时候，我们只能通过本机访问</li>
<li>但是可以改成 ：<code> root@%: xxxx(密码)</code></li>
<li>就可以通过任意机器访问</li>
<li>通过use xxx更改到xxx数据库</li>
<li>通过show tables 查看表</li>
<li>选择字段 ： select xxx form xxx表 比如 ： <code>select host,user from user;</code></li>
<li>修改表中数据 ： update 比如 ： <code>update mysql.user set host=&quot;%&quot; where user=&quot;root&quot;;</code></li>
<li>而后通过 ： <code>flash privileges</code> 进行权限修改</li>
<li>然后再自己的wins上通过远程访问的软件访问他</li>
<li>语法 ：</li>
<li>sql语法 ：</li>
<li>ddl ： 数据定义语言</li>
<li>dml ： 数据操作语言</li>
<li>dcl ： 数据控制语言</li>
<li>都不区分大小写</li>
<li>‘null’ ： 字符串字段</li>
<li>‘’ ： 同上</li>
<li>NULL ： 空</li>
<li>上述三个是不一样的意义</li>
<li>字符集 ： 5.7 默认的字符集是拉丁的</li>
<li>我们可以在创建表的时候更改字符集</li>
<li></li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="type">name</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `<span class="type">name</span>` <span class="type">varchar</span>(<span class="number">3</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=UTF<span class="number">-8</span> // 字符集</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>它支持嵌套</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span> ,age_max ,age_avg </span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="type">name</span>,</span><br><span class="line">max(age) <span class="keyword">as</span> age_max,</span><br><span class="line">min(age) <span class="keyword">as</span> age_min,</span><br><span class="line">count(age) <span class="keyword">as</span> age_count,</span><br><span class="line">avg(age) <span class="keyword">as</span> age_avg</span><br><span class="line"><span class="keyword">from</span> xxx</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="type">name</span>) <span class="keyword">as</span> res </span><br><span class="line"><span class="keyword">where</span> age_avg &gt;<span class="number">18</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><ul>
<li>过滤条件</li>
<li><code>&gt;</code></li>
<li><code>&lt;</code></li>
<li><code>=</code></li>
<li><code>&gt;=</code></li>
<li><code>&lt;=</code></li>
<li><code>&lt;&gt;</code> (也可以是 <code>!=</code>)</li>
<li><code>and</code> <code>or</code> <code>in</code> <code>notin</code></li>
<li>根据本意就好 下面的一行代表复合查询</li>
<li><code>select * from xx where name in (&#39;要查询的东西&#39; ， &#39;要查询的东西&#39; ，..);</code></li>
<li><code>not in</code> 同上</li>
<li><code>between and</code> : 代表在。。。之间的</li>
<li></li>
</ul>
<h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><ul>
<li>like rlike regexp ： 模糊匹配</li>
<li><code> select * from where name like &quot;z%&quot;</code> : 代表查找第一个是z的</li>
<li>占位符 ： _ : 占位一个</li>
<li><code> select * from where name like &quot;_s%&quot;</code> :第二个是s的</li>
</ul>
<h3 id="合并表"><a href="#合并表" class="headerlink" title="合并表"></a>合并表</h3><ul>
<li>合并成一个纵向的表</li>
<li><code>union</code> ： 去重</li>
<li><code>union all</code> ： 不去重</li>
</ul>
<h3 id="查询限制"><a href="#查询限制" class="headerlink" title="查询限制"></a>查询限制</h3><ul>
<li>limit</li>
<li><code>select * from xxx limit 2</code></li>
<li>代表只显示两条</li>
<li>但是底层已经查完了</li>
<li>只是只显示两条</li>
</ul>
<h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><ul>
<li>清除有无用的数据</li>
<li>就是null的</li>
<li>工作中一般不会删除数据 ，就是单纯的过滤数据 ，也不让更改数据</li>
<li>一般用 is null 或者 is not null</li>
<li>要把null输出0，并显示</li>
<li>处理空值的函数</li>
<li>ifnull(xxx,xxx,…)</li>
<li>coalesce(xxx ,xxx ,xxxx…)</li>
<li>他们都是如果里面的值是空那么就会验证下一个数值，如果不为空就输出 ，为空 就继续往下</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line"><span class="built_in">name</span></span><br><span class="line"><span class="built_in">id</span></span><br><span class="line">clalesce(age, <span class="number">0</span>) <span class="keyword">as</span> age_alias</span><br><span class="line">...</span><br><span class="line"><span class="keyword">from</span> xxx</span><br></pre></td></tr></table></figure>

<h2 id="ddl"><a href="#ddl" class="headerlink" title="ddl"></a>ddl</h2><ul>
<li>creat drop alter show（？）</li>
<li></li>
<li>创建数据库</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">creat &#123;<span class="keyword">DATABASE</span> | <span class="keyword">SCHEMA</span>&#125; [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">ExISTS</span>] db_name</span><br><span class="line">[creat_option]</span><br><span class="line">creat_option : &#123;CHARACT&#125;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="type">name</span> (create_definition)</span><br><span class="line">例子 ：</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> try (</span><br><span class="line">id <span class="type">int</span>(<span class="number">3</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line"><span class="type">name</span> <span class="type">varchar</span>(<span class="number">3</span>) <span class="keyword">comment</span> <span class="string">&#x27;名字注释&#x27;</span>,</span><br><span class="line">age <span class="type">int</span>(<span class="number">3</span>),</span><br><span class="line">create_user <span class="type">varchar</span>(<span class="number">5</span>),</span><br><span class="line">create_time <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span>  <span class="built_in">current_timestamp</span>,</span><br><span class="line">update_time <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span> <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">current_timestamp</span>,<span class="comment">--更新显示时间</span></span><br><span class="line"><span class="keyword">primary key</span>(id)<span class="comment">--主键</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>表名字 一定是英文 ， 不要写中文 ，可以汉语拼音</li>
<li>一般公司有建表风格</li>
<li>可以加注释 ： comment</li>
<li>空格不宜过多，最好全部贴着最前面</li>
<li>注意括号不能是中文版的</li>
</ul>
<h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ul>
<li>把多行数据聚合成一行 ：</li>
<li>sum</li>
<li>max</li>
<li>min</li>
<li>avg</li>
<li>count</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">(age)</span></span> as age,</span><br><span class="line"><span class="function"><span class="title">max</span><span class="params">(age)</span></span> as age,</span><br><span class="line"><span class="function"><span class="title">min</span><span class="params">(age)</span></span> as age,</span><br><span class="line"><span class="function"><span class="title">count</span><span class="params">(age)</span></span> as age,</span><br><span class="line"><span class="function"><span class="title">avg</span><span class="params">(age)</span></span> as age </span><br><span class="line">from xxx </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><ul>
<li>group by colum</li>
<li><code>select * from xxx group by age;</code></li>
<li><code>select * from xxx where id &gt; 1 having group by age;</code></li>
<li>如果group by 两个 则他的维度就变了</li>
<li>就会变得更细</li>
<li>而且针对于分组之后的结果进行过滤 ，要用having</li>
<li><code>select * from xxx group by age having id &gt; 1;</code></li>
<li>group by 之后你不可以用where</li>
</ul>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><ul>
<li>多表联查</li>
<li>join</li>
<li>内连接 ： 他们的公共的部分 <code> select * from a （inner） join b on a.id=b.id</code></li>
<li>外连接 ：</li>
<li>左连接 ：以左表为主 ，右表来匹配 匹配的上 就是可以 匹配不上就是null <code> select * from a left join b on a.id=b.id</code></li>
<li>右连接 ：以右表为主 ， 同上 ： <code>select * from a right join b on a.id=b.id</code></li>
<li>全连接 ： 左右表数据都是全的 ： <code>select * from a Full join b on a.id=b.id</code> 无重复的 （mysql里不支持全连接）</li>
</ul>
<h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">show</span> &#123;databases | <span class="keyword">schemas</span>&#125;</span><br><span class="line">[<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span> | <span class="keyword">WHERE</span> expr]</span><br><span class="line">	</span><br><span class="line"><span class="keyword">show</span> [<span class="keyword">FULL</span>] <span class="keyword">tables</span> : 不一定是要切换到这个数据库下才可以</span><br><span class="line">[&#123;<span class="keyword">FROM</span> | <span class="keyword">IN</span>&#125; db_name]</span><br><span class="line">[&#123;<span class="keyword">LIKE</span> <span class="string">&#x27;pattern&#x27;</span> | <span class="keyword">WHERE</span> expr&#125;]</span><br></pre></td></tr></table></figure>

<h3 id="use"><a href="#use" class="headerlink" title="use"></a>use</h3><ul>
<li>use xxx数据库</li>
</ul>
<h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><ul>
<li>drop tablename</li>
</ul>
<h2 id="dml"><a href="#dml" class="headerlink" title="dml"></a>dml</h2><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">select</span> <span class="keyword">update</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">insert</span>[LOW_PRIORITY | DELAYED | HIGH_PRORITY] [<span class="keyword">IGNORE</span>]</span><br><span class="line">[<span class="keyword">INTO</span>]</span><br><span class="line">[(col_name[,col_name]...)]</span><br><span class="line">&#123;<span class="keyword">VALUES</span> | <span class="keyword">VALUE</span>&#125; (value_list) [, (value_list)] ...</span><br><span class="line">[<span class="keyword">ON</span> DUPLICATE <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> assignment_list]</span><br><span class="line">比如 ：<span class="keyword">INSERT</span> <span class="keyword">into</span> user_table (name,age)<span class="keyword">VALUES</span> (<span class="string">&#x27;zs&#x27;</span>,<span class="number">10</span>) , (<span class="string">&#x27;ad&#x27;</span> ,<span class="number">19</span>);</span><br><span class="line">* 表示所有字段</span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> user_table;</span><br><span class="line"><span class="keyword">select</span> name,age <span class="keyword">from</span> user_table;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="desc"><a href="#desc" class="headerlink" title="desc"></a>desc</h3><ul>
<li>描述这个表的字段（列）</li>
</ul>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><ul>
<li>update [low_priority] [ignore] table_reference</li>
<li>set assignment_list</li>
<li>[where where_condition]</li>
<li>[order by ..]</li>
<li>[limit row_count]</li>
<li><code>update user_info set age=30; // 这个是对整个表进行更改</code></li>
<li><code>update user_info set age=30 where id=1; // 这个是对id=1的一列进行更改</code></li>
</ul>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><ul>
<li>删除数据</li>
<li>delete [low_priority] [quick] [ignore] from tablename</li>
<li>[partition(partition_name [, partition_name …])]</li>
<li>[where where_condition]</li>
<li>[order by ..]</li>
<li>[limit row_count]</li>
<li><code>delete from user_info where id=1; // 删除id=1的那个行 </code></li>
<li><code>delete from user_info ; // 删除整个表</code></li>
</ul>
<h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><ul>
<li>我们通过order by xxx 让输出的顺序是按照某一个列进行排序的</li>
<li>默认是升序 asc</li>
<li>可以降序 desc</li>
<li><code> select * from try where name in (&#39;zi&#39;,&#39;hi&#39;) order by age desc;</code></li>
<li><code> select * from try where name in (&#39;zi&#39;,&#39;hi&#39;) order by age asc;</code></li>
<li>还可以进行嵌套使用</li>
<li><code>select * from try where name in (&#39;zi&#39;,&#39;hi&#39;) order by age desc , name desc;</code></li>
<li>代表如果age一样，则按照name的降序来</li>
</ul>
<h2 id="dcl"><a href="#dcl" class="headerlink" title="dcl"></a>dcl</h2><h2 id="常用字符类型"><a href="#常用字符类型" class="headerlink" title="常用字符类型"></a>常用字符类型</h2><ul>
<li>数值类型 ： int整形 long长整型 float单精度小数 double双精度 decimal小数，可以自己指定精度的</li>
<li>字符串 ： char字符（长度0-255 不足会自动补齐 补空格） varchar字符串（长度 0-65535 不会自己补空格）</li>
<li>日期 ：</li>
<li>date 日期 ： YYYY-MM-DD</li>
<li>time 时间 ： HH:mm:ss</li>
<li>datetime : 年月日时分秒  YYYY-MM-DD  HH:mm:ss</li>
<li>timesatmp ：和java里一样</li>
</ul>
<h1 id="mysql的优化"><a href="#mysql的优化" class="headerlink" title="mysql的优化"></a>mysql的优化</h1><ul>
<li>避免使用select * 因为这会造成过多的资源浪费 ，  可以应用 where id &#x3D; xx 筛选出要有需要的行</li>
<li>用union all 代替 union</li>
<li>用小表驱动大表 ： 简单来说 就是 判断条件用小表 ， 搜索用大表 ： 比如  ：in左大右小 ， exists左小右大</li>
<li>做增量操作 ： 比如 ：insert into 是可以一条语句插入多个数据的 但是最好不要超过500条</li>
<li>多用limit ：</li>
<li>in中的值太多用limit限制</li>
<li>增量查询</li>
<li>高效的分页</li>
<li>用连接查询代替子查询</li>
<li>join的加入不宜过多 ， 根据电脑来的 ，但是 一般是不超过3个</li>
<li>控制索引的数量 : 一般小于5个</li>
<li>选择合理的字段</li>
<li>提升gropu by 的效率</li>
<li>大数据一般用 hive 和 hbase</li>
<li>不要求 速度</li>
<li>但是可以presto等工具桥接</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>hive-2</title>
    <url>/2022/11/30/11-30/</url>
    <content><![CDATA[<h1 id="关于hive里的数据类型"><a href="#关于hive里的数据类型" class="headerlink" title="关于hive里的数据类型"></a>关于hive里的数据类型</h1><ul>
<li>整数<ul>
<li>int</li>
<li>bigint &#x3D;&#x3D;long</li>
</ul>
</li>
<li>小数 ：<ul>
<li>float</li>
<li>double</li>
<li>Decimal</li>
</ul>
</li>
<li>字符串：<ul>
<li>String (建议统一用String)</li>
<li>varchar</li>
<li>char</li>
</ul>
</li>
<li>时间：<ul>
<li>时间日期 DATE 格式：YYYY-MM-DD</li>
<li>时间戳：TIMESTAMP YYYY-MM-DD HH:MM:SS</li>
</ul>
</li>
</ul>
<h1 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h1><p>CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS] [db_name.]table_name<br>  [(col_name data_type [column_constraint_specification] [COMMENT col_comment], … [constraint_specification])]<br>  [COMMENT table_comment]<br>  [PARTITIONED BY (col_name data_type [COMMENT col_comment], …)]<br>  [CLUSTERED BY (col_name, col_name, …) [SORTED BY (col_name [ASC|DESC], …)] INTO num_buckets BUCKETS]<br>  [<br>   [ROW FORMAT row_format]<br>   [STORED AS file_format]<br>     | STORED BY ‘storage.handler.class.name’ [WITH SERDEPROPERTIES (…)]  – (Note: Available in Hive 0.6.0 and later)<br>  ]</p>
<p>数据字段名字 字段类型</p>
<p>例如</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> mytest(</span><br><span class="line">	id String <span class="keyword">comment</span> <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">	<span class="type">name</span> string,</span><br><span class="line">	age <span class="type">bigint</span></span><br><span class="line">) <span class="keyword">comment</span> <span class="string">&#x27;第一个表&#x27;</span></span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> //指定分隔符</span><br><span class="line">STORED <span class="keyword">as</span> TEXTFILE; // 存储形式</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp2 <span class="keyword">like</span> emp;</span><br><span class="line">复制表结构</span><br><span class="line"></span><br><span class="line">或者</span><br></pre></td></tr></table></figure>

<h2 id="为什么要分隔符"><a href="#为什么要分隔符" class="headerlink" title="为什么要分隔符"></a>为什么要分隔符</h2><p>因为我们的元数据都在hdfs上，对于hdfs上的数据可以通过分隔符进行自动导入到hive里，比如上述是，分割的，然后我hdfs上有如下数据</p>
<p>1，zihan,11</p>
<p>2,zhangsan,23</p>
<p>3,liu,33</p>
<p>就会自动按照每一行进行insert</p>
<p>导入数据 ： load data local inpath ‘本地的绝对路径’ into table 表名</p>
<p>清空表的操作 ： truncate table 表名</p>
<h1 id="删除库"><a href="#删除库" class="headerlink" title="删除库"></a>删除库</h1><p>DROP (DATABASE|SCHEMA) [IF EXISTS] database_name [RESTRICT|CASCADE];</p>
<p>DROP DATABASE bigdata_hive4;</p>
<p>DROP DATABASE bigdata_hive2 CASCADE; &#x3D;&gt;删库跑路的操作</p>
<p>CASCADE : 代表联合删除 ，一般删除的时候如果里面有表，会造成无法删除的问题，但是联合删除会直接删除掉</p>
<h1 id="DMl"><a href="#DMl" class="headerlink" title="DMl"></a>DMl</h1><h2 id="load-："><a href="#load-：" class="headerlink" title="load ："></a>load ：</h2><ul>
<li>加载本地数据</li>
<li>加载hdfs上的数据</li>
</ul>
<p>LOAD原本是追加，不是覆盖 ， 但是可以通过 加上 overwrite 关键字 进行 覆盖操作</p>
<h2 id="覆盖例子"><a href="#覆盖例子" class="headerlink" title="覆盖例子"></a>覆盖例子</h2><p>load data local inpath ‘&#x2F;home&#x2F;hadoop&#x2F;tmp&#x2F;emp.txt’ OVERWRITE INTO TABLE emp;</p>
<h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>本地：load data inpath ‘本地路径’ into table 表名</p>
<p>hdfs ： load data inpath ‘hdfs上的路径’ into table 表名</p>
<p>上述的hdfs上的相当于把其路径里的文件移动到table 表名的下面 并且改名，且关联到metastore</p>
<p>但是我们的hdfs mv 是不会关联到metastore的</p>
<p>在hive 里 update 和 delete 不要做 &#x3D;》 因为效率低下</p>
<p>把所有的update和delete都转化成insert和overwrite</p>
<h2 id="插入语句-："><a href="#插入语句-：" class="headerlink" title="插入语句 ："></a>插入语句 ：</h2><p>Inserting data into Hive Tables from queries</p>
<p>insert into|OVERWRITE table tablename selectQury</p>
<p>2.Inserting values into tables from SQL 【不推荐使用】<br>INSERT INTO TABLE tablename<br>VALUES values_row [, values_row …]<br>1.每导入一条数据 就会触发一次 mapreduce job  效率太低</p>
<p>emp2：<br>    insert into table emp2<br>    select *  from emp;<br>insert overwrite table emp2<br>select *  from emp where deptno&#x3D;10;</p>
<h2 id="关于hive里的一些函数以及使用"><a href="#关于hive里的一些函数以及使用" class="headerlink" title="关于hive里的一些函数以及使用"></a>关于hive里的一些函数以及使用</h2><h3 id="1-where-过滤条件"><a href="#1-where-过滤条件" class="headerlink" title="1.where 过滤条件"></a>1.where 过滤条件</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">where_condition</span><br><span class="line">	 &lt;</span><br><span class="line">	 &gt;</span><br><span class="line">	 =</span><br><span class="line">	 &lt;&gt;  !=</span><br><span class="line">	 <span class="keyword">and</span></span><br><span class="line"><span class="keyword"></span>	 <span class="keyword">or</span></span><br><span class="line"><span class="keyword"></span>	 in</span><br><span class="line">	 not in</span><br><span class="line">	 <span class="keyword">between </span> <span class="keyword">and</span></span><br><span class="line"><span class="keyword"></span>	 is</span><br><span class="line">	 is not</span><br></pre></td></tr></table></figure>

<h3 id="需求：查询表中-deptno-20-10"><a href="#需求：查询表中-deptno-20-10" class="headerlink" title="需求：查询表中 deptno 20 10"></a>需求：查询表中 deptno 20 10</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno=<span class="number">20</span> <span class="keyword">or</span> deptno =<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="function"><span class="keyword">from</span> emp</span></span><br><span class="line"><span class="function"><span class="keyword">where</span> deptno <span class="title">in</span> (<span class="params"><span class="number">10</span>,<span class="number">20</span></span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno &lt;&gt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">where</span> deptno != <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-order-by-排序语法"><a href="#2-order-by-排序语法" class="headerlink" title="2.order by  排序语法"></a>2.order by  排序语法</h3><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>默认<span class="keyword">asc</span> 升序</span><br><span class="line"><span class="number">2.</span>降序 <span class="keyword">desc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">sal</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-like-语法-模糊匹配"><a href="#3-like-语法-模糊匹配" class="headerlink" title="3.like 语法 模糊匹配"></a>3.like 语法 模糊匹配</h3><figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>._  占位符</span><br><span class="line"><span class="number">2</span>.<span class="comment">%  模糊</span></span><br><span class="line">rlike regexp</span><br></pre></td></tr></table></figure>

<h3 id="4-合并表"><a href="#4-合并表" class="headerlink" title="4.合并表"></a>4.合并表</h3><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="built_in">union</span>  去重</span><br><span class="line"></span><br><span class="line"><span class="built_in">union</span> <span class="built_in">all</span>  不去重</span><br></pre></td></tr></table></figure>

<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> a(id <span class="type">int</span> ,<span class="type">name</span> string) <span class="keyword">row</span> <span class="keyword">format</span>  delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> ;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> b(id <span class="type">int</span> ,<span class="type">name</span> string) <span class="keyword">row</span> <span class="keyword">format</span>  delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> data <span class="keyword">local</span> inpath &quot;/home/hadoop/tmp/a.txt&quot; <span class="keyword">into</span> <span class="keyword">table</span> a;</span><br><span class="line"><span class="keyword">load</span> data <span class="keyword">local</span> inpath &quot;/home/hadoop/tmp/b.txt&quot; <span class="keyword">into</span> <span class="keyword">table</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span> <span class="keyword">from</span> a</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span> <span class="keyword">from</span> b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span> <span class="keyword">from</span> a</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span> <span class="keyword">from</span> b</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> &quot;lisi&quot; <span class="keyword">as</span> <span class="type">name</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span>,&quot;1&quot; <span class="keyword">as</span> pk <span class="keyword">from</span> a</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span>,&quot;2&quot; <span class="keyword">as</span> pk <span class="keyword">from</span> b</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> &quot;lisi&quot; <span class="keyword">as</span> <span class="type">name</span>,&quot;3&quot; <span class="keyword">as</span> id ;</span><br></pre></td></tr></table></figure>

<p>思考： hive建表 默认column 分割符是什么？</p>
<h3 id="5-null-处理"><a href="#5-null-处理" class="headerlink" title="5.null 处理"></a>5.null 处理</h3><pre><code>1. 过滤
    where xxx is not null
is null 作用一样 &lt;=&gt;
2. etl 转换
    ifnull  =&gt; hive里没有
    coalesce =》
    nvl  =》
</code></pre>
<h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><pre><code>查看hive支持的function ：
            y=f(x)
    SHOW FUNCTIONS [LIKE &quot;`&lt;pattern&gt;`&quot;];
    show functions like nvl;  =&gt; 判断 function hive 是否存在
    desc function nvl; =》  查看某个函数具体使用
</code></pre>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">job,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">hiredate,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line">nvl(comm,<span class="number">0</span>) as comm_alias,</span><br><span class="line">deptno</span><br><span class="line">from emp <span class="comment">;</span></span><br></pre></td></tr></table></figure>

<h2 id="分组-聚合函数-join"><a href="#分组-聚合函数-join" class="headerlink" title="分组 聚合函数 join"></a>分组 聚合函数 join</h2><p>聚合函数 ：</p>
<ul>
<li>sum</li>
<li>max</li>
<li>min</li>
<li>avg</li>
<li>count</li>
</ul>
<h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><ul>
<li>和聚合函数一起使用</li>
<li>一个或者多个colum进行分组</li>
<li>字段必须select出现 和 group by 出现要一致</li>
</ul>
<h3 id="having-："><a href="#having-：" class="headerlink" title="having ："></a>having ：</h3><ul>
<li>在group by 后面使用</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">select job,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sum</span><span class="params">(sal)</span></span> as sal_num,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">max</span><span class="params">(sal)</span></span>,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">min</span><span class="params">(sal)</span></span>,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">avg</span><span class="params">(sal)</span></span>,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">count</span><span class="params">(<span class="number">1</span>)</span></span> as cnt</span><br><span class="line"></span><br><span class="line">from emp</span><br><span class="line"></span><br><span class="line">group by job</span><br><span class="line"></span><br><span class="line">having sal_num &gt; <span class="number">6000</span></span><br></pre></td></tr></table></figure>

<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>找准关联字段</p>
<ul>
<li>inner join [join]</li>
<li>left join</li>
<li>right join</li>
<li>full join</li>
</ul>
<h3 id="需求：既要显示聚合前的数据，又要显示聚合后的数据？"><a href="#需求：既要显示聚合前的数据，又要显示聚合后的数据？" class="headerlink" title="需求：既要显示聚合前的数据，又要显示聚合后的数据？"></a>需求：既要显示聚合前的数据，又要显示聚合后的数据？</h3><p>函数  over([partition by xxx,…] [order by xxx,….])</p>
<p>over: 以谁进行开窗 table、<br>parition by : 以谁进行分组   table columns<br>order by : 以谁进行排序  table columns</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">数据： </span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-10</span>,1</span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-11</span>,5</span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-12</span>,7</span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-13</span>,3</span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-14</span>,2</span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-15</span>,4</span><br><span class="line">haige,2022<span class="string">-11</span><span class="string">-16</span>,4</span><br></pre></td></tr></table></figure>

<p>需求：<br>    统计累计问题 ，每个用户每天累计点外卖次数</p>
<p>[partition by xxx,…] [order by xxx,….]</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="type">name</span> ,</span><br><span class="line">dt ,</span><br><span class="line">cnt ,</span><br><span class="line">sum(cnt) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="type">name</span>  <span class="keyword">order</span> <span class="keyword">by</span> dt ) <span class="keyword">as</span> sum_cnt</span><br><span class="line"><span class="keyword">from</span> user_mt;</span><br></pre></td></tr></table></figure>

<h3 id="命令行更改"><a href="#命令行更改" class="headerlink" title="命令行更改"></a>命令行更改</h3><p>command line<br>    1.hive shell<br>    2.jdbc &#x3D;&gt; hiveServer2</p>
<pre><code>hive clinet:
    1. hive shell
    2. beeline shell jdbc   开启 hiveServer2 服务 thift
</code></pre>
<p>在beeline中 <code>!connect jdbc:hive2://localhost:10000 hadoop</code></p>
<p>补充：<br>beeline &#x3D;&gt; 连接 hive  &#x3D;》 hdfs<br>对hdfs 做一个设置 代理设置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">core-site.xml:</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.hadoop.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>jdbc</title>
    <url>/2022/11/07/11-7/</url>
    <content><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul>
<li>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。</li>
<li>注意是工具</li>
</ul>
<h2 id="Maven的配置以及idea使用"><a href="#Maven的配置以及idea使用" class="headerlink" title="Maven的配置以及idea使用"></a>Maven的配置以及idea使用</h2><h3 id="下载及解压"><a href="#下载及解压" class="headerlink" title="下载及解压"></a>下载及解压</h3><ul>
<li>首先在Maven的官网下载Maven</li>
<li><a href="http://maven.apache.org/download.cgi" title="Maven官网">Maven官网</a></li>
<li>我们windows一般下载 ： Binary zip archive的</li>
<li>我这里下载的是 apache-maven-3.8.6-bin.zip</li>
<li>下载完之后 ， 解压到一个文件目录下</li>
<li>我是新建了个文件目录 命名为 maven</li>
<li>如何解压到文件目录下</li>
</ul>
<h3 id="配置相关文件"><a href="#配置相关文件" class="headerlink" title="配置相关文件"></a>配置相关文件</h3><ul>
<li>解压成功之后 ，我们会获得几个文件夹</li>
<li>bin</li>
<li>boot</li>
<li>conf</li>
<li>lib</li>
<li>这个里conf是maven的配置文件</li>
<li>我们在这个目录下新建maven_repossitory文件夹</li>
<li>这个文件夹可以作为，我们的本地仓库</li>
<li>接下来，我们要修改 conf 文件夹下</li>
<li>settings.xml文件</li>
<li>我们先找到</li>
<li><code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code></li>
<li>这条语句的位置</li>
<li>把它更改成</li>
<li><code>&lt;localRepository&gt;你的maven_repossitory路径&lt;/localRepository&gt;</code></li>
<li>这样我们就自己创建了个</li>
<li>因为一般maven的默认仓库是</li>
<li><code>C:\Users\Administrator\.m2\repository</code></li>
<li>接下来 ， 我们进行设置国内镜像源</li>
<li>找到 mirrors 标签</li>
<li>在mirrors里</li>
<li>加上：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这个是阿里云的镜像 ， 如果不好使 可以以换成腾讯云 和网易的</li>
<li>添加方法和上面一样</li>
<li>接下来我们可以为maven配置全局的jdk，这样我们在创建maven项目时就会自动使用该jdk版本，我配置的是jdk1.8</li>
<li>找到标签 <code>&lt;profiles&gt;&lt;/profiles&gt;</code></li>
<li>然后在标签里加入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- java版本 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="更改idea的maven"><a href="#更改idea的maven" class="headerlink" title="更改idea的maven"></a>更改idea的maven</h3><ul>
<li>file 文件里的 setting</li>
<li>在上面搜索 maven</li>
<li>点进去之后</li>
<li>把Maven home directory</li>
<li>配置成自己的解压的文件夹</li>
<li>然后设置user setting file</li>
<li>把他设置成解压的文件的setting.xml</li>
<li>然后把 local repository</li>
<li>设置成之前自己配置的本地仓库</li>
<li>关于idea的配置就完成了</li>
</ul>
<h2 id="简单的链接mysql"><a href="#简单的链接mysql" class="headerlink" title="简单的链接mysql"></a>简单的链接mysql</h2><ul>
<li>首先创建maven项目</li>
<li>然后在pom.xml中加上</li>
<li></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>&lt;dependencies&gt;</code>标签中加上</li>
<li>然后import change</li>
<li>然后在主程序的java项目包里</li>
<li>写上：</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.<span class="keyword">Connection</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> App </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">public</span> static <span class="type">void</span> main( String[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        String url = &quot;jdbc:mysql://192.168.41.131:3306/try&quot;;</span><br><span class="line">        String <span class="keyword">user</span> = &quot;root&quot;;</span><br><span class="line">        String passwd = &quot;liuzihan010616&quot;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Connection</span> conect = dbutils.getConnection(url , <span class="keyword">user</span> , passwd);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println(conect);</span><br><span class="line">        dbutils.closeConnection(conect);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">System</span>.<span class="keyword">out</span>.println( &quot;Hello World!&quot; );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>-然后创建一个dbutils</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sxwang</span></span><br><span class="line"><span class="comment"> * 11 07 15:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dbutils</span> &#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取mysql 连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> passwd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String url, String user, String passwd)</span>&#123;</span><br><span class="line">	</span><br><span class="line">        Connection connection=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection = DriverManager.getConnection(url, user, passwd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭连接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">(Connection conn)</span>&#123;</span><br><span class="line">	</span><br><span class="line">        <span class="keyword">if</span>(conn !=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Mysql对表的操作"><a href="#Mysql对表的操作" class="headerlink" title="Mysql对表的操作"></a>Mysql对表的操作</h2><ul>
<li>alter table 旧表名 rename to 新表名 ： 更改表名字</li>
<li>alter table 表名 modify 列名 数据类型 ： 修改数据类型</li>
<li>alter table 表名 change 旧表名 新列名 数据类型 ： 修改列名</li>
<li>alter table 表名 drop 列名 ： 删除列</li>
<li>alter table 表名 add 新列名 数据类型</li>
<li>alter table 表名 modify 列名1 数据类型 after 列名2；</li>
<li>alter table 表明 modify 列名1 数据类型 first</li>
<li>清空表</li>
<li>建议</li>
<li>truncate table xxx</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> xxx</span><br><span class="line"><span class="keyword">select</span> xxx <span class="keyword">from</span> xxx</span><br></pre></td></tr></table></figure>

<ul>
<li>create</li>
</ul>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="title">create</span></span> <span class="keyword">table</span> ...like <span class="comment">xxxx</span></span><br><span class="line">create <span class="keyword">table</span> xxx <span class="comment">like mmm</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>基于xxx表创建新表</li>
<li>但是，是空表</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ..[<span class="keyword">as</span>]<span class="keyword">select</span> xxxx <span class="keyword">from</span> kkk</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_dev01 <span class="keyword">as</span> <span class="keyword">select</span> ename,job</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>基于其select的表给生成一个表</li>
<li>叫ctas</li>
<li>可以用别名该表头</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>hive-3</title>
    <url>/2022/12/01/12-01/</url>
    <content><![CDATA[<h1 id="内部和外部表和普通表和分区表"><a href="#内部和外部表和普通表和分区表" class="headerlink" title="内部和外部表和普通表和分区表"></a>内部和外部表和普通表和分区表</h1><p>分区表 ： 提升查询效率的表</p>
<p>关于hive的查询 ： 对于普通表 则是要先读取所有的数据然后进行筛选的 ， 但是对于分区表，则是把数据进行分区，如果要查询的话，则是针对符合的数据进行查询</p>
<p>往往用分区表进行查询，普通表数据量较少的时候可以用</p>
<p>创建分区表 ：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">order</span>(</span><br><span class="line"></span><br><span class="line">orderid <span class="type">int</span>,</span><br><span class="line"></span><br><span class="line">oredergg String</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">PARTITIONED <span class="keyword">BY</span> (dt String)</span><br><span class="line"></span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span></span><br></pre></td></tr></table></figure>

<p>show partitions 表名 &#x2F;&#x2F;查看现在这个表的分区</p>
<p>修改分区  ：</p>
<p>删除分区  ：<code>alter table 表名 drop partition(分区列 = &#39;分区名&#39;)</code></p>
<p>创建分区 ： 在建表的时候创建</p>
<p>导入数据 ： load&#x2F;insert</p>
<ul>
<li>load : load data (local) inpath ‘’ (overwrite) into table 表名 partition (分区名称) ：数据列数如果对不上就会出现问题 : 加上overwrite则是把一个分区的数据给覆盖掉</li>
<li>insert : insert into table partition(分区) …</li>
<li>insert into 是追加的</li>
<li>如果不要追加则要进行覆盖 insert 后面的 into 变成 overwrite</li>
</ul>
<h2 id="使用一个sql让所有数据落到对应的分区里"><a href="#使用一个sql让所有数据落到对应的分区里" class="headerlink" title="使用一个sql让所有数据落到对应的分区里"></a>使用一个sql让所有数据落到对应的分区里</h2><p>动态分区：相当于我们要进行分区的字段是我们的数据的字段，就可以直接用那个字段当我们的分区但是要打开一个开关</p>
<p><code>set hive.exec.dynamic.partition.mode=nonstrict;</code></p>
<p>静态分区：就是自己制定好分区的标题的</p>
<p>离线任务 ： 业务周期性 T+1</p>
<p>就是延迟一天处理</p>
<p>默认底层创建的是内部表</p>
<p>内部表 ： 受hive管控的 ： 如果有删表的操作，那么会清理干净，所有数据都会被删除</p>
<p>外部表 ： 如果被删除的情况下，只是hdfs上指向metastore的索引被删除了，源数据不会被删除 ，而且我们还可通过建表的方式让他们的索引再次关联上</p>
<p>创建外部表 ：</p>
<p>相互转换 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">外部转内部</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 外部表名字 <span class="keyword">SET</span> TBLPROPERTIES (&quot;EXTERNAL&quot; <span class="operator">=</span> &quot;true&quot;);</span><br><span class="line"></span><br><span class="line">内部转外部</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 外部表名字 <span class="keyword">SET</span> TBLPROPERTIES (&quot;EXTERNAL&quot; <span class="operator">=</span> &quot;false&quot;);</span><br><span class="line">但是这上述的<span class="keyword">EXTERNAL</span> 是不能小写的会造成失效的问题</span><br></pre></td></tr></table></figure>

<h1 id="复杂的数据类型"><a href="#复杂的数据类型" class="headerlink" title="复杂的数据类型"></a>复杂的数据类型</h1><p>中小企业用的不多，，大企业用的多</p>
<p>会建表 ，会查询</p>
<p>maps: <code>MAP&lt;primitive_type, data_type&gt; </code></p>
<p>数据如下 ：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>,zhangsan,father:xiaoming#mother:xiaohuang#brother:xiaoxu,<span class="number">28</span></span><br><span class="line"><span class="number">2</span>,lisi,father:mayun#mother:huangyi#brother:guanyu,<span class="number">22</span></span><br><span class="line"><span class="number">3</span>,wangwu,father:wangjianlin#mother:ruhua#sister:jingtian,<span class="number">29</span></span><br><span class="line"><span class="number">4</span>,mayun,father:mayongzhen#mother:angelababy,<span class="number">26</span></span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> hive_map(</span><br><span class="line">id <span class="type">int</span>  <span class="keyword">comment</span> <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line"><span class="type">name</span> string <span class="keyword">comment</span> <span class="string">&#x27;用户名字&#x27;</span>,</span><br><span class="line">relation map&lt;string,string&gt; <span class="keyword">comment</span> <span class="string">&#x27;家庭成员&#x27;</span>,</span><br><span class="line">age <span class="type">int</span> <span class="keyword">comment</span> <span class="string">&#x27;年龄&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span>  delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">collection items terminated <span class="keyword">by</span> <span class="string">&#x27;#&#x27;</span></span><br><span class="line">map keys terminated <span class="keyword">by</span> <span class="string">&#x27;:&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>arrays:  <code>ARRAY&lt;data_type&gt;</code></p>
<p>数据</p>
<p><code>zihan   beijing,shanghai,chengdu,dalian</code></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> hive_array(</span><br><span class="line"><span class="type">name</span> String,</span><br><span class="line">locations <span class="keyword">array</span>&lt;String&gt;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span></span><br><span class="line">collection items terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>structs:<code>STRUCT&lt;col_name : data_type [COMMENT col_comment], ...&gt;</code></p>
<p>数据</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168.1.1</span>#zhangsan:<span class="number">40</span></span><br><span class="line"><span class="number">192.168.1.2</span>#lisi:<span class="number">50</span></span><br><span class="line"><span class="number">192.168.1.3</span>#wangwu:<span class="number">60</span></span><br><span class="line"><span class="number">192.168.1.4</span>#zhaoliu:<span class="number">70</span></span><br></pre></td></tr></table></figure>

<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> hive_struct(</span><br><span class="line">ip string,</span><br><span class="line">userinfo STRUCT&lt;<span class="type">name</span>:string,age:<span class="type">int</span>&gt;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span>  delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;#&#x27;</span></span><br><span class="line">collection items terminated <span class="keyword">by</span> <span class="string">&#x27;:&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h1 id="数据形式的不同使用方法"><a href="#数据形式的不同使用方法" class="headerlink" title="数据形式的不同使用方法"></a>数据形式的不同使用方法</h1><h2 id="array"><a href="#array" class="headerlink" title="array"></a>array</h2><p>案例分析：</p>
<p>1.查询每个用户第一个工作地点？</p>
<p>select  name ,locations[0] as first_loc_work from  hive_array;</p>
<p>2.查询每个人 工作地点的数量</p>
<p>select  name , size(locations) from  hive_array ;</p>
<p>3.查询在shanghai 工作的有哪些人</p>
<p>select  * from hive_array  where array_contains(locations,’shanghai’);</p>
<h3 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h3><p>思路是先把一个array的元素炸开，然后通过显示出来</p>
<p>显示手段 ： LATERAL VIEW（侧写视图）</p>
<ul>
<li><p>LATERAL VIEW udtf(expression) tableAlias AS columnAlias</p>
</li>
<li><p>udtf : 一进多出</p>
</li>
<li><p>FROM baseTable (lateralView)*</p>
</li>
<li><p>最终代码 ：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,location</span><br><span class="line"><span class="keyword">from</span> hive_array <span class="keyword">lateral</span> <span class="keyword">view</span> explode(locations) loc_table <span class="keyword">as</span> location;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>需求： 1.查询表中每个人的father的名字</p>
<p><code>select id,name,age,relation[&#39;father&#39;] as father from hive_map;</code></p>
<p>2.查询表中 每个人的家庭成员   keys</p>
<p><code>select id,name,age,map_keys(relation) as members from hive_map;</code></p>
<p>3.查询表中 每个人的家庭成员的名字 values</p>
<p><code>select id,name,age,map_values(relation) as members from hive_map;</code></p>
<p>4.查询表中 有brother的人以及brother的名字</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"> id,<span class="type">name</span>,age,relation[<span class="string">&#x27;brother&#x27;</span>] <span class="keyword">as</span> brother</span><br><span class="line"><span class="keyword">from</span> hive_map</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">relation[<span class="string">&#x27;brother&#x27;</span>] <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;或者可以<span class="keyword">select</span></span><br><span class="line"> id,<span class="type">name</span>,age,relation[<span class="string">&#x27;brother&#x27;</span>] <span class="keyword">as</span> brother</span><br><span class="line"><span class="keyword">from</span> hive_map</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">array_contains(map_keys(relation), <span class="string">&#x27;brother&#x27;</span>);// map_key()函数的意思是可以把这个列的map的key当作<span class="keyword">array</span>取出来</span><br></pre></td></tr></table></figure>

<h2 id="structs"><a href="#structs" class="headerlink" title="structs"></a>structs</h2><p>select ip,userinfo.name as name ,userinfo.age as age from hive_struct;</p>
<h2 id="开窗函数-："><a href="#开窗函数-：" class="headerlink" title="开窗函数 ："></a>开窗函数 ：</h2><ul>
<li>分析函数：对开窗函数的分析的函数<ul>
<li>rank : 使用方法 rank()over(partition by xx order by yy) as rk  : 如果有重复的数据，会丢失排名</li>
<li>dense_rank :使用方法同上 ： 如果有重复数据 ，则不会丢失排名 ：</li>
<li>row_number:同上 ： 排名相同且不会重复 ， 就是会顺序往下 ：</li>
</ul>
</li>
</ul>
<p>上述的常用手段 ： 求topn的排名</p>
<p>比如要求top3 的</p>
<p>作业 ：</p>
<p>统计每个店铺的uv</p>
<p>统计top3的用户记录</p>
<p>pv ： 页面的浏览量</p>
<p>uv ： 访客的次数</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2022/11/08/11-8/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li>
<li>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li>
<li>记录文件变化的 ，之后可以指定版本恢复</li>
</ul>
<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul>
<li>本地 ： 常用 ：简单 ， 缺点 ： 容易出错 ， 集成效率低下</li>
<li>集中 ： svn ： 缺点 ： 中央服务器出现故障就全完了</li>
<li>分布（目前的主流）： 解决单点故障的问题 ： git</li>
<li>git 可以分支 ，，且支持文件备份 ， 多个工作流</li>
<li></li>
</ul>
<h1 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h1><ul>
<li>从远程仓库中克隆 Git 资源作为本地仓库</li>
<li>从本地仓库中checkout代码然后进行代码修改</li>
<li>在提交本地仓库前先将代码提交到暂存区</li>
<li>提交修改，提交到本地仓库；本地仓库中保存修改的各个历史版本</li>
<li>在需要和团队成员共享代码时，可以将修改代码push到远程仓库</li>
<li>git 的核心概念 ： 工作区、暂存区、版本库、远程仓库</li>
<li>Workspace： 工作区，就是你平时存放项目代码的地方</li>
<li>Index &#x2F; Stage： 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>
<li>Repository： 仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>
<li>Remote： 远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>
</ul>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><ul>
<li>每次的提交Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里这个分支叫主分支，即master分支。HEAD指针严格来说不是指向提交，而是指向master，master才是指向提交的。</li>
</ul>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><ul>
<li>远程仓库分为公有远程仓库和私有远程仓库。</li>
</ul>
<h1 id="公有远程仓库"><a href="#公有远程仓库" class="headerlink" title="公有远程仓库"></a>公有远程仓库</h1><ul>
<li>本质和本地仓库无异，只是这个仓库①不在本地②大家可能都知道③需要将代码共享到远程仓库④可以被其他人克隆同步代码等。</li>
<li>一般情况下在企业中会有一个搭建在公司的远程仓库，可以让本公司内部的开发人员同步开发。而业界最富盛名的远程仓库则为github；它上面存放了非常多的开源组织、个人、企业等的开放源码库，任何都可以从上面获取源码。</li>
</ul>
<h1 id="私有远程仓库"><a href="#私有远程仓库" class="headerlink" title="私有远程仓库"></a>私有远程仓库</h1><ul>
<li>远程仓库实际上和本地仓库一样，纯粹为了7x24小时开机并交换大家的修改。GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</li>
<li>在本地创建了一个Git仓库，又想让其他人来协作开发，此时就可以把本地仓库同步到远程仓库，同时还增加了本地仓库的一个备份。</li>
<li>常用的远程仓库就是github：<a href="https://github.com/">https://github.com/</a></li>
<li>Github支持两种同步方式“https”和“ssh”。如果使用https很简单基本不需要配置就可以使用，但是每次提交代码和下载代码时都需要输入用户名和密码。而且如果是公司配置的私有git服务器一般不提供https方式访问。</li>
</ul>
<h1 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h1><ul>
<li>在工程中，并不是所有文件都需要保存到版本库中的，例如“target”目录及目录下的文件就可以忽略。Git忽略文件详解可参考Git忽略文件.gitignore详解</li>
</ul>
<h1 id="常用Git命令"><a href="#常用Git命令" class="headerlink" title="常用Git命令"></a>常用Git命令</h1><ul>
<li>经常使用 Git ，但是很多命令还是记不住。但要熟练掌握，恐怕要记住40~60个命令，所以整理了一份常用Git命令清单。可以参考常用Git命令</li>
</ul>
<h2 id="常用的git"><a href="#常用的git" class="headerlink" title="常用的git"></a>常用的git</h2><h3 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$ </span>git --version   <span class="comment"># 查看git的版本信息</span></span><br><span class="line"><span class="variable">$ </span>git config --global user.name   <span class="comment"># 获取当前登录的用户</span></span><br><span class="line"><span class="variable">$ </span>git config --global user.email  <span class="comment"># 获取当前登录用户的邮箱</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="登录git"><a href="#登录git" class="headerlink" title="登录git"></a>登录git</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 如果刚没有获取到用户配置，则只能拉取代码，不能修改  要是使用git，你要告诉git是谁在使用</span></span><br><span class="line"><span class="variable">$ </span>git config --global user.name <span class="string">&#x27;userName&#x27;</span>    <span class="comment"># 设置git账户，userName为你的git账号，</span></span><br><span class="line"><span class="variable">$ </span>git config --global user.email <span class="string">&#x27;email&#x27;</span></span><br><span class="line"><span class="comment"># 获取Git配置信息，执行以下命令：</span></span><br><span class="line"><span class="variable">$ </span>git config –list</span><br></pre></td></tr></table></figure>

<h3 id="配置https和ssh推送时保存用户名和密码"><a href="#配置https和ssh推送时保存用户名和密码" class="headerlink" title="配置https和ssh推送时保存用户名和密码"></a>配置https和ssh推送时保存用户名和密码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https提交保存用户名和密码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global credential.helper store</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成公钥私钥，将公钥配置到GitHub，ssh提交就可以免输入用户名密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">三次回车即可生成 ssh key</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ssh-keygen -t rsa</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已生成的公钥</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span></span><br></pre></td></tr></table></figure>

<h3 id="推送到远程仓库正确流程"><a href="#推送到远程仓库正确流程" class="headerlink" title="推送到远程仓库正确流程"></a>推送到远程仓库正确流程</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git init <span class="comment"># 初始化仓库</span></span><br><span class="line">git <span class="keyword">add </span>.(文件name) <span class="comment"># 添加文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span> <span class="comment"># 添加文件到本地仓库并提交描述信息</span></span><br><span class="line">git remote <span class="keyword">add </span><span class="keyword">origin </span>远程仓库地址 <span class="comment"># 链接远程仓库，创建主分支</span></span><br><span class="line">git pull <span class="keyword">origin </span>master --allow-unrelated-histories <span class="comment"># 把本地仓库的变化连接到远程仓库主分支</span></span><br><span class="line">git push -u <span class="keyword">origin </span>master <span class="comment"># 把本地仓库的文件推送到远程仓库</span></span><br></pre></td></tr></table></figure>

<h3 id="新建本地仓库"><a href="#新建本地仓库" class="headerlink" title="新建本地仓库"></a>新建本地仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个文件夹</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> GitRepositories    <span class="comment"># 创建文件夹GitRepositories</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> GitRepositories       <span class="comment"># 切换到GitRepositories目录下</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在当前目录新建一个Git代码库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个目录，将其初始化为Git代码库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init [project-name]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载一个项目和它的整个代码历史</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> [url]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置-全局和项目"><a href="#配置-全局和项目" class="headerlink" title="配置(全局和项目)"></a>配置(全局和项目)</h3><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</span></span><br><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ <span class="string">git</span> <span class="string">config</span> <span class="built_in">--list</span></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ <span class="string">git</span> <span class="string">config</span> -<span class="string">e</span> [<span class="built_in">--global]</span></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ <span class="string">git</span> <span class="string">config</span> [<span class="built_in">--global]</span> <span class="string">user</span>.<span class="string">name</span> <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ <span class="string">git</span> <span class="string">config</span> [<span class="built_in">--global]</span> <span class="string">user</span>.<span class="string">email</span> <span class="string">&quot;[email address]&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="增加-x2F-删除文件"><a href="#增加-x2F-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加指定文件到暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add [file1][file2] ...</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加指定目录到暂存区，包括子目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add [<span class="built_in">dir</span>]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加当前目录的所有文件到暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add -p</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> [file1] [file2] ...</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> --cached [file]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改名文件，并且将这个改名放入暂存区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">mv</span> [file-original] [file-renamed]</span></span><br></pre></td></tr></table></figure>

<h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line"><span class="variable">$ </span>git commit -m [message]</span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line"><span class="variable">$ </span>git commit [file1] [file2] ... -m [message]</span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line"><span class="variable">$ </span>git commit -a</span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line"><span class="variable">$ </span>git commit -v</span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line"><span class="variable">$ </span>git commit --amend -m [message]</span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line"><span class="variable">$ </span>git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<h3 id="分支-1"><a href="#分支-1" class="headerlink" title="分支"></a>分支</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -r</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch [branch-name]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b [branch]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，指向指定commit</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch [branch] [commit]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --track [branch] [remote-branch]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout [branch-name]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到上一个分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch --set-upstream [branch] [remote-branch]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并指定分支到当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge [branch]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cherry-pick [commit]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d [branch-name]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除远程分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -dr [remote/branch]</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">强制删除分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -D [branch-name]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git <span class="keyword">tag</span></span><br><span class="line"><span class="title"># 新建一个tag</span>在当前commit</span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>]</span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">[tag</span>] [commit]</span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">-d</span> [<span class="keyword">tag</span>]</span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [<span class="keyword">tag</span>]</span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [<span class="keyword">tag</span>]</span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [<span class="keyword">tag</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -al	或者$ ll</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看仓库状态，显示有变更的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前分支的版本历史</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --<span class="built_in">stat</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">搜索提交历史，根据关键词</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -S [keyword]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某个commit之后的所有变动，其<span class="string">&quot;提交说明&quot;</span>必须符合搜索条件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> [tag] HEAD --grep feature</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某个文件的版本历史，包括文件改名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --follow [file]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git whatchanged [file]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示指定文件相关的每一次diff</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -p [file]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示过去5次提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> -5 --pretty --oneline</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有提交过的用户，按提交次数排序</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git shortlog -sn</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示指定文件是什么人在什么时间修改过</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git blame [file]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示暂存区和工作区的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示暂存区和上一个commit的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --cached [file]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff HEAD</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示两次提交之间的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff [first-branch]...[second-branch]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示今天你写了多少行代码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某次提交的元数据和内容变化</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show [commit]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某次提交发生变化的文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show --name-only [commit]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示某次提交时，某个文件的内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git show [commit]:[filename]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示当前分支的最近几次提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reflog</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以图形化界面展示 分支的commit 历史</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --oneline --gragh</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line"><span class="variable">$ </span>git fetch [remote]</span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git remote -v</span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line"><span class="variable">$ </span>git remote show [remote]</span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line"><span class="variable">$ </span>git remote add [shortname] [url]</span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line"><span class="variable">$ </span>git pull [remote] [branch]</span><br><span class="line"><span class="variable">$ </span>git fetch 也同上</span><br><span class="line"><span class="variable">$ </span>git pull 相当 fetch ＋ merge</span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] [branch]</span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --force</span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line"><span class="variable">$ </span>git push [remote] --all</span><br><span class="line"><span class="variable">$ </span>push推的是分支不是代码</span><br><span class="line"><span class="comment"># 可以选择那个远程仓库那个分支</span></span><br><span class="line"><span class="variable">$ </span>git push [&lt;repository&gt; [&lt;分支的名字&gt;]]</span><br><span class="line"><span class="variable">$ </span>git fetch</span><br><span class="line"><span class="variable">$ </span>git fetch --all</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line"><span class="variable">$ </span>git checkout [file]</span><br><span class="line"><span class="comment"># 从工作区撤回文件</span></span><br><span class="line"><span class="variable">$ </span>git restore --staged xxxx xxx xxx... </span><br><span class="line"><span class="comment">#从暂存区到工作区撤回</span></span><br><span class="line"><span class="variable">$ </span>git restore xxx xxx xxx..</span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line"><span class="variable">$ </span>git checkout [commit] [file]</span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line"><span class="variable">$ </span>git checkout .</span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line"><span class="variable">$ </span>git reset [file]</span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line"><span class="variable">$ </span>git reset --hard</span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line"><span class="variable">$ </span>git reset [commit]</span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line"><span class="variable">$ </span>git reset --hard [commit]</span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line"><span class="variable">$ </span>git reset --keep [commit]</span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line"><span class="variable">$ </span>git revert [commit]</span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line"><span class="variable">$ </span>git stash</span><br><span class="line"><span class="variable">$ </span>git stash pop</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 从当前目录的所有文件中查找文本内容：</span></span><br><span class="line"><span class="variable">$ </span>git grep <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="comment"># 在某一版本中搜索文本：</span></span><br><span class="line"><span class="variable">$ </span>git grep <span class="string">&quot;Hello&quot;</span> v2.<span class="number">5</span></span><br><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line"><span class="variable">$ </span>git archive</span><br></pre></td></tr></table></figure>

<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>当工作区和暂存区都有的时候</li>
<li>直接更改工作区的文件 通过</li>
<li>commit -am “xx”</li>
<li>可以直接把修改了的文件传到本地仓库</li>
<li>merge : 经过merge的文件 ， 相当于把其他地方的分支给回收回来 ，</li>
</ul>
<h3 id="git文件夹的目录介绍"><a href="#git文件夹的目录介绍" class="headerlink" title=".git文件夹的目录介绍"></a>.git文件夹的目录介绍</h3><ul>
<li>HEAD ： 当前项目正在工作的分支</li>
<li>config ： 我们当前项目的一些配置信息（我们本地的配置信息）</li>
<li>可以通过 <code>git config --local user.name &quot;xxx&quot;</code> 来进行设置</li>
<li>或者直接在这个文件按照格式改也一样</li>
<li>同样 ， 有set就有get</li>
<li>refs ： 指向的是那个分支的指向</li>
<li>commit 的hash值对应的是什么内容的</li>
<li>object : git真正的存储对象</li>
<li><code>git cat-file</code></li>
<li><code>-t</code> : 文件类型</li>
<li><code>-p</code> : 文件内容</li>
<li><code>tree</code> ： 代表是文件夹</li>
<li><code>blob</code> ： 代表文件内容</li>
<li>git 存储文件高效的原因 ： 不同的文件只要有相同的地方就是一个blob</li>
</ul>
<h3 id="查看git文件存储的方法"><a href="#查看git文件存储的方法" class="headerlink" title="查看git文件存储的方法"></a>查看git文件存储的方法</h3><ul>
<li>我们先进入到.git的object文件夹里 ，因为object文件夹是git存储的首要位置</li>
<li>接下来 ，我们找到refs的文件 ，然后进入到heads里</li>
<li>找到文件 ，里面有我们的commit的哈希值</li>
<li>通过哈希值的前两个字母</li>
<li>我们在object文件夹下 ，找到这两个字符的文件夹</li>
<li>点进去查看文件名字</li>
<li>然后我们在命令行</li>
<li>输入 <code>git cat-file -p</code></li>
<li>和 <code>git cat-file -t</code></li>
<li>就可以查看到文件的类型和文件的内容</li>
<li>对于文件的内容，我们可以对于上次-p出来的文件再次进行 -p操作 哈希值 ，</li>
<li>就可以看见了</li>
<li>修改之前的某个commit的message</li>
<li>可以用 <code>git rebase</code></li>
<li>git rebase -i &lt;after - this - commit&gt;: 交互式 : 基于前一个commit 进行修改当前的commit ，这样修改了之后所有的hash值会改变，因为变头了 ，但是如果先进行了 ， <code>git cherry-pick</code>操作,则会把吗，master和以前的分支都改变（hash），但是一般是不带master等其他分支的</li>
<li>常用的操作</li>
<li>-p ：</li>
<li>-r ： 重写一个commit的message</li>
<li>-e ：</li>
<li>-s ： 合并多个commit的message</li>
<li>输入上面的那个命令之后我们要进入到一个界面</li>
<li>把要修改的前面改成 r</li>
<li>然后保存退出</li>
<li>然后就会跳转到另外可以编辑这个要编辑的conmmit的地方</li>
<li>就改掉message就好</li>
<li>合并本地message 要在本地合并 ，不能在远程合并</li>
<li>把多个commit合并成一个commit的操作和上面一样 ，只不过是把r改成s了</li>
<li>但是这样合并之后，你相当于把这些信息合并到一起 ，就把最上面的那个看成是一个集合</li>
<li>这样之后一般会放到 .git文件之下的 ， rebase</li>
</ul>
<h2 id="忽略文件-1"><a href="#忽略文件-1" class="headerlink" title="忽略文件"></a>忽略文件</h2><ul>
<li><code>.gitignore</code>文件就是忽略文件</li>
</ul>
<h2 id="仓库备份"><a href="#仓库备份" class="headerlink" title="仓库备份"></a>仓库备份</h2><ul>
<li>git clone ： 就是克隆&#x2F;备份</li>
<li>克隆一个仓库到一个新的文件夹</li>
<li>git clone &lt;仓库&gt; &lt;名字&gt;</li>
<li>这个仓库是本地或者远程仓库</li>
<li>仓库 ： 可以接url，或者本地的.git文件</li>
<li>克隆到名字的文件夹里 ，如果么没有则创建</li>
<li>本地备份本地不常用</li>
<li>一般都是备份远程仓库</li>
<li>对于远程仓库的地址 ，则是为我们通过查看远程仓库的地址进行</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>项目可视化框架</title>
    <url>/2022/12/06/12-06/</url>
    <content><![CDATA[<h1 id="superset"><a href="#superset" class="headerlink" title="superset"></a>superset</h1><p>docker run -d –name clickhouse-test-server –ulimit nofile&#x3D;262144:262144 –volume&#x3D;&#x2F;root&#x2F;clickhouse&#x2F;data:&#x2F;var&#x2F;lib&#x2F;clickhouse yandex&#x2F;clickhouse-server</p>
<p>官网 ： superset ： <a href="https://superset.apache.org/">https://superset.apache.org/</a></p>
<p>类似于otb ： 开箱即用</p>
<p>把图弄到一个dashboard中 ，显示出来</p>
<p>底层源码  ： python编译的 ： 建议先安装python 然后再安装它 ，不要把superset和mysql在一起</p>
<p>因为原生的superset，需要一个和mysql冲突的包</p>
<p>但是docker还是可以的</p>
<p>先安装python环境</p>
<p>anconda -》 python</p>
<p>python原生 ： 建议</p>
<h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>毫无疑问docker安装是最快速的而且，不用担心依赖等</p>
<p>docker安装的步骤如下  ：</p>
<p>先安装yarn工具集</p>
<p><code>yum -y install yum-utils</code></p>
<p>然后把docker源添加到镜像里</p>
<p><code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p>
<p>我这里添加的是阿里的镜像源</p>
<p>然后更新软件包索引</p>
<p><code>yum makecache fast</code></p>
<p>接下来我们就要开始安装docker了</p>
<p><code>yum -y install docker-ce docker-ce-cli containerd.io</code></p>
<p>设置一下docker开机自启</p>
<p><code>systemctl enable docker</code></p>
<p>然后我们启动docker</p>
<p><code>systemctl start docker</code></p>
<p>我们搜索superset镜像</p>
<p><code>docker search superset</code></p>
<p>直接拉去自己想要的版本 ，我这里拉去的是0.37.2的</p>
<p><code>docker pull amancevice/superset:0.37.2</code></p>
<p>接下来我们要创建存储superset配置文件及数据文件的文件夹</p>
<p><code>mkdir -p /opt/module/docker/superset/conf </code></p>
<p><code>mkdir -p /opt/module/docker/superset/data</code></p>
<p>接下来我们要创建superset的容器，并把端口映射出来</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker run --name superset -u <span class="number">0</span> -d -p <span class="number">8088</span>:<span class="number">8088</span> -v <span class="regexp">/opt/m</span>odule<span class="regexp">/docker/</span>superset<span class="regexp">/conf:/</span>etc<span class="regexp">/superset -v /</span>opt<span class="regexp">/module/</span>docker<span class="regexp">/superset/</span>data:<span class="regexp">/var/</span>lib<span class="regexp">/superset amancevice/</span>superset:<span class="number">0.37</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>然后初始化我们的superset数据库</p>
<p><code>docker exec -it superset superset db upgrade</code></p>
<p>创建superset的管理员账号</p>
<p><code>docker exec -it superset superset fab create-admin</code></p>
<p>创建成功之后可以对其进行初始化了</p>
<p><code>docker exec -it superset superset init </code></p>
<p>最后执行开启服务</p>
<p><code>docker exec -it superset superset run --with-threads --reload --debugger</code></p>
<p>就可以啦 ，我们可以通过web页面 ip:8088访问 因为我们映射的端口是8088嘛</p>
<p>但是要注意一点，就是我们在我们的superset添加数据库的时候不能用修改了host里的别名进行IP替代</p>
<p>因为我们的superset是安装在我们的docker里的哪里的host并没有进行修改，识别不了别名，我们可以对其进行修改，但是嫌麻烦可以直接弄个ip</p>
<p>接下来我们简单弄个启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">check_log_dir</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    SUPERSET_LOG_DIR=/usr/local/src/superset/logs</span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="variable">$SUPERSET_LOG_DIR</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">mkdir</span> -p <span class="variable">$SUPERSET_LOG_DIR</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">superset_start</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    cmd=<span class="string">&quot;docker start superset;nohup docker exec -it superset superset run --with-threads --reload --debugger &gt;<span class="variable">$SUPERSET_LOG_DIR</span>/superset.log 2&gt;&amp;1 &amp;&quot;</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$cmd</span> || <span class="built_in">echo</span> <span class="string">&quot;superset服务已启动&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">superset_stop</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">   docker stop superset</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">superset_status</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">  docker ps</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;start&quot;</span>)</span><br><span class="line">     check_log_dir</span><br><span class="line">     superset_start</span><br><span class="line">    ;;</span><br><span class="line"><span class="string">&quot;stop&quot;</span>)</span><br><span class="line">     superset_stop</span><br><span class="line">    ;;</span><br><span class="line"><span class="string">&quot;status&quot;</span>)</span><br><span class="line">      superset_status</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> Invalid Args!</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Usage: &#x27;</span>$(<span class="built_in">basename</span> <span class="variable">$0</span>)<span class="string">&#x27; start|stop|status&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<h2 id="原生安装"><a href="#原生安装" class="headerlink" title="原生安装"></a>原生安装</h2><p>superset的原生安装是有坑的 ，以下操作只能是root用</p>
<p>在安装superset的时候容易出现gcc的问题，解决方法就是一直重新安装那一步</p>
<p>下面我们一起来进行原生安装</p>
<p>首先我们要安装python3的一些依赖 <code>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</code></p>
<p>然后我们要进行安装EPEL源并安装superset必备的包</p>
<p><code>yum install epel-release #安装epel源</code></p>
<p><code>yum install mysql-devel #安装MySQL开发包，属于pymysqlclient依赖</code></p>
<p><code>yum install gcc gcc-c++ libffi-devel python-devel python-pip python-wheel openssl-devel cyrus-sasl-devel openldap-devel</code></p>
<p>接下来我们要上传自己的python安装包到linuxx服务器上</p>
<p> <code>cd /root/公共</code></p>
<p><code>tar -xf ./Python-3.6.6.tgz</code></p>
<p>然后进入到解压出来的文件夹中进行编译</p>
<p><code>./configure</code></p>
<p><code>make &amp;&amp; make install</code></p>
<p>安装python3的virtualenv并建⽴superset的env</p>
<p><code>pip3 install --upgrade pip -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p>
<p><code>virtualenv -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p>
<p><code>pip3 install --upgrade setuptools -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p>
<p>建⽴superset的env&amp;激活</p>
<p><code>python3 -m venv superset-py3</code></p>
<p><code>source superset-py3/bin/activate #激活superset的venv</code></p>
<p>安装superset需要的安装包</p>
<p>这个包的数量很多建议大家创建一个txt文件然后安装</p>
<p>requirement.txt文件添加</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">alembic</span>==<span class="number">1</span>.<span class="number">3</span>.<span class="number">2</span>            # via flask-migrate</span><br><span class="line"><span class="attribute">amqp</span>==<span class="number">2</span>.<span class="number">5</span>.<span class="number">2</span>               # via kombu</span><br><span class="line"><span class="attribute">apispec</span>[yaml]==<span class="number">1</span>.<span class="number">3</span>.<span class="number">3</span>      # via flask-appbuilder</span><br><span class="line"><span class="attribute">attrs</span>==<span class="number">19</span>.<span class="number">3</span>.<span class="number">0</span>             # via jsonschema</span><br><span class="line"><span class="attribute">babel</span>==<span class="number">2</span>.<span class="number">8</span>.<span class="number">0</span>              # via flask-babel</span><br><span class="line"><span class="attribute">backoff</span>==<span class="number">1</span>.<span class="number">10</span>.<span class="number">0</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">billiard</span>==<span class="number">3.6.3.0</span>         # via celery</span><br><span class="line"><span class="attribute">bleach</span>==<span class="number">3</span>.<span class="number">1</span>.<span class="number">0</span>             # via apache-superset (setup.py)     ---</span><br><span class="line"><span class="attribute">celery</span>==<span class="number">4</span>.<span class="number">4</span>.<span class="number">1</span>             # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">cffi</span>==<span class="number">1</span>.<span class="number">13</span>.<span class="number">2</span>              # via cryptography</span><br><span class="line"><span class="attribute">click</span>==<span class="number">7</span>.<span class="number">1</span>.<span class="number">1</span>              # via apache-superset (setup.py), flask, flask-appbuilder</span><br><span class="line"><span class="attribute">colorama</span>==<span class="number">0</span>.<span class="number">4</span>.<span class="number">3</span>           # via apache-superset (setup.py), flask-appbuilder</span><br><span class="line"><span class="attribute">contextlib2</span>==<span class="number">0</span>.<span class="number">6</span>.<span class="number">0</span>.post1  # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">croniter</span>==<span class="number">0</span>.<span class="number">3</span>.<span class="number">31</span>          # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">cryptography</span>==<span class="number">2</span>.<span class="number">8</span>         # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">decorator</span>==<span class="number">4</span>.<span class="number">4</span>.<span class="number">1</span>          # via retry</span><br><span class="line"><span class="attribute">defusedxml</span>==<span class="number">0</span>.<span class="number">6</span>.<span class="number">0</span>         # via python3-openid</span><br><span class="line"><span class="attribute">flask</span>-appbuilder==<span class="number">2</span>.<span class="number">2</span>.<span class="number">4</span>   # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">flask</span>-babel==<span class="number">1</span>.<span class="number">0</span>.<span class="number">0</span>        # via flask-appbuilder</span><br><span class="line"><span class="attribute">flask</span>-caching==<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>      # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">flask</span>-compress==<span class="number">1</span>.<span class="number">4</span>.<span class="number">0</span>     # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">flask</span>-jwt-extended==<span class="number">3</span>.<span class="number">24</span>.<span class="number">1</span>  # via flask-appbuilder</span><br><span class="line"><span class="attribute">flask</span>-login==<span class="number">0</span>.<span class="number">4</span>.<span class="number">1</span>        # via flask-appbuilder</span><br><span class="line"><span class="attribute">flask</span>-migrate==<span class="number">2</span>.<span class="number">5</span>.<span class="number">2</span>      # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">flask</span>-openid==<span class="number">1</span>.<span class="number">2</span>.<span class="number">5</span>       # via flask-appbuilder</span><br><span class="line"><span class="attribute">flask</span>-sqlalchemy==<span class="number">2</span>.<span class="number">4</span>.<span class="number">1</span>   # via flask-appbuilder, flask-migrate</span><br><span class="line"><span class="attribute">flask</span>-talisman==<span class="number">0</span>.<span class="number">7</span>.<span class="number">0</span>     # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">flask</span>-wtf==<span class="number">0</span>.<span class="number">14</span>.<span class="number">2</span>         # via apache-superset (setup.py), flask-appbuilder</span><br><span class="line"><span class="attribute">flask</span>==<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>              # via apache-superset (setup.py), flask-appbuilder, flask-babel, flask-caching, flask-compress, flask-jwt-extended, flask-login, flask-migrate, flask-openid, flask-sqlalchemy, flask-wtf</span><br><span class="line"><span class="attribute">geographiclib</span>==<span class="number">1</span>.<span class="number">50</span>       # via geopy</span><br><span class="line"><span class="attribute">geopy</span>==<span class="number">1</span>.<span class="number">20</span>.<span class="number">0</span>             # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">gunicorn</span>==<span class="number">20</span>.<span class="number">0</span>.<span class="number">4</span>          # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">humanize</span>==<span class="number">0</span>.<span class="number">5</span>.<span class="number">1</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">importlib</span>-metadata==<span class="number">1</span>.<span class="number">4</span>.<span class="number">0</span>  # via jsonschema, kombu</span><br><span class="line"><span class="attribute">isodate</span>==<span class="number">0</span>.<span class="number">6</span>.<span class="number">0</span>            # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">itsdangerous</span>==<span class="number">1</span>.<span class="number">1</span>.<span class="number">0</span>       # via flask</span><br><span class="line"><span class="attribute">jinja2</span>==<span class="number">2</span>.<span class="number">10</span>.<span class="number">3</span>            # via flask, flask-babel</span><br><span class="line"><span class="attribute">jsonschema</span>==<span class="number">3</span>.<span class="number">2</span>.<span class="number">0</span>         # via flask-appbuilder</span><br><span class="line"><span class="attribute">kombu</span>==<span class="number">4</span>.<span class="number">6</span>.<span class="number">8</span>              # via celery</span><br><span class="line"><span class="attribute">mako</span>==<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>               # via alembic</span><br><span class="line"><span class="attribute">markdown</span>==<span class="number">3</span>.<span class="number">1</span>.<span class="number">1</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">markupsafe</span>==<span class="number">1</span>.<span class="number">1</span>.<span class="number">1</span>         # via jinja2, mako</span><br><span class="line"><span class="attribute">marshmallow</span>-enum==<span class="number">1</span>.<span class="number">5</span>.<span class="number">1</span>   # via flask-appbuilder</span><br><span class="line"><span class="attribute">marshmallow</span>-sqlalchemy==<span class="number">0</span>.<span class="number">21</span>.<span class="number">0</span>  # via flask-appbuilder</span><br><span class="line"><span class="attribute">marshmallow</span>==<span class="number">2</span>.<span class="number">19</span>.<span class="number">5</span>       # via flask-appbuilder, marshmallow-enum, marshmallow-sqlalchemy</span><br><span class="line"><span class="attribute">more</span>-itertools==<span class="number">8</span>.<span class="number">1</span>.<span class="number">0</span>     # via zipp</span><br><span class="line"><span class="attribute">msgpack</span>==<span class="number">0</span>.<span class="number">6</span>.<span class="number">2</span>            # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">numpy</span>==<span class="number">1</span>.<span class="number">18</span>.<span class="number">1</span>             # via pandas, pyarrow</span><br><span class="line"><span class="attribute">pandas</span>==<span class="number">0</span>.<span class="number">25</span>.<span class="number">3</span>            # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">parsedatetime</span>==<span class="number">2</span>.<span class="number">5</span>        # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">pathlib2</span>==<span class="number">2</span>.<span class="number">3</span>.<span class="number">5</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">polyline</span>==<span class="number">1</span>.<span class="number">4</span>.<span class="number">0</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">prison</span>==<span class="number">0</span>.<span class="number">1</span>.<span class="number">2</span>             # via flask-appbuilder</span><br><span class="line"><span class="attribute">py</span>==<span class="number">1</span>.<span class="number">8</span>.<span class="number">1</span>                 # via retry</span><br><span class="line"><span class="attribute">pyarrow</span>==<span class="number">0</span>.<span class="number">16</span>.<span class="number">0</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">pycparser</span>==<span class="number">2</span>.<span class="number">19</span>           # via cffi</span><br><span class="line"><span class="attribute">pyjwt</span>==<span class="number">1</span>.<span class="number">7</span>.<span class="number">1</span>              # via flask-appbuilder, flask-jwt-extended</span><br><span class="line"><span class="attribute">python</span>-dateutil==<span class="number">2</span>.<span class="number">8</span>.<span class="number">1</span>    # via alembic, apache-superset (setup.py), croniter, flask-appbuilder, pandas</span><br><span class="line"><span class="attribute">python</span>-dotenv==<span class="number">0</span>.<span class="number">10</span>.<span class="number">5</span>     # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">python</span>-editor==<span class="number">1</span>.<span class="number">0</span>.<span class="number">4</span>      # via alembic</span><br><span class="line"><span class="attribute">python</span>-geohash==<span class="number">0</span>.<span class="number">8</span>.<span class="number">5</span>     # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">python3</span>-openid==<span class="number">3</span>.<span class="number">1</span>.<span class="number">0</span>     # via flask-openid</span><br><span class="line"><span class="attribute">pytz</span>==<span class="number">2019</span>.<span class="number">3</span>              # via babel, celery, flask-babel, pandas</span><br><span class="line"><span class="attribute">pyyaml</span>==<span class="number">5</span>.<span class="number">3</span>               # via apache-superset (setup.py), apispec</span><br><span class="line"><span class="attribute">retry</span>==<span class="number">0</span>.<span class="number">9</span>.<span class="number">2</span>              # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">selenium</span>==<span class="number">3</span>.<span class="number">141</span>.<span class="number">0</span>         # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">simplejson</span>==<span class="number">3</span>.<span class="number">17</span>.<span class="number">0</span>        # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">six</span>==<span class="number">1</span>.<span class="number">14</span>.<span class="number">0</span>               # via bleach, cryptography, flask-jwt-extended, flask-talisman, isodate, jsonschema, pathlib2, polyline, prison, pyarrow, pyrsistent, python-dateutil, sqlalchemy-utils, wtforms-json</span><br><span class="line"><span class="attribute">sqlalchemy</span>-utils==<span class="number">0</span>.<span class="number">36</span>.<span class="number">1</span>  # via apache-superset (setup.py), flask-appbuilder</span><br><span class="line"><span class="attribute">sqlalchemy</span>==<span class="number">1</span>.<span class="number">3</span>.<span class="number">12</span>        # via alembic, apache-superset (setup.py), flask-sqlalchemy, marshmallow-sqlalchemy, sqlalchemy-utils</span><br><span class="line"><span class="attribute">sqlparse</span>==<span class="number">0</span>.<span class="number">3</span>.<span class="number">0</span>           # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">urllib3</span>==<span class="number">1</span>.<span class="number">25</span>.<span class="number">8</span>           # via selenium</span><br><span class="line"><span class="attribute">vine</span>==<span class="number">1</span>.<span class="number">3</span>.<span class="number">0</span>               # via amqp, celery</span><br><span class="line"><span class="attribute">webencodings</span>==<span class="number">0</span>.<span class="number">5</span>.<span class="number">1</span>       # via bleach</span><br><span class="line"><span class="attribute">werkzeug</span>==<span class="number">0</span>.<span class="number">16</span>.<span class="number">0</span>          # via flask, flask-jwt-extended</span><br><span class="line"><span class="attribute">wtforms</span>-json==<span class="number">0</span>.<span class="number">3</span>.<span class="number">3</span>       # via apache-superset (setup.py)</span><br><span class="line"><span class="attribute">wtforms</span>==<span class="number">2</span>.<span class="number">2</span>.<span class="number">1</span>            # via flask-wtf, wtforms-json</span><br><span class="line"><span class="attribute">zipp</span>==<span class="number">2</span>.<span class="number">0</span>.<span class="number">0</span>               # via importlib-metadata</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后执行 ：</p>
<p><code> pip3 install -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com -r requirement.txt</code></p>
<p>从阿里的镜像源安装这些依赖</p>
<p>接下来是安装Superset</p>
<p>到了这一步，就可能会报错，就是gcc的错误，那是因为安装没有成功，我安装了6次才成功，</p>
<p>执行 ；</p>
<p><code>pip3 install apache-superset==0.37.1  -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com</code></p>
<p>然后<strong>安装Mysql数据包</strong></p>
<p><code>install sqlalchemy==1.3.24 -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p>
<p><code>pip3 install mysqlclient -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p>
<p><code>pip3 install &quot;pymssql&lt;3.0&quot; -i http://pypi.douban.com/simple --trusted-host pypi.douban.com </code></p>
<p>接下来我们去我们的mysql里执行</p>
<p><code>CREATE DATABASE </code>superset <code>/*!40100 DEFAULT CHARACTER SET utf8 */;</code></p>
<p>创建其源数据库</p>
<p><strong>修改superset元数据库</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"> vim superset-py3<span class="regexp">/lib/</span>python3.<span class="number">6</span><span class="regexp">/site-packages/</span>superset/config.py</span><br><span class="line"></span><br><span class="line">修改：</span><br><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">&#x27;mysql://root:123456@hadoop102/superset?charset=utf8&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果没有这个文件的同学，就是上面安装superset的那一步出问题了，要重新执行</p>
<p><strong>初始化Supetset数据库（Supetset是一个web应用，自带数据库，需要初始化）</strong></p>
<p><code> superset db upgrade</code></p>
<p><strong>创建管理员用户</strong></p>
<p><code>export FLASK_APP=superset</code></p>
<p><code>flask fab create-admin</code></p>
<p><strong>说明：</strong> flask是一个python web框架，Superset使用的就是flask</p>
<p><strong>Superset初始化</strong></p>
<p><code> superset init</code></p>
<p>然后我们要修改mysql里的表</p>
<p><code>alter table superset.table_columns modify type varchar(255);</code></p>
<p>然后就可以启动我们的superset了</p>
<p><code> superset run -h 自己的机器名或者ip  -p 启动端口</code></p>
<p>然后访问</p>
<p><code>http://机器ip或者机器名字:端口/</code></p>
<p>老规矩接下来我们创建个启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">check_log_dir</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    SUPERSET_LOG_DIR=/usr/local/src/superset/logs</span><br><span class="line">    <span class="keyword">if</span> [ ! -d <span class="variable">$SUPERSET_LOG_DIR</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">mkdir</span> -p <span class="variable">$SUPERSET_LOG_DIR</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查进程是否运行正常，参数1为进程名，参数2为进程端口</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">check_process</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    pid=$(ps -ef 2&gt;/dev/null | grep -v grep | grep -i <span class="variable">$1</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">    ppid=$(netstat -nltp 2&gt;/dev/null | grep <span class="variable">$2</span> | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | <span class="built_in">cut</span> -d <span class="string">&#x27;/&#x27;</span> -f 1)</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$pid</span></span><br><span class="line">    [ <span class="string">&quot;<span class="variable">$ppid</span>&quot;</span> ] &amp;&amp; <span class="built_in">return</span> 0 || <span class="built_in">return</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">superset_start</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    metapid=$(check_process superset 8889)</span><br><span class="line">    cmd=<span class="string">&quot;cd /root/公共/Python-3.6.6;source superset-py3/bin/activate;nohup superset run -h bigdata4 -p 8889 &gt;<span class="variable">$SUPERSET_LOG_DIR</span>/superset.log 2&gt;&amp;1 &amp;&quot;</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$cmd</span> || <span class="built_in">echo</span> <span class="string">&quot;superset服务已启动&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">superset_stop</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    metapid=$(check_process superset 8889)</span><br><span class="line">    [ <span class="string">&quot;<span class="variable">$metapid</span>&quot;</span> ] &amp;&amp; <span class="built_in">kill</span> <span class="variable">$metapid</span> || <span class="built_in">echo</span> <span class="string">&quot;superset服务未启动&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;start&quot;</span>)</span><br><span class="line">     check_log_dir</span><br><span class="line">     superset_start</span><br><span class="line">    ;;</span><br><span class="line"><span class="string">&quot;stop&quot;</span>)</span><br><span class="line">     superset_stop</span><br><span class="line">    ;;</span><br><span class="line"><span class="string">&quot;status&quot;</span>)</span><br><span class="line">     check_process superset 8889 &gt;/dev/null &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;superset服务运行正常&quot;</span> || <span class="built_in">echo</span> <span class="string">&quot;superset服务运行异常&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> Invalid Args!</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;Usage: &#x27;</span>$(<span class="built_in">basename</span> <span class="variable">$0</span>)<span class="string">&#x27; start|stop|status&#x27;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>关于superset的原生安装就ok了</p>
<h1 id="dataease"><a href="#dataease" class="headerlink" title="dataease"></a>dataease</h1><p>先在官网下载官网地址 ： <a href="https://www.fit2cloud.com/dataease/features.html">https://www.fit2cloud.com/dataease/features.html</a></p>
<p>目前没有时间等周六周日补上</p>
<p>dataease安装特别简单而且图形炫酷，首推</p>
<p>但是有问题：安装dataease的机器上不能有mysql或者你把mysql的端口改掉，因为它要占用3306端口</p>
<p>不管是在线安装还是离线安装对我们的数据库都有要求，mysql 5.7起步</p>
<p>而且要求我们编辑&#x2F;etc&#x2F;my.cnf文件</p>
<p>然后添加以下内容</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="attribute">datadir</span>=/var/lib/mysql</span><br><span class="line"></span><br><span class="line"><span class="attribute">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="attribute">character_set_server</span>=utf8</span><br><span class="line"><span class="attribute">lower_case_table_names</span>=1</span><br><span class="line"><span class="attribute">table_open_cache</span>=128</span><br><span class="line"><span class="attribute">max_connections</span>=2000</span><br><span class="line"><span class="attribute">max_connect_errors</span>=6000</span><br><span class="line"><span class="attribute">innodb_file_per_table</span>=1</span><br><span class="line"><span class="attribute">innodb_buffer_pool_size</span>=1G</span><br><span class="line"><span class="attribute">max_allowed_packet</span>=64M</span><br><span class="line"><span class="attribute">transaction_isolation</span>=READ-COMMITTED</span><br><span class="line"><span class="attribute">innodb_flush_method</span>=O_DIRECT</span><br><span class="line"><span class="attribute">innodb_lock_wait_timeout</span>=1800</span><br><span class="line"><span class="attribute">innodb_flush_log_at_trx_commit</span>=0</span><br><span class="line"><span class="attribute">sync_binlog</span>=0</span><br><span class="line"><span class="attribute">group_concat_max_len</span>=1024000</span><br><span class="line"><span class="attribute">sql_mode</span>=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line">skip-name-resolve</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"><span class="attribute">default-character-set</span>=utf8</span><br><span class="line"></span><br><span class="line">[mysql.server]</span><br><span class="line"><span class="attribute">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure>

<p>在线安装 ：<code>curl -sSL https://github.com/dataease/dataease/releases/latest/download/quick_start.sh | sh</code></p>
<p>就可以了</p>
<p>离线安装：</p>
<p>先下载好安装包然后解压，之后到解压的目录，然后编辑install.conf文件下面是install.conf的配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础配置</span></span><br><span class="line"><span class="comment">## 安装目录</span></span><br><span class="line"><span class="attr">DE_BASE</span>=/opt</span><br><span class="line"><span class="comment">## Service 端口</span></span><br><span class="line"><span class="attr">DE_PORT</span>=<span class="number">80</span></span><br><span class="line"><span class="comment">## 部署及运行模式，可选值有 local、simple、cluster，分别对应 本地模式、精简模式、集群模式</span></span><br><span class="line"><span class="attr">DE_ENGINE_MODE</span>=simple</span><br><span class="line"><span class="comment">## docker 网段设置</span></span><br><span class="line"><span class="attr">DE_DOCKER_SUBNET</span>=<span class="number">172.19</span>.<span class="number">0.0</span>/<span class="number">16</span></span><br><span class="line"><span class="comment">## docker 网关 IP</span></span><br><span class="line"><span class="attr">DE_DOCKER_GATEWAY</span>=<span class="number">172.19</span>.<span class="number">0.1</span></span><br><span class="line"><span class="comment">## Apache Doris FE IP (外部 Doris 此参数无效)</span></span><br><span class="line"><span class="attr">DE_DORIS_FE_IP</span>=<span class="number">172.19</span>.<span class="number">0.198</span></span><br><span class="line"><span class="comment">## Apache Doris BE IP (外部 Doris 此参数无效)</span></span><br><span class="line"><span class="attr">DE_DORIS_BE_IP</span>=<span class="number">172.19</span>.<span class="number">0.199</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置</span></span><br><span class="line"><span class="comment">## 是否使用外部数据库</span></span><br><span class="line"><span class="attr">DE_EXTERNAL_MYSQL</span>=<span class="literal">false</span></span><br><span class="line"><span class="comment">## 数据库地址</span></span><br><span class="line"><span class="attr">DE_MYSQL_HOST</span>=mysql</span><br><span class="line"><span class="comment">## 数据库端口</span></span><br><span class="line"><span class="attr">DE_MYSQL_PORT</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment">## DataEase 数据库库名</span></span><br><span class="line"><span class="attr">DE_MYSQL_DB</span>=dataease</span><br><span class="line"><span class="comment">## 数据库用户名</span></span><br><span class="line"><span class="attr">DE_MYSQL_USER</span>=root</span><br><span class="line"><span class="comment">## 数据库密码</span></span><br><span class="line"><span class="attr">DE_MYSQL_PASSWORD</span>=Password123@mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apache Doris 配置</span></span><br><span class="line"><span class="comment">## 是否使用外部 Apache Doris</span></span><br><span class="line"><span class="attr">DE_EXTERNAL_DORIS</span>=<span class="literal">false</span></span><br><span class="line"><span class="comment">## Doris 地址</span></span><br><span class="line"><span class="attr">DE_DORIS_HOST</span>=doris-fe</span><br><span class="line"><span class="comment">## Doris 查询连接端口</span></span><br><span class="line"><span class="attr">DE_DORIS_PORT</span>=<span class="number">9030</span></span><br><span class="line"><span class="comment">## Doris http端口</span></span><br><span class="line"><span class="attr">DE_DORIS_HTTPPORT</span>=<span class="number">8030</span></span><br><span class="line"><span class="comment">## Doris 数据库名称</span></span><br><span class="line"><span class="attr">DE_DORIS_DB</span>=dataease</span><br><span class="line"><span class="comment">## Doris 用户名</span></span><br><span class="line"><span class="attr">DE_DORIS_USER</span>=root</span><br><span class="line"><span class="comment">## Doris 密码</span></span><br><span class="line"><span class="attr">DE_DORIS_PASSWORD</span>=Password123@doris</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kettle 配置</span></span><br><span class="line"><span class="comment">## 是否使用外部 Kettle - (目前还不支持外部Kettle，除非不需运行Kettle，否则请不要修改此参数)</span></span><br><span class="line"><span class="attr">DE_EXTERNAL_KETTLE</span>=<span class="literal">false</span></span><br><span class="line"><span class="comment">## Kettle 服务器地址</span></span><br><span class="line"><span class="attr">DE_CARTE_HOST</span>=kettle</span><br><span class="line"><span class="comment">## Kettle 访问端口</span></span><br><span class="line"><span class="attr">DE_CARTE_PORT</span>=<span class="number">18080</span></span><br><span class="line"><span class="comment">## Kettle 用户名</span></span><br><span class="line"><span class="attr">DE_CARTE_USER</span>=cluster</span><br><span class="line"><span class="comment">## Kettle 密码</span></span><br><span class="line"><span class="attr">DE_CARTE_PASSWORD</span>=cluster</span><br></pre></td></tr></table></figure>

<p>安装模式有三种 ：</p>
<p><strong>DE_ENGINE_MODE&#x3D;local</strong><br>使用本地模式安装，DataEase 会自带 Doris 与 Kettle 组件，无需再做额外配置，但各组件均为单点，不具备高可用特性。<br>在此模式下，Excel 数据集、API 数据集以及定时同步的数据默认保存在自带的 Doris 组件中。</p>
<p><strong>DE_ENGINE_MODE&#x3D;simple</strong><br>使用精简模式安装，系统不会额外安装 Doris 与 Kettle 组件，提供用户轻量级的应用系统，尤其是对接数据量较小的情况。<br>在此模式下，若用户需要使用 Excel 数据集或 API 数据集可在系统管理界面配置数据引擎（目前仅支持 MySQL 类型），相关数据会存储到该数据引擎中。若只需使用数据库直连则无需做此配置。<br><strong>注意：由于精简模式未配置 Kettle 与 Doris，故相关 SQL 数据集&#x2F;数据库数据集不提供定时同步模式。</strong></p>
<p><strong>DE_ENGINE_MODE&#x3D;cluster</strong><br>使用集群模式安装，系统不会额外安装 Doris 与 Kettle 组件，但会在系统管理模块提供 Doris 与 Kettle 的链接配置界面（请参考【系统管理】的【系统参数】说明），用户可独立安装 Doris 集群及 Kettle 并配置在 DataEase 中。集群模式下 Excel 数据集，API 数据集以及定时同步的数据通过 Kettle 抽取到 Doris 集群中。<br>Doris 安装部署可参考：<a href="http://doris.incubator.apache.org/zh-CN/">http://doris.incubator.apache.org/zh-CN/</a><br>Kettle 安装部署可参考：<a href="http://www.kettle.org.cn/">http://www.kettle.org.cn/</a></p>
<p>然后对于离线安装执行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入安装包目录</span></span><br><span class="line">cd dataease-v1.<span class="number">5.0</span>-offline</span><br><span class="line"><span class="comment"># 运行安装脚本</span></span><br><span class="line"><span class="regexp">/bin/</span>bash install.sh</span><br></pre></td></tr></table></figure>

<p>就可以了，效果个很酷炫</p>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>有一个城市表 ： mysql中</p>
<p>有一个商品表 ： mysql中</p>
<p>用户行为数据 ： hdfs上的</p>
<p>求： 最受欢迎的商品 的 top3</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>superset</tag>
      </tags>
  </entry>
  <entry>
    <title>hive-4</title>
    <url>/2022/12/02/12-02/</url>
    <content><![CDATA[<p>维度组合分析 ：</p>
<p>sql 关键字 ： grouping sets</p>
<p>例子  ：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> table user_shop (</span><br><span class="line">user_id <span class="keyword">String</span>,</span><br><span class="line">shop_name <span class="keyword">String</span>,</span><br><span class="line">channe <span class="keyword">String</span>,</span><br><span class="line">os <span class="keyword">String</span></span><br><span class="line">)</span><br><span class="line">row format delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br></pre></td></tr></table></figure>

<p>一般我们进行维度计算的时候，我们可以通过group by 的方式进行</p>
<p>但是假如我们每次都要处理一个维度，那么我们难道要写很多个sql语句吗</p>
<p>这明显是不行的</p>
<p>那么我们如何解决呢</p>
<p>通过grouping sets 就可以解决了</p>
<p>代码如下  ：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empid,custid,</span><br><span class="line">       sum(qty) <span class="keyword">as</span> sumqty</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    <span class="keyword">GROUPING SETS</span></span><br><span class="line">    (</span><br><span class="line">        (empid,custid),</span><br><span class="line">        (empid),(custid),</span><br><span class="line">        ()</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<p>上面代码的意思就是 ：我要按照group by的方法　把empid,custid和empid和custid这几个维度都选出来，然后是上下在一起的　相当于用union在一起</p>
<p>如果是这次选择的维度中未选择的维度，比如说　，我只选择了　维度empid　，那么custid列就会是空，但是这个比多次重复性写sql语句要好的多</p>
<h1 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h1><p>针对以下数据</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">+--------------+--------------------+</span><br><span class="line">|<span class="string"> hanglie.ame  </span>|<span class="string"> hanglie.teresting  </span>|</span><br><span class="line">+--------------+--------------------+</span><br><span class="line">|<span class="string"> zuan         </span>|<span class="string"> 王者荣耀               </span>|</span><br><span class="line">|<span class="string"> zuan         </span>|<span class="string"> 吃饭                 </span>|</span><br><span class="line">|<span class="string"> zuan         </span>|<span class="string"> rap                </span>|</span><br><span class="line">|<span class="string"> zuan         </span>|<span class="string"> 唱歌                 </span>|</span><br><span class="line">|<span class="string"> chaofeng     </span>|<span class="string"> 王者荣耀               </span>|</span><br><span class="line">|<span class="string"> chaofeng     </span>|<span class="string"> 睡觉                 </span>|</span><br><span class="line">|<span class="string"> chaofeng     </span>|<span class="string"> 方亚                 </span>|</span><br><span class="line">+--------------+--------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我们可以把后面散开的数据转化成一个array存起来</p>
<p>通过 collect_list 函数转化成array 而且可以通过 concat_ws函数设置每个参数之间的分隔符</p>
<p>如下</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">ame,</span><br><span class="line">collect_list(teresting) <span class="keyword">as</span> interesting,</span><br><span class="line">concat_ws(<span class="string">&#x27;:&#x27;</span> , collect_list(teresting)) <span class="keyword">as</span> newin</span><br><span class="line"><span class="keyword">from</span> hanglie</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ame</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">+<span class="params">-----------</span>+<span class="params">---------------------------</span>+<span class="params">-----------------</span>+</span><br><span class="line">|    ame    |        interesting        |      newin      |</span><br><span class="line">+<span class="params">-----------</span>+<span class="params">---------------------------</span>+<span class="params">-----------------</span>+</span><br><span class="line">| chaofeng  | [<span class="string">&quot;王者荣耀&quot;</span>,<span class="string">&quot;睡觉&quot;</span>,<span class="string">&quot;方亚&quot;</span>]        | 王者荣耀:睡觉:方亚      |</span><br><span class="line">| zuan      | [<span class="string">&quot;王者荣耀&quot;</span>,<span class="string">&quot;吃饭&quot;</span>,<span class="string">&quot;rap&quot;</span>,<span class="string">&quot;唱歌&quot;</span>]  | 王者荣耀:吃饭<span class="function">:rap</span>:唱歌  |</span><br><span class="line">+<span class="params">-----------</span>+<span class="params">---------------------------</span>+<span class="params">-----------------</span>+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><p>concat是可以更改数组分隔符的一个函数</p>
<p>例子 ：</p>
<p>拼接：</p>
<ul>
<li>concat  &#x3D;》 字符串拼接</li>
<li>select concat(“zuan”,”|”,”zihang”,”|”,”chaofeng”)</li>
<li>结果是 ：zuan|zihang|chaofeng</li>
<li>concat_ws(string SEP, string A, string B…) &#x3D;》 字符串拼接</li>
<li>select concat_ws(“|”,”zuan”,”zihang”,”chaofeng”)</li>
<li>可变参数 &#x3D;》 array【String】</li>
<li>select concat_ws(“|”,split(“a,a,a”,’,’)</li>
<li>select  split(“a,a,a”,’,’)  ： 这个就是切割字符串</li>
</ul>
<p>所有类型的可以转换成字符串</p>
<p>字符串有好处也有坏处</p>
<p>因为无法排序</p>
<p>但是经过hive优化，字符串是可以进行四则运算的</p>
<p>字符串排序： 按照字典序进行排序的 a-z</p>
<h2 id="BY"><a href="#BY" class="headerlink" title="BY"></a>BY</h2><p>四个by</p>
<h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><p>全局排序 ，且reduce只有一个</p>
<p>order by会对输入进行全局排序，因此只有一个Reducer（多个Reducer无法保证全局有序），然而只有一个Reducer会导致计算效率非常低，使用较少。事实上，在生产环境中，order by 很容易造成OOM。</p>
<p>如下  ：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  *  <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> empno;</span><br></pre></td></tr></table></figure>

<p>执行上述语句要开启个开关才可以</p>
<p>hive.mapred.mode &#x3D;&gt;some risky queries are not allowed to run 【关闭】</p>
<p>如果用order by 推荐和 limit搭配</p>
<h3 id="sort-by"><a href="#sort-by" class="headerlink" title="sort by"></a>sort by</h3><p>分区排序 ： 不能保证 全局有序</p>
<p>sort by不是全局排序，它会在数据进入Reducer之前完成排序。因此如果使用sort by进行排序，并且设置mapreduce.job.reduces多于一个，则sort by只会保证每个reducer的输出有序，不能保证全局有序。但是可以对最后的结果进行归并排序实现全局排序。</p>
<p>假如你的reduce task 个数 是 1 则它和order by 是一样的</p>
<p>调制reduce task 个数 ：</p>
<ul>
<li>mapred.reduce.tasks</li>
<li>set  mapred.reduce.tasks;</li>
</ul>
<h3 id="Distribute-By"><a href="#Distribute-By" class="headerlink" title="Distribute  By"></a>Distribute  By</h3><p>数据开发的时候会用到</p>
<p>distribute by的作用是控制map端如何拆分数据给reduce端。hive会根据distribute by后面的字段，对reduce的个数进行分发，默认采用的是hash算法。sort by保证每个reduce内有序，因此distribute by经常和sort by配合使用。生产环境中 distribute by + sort by用的多。</p>
<p>数据 如下 ：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">2020,1w</span><br><span class="line">2020,2w</span><br><span class="line">2020,1w</span><br><span class="line">2020,0.5w</span><br><span class="line">2021,10w</span><br><span class="line">2021,20w</span><br><span class="line">2021,19w</span><br><span class="line">2021,1.5w</span><br><span class="line">2022,1.3w</span><br><span class="line">2022,2w</span><br><span class="line">2022,1w</span><br><span class="line">2022,0.5w</span><br><span class="line"></span><br><span class="line">+-----------------------+--------------------------+</span><br><span class="line">|<span class="string"> hive_distribute.year  </span>|<span class="string"> hive_distribute.earning  </span>|</span><br><span class="line">+-----------------------+--------------------------+</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 1w                       </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 2w                       </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 1w                       </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 0.5w                     </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 10w                      </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 20w                      </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 19w                      </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 1.5w                     </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 1.3w                     </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 2w                       </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 1w                       </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 0.5w                     </span>|</span><br><span class="line">+-----------------------+--------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>建表 ：</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="built_in">create</span> <span class="built_in">table</span> hive_distribute(</span><br><span class="line">year <span class="built_in">string</span>,</span><br><span class="line">earning <span class="built_in">string</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>执行语句 ：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">select  <span class="symbol">*</span>  from hive_distribute distribute by year   sort by earning;</span><br><span class="line"></span><br><span class="line">+-----------------------+--------------------------+</span><br><span class="line">|<span class="string"> hive_distribute.year  </span>|<span class="string"> hive_distribute.earning  </span>|</span><br><span class="line">+-----------------------+--------------------------+</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 0.5w                     </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 0.5w                     </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 1.3w                     </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 1.5w                     </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 10w                      </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 19w                      </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 1w                       </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 1w                       </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 1w                       </span>|</span><br><span class="line">|<span class="string"> 2021                  </span>|<span class="string"> 20w                      </span>|</span><br><span class="line">|<span class="string"> 2022                  </span>|<span class="string"> 2w                       </span>|</span><br><span class="line">|<span class="string"> 2020                  </span>|<span class="string"> 2w                       </span>|</span><br><span class="line">+-----------------------+--------------------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Cluster-By"><a href="#Cluster-By" class="headerlink" title="Cluster By"></a>Cluster By</h2><p>ClusterByis a short-cut for both DistributeByand Sort By.</p>
<p>distributeby year   sort by year  《&#x3D;》 ClusterBy year 正确</p>
<p>当distribute by 和 sort by字段相同时，可以使用cluster by。<br>cluster by除了具有distribute by的功能外还兼具sort by的排序功能。但是排序只能是默认的升序，无法指定排序规则。</p>
<h3 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h3><p>hdfs上的文件 ，本地文件会找不到文件，一般只能识别hdfs上的</p>
<p>分桶表是对列值取哈希值的方式，将不同数据放到不同文件中存储。 对于 hive 中每一个表、分区都可以进一步进行分桶。 由列的哈希值除以桶的个数来决定每条数据划分在哪个桶中。</p>
<p>要先开启分桶支持</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> hive.enforce.<span class="attribute">bucketing</span>=<span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>分桶表的創建</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="meta">[</span>CLUSTERED <span class="keyword">BY</span> (col_name, col_name, <span class="params">...</span>) </span><br><span class="line"> <span class="keyword">INTO</span> num_buckets BUCKETS<span class="meta">]</span></span><br></pre></td></tr></table></figure>

<p>数据</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="symbol">name1</span></span><br><span class="line"><span class="number">2</span>,<span class="symbol">name2</span></span><br><span class="line"><span class="number">3</span>,<span class="symbol">name3</span></span><br><span class="line"><span class="number">4</span>,<span class="symbol">name4</span></span><br><span class="line"><span class="number">5</span>,<span class="symbol">name5</span></span><br><span class="line"><span class="number">6</span>,<span class="symbol">name6</span></span><br><span class="line"><span class="number">7</span>,<span class="symbol">name7</span></span><br><span class="line"><span class="number">8</span>,<span class="symbol">name8</span></span><br></pre></td></tr></table></figure>

<p>创建表</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> hive_bucket(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line"><span class="type">name</span> string </span><br><span class="line">)</span><br><span class="line">clustered <span class="keyword">by</span> (id) <span class="keyword">into</span> <span class="number">4</span> buckets</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> delimited fields terminated <span class="keyword">by</span> &quot;,&quot;;</span><br></pre></td></tr></table></figure>

<p>查询桶中数据</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,<span class="type">name</span> <span class="keyword">from</span> hive_bucket <span class="keyword">tablesample</span>(bucket <span class="number">4</span> <span class="keyword">out</span> <span class="keyword">of</span> <span class="number">4</span> <span class="keyword">on</span> <span class="type">name</span>); //bucket后面的数字就是我们要查看的桶的编号 <span class="keyword">out</span> <span class="keyword">of</span> 后面的是总数 ，<span class="keyword">on</span> 后面的是我们分桶的属性</span><br></pre></td></tr></table></figure>

<p>mapreduce:</p>
<p>hash % reducetask个数</p>
<p>文件存储格式</p>
<ul>
<li>行式存储  ：<ul>
<li>里面的列 掺杂很多数据类型</li>
<li>一行内容所有的列都在一个 block里面</li>
<li>行式存储加载所 是把所有的列都查询出来 再过滤出 用户需要的列</li>
<li>如果用户 仅仅查几个字段  &#x3D;》 磁盘io 开销比较大</li>
<li>textfile 文本文件</li>
<li>SequenceFile 文本文件</li>
</ul>
</li>
<li>列式存储 ：<ul>
<li>按照列进行存储</li>
<li>前提： 企业 table 字段 几十个 到几百个</li>
<li>RCFile  &#x3D;》 行 &#x3D;》 列</li>
<li>ORC Files + Parquet</li>
<li>查询几个列</li>
<li>加载表中所有字段</li>
</ul>
</li>
<li>列式存储文件 数据量 比 行式存储的数据量少 【前提 都采用压缩】</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">create</span> table hive_distribute_col(</span><br><span class="line">year <span class="keyword">string</span>,</span><br><span class="line">earning <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line">row <span class="built_in">format</span> delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line">stored <span class="keyword">as</span> orc;<span class="comment"> // 这个就是存储形式</span></span><br></pre></td></tr></table></figure>

<h2 id="hive-中文件存储格式-vs-压缩"><a href="#hive-中文件存储格式-vs-压缩" class="headerlink" title="hive 中文件存储格式 vs 压缩"></a>hive 中文件存储格式 vs 压缩</h2><p>压缩格式 ：</p>
<p>Hive支持的压缩格式有bzip2、gzip、deflate、snappy、lzo等。Hive依赖Hadoop的压缩方法，所以Hadoop版本越高支持的压缩方法越多，可以在$HADOOP_HOME&#x2F;conf&#x2F;core-site.xml中进行配置：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;  </span><br><span class="line">        &lt;name&gt;io<span class="selector-class">.compression</span>.codecs&lt;/name&gt;  </span><br><span class="line">        &lt;value&gt;org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.io</span><span class="selector-class">.compress</span><span class="selector-class">.GzipCodec</span>,org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.io</span><span class="selector-class">.compress</span><span class="selector-class">.DefaultCodec</span>,com<span class="selector-class">.hadoop</span><span class="selector-class">.compression</span><span class="selector-class">.lzo</span><span class="selector-class">.LzoCodec</span>,com<span class="selector-class">.hadoop</span><span class="selector-class">.compression</span><span class="selector-class">.lzo</span><span class="selector-class">.LzopCodec</span>,org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.io</span><span class="selector-class">.compress</span><span class="selector-class">.BZip2Codec</span></span><br><span class="line">        &lt;/value&gt;  </span><br><span class="line">&lt;/property&gt;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>常见的压缩格式 ：</p>
<table>
<thead>
<tr>
<th>压缩格式</th>
<th>算法实现</th>
<th>压缩比</th>
<th>效率</th>
<th>可切分</th>
<th>内置</th>
<th>扩展名</th>
<th>Native</th>
<th>Java</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>bzip2</td>
<td>bzip2</td>
<td>最高</td>
<td>慢</td>
<td>yes</td>
<td>Y</td>
<td>.bz2</td>
<td>yes</td>
<td>yes</td>
<td>压缩率最高，一般是源文件的30%左右 ：<br />压缩或者解压效率最慢</td>
</tr>
<tr>
<td>deflate</td>
<td>DEFLATE</td>
<td>高</td>
<td>慢</td>
<td>no</td>
<td>Y</td>
<td>.deflate</td>
<td>no</td>
<td>yes</td>
<td>标准的压缩格式</td>
</tr>
<tr>
<td>gzip</td>
<td>DEFLATE</td>
<td>高</td>
<td>慢</td>
<td>no</td>
<td>Y</td>
<td>.gz</td>
<td>no</td>
<td>yes</td>
<td>相比deflate增加文件头，尾，<br />压缩率比较高，压缩或者解压的效率比较慢</td>
</tr>
<tr>
<td>zlib</td>
<td>DEFLATE</td>
<td>高</td>
<td>慢</td>
<td>no</td>
<td>Y</td>
<td>.zl</td>
<td>yes</td>
<td>no</td>
<td>相比deflate增加文件头，尾</td>
</tr>
<tr>
<td>lz4</td>
<td>lz4</td>
<td>最低</td>
<td>最快</td>
<td>no</td>
<td>Y</td>
<td>.zl4</td>
<td>yes</td>
<td>no</td>
<td>压缩率比较低，不过压缩和解压效率最快</td>
</tr>
<tr>
<td>lzo</td>
<td>lzo</td>
<td>较低</td>
<td>快</td>
<td>yes</td>
<td>N</td>
<td>.lzo_deflate</td>
<td>yes</td>
<td>no</td>
<td>压缩率比较低，不过压缩和解压效率最快</td>
</tr>
<tr>
<td>lzop</td>
<td>snappy</td>
<td>较低</td>
<td>快</td>
<td>yes</td>
<td>N</td>
<td>.lzo</td>
<td>yes</td>
<td>no</td>
<td>压缩率比较低，不过压缩和解压效率最</td>
</tr>
<tr>
<td>snappy</td>
<td>snappy</td>
<td>较低</td>
<td>快</td>
<td>yes</td>
<td>N</td>
<td>.snappy</td>
<td>yes</td>
<td>no</td>
<td>压缩率比较低，不过压缩和解压效率最</td>
</tr>
</tbody></table>
<p>其中压缩比bzip2 &gt; zlib &gt; gzip &gt; deflate &gt; snappy &gt; lzo &gt; lz4，在不同的测试场景中，会有差异，这仅仅是一个大概的排名情况。bzip2、zlib、gzip、deflate可以保证最小的压缩，但在运算中过于消耗时间。</p>
<p>从压缩性能上来看：lz4 &gt; lzo &gt; snappy &gt; deflate &gt; gzip &gt; bzip2，其中lz4、lzo、snappy压缩和解压缩速度快，压缩比低。</p>
<p>所以一般在生产环境中，经常会采用lz4、lzo、snappy压缩，以保证运算效率。</p>
<h2 id="Native-Libraries"><a href="#Native-Libraries" class="headerlink" title="Native Libraries"></a>Native Libraries</h2><p>Hadoop由Java语言开发，所以压缩算法大多由Java实现；但有些压缩算法并不适合Java进行实现，会提供本地库Native Libraries补充支持。Native Libraries除了自带bzip2, lz4, snappy, zlib压缩方法外，还可以自定义安装需要的功能库（snappy、lzo等）进行扩展。</p>
<p>而且使用本地库Native Libraries提供的压缩方式，性能上会有50%左右的提升。</p>
<p>使用命令可以查看native libraries的加载情况：<br><code>hadoop checknative -a</code></p>
<p>完成对Hive表的压缩，有两种方式：配置MapReduce压缩、开启Hive表压缩功能。因为Hive会将SQL作业转换为MapReduce任务，所以直接对MapReduce进行压缩配置，可以达到压缩目的；当然为了方便起见，Hive中的特定表支持压缩属性，自动完成压缩的功能。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据的简单构架</title>
    <url>/2022/12/05/12-05/</url>
    <content><![CDATA[<h1 id="大数据的三件事"><a href="#大数据的三件事" class="headerlink" title="大数据的三件事"></a>大数据的三件事</h1><p>数据采集  ：</p>
<ul>
<li>采集业务数据 ： sqoop ,datax,实时采集maxwell ,flinkdoc</li>
<li>采集日志数据 ： flume ，logstush</li>
</ul>
<p>数据存储 :</p>
<ul>
<li>hdfs (hadoop中的)</li>
<li>hive</li>
<li>hbase【大数据】</li>
<li>数据分析之后的结果数据 ：<ul>
<li>mysql</li>
<li>clickhouse</li>
<li>drios</li>
</ul>
</li>
</ul>
<p>数据分析：</p>
<ul>
<li>map reduce 但是现在不怎么用了，但是思想最重要</li>
<li>hive ： 主要是离线数仓</li>
<li>hbase</li>
<li>spark</li>
<li>flink</li>
</ul>
<p>数据可视化 ：</p>
<ul>
<li>如果有前端开发人员，可以让他们来帮忙</li>
<li>但是如果没有 要自己做<ul>
<li>superset</li>
<li>dataease</li>
<li>echarts</li>
<li>env</li>
<li>anv</li>
</ul>
</li>
<li>收费 : 简历上最好不要写这个<ul>
<li>quickbi</li>
<li>sugar</li>
</ul>
</li>
</ul>
<p>消息中间键 ：</p>
<ul>
<li>kafka</li>
<li>pular</li>
</ul>
<p>(即席查询 ： 临时查询) : presto是最好用的 clickhouse 是有bug的 对内存有要求</p>
<ul>
<li>sparksql , presto , druid , clickhouse ,kylin(cube)</li>
</ul>
<p>数据种类 ：</p>
<ul>
<li>业务数据【mysql ， es】app</li>
<li>日志数据 【log】linux 磁盘上 ，工作中处理的一个重点<ul>
<li>展现日志，点击日志，跳转日志</li>
</ul>
</li>
<li>其他数据</li>
</ul>
<p>架构图  ：</p>
<ul>
<li>业务数据 ： mysql -》sqoop ， datax -》 hds&#x2F;hive</li>
<li>日志数据 ： log文件 -》 flume -》 hdfs&#x2F;hive</li>
<li>hive : 构建离线数仓<ul>
<li>数据分层</li>
<li>维度建模</li>
<li>指标输出</li>
</ul>
</li>
<li>数据可实话<ul>
<li>hive -》 sqoop -》 mysql &#x2F; clickhouse -》数据可视化</li>
</ul>
</li>
</ul>
<p>大数据的基础平台架构</p>
<p>提升 ：大数据的数据平台</p>
<p>大数据基础是相当于 从  0-1 搭建 -》 可以学到以上的所有框架</p>
<p>大数据的数据平台 是基于基础平台再提升了升级 -》 这个学不到什么东西</p>
<p>大数据升级平台</p>
<p>大数据数据开发</p>
<ul>
<li>离线数仓</li>
<li>实时数仓</li>
<li>临时查询</li>
</ul>
<p>大数据的etl工程师</p>
<ul>
<li>数据清洗</li>
<li>数据抽取</li>
<li>数据转换</li>
</ul>
<p>大数据运维工程师</p>
<ul>
<li>上述的框架是它负责安装以及部署的</li>
<li>以及后续的维护</li>
<li>云原生 ， docker ，k8s</li>
</ul>
<p>大数据算法组（数据分析师sql + 数学知识统计 。数据科学家）</p>
<ul>
<li>用户画像</li>
<li>数据挖掘<ul>
<li>python</li>
<li>spark , flink 自带的组件 机器学习相关的组件 ： 速度要比py快</li>
</ul>
</li>
</ul>
<p>新颖的</p>
<ul>
<li>数据湖 -》主要研究方向</li>
<li>云原生 -》 docker ，k8s<ul>
<li>job -》 申请资源 是再yarn上的 ，但是当yarn 做资源隔离的时候万一有三台机器 ，到时候如果所有container 都集中在一台机器上，则会造成机器得负载太大</li>
<li>解决方法 ：<ul>
<li>yarn 的底层编码重写</li>
<li>联合云原生</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="sqoop"><a href="#sqoop" class="headerlink" title="sqoop"></a>sqoop</h1><p>简介 ： 可以把数据和hadoop生态圈进行数据库同步，数据传输</p>
<p>sqoop</p>
<ul>
<li>我们可以通过sqoop这个组件 ，把mysql 里的表 同步到 hdfs，hive ，hbase</li>
<li>反之也可以</li>
<li>原理<ul>
<li>sqoop 是只用map阶段 ，无reduce 阶段 （通过mapreduce 实现的）</li>
</ul>
</li>
<li>指定的参数<ul>
<li>url</li>
<li>username</li>
<li>password</li>
<li>驱动</li>
</ul>
</li>
<li>sqoop版本<ul>
<li>sqoop 1 ：1.4.7</li>
<li>sqoop 2 ：1.99.7</li>
<li>注意这两个是没有任何联系的</li>
<li>建议用1</li>
</ul>
</li>
</ul>
<h1 id="部署sqoop"><a href="#部署sqoop" class="headerlink" title="部署sqoop"></a>部署sqoop</h1><p>这里我使用的是1.4.7的sqoop包</p>
<p>首先我们上传到linux上</p>
<p>然后解压</p>
<p>解压之后我们进入到conf目录下，这个里面存的是我们的 配置文件</p>
<p>我们把sqoop-env-template.sh 改名字成 sqoop-env.sh</p>
<p>然后vim 它进行编辑</p>
<p>把hadoop home 的路径放上 ，以及 hive的路经</p>
<p>然后保存退出</p>
<p>我们接下来在全局变量中注册一下sqoop的bin目录</p>
<p>然后把mysql的connect包给到lib文件夹下</p>
<p>然后执行</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">1</span>.查看可用的数据库 【<span class="string">mysql</span>】</span><br><span class="line"><span class="string">sqoop</span> <span class="built_in">list-databases</span> \</span><br><span class="line"><span class="built_in">--connect</span> <span class="string">jdbc:mysql:</span>//<span class="string">bigdata2:3306 </span> \</span><br><span class="line"><span class="built_in">--username</span> <span class="string">root</span>  \</span><br><span class="line"><span class="built_in">--password</span> <span class="string">liuzihan010616</span></span><br></pre></td></tr></table></figure>

<p>1.4.7会报错 ，因为 缺少java.commons.lang包</p>
<p>我们把这个包上传到lib下就好了</p>
<h1 id="导入和导出"><a href="#导入和导出" class="headerlink" title="导入和导出"></a>导入和导出</h1><p>sqoop的导入和导出</p>
<p>从mysql里导出数据的时候，会默认导入到&#x2F;user&#x2F;hadoop&#x2F;*</p>
<p>hdfs 文件存储 默认是用 ，进行分割每个字段的</p>
<p>hdfs上有几个文件就是有几个map task 和reduce task</p>
<p>其默认的数量是4</p>
<p>导出</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">sqoop <span class="keyword">import</span> \</span><br><span class="line">--connect jdbc:mysql:<span class="comment">//bigdata2:3306/hive  \</span></span><br><span class="line"><span class="comment">--username root  \</span></span><br><span class="line"><span class="comment">--password liuzihan010616 \</span></span><br><span class="line"><span class="comment">--table TBLS</span></span><br></pre></td></tr></table></figure>

<p>设置导出的列的参数</p>
<p><code>--columns</code></p>
<p>设置字段筛选的参数</p>
<p><code>--where</code></p>
<p>设置再yarn上的作业名称</p>
<p><code>--mapreduce-job-name</code></p>
<p>设置 map 和 reduce task 的个数</p>
<p><code>-m,--num-mappers &lt;n&gt; </code></p>
<p>用-m 或者后面的都行</p>
<p>设置hdfs上的文件夹</p>
<p><code>--target-dir</code></p>
<p>设置hdfs上存储的分隔符</p>
<p><code>--fields-terminated-by </code></p>
<p>删除目标文件夹</p>
<p><code>--delete-target-dir </code></p>
<p>总体应用</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">sqoop</span>  <span class="string">import</span> \</span><br><span class="line"><span class="built_in">--connect</span> <span class="string">jdbc:mysql:</span>//<span class="string">bigdata2:3306/</span><span class="string">hive</span>  \</span><br><span class="line"><span class="built_in">--username</span> <span class="string">root</span>  \</span><br><span class="line"><span class="built_in">--password</span> <span class="string">liuzihan010616</span> \</span><br><span class="line"><span class="built_in">--delete-target-dir</span> \</span><br><span class="line"><span class="built_in">--fields-terminated-by</span> <span class="string">&#x27;\&#x27;</span> \</span><br><span class="line"><span class="built_in">--target-dir</span> /<span class="string">ghk</span> \</span><br><span class="line">-<span class="string">m</span> <span class="string">1</span> \</span><br><span class="line"><span class="built_in">--mapreduce-job-name</span> <span class="string">&#x27;mysql 的数据try&#x27;</span> \</span><br><span class="line"><span class="built_in">--where</span> <span class="string">&#x27;TBL_ID &gt;= 10&#x27;</span> \</span><br><span class="line"><span class="built_in">--columns</span> <span class="string">&#x27;TBL_ID , OWNER&#x27;</span> \</span><br><span class="line"><span class="built_in">--table</span> <span class="string">TBLS</span></span><br></pre></td></tr></table></figure>

<p>有主键的表可以直接按照上述同步</p>
<p>但是没主键的，要转化</p>
<p>如果是没有主键的表，有两种转换方法</p>
<p>首先是可以通过  ： -m 设置为1 或者 –split-by 列的名字</p>
<p>如下 ：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqoop  import \</span><br><span class="line"><span class="params">--connect</span> jdbc<span class="function">:mysql</span>:<span class="string">//bigdata2</span><span class="function">:3306</span>/<span class="keyword">try</span>  \</span><br><span class="line"><span class="params">--username</span> root  \</span><br><span class="line"><span class="params">--password</span> liuzihan010616 \</span><br><span class="line"><span class="params">--delete-target-dir</span> \</span><br><span class="line"><span class="params">--fields-terminated-by</span> &#x27;\&#x27; \</span><br><span class="line"><span class="params">--target-dir</span> <span class="string">/ghk</span> \</span><br><span class="line"><span class="params">--split-by</span> empno \</span><br><span class="line"><span class="params">--mapreduce-job-name</span> &#x27;mysql 的数据<span class="keyword">try</span>&#x27; \</span><br><span class="line"><span class="params">--table</span> emp</span><br></pre></td></tr></table></figure>

<p>空值处理 ：</p>
<p><code>--null-non-string 0</code></p>
<p>上面的那个是不是string的处理</p>
<p><code>--null-string &#39;&#39;</code></p>
<h2 id="嵌套sql"><a href="#嵌套sql" class="headerlink" title="嵌套sql"></a>嵌套sql</h2><p>用 –query</p>
<p>但是有注意的点</p>
<p>有–query 的时候，不能放–table</p>
<p>且–query 后面只能接单引号</p>
<p>如下</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqoop  import \</span><br><span class="line"><span class="params">--connect</span> jdbc<span class="function">:mysql</span>:<span class="string">//bigdata2</span><span class="function">:3306</span>/<span class="keyword">try</span>  \</span><br><span class="line"><span class="params">--username</span> root  \</span><br><span class="line"><span class="params">--password</span> liuzihan010616 \</span><br><span class="line"><span class="params">--delete-target-dir</span> \</span><br><span class="line"><span class="params">--fields-terminated-by</span> &#x27;\&#x27; \</span><br><span class="line"><span class="params">--target-dir</span> <span class="string">/ghk</span> \</span><br><span class="line"><span class="params">--split-by</span> empno \</span><br><span class="line"><span class="params">--mapreduce-job-name</span> &#x27;mysql 的数据<span class="keyword">try</span>&#x27; \</span><br><span class="line"><span class="params">--query</span> &#x27;select * from emp where $CONDITIONS&#x27;</span><br></pre></td></tr></table></figure>

<h1 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h1><p>如上述</p>
<p>我们发现太繁琐了</p>
<p>我们可以进行封装到一起</p>
<p>然后直接调用文件就行</p>
<p><code>sqoop --options-file 文件路径</code></p>
<p>文件内容如下 ：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">import </span><br><span class="line"><span class="params">--connect</span> </span><br><span class="line">jdbc<span class="function">:mysql</span>:<span class="string">//bigdata2</span><span class="function">:3306</span>/<span class="keyword">try</span>  </span><br><span class="line"><span class="params">--username</span> </span><br><span class="line">root  </span><br><span class="line"><span class="params">--password</span> </span><br><span class="line">liuzihan010616 </span><br><span class="line"><span class="params">--delete-target-dir</span> </span><br><span class="line"><span class="params">--fields-terminated-by</span> </span><br><span class="line">&#x27;\&#x27; </span><br><span class="line"><span class="params">--target-dir</span></span><br><span class="line"><span class="string">/ghk</span> </span><br><span class="line"><span class="params">--split-by</span> </span><br><span class="line">empno </span><br><span class="line"><span class="params">--mapreduce-job-name</span> </span><br><span class="line">&#x27;mysql 的数据<span class="keyword">try</span>&#x27; </span><br><span class="line"><span class="params">--query</span> </span><br><span class="line">&#x27;select * from emp where $CONDITIONS&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="sqoop-job"><a href="#sqoop-job" class="headerlink" title="sqoop job"></a>sqoop job</h3><ul>
<li>create 创建job</li>
<li>list&#x2F;show 查看job list 是查看列表 show 是查看详情</li>
<li>exec 执行job</li>
</ul>
<p>代码如下 ：</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">scoop job <span class="params">--create</span> mysqltry -- \</span><br><span class="line">import \</span><br><span class="line"><span class="params">--connect</span> </span><br><span class="line">jdbc<span class="function">:mysql</span>:<span class="string">//bigdata2</span><span class="function">:3306</span>/<span class="keyword">try</span>  \</span><br><span class="line"><span class="params">--username</span> root  \</span><br><span class="line"><span class="params">--password</span> liuzihan010616 \</span><br><span class="line"><span class="params">--delete-target-dir</span> \</span><br><span class="line"><span class="params">--fields-terminated-by</span> &#x27;\&#x27; \</span><br><span class="line"><span class="params">--target-dir</span> <span class="string">/ghk</span> \</span><br><span class="line"><span class="params">--split-by</span> empno \</span><br><span class="line"><span class="params">--mapreduce-job-name</span> &#x27;mysql 的数据<span class="keyword">try</span>&#x27; \</span><br><span class="line"><span class="params">--query</span> &#x27;select * from emp where $CONDITIONS&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><p>也可以通过shell脚本调用 sqoop</p>
<p>如下 ：普通表的</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt <span class="number">6</span> ];then</span><br><span class="line"> echo <span class="string">&quot;$0 use sync mysql 2 hive&quot;</span></span><br><span class="line"> echo <span class="string">&quot;USAGE:$0 mysqldb sql hivedb hivetable idautocreatetable fengefu&quot;</span></span><br><span class="line"> echo <span class="string">&quot;Example mysql的数据库 sql语句 hive的数据库  hive的表 分隔符 是不是自动创建表&quot;</span></span><br><span class="line"> <span class="keyword">exit</span> <span class="number">1</span>;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql parm</span></span><br><span class="line">mysqldb=<span class="variable">$1</span></span><br><span class="line">sql=<span class="string">&quot;$2&quot;</span></span><br><span class="line"><span class="comment">#hive parms </span></span><br><span class="line">hivedb=<span class="variable">$3</span></span><br><span class="line">hivetable=<span class="variable">$4</span></span><br><span class="line">flag =<span class="variable">$6</span></span><br><span class="line"></span><br><span class="line">try <span class="string">&#x27;select * from emp&#x27;</span> bigdata_hive3 emp6 , <span class="number">1</span></span><br><span class="line"></span><br><span class="line">MySQL_URL=<span class="string">&quot;jdbc:mysql://bigdata2:3306/$&#123;mysqldb&#125;&quot;</span> </span><br><span class="line">MySQL_USER=root</span><br><span class="line">MySQL_PASSWD=liuzihan010616</span><br><span class="line">FIELDS_TERMINATED=<span class="variable">$5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;flag&#125;</span> -eq <span class="number">1</span> ];then</span><br><span class="line">sqoop import \</span><br><span class="line">--connect <span class="variable">$&#123;MySQL_URL&#125;</span>  \</span><br><span class="line">--username <span class="variable">$&#123;MySQL_USER&#125;</span>  \</span><br><span class="line">--password <span class="variable">$&#123;MySQL_PASSWD&#125;</span> \</span><br><span class="line">--mapreduce-job-name <span class="string">&#x27;mysql2hive&#x27;</span> \</span><br><span class="line">--<span class="keyword">delete</span>-target-dir \</span><br><span class="line">--target-dir <span class="regexp">/sqoop/</span>emp_tmp \</span><br><span class="line">--fields-terminated-by <span class="variable">$&#123;FIELDS_TERMINATED&#125;</span> \</span><br><span class="line">-m <span class="number">1</span> \</span><br><span class="line">--query <span class="string">&quot;$&#123;sql&#125; and \$CONDITIONS &quot;</span> \</span><br><span class="line">--hive-import \</span><br><span class="line">--create-hive-table \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--hive-database <span class="variable">$&#123;hivedb&#125;</span> \</span><br><span class="line">--hive-table <span class="variable">$&#123;hivetable&#125;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sqoop import \</span><br><span class="line">--connect <span class="variable">$&#123;MySQL_URL&#125;</span>  \</span><br><span class="line">--username <span class="variable">$&#123;MySQL_USER&#125;</span>  \</span><br><span class="line">--password <span class="variable">$&#123;MySQL_PASSWD&#125;</span> \</span><br><span class="line">--mapreduce-job-name <span class="string">&#x27;mysql2hive&#x27;</span> \</span><br><span class="line">--<span class="keyword">delete</span>-target-dir \</span><br><span class="line">--target-dir <span class="regexp">/sqoop/</span>emp_tmp \</span><br><span class="line">--fields-terminated-by <span class="variable">$&#123;FIELDS_TERMINATED&#125;</span> \</span><br><span class="line">-m <span class="number">1</span> \</span><br><span class="line">--query <span class="string">&quot;$&#123;sql&#125; and \$CONDITIONS &quot;</span> \</span><br><span class="line">--hive-import \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--hive-database <span class="variable">$&#123;hivedb&#125;</span> \</span><br><span class="line">--hive-table <span class="variable">$&#123;hivetable&#125;</span></span><br><span class="line"><span class="keyword">exit</span> <span class="number">200</span>;</span><br><span class="line">fi</span><br><span class="line">---------------------------------分区表--------------------------------------------</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt <span class="number">8</span> ];then</span><br><span class="line"> echo <span class="string">&quot;$0 use sync mysql 2 hive&quot;</span></span><br><span class="line"> echo <span class="string">&quot;USAGE:$0 mysqldb sql hivedb hivetable idautocreatetable fengefu hivepartition hivepartitionvalue&quot;</span></span><br><span class="line"> echo <span class="string">&quot;Example mysql的数据库 sql语句 hive的数据库  hive的table 分隔符  hive的分区属性 分区属性的值 是不是自动创建表&quot;</span></span><br><span class="line"> <span class="keyword">exit</span> <span class="number">1</span>;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql parm</span></span><br><span class="line">mysqldb=<span class="variable">$1</span></span><br><span class="line">sql=<span class="string">&quot;$2&quot;</span></span><br><span class="line"><span class="comment">#hive parms </span></span><br><span class="line">hivedb=<span class="variable">$3</span></span><br><span class="line">hivetable=<span class="variable">$4</span></span><br><span class="line">hivepartition=<span class="variable">$6</span></span><br><span class="line">hivepartitionvalue=<span class="variable">$7</span></span><br><span class="line">flag=<span class="variable">$8</span></span><br><span class="line">MySQL_URL=<span class="string">&quot;jdbc:mysql://bigdata2:3306/$&#123;mysqldb&#125;&quot;</span> </span><br><span class="line">MySQL_USER=root</span><br><span class="line">MySQL_PASSWD=liuzihan010616</span><br><span class="line">FIELDS_TERMINATED=<span class="variable">$5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;flag&#125;</span> -eq <span class="number">1</span> ];then</span><br><span class="line">sqoop import \</span><br><span class="line">--connect <span class="variable">$&#123;MySQL_URL&#125;</span>  \</span><br><span class="line">--username <span class="variable">$&#123;MySQL_USER&#125;</span>  \</span><br><span class="line">--password <span class="variable">$&#123;MySQL_PASSWD&#125;</span> \</span><br><span class="line">--mapreduce-job-name <span class="string">&#x27;mysql2hive&#x27;</span> \</span><br><span class="line">--<span class="keyword">delete</span>-target-dir \</span><br><span class="line">--target-dir <span class="regexp">/sqoop/</span>emp_tmp \</span><br><span class="line">--fields-terminated-by <span class="variable">$&#123;FIELDS_TERMINATED&#125;</span> \</span><br><span class="line">-m <span class="number">1</span> \</span><br><span class="line">--query <span class="string">&quot;$&#123;sql&#125; and \$CONDITIONS &quot;</span> \</span><br><span class="line">--hive-import \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--create-hive-table \ </span><br><span class="line">--hive-database <span class="variable">$&#123;hivedb&#125;</span> \</span><br><span class="line">--hive-table <span class="variable">$&#123;hivetable&#125;</span> \</span><br><span class="line">--hive-partition-key <span class="variable">$&#123;hivepartition&#125;</span> \</span><br><span class="line">--hive-partition-value <span class="variable">$&#123;hivepartitionvalue&#125;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sqoop import \</span><br><span class="line">--connect <span class="variable">$&#123;MySQL_URL&#125;</span>  \</span><br><span class="line">--username <span class="variable">$&#123;MySQL_USER&#125;</span>  \</span><br><span class="line">--password <span class="variable">$&#123;MySQL_PASSWD&#125;</span> \</span><br><span class="line">--mapreduce-job-name <span class="string">&#x27;mysql2hive&#x27;</span> \</span><br><span class="line">--<span class="keyword">delete</span>-target-dir \</span><br><span class="line">--target-dir <span class="regexp">/sqoop/</span>emp_tmp \</span><br><span class="line">--fields-terminated-by <span class="variable">$&#123;FIELDS_TERMINATED&#125;</span> \</span><br><span class="line">-m <span class="number">1</span> \</span><br><span class="line">--query <span class="string">&quot;$&#123;sql&#125; and \$CONDITIONS &quot;</span> \</span><br><span class="line">--hive-import \</span><br><span class="line">--hive-overwrite \</span><br><span class="line">--hive-database <span class="variable">$&#123;hivedb&#125;</span> \</span><br><span class="line">--hive-table <span class="variable">$&#123;hivetable&#125;</span> \</span><br><span class="line">--hive-partition-key <span class="variable">$&#123;hivepartition&#125;</span> \</span><br><span class="line">--hive-partition-value <span class="variable">$&#123;hivepartitionvalue&#125;</span></span><br><span class="line">fi</span><br><span class="line">-----------------------------------------------------hivetomysql的----------------------------------------------------</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt <span class="number">4</span> ];then</span><br><span class="line">echo <span class="string">&quot;error 变量小于4个&quot;</span></span><br><span class="line">echo <span class="string">&quot;example try , /user/hive/warehouse/bigdata_hive3.db/emp_partition/deptno=20 emp1&quot;</span></span><br><span class="line">echo <span class="string">&quot;mysql数据库 分隔符 hdfs上的路径 mysql里的表名&quot;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">mysqldb=<span class="variable">$1</span></span><br><span class="line">fengefu=<span class="variable">$2</span></span><br><span class="line">hdfslujing=<span class="variable">$3</span></span><br><span class="line">mysqltable=<span class="variable">$4</span></span><br><span class="line"></span><br><span class="line">hive -e <span class="string">&quot;use bigdata_hive3 ; create table &quot;</span></span><br><span class="line"></span><br><span class="line">sqoop export \</span><br><span class="line">--connect jdbc:mysql:<span class="regexp">//</span>bigdata2:<span class="number">3306</span>/<span class="variable">$&#123;mysqldb&#125;</span>  \</span><br><span class="line">--username root  \</span><br><span class="line">--password liuzihan010616 \</span><br><span class="line">--fields-terminated-by <span class="variable">$&#123;fengefu&#125;</span> \</span><br><span class="line">--export-dir <span class="variable">$&#123;hdfslujing&#125;</span> \</span><br><span class="line">--null-non-string <span class="number">0</span></span><br><span class="line">--null-string <span class="string">&#x27;&#x27;</span></span><br><span class="line">--table <span class="variable">$&#123;mysqltable&#125;</span> </span><br><span class="line">----------------------------------------------hivetomysql的分区表如何同步-----------------------</span><br><span class="line">先把hive的分区表用create table zz as elect * from xxx(分区表的名字) </span><br><span class="line">然后把zz当成普通表传过去 ，但是在sqoop1.<span class="number">4.7</span> 目前这个功能出现了些问题</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h1 id="从mysql-到-hive等工具中"><a href="#从mysql-到-hive等工具中" class="headerlink" title="从mysql 到 hive等工具中"></a>从mysql 到 hive等工具中</h1><p>大部分都和上述一样的</p>
<p>只不过要换个链接以及表名字</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line"><span class="params">--connect</span> jdbc<span class="function">:mysql</span>:<span class="string">//bigdata2</span><span class="function">:3306</span>/<span class="keyword">try</span>  \</span><br><span class="line"><span class="params">--username</span> root  \</span><br><span class="line"><span class="params">--password</span> liuzihan010616 \</span><br><span class="line"><span class="params">--delete-target-dir</span> \</span><br><span class="line"><span class="params">--fields-terminated-by</span> &#x27;\&#x27; \</span><br><span class="line"><span class="params">--target-dir</span> <span class="string">/ghk</span> \</span><br><span class="line"><span class="params">--split-by</span> empno \</span><br><span class="line"><span class="params">--mapreduce-job-name</span> &#x27;mysql 的数据<span class="keyword">try</span>&#x27; \</span><br><span class="line"><span class="params">--query</span> &#x27;select * from emp where $CONDITIONS&#x27; \</span><br><span class="line"><span class="params">--hive-import</span> \</span><br><span class="line"><span class="params">--hive-overwrite</span> \</span><br><span class="line"><span class="params">--create-hive-table</span> \ </span><br><span class="line"><span class="params">--hive-database</span> bigdata_hive3 \</span><br><span class="line"><span class="params">--hive-table</span> emp_hive1</span><br></pre></td></tr></table></figure>

<p>在1.4.7的版本中其要求必须 加上 <code>--target dir 属性</code></p>
<p>且要从hive的lib文件夹下，把所有jar包给sqoop的lib下</p>
<p>上述 create-hive-table 是自动创建表</p>
<p>但是因为mysql里的属性只有几个 ，没hive特有的decmical等，可能会造成丢失数据</p>
<p>所以提议先在hive中创建表，然后再导入</p>
<h2 id="创建分区表"><a href="#创建分区表" class="headerlink" title="创建分区表"></a>创建分区表</h2><p>分区表如上 ；只不过要用</p>
<p><code>--hive-partition-key xxxx（列名）</code></p>
<p><code>--hive-partition-value xxx(分区字段的数值)</code></p>
<p>或者可以直接用–query 用代码的方式进行分区</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">sqoop import \</span><br><span class="line"><span class="params">--connect</span> jdbc<span class="function">:mysql</span>:<span class="string">//bigdata2</span><span class="function">:3306</span>/<span class="keyword">try</span>  \</span><br><span class="line"><span class="params">--username</span> root  \</span><br><span class="line"><span class="params">--password</span> liuzihan010616 \</span><br><span class="line"><span class="params">--delete-target-dir</span> \</span><br><span class="line"><span class="params">--fields-terminated-by</span> &#x27;\&#x27; \</span><br><span class="line"><span class="params">--target-dir</span> <span class="string">/ghk</span> \</span><br><span class="line"><span class="params">--split-by</span> empno \</span><br><span class="line"><span class="params">--mapreduce-job-name</span> &#x27;mysql 的数据<span class="keyword">try</span>&#x27; \</span><br><span class="line"><span class="params">--query</span> &#x27;select empno,ename,job,mgr,hiredate,sal,comm from emp where deptno=20 and $CONDITIONS &#x27; \</span><br><span class="line"><span class="params">--hive-import</span> \</span><br><span class="line"><span class="params">--hive-overwrite</span> \</span><br><span class="line"><span class="params">--create-hive-table</span> \</span><br><span class="line"><span class="params">--hive-database</span> bigdata_hive3 \</span><br><span class="line"><span class="params">--hive-table</span> emp_partition \</span><br><span class="line"><span class="params">--hive-partition-key</span> deptno \</span><br><span class="line"><span class="params">--hive-partition-value</span> 20</span><br></pre></td></tr></table></figure>

<h2 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h2><p>不管是hdfs 或者是hive 都是基于路径导出</p>
<p>通过export导出</p>
<p>代码 ：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">sqoop <span class="keyword">export</span> \</span><br><span class="line">--connect jdbc:mysql:<span class="comment">//bigdata2:3306/try  \</span></span><br><span class="line"><span class="comment">--username root  \</span></span><br><span class="line"><span class="comment">--password liuzihan010616 \</span></span><br><span class="line"><span class="comment">--table xxxX \</span></span><br><span class="line"><span class="comment">--fields-terminated-by &#x27;分隔符&#x27; \</span></span><br><span class="line"><span class="comment">--export-dir hdfs上的数据的路径 \</span></span><br></pre></td></tr></table></figure>

<p>这个是hdfs导入到mysql</p>
<p>sqoop导入hive到mysql的时候空值要先进行处理，</p>
<h1 id="开启历史日志"><a href="#开启历史日志" class="headerlink" title="开启历史日志"></a>开启历史日志</h1><p>开启开关 ：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上述是日志收集的开关</p>
<p>下面是日志在hdfs上存储的lujing</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://bigdata3:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面是设置日志收集的时间</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>259200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来我们要配置mapred -site.xml</p>
<p>如下 ：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata3:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata3:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后通过命令行的方式执行命令</p>
<p><code>yarn timelineserver   [bigdata4]</code></p>
<p><code>mapred historyserver  [bigdata3] </code></p>
<p>提示 ： 我的namenode在bigdata3上 ，而resourcemanager 在 bigdata4上</p>
<p>Hive建表时，默认使用的分隔符时候一个特殊的字符，查看表决结构时候是一个’\001’</p>
<p>这不是真正的’\001’，其实是使用八进制编码\001表示</p>
<h2 id="hive-table-gt-mysql-多次导入-数据结果不同"><a href="#hive-table-gt-mysql-多次导入-数据结果不同" class="headerlink" title="hive table -&gt; mysql 多次导入 数据结果不同"></a>hive table -&gt; mysql 多次导入 数据结果不同</h2><p>幂等性 ： 多次操作 ，数据结果是不变的</p>
<p>mysql - &gt; hive -&gt; hive-overwrite</p>
<p>hive -&gt; mysql 幂等性 如何解决</p>
<p>方法 ：</p>
<p>可以通过 <code>mysql -u root -p xxx -e sql语句</code></p>
<p>或者 <code>mysql -uroot -pliuzihan010616 &lt; ./try.sql 这个是执行sql文件</code></p>
<p>上述两个语句是可以在MySQL外部直接进行执行的，不用进入到mysql里</p>
<p>数据库唯一主键</p>
<p>缺点：无法使用change buffer，InnoDB为了进行唯一性检查，必须有一次磁盘IO读页</p>
<p>业务状态校验</p>
<p>业务上根据业务ID的唯一性和业务处理的结果去做判断，但是这部分判断的逻辑需要考虑原子性。否则会因为并发问题导致幂等失效。解决途径（一）加锁，根据当前的服务环境选择单机或分布式锁。（二）采用现成方案Tomato，通过滑动窗口或者固定窗口拦截控制时间内的请求</p>
<p>数据库乐观锁实现幂等性</p>
<p>缺点：操作业务前，需要先查询出当前的version版本。会增加操作</p>
<p>防重 Token 令牌实现幂等性</p>
<p>缺点：</p>
<p>产生过多额外请求</p>
<p>先删除token，如果业务处理出现异常但token已经删除掉了，再来请求会被认定为重复请求</p>
<p>后删除token，如果删除redis中的token失败了，再来请求不会拦截，发生了重复请求</p>
<p>下游传递唯一序列号实现幂等性</p>
<p>缺点：无法控制下游唯一序列号的生成规则，如果序列号由时间戳生成，那么无法拦截类似重复点击这种情况下的重复请求</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>sqoop</tag>
      </tags>
  </entry>
  <entry>
    <title>数据可视化</title>
    <url>/2022/12/07/12-07/</url>
    <content><![CDATA[<h1 id="数据可视化的数据库选择"><a href="#数据可视化的数据库选择" class="headerlink" title="数据可视化的数据库选择"></a>数据可视化的数据库选择</h1><p>一般选择响应数据库比较快的一般是 秒级，或者毫秒级 ： 不要选择hive</p>
<p>因为hive太慢</p>
<p>我们一般都把数据最后导入到mysql里</p>
<p>作业：</p>
<p>自己做一个dashboard</p>
<h1 id="xxl"><a href="#xxl" class="headerlink" title="xxl"></a>xxl</h1><p>定时任务调度</p>
<p>就是按照每天都要做的任务</p>
<ul>
<li>crontab 进行 用的比较少 而因为不方便</li>
<li>定时任务的调度的框架<ul>
<li>ozio , azkaban,airflow,xxl,dolphinscheduler</li>
<li>现在ozio 和 azkaban 因为操作比较反人类，所以不太推荐</li>
<li>airflow ： 通过python进行任务调度的</li>
<li>公司首选 dolphinscheduler ，其次 xxl</li>
</ul>
</li>
<li>针对 xxl 或者 dolphinscheduler 可以串联的方式进行执行调度，就是a任务完成，直接执行b任务等等</li>
<li>但是crontab它要设置时间间隔，不可以串联的方式进行执行</li>
<li>多任务之间的依赖关系 ：<ul>
<li>DAG 有向无环图</li>
</ul>
</li>
<li>xxl 官网 ： 国人开发的 <code>https://github.com/xuxueli/xxl-job</code><ul>
<li>架构：主从架构，分布式架构</li>
<li>老大：调度中心</li>
<li>小弟：调度器</li>
</ul>
</li>
<li>其他的都是apache的</li>
</ul>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>下载源码 ；</p>
<p>导入idea 进行编译</p>
<p>初始化“调度数据库”xxl源数据库 -》 mysql中</p>
<p>首先在mysql中执行语句</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># XXL-JOB v2.4.0-SNAPSHOT</span><br><span class="line"># Copyright (c) 2015-present, xuxueli.</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="symbol">`xxl_job`</span> default character <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_unicode_ci;</span><br><span class="line">use `xxl_job`;</span><br><span class="line"></span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_info`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`job_group`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器主键ID&#x27;</span>,</span><br><span class="line">  <span class="symbol">`job_desc`</span> varchar(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`add_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`update_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`author`</span> varchar(<span class="number">64</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;作者&#x27;</span>,</span><br><span class="line">  <span class="symbol">`alarm_email`</span> varchar(<span class="number">255</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;报警邮件&#x27;</span>,</span><br><span class="line">  <span class="symbol">`schedule_type`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;NONE&#x27;</span> COMMENT <span class="string">&#x27;调度类型&#x27;</span>,</span><br><span class="line">  <span class="symbol">`schedule_conf`</span> varchar(<span class="number">128</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;调度配置，值含义取决于调度类型&#x27;</span>,</span><br><span class="line">  <span class="symbol">`misfire_strategy`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;DO_NOTHING&#x27;</span> COMMENT <span class="string">&#x27;调度过期策略&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_route_strategy`</span> varchar(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器路由策略&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_handler`</span> varchar(<span class="number">255</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器任务handler&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_param`</span> varchar(<span class="number">512</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器任务参数&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_block_strategy`</span> varchar(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;阻塞处理策略&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_timeout`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;任务执行超时时间，单位秒&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_fail_retry_count`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;失败重试次数&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_type`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;GLUE类型&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_source`</span> mediumtext COMMENT <span class="string">&#x27;GLUE源代码&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_remark`</span> varchar(<span class="number">128</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;GLUE备注&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_updatetime`</span> datetime DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;GLUE更新时间&#x27;</span>,</span><br><span class="line">  <span class="symbol">`child_jobid`</span> varchar(<span class="number">255</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;子任务ID，多个逗号分隔&#x27;</span>,</span><br><span class="line">  <span class="symbol">`trigger_status`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;调度状态：0-停止，1-运行&#x27;</span>,</span><br><span class="line">  <span class="symbol">`trigger_last_time`</span> bigint(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;上次调度时间&#x27;</span>,</span><br><span class="line">  <span class="symbol">`trigger_next_time`</span> bigint(<span class="number">13</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;下次调度时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_log`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> bigint(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`job_group`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器主键ID&#x27;</span>,</span><br><span class="line">  <span class="symbol">`job_id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;任务，主键ID&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_address`</span> varchar(<span class="number">255</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器地址，本次执行的地址&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_handler`</span> varchar(<span class="number">255</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器任务handler&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_param`</span> varchar(<span class="number">512</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器任务参数&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_sharding_param`</span> varchar(<span class="number">20</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器任务分片参数，格式如 1/2&#x27;</span>,</span><br><span class="line">  <span class="symbol">`executor_fail_retry_count`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;失败重试次数&#x27;</span>,</span><br><span class="line">  <span class="symbol">`trigger_time`</span> datetime DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;调度-时间&#x27;</span>,</span><br><span class="line">  <span class="symbol">`trigger_code`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;调度-结果&#x27;</span>,</span><br><span class="line">  <span class="symbol">`trigger_msg`</span> text COMMENT <span class="string">&#x27;调度-日志&#x27;</span>,</span><br><span class="line">  <span class="symbol">`handle_time`</span> datetime DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行-时间&#x27;</span>,</span><br><span class="line">  <span class="symbol">`handle_code`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行-状态&#x27;</span>,</span><br><span class="line">  <span class="symbol">`handle_msg`</span> text COMMENT <span class="string">&#x27;执行-日志&#x27;</span>,</span><br><span class="line">  <span class="symbol">`alarm_status`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;告警状态：0-默认、1-无需告警、2-告警成功、3-告警失败&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="symbol">`I_trigger_time`</span> (<span class="symbol">`trigger_time`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="symbol">`I_handle_code`</span> (<span class="symbol">`handle_code`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_log_report`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`trigger_day`</span> datetime DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;调度-时间&#x27;</span>,</span><br><span class="line">  <span class="symbol">`running_count`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;运行中-日志数量&#x27;</span>,</span><br><span class="line">  <span class="symbol">`suc_count`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;执行成功-日志数量&#x27;</span>,</span><br><span class="line">  <span class="symbol">`fail_count`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;执行失败-日志数量&#x27;</span>,</span><br><span class="line">  <span class="symbol">`update_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="symbol">`i_trigger_day`</span> (<span class="symbol">`trigger_day`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_logglue`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`job_id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;任务，主键ID&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_type`</span> varchar(<span class="number">50</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;GLUE类型&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_source`</span> mediumtext COMMENT <span class="string">&#x27;GLUE源代码&#x27;</span>,</span><br><span class="line">  <span class="symbol">`glue_remark`</span> varchar(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;GLUE备注&#x27;</span>,</span><br><span class="line">  <span class="symbol">`add_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`update_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_registry`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`registry_group`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`registry_key`</span> varchar(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`registry_value`</span> varchar(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`update_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="symbol">`i_g_k_v`</span> (<span class="symbol">`registry_group`</span>,<span class="symbol">`registry_key`</span>,<span class="symbol">`registry_value`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_group`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`app_name`</span> varchar(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器AppName&#x27;</span>,</span><br><span class="line">  <span class="symbol">`title`</span> varchar(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;执行器名称&#x27;</span>,</span><br><span class="line">  <span class="symbol">`address_type`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;执行器地址类型：0=自动注册、1=手动录入&#x27;</span>,</span><br><span class="line">  <span class="symbol">`address_list`</span> text COMMENT <span class="string">&#x27;执行器地址列表，多地址逗号分隔&#x27;</span>,</span><br><span class="line">  <span class="symbol">`update_time`</span> datetime DEFAULT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_user`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> int(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="symbol">`username`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;账号&#x27;</span>,</span><br><span class="line">  <span class="symbol">`password`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  <span class="symbol">`role`</span> tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;角色：0-普通用户、1-管理员&#x27;</span>,</span><br><span class="line">  <span class="symbol">`permission`</span> varchar(<span class="number">255</span>) DEFAULT <span class="literal">NULL</span> COMMENT <span class="string">&#x27;权限：执行器ID列表，多个逗号分割&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="symbol">`i_username`</span> (<span class="symbol">`username`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`xxl_job_lock`</span> (</span><br><span class="line">  <span class="symbol">`lock_name`</span> varchar(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> COMMENT <span class="string">&#x27;锁名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`lock_name`</span>)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`xxl_job_group`</span>(<span class="symbol">`id`</span>, <span class="symbol">`app_name`</span>, <span class="symbol">`title`</span>, <span class="symbol">`address_type`</span>, <span class="symbol">`address_list`</span>, <span class="symbol">`update_time`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;xxl-job-executor-sample&#x27;</span>, <span class="string">&#x27;示例执行器&#x27;</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">&#x27;2018-11-03 22:21:31&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`xxl_job_info`</span>(<span class="symbol">`id`</span>, <span class="symbol">`job_group`</span>, <span class="symbol">`job_desc`</span>, <span class="symbol">`add_time`</span>, <span class="symbol">`update_time`</span>, <span class="symbol">`author`</span>, <span class="symbol">`alarm_email`</span>, <span class="symbol">`schedule_type`</span>, <span class="symbol">`schedule_conf`</span>, <span class="symbol">`misfire_strategy`</span>, <span class="symbol">`executor_route_strategy`</span>, <span class="symbol">`executor_handler`</span>, <span class="symbol">`executor_param`</span>, <span class="symbol">`executor_block_strategy`</span>, <span class="symbol">`executor_timeout`</span>, <span class="symbol">`executor_fail_retry_count`</span>, <span class="symbol">`glue_type`</span>, <span class="symbol">`glue_source`</span>, <span class="symbol">`glue_remark`</span>, <span class="symbol">`glue_updatetime`</span>, <span class="symbol">`child_jobid`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;测试任务1&#x27;</span>, <span class="string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="string">&#x27;XXL&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;CRON&#x27;</span>, <span class="string">&#x27;0 0 0 * * ? *&#x27;</span>, <span class="string">&#x27;DO_NOTHING&#x27;</span>, <span class="string">&#x27;FIRST&#x27;</span>, <span class="string">&#x27;demoJobHandler&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;SERIAL_EXECUTION&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;BEAN&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;GLUE代码初始化&#x27;</span>, <span class="string">&#x27;2018-11-03 22:21:31&#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`xxl_job_user`</span>(<span class="symbol">`id`</span>, <span class="symbol">`username`</span>, <span class="symbol">`password`</span>, <span class="symbol">`role`</span>, <span class="symbol">`permission`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`xxl_job_lock`</span> ( <span class="symbol">`lock_name`</span>) <span class="keyword">VALUES</span> ( <span class="string">&#x27;schedule_lock&#x27;</span>);</span><br><span class="line"></span><br><span class="line">commit;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后再把从GitHub上下载的文件夹用idea打开进行编译</p>
<p>进行配置我们的web端口以及数据库：在application.properties文件中，然后配置一下</p>
<p>配置好之后maven，之间打成jar包，然后上传到linux服务器上</p>
<p>运行java -jar 上传的文件的路径</p>
<p>然后会报错，就创建个文件夹就好了 <code>mkdir -p /data/applogs/xxl-job</code></p>
<p>使用su 进行用户切换</p>
<p>然后通过chown 进行修改组以及用户 <code>chown -R hadoop:hadoop /data</code></p>
<p>然后再次运行就可以了</p>
<p>然后在调度器管理页面添加调度器，然后分配任务就可以了</p>
<h1 id="钉钉报警"><a href="#钉钉报警" class="headerlink" title="钉钉报警"></a>钉钉报警</h1><p>钉钉机器人可发送的类型</p>
<ul>
<li>文本</li>
<li>链接</li>
<li>markdown</li>
<li>actioncard</li>
<li>feedcard</li>
</ul>
<p>weget  ： 从互联网上下载的时候用的 ： 下载安装包 ，但是占用网络资源较大，且会一直重复下载直到结果成功，所以占用的资源较大</p>
<p>curl ： 发送请求的，发送网页请求访问的，也可以进行下载</p>
<ul>
<li>-o ： 把访问的一个页面存储到文件里</li>
</ul>
<p>机器人发送消息</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">curl &#x27;机器人的token&#x27;</span><br><span class="line">-H <span class="symbol">&#x27;Content</span>-<span class="keyword">type</span>:application/json&#x27;</span><br><span class="line">-d &#x27;&#123;<span class="string">&quot;msgtype&quot;</span> : <span class="type">text</span>&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>需求 ：</p>
<ul>
<li>日志数据 ： hdfs 上 linux user_click.log</li>
<li>例子： u01,鼠标,ios</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="built_in">u01,</span>鼠标,ios</span><br><span class="line"><span class="built_in">u01,</span>鼠标,ios</span><br><span class="line"><span class="built_in">u01,</span>鼠标,ios</span><br><span class="line"><span class="built_in">u01,</span>鼠标,ios</span><br><span class="line"><span class="built_in">u01,</span>鼠标,ios</span><br><span class="line"><span class="built_in">u02,</span>键盘,android</span><br><span class="line"><span class="built_in">u02,</span>键盘,android</span><br><span class="line"><span class="built_in">u02,</span>键盘,android</span><br><span class="line"><span class="built_in">u02,</span>键盘,android</span><br><span class="line"><span class="built_in">u03,</span>显示器,ios</span><br><span class="line"><span class="built_in">u04,</span>托特包,ios</span><br></pre></td></tr></table></figure>

<ul>
<li>业务数据 ：mysql user_info</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="built_in">u01,</span>子航</span><br><span class="line"><span class="built_in">u02,</span>祖安</span><br><span class="line"><span class="built_in">u03,</span>海哥</span><br><span class="line"><span class="built_in">u04,</span>轩轩</span><br></pre></td></tr></table></figure>

<p>统计：</p>
<p>uid ， name ，sku ， os 每个用户点击商品的次数</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> bianhao,shop_name,caozuoxit,<span class="keyword">count</span>(*) <span class="keyword">as</span> cishu <span class="keyword">from</span> user_click1 <span class="keyword">group</span> <span class="keyword">by</span> bianhao,shop_name,caozuoxit;</span><br></pre></td></tr></table></figure>

<p>取出表中重复数据，的次数做个排序</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> shop_name,caozuoxit,<span class="type">name</span>,row_number() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="type">name</span>) <span class="keyword">as</span> rm <span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_click1 <span class="keyword">left join</span> user_info <span class="keyword">on</span> user_click1.bianhao=user_info.bianhao</span><br><span class="line">) <span class="keyword">as</span> king</span><br></pre></td></tr></table></figure>

<p>不重复字段标识为1</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">u01</span>,子航,鼠标,ios <span class="number">1</span></span><br><span class="line"><span class="attribute">u01</span>,子航,鼠标,ios <span class="number">2</span></span><br><span class="line"><span class="attribute">u01</span>,子航,鼠标,ios <span class="number">3</span></span><br><span class="line"><span class="attribute">u04</span>,托特包,ios <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>统计表中不重复的数据，一起做排序，但是对于重复数据它还是对自己排序</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">name</span>,caozuoxit,shop_name,row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> cishu) <span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_click1 <span class="keyword">left join</span> (</span><br><span class="line"><span class="keyword">select</span> bianhao,count(*) <span class="keyword">as</span> cishu <span class="keyword">from</span> user_click1 <span class="keyword">group</span> <span class="keyword">by</span> bianhao,shop_name,caozuoxit</span><br><span class="line">) <span class="keyword">as</span> count_click <span class="keyword">on</span> count_click.bianhao=user_click1.bianhao</span><br><span class="line"><span class="keyword">left join</span> user_info <span class="keyword">on</span> count_click.bianhao=user_info.bianhao  </span><br><span class="line">) <span class="keyword">as</span> ds;</span><br><span class="line">上述是取巧的方法</span><br><span class="line">下面是正经的方法</span><br><span class="line"><span class="keyword">select</span> count_clickbianhao,<span class="type">name</span>,caozuoxit,shop_name,row_number() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> cishu) <span class="keyword">as</span> rm <span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_click1 <span class="keyword">left join</span> (</span><br><span class="line"><span class="keyword">select</span> bianhao <span class="keyword">as</span> count_clickbianhao,count(*) <span class="keyword">as</span> cishu <span class="keyword">from</span> user_click1 <span class="keyword">group</span> <span class="keyword">by</span> bianhao,shop_name,caozuoxit</span><br><span class="line">) <span class="keyword">as</span> count_click <span class="keyword">on</span> count_click.count_clickbianhao=user_click1.bianhao </span><br><span class="line"><span class="keyword">left join</span> user_info <span class="keyword">on</span> count_click.count_clickbianhao=user_info.bianhao  </span><br><span class="line">) <span class="keyword">as</span> jj <span class="keyword">where</span> cishu = <span class="number">1</span> </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> count_clickbianhao,<span class="type">name</span>,caozuoxit,shop_name,row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> (<span class="type">name</span>,caozuoxit,shop_name,cishu)) <span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_click1 <span class="keyword">left join</span> (</span><br><span class="line"><span class="keyword">select</span> bianhao <span class="keyword">as</span> count_clickbianhao,count(*) <span class="keyword">as</span> cishu <span class="keyword">from</span> user_click1 <span class="keyword">group</span> <span class="keyword">by</span> bianhao,shop_name,caozuoxit</span><br><span class="line">) <span class="keyword">as</span> count_click <span class="keyword">on</span> count_click.count_clickbianhao=user_click1.bianhao </span><br><span class="line"><span class="keyword">left join</span> user_info <span class="keyword">on</span> count_click.count_clickbianhao=user_info.bianhao  </span><br><span class="line">) <span class="keyword">as</span> j <span class="keyword">where</span> cishu != <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>整个流程使用xxl进行调度</p>
<p>最后结果导入到mysql</p>
<p>数据导入mysql保证幂等性</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>xxl</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生教学视频</title>
    <url>/2022/12/10/12-08/</url>
    <content><![CDATA[<h1 id="云原生"><a href="#云原生" class="headerlink" title="云原生"></a>云原生</h1><p>理解 ： 理解上要把他们拆开理解会更好</p>
<p>云 ：云基础设施（cloud）</p>
<p>原生：native ：在云计算平台里可以原生的计算和运行的</p>
<p>云原生的概念由来：<br>2013年被prvoyal公司的Ms提出</p>
<p>2015年谷歌带头成立了云原生的计算基金会</p>
<p>云原生的定义 ：</p>
<p>基于微服务原理而开发的应用，用容器的方式打包，在运行时，容器由运行于云基础设施之上的平台进行调度，应用开发采用持续交付和devOps实践</p>
<p>2015年：容器化封装+自动化管理+面向微服务</p>
<p>2018年：容器化封装+面向微服务+服务网格+声明格式API</p>
<p>云原生有利于各种组织在共有云，私有云和混合云等新动态环境中，构建和运行可扩展性的应用</p>
<p>微服务 ：把原有的单体应用拆分为多个独立自治的组件，每个组件都可以独立开发，设计，测试，运维，部署，这个组件可以单独的对外进行服务，我们称其为微服务</p>
<p>容器化：docker容器，容器属于it基础设施层概念，是比虚拟机更轻量化的隔离工具，是微服务的最佳载体</p>
<p>使用k8s的资源调度与容器编排，可以实现docker容器更优管理，进一步实现其PaaS能力</p>
<p>服务网格</p>
<p>服务网格存在的目的，就是中心化的服务治理框架</p>
<p>以往需要对微服务或者对api接口区做治理和管理请求</p>
<p>不可以改变基础设施指的是镜像：日后如果想再次改变他的部署，可以用镜像进行改变</p>
<p>应用部署：命令行：声明式</p>
<p>DevOps</p>
<p>借助云原生的相关技术，DevOps的时代才到来</p>
<p>云原生的最佳实现的实现三个层面</p>
<p>服务编排要实现计算资源弹性化</p>
<p>服务构建和部署要实现高可用</p>
<p>实践驱动基础设施标准初始化</p>
<p>云原生应用的领域</p>
<p>云原生的生态也已经覆盖到了，大数据，人工智能，边缘计算，区域局等领域</p>
<p>云原生的编排以及管理</p>
<p>编排与调度k8s</p>
<p>原生调用grpc</p>
<p>服务代理envoy</p>
<p>api网关apisix</p>
<p>服务网格istio</p>
<p>服务发现coreDns</p>
<p>消息和流式处理kafka</p>
<p>Severless ：只是对服务器的关心比较少，并不是完全无服务器</p>
<p>自动化配置：ansible</p>
<p>数据库：不赘述了</p>
<p>容器镜像仓库：harbor</p>
<p>定义及镜像制作：helm</p>
<p>密钥管理：spiffe</p>
<p>存储技术：ceph</p>
<p>网络技术：calico</p>
<p>监控分析：prometheus</p>
<p>等</p>
<h1 id="4步制作超级精简的大厂docker镜像"><a href="#4步制作超级精简的大厂docker镜像" class="headerlink" title="4步制作超级精简的大厂docker镜像"></a>4步制作超级精简的大厂docker镜像</h1><h2 id="什么是镜像"><a href="#什么是镜像" class="headerlink" title="什么是镜像"></a>什么是镜像</h2><p>镜像是：分层联合文件系统</p>
<p>一种轻量级，可执行的独立软件包</p>
<p>镜像大小：有大有小</p>
<p>曾经网易蜂巢logo镜像只有585B</p>
<p><code>docker pull hub.c.163.com/public/logo</code></p>
<p>精简docker镜像的优势</p>
<p>减少构建时间</p>
<p>减少磁盘使用量</p>
<p>减少下载时间</p>
<p>提高安全性</p>
<h2 id="镜像的分层原理"><a href="#镜像的分层原理" class="headerlink" title="镜像的分层原理"></a>镜像的分层原理</h2><p>doccker镜像的分层</p>
<p>第一层：本机的系统</p>
<p>第二层：镜像上安装的虚拟环境比如：python</p>
<p>第三层：打的补丁文件</p>
<p><code>docker pull busybox:latest</code></p>
<p>拉下来之后我们对它进行多层的镜像,进行演示一遍</p>
<p>拉下来之后随便找个地方创建个文件叫dockerfile</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> busybox</span><br><span class="line"><span class="built_in">RUN</span> mkdir /tmp/foo</span><br><span class="line"><span class="built_in">RUN</span> dd <span class="attribute">if</span>=/dev/zero <span class="attribute">of</span>=/tmp/foo/bar <span class="attribute">bs</span>=1048576 <span class="attribute">count</span>=100</span><br><span class="line"><span class="built_in">RUN</span> rm /tmp/foo/bar</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>上面这个是设置swap的交换分区的代码，count后面跟着的是字节数，bs是每秒的吞吐量</p>
<p>然后同步到docker容器上并执行这个文件 <code>docker build -t busybox:text . </code>这个语句的意思是根据本地镜像，加上我们的文本语句，进行创建我们的一个新的docker镜像，后面的.代表这个文件夹里所有的文本文件，也可以单独指明是哪一个文本文件</p>
<p>运行之前</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-8-16-centos dockerfile]# docker images | grep busybox</span><br><span class="line">busybox                     latest    334e4a014c81   4 days ago      4.86MB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行之后</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@VM-8-16-centos dockerfile]# docker images | grep busybox</span><br><span class="line">busybox                     text      efa9b412f2f7   4 minutes ago   110MB</span><br><span class="line">busybox                     latest    334e4a014c81   4 days ago      4.86MB</span><br></pre></td></tr></table></figure>

<p>这个新的镜像是基于我们之前的busybox进行创建的，而且执行了上面的分区文件</p>
<p>我们通过代码查看一下我们的容器代码情况 通过 <code>docker inspect busybox:容器的标识</code></p>
<p>容器的标识就是 TAG</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REPOSITORY                  TAG       IMAGE ID       CREATED             SIZE</span><br><span class="line">busybox                     text      efa9b412f2f7   About an hour ago   110MB</span><br><span class="line">busybox                     latest    334e4a014c81   4 days ago          4.86MB</span><br><span class="line">gitlab/gitlab-ce            latest    08f00af277b7   5 days ago          2.79GB</span><br><span class="line">hub.c.163.com/public/logo   latest    6fbdd13cd204   6 years ago         585B</span><br></pre></td></tr></table></figure>

<p>然后我们分别查看一下text和latest的代码情况，我们查看最后的layter有几层</p>
<p><code>docker inspect busybox:text</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;Layers&quot;: [</span><br><span class="line">                &quot;sha256:98004ed6104b2f4cc21559ea6e4a742ebf6731e37b5d1b04013ca68862749ba3&quot;,</span><br><span class="line">                &quot;sha256:c7a7aa6d1d87d0af266545bb8a56bdedfc79a14be948c092900ffb841c919c87&quot;,</span><br><span class="line">                &quot;sha256:88d1f859f65e27bca2996107976f04ed974c062b507b33b2388b2228b5d80122&quot;,</span><br><span class="line">                &quot;sha256:8e9b239d68ef8acc6fe2b2a82c7c803a79f0bdc5bf200b6d35fc2b062de24963&quot;</span><br><span class="line">            ]</span><br></pre></td></tr></table></figure>

<p><code>docker inspect busybox:latest</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;Layers&quot;: [</span><br><span class="line">               &quot;sha256:98004ed6104b2f4cc21559ea6e4a742ebf6731e37b5d1b04013ca68862749ba3&quot;</span><br><span class="line">           ]</span><br><span class="line">       &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>简单来说，一个run就是一层</p>
<h2 id="制作精简镜像"><a href="#制作精简镜像" class="headerlink" title="制作精简镜像"></a>制作精简镜像</h2><p>但是我们如何精简镜像呢，就像上述所说，仅仅用了三个命令，就多了100m</p>
<p>而且docker最多只有127个run</p>
<p>接下来我们来制作一个精简的redis的docker镜像</p>
<p>先创建一个dockerfile2文件在文件中输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM 192.168.5.160/library/ubantu:trusty</span><br><span class="line">ENV VER    3.0.0</span><br><span class="line">ENV TARBALL http://download.redis.io/releases/redis-$VER.tar.gz</span><br><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y curl make gcc</span><br><span class="line">RUN curl -L $TARBALL | tar zxv</span><br><span class="line">WORKDIR redis-$$VER</span><br><span class="line">RUN make</span><br><span class="line">RUN make install</span><br><span class="line">WORKDIR /</span><br><span class="line">RUN apt-get remove -y --auto-remove curl make gcc</span><br><span class="line">RUN apt-get clean</span><br><span class="line">RUN rm -rf /var/lib/apt/lists/* /redis-$$VER</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>save 和 export</p>
<p>导出的区别 ：</p>
<p>export 导出的包括的东西更多一点，它有压缩功能，保留历史层，有历史层的可以进行回滚操作 ;算是导出容器，</p>
<p>容器相当于镜像加个读写层</p>
<p>save 导出的仅仅是镜像，不保留历史层</p>
<p>但是下完之后是300多M有点大</p>
<p>我们对他进行缩小</p>
<p>缩小的方式</p>
<p>用更小的基础镜像 <code>debain</code></p>
<p>如下</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="number">192.168</span>.<span class="number">5.160</span>/library/debain:jessie</span><br><span class="line"><span class="keyword">ENV</span> VER    <span class="number">3.0</span>.<span class="number">0</span></span><br><span class="line"><span class="keyword">ENV</span> TARBALL http://download.redis.io/releases/redis-$VER.tar.gz</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y curl make gcc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> curl -L <span class="variable">$TARBALL</span> | tar zxv</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> redis-$<span class="variable">$VER</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> make</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> make install</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get remove -y --auto-remove curl make gcc</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get clean</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> -rf /var/lib/apt/lists/* /redis-$<span class="variable">$VER</span></span></span><br></pre></td></tr></table></figure>

<p>成功之后会发现少了很多的空间</p>
<p>然后再进一步瘦身<br>把dockerfile里的命令串联起来</p>
<p>如下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">FROM <span class="number">192.168</span>.<span class="number">5.160</span><span class="regexp">/library/</span>debain:jessie</span><br><span class="line">ENV VER    <span class="number">3.0</span>.<span class="number">0</span></span><br><span class="line">ENV TARBALL http:<span class="regexp">//</span>download.redis.io<span class="regexp">/releases/</span>redis-<span class="variable">$VER</span>.tar.gz</span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">apt-get install -y curl make gcc &amp;&amp; \</span><br><span class="line">curl -L <span class="variable">$TARBALL</span> | tar zxv &amp;&amp; \</span><br><span class="line">WORKDIR redis-$<span class="variable">$VER</span> &amp;&amp; \</span><br><span class="line">make &amp;&amp; \</span><br><span class="line">make install &amp;&amp; \</span><br><span class="line">WORKDIR / &amp;&amp; \</span><br><span class="line">apt-get remove -y --auto-remove curl make gcc &amp;&amp; \</span><br><span class="line">apt-get clean &amp;&amp; \</span><br><span class="line">rm -rf <span class="regexp">/var/</span>lib<span class="regexp">/apt/</span>lists<span class="regexp">/* /</span>redis-$<span class="variable">$VER</span></span><br></pre></td></tr></table></figure>

<p>通过串联命令编排之后的镜像体积比不编排的能小上一半左右</p>
<p>压缩镜像 ： 但是有时候并不会好使，但是能压缩多少就压缩多少吧，对一个外来镜像进行压缩的时候，可能会比较明显</p>
<p><code>docker save 镜像的名字 | docker-squash -verbose -t 生成的镜像的名字 | docker load 这个对mac不好使，再linux可以</code></p>
<p>使用容器专用的基础镜像 —— scratch 或者busybox作为基础镜像</p>
<p>上面两个是空镜像，所以我们可以把docker里的程序文件拿出来，打包成gz的压缩包</p>
<p>然后再用空镜像再次生成一个容器，进行极致的压缩</p>
<p>这种方式进行的docker容器对于redis而言，会被压缩到个位数的空间，而且可以正常运行</p>
<p>dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> 压缩的文件及其依赖 /</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> redis.conf /etc/redis/redis.conf</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;usr/local/bin/redis-server&quot;</span>]</span></span><br><span class="line"> <span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;docker-entrypoint.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>其中压缩的文件是从debain上搞来的依赖，以及redis的包一起打的压缩</p>
<p>EXPOSE ：设置的是端口</p>
<p>查询依赖的方式，通过 ldd 查出所需要的.so文件</p>
<p>然后把所以依赖都打包成tar或者gz文件，用scratch</p>
<p>至于如何获取空镜像，我们可以通过官网命令 <code>tar cv --files-from /dev/null | docker import - scratch</code></p>
<p>就会自动获取了</p>
<p>实操</p>
<p>首先拉去空镜像</p>
<p>对于已经拉去过空镜像的同学就不用了</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">tar cv --files-<span class="keyword">from</span> <span class="regexp">/dev/</span><span class="keyword">null</span> | docker <span class="keyword">import</span> - scratch</span><br></pre></td></tr></table></figure>

<p>拉去之后找到我们的模板机</p>
<p>然后进入我们的模板机里 <code>docker exec -it 名字 /bin/bash</code></p>
<p>然后找到我们的程序比如我找的是redis-server</p>
<p>然后我们找到之后通过ldd命令查看他的依赖 <code>ldd redis-srever</code></p>
<p>查看到依赖之后把文件夹结构以及文件都弄出来，通过cp命令 <code> docker cp 模板机的名字:文件路径 宿主机的路径</code></p>
<p>然后我们把所有的文件，都打包成一个tar.gz <code>tar -zxcf 生成的文件名（带tar.gz的） 打包的内容的路径</code></p>
<p>然后我们编辑dockerfile文件如下</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch <span class="comment">#从什么镜像中创建</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> 压缩的文件及其依赖 / <span class="comment"># 通过ADD可以把文件自动解压</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> redis.conf /etc/redis/redis.conf <span class="comment">#redis 的配置文件</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6379</span> <span class="comment">#端口号</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;usr/local/bin/redis-server&quot;</span>] <span class="comment">#这个相当于解释器，要用的</span></span></span><br></pre></td></tr></table></figure>

<p>然后执行 <code>docker build -t 生成的容器的内容 -f dockerfile</code></p>
<p>构建容器，最后成功之后，通过 <code>docker run -d --name 你的image的名字 你自己起的名字 </code></p>
<p>然后就运行成功了</p>
<p>我们通过docker images</p>
<p>查看一下存储大小如下 ：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">redis</span>-<span class="number">01</span>           latest    c654e9a88af9   <span class="number">13</span> minutes ago   <span class="number">22</span>.<span class="number">3</span>MB</span><br><span class="line"><span class="attribute">scratch</span>            latest    <span class="number">89</span>a161411e52   <span class="number">2</span> hours ago      <span class="number">0</span>B</span><br><span class="line"><span class="attribute">busybox</span>            latest    <span class="number">334</span>e4a014c81   <span class="number">4</span> days ago       <span class="number">4</span>.<span class="number">86</span>MB</span><br><span class="line"><span class="attribute">redis</span>              latest    <span class="number">3</span>e12e2ceb68f   <span class="number">5</span> days ago       <span class="number">117</span>MB</span><br><span class="line"><span class="attribute">gitlab</span>/gitlab-ce   latest    <span class="number">08</span>f00af277b7   <span class="number">5</span> days ago       <span class="number">2</span>.<span class="number">79</span>GB</span><br></pre></td></tr></table></figure>

<p>如上所属，redis-01 是我们自己创建的，redis是官方提供的</p>
<p>差距显而易见</p>
<h2 id="构建企业debian-10-基础测试镜像"><a href="#构建企业debian-10-基础测试镜像" class="headerlink" title="构建企业debian 10 基础测试镜像"></a>构建企业debian 10 基础测试镜像</h2>]]></content>
      <categories>
        <category>云原生（哔哩哔哩）</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>flume</title>
    <url>/2022/12/12/12-12/</url>
    <content><![CDATA[<p>xxl：任务调度的时候</p>
<ul>
<li>设置一个xxl job 完成任务 ，解耦不好，就是代码中常规定义的高内聚 ，低偶合</li>
<li>设置多个xxl job，可以解决上述的问题 ， 但是时间不好把握 ， 就是第一个任务和第二个任务的交界处，就是如何判断第一个任务执行完了，如何开启第二个，xxl中有可以控制这个的功能</li>
<li>在任务编辑页面中，点击添加子任务id，就可以了</li>
</ul>
<p>然后只用执行父任务就好</p>
<p>但是不太方便</p>
<p>任务调度框架 ： 推荐dolphinscheduler  官网  ：<code>dolphinscheduler.apache.org</code></p>
<p>周六周日学会</p>
<p>首选dolphinscheduler</p>
<p>airflow 也是比较擅长制作dag（有向无关图）的一个框架官网 ： <code>airflow.apache.org</code></p>
<p>他的dag能力非常好用，但是是要求用python使用的，同样周六周日学会</p>
<p>或者自己开发&#x3D;》java团队</p>
<p>sqoop是要在yarn上申请资源，然后进行map阶段，它不走reduce阶段，它在yarn上申请资源，就是消耗时间的最大问题</p>
<h1 id="flume"><a href="#flume" class="headerlink" title="flume"></a>flume</h1><p>主要是收集我们的日志数据的</p>
<p>数据采集&#x2F;数据收集</p>
<p>数据采集：把数据采集到服务器上</p>
<p>数据收集：把数据移动到指定位置</p>
<p>上述是老师之前公司的定义</p>
<p>flume的架构地位 ： 一般采集日志数据，并不用我们做，是java团队要做的</p>
<p>日志数据 -》flume-》hdfs</p>
<p>业务数据 通过sqoop存到hdfs上</p>
<p>数据处理的两种方式 ： 离线 ，实时</p>
<p>上述所处的数据处理方式是离线处理，</p>
<p>实时处理是来一个数据，就处理一个</p>
<p>离线处理是把一定时间内的数据放到一起来进行处理也叫p处理</p>
<p>实时处理的架构线和离线处理的差不多，因为flume采集数据就是实时的</p>
<p>实时 ： 日志数据 -》 flume -》 kafka -》 实时处理框架</p>
<p>离线 ： 日志数据 -》 flume -》 hdfs -》 hive</p>
<p>但是现在有一种框架如下 ：</p>
<p>日志数据 -》 flume -》 kafka</p>
<ul>
<li>-》实时</li>
<li>-》flume -》hdfs -》离线</li>
</ul>
<p>并不意味着下面的架构比上面两种好，架构没有好与坏，只有合适不合适</p>
<p>因为下面意味着要多加一层维护，消耗人力以及物资</p>
<p>官网 ： <code>flume.apache.org</code></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>官方介绍 ：</p>
<p>收集，聚合，移动日志文件 <code>Flume is a distributed, reliable, and available service for efficiently collecting, aggregating, and moving large amounts of log data.</code></p>
<p>flume ：采集数据是实时采集的而且支持恢复机制 <code> It has a simple and flexible architecture based on streaming data flows. It is robust and fault tolerant with tunable reliability mechanisms and many failover and recovery mechanisms.</code></p>
<p>flume组件</p>
<ul>
<li>source ：采集数据</li>
<li>channel ： 管道，存储采集过来的数据</li>
<li>sink ： 移动数据</li>
</ul>
<p>flume ： 使用场景</p>
<p>采集数据日志-》 hdfs上</p>
<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><p>以后操作flume，就是编写agent里面的配置</p>
<p>agent ： 包括上面的那三个组件</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>我们部署的化用1.9版本</p>
<p>第一步 ： 先解压 到app下</p>
<p>第二步 ： 软连接 + 环境变量</p>
<p>第三步 ： 配置flume，修改flume的env.sh文件，把java_home加上</p>
<p>第四步 ： 使用flume ： 配置agent 配置文件</p>
<p>flume user guide ：基本使用</p>
<p>flume develop guide ：二次开发</p>
<p>常用的 source</p>
<ul>
<li>avro 序列化框架的source ****</li>
<li>exec 日志文件</li>
<li>spooling dir 日志文件</li>
<li>kafka Source</li>
<li>Netcat Source 通过端口采集数据</li>
<li>taildir Source 日志文件 ****</li>
<li>等 ，可以自己开发</li>
<li>其余都是两个星</li>
</ul>
<p>常用的channel</p>
<ul>
<li>Memory ****</li>
<li>File  ****</li>
<li>JDBC *</li>
<li>kafka *</li>
<li>Custom ： 用户开发 *</li>
<li>等</li>
</ul>
<p>常用的sink</p>
<ul>
<li>hdfs ****</li>
<li>hive ****</li>
<li>avro ****</li>
<li>logger 控制台，打印 **</li>
<li>HBase *</li>
<li>kafka *</li>
<li>http *</li>
<li>custom *</li>
<li>等</li>
</ul>
<p>如何配置agent</p>
<p>用什么查什么 ： 不用记</p>
<p>需求  ：从指定端口的地方获取数据并输出到控制套</p>
<p>分析  ：</p>
<p>source ：Netcat</p>
<p>channel ： memory</p>
<p>sink ： logger</p>
<p>然后编写一个flume的文件，文件内容如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = netcat</span><br><span class="line"><span class="attr">a1.sources.r1.bind</span> = localhost</span><br><span class="line"><span class="attr">a1.sources.r1.port</span> = <span class="number">44444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>event  ：就是我们的flume的一条数据，代表数据是通过这三个阶段的一条数据</p>
<p>关于source的参数，下列以netcat为例</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">Property</span> Name	<span class="keyword">Default</span>	Description</span><br><span class="line">channels	–	 </span><br><span class="line"><span class="keyword">type</span>	–	The <span class="keyword">component</span> <span class="keyword">type</span> name, needs <span class="keyword">to</span> be netcat</span><br><span class="line">bind	–	Host name <span class="keyword">or</span> IP address <span class="keyword">to</span> bind <span class="keyword">to</span></span><br><span class="line"><span class="keyword">port</span>	–	<span class="keyword">Port</span> # <span class="keyword">to</span> bind <span class="keyword">to</span></span><br><span class="line">max-<span class="literal">line</span>-length	<span class="number">512</span>	Max <span class="literal">line</span> length per event <span class="keyword">body</span> (<span class="keyword">in</span> bytes)</span><br><span class="line">ack-every-event	<span class="literal">true</span>	Respond <span class="keyword">with</span> an “OK” <span class="keyword">for</span> every event received</span><br><span class="line">selector.<span class="keyword">type</span>	replicating	replicating <span class="keyword">or</span> multiplexing</span><br><span class="line">selector.*	 	Depends <span class="keyword">on</span> the selector.<span class="keyword">type</span> value</span><br><span class="line">interceptors	–	Space-separated list <span class="keyword">of</span> interceptors</span><br><span class="line">interceptors.*	 	 </span><br></pre></td></tr></table></figure>

<p>关于channel参数</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Property <span class="type">Name</span>	<span class="keyword">Default</span>	Description</span><br><span class="line"><span class="keyword">type</span>	–	The component <span class="keyword">type</span> <span class="type">name</span>, needs <span class="keyword">to</span> be memory</span><br><span class="line">capacity	<span class="number">100</span>	The maximum number <span class="keyword">of</span> events stored <span class="keyword">in</span> the channel</span><br><span class="line">transactionCapacity	<span class="number">100</span>	The maximum number <span class="keyword">of</span> events the channel will take <span class="keyword">from</span> a source <span class="keyword">or</span> give <span class="keyword">to</span> a sink per <span class="keyword">transaction</span></span><br><span class="line">keep-alive	<span class="number">3</span>	Timeout <span class="keyword">in</span> seconds <span class="keyword">for</span> adding <span class="keyword">or</span> removing an event</span><br><span class="line">byteCapacityBufferPercentage	<span class="number">20</span>	Defines the percent <span class="keyword">of</span> buffer <span class="keyword">between</span> byteCapacity <span class="keyword">and</span> the estimated total size <span class="keyword">of</span> <span class="keyword">all</span> events <span class="keyword">in</span> the channel, <span class="keyword">to</span> account <span class="keyword">for</span> data <span class="keyword">in</span> headers. See below.</span><br><span class="line">byteCapacity	see description	Maximum total bytes <span class="keyword">of</span> memory allowed <span class="keyword">as</span> a sum <span class="keyword">of</span> <span class="keyword">all</span> events <span class="keyword">in</span> this channel. The implementation <span class="keyword">only</span> counts the Event body, which <span class="keyword">is</span> the reason <span class="keyword">for</span> providing the byteCapacityBufferPercentage <span class="keyword">configuration</span> parameter <span class="keyword">as</span> well. Defaults <span class="keyword">to</span> a computed <span class="keyword">value</span> equal <span class="keyword">to</span> <span class="number">80</span>% <span class="keyword">of</span> the maximum memory available <span class="keyword">to</span> the JVM (i.e. <span class="number">80</span>% <span class="keyword">of</span> the -Xmx <span class="keyword">value</span> passed <span class="keyword">on</span> the command <span class="type">line</span>). Note that <span class="keyword">if</span> you have multiple memory channels <span class="keyword">on</span> a single JVM, <span class="keyword">and</span> they happen <span class="keyword">to</span> hold the same physical events (i.e. <span class="keyword">if</span> you are <span class="keyword">using</span> a replicating channel selector <span class="keyword">from</span> a single source) <span class="keyword">then</span> those event sizes may be <span class="type">double</span>-counted <span class="keyword">for</span> channel byteCapacity purposes. Setting this <span class="keyword">value</span> <span class="keyword">to</span> <span class="number">0</span> will cause this <span class="keyword">value</span> <span class="keyword">to</span> fall back <span class="keyword">to</span> a hard <span class="type">internal</span> <span class="keyword">limit</span> <span class="keyword">of</span> about <span class="number">200</span> GB.</span><br></pre></td></tr></table></figure>

<p>关于sink</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">Property</span> <span class="keyword">Name</span>	<span class="keyword">Default</span>	Description</span><br><span class="line">channel	–	 </span><br><span class="line"><span class="keyword">type</span>	–	The component <span class="keyword">type</span> <span class="keyword">name</span>, needs <span class="keyword">to</span> be logger</span><br><span class="line">maxBytesToLog	<span class="number">16</span>	Maximum number <span class="keyword">of</span> bytes <span class="keyword">of</span> the Event body <span class="keyword">to</span> log</span><br></pre></td></tr></table></figure>

<p>然后启动我们的flume</p>
<p>执行 <code>flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file /home/hadoop/data/flumeexample.txt -Dflume.root.logger=info,console --name a1</code></p>
<p>然后执行telent localhost 44444</p>
<p>往里面发送内容，在我们启动flume的session就会发现内容</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">53</span>,<span class="number">172</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">31</span> <span class="number">0</span>D                                           <span class="number">1</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">54</span>,<span class="number">427</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">32</span> <span class="number">0</span>D                                           <span class="number">2</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">54</span>,<span class="number">877</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">33</span> <span class="number">0</span>D                                           <span class="number">3</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">55</span>,<span class="number">237</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">34</span> <span class="number">0</span>D                                           <span class="number">4</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">55</span>,<span class="number">565</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">35</span> <span class="number">0</span>D                                           <span class="number">5</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">55</span>,<span class="number">891</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">36</span> <span class="number">0</span>D                                           <span class="number">6</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">56</span>,<span class="number">238</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">37</span> <span class="number">0</span>D                                           <span class="number">7</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">56</span>,<span class="number">609</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">38</span> <span class="number">0</span>D                                           <span class="number">8</span>. &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">57</span>,<span class="number">272</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">39</span> <span class="number">0</span>D                                           <span class="number">9</span>. &#125;</span><br></pre></td></tr></table></figure>

<p>如上 ：</p>
<p>生产上常见的</p>
<ul>
<li>采集log文件到hdfs上</li>
<li>采集log文件到hive</li>
<li>待机log文件到kafka里</li>
<li>采集kafka数据到hdfs</li>
<li>采集kafka数据到hive</li>
<li>采集数据到下一个agent里</li>
</ul>
<p>source ：</p>
<ul>
<li>netcat ： 采集端口数据 ： 学习测试</li>
<li>日志文件</li>
<li>kafka</li>
<li>agent</li>
</ul>
<p>采集日志文件</p>
<ul>
<li>exec</li>
<li>spooldir</li>
<li>taildir</li>
</ul>
<p>采集数据文件到控制台</p>
<ul>
<li>source ： exec</li>
<li>channel  ： memory</li>
<li>sink ： logger</li>
</ul>
<h1 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h1><p>编写agent</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = exec</span><br><span class="line"><span class="attr">a1.sources.r1.command</span> = tail -F /home/hadoop/data/loger.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>然后执行 <code>flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file /home/hadoop/data/flumeexample.txt -Dflume.root.logger=info,console --name a1</code></p>
<p>结果如下 ：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">25</span>,<span class="number">755</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">31</span>                                              <span class="number">1</span> &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">39</span>:<span class="number">55</span>,<span class="number">761</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>                                     aaaa &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">40</span>:<span class="number">01</span>,<span class="number">909</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span>                                     aaaa &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">40</span>:<span class="number">10</span>,<span class="number">910</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">73</span> <span class="number">73</span>                               aaaass &#125;</span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">44</span>:<span class="number">40</span>,<span class="number">961</span> (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.<span class="built_in">process</span>(LoggerSink.java:<span class="number">95</span>)] Event: &#123; headers:&#123;&#125; <span class="selector-tag">body</span>: <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">61</span> <span class="number">73</span> <span class="number">73</span> <span class="number">64</span> <span class="number">73</span> <span class="number">61</span> <span class="number">61</span> <span class="number">64</span> <span class="number">73</span>             aaaassdsaads &#125;</span><br></pre></td></tr></table></figure>

<p>上面的body里的东西是ascII码值的16进制</p>
<p>exec 的方式采集数据的时候，如果停掉flume，然后重新启动的时候，还会再次把文件里的数据再采集一次，造成数据双倍，能用，但是不建议</p>
<h1 id="spoolingdir"><a href="#spoolingdir" class="headerlink" title="spoolingdir"></a>spoolingdir</h1><p>接下来spooldir的采集文件夹下的文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = spooldir</span><br><span class="line"><span class="attr">a1.sources.r1.spoolDir</span> = 数据文件夹</span><br><span class="line"><span class="attr">a1.sources.r1.fileHeader</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>然后执行 <code>flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file /home/hadoop/data/flumeexample.txt -Dflume.root.logger=info,console --name a1</code></p>
<p>被采集过的文件会被打上标记，会重命名文件命名为xxx.completed</p>
<p>然后就不会再次采集到这个文件，哪怕是关闭之后重新启动</p>
<p>而且往已经采集的文件下再次加入文件内容的时候，flume会被重新启动，且不能采集到新加的内容，而且文件名字不可以重复，如果重复，flume会挂掉，生产上不怎么使用</p>
<h1 id="taildir"><a href="#taildir" class="headerlink" title="taildir"></a>taildir</h1><p>接下来是taildir ：既可以采集文件夹，也可以采集单个文件，且有断点续传的作用</p>
<p>但是它并不能运行在windows上</p>
<p>编写agent</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = TAILDIR</span><br><span class="line"><span class="attr">a1.sources.r1.positionFile</span> = /home/hadoop/data/flumepostion/taildir_position.json</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups</span> = f1 f2</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f1</span> = /home/hadoop/data/try.txt</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f1.headerKey1</span> = value1</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f2</span> = /home/hadoop/data/flumetestdata/.*.log</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f2.headerKey1</span> = value2</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f2.headerKey2</span> = value2-<span class="number">2</span></span><br><span class="line"><span class="attr">a1.sources.r1.fileHeader</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">a1.sources.ri.maxBatchCount</span> = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = logger</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>然后运行 <code>flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file /home/hadoop/data/flumeexample.txt -Dflume.root.logger=info,console --name a1</code></p>
<p>它可以实时性的采集数据，是生产上重点，一般都用它，在flume里模糊匹配的语法要加个点在可以</p>
<p>断点续传的文件，a1.sources.r1.positionFile &#x3D; &#x2F;var&#x2F;log&#x2F;flume&#x2F;taildir_position.json</p>
<p>可以自己定义，或者是默认，默认是在~&#x2F;.flume&#x2F;taildir_position.json</p>
<h1 id="Sink-：hdfs"><a href="#Sink-：hdfs" class="headerlink" title="Sink ：hdfs"></a>Sink ：hdfs</h1><p>指定到hdfs上</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = TAILDIR</span><br><span class="line"><span class="attr">a1.sources.r1.positionFile</span> = /home/hadoop/data/flumepostion/taildir_position.json</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups</span> = f1 f2</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f1</span> = /home/hadoop/data/try.txt</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f1.headerKey1</span> = value1</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f2</span> = /home/hadoop/data/flumetestdata/.*.log</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f2.headerKey1</span> = value2</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f2.headerKey2</span> = value2-<span class="number">2</span></span><br><span class="line"><span class="attr">a1.sources.r1.fileHeader</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">a1.sources.ri.maxBatchCount</span> = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = hdfs</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.path</span> = hdfs://bigdata3:<span class="number">9000</span>/data</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>flume存储的数据才hdfs山观察看不了，因为其默认的数据格式不对</p>
<p>更改</p>
<ul>
<li>hdfs.filetype DataStream</li>
<li>hdfs.writeFormat : Text</li>
</ul>
<p>如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = TAILDIR</span><br><span class="line"><span class="attr">a1.sources.r1.positionFile</span> = /home/hadoop/data/flumepostion/taildir_position.json</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups</span> = f1 f2</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f1</span> = /home/hadoop/data/try.txt</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f1.headerKey1</span> = value1</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f2</span> = /home/hadoop/data/flumetestdata/.*.log</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f2.headerKey1</span> = value2</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f2.headerKey2</span> = value2-<span class="number">2</span></span><br><span class="line"><span class="attr">a1.sources.r1.fileHeader</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">a1.sources.ri.maxBatchCount</span> = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = hdfs</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.path</span> = hdfs://bigdata3:<span class="number">9000</span>/flume/events/%Y-%m-%d</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.fileType</span> = DataStream</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.writeFormat</span> = Text</span><br><span class="line"><span class="comment"># 控制小文件的参数</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.rollSize</span> = <span class="number">134217728</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.rollInterval</span> = <span class="number">21600</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.rollCount</span> = <span class="number">1000</span></span><br><span class="line"><span class="comment"># 控制大文件的滚动</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.round</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.roundUnit</span> = minute</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.batchSize</span> = <span class="number">1200</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.roundValue</span> = <span class="number">21</span></span><br><span class="line"><span class="comment"># 修改文件前缀和后缀</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.filePrefix</span> = events</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.fileSuffix</span> = .log</span><br><span class="line"><span class="attr">a1.sinks.k1.hdfs.useLocalTimeStamp</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">5000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>执行 ：<code>flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file /home/hadoop/data/flumeexample.txt -Dflume.root.logger=info,console --name a1</code></p>
<p>采集的时候要注意：</p>
<p>因为采集数据会造成小文件问题就是当flume在采集的时候，如果文件一直发生变化的时候，flume可能会造成有多个小文件</p>
<p>可以通过增加参数进行设置</p>
<ul>
<li>按照条数进行滚动：就是生成下一个文件</li>
<li>按照时间进行滚动：就是生成下一个文件</li>
<li>hdfs.round &#x3D;&gt; 文件滚动的开关</li>
<li>hdfs.batchSize &#x3D;&gt; 按照条目数滚动，一般不会用</li>
<li>hdfs.roundUnit &#x3D;&gt; 按照时间滚动</li>
<li>hdfs.roundValue &#x3D;&gt; 时间滚动的具体值</li>
<li>文件进行滚动，是针对文件来说的，计算说当一个滚动的时候其余的文件滚动会重置</li>
</ul>
<h3 id="上面的对小文件的时候不好用，下面是一定好用的"><a href="#上面的对小文件的时候不好用，下面是一定好用的" class="headerlink" title="上面的对小文件的时候不好用，下面是一定好用的"></a>上面的对小文件的时候不好用，下面是一定好用的</h3><ul>
<li>hdfs.rollSize &#x3D;&gt; 按照大小进行滚动 默认是字节</li>
<li>hdfs.rollInterval &#x3D;&gt;按照时间进行滚动，秒为单位</li>
<li>hdfs.rollCount &#x3D;&gt; 文件里存的数据条数进行滚动</li>
</ul>
<h3 id="更改文件前缀和后缀"><a href="#更改文件前缀和后缀" class="headerlink" title="更改文件前缀和后缀"></a>更改文件前缀和后缀</h3><ul>
<li>hdfs.filePrefix : 文件前缀</li>
<li>hdfs.fileSuffix ：文件后缀</li>
<li>可以在path后面的问价夹地方放上时间戳</li>
<li>然后文件夹会自动生成 <code>a1.sinks.k1.hdfs.path = /flume/events/%Y-%m-%d/%H%M/%S </code></li>
<li><code>文件夹如下 ：/flume/events/2012-06-12/1150/00 </code></li>
<li>进行上述更改之后，我们要再次添加上 <code>hdfs.useLocalTimeStamp = true</code></li>
<li>这样之后相当于数据分组是用机器的时间，而不是数据本身的时间</li>
</ul>
<h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><ul>
<li>由两部分组成</li>
<li>headers ： 描述信息 ，但是一般的时候，这个里面是空的 ， 如果path设置成上述的靠时间戳，则这里不能为空，或者用本地时间代替</li>
<li>body ： 实实在在的数据 ：8进制的ASCII码值</li>
</ul>
<h3 id="业界问题"><a href="#业界问题" class="headerlink" title="业界问题"></a>业界问题</h3><ul>
<li>数据延迟的问题，对于数据假如在，23.58分采集，而flume有延迟，两分钟后才同步过来，就会出现数据本身的时间（采集时间）和本机local时间不一样，然后会影响到hdfs上文件夹的目录的存储</li>
<li>解决方法  ： log -》 flume -》 hive</li>
<li>定义udf ：函数 ： 保证正确的数据重新落盘到正确的分区 ： 数据清理</li>
<li>从flume 源头解决： 用文件创建的时间，就是在header里设置时间<ul>
<li>要二次开发才可以解决</li>
</ul>
</li>
</ul>
<h2 id="同步到hive中"><a href="#同步到hive中" class="headerlink" title="同步到hive中"></a>同步到hive中</h2><p>我们可以通过同步到hdfs中然后同步到ihive上，因为hive的数据在hdfs上</p>
<h3 id="普通表："><a href="#普通表：" class="headerlink" title="普通表："></a>普通表：</h3><p>对于普通表我们之间把文件放到hive的存储路径下，只要分隔符对，就可以了</p>
<h3 id="分区表："><a href="#分区表：" class="headerlink" title="分区表："></a>分区表：</h3><p>对于已经有的分区，之间把数据往分区文件夹里存储就好</p>
<p>对于没有的分区，把数据按照文件夹传输上去之后，我们还要在hive的源数据库里添加分区</p>
<p>通过：<code>alter table emp_partition add partition(deptno=10);</code></p>
<p>然后建完分区，它就会显示数据了</p>
<h1 id="Sink-hive"><a href="#Sink-hive" class="headerlink" title="Sink:hive"></a>Sink:hive</h1><p>以下是官方提供的hive的flume参数</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = hive // 类型</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1 </span><br><span class="line"><span class="attr">a1.sinks.k1.hive.metastore</span> = thrift://bigdata3:<span class="number">9083</span> //元数据库</span><br><span class="line"><span class="attr">a1.sinks.k1.hive.database</span> = logsdb 数据库</span><br><span class="line"><span class="attr">a1.sinks.k1.hive.table</span> = weblogs 表</span><br><span class="line"><span class="attr">a1.sinks.k1.hive.partition</span> = asia,%&#123;country&#125;,%Y-%m-%d-%H-%M 分区字段</span><br><span class="line"><span class="attr">a1.sinks.k1.useLocalTimeStamp</span> = <span class="literal">false</span> 是不是使用本地时间戳</span><br><span class="line"><span class="attr">a1.sinks.k1.round</span> = <span class="literal">true</span> </span><br><span class="line"><span class="attr">a1.sinks.k1.roundValue</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">a1.sinks.k1.roundUnit</span> = minute </span><br><span class="line"><span class="attr">a1.sinks.k1.serializer</span> = DELIMITED   负责解析事件中的字段并将它们映射到hive表中的列 </span><br><span class="line"><span class="attr">a1.sinks.k1.serializer.delimiter</span> = <span class="string">&quot;\t&quot;</span> 传入数据的分隔符（每个字段之间的）</span><br><span class="line"><span class="attr">a1.sinks.k1.serializer.serdeSeparator</span> = <span class="string">&#x27;\t&#x27;</span> 输出字段分隔符,单引号括起来，例如<span class="string">&#x27;\t&#x27;</span></span><br><span class="line"><span class="attr">a1.sinks.k1.serializer.fieldnames</span> =id,,msg 参数名字（表的）</span><br></pre></td></tr></table></figure>

<p>然后我们自己写一个</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># example.conf: A single-node Flume configuration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name the components on this agent</span></span><br><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe/configure the source</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = TAILDIR</span><br><span class="line"><span class="attr">a1.sources.r1.positionFile</span> = /home/hadoop/data/flumepostion/taildir_position.json</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups</span> = f1</span><br><span class="line"><span class="attr">a1.sources.r1.filegroups.f1</span> = /home/hadoop/data/emp_202211301118.csv</span><br><span class="line"><span class="attr">a1.sources.r1.headers.f1.headerKey1</span> = value1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Describe the sink</span></span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = hive</span><br><span class="line"><span class="attr">a1.sinks.k1.serializer</span> = DELIMITED</span><br><span class="line"><span class="attr">a1.sinks.k1.hive.metastore</span> = thrift://bigdata3:<span class="number">9083</span></span><br><span class="line"><span class="attr">a1.sinks.k1.hive.database</span> = bigdata_hive3</span><br><span class="line"><span class="attr">a1.sinks.k1.hive.table</span> = emp22</span><br><span class="line"><span class="attr">a1.sinks.k1.serializer.delimiter</span> = <span class="string">&quot;,&quot;</span></span><br><span class="line"><span class="attr">a1.sinks.k1.serializer.serdeSeparator</span> = <span class="string">&#x27;,&#x27;</span></span><br><span class="line"><span class="attr">a1.sinks.k1.serializer.fieldnames</span> =emp<span class="literal">no</span>,ename,job,mgr,hiredate,sal,comm,dept<span class="literal">no</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use a channel which buffers events in memory</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory</span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bind the source and sink to the channel</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>按照上述操作之后会报错，原因 ： 缺少依赖包</p>
<p>报错信息如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">13</span> <span class="number">11</span>:<span class="number">19</span>:<span class="number">42</span>,<span class="number">806</span> (conf-file-poller-<span class="number">0</span>) <span class="selector-attr">[ERROR - org.apache.flume.node.PollingPropertiesFileConfigurationProvider$FileWatcherRunnable.run(PollingPropertiesFileConfigurationProvider.java:150)]</span> Failed to start agent because dependencies were not found <span class="keyword">in</span> classpath. Error follows.</span><br><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.NoClassDefFoundError</span>: org/apache/hive/hcatalog/streaming/RecordWriter</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.createSerializer</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">220</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.configure</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">203</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.conf</span><span class="selector-class">.Configurables</span><span class="selector-class">.configure</span>(Configurables<span class="selector-class">.java</span>:<span class="number">41</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.node</span><span class="selector-class">.AbstractConfigurationProvider</span><span class="selector-class">.loadSinks</span>(AbstractConfigurationProvider<span class="selector-class">.java</span>:<span class="number">453</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.node</span><span class="selector-class">.AbstractConfigurationProvider</span><span class="selector-class">.getConfiguration</span>(AbstractConfigurationProvider<span class="selector-class">.java</span>:<span class="number">106</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.node</span>.PollingPropertiesFileConfigurationProvider<span class="variable">$FileWatcherRunnable</span><span class="selector-class">.run</span>(PollingPropertiesFileConfigurationProvider<span class="selector-class">.java</span>:<span class="number">145</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span>.Executors<span class="variable">$RunnableAdapter</span><span class="selector-class">.call</span>(Executors<span class="selector-class">.java</span>:<span class="number">511</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.FutureTask</span><span class="selector-class">.runAndReset</span>(FutureTask<span class="selector-class">.java</span>:<span class="number">308</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span>.ScheduledThreadPoolExecutor<span class="variable">$ScheduledFutureTask</span>.access$<span class="number">301</span>(ScheduledThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">180</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span>.ScheduledThreadPoolExecutor<span class="variable">$ScheduledFutureTask</span><span class="selector-class">.run</span>(ScheduledThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">294</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.ThreadPoolExecutor</span><span class="selector-class">.runWorker</span>(ThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">1142</span>)</span><br><span class="line">	at java<span class="selector-class">.util</span><span class="selector-class">.concurrent</span>.ThreadPoolExecutor<span class="variable">$Worker</span><span class="selector-class">.run</span>(ThreadPoolExecutor<span class="selector-class">.java</span>:<span class="number">617</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">745</span>)</span><br><span class="line">Caused by: java<span class="selector-class">.lang</span><span class="selector-class">.ClassNotFoundException</span>: org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.RecordWriter</span></span><br><span class="line">	at java<span class="selector-class">.net</span><span class="selector-class">.URLClassLoader</span><span class="selector-class">.findClass</span>(URLClassLoader<span class="selector-class">.java</span>:<span class="number">381</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.ClassLoader</span><span class="selector-class">.loadClass</span>(ClassLoader<span class="selector-class">.java</span>:<span class="number">424</span>)</span><br><span class="line">	at sun<span class="selector-class">.misc</span>.Launcher<span class="variable">$AppClassLoader</span><span class="selector-class">.loadClass</span>(Launcher<span class="selector-class">.java</span>:<span class="number">331</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.ClassLoader</span><span class="selector-class">.loadClass</span>(ClassLoader<span class="selector-class">.java</span>:<span class="number">357</span>)</span><br><span class="line">	... <span class="number">13</span> more</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>而且其中的metastore要进行启动</p>
<h3 id="启动metastore"><a href="#启动metastore" class="headerlink" title="启动metastore"></a>启动metastore</h3><p><code>hive --service metastore</code></p>
<p>然后才能进去</p>
<p>上述错误是因为我们缺少依赖造成的是 <code>hive-hcatalog-streaming.jar</code></p>
<p>我们可以通过idea的maven项目进行下载</p>
<p>下载之后导入到我们的flume&#x2F;lib目录下，就可以运行了</p>
<p>然后还可能遇见以下的问题：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">22</span>/<span class="number">03</span>/<span class="number">24</span> <span class="number">11</span>:<span class="number">09</span>:<span class="number">26</span> WARN hive<span class="selector-class">.HiveSink</span>: k2 : Failed connecting to EndPoint &#123;metaStoreUri=<span class="string">&#x27;thrift://cdh-1:9083&#x27;</span>, database=<span class="string">&#x27;ods&#x27;</span>, table=<span class="string">&#x27;ods_flume_log&#x27;</span>, partitionVals=<span class="selector-attr">[20220324]</span> &#125;</span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span>.HiveWriter<span class="variable">$ConnectException</span>: Failed connecting to EndPoint &#123;metaStoreUri=<span class="string">&#x27;thrift://cdh-1:9083&#x27;</span>, database=<span class="string">&#x27;ods&#x27;</span>, table=<span class="string">&#x27;ods_flume_log&#x27;</span>, partitionVals=<span class="selector-attr">[20220324]</span> &#125;</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveWriter</span>.&lt;init&gt;(HiveWriter<span class="selector-class">.java</span>:<span class="number">99</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.getOrCreateWriter</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">346</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.drainOneBatch</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">297</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.process</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">254</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.DefaultSinkProcessor</span><span class="selector-class">.process</span>(DefaultSinkProcessor<span class="selector-class">.java</span>:<span class="number">67</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span>.SinkRunner<span class="variable">$PollingRunner</span><span class="selector-class">.run</span>(SinkRunner<span class="selector-class">.java</span>:<span class="number">145</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">748</span>)</span><br><span class="line">Caused by: org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.StreamingException</span>: Cannot stream to <span class="selector-tag">table</span> that has not been bucketed : &#123;metaStoreUri=<span class="string">&#x27;thrift://cdh-1:9083&#x27;</span>, database=<span class="string">&#x27;ods&#x27;</span>, table=<span class="string">&#x27;ods_flume_log&#x27;</span>, partitionVals=<span class="selector-attr">[20220324]</span> &#125;</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.AbstractRecordWriter</span>.&lt;init&gt;(AbstractRecordWriter<span class="selector-class">.java</span>:<span class="number">69</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.DelimitedInputWriter</span>.&lt;init&gt;(DelimitedInputWriter<span class="selector-class">.java</span>:<span class="number">115</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveDelimitedTextSerializer</span><span class="selector-class">.createRecordWriter</span>(HiveDelimitedTextSerializer<span class="selector-class">.java</span>:<span class="number">66</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveWriter</span>.&lt;init&gt;(HiveWriter<span class="selector-class">.java</span>:<span class="number">89</span>)</span><br><span class="line">	... <span class="number">6</span> more</span><br><span class="line"><span class="number">22</span>/<span class="number">03</span>/<span class="number">24</span> <span class="number">11</span>:<span class="number">09</span>:<span class="number">26</span> ERROR flume<span class="selector-class">.SinkRunner</span>: Unable to deliver event. Exception follows.</span><br><span class="line">org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.EventDeliveryException</span>: org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span>.HiveWriter<span class="variable">$ConnectException</span>: Failed connecting to EndPoint &#123;metaStoreUri=<span class="string">&#x27;thrift://cdh-1:9083&#x27;</span>, database=<span class="string">&#x27;ods&#x27;</span>, table=<span class="string">&#x27;ods_flume_log&#x27;</span>, partitionVals=<span class="selector-attr">[20220324]</span> &#125;</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.process</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">269</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.DefaultSinkProcessor</span><span class="selector-class">.process</span>(DefaultSinkProcessor<span class="selector-class">.java</span>:<span class="number">67</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span>.SinkRunner<span class="variable">$PollingRunner</span><span class="selector-class">.run</span>(SinkRunner<span class="selector-class">.java</span>:<span class="number">145</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">748</span>)</span><br><span class="line">Caused by: org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span>.HiveWriter<span class="variable">$ConnectException</span>: Failed connecting to EndPoint &#123;metaStoreUri=<span class="string">&#x27;thrift://cdh-1:9083&#x27;</span>, database=<span class="string">&#x27;ods&#x27;</span>, table=<span class="string">&#x27;ods_flume_log&#x27;</span>, partitionVals=<span class="selector-attr">[20220324]</span> &#125;</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveWriter</span>.&lt;init&gt;(HiveWriter<span class="selector-class">.java</span>:<span class="number">99</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.getOrCreateWriter</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">346</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.drainOneBatch</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">297</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveSink</span><span class="selector-class">.process</span>(HiveSink<span class="selector-class">.java</span>:<span class="number">254</span>)</span><br><span class="line">	... <span class="number">3</span> more</span><br><span class="line">Caused by: org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.StreamingException</span>: Cannot stream to <span class="selector-tag">table</span> that has not been bucketed : &#123;metaStoreUri=<span class="string">&#x27;thrift://cdh-1:9083&#x27;</span>, database=<span class="string">&#x27;ods&#x27;</span>, table=<span class="string">&#x27;ods_flume_log&#x27;</span>, partitionVals=<span class="selector-attr">[20220324]</span> &#125;</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.AbstractRecordWriter</span>.&lt;init&gt;(AbstractRecordWriter<span class="selector-class">.java</span>:<span class="number">69</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hive</span><span class="selector-class">.hcatalog</span><span class="selector-class">.streaming</span><span class="selector-class">.DelimitedInputWriter</span>.&lt;init&gt;(DelimitedInputWriter<span class="selector-class">.java</span>:<span class="number">115</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveDelimitedTextSerializer</span><span class="selector-class">.createRecordWriter</span>(HiveDelimitedTextSerializer<span class="selector-class">.java</span>:<span class="number">66</span>)</span><br><span class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.sink</span><span class="selector-class">.hive</span><span class="selector-class">.HiveWriter</span>.&lt;init&gt;(HiveWriter<span class="selector-class">.java</span>:<span class="number">89</span>)</span><br><span class="line">	... <span class="number">6</span> more</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个是因为Flume写入hive表时，需要hive表支持事务，所以hive表必须是事务表</p>
<h3 id="开启事务表"><a href="#开启事务表" class="headerlink" title="开启事务表"></a>开启事务表</h3><p>在hive命令行运行以下命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">SET</span> hive.support.concurrency = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">SET</span> hive.enforce.bucketing = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">SET</span> hive.exec.dynamic.partition.mode = nonstrict;</span><br><span class="line"><span class="built_in">SET</span> hive.txn.manager = org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;</span><br><span class="line"><span class="built_in">SET</span> hive.compactor.initiator.on = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">SET</span> hive.compactor.worker.threads = 1;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建分区分桶表并开启事务</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ods_flume_log(<span class="type">line</span> string) </span><br><span class="line">partitioned <span class="keyword">by</span> (dt string) </span><br><span class="line">clustered <span class="keyword">by</span> (<span class="type">line</span>) <span class="keyword">into</span> <span class="number">1</span> buckets </span><br><span class="line">stored <span class="keyword">as</span> orc tblproperties (<span class="string">&#x27;transactional&#x27;</span>=<span class="string">&#x27;true&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">partitioned <span class="keyword">by</span> (dt string) - 指定分区字段</span><br><span class="line">clustered <span class="keyword">by</span> (<span class="type">line</span>) – 指定分桶的字段</span><br><span class="line">stored <span class="keyword">as</span> orc - 分桶格式orc</span><br><span class="line">tblproperties (‘transactional’=‘<span class="keyword">true</span>’) - tblproperties可以添加一些hive属性，这里是开启事务</span><br><span class="line"></span><br><span class="line">我这里只有一个字段，因为按时间分区了，所以只设置了一个桶，各位看自己情况创建。</span><br><span class="line"></span><br><span class="line">再次运行Flume后，数据正常写入hive中</span><br></pre></td></tr></table></figure>

<h3 id="我们要不要使用双层flume-：-不要"><a href="#我们要不要使用双层flume-：-不要" class="headerlink" title="我们要不要使用双层flume ： 不要"></a>我们要不要使用双层flume ： 不要</h3><h3 id="avro"><a href="#avro" class="headerlink" title="avro"></a>avro</h3><p>使用场景 ： 第一个agent的输出作为第二个的输入</p>
<p>需求 ：读取1111端口的数据并发送到2222端口，然后把数据写入hdfs</p>
<p>分析 ： 两层flume</p>
<p>agent ：</p>
<ul>
<li>nc-mem-avro</li>
<li>avro-mem-hdfs&#x2F;logger</li>
</ul>
<p>agent1：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">a1<span class="selector-class">.sources</span> = r1</span><br><span class="line">a1<span class="selector-class">.sinks</span> = k1</span><br><span class="line">a1<span class="selector-class">.channels</span> = c1</span><br><span class="line"></span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.type</span> = netcat</span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.bind</span> = localhost</span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.port</span> = <span class="number">1111</span></span><br><span class="line"></span><br><span class="line">a1<span class="selector-class">.channels</span><span class="selector-class">.c1</span><span class="selector-class">.type</span> = memory</span><br><span class="line"></span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span><span class="selector-class">.type</span> = avro</span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span>.hostname=bigdata32</span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span>.port=<span class="number">2222</span></span><br><span class="line"></span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.channels</span> = c1</span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span><span class="selector-class">.channel</span> = c1</span><br></pre></td></tr></table></figure>

<p>agent2:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">a1<span class="selector-class">.sources</span> = r1</span><br><span class="line">a1<span class="selector-class">.sinks</span> = k1</span><br><span class="line">a1<span class="selector-class">.channels</span> = c1</span><br><span class="line"></span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.type</span> = avro</span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.bind</span> = bigdata32</span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.port</span> = <span class="number">2222</span></span><br><span class="line">a1<span class="selector-class">.channels</span><span class="selector-class">.c1</span><span class="selector-class">.type</span> = memory</span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span><span class="selector-class">.type</span> = logger</span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.channels</span> = c1</span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span><span class="selector-class">.channel</span> = c1</span><br></pre></td></tr></table></figure>

<h1 id="Source-kafka"><a href="#Source-kafka" class="headerlink" title="Source : kafka"></a>Source : kafka</h1><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">a1<span class="selector-class">.sources</span> = r1  </span><br><span class="line">a1<span class="selector-class">.channels</span> = c1  </span><br><span class="line">a1<span class="selector-class">.sinks</span> = k1  </span><br><span class="line">  </span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.type</span> = org<span class="selector-class">.apache</span><span class="selector-class">.flume</span><span class="selector-class">.source</span><span class="selector-class">.kafka</span><span class="selector-class">.KafkaSource</span></span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.batchSize</span> = <span class="number">5000</span></span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.batchDurationMillis</span> = <span class="number">2000</span></span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.kafka</span><span class="selector-class">.bootstrap</span><span class="selector-class">.servers</span> = bigdata3:<span class="number">9092</span>,bigdata4:<span class="number">9092</span>,bigdata5:<span class="number">9092</span></span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.kafka</span><span class="selector-class">.topics</span> = mytopic</span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span><span class="selector-class">.kafka</span><span class="selector-class">.consumer</span><span class="selector-class">.group</span><span class="selector-class">.id</span> = group1</span><br><span class="line">a1<span class="selector-class">.sources</span><span class="selector-class">.r1</span>.channels=c1  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1<span class="selector-class">.channels</span><span class="selector-class">.c1</span>.type=memory  </span><br><span class="line">a1<span class="selector-class">.channels</span><span class="selector-class">.c1</span>.capacity=<span class="number">1000</span>  </span><br><span class="line">a1<span class="selector-class">.channels</span><span class="selector-class">.c1</span>.transactionCapacity=<span class="number">100</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span>.type=logger  </span><br><span class="line">a1<span class="selector-class">.sinks</span><span class="selector-class">.k1</span>.channel=c1  </span><br></pre></td></tr></table></figure>

<h1 id="Sink-kafka"><a href="#Sink-kafka" class="headerlink" title="Sink : kafka"></a>Sink : kafka</h1><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">a1.sources</span> = r1</span><br><span class="line"><span class="attr">a1.sinks</span> = k1</span><br><span class="line"><span class="attr">a1.channels</span> = c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># netcat 监听端口</span></span><br><span class="line"><span class="attr">a1.sources.r1.type</span> = netcat</span><br><span class="line"><span class="attr">a1.sources.r1.bind</span> =master1</span><br><span class="line"><span class="attr">a1.sources.r1.port</span> = <span class="number">10000</span></span><br><span class="line"><span class="attr">a1.sources.r1.channels</span> = c1 </span><br><span class="line"><span class="comment"># 一行的最大字节数</span></span><br><span class="line"><span class="attr">a1.sources.r1.max-line-length</span> = <span class="number">1024000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># channels具体配置</span></span><br><span class="line"><span class="attr">a1.channels.c1.type</span> = memory </span><br><span class="line"><span class="attr">a1.channels.c1.capacity</span> = <span class="number">1000</span></span><br><span class="line"><span class="attr">a1.channels.c1.transactionCapacity</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># KAFKA_sinks</span></span><br><span class="line"><span class="attr">a1.sinks.k1.channel</span> = c1</span><br><span class="line"><span class="attr">a1.sinks.k1.type</span> = org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line"><span class="attr">a1.sinks.k1.topic</span> = hello</span><br><span class="line"><span class="attr">a1.sinks.k1.brokerList</span> = master1:<span class="number">9092</span>,slave1:<span class="number">9092</span>,slave2:<span class="number">9092</span></span><br><span class="line"><span class="attr">a1.sinks.k1.requiredAcks</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">a1.sinks.k1.batchSize</span> = <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h1 id="编写脚本："><a href="#编写脚本：" class="headerlink" title="编写脚本："></a>编写脚本：</h1><p>关于上述的文件每次更改都要进行一次的编写，为避免有些太麻烦了</p>
<p>于是我们可以通过编写shell脚本的方式进行编写</p>
<p>如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ $# -lt 3 ];then</span><br><span class="line">echo &quot;使用教程，把taildir的position路径改成自己的，还有hdfs的机器名改成自己的，以及hive的机器名，以及kafka的集群地址&quot;</span><br><span class="line">echo &quot;error more fouth was need&quot;</span><br><span class="line">echo &quot;Source channel Slink&quot;</span><br><span class="line">echo  &quot;第一个变量以及第二个变量分别是有几个channel和几个Sink flagSink=1 flagChannel=2 第三个参数是Source然后是其内部配置，然后是channel，以此类推，下面分别介绍各种配置参数&quot;</span><br><span class="line">echo &quot;source : exec sqoo avro taildir netcat&quot;</span><br><span class="line">echo &quot;taildir 选择模式:1是文件模式，2是文件夹模式，3是一起的 本地文件或者文件夹路径，最多支持一个文件以及一个文件夹，用，分割  具体的文件夹/文件路径 是不是开启阻断1是开启，其他是不开启 选择channel&quot;</span><br><span class="line">echo &quot;exec/spoo 文件/文件夹 是不是开启阻断 选择channel&quot;</span><br><span class="line">echo &quot;netcat/avro 主机ip 端口 是不是开启阻断 选择channel&quot;</span><br><span class="line">echo &quot;kafka topic名字 group.id batchSize batchDurationMillis&quot;</span><br><span class="line">echo &quot;阻断： type key value&quot;</span><br><span class="line">echo &quot;Channel : mem file&quot;</span><br><span class="line">echo &quot;mem 容量 事务容量 选择Sink&quot;</span><br><span class="line">echo &quot;file point文件夹 data文件夹 选择Sink&quot;</span><br><span class="line">echo &quot;Sink : hdfs hive avro logger&quot;</span><br><span class="line">echo &quot;hdfs hdfs上的路经 文件前缀 文件后缀 要不要打开压缩1是开启，其他是不开启 设置压缩格式（开启之后）&quot;</span><br><span class="line">echo &quot;hive hive数据库 hive表 差分文件的分隔符 输入表的分隔符 字段的映射&quot;</span><br><span class="line">echo &quot;avro 主机ip 端口&quot;</span><br><span class="line">echo &quot;kafka topic名字 ack模式： acks=0表明producer完全不管发送结果；acks=all或-1表明producer会等待ISR所有节点均写入后的响应结果；acks=1，表明producer会等待leader写入后的响应结果 batchSize：配置多少条消息可以在 一个处理批次 被发送到 Kafka Broker。较大的批可以提高吞吐量，同时增加延迟。&quot;</span><br><span class="line">echo &quot;logger&quot;</span><br><span class="line">echo &quot;文件命名采用随机数的方式+变量组合的方式&quot;</span><br><span class="line">echo  &quot;多通道例子   2 2 failover replicating 15000 10 6 taildir 1 &#x27;/home/hadoop/data/1.log&#x27; 1 static 1-boy boy mem 10000 10000 file /home/hadoop/data/flumepostion/ /home/hadoop/data/flumedata/ logger avro localhost 1111 0&quot;</span><br><span class="line">echo &quot;单通道 1 1 avro localhost 1111 0 file /home/hadoop/data/flumepostion/ /home/hadoop/data/flumedata/ logger 0&quot;</span><br><span class="line">echo &quot;最后一个参数是控制是不是开启http监控的监控端口是5555 1是开启监控 其他是不开启&quot;</span><br><span class="line">exit 1;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">filename=$(($RANDOM%9999+6))-$1-$2-$3</span><br><span class="line"></span><br><span class="line">echo &quot;a1.sources = r1 &quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line"></span><br><span class="line">Sinkhead=&quot;a1.sinks = &quot;</span><br><span class="line">Sinklist=&quot;&quot;</span><br><span class="line">flagSink=$1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function Sinkgt1()&#123;</span><br><span class="line">if [ $&#123;flagSink&#125; -ne 1 ];then</span><br><span class="line">for ((i=1;i&lt;=$&#123;flagSink&#125;;i++))</span><br><span class="line">do</span><br><span class="line">    Sinklist=$&#123;Sinklist&#125;k$i&quot; &quot;</span><br><span class="line">done</span><br><span class="line">echo $&#123;Sinkhead&#125;$&#123;Sinklist&#125; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sinkgroups = g1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sinkgroups.g1.sinks = &quot;$&#123;Sinklist&#125; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sinkgroups.g1.processor.type = $1&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">Channelgt1 $&#123;@:2&#125;</span><br><span class="line">else </span><br><span class="line">echo &quot;a1.sinks = k1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">Channelgt1 $&#123;@:1&#125;</span><br><span class="line">fi </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Channelhead=&quot;a1.channels = &quot;</span><br><span class="line">Channelist=&quot;&quot;</span><br><span class="line">flagChannel=$2</span><br><span class="line">SinkChannelHead=&quot;a1.sources.r1.channels = &quot;</span><br><span class="line"></span><br><span class="line">function Channelgt1()&#123;</span><br><span class="line">if [ $&#123;flagChannel&#125; -ne 1 ];then</span><br><span class="line">for ((i=1;i&lt;=$&#123;flagChannel&#125;;i++))</span><br><span class="line">do</span><br><span class="line">    Channelist=$&#123;Channelist&#125;c$i&quot; &quot;</span><br><span class="line">done</span><br><span class="line">echo $&#123;Channelhead&#125;$&#123;Channelist&#125; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo $&#123;SinkChannelHead&#125;$&#123;Channelist&#125; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sources.r1.selector.type = $1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">panduan $&#123;@:2&#125;</span><br><span class="line">else </span><br><span class="line">echo &quot;a1.channels = c1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sources.r1.channels = c1&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">panduan $&#123;@:1&#125;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function Fileordir()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    case $1 in</span><br><span class="line">    1)</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups = f1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups.f1 = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.headers.f1.headerKey1 = value1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.fileHeader = true&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.ri.maxBatchCount = 1000&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        case $3 in</span><br><span class="line">        1)</span><br><span class="line">        interceptors $&#123;@:4&#125;</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        selectchinnal $&#123;@:4&#125;</span><br><span class="line">        ;;</span><br><span class="line">        esac</span><br><span class="line">    ;;</span><br><span class="line">    2)</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups = f2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups.f2 = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.headers.f2.headerKey1 = value2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.headers.f2.headerKey2 = value2-2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.fileHeader = true&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.ri.maxBatchCount = 1000&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        case $3 in</span><br><span class="line">        1)</span><br><span class="line">        interceptors $&#123;@:4&#125;</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        selectchinnal $&#123;@:4&#125;</span><br><span class="line">        ;;</span><br><span class="line">        esac</span><br><span class="line">    ;;</span><br><span class="line">    3)</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups = f1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups.f1 = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.headers.f1.headerKey1 = value1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups = f2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.filegroups.f2 = $3&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.headers.f2.headerKey1 = value2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.headers.f2.headerKey2 = value2-2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.fileHeader = true&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.ri.maxBatchCount = 1000&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        case $4 in</span><br><span class="line">        1)</span><br><span class="line">        interceptors $&#123;@:5&#125;</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        selectchinnal $&#123;@:5&#125;</span><br><span class="line">        ;;</span><br><span class="line">        esac</span><br><span class="line">    ;; </span><br><span class="line">    esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function interceptors()&#123;</span><br><span class="line"></span><br><span class="line">echo &quot;a1.sources.r1.interceptors = example&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sources.r1.interceptors.example.type = $1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sources.r1.interceptors.example.key = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">echo &quot;a1.sources.r1.interceptors.example.value = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">selectchinnal $&#123;@:4&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flagChannellins=$&#123;flagChannel&#125;</span><br><span class="line">function selectchinnal() </span><br><span class="line">&#123;</span><br><span class="line">case $1 in</span><br><span class="line">    &quot;mem&quot;)</span><br><span class="line">        echo &quot;a1.channels.c$&#123;flagChannellins&#125;.type = memory&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.channels.c$&#123;flagChannellins&#125;.capacity = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.channels.c$&#123;flagChannellins&#125;.transactionCapacity = $3&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        flagChannellins=$(($&#123;flagChannellins&#125;-1))</span><br><span class="line">        if [ $&#123;flagChannellins&#125; == 0 ];then</span><br><span class="line">        selectSinks $&#123;@:4&#125;</span><br><span class="line">        else</span><br><span class="line">        selectchinnal $&#123;@:4&#125;</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">    &quot;file&quot;)</span><br><span class="line">        echo &quot;a1.channels.c$&#123;flagChannellins&#125;.type = file&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.channels.c$&#123;flagChannellins&#125;.checkpointDir = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.channels.c$&#123;flagChannellins&#125;.dataDirs = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        flagChannellins=$(($&#123;flagChannellins&#125;-1))</span><br><span class="line">        if [ $&#123;flagChannellins&#125; == 0 ];then</span><br><span class="line">        selectSinks $&#123;@:4&#125;</span><br><span class="line">        else</span><br><span class="line">        selectchinnal $&#123;@:4&#125;</span><br><span class="line">        fi</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">        echo &quot;无匹配的channel&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flagSinklins=$&#123;flagSink&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function selectSinks()</span><br><span class="line">&#123;</span><br><span class="line">        case $1 in</span><br><span class="line">            &quot;logger&quot;)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.type = logger&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlins</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:2&#125;</span><br><span class="line">                fi</span><br><span class="line"></span><br><span class="line">            ;;</span><br><span class="line">            &quot;hdfs&quot;)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.type = hdfs&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.path = hdfs://bigdata3:9000$2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.filePrefix = $3&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.fileSuffix = $4&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.writeFormat = Text&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.rollSize = 134217728&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.rollInterval = 21600&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.rollCount = 1000&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.round = true&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.roundUnit = minute&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.batchSize = 1200&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.roundValue = 21&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.useLocalTimeStamp = true&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                case $5 in </span><br><span class="line">                1)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.codeC = $6&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.fileType = CompressedStream&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlins $&#123;@:7&#125;</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:7&#125;</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">                *)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.fileType = DataStream&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlins $&#123;@:6&#125;</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:6&#125;</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">                esac</span><br><span class="line">            ;;</span><br><span class="line">            &quot;avro&quot;)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.type = avro &quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hostname=$2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.port=$3&quot;  &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlins $&#123;@:4&#125;</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:4&#125;</span><br><span class="line">                fi</span><br><span class="line">            ;;</span><br><span class="line">            &quot;hive&quot;)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.type = hive&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.serializer = DELIMITED&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hive.metastore = thrift://bigdata3:9083&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hive.database =$2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hive.table = $3&quot;  &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.serializer.delimiter = $4&quot;  &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.serializer.serdeSeparator = $5&quot;  &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.serializer.fieldnames =  $6&quot;  &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlinshive $&#123;@:7&#125;</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:7&#125;</span><br><span class="line">                fi</span><br><span class="line">            ;;</span><br><span class="line">            &quot;kafka&quot;)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.type = org.apache.flume.sink.kafka.KafkaSink&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.topic = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.brokerList = bigdata3:9092,bigdata4:9092,bigdata5:9092&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.requiredAcks = $3&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.batchSize = $4&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlinshive $&#123;@:5&#125;</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:5&#125;</span><br><span class="line">                fi</span><br><span class="line">            ;;</span><br><span class="line">            *)</span><br><span class="line">                echo &quot;无匹配的Sink&quot;</span><br><span class="line">                exit 1</span><br><span class="line">            ;;</span><br><span class="line">        esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function codeC()&#123;</span><br><span class="line">    case $5 in </span><br><span class="line">                1)</span><br><span class="line">                echo &quot;a1.sinks.k$&#123;flagSinklins&#125;.hdfs.codeC = $6&quot;</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlins</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:7&#125;</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">                *)</span><br><span class="line">                flagSinklins=$(($&#123;flagSinklins&#125;-1))</span><br><span class="line">                if [ $&#123;flagSinklins&#125; == 0 ];then</span><br><span class="line">                    cleanlins</span><br><span class="line">                else</span><br><span class="line">                selectSinks $&#123;@:6&#125;</span><br><span class="line">                fi</span><br><span class="line">                ;;</span><br><span class="line">                esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function cleanlins()</span><br><span class="line">&#123;</span><br><span class="line">cat ./$&#123;filename&#125;</span><br><span class="line">case $1 in</span><br><span class="line">1)</span><br><span class="line">flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file ./$&#123;filename&#125; -Dflume.root.logger=info,console --name a1 -Dflume.monitoring.type=http -Dflume.monitoring.port=5555</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file ./$&#123;filename&#125; -Dflume.root.logger=info,console --name a1</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">rm -rf ./$&#123;filename&#125;</span><br><span class="line">exit 99</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function cleanlinshive()&#123;</span><br><span class="line">cat ./$&#123;filename&#125;</span><br><span class="line">nohup hive --service metastore &gt; ~/log/metastore.log 1&gt;&amp;2 &amp;</span><br><span class="line">case $1 in</span><br><span class="line">1)</span><br><span class="line">flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file ./$&#123;filename&#125; -Dflume.root.logger=info,console --name a1 -Dflume.monitoring.type=http -Dflume.monitoring.port=5555</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">flume-ng agent --conf $&#123;FLUME_HOME&#125;/conf --conf-file ./$&#123;filename&#125; -Dflume.root.logger=info,console --name a1</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">rm -rf ./$&#123;filename&#125;</span><br><span class="line">exit 100</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function choicein()&#123;</span><br><span class="line">        case $1 in</span><br><span class="line">        1)</span><br><span class="line">        interceptors $&#123;@:2&#125;</span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        selectchinnal $&#123;@:2&#125;</span><br><span class="line">        ;;</span><br><span class="line">        esac</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function sourcechoice()&#123;</span><br><span class="line">    case $1 in</span><br><span class="line">    &quot;taildir&quot;)</span><br><span class="line">        echo &quot;a1.sources.r1.type = TAILDIR&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.positionFile = /home/hadoop/data/flumepostion/taildir_position.json&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        Fileordir $&#123;@:2&#125;</span><br><span class="line">    ;;</span><br><span class="line">    &quot;exec&quot;)</span><br><span class="line">        echo &quot;a1.sources.r1.type = exec&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.command = tail -F $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        choicein $&#123;@:3&#125;</span><br><span class="line">    ;;</span><br><span class="line">    &quot;spoo&quot;)</span><br><span class="line">        echo &quot;a1.sources.r1.type = spooldir&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.spoolDir = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.fileHeader = true&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        choicein $&#123;@:3&#125;</span><br><span class="line">    ;;</span><br><span class="line">    &quot;avro&quot;)</span><br><span class="line">        echo &quot;a1.sources.r1.type = avro&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.bind = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.port = $3&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        choicein $&#123;@:4&#125;</span><br><span class="line">    ;;</span><br><span class="line">    &quot;netcat&quot;)</span><br><span class="line">        echo &quot;a1.sources.r1.type = netcat&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.bind = $2&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        echo &quot;a1.sources.r1.port = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">        choicein $&#123;@:4&#125;</span><br><span class="line">    ;;</span><br><span class="line">    &quot;kafka&quot;)</span><br><span class="line">    echo &quot;a1.sources.r1.type = org.apache.flume.source.kafka.KafkaSource&quot; &gt;&gt;./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sources.r1.kafka.bootstrap.servers = bigdata3:9092,bigdata4:9092,bigdata5:9092&quot; &gt;&gt;./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sources.r1.kafka.topics = $2&quot; &gt;&gt;./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sources.r1.kafka.consumer.group.id = $3&quot; &gt;&gt;./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sources.r1.batchSize = $4&quot;  &gt;&gt;./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sources.r1.batchDurationMillis = $5&quot; &gt;&gt;./$&#123;filename&#125;</span><br><span class="line">    choicein $&#123;@:6&#125;</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">        echo &quot;无匹配的source&quot;</span><br><span class="line">        exit 1</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function panduan()&#123;</span><br><span class="line">if [ $&#123;flagSink&#125; -ne 1 ] &amp;&amp; [ $&#123;flagChannel&#125; == 1 ];then</span><br><span class="line">for ((i=1;i&lt;=$&#123;flagSink&#125;;i++))</span><br><span class="line">do</span><br><span class="line">echo &quot;a1.sinks.k$&#123;i&#125;.channel = c1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">done</span><br><span class="line">echo &quot;a1.sinkgroups.g1.processor.maxpenalty = $1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">case $&#123;flagSink&#125; in</span><br><span class="line">2)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    sourcechoice $&#123;@:4&#125;</span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:5&#125;</span><br><span class="line">;;</span><br><span class="line">4)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:6&#125;</span><br><span class="line">;;</span><br><span class="line">5)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:7&#125;</span><br><span class="line">;;</span><br><span class="line">6)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k6 = $7&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:8&#125;</span><br><span class="line">;;</span><br><span class="line">7)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k6 = $7&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k7 = $8&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:9&#125;</span><br><span class="line">;;</span><br><span class="line">8)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k6 = $7&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k7 = $8&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k8 = $9&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:10&#125;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;超出限制8个&quot;</span><br><span class="line">exit 10000</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ $&#123;flagSink&#125; == 1 ] &amp;&amp; [ $&#123;flagChannel&#125; -ne 1 ];then</span><br><span class="line">for ((i=1;i&lt;=$&#123;flagChannel&#125;;i++))</span><br><span class="line">do</span><br><span class="line">echo &quot;a1.sinks.k1.channel = c$&#123;i&#125;&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">done</span><br><span class="line">sourcechoice $&#123;@:1&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ $&#123;flagSink&#125; -ne 1 ] &amp;&amp; [ $&#123;flagChannel&#125; -ne 1 ];then</span><br><span class="line">for ((i=1;i&lt;=$&#123;flagSink&#125;;i++))</span><br><span class="line">do</span><br><span class="line">echo &quot;a1.sinks.k$&#123;i&#125;.channel = c$&#123;i&#125;&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">done</span><br><span class="line">echo &quot;a1.sinkgroups.g1.processor.maxpenalty = $1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">case $&#123;flagSink&#125; in</span><br><span class="line">2)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    sourcechoice $&#123;@:4&#125;</span><br><span class="line">;;</span><br><span class="line">3)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:5&#125;</span><br><span class="line">;;</span><br><span class="line">4)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:6&#125;</span><br><span class="line">;;</span><br><span class="line">5)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:7&#125;</span><br><span class="line">;;</span><br><span class="line">6)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k6 = $7&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:8&#125;</span><br><span class="line">;;</span><br><span class="line">7)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k6 = $7&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k7 = $8&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:9&#125;</span><br><span class="line">;;</span><br><span class="line">8)</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k1 = $2&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k2 = $3&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k3 = $4&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k4 = $5&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k5 = $6&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k6 = $7&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k7 = $8&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">    echo &quot;a1.sinkgroups.g1.processor.priority.k8 = $9&quot;&gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">     sourcechoice $&#123;@:10&#125;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;超出限制8个&quot;</span><br><span class="line">exit 10000</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if [ $&#123;flagSink&#125; == 1 ] &amp;&amp; [ $&#123;flagChannel&#125; == 1 ];then</span><br><span class="line">echo &quot;a1.sinks.k1.channel = c1&quot; &gt;&gt; ./$&#123;filename&#125;</span><br><span class="line">sourcechoice $&#123;@:1&#125;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sinkgt1 $&#123;@:3&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="channel-file"><a href="#channel-file" class="headerlink" title="channel:file"></a>channel:file</h1><p>关于Filechannel的例子官方是如下介绍的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a1.channels = c1</span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">a1.channels.c1.checkpointDir = /mnt/flume/checkpoint</span><br><span class="line">a1.channels.c1.dataDirs = /mnt/flume/data</span><br></pre></td></tr></table></figure>

<p>于是我们可以写个简单的agent：taidir-file-logger</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">example.conf: A single-node Flume configuration</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name the components on this agent</span></span><br><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe/configure the <span class="built_in">source</span></span></span><br><span class="line">a1.sources.r1.type = TAILDIR</span><br><span class="line">a1.sources.r1.positionFile = /home/hadoop/data/flumepostion/taildir_position.json</span><br><span class="line">a1.sources.r1.filegroups = f1</span><br><span class="line">a1.sources.r1.filegroups.f1 = /home/hadoop/data/try.txt</span><br><span class="line">a1.sources.r1.headers.f1.headerKey1 = value1</span><br><span class="line">a1.sources.r1.fileHeader = true</span><br><span class="line">a1.sources.ri.maxBatchCount = 1000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Describe the sink</span></span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use a channel <span class="built_in">which</span> buffers events <span class="keyword">in</span> memory</span></span><br><span class="line">a1.channels.c1.type = file</span><br><span class="line">a1.channels.c1.checkpointDir = /home/hadoop/data/flumefilepostion</span><br><span class="line">a1.channels.c1.dataDirs = /home/hadoop/data/flumedata</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Bind the <span class="built_in">source</span> and sink to the channel</span></span><br><span class="line">a1.sources.r1.channels = c1</span><br><span class="line">a1.sinks.k1.channel = c1</span><br></pre></td></tr></table></figure>

<p>就可以了</p>
<p>关于flume的负载问题</p>
<p>我们可以设置Sink的负载就是当是多个数据输出的时候</p>
<p>可以设置负载策略，可以让它变成随机发送，或者是轮询发送等</p>
<p>均衡 ： load_balance ： 将数据分开，提供并行度的功能 减轻sink 的压力 如果突然输出的agent挂掉，数据都会发送到没有挂的Sink的agent上，但是会有个超时时间，才会进行上述所说</p>
<p>需要设置两个参数</p>
<p>容灾 ： sink出现问题的</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">processor<span class="selector-class">.backoff</span>  true </span><br><span class="line">processor<span class="selector-class">.selector</span>.maxTimeOut</span><br></pre></td></tr></table></figure>

<p>设置多个Sink的agent</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">agent1：</span><br><span class="line">agent1.sources = r1</span><br><span class="line">agent1.sinks = k1 k2</span><br><span class="line">agent1.channels = c1</span><br><span class="line"></span><br><span class="line">agent1.sources.r1.type = netcat</span><br><span class="line">agent1.sources.r1.bind = bigdata32</span><br><span class="line">agent1.sources.r1.port = 1111</span><br><span class="line"></span><br><span class="line">agent1.channels.c1.type = memory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 2222</span></span><br><span class="line">agent1.sinks.k1.type = avro</span><br><span class="line">agent1.sinks.k1.hostname = bigdata32</span><br><span class="line">agent1.sinks.k1.port = 2222</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 3333</span></span><br><span class="line">agent1.sinks.k2.type = avro</span><br><span class="line">agent1.sinks.k2.hostname = bigdata32</span><br><span class="line">agent1.sinks.k2.port = 3333</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink processers</span></span><br><span class="line">agent1.sinkgroups = g1</span><br><span class="line">agent1.sinkgroups.g1.sinks = k1 k2</span><br><span class="line">agent1.sinkgroups.g1.processor.type = load_balance</span><br><span class="line">agent1.sinkgroups.g1.processor.backoff = true</span><br><span class="line">agent1.sinkgroups.g1.processor.selector = round_robin</span><br><span class="line"></span><br><span class="line">agent1.sources.r1.channels = c1</span><br><span class="line">agent1.sinks.k1.channel = c1</span><br><span class="line">agent1.sinks.k2.channel = c1</span><br><span class="line"></span><br><span class="line">agent2：2222端口</span><br><span class="line">agent2.sources = r1</span><br><span class="line">agent2.sinks = k1</span><br><span class="line">agent2.channels = c1</span><br><span class="line"></span><br><span class="line">agent2.sources.r1.type = avro</span><br><span class="line">agent2.sources.r1.bind = bigdata32</span><br><span class="line">agent2.sources.r1.port = 2222</span><br><span class="line"></span><br><span class="line">agent2.channels.c1.type = memory</span><br><span class="line">agent2.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">agent2.sources.r1.channels = c1</span><br><span class="line">agent2.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">agent3: 3333端口</span><br><span class="line">agent3.sources = r1</span><br><span class="line">agent3.sinks = k1</span><br><span class="line">agent3.channels = c1</span><br><span class="line"></span><br><span class="line">agent3.sources.r1.type = avro</span><br><span class="line">agent3.sources.r1.bind = bigdata32</span><br><span class="line">agent3.sources.r1.port = 3333</span><br><span class="line"></span><br><span class="line">agent3.channels.c1.type = memory</span><br><span class="line">agent3.sinks.k1.type = logger</span><br><span class="line"></span><br><span class="line">agent3.sources.r1.channels = c1</span><br><span class="line">agent3.sinks.k1.channel = c1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动我们的agent</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">启动agent： </span><br><span class="line">	从后往前 启动 </span><br><span class="line"></span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent3 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/sink/agent3.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent2 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/sink/agent2.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent1 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/sink/agent1.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line">telnet bigdata32 1111</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后可以设置策略</p>
<p><code>agent1.sinkgroups.g1.processor.selector = round_robin ： 这个是轮询策略，就是一个换一个的</code></p>
<p><code>agent1.sinkgroups.g1.processor.selector = random ： 这个是随机策略的</code></p>
<p>负载，相当于是多几个备用通道，通过不同优先级进行设置通道</p>
<h1 id="Source的组件"><a href="#Source的组件" class="headerlink" title="Source的组件"></a>Source的组件</h1><p>拦截器 ： 数据转换 或者数据清洗的</p>
<p>channel选择器 ：把采集过来的数据发送到那一个channel里面</p>
<h1 id="SInk组件"><a href="#SInk组件" class="headerlink" title="SInk组件"></a>SInk组件</h1><p>Sink组件就是上述的Sink processers ：把采集的数据发送到哪一个sink上</p>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>定义一个agent 端口 1111 采集数据</p>
<p>一个发送到hdfs上</p>
<p>另外一个发送到logger上</p>
<p>架构图就出来了 ：</p>
<p>source -&gt;</p>
<ul>
<li>channel -&gt; sink -&gt;logger</li>
<li>channel -&gt; sink -&gt;hdfs</li>
</ul>
<h2 id="思考如何配置channel选择器"><a href="#思考如何配置channel选择器" class="headerlink" title="思考如何配置channel选择器"></a>思考如何配置channel选择器</h2><p>官网如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.channels = c1 c2 c3</span><br><span class="line">a1.sources.r1.selector.type = replicating</span><br><span class="line">a1.sources.r1.channels = c1 c2 c3</span><br><span class="line">a1.sources.r1.selector.optional = c3</span><br></pre></td></tr></table></figure>

<p>我们自己写的如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">agent1.sources = r1</span><br><span class="line">agent1.sinks = k1 k2</span><br><span class="line">agent1.channels = c1 c2</span><br><span class="line"></span><br><span class="line">agent1.sources.r1.type = netcat</span><br><span class="line">agent1.sources.r1.bind = bigdata3</span><br><span class="line">agent1.sources.r1.port = 1111</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0 配置<span class="built_in">source</span> channle</span></span><br><span class="line">agent1.sources.r1.selector.type = replicating</span><br><span class="line">agent1.sources.r1.channels = c1 c2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.配置两个channel</span></span><br><span class="line">agent1.channels.c1.type = memory</span><br><span class="line">agent1.channels.c2.type = memory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink hdfs</span></span><br><span class="line">agent1.sinks.k1.type = hdfs</span><br><span class="line">agent1.sinks.k1.hdfs.path = hdfs://bigdata3:9000/flume/channel_selector/</span><br><span class="line">agent1.sinks.k1.hdfs.fileType=DataStream</span><br><span class="line">agent1.sinks.k1.hdfs.writeFormat=Text</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件前后缀</span></span><br><span class="line">agent1.sinks.k1.hdfs.filePrefix=events</span><br><span class="line">agent1.sinks.k1.hdfs.fileSuffix=.log</span><br><span class="line">agent1.sinks.k1.hdfs.useLocalTimeStamp=true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件滚动</span></span><br><span class="line">agent1.sinks.k1.hdfs.rollInterval=60</span><br><span class="line">agent1.sinks.k1.hdfs.rollSize=134217728</span><br><span class="line">agent1.sinks.k1.hdfs.rollCount=1000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink logger</span></span><br><span class="line">agent1.sinks.k2.type = logger</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义 连接</span></span><br><span class="line">agent1.sources.r1.channels = c1 c2</span><br><span class="line">agent1.sinks.k1.channel = c1</span><br><span class="line">agent1.sinks.k2.channel = c2</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>作业 ：用三个agent 完成上面的事情</p>
<p>代码如下 ：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1 k2</span><br><span class="line">a1.channels = c1 c2</span><br><span class="line"></span><br><span class="line">a1.sources.r1.type = netcat</span><br><span class="line">a1.sources.r1.bind = bigdata3</span><br><span class="line">a1.sources.r1.port = 1111</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0 配置<span class="built_in">source</span> channle</span></span><br><span class="line">a1.sources.r1.selector.type = replicating</span><br><span class="line">a1.sources.r1.channels = c1 c2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.配置两个channel</span></span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c2.type = memory</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 2222</span></span><br><span class="line">a1.sinks.k1.type = avro</span><br><span class="line">a1.sinks.k1.hostname = bigdata3</span><br><span class="line">a1.sinks.k1.port = 2222</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 3333</span></span><br><span class="line">a1.sinks.k2.type = avro</span><br><span class="line">a1.sinks.k2.hostname = bigdata3</span><br><span class="line">a1.sinks.k2.port = 3333</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义 连接</span></span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line">a1.sinks.k2.channel = c2</span><br></pre></td></tr></table></figure>

<p>然后我们书写端口的agent</p>
<p>2222端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind = bigdata3 </span><br><span class="line">a1.sources.r1.port = 2222 </span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 15000</span><br><span class="line">a1.channels.c1.transactionCapacity = 15000</span><br><span class="line">a1.sinks.k1.type = hdfs</span><br><span class="line">a1.sinks.k1.hdfs.path = hdfs://bigdata3:9000/data</span><br><span class="line">a1.sinks.k1.hdfs.filePrefix = com</span><br><span class="line">a1.sinks.k1.hdfs.fileSuffix = .test</span><br><span class="line">a1.sinks.k1.hdfs.fileType = DataStream</span><br><span class="line">a1.sinks.k1.hdfs.writeFormat = Text</span><br><span class="line">a1.sinks.k1.hdfs.rollSize = 134217728</span><br><span class="line">a1.sinks.k1.hdfs.rollInterval = 21600</span><br><span class="line">a1.sinks.k1.hdfs.rollCount = 1000</span><br><span class="line">a1.sinks.k1.hdfs.round = true</span><br><span class="line">a1.sinks.k1.hdfs.roundUnit = minute</span><br><span class="line">a1.sinks.k1.hdfs.batchSize = 1200</span><br><span class="line">a1.sinks.k1.hdfs.roundValue = 21</span><br><span class="line">a1.sinks.k1.hdfs.useLocalTimeStamp = true</span><br><span class="line">a1.sources.r1.channels = c1 </span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3333端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a1.sources = r1</span><br><span class="line">a1.sinks = k1</span><br><span class="line">a1.channels = c1</span><br><span class="line">a1.sources.r1.type = avro</span><br><span class="line">a1.sources.r1.bind = bigdata3 </span><br><span class="line">a1.sources.r1.port = 3333 </span><br><span class="line">a1.channels.c1.type = memory</span><br><span class="line">a1.channels.c1.capacity = 15000</span><br><span class="line">a1.channels.c1.transactionCapacity = 15000</span><br><span class="line">a1.sinks.k1.type = logger</span><br><span class="line">a1.sources.r1.channels = c1 </span><br><span class="line">a1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>flume里官方提供的拦截器很多，不过我们一般都不用，只用自己研发的</p>
<p>拦截器需求 ：</p>
<p>现在有三个数据源 ： 分别是1111端口，1112端口，1113端口，通过拦截器把数据分别发送过去</p>
<p>agent如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">agent1:</span><br><span class="line">agent1.sources = r1</span><br><span class="line">agent1.sinks = k1</span><br><span class="line">agent1.channels = c1</span><br><span class="line"></span><br><span class="line">agent1.sources.r1.type = netcat</span><br><span class="line">agent1.sources.r1.bind = bigdata32</span><br><span class="line">agent1.sources.r1.port = 1111</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加一个拦截器 =》 数据清洗 + event打标签</span></span><br><span class="line">agent1.sources.r1.interceptors = i1</span><br><span class="line">agent1.sources.r1.interceptors.i1.type = static</span><br><span class="line">agent1.sources.r1.interceptors.i1.key = dl2262</span><br><span class="line">agent1.sources.r1.interceptors.i1.value = boy</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0 配置<span class="built_in">source</span> channle</span></span><br><span class="line">agent1.sources.r1.channels = c1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.配置两个channel</span></span><br><span class="line">agent1.channels.c1.type = memory</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 2222</span></span><br><span class="line">agent1.sinks.k1.type = avro</span><br><span class="line">agent1.sinks.k1.hostname = bigdata32</span><br><span class="line">agent1.sinks.k1.port = 2222</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义 连接</span></span><br><span class="line">agent1.sources.r1.channels = c1</span><br><span class="line">agent1.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">agent2:</span><br><span class="line">agent2.sources = r1</span><br><span class="line">agent2.sinks = k1</span><br><span class="line">agent2.channels = c1</span><br><span class="line"></span><br><span class="line">agent2.sources.r1.type = netcat</span><br><span class="line">agent2.sources.r1.bind = bigdata32</span><br><span class="line">agent2.sources.r1.port = 1112</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加一个拦截器 =》 数据清洗 + event打标签</span></span><br><span class="line">agent2.sources.r1.interceptors = i1</span><br><span class="line">agent2.sources.r1.interceptors.i1.type = static</span><br><span class="line">agent2.sources.r1.interceptors.i1.key = dl2262</span><br><span class="line">agent2.sources.r1.interceptors.i1.value = girl</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0 配置<span class="built_in">source</span> channle</span></span><br><span class="line">agent2.sources.r1.channels = c1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.配置两个channel</span></span><br><span class="line">agent2.channels.c1.type = memory</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 2222</span></span><br><span class="line">agent2.sinks.k1.type = avro</span><br><span class="line">agent2.sinks.k1.hostname = bigdata32</span><br><span class="line">agent2.sinks.k1.port = 2222</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义 连接</span></span><br><span class="line">agent2.sources.r1.channels = c1</span><br><span class="line">agent2.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line">agent3:</span><br><span class="line">agent3.sources = r1</span><br><span class="line">agent3.sinks = k1</span><br><span class="line">agent3.channels = c1</span><br><span class="line"></span><br><span class="line">agent3.sources.r1.type = netcat</span><br><span class="line">agent3.sources.r1.bind = bigdata32</span><br><span class="line">agent3.sources.r1.port = 1113</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加一个拦截器 =》 数据清洗 + event打标签</span></span><br><span class="line">agent3.sources.r1.interceptors = i1</span><br><span class="line">agent3.sources.r1.interceptors.i1.type = static</span><br><span class="line">agent3.sources.r1.interceptors.i1.key = dl2262</span><br><span class="line">agent3.sources.r1.interceptors.i1.value = tea</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0 配置<span class="built_in">source</span> channle</span></span><br><span class="line">agent3.sources.r1.channels = c1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.配置两个channel</span></span><br><span class="line">agent3.channels.c1.type = memory</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink 2222</span></span><br><span class="line">agent3.sinks.k1.type = avro</span><br><span class="line">agent3.sinks.k1.hostname = bigdata32</span><br><span class="line">agent3.sinks.k1.port = 2222</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义 连接</span></span><br><span class="line">agent3.sources.r1.channels = c1</span><br><span class="line">agent3.sinks.k1.channel = c1</span><br><span class="line"></span><br><span class="line">agent4:</span><br><span class="line"></span><br><span class="line">agent4.sources = r1</span><br><span class="line">agent4.sinks = k1 k2 k3</span><br><span class="line">agent4.channels = c1 c2 c3</span><br><span class="line"></span><br><span class="line">agent4.sources.r1.type = avro</span><br><span class="line">agent4.sources.r1.bind = bigdata32</span><br><span class="line">agent4.sources.r1.port = 2222</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0 配置<span class="built_in">source</span> channle</span></span><br><span class="line">agent4.sources.r1.selector.type = multiplexing</span><br><span class="line">agent4.sources.r1.selector.header = dl2262</span><br><span class="line">agent4.sources.r1.selector.mapping.boy = c1</span><br><span class="line">agent4.sources.r1.selector.mapping.girl = c2</span><br><span class="line">agent4.sources.r1.selector.default = c3</span><br><span class="line">agent4.sources.r1.channels = c1 c2 c3</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1.配置两个channel</span></span><br><span class="line">agent4.channels.c1.type = memory</span><br><span class="line">agent4.channels.c2.type = memory</span><br><span class="line">agent4.channels.c3.type = memory</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义sink logger</span></span><br><span class="line">agent4.sinks.k1.type =logger</span><br><span class="line">agent4.sinks.k2.type =logger</span><br><span class="line">agent4.sinks.k3.type =logger</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定义 连接</span></span><br><span class="line">agent4.sources.r1.channels = c1 c2 c3</span><br><span class="line">agent4.sinks.k1.channel = c1</span><br><span class="line">agent4.sinks.k2.channel = c2</span><br><span class="line">agent4.sinks.k3.channel = c3</span><br><span class="line"></span><br><span class="line">启动：</span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent4 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/many2one/agent4.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent3 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/many2one/agent3.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent2 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/many2one/agent2.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line">flume-ng agent \</span><br><span class="line">--name agent1 \</span><br><span class="line">--conf $&#123;FLUME_HOME&#125;/conf \</span><br><span class="line">--conf-file /home/hadoop/project/flume/many2one/agent1.conf \</span><br><span class="line">-Dflume.root.logger=info,console</span><br><span class="line"></span><br><span class="line">telnet bigdata32 1111</span><br><span class="line">telnet bigdata32 1112</span><br><span class="line">telnet bigdata32 1113</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><h2 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h2><p>默认的容量 ： 就是存储的容量capacity</p>
<p>事务容量 ： 就是发生错误的时候可以回撤的条数，包括写进去的时候的事务 transactionCapacity</p>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>source ：</p>
<p>channel ：</p>
<p>sink ：当sink突然采集的数据变少，可能是上述两个组件出问题了</p>
<h3 id="监控手段"><a href="#监控手段" class="headerlink" title="监控手段"></a>监控手段</h3><p>flume的ganglia框架，监控</p>
<p>agent启动一些参数获取这三个组件的相关指标</p>
<p>建议用第二个：因为简单，因为第一个要安装ganglia</p>
<p>对于第二种是获取json数据进而获取的，通过采集http的接口数据，如何通过dataease或者superset进行可视化，或者给前端人员</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在命令行加上命令就可以啦</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">flume-ng agent -c . -f conf/exec-tail.conf -n a1 -Dflume.root.<span class="attribute">logger</span>=INFO,console -Dflume.monitoring.<span class="attribute">type</span>=http -Dflume.monitoring.<span class="attribute">port</span>=1234</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>flume</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper</title>
    <url>/2022/12/15/12-15/</url>
    <content><![CDATA[<h1 id="hive的抓取策略"><a href="#hive的抓取策略" class="headerlink" title="hive的抓取策略"></a>hive的抓取策略</h1><p>什么是hive的抓取策略呢，举个简单的例子,当我们用 <code>select * from xxx</code>的时候它不会走mr阶段，会直接出来，可是有时候会走mr这个是由什么控制的？就是由我们的hive的抓取策略决定的</p>
<p>我们还可以在配置文件中进行更改，把不要mr的代码变多</p>
<p><code>hive/conf/hive-default.xml.template -》 2637行，修改hive.fetch.task.conversion为more；</code></p>
<p>就相当于把全局查找，字段查找，filter查找，limit查找等都不走MR，直接Fetch</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">  &lt;<span class="type">name</span>&gt;hive.<span class="keyword">fetch</span>.task.<span class="keyword">conversion</span>&lt;/<span class="type">name</span>&gt;</span><br><span class="line">  &lt;<span class="keyword">value</span>&gt;more&lt;/<span class="keyword">value</span>&gt;</span><br><span class="line">  &lt;description&gt;</span><br><span class="line">    Expects one <span class="keyword">of</span> [<span class="keyword">none</span>, minimal, more].</span><br><span class="line">    <span class="keyword">Some</span> <span class="keyword">select</span> queries can be converted <span class="keyword">to</span> single <span class="keyword">FETCH</span> task minimizing latency.</span><br><span class="line">    Currently the query should be single sourced <span class="keyword">not</span> <span class="keyword">having</span> <span class="keyword">any</span> subquery <span class="keyword">and</span> should <span class="keyword">not</span> have</span><br><span class="line">    <span class="keyword">any</span> aggregations <span class="keyword">or</span> distincts (which incurs RS), <span class="keyword">lateral</span> views <span class="keyword">and</span> joins.</span><br><span class="line">    <span class="number">0.</span> <span class="keyword">none</span> : <span class="keyword">disable</span> hive.<span class="keyword">fetch</span>.task.<span class="keyword">conversion</span></span><br><span class="line">    <span class="number">1.</span> minimal : <span class="keyword">SELECT</span> STAR, <span class="keyword">FILTER</span> <span class="keyword">on</span> <span class="keyword">partition</span> <span class="keyword">columns</span>, <span class="keyword">LIMIT</span> <span class="keyword">only</span></span><br><span class="line">    <span class="number">2.</span> more    : <span class="keyword">SELECT</span>, <span class="keyword">FILTER</span>, <span class="keyword">LIMIT</span> <span class="keyword">only</span> (support <span class="keyword">TABLESAMPLE</span> <span class="keyword">and</span> virtual <span class="keyword">columns</span>)</span><br><span class="line">  &lt;/description&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure>

<p>然后还可以设置 ：</p>
<p> 用户可以通过设置hive.exec.mode.local.auto的值为true，来让Hive在适当的时候自动启动这个优化。</p>
<p>set hive.exec.mode.local.auto&#x3D;true; &#x2F;&#x2F;开启本地mr</p>
<p>设置local mr的最大输入数据量，当输入数据量小于这个值时采用local mr的方式，默认为134217728，即128M</p>
<p>set hive.exec.mode.local.auto.inputbytes.max&#x3D;51234560;</p>
<p>设置local mr的最大输入文件个数，当输入文件个数小于这个值时采用local mr的方式，默认为4</p>
<p>set hive.exec.mode.local.auto.input.files.max&#x3D;10;</p>
<p>调整hive里的切片大小 ：</p>
<p>mapreduce.input.fileinputformat.split.maxsize</p>
<p>mapreduce.input.fileinputformat.split.minsize</p>
<p>maxsize（切片最大值）：参数如果调得比blockSize小，则会让切片变小，而且就等于配置的这个参数的值。<br>minsize（切片最小值）：参数调的比blockSize大，则可以让切片变得比blockSize还大。</p>
<h1 id="sql调优（speed）"><a href="#sql调优（speed）" class="headerlink" title="sql调优（speed）"></a>sql调优（speed）</h1><h2 id="小表join大表"><a href="#小表join大表" class="headerlink" title="小表join大表"></a>小表join大表</h2><p>当小表Join大表时，如果不指定MapJoin，那么hive解析器会将join操作转换为Common Join操作，在Reduce端完成join，容易发生<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C&spm=1001.2101.3001.7020">数据倾斜</a>。开启MapJoin后可以将小表全部加载到内存中，在map端进行join，避免reducer处理。</p>
<p>优点 ：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">（<span class="number">1</span>）没有reducer处理，就不会产生数据倾斜；</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）没有Map -&gt; Reduce中间的shuffle操作，避免了IO</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 开启MapJoin设置</span><br><span class="line">（<span class="number">1</span>）设置自动选择MapJoin，默认是<span class="literal">true</span></span><br><span class="line">set hive.auto.<span class="built_in">convert</span>.<span class="built_in">join</span> = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">（<span class="number">2</span>）设置小表阈值，默认是25M</span><br><span class="line">set hive.mapjoin.smalltable.filesize=<span class="number">25000000</span>;</span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>. 再大表<span class="built_in">join</span>小表，与小表<span class="built_in">join</span>大表，执行速率几乎相等</span><br><span class="line"></span><br><span class="line">Hive中mapjoin的原理：</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>-side <span class="built_in">join</span>：</span><br><span class="line"></span><br><span class="line">小表数据映射成一张hashtable，再上传到分布式节点的内存中；</span><br><span class="line">大表进行分片，每个节点一部分数据，大表数据文件作为<span class="built_in">map</span>端输入，对<span class="built_in">map</span>()函数每一对输入的kv都与已加载到内存中的小表数据连接，</span><br><span class="line">把连接结果按<span class="built_in">key</span>输出，有多少个<span class="built_in">map</span> task，产生多少个结果文件；</span><br><span class="line">由于<span class="built_in">join</span>操作在<span class="built_in">map</span> task中完成，所以无需启动reduce task，没有shuffle操作和reduce端，避免io和数据倾斜</span><br><span class="line"></span><br><span class="line">reduce-side <span class="built_in">join</span>：</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>端把结果按<span class="built_in">key</span>输出，并在value中标记出数据来源于table1还是table2</span><br><span class="line">因为在shuffle阶段已经按<span class="built_in">key</span>分组，reduce阶段会判断每个value来自哪张表，然后两表相同<span class="built_in">key</span>的记录连接</span><br><span class="line"><span class="built_in">join</span>操作在reduce task中完成</span><br><span class="line"></span><br><span class="line">缺点<span class="number">1</span>：在<span class="built_in">map</span>阶段没有对数据瘦身，shuffle的网络传输和排序性能很低</span><br><span class="line">缺点<span class="number">2</span>：reduce对<span class="number">2</span>个集合做城际计算，很耗内存，容易造成oom</span><br></pre></td></tr></table></figure>

<h2 id="大表join大表"><a href="#大表join大表" class="headerlink" title="大表join大表"></a>大表join大表</h2><p>有时join超时是因为某些key对应的数据太多了。由于相同的key对应的数据都会发送到相同的reducer上，如果出现数据倾斜可能导致内存不足。</p>
<p>常见对于key对应字段为空，可以采取的优化手段包括空值key过滤和空值key转换</p>
<p>首先我们要进行配置，开启历史服务器</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 首先配置mapred-site.xml</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="language-xml"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="language-xml"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="language-xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop100:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>. 在shell端启动历史服务器</span><br><span class="line">sbin/mr-jobhistory-daemon.sh <span class="keyword">start</span> historyserver</span><br><span class="line"> </span><br><span class="line"><span class="number">3</span>. 查看jobhistory端口</span><br><span class="line">http://hadoop10<span class="number">0</span>:<span class="number">19888</span>/jobhistory</span><br></pre></td></tr></table></figure>

<p>空key过滤</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">不过滤空id列</span><br><span class="line"><span class="keyword">insert</span> overwrite table A </span><br><span class="line"><span class="keyword">select</span> b.* <span class="keyword">from</span> B b <span class="keyword">left</span> <span class="keyword">join</span> C c <span class="keyword">on</span> b.id = c.id;</span><br><span class="line"> </span><br><span class="line">过滤掉空id列</span><br><span class="line"><span class="keyword">insert</span> overwrite table A </span><br><span class="line"><span class="keyword">select</span> b.* <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> B <span class="keyword">where</span> id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>) b <span class="keyword">left</span> <span class="keyword">join</span> C c <span class="keyword">on</span> b.id = c.id;</span><br><span class="line">过滤掉空id列后，耗费时间会降低很多。</span><br></pre></td></tr></table></figure>

<p><strong>或者把它变成其他的有值的</strong></p>
<p>有时虽然某个key对应的null很多，但null并不是异常数据，不能过滤掉，必须包含在join的结果中，这样就可以考虑把表中key为null的字段赋一个随机值，使得数据随机均匀分到不同的reducer上。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">首先设置reduce个数</span><br><span class="line"><span class="keyword">set</span> mapreduce.job.reduces = <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line">然后<span class="keyword">join</span>两张表，随机设置<span class="keyword">null</span>值</span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> A</span><br><span class="line"><span class="keyword">select</span> b.* <span class="keyword">from</span> B b <span class="keyword">full</span> <span class="keyword">join</span> C c <span class="keyword">on</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> b.id <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">then</span> concat (<span class="string">&#x27;hive&#x27;</span>,rand()) <span class="keyword">else</span> b.id end = c.id;</span><br></pre></td></tr></table></figure>

<p>原理：当表b的字段id为null时，如果null过多所有null对应同一个key即id，都挤到一个reduce上，通过优化将表b的key&#x3D;id换成key&#x3D;hive随机数，这样null分配到不同的key上，避免数据倾斜。</p>
<p>case when A then B else C end语法：</p>
<p>当b表的字段id为null时，对id取值为拼接字符串（hive+随机数），否则依然取b.id；然后on条件为：hive随机数&#x3D;c.id或者b.id&#x3D;c.id。</p>
<h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><p>对于group by聚合，默认情况下，Map阶段同一Key的数据发给一个reduce，若某个key的数据量太大，可能会造成数据倾斜。</p>
<p>如果在Map端就直接完成部分聚合，最后在Reduce端得出最终结果，就可以避免数据倾斜。</p>
<p>需要在Map端进行聚合参数设置：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 是否在<span class="built_in">Map</span>端进行聚合，默认是<span class="literal">true</span></span><br><span class="line"><span class="built_in">set</span> hive.<span class="built_in">map</span>.aggr = <span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span> 在<span class="built_in">Map</span>端进行聚合操作的条目数，默认<span class="number">10</span>w条</span><br><span class="line"><span class="built_in">set</span> hive.groupby.mapaggr.checkinterval = <span class="number">100000</span></span><br><span class="line"> </span><br><span class="line"><span class="number">3.</span> 有数据倾斜时进行负载均衡，默认<span class="literal">false</span></span><br><span class="line"><span class="built_in">set</span> hive.groupby.skewindata = <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>原理是当set hive.groupby.skewindata &#x3D; true后，会生成两个MR Job，启两个任务。</p>
<p>job1将group by的key，相同的key可能随机分发到不同的Reduce中，然后Reduce依据key对数据进行聚合，此时每一个Reduce中每个数据的key不一定相同，但是经过这一步聚合后，大大减少了数据量。</p>
<p>job2是真正意义上MR的底层实现，将相同的key分配到同一个reduce中，进行key的聚合操作。</p>
<p>第一步job1实现负载均衡，第二步job2实现聚合需求。</p>
<p>如果skewindata参数&#x3D;false，也就是默认情况下，只会进行job2操作，进行一次MapReduce。</p>
<h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2><p>用 count(distinct key)处理数据</p>
<p>当数据量大的时候，由于count（distinct key）去重聚合是全聚合操作，即便是设定了reduce tasks的个数，例如set mapred.reduce.tasks&#x3D;100；hive也只会启动一个reducer（order by也是这个情况），这就造成一个reducer处理的数据量太大，导致整个Job完成的很慢。</p>
<p>可以将count（distinct key）的方式，改为先group by 再count的方式，也就是将distinct换成group by。</p>
<p>这种优化可以增加reducer的个数，虽然会用多个Job完成，但是适合处理数据量大的情况。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">原始：  <span class="keyword">select</span> count(<span class="keyword">distinct</span> id) <span class="keyword">from</span> <span class="keyword">table</span>;</span><br><span class="line"> </span><br><span class="line">优化后：<span class="keyword">select</span> count(id) <span class="keyword">from</span> (<span class="keyword">select</span> id <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">group</span> <span class="keyword">by</span> id) a;</span><br></pre></td></tr></table></figure>

<h2 id="行列过滤（分区过滤，先where再join嵌套子查询）——谓词下推"><a href="#行列过滤（分区过滤，先where再join嵌套子查询）——谓词下推" class="headerlink" title="行列过滤（分区过滤，先where再join嵌套子查询）——谓词下推"></a>行列过滤（分区过滤，先where再join嵌套子查询）——谓词下推</h2><p>列处理：在select中，只拿需要的列，如果有分区，尽量使用分区字段查询（分区过滤），避免使用select *全表扫描select key from tablename where 分区字段 &#x3D; ‘~’</p>
<p>行处理：两表连接时，对一个表的数据先where过滤，再join（如果先join再过滤，过滤的数据量会很大），即嵌套子查询</p>
<p>在Hive中，可以通过将参数hive.optimize.ppd设置为true，启用谓词下推。与它对应的逻辑优化器是PredicatePushDown。该优化器就是将OperatorTree中的FilterOperator向上提</p>
<p>Hive中与列裁剪和分区裁剪优化相关的配置参数分别为：hive.optimize.cp和hive.optimize.pruner，默认都是true。</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">eg：join两张表，A表joinB表，要求是把B表中<span class="built_in">id</span>&lt;<span class="number">10</span>的过滤掉后，只查询联结表的<span class="built_in">id</span>列</span><br><span class="line">原始： select a.<span class="built_in">id</span> <span class="keyword">from</span> A a join B b <span class="keyword">on</span> a.<span class="built_in">id</span>=b.<span class="built_in">id</span> <span class="keyword">where</span> b.<span class="built_in">id</span>&lt;<span class="number">10</span></span><br><span class="line"> </span><br><span class="line">优化后：select a.<span class="built_in">id</span> <span class="keyword">from</span> A a join (select <span class="built_in">id</span> <span class="keyword">from</span> B <span class="keyword">where</span> <span class="built_in">id</span>&lt;<span class="number">10</span>) b <span class="keyword">on</span> a.<span class="built_in">id</span>=b.<span class="built_in">id</span></span><br></pre></td></tr></table></figure>

<h2 id="动态分区"><a href="#动态分区" class="headerlink" title="动态分区"></a>动态分区</h2><p>分区列是表的一个伪列，它对应HDFS的一个分区文件夹，并且分区列存在于表的最后。</p>
<p>如果不设定动态分区，往分区表中导入数据的方式如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 创建分区表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu_par(id <span class="type">int</span>,<span class="type">name</span> string)</span><br><span class="line">partitioned <span class="keyword">by</span> (month string)</span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> delimited fields terminated <span class="keyword">by</span> <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span> 往分区中导入数据</span><br><span class="line"><span class="keyword">load</span> data <span class="keyword">local</span> inpath <span class="string">&#x27;/opt/module/datas/student.txt&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> stu_par <span class="keyword">partition</span>(month=<span class="string">&#x27;10&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果设定动态分区，导入数据就不再需要指定分区字段了</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 设置为非严格模式（默认strict，表示必须指定至少一个分区为静态分区；nonstrict表示允许所有分区可使用动态分区）</span><br><span class="line"></span><br><span class="line">hive<span class="selector-class">.exec</span><span class="selector-class">.dynamic</span><span class="selector-class">.partition</span>.mode=nonstrict</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 默认配置</span><br><span class="line"></span><br><span class="line">（<span class="number">1</span>）开启动态分区功能（默认true，开启）</span><br><span class="line"></span><br><span class="line">hive<span class="selector-class">.exec</span><span class="selector-class">.dynamic</span>.partition=true</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）在所有执行MR节点上，最大一共可以创建多少个动态分区，默认<span class="number">1000</span>个</span><br><span class="line"></span><br><span class="line">hive<span class="selector-class">.exec</span><span class="selector-class">.max</span><span class="selector-class">.dynamic</span>.partitions=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）在每个执行MR的节点上，最大可以创建多少个分区，默认值<span class="number">100</span></span><br><span class="line"></span><br><span class="line">eg：若源数据包含一年的数据，按照天数分区，day字段应该有<span class="number">365</span>个值，这里的默认值<span class="number">100</span>就应该修改为大于<span class="number">365</span>的数。</span><br><span class="line"></span><br><span class="line">hive<span class="selector-class">.exec</span><span class="selector-class">.max</span><span class="selector-class">.dynamic</span><span class="selector-class">.partitions</span>.pernode=<span class="number">100</span></span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）整个MR job中，最大可以创建多少个HDFS文件，默认<span class="number">100000</span></span><br><span class="line"></span><br><span class="line">hive<span class="selector-class">.exec</span><span class="selector-class">.max</span><span class="selector-class">.created</span>.files=<span class="number">100000</span></span><br></pre></td></tr></table></figure>

<p>操作 ：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">1. 创建分区表</span><br><span class="line">create table dept_par(id string,name string) partitioned by (location int)</span><br><span class="line">row format delimited fields terminated by &#x27;\t&#x27;;</span><br><span class="line"> </span><br><span class="line">2. 设置动态分区非严格模式</span><br><span class="line">set hive.exec.dynamic.partition.mode = nonstrict;</span><br><span class="line"> </span><br><span class="line">3. 查看dept表</span><br><span class="line">+--------------+-------------+-----------+--+</span><br><span class="line">|<span class="string"> dept.deptno  </span>|<span class="string"> dept.dname  </span>|<span class="string"> dept.loc  </span>|</span><br><span class="line">+--------------+-------------+-----------+--+</span><br><span class="line">|<span class="string"> 10           </span>|<span class="string"> ACCOUNTING  </span>|<span class="string"> 1700      </span>|</span><br><span class="line">|<span class="string"> 20           </span>|<span class="string"> RESEARCH    </span>|<span class="string"> 1800      </span>|</span><br><span class="line">|<span class="string"> 30           </span>|<span class="string"> SALES       </span>|<span class="string"> 1900      </span>|</span><br><span class="line">|<span class="string"> 40           </span>|<span class="string"> OPERATIONS  </span>|<span class="string"> 1700      </span>|</span><br><span class="line">+--------------+-------------+-----------+--+</span><br><span class="line"> </span><br><span class="line">4. 分区表动态导入数据（并未指定分区字段的值）</span><br><span class="line">insert into table dept_par partition(location) select deptno,dname,loc from dept;</span><br><span class="line">...</span><br><span class="line">	Loading partition &#123;location=1900&#125;</span><br><span class="line">	Loading partition &#123;location=1800&#125;</span><br><span class="line">	Loading partition &#123;location=1700&#125;</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">5. 查看分区表的分区情况</span><br><span class="line">hive (hive_db1)&gt; show partitions dept_par;</span><br><span class="line">OK</span><br><span class="line">partition</span><br><span class="line">location=1700</span><br><span class="line">location=1800</span><br><span class="line">location=1900</span><br><span class="line"> </span><br><span class="line">6. 查询分区表</span><br><span class="line">select <span class="symbol">*</span> from dept_par where location=&#x27;1700&#x27;;</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line">|<span class="string"> dept_par.id  </span>|<span class="string"> dept_par.name  </span>|<span class="string"> dept_par.location  </span>|</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line">|<span class="string"> 10           </span>|<span class="string"> ACCOUNTING     </span>|<span class="string"> 1700               </span>|</span><br><span class="line">|<span class="string"> 40           </span>|<span class="string"> OPERATIONS     </span>|<span class="string"> 1700               </span>|</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line"> </span><br><span class="line">select <span class="symbol">*</span> from dept_par where location=&#x27;1800&#x27;;</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line">|<span class="string"> dept_par.id  </span>|<span class="string"> dept_par.name  </span>|<span class="string"> dept_par.location  </span>|</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line">|<span class="string"> 20           </span>|<span class="string"> RESEARCH       </span>|<span class="string"> 1800               </span>|</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line"> </span><br><span class="line">select <span class="symbol">*</span> from dept_par where location=&#x27;1900&#x27;;</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line">|<span class="string"> dept_par.id  </span>|<span class="string"> dept_par.name  </span>|<span class="string"> dept_par.location  </span>|</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br><span class="line">|<span class="string"> 30           </span>|<span class="string"> SALES          </span>|<span class="string"> 1900               </span>|</span><br><span class="line">+--------------+----------------+--------------------+--+</span><br></pre></td></tr></table></figure>

<p><strong>原理：</strong></p>
<p>将select的最后一列，认为是分区列（因为分区列在表的最后），将最后一列字段值相同的行，导入同一个分区中；</p>
<p>好处是避免了指定分区字段的值，直接动态的将值相同的行导入同一个分区中，加大效率。</p>
<p>ps：如果把deptno放在select最后一列，那么会生成四个分区</p>
<h2 id="分桶"><a href="#分桶" class="headerlink" title="分桶"></a>分桶</h2><p>适合对数据进行抽样查询的情况，clustered by 字段 into x buckets，将表数据以（字段hash值%分桶数）按照取模结果，对数据进行分桶，也就是随机分布成几块。</p>
<p>ps：分区列是伪列，需要指明字段类型；分桶列是实际列，不需要指明字段类型。</p>
<p>分桶前，需要设置属性set hive.enforce.bucketing &#x3D; true</p>
<h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><p>主要目的是提高hive查询效率，避免全表查询 select * from tablename where 分区字段 &#x3D; ‘~’</p>
<h1 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h1><p>生产上namenode是两个是没有snn的，同样yarn的老大也是两个，是忘了防止一个老大突然挂掉，然后让下一个上位</p>
<p>控制整个老大的更换的就是zookeeper</p>
<p>hadoop ： 请求服务是不用关注所有节点的ip的，我们只用关注namenode的，但是当是两个namenode的时候（生产上），这个时候就会把两个namenode放在一起，形成一个namespace-》zookeeper实现</p>
<p>部署 ：</p>
<ul>
<li>单点</li>
<li>分布式</li>
<li>要求 ：部署的机器数量有要求 ，2n + 1 台机器</li>
</ul>
<p>主从架构 ：如果老大挂了，后面的老二就会上位</p>
<p>zookeeper版本有很多：但是对于我们现在能用就行 ： 3.8.0</p>
<p>部署 ：</p>
<p>有前置要求：具体查看官网 ：对系统有要求 ： jdk 1.8orlater</p>
<p>先把包解压 -》 软连接 -》 zookeeper -》 环境变量 -》 *cmd的是windows上运行的 -》 进入 conf目录 zoo.cfg（改名之后）</p>
<ul>
<li>单点：直接dataDir:改成自己的 - 》 启动</li>
<li>分布 ：dataDir ,三台机器的id，以及机器id的端口号</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bigdata3</span></span><br><span class="line"><span class="attribute">dataDir</span>=xxxxx</span><br><span class="line"><span class="attribute">server</span>.<span class="number">1</span>=bigdata3:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">2</span>=bigdata4:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attribute">server</span>.<span class="number">3</span>=bigdata5:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">myid</span> : 指定机器号 ： 在zookeeper的数据文件夹下创建一个myid，id号就是server点的数字</span><br></pre></td></tr></table></figure>

<p>然后启动zk ： 通过zkServer.sh start</p>
<p>分布式要每一台机器上都整</p>
<p>分布式：查看status之后会出现 follower 和leader 就是副手和老大</p>
<p>然后创建一个群起脚本</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt <span class="number">1</span> ];then</span><br><span class="line">echo <span class="string">&quot;start|stop|status&quot;</span></span><br><span class="line"><span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> startzk()&#123;</span><br><span class="line"> nohup zkServer.sh start  &gt; ~<span class="regexp">/log/</span>zk.log <span class="number">1</span>&gt;&amp;<span class="number">2</span> &amp;</span><br><span class="line"> ssh bigdata4 <span class="string">&quot;zkServer.sh start&quot;</span></span><br><span class="line"> ssh bigdata5 <span class="string">&quot;zkServer.sh start&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> stopzk()&#123;</span><br><span class="line"> nohup zkServer.sh stop  &gt; ~<span class="regexp">/log/</span>zk.log <span class="number">1</span>&gt;&amp;<span class="number">2</span> &amp;</span><br><span class="line"> ssh bigdata4 <span class="string">&quot;zkServer.sh stop&quot;</span></span><br><span class="line"> ssh bigdata5 <span class="string">&quot;zkServer.sh stop&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> statuszk()&#123;</span><br><span class="line">echo <span class="string">&quot;-----------------bigdata3------------------&quot;</span></span><br><span class="line">jps | grep QuorumPeerMain</span><br><span class="line">echo <span class="string">&quot;-----------------bigdata4------------------&quot;</span></span><br><span class="line">ssh bigdata4 <span class="string">&quot;jps | grep QuorumPeerMain&quot;</span></span><br><span class="line">echo <span class="string">&quot;-----------------bigdata5------------------&quot;</span></span><br><span class="line">ssh bigdata5 <span class="string">&quot;jps | grep QuorumPeerMain&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">case <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    <span class="string">&quot;start&quot;</span>)</span><br><span class="line">    startzk</span><br><span class="line">    ;;</span><br><span class="line">    <span class="string">&quot;stop&quot;</span>)</span><br><span class="line">    stopzk</span><br><span class="line">    ;;</span><br><span class="line">    <span class="string">&quot;status&quot;</span>)</span><br><span class="line">    statuszk</span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">    echo <span class="string">&quot;error input&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="zk是干什么的？"><a href="#zk是干什么的？" class="headerlink" title="zk是干什么的？"></a>zk是干什么的？</h2><p>zk可以做监控，可以检查到机器是不是还活着，</p>
<p>管理配置信息的</p>
<h2 id="zk的数据模型"><a href="#zk的数据模型" class="headerlink" title="zk的数据模型"></a>zk的数据模型</h2><p>层级式的结构，一个树形的结构，和linux差不多</p>
<p>节点&#x2F;目录</p>
<ul>
<li>节点就是目录</li>
<li>节点保存数据的内容</li>
<li>zk里的所有的目录都可以叫节点</li>
</ul>
<p>通过命令 ：zkCli.sh 访问zk</p>
<p>然后我们可以对其数据进行操作 ：</p>
<ul>
<li><p>查看节点 ：ls name</p>
</li>
<li><p>查看节点内容 ： get name</p>
</li>
<li><p>节点</p>
<ul>
<li>临时节点 ：只在当前session有效 ，关闭当前会话，则就失效，不可以存放子节点</li>
<li>永久节点 ：永久存在的，可以存放子节点</li>
</ul>
</li>
<li><p>zk 每个节点都有自己的id，节点号，不会重复 ， 数据是存放在节点上的</p>
</li>
<li><p>数据不是很大的数据</p>
</li>
<li><p>仅仅是比较小的数据</p>
</li>
<li><p>如果存放的数据发生变更，数据版本号也会发生变更</p>
</li>
<li><p>创建节点 ： create : <code>create /dl2262 zihang</code></p>
</li>
<li><p>stat path :获取当前节点状态 ： <code>stat /dl2262</code></p>
</li>
<li><pre><code>cZxid = 0x300000002 id
ctime = Thu Dec 15 14:52:29 CST 2022
mZxid = 0x300000002
mtime = Thu Dec 15 14:52:29 CST 2022
pZxid = 0x300000002
cversion = 0 
dataVersion = 0 数据版本
aclVersion = 0 权限的版本
ephemeralOwner = 0x0 是不是临时节点 0x0 不是临时节点 其余就是临时节点
dataLength = 6 数据的长度：zihang就是6个字节
numChildren = 0 下面的子节点
</code></pre>
</li>
<li><p>create -e ：创建临时节点 ：<code>create -e /dl2262 zuan</code> 临时节点也有自己的过期时间，时间一过就会自动删除（重新启动客户端的时候）</p>
</li>
<li><p>顺序节点 ： create -s  默认会给节点后面加一个自增的序列： <code>create -s /dl2262/ziyuan</code></p>
</li>
<li><p>不可以创建深层文件夹的方式命令，如果使用zk的api则可以，或者java代码的方式</p>
</li>
<li><p>修改数据内容的 ： set :   <code>set [-s] [-v version] path data-&gt;set /dl2262 xxxx  </code></p>
<ul>
<li>数据版本 ： 如果数据版本不对应，就会报错的</li>
</ul>
</li>
<li><p>删除节点 ：delete ： <code>delete [-v version] path</code> 或者deleteall 删除其及以下所有数据</p>
</li>
<li><p>如果版本不对还是要出错的</p>
</li>
<li><p>zk自带的监控 ， 监听器</p>
</li>
<li><p>命令中有-w的就是可以监听的</p>
</li>
<li><p>针对每一个节点都可以执行的，每个节点都有一个监听器，当每个节点发生变化，就会触发watch事件</p>
</li>
<li><p>但是zk的shell命令每次只能监听一次 ， zk的原生的api不行，但是curator 的可以一直监听</p>
</li>
<li><p>命令 stat -w nodenpath 就可以监听，或者get -w nodepath等</p>
</li>
<li><p>但是命令行的方式只能触发一次</p>
</li>
</ul>
<p>zk的四字命令</p>
<ul>
<li>zk要对外进行服务的</li>
<li>通过器对外的端口对其进行监控这个是对zk进行监控的</li>
<li>使用前提 ： 要编辑配置文件 ：在zoo.cng这个配置文件里添加 <code>4lw.commands.whitelist=*</code></li>
<li>stat ：可以列出自己的服务端和客户端的一些详细信息</li>
<li>使用方式 ： 直接在linux命令行操作 ， <code>echo stat | telnet localhost 2181</code></li>
<li>ruok : are you ok ? 就是检测服务的功能启动了吗</li>
<li>dump ：列出最近的会话和临时节点的详细信息</li>
<li>conf ： 打印机器的配置</li>
</ul>
<p>或者可以使用Prometheus框架监控</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka</title>
    <url>/2022/12/16/12-16/</url>
    <content><![CDATA[<p>MQ:消息中间件</p>
<ul>
<li>java -》 rabbitMq kafka</li>
<li>大数据 -》 kafka，pular ， solar</li>
</ul>
<h1 id="kafka："><a href="#kafka：" class="headerlink" title="kafka："></a>kafka：</h1><ul>
<li>在cdh平台叫cdk</li>
</ul>
<p>官网：kafka.apache.org</p>
<p>他是一个流式的分布式平台，构建实时的数据通道，流式数据分析，流式的app</p>
<p>实时处理&#x2F;流式处理</p>
<p>离线处理&#x2F;批处理</p>
<p>消息中间件：</p>
<ul>
<li>消息：event-》事件-》数据</li>
<li>数据存储的地方：中间件</li>
</ul>
<p>kafka的特性</p>
<ul>
<li>高吞吐量</li>
<li>可扩展性：支持分布式</li>
<li>永久性存储 ：有数据过期时间</li>
<li>高可用</li>
</ul>
<p>kafka的特点：</p>
<ul>
<li>读写（发布和订阅）</li>
<li>存储流式的数据</li>
<li>可以进行数据的处理<ul>
<li>正常的kafka处理，是在它后面接一个实时处理的框架 spark&#x2F;fink</li>
<li>kafkaStreaming ：是kafka自带的专门处理数据的功能（性能：以及数据的丢包什么的差距会比较大）</li>
</ul>
</li>
</ul>
<p>部署：kafka的版本要选择</p>
<ul>
<li>apache</li>
<li>cdk</li>
</ul>
<p>一般选择稳定版，最新版bug多</p>
<p>还可以根据后面的框架选择 ：根据sparkStreaming 来选择kafka的版本 ： spark对kafka的最低的版本是0.10.0 （目前3.x的spark）</p>
<p>kafka：</p>
<ul>
<li>0.10之后都可以</li>
</ul>
<p>kafka用的是scala写的</p>
<p>kafka2.8版本bug多，因为2.8版本做了个尝试，就是抛去zk，但是尝试失败了，最终出现多个bug</p>
<p>我们目前用2.2.1的版本</p>
<p>kafka的架构：</p>
<ul>
<li>生产者 ： producer 发送数据的</li>
<li>kafka ：broker 真正是属于卡夫卡的，其余是不属于kafka的组件的</li>
<li>消费者 ：customer 取出数据 ，但是数据并不会传出去，只是把副本发出去</li>
</ul>
<p>这里的数据也叫events</p>
<p>扩展架构：</p>
<ul>
<li>broker kafka的集群的一个节点 ，相当于我们的机器</li>
<li>broker：topic 主题<ul>
<li>负责存储events</li>
<li>订阅和发送都是基于topic来实现的<ul>
<li>只要订阅了这个topic，就可以知道他里面的数据</li>
<li>发送也是同理</li>
<li>一个kafka里可以有多个topic</li>
<li>相当于这个是个有编号的数据仓库</li>
<li>关于kafka的topic，我们是和他的效率成一个曲线波动的，比如在一定区间上升的比较多，一定区间反而下降</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>topic ：</p>
<ul>
<li>partition：分区<ul>
<li>一个topic可以有多个paitition</li>
<li>每个partition是一个有序的序列</li>
<li>分区并不是越多越好，最好是可以被我们的机器整除的，避免数据倾斜</li>
<li>其分区中每个分区都有一个标记信息，叫offset，在offset规定的时间里，我们可以随意的消费这个数据，他会一直在</li>
<li>而且和可以对offset的值进行修改</li>
</ul>
</li>
<li>topic的数据是放在不同的目录下面的，就是分区下面</li>
</ul>
<p>部署 ：</p>
<p>解压 - 》 软连接 -》 环境变量 -》 vim server.properties</p>
<ul>
<li>borker.id : id编号</li>
<li>log.retention.huors:数据保留的时间</li>
<li>zookeeper.connect:zk的链接</li>
<li>log.dirs：数据的存储文件夹</li>
<li>hostname：机器的名字</li>
<li>port：kafka对外的端口</li>
</ul>
<p>更改成功之后，我们启动我们的kafka</p>
<p>kafka的启动有两种方式，然后我们可以通过jps进行查看它</p>
<p>简单的命令：<code>kafka-server-start.sh  -daemon $KAFKA_HOME/config/server.properties</code></p>
<h2 id="查看kafka的topic"><a href="#查看kafka的topic" class="headerlink" title="查看kafka的topic"></a>查看kafka的topic</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">kafka-topics<span class="selector-class">.sh</span> \</span><br><span class="line"><span class="attr">--list</span> \</span><br><span class="line"><span class="attr">--zookeeper</span> bigdata3:<span class="number">2181</span>,bigdata4:<span class="number">2181</span>,bigdata5:<span class="number">2181</span>/kafka</span><br></pre></td></tr></table></figure>

<h2 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">kafka-topics<span class="selector-class">.sh</span> \</span><br><span class="line"><span class="attr">--create</span> \</span><br><span class="line"><span class="attr">--zookeeper</span> bigdata3:<span class="number">2181</span>,bigdata4:<span class="number">2181</span>,bigdata5:<span class="number">2181</span>/kafka \</span><br><span class="line"><span class="attr">--topic</span> dl2262 \</span><br><span class="line"><span class="attr">--partitions</span> <span class="number">6</span> \</span><br><span class="line"><span class="attr">--replication-factor</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>注意 ：</p>
<p>partition的随便指定，最好是机器的倍数</p>
<p>副本-》容错</p>
<p>replication-factor topic的副本数小于等于机器数</p>
<h2 id="查看详细的topic信息"><a href="#查看详细的topic信息" class="headerlink" title="查看详细的topic信息"></a>查看详细的topic信息</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">kafka-topics.sh</span> <span class="string">\</span></span><br><span class="line"><span class="string">--describe</span> <span class="string">\</span></span><br><span class="line"><span class="string">--zookeeper</span> <span class="string">bigdata3:2181,bigdata4:2181,bigdata5:2181/kafka</span> <span class="string">\</span></span><br><span class="line"><span class="string">--topic</span> <span class="string">dl2262</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">Topic:dl2262</span>	<span class="string">PartitionCount:6</span>	<span class="string">ReplicationFactor:3</span>	<span class="attr">Configs:</span></span><br><span class="line">	<span class="attr">Topic:</span> <span class="string">dl2262</span>	<span class="attr">Partition:</span> <span class="number">0</span>	<span class="attr">Leader:</span> <span class="number">1</span>	<span class="attr">Replicas:</span> <span class="number">1</span><span class="string">,0,2</span>	<span class="attr">Isr:</span> <span class="number">1</span><span class="string">,0,2</span></span><br><span class="line">	<span class="attr">Topic:</span> <span class="string">dl2262</span>	<span class="attr">Partition:</span> <span class="number">1</span>	<span class="attr">Leader:</span> <span class="number">2</span>	<span class="attr">Replicas:</span> <span class="number">2</span><span class="string">,1,0</span>	<span class="attr">Isr:</span> <span class="number">2</span><span class="string">,1,0</span></span><br><span class="line">	<span class="attr">Topic:</span> <span class="string">dl2262</span>	<span class="attr">Partition:</span> <span class="number">2</span>	<span class="attr">Leader:</span> <span class="number">0</span>	<span class="attr">Replicas:</span> <span class="number">0</span><span class="string">,2,1</span>	<span class="attr">Isr:</span> <span class="number">0</span><span class="string">,2,1</span></span><br><span class="line">	<span class="attr">Topic:</span> <span class="string">dl2262</span>	<span class="attr">Partition:</span> <span class="number">3</span>	<span class="attr">Leader:</span> <span class="number">1</span>	<span class="attr">Replicas:</span> <span class="number">1</span><span class="string">,2,0</span>	<span class="attr">Isr:</span> <span class="number">1</span><span class="string">,2,0</span></span><br><span class="line">	<span class="attr">Topic:</span> <span class="string">dl2262</span>	<span class="attr">Partition:</span> <span class="number">4</span>	<span class="attr">Leader:</span> <span class="number">2</span>	<span class="attr">Replicas:</span> <span class="number">2</span><span class="string">,0,1</span>	<span class="attr">Isr:</span> <span class="number">2</span><span class="string">,0,1</span></span><br><span class="line">	<span class="attr">Topic:</span> <span class="string">dl2262</span>	<span class="attr">Partition:</span> <span class="number">5</span>	<span class="attr">Leader:</span> <span class="number">0</span>	<span class="attr">Replicas:</span> <span class="number">0</span><span class="string">,1,2</span>	<span class="attr">Isr:</span> <span class="number">0</span><span class="string">,1,2</span></span><br><span class="line"></span><br><span class="line"><span class="string">第一行</span> <span class="string">：</span> <span class="string">topic的总体情况</span> <span class="string">topic的名字</span> <span class="string">分区数量</span> <span class="string">分区数量</span> <span class="string">副本数量</span></span><br><span class="line"><span class="string">第二行及以下</span> <span class="string">：</span> <span class="string">topic名字</span> <span class="string">分区的编号</span> <span class="string">leader的编号：负责对外进行读写的kafka的编号</span> <span class="string">Replicas:当前分区副本在哪些机器上是编号</span> <span class="string">isr：</span> <span class="string">负责对外进行读写请求的读写的顺序（机器编号）</span></span><br><span class="line"><span class="string">实际上是有个顺序的，leader的分配以及，读写的顺序</span></span><br></pre></td></tr></table></figure>

<h2 id="删除topic"><a href="#删除topic" class="headerlink" title="删除topic"></a>删除topic</h2><p>个人建议生产上不要删除topic</p>
<p>当topic的数量变多的时候，如果你删除了一个，则它可能会崩掉</p>
<p>修改也同上 ：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh <span class="string">\</span></span><br><span class="line">--<span class="keyword">delete</span> <span class="string">\</span></span><br><span class="line">--zookeeper bigdata3:<span class="number">2181</span>,bigdata4:<span class="number">2181</span>,bigdata5:<span class="number">2181</span>/kafka <span class="string">\</span></span><br><span class="line">--topic dl2262 </span><br></pre></td></tr></table></figure>

<p>topic ： 有俩个数据</p>
<ul>
<li>磁盘上</li>
<li>zk中的</li>
</ul>
<p>执行之后，那个topic会被打上删除的标记，但是实际上数据还是在磁盘上的</p>
<p>如果真的想删除，可以在conf里加上 ，delete.topic.enable&#x3D;true</p>
<h2 id="修改topic"><a href="#修改topic" class="headerlink" title="修改topic"></a>修改topic</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">kafka-topics<span class="selector-class">.sh</span> \</span><br><span class="line"><span class="attr">--alter</span> \</span><br><span class="line"><span class="attr">--zookeeper</span> bigdata3:<span class="number">2181</span>,bigdata4:<span class="number">2181</span>,bigdata5:<span class="number">2181</span>/kafka \</span><br><span class="line"><span class="attr">--topic</span> dl2262 \</span><br><span class="line"><span class="attr">--partitions</span> <span class="number">6</span> \</span><br><span class="line"><span class="attr">--replication-factor</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>想修改什么就加什么参数</p>
<p>但是生产上也不要用：因为可能会导致kafka崩</p>
<p>补充：</p>
<ul>
<li>kafka如何进行数据迁移</li>
<li>kafka进行压力测试</li>
</ul>
<h2 id="生产数据"><a href="#生产数据" class="headerlink" title="生产数据"></a>生产数据</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">kafka-console-producer.<span class="keyword">sh </span>\ </span><br><span class="line">--<span class="keyword">broker-list </span><span class="keyword">bigdata3:9092,bigdata4:9092,bigdata35:9092 </span>\</span><br><span class="line">--topic test</span><br></pre></td></tr></table></figure>

<p>正常我们是通过代码的方式进行编写的</p>
<p>官网的wproduceapi里有详细的介绍</p>
<p>首先要加入我们的代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而对于Streaming要添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-streams<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>kafka封装了一套二进制通信协议，用于对外提供各种各样的服务，对于producer而言，用户可以使用任意编程语言按照该协议的格式进行编程，从而实现向kafka发送消息。这组协议本质上为不同的协议类型分别定义了专属的紧凑二进制字节数组格式，然后通过socket发送给合适的broker，之后等待broker处理完成后返还响应给producer。</p>
<p>每个producer都是独立进行工作的，与其他producer之间没有关联，目前producer的首要功能就是向某个topic的某个分区发送一条消息，所以它首先需要确认到底向topic的哪个分区写入消息，这就是分区器（partitioner）的事情。kafka producer提供了一个默认的分区器，对于每条待发送的消息，如果该消息指定了key，那么该partitioner会根据key的哈希值来选择目标分区，若没有，会使用轮询的方式确认目标分区。当然，producer的API赋予了用户自行指定目标分区的权力。</p>
<p>在确认了目标分区后，producer要做的第二件事就是要寻找这个分区对应的leader，只有leader才能响应客户端发送过来的请求，而剩下的从节点中有一部分会同步该消息。因此在发送消息时，producer有不等待任何副本的响应便返回成功，或者只等待leader响应写入操作之后再返回成功。<br>代码如下 ；</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.Producer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> <span class="type">Properties</span>();</span><br><span class="line">        <span class="comment">// 必须</span></span><br><span class="line">        props.put(<span class="string">&quot;bootstrap.servers&quot;</span>,<span class="string">&quot;121.5.240.148:9092&quot;</span>);</span><br><span class="line">        <span class="comment">// 被发送到broker的任何消息的格式都必须是字节数组</span></span><br><span class="line">        props.put(<span class="string">&quot;key.serializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        props.put(<span class="string">&quot;value.serializer&quot;</span>,<span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);</span><br><span class="line">        <span class="comment">// 非必须参数配置</span></span><br><span class="line">        <span class="comment">// acks=0表明producer完全不管发送结果；</span></span><br><span class="line">        <span class="comment">// acks=all或-1表明producer会等待ISR所有节点均写入后的响应结果；</span></span><br><span class="line">        <span class="comment">// acks=1，表明producer会等待leader写入后的响应结果</span></span><br><span class="line">        props.put(<span class="string">&quot;acks&quot;</span>,<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="comment">// 发生可重试异常时的重试次数</span></span><br><span class="line">        props.put(<span class="string">&quot;retries&quot;</span>,<span class="number">3</span>);</span><br><span class="line">         <span class="comment">// producer会将发往同一分区的多条消息封装进一个batch中，</span></span><br><span class="line">        <span class="comment">// 当batch满了的时候，发送其中的所有消息,不过并不总是等待batch满了才发送消息；</span></span><br><span class="line">        props.put(<span class="string">&quot;batch.size&quot;</span>,<span class="number">323840</span>);</span><br><span class="line">         <span class="comment">// 控制消息发送延时，默认为0，即立即发送，无需关心batch是否已被填满。</span></span><br><span class="line">        props.put(<span class="string">&quot;linger.ms&quot;</span>,<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 指定了producer用于缓存消息的缓冲区大小，单位字节，默认32MB</span></span><br><span class="line">        <span class="comment">// producer启动时会首先创建一块内存缓冲区用于保存待发送的消息，然后由另一个专属线程负责从缓冲区中读取消息执行真正的发送</span></span><br><span class="line">        props.put(<span class="string">&quot;buffer.memory&quot;</span>,<span class="number">33554432</span>);</span><br><span class="line">        <span class="comment">// 设置producer能发送的最大消息大小</span></span><br><span class="line">        props.put(<span class="string">&quot;max.request.size&quot;</span>,<span class="number">10485760</span>);</span><br><span class="line">        <span class="comment">// 设置是否压缩消息，默认none</span></span><br><span class="line">        props.put(<span class="string">&quot;compression.type&quot;</span>,<span class="string">&quot;lz4&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置消息发送后，等待响应的最大时间</span></span><br><span class="line">        props.put(<span class="string">&quot;request.timeout.ms&quot;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        Producer&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; producer = <span class="keyword">new</span> <span class="type">KafkaProducer</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(props);</span><br><span class="line">        <span class="keyword">for</span>(int i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            producer.send(<span class="keyword">new</span> <span class="type">ProducerRecord</span>&lt;&gt;(<span class="string">&quot;my-replicated-topic&quot;</span>,<span class="string">&quot;key&quot;</span>+i,<span class="string">&quot;value&quot;</span>+i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        producer.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>kafka producer发送消息的主方法是send方法，在底层完全地实现了异步化发送，并且通过Java提供的Future同时实现了同步发送和异步发送+回调两种发送方式。而上述代码使用的是第三种方式，即发送之后便不再理会发送结果，这种方式在实际中是不被推荐使用的。</p>
<p><strong>如果发送时连接不上，需要修改kafka配置文件重启</strong></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">listeners</span>=PLAINTEXT : 外网ip</span><br><span class="line"><span class="attr">advertised.listeners</span>=PLAINTEXT : 外网ip</span><br></pre></td></tr></table></figure>

<p>异步发送 ：</p>
<p>实际上所有的写入操作默认都是异步的，send方法会返回一个Java Future对象供用户稍后获取发送结果，这就是所谓的回调机制。具体代码如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">producer.send(<span class="type">record</span>,<span class="built_in">new</span> Callback()&#123;</span><br><span class="line">  @Override</span><br><span class="line">  <span class="built_in">public</span> <span class="type">void</span> onCompletion(RecordMetadata metadata,<span class="keyword">Exception</span> <span class="keyword">exception</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">exception</span> == <span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;消息发送成功&quot;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">System</span>.<span class="keyword">out</span>.println(&quot;消息发送失败&quot;);</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的代码中，Callback就是发送消息后的回调类，其onCompletion方法的两个输入参数metadata和exception不会同时非空，当消息发送成功时，exception为null，当消息发送失败时，metadata就是null。Callback实际上是一个Java接口，因此可创建自定义的Callback实现类来处理消息发送后的逻辑。</p>
<p>同步发送</p>
<p>同步发送和异步发送其实就是通过Java的Future来区分的，调用Future.get()等待返回结果，即是同步发送，具体代码如下：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">ProducerRecord&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; record = <span class="keyword">new</span> <span class="type">ProducerRecord</span>&lt;&gt;(<span class="string">&quot;my-replicated-topic&quot;</span>,<span class="string">&quot;key&quot;</span>+i,<span class="string">&quot;value&quot;</span>+i);</span><br><span class="line"> RecordMetadata recordMetadata = producer.send(record).<span class="keyword">get</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用Future.get()方法会一直等待下去直到broker将结果返回给producer程序，当结果返回时，get()方法要么返回发送结果，要么抛出异常交由producer自行处理。如果没有错误，get将返回对应的RecordMetadata实例。</p>
<h3 id="消息分区机制"><a href="#消息分区机制" class="headerlink" title="消息分区机制"></a>消息分区机制</h3><p>producer发送过程中需要确定将消息发送到topic的哪一个分区，默认的分区器会尽力确保具有相同key的所有消息都被发送到相同的分区上；若没有指定key，会以轮询的方式来确保消息在topic的分区上均匀分配。</p>
<h3 id="kafka的发送异常"><a href="#kafka的发送异常" class="headerlink" title="kafka的发送异常"></a>kafka的发送异常</h3><p>当前kafka的错误类型包含了两类：可重试异常和不可重试异常，常见的可重试异常如下：</p>
<ul>
<li>LeaderNotAvailableException：分区对应的leader不可用，通常出现在leader换届选举时，因此是瞬时的异常，重试之后可自行恢复。</li>
<li>NotControllerException：表明controller当前不可用，在经历新一轮的选举，重试之后可自行恢复。</li>
<li>NetworkException：网络瞬时异常，可重试。</li>
</ul>
<p>所有可重试的异常都继承自or.apache.kafka.common.errors.RetriableException，对于这些可重试的异常，如果在producer程序中配置了重试次数，那么只要在规定的重试次数内自行恢复了，便不会出现在onCompletion的exception中。若超过了重试次数仍没成功，就会被封装到exception中，此时就需要producer程序自行处理这种异常。</p>
<p>没有继承自RetriableException的其他异常都属于不可重试异常，这类异常表明了一些非常严重或kafka无法处理的问题。</p>
<h3 id="自定义分区机制"><a href="#自定义分区机制" class="headerlink" title="自定义分区机制"></a>自定义分区机制</h3><p>自定义分区器需要实现org.apache.kafka.clients.producer.Partitioner接口，分区逻辑写在partition()方法中，例如：</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuditPartitioner</span> implements Partitioner &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Random <span class="built_in">random</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span>(Map&lt;<span class="built_in">String</span>, ?&gt; <span class="built_in">map</span>) &#123;</span><br><span class="line">        <span class="comment">// 该方法实现必要资源的初始化工作</span></span><br><span class="line">        <span class="built_in">random</span> = <span class="keyword">new </span><span class="class title_">Random</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">partition</span>(<span class="built_in">String</span> topic, <span class="built_in">Object</span> keyObj, <span class="type">byte</span>[] keyBytes, <span class="built_in">Object</span> value, <span class="type">byte</span>[] valueBytes, Cluster cluster) &#123;</span><br><span class="line">        <span class="built_in">String</span> <span class="built_in">key</span> = (<span class="built_in">String</span>)keyObj;</span><br><span class="line">        <span class="comment">// 获取该topic可用的所有分区</span></span><br><span class="line">        List&lt;PartitionInfo&gt; partitionInfoList = cluster.<span class="property">availablePartitionsForTopic</span>(topic);</span><br><span class="line">        <span class="type">int</span> partitionCount = partitionInfoList.<span class="property">size</span>();</span><br><span class="line">        <span class="type">int</span> auditPartition = partitionCount <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">key</span> == <span class="literal">null</span> || !<span class="built_in">key</span>.<span class="property">contains</span>(<span class="string">&quot;audit&quot;</span>) ? <span class="built_in">random</span>.<span class="property">nextInt</span>(auditPartition) : auditPartition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span>() &#123;</span><br><span class="line">         <span class="comment">// 该方法实现必要资源的清理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用自定义分区器：<code>props.put(&quot;partitioner.class&quot;,&quot;xx.xx.AuditPartitioner&quot;); </code></p>
<h3 id="自定义序列化器"><a href="#自定义序列化器" class="headerlink" title="自定义序列化器"></a>自定义序列化器</h3><p>自定义序列化器需要实现org.apache.kafka.common.serialization.Serializer接口，在serializer方法中实现序列化逻辑，例如：</p>
<p>首先定义一个POJO对象</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> firstName;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> lastName;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> address;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="type">String</span> firstName,<span class="type">String</span> lastName,<span class="type">int</span> age,<span class="type">String</span> address)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName=firstName;</span><br><span class="line">  <span class="keyword">this</span>.lastName=lastName;</span><br><span class="line">  <span class="keyword">this</span>.age=age;</span><br><span class="line">  <span class="keyword">this</span>.address=address;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于要用jackson-mapper-asl包中的ObjectMapper来将对象转成字节数组，因此需要将其依赖引入：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br></pre></td></tr></table></figure>

<p>接下来创建serializer</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserSerializer</span> <span class="keyword">implements</span> <span class="title class_">Serializer</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title class_">ObjectMapper</span> objectMapper;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">configure</span>(<span class="params"><span class="built_in">Map</span> config,<span class="built_in">boolean</span> isKey</span>)&#123;</span><br><span class="line">      objectMapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> byte[] <span class="title function_">serialize</span>(<span class="params"><span class="built_in">String</span> topic,<span class="built_in">Object</span> data</span>)&#123;</span><br><span class="line">    byte[] res = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      res = objectMapper.<span class="title function_">writeValueAsString</span>(data).<span class="title function_">getBytes</span>(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="title class_">Exception</span> e)&#123;</span><br><span class="line">      logger.<span class="title function_">warn</span>(<span class="string">&quot;failed to serialize the object: &#123;&#125;&quot;</span>, data, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">close</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用自定义的序列化器 <code>props.put(&quot;value.serializer&quot;,&quot;xx.xx.UserSerializer&quot;); </code></p>
<h3 id="producer拦截器"><a href="#producer拦截器" class="headerlink" title="producer拦截器"></a>producer<a href="https://so.csdn.net/so/search?q=%E6%8B%A6%E6%88%AA%E5%99%A8&spm=1001.2101.3001.7020">拦截器</a></h3><p>producer拦截器使得用户在消息发送前和producer回调逻辑执行前可对消息做一些定制化处理，允许使用多个拦截器构成拦截器链。拦截器的实现接口是org.apache.kafka.clients.producer.ProducerInterceptor。interceptor可能运行在多个线程中，因此在具体实现时用户需要确保线程安全。下面以一个简单的双interceptor组成的拦截链为例。第一个interceptor会在消息发送前将时间戳信息加到消息value的最前部，第二个interceptor会在消息发送后更新成功发送消息或失败发送消息数。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeStampPrependerInterceptor</span> <span class="keyword">implements</span> <span class="title class_">ProducerInterceptor</span>&lt;<span class="title class_">String</span>,<span class="title class_">String</span>&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * producer确保在消息被序列化前调用该方法</span></span><br><span class="line"><span class="comment">     * 可以在该方法中对消息做任何操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">ProducerRecord</span> <span class="title function_">onSend</span>(<span class="params">ProducerRecord record</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProducerRecord</span>(record.<span class="title function_">topic</span>(),record.<span class="title function_">partition</span>(),record.<span class="title function_">timestamp</span>(),record.<span class="title function_">key</span>(),<span class="title class_">System</span>.<span class="title function_">currentTimeMillis</span>() +<span class="string">&quot;,&quot;</span>+record.<span class="title function_">value</span>().<span class="title function_">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法会在消息被应答之前或消息发送时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">onAcknowledgement</span>(<span class="params">RecordMetadata recordMetadata, Exception e</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">configure</span>(<span class="params"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, ?&gt; map</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CounterInterceptor</span> <span class="keyword">implements</span> <span class="title class_">ProducerInterceptor</span>&lt;<span class="title class_">String</span>,<span class="title class_">String</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> int errorCounter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> int successCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">ProducerRecord</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; <span class="title function_">onSend</span>(<span class="params">ProducerRecord&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; record</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> record;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">onAcknowledgement</span>(<span class="params">RecordMetadata recordMetadata, Exception e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">            successCounter++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            errorCounter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">close</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;Successful sent: &quot;</span> + successCounter);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;Failed sent: &quot;</span> + errorCounter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">configure</span>(<span class="params"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, ?&gt; map</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用自定义interceptor：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; interceptors = new ArrayList&lt;&gt;();</span><br><span class="line">interceptors.<span class="built_in">add</span>(<span class="string">&quot;xx.xx.TimeStampPrependerInterceptor&quot;</span>);</span><br><span class="line">interceptors.<span class="built_in">add</span>(<span class="string">&quot;xx.xx.CounterInterceptor&quot;</span>);</span><br><span class="line">props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG,interceptors);</span><br></pre></td></tr></table></figure>

<h3 id="消息的可靠发送"><a href="#消息的可靠发送" class="headerlink" title="消息的可靠发送"></a>消息的可靠发送</h3><p>Java版本的producer采用异步发送机制，send方法将消息放入缓冲区，由一个专属I&#x2F;O线程负责从缓冲区中提取消息并封装进消息batch中，然后发送出去。这个过程存在着数据丢失的窗口，即若I&#x2F;O线程发送之前producer崩溃，则存储缓冲区中的消息会全部丢失。producer的另一个问题就是消息的乱序，假设现发送record1和record2两条消息，由于某些原因导致record1未发送成功，同时kafka又配置了重试机制，那么producer重试record1成功后，record1在日志中的位置可能反而位于record2之后。</p>
<h3 id="无消息丢失配置"><a href="#无消息丢失配置" class="headerlink" title="无消息丢失配置"></a>无消息丢失配置</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该配置控制 KafkaProducer.send() 和 KafkaProducer.partitionsFor() 将阻塞多长时间。此外这些方法被阻止，也可能是因为缓冲区已满或元数据不可用。在用户提供的序列化程序或分区器中的锁定不会计入此超时。默认为60000ms。</span></span><br><span class="line">max<span class="selector-class">.block</span>.ms=<span class="number">60000</span></span><br><span class="line"></span><br><span class="line">acks=<span class="attribute">all</span></span><br><span class="line">retries=Integer<span class="selector-class">.MAX_VALUE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 该参数设置为1使producer在某个broker发送响应之前将无法再给broker发送请求，可防止topic同分区下的消息乱序问题，</span></span><br><span class="line">max<span class="selector-class">.in</span><span class="selector-class">.flight</span><span class="selector-class">.requests</span><span class="selector-class">.per</span>.connection=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置不允许非ISR中的副本被选举为leader，从而避免broker端因日志问题造成消息的丢失</span></span><br><span class="line">unclean<span class="selector-class">.leader</span>.electionenable=false</span><br><span class="line"></span><br><span class="line">replication.factor=<span class="number">3</span></span><br><span class="line"><span class="comment">// 用于控制某条消息至少被写入到ISR中的多少个副本才算成功</span></span><br><span class="line">min<span class="selector-class">.insync</span>.replicas=<span class="number">2</span></span><br><span class="line"></span><br><span class="line">enable<span class="selector-class">.auto</span>.commit=false</span><br><span class="line"></span><br><span class="line">使用带回调机制的send发送消息</span><br><span class="line">Callback逻辑中显式立即关闭producer</span><br></pre></td></tr></table></figure>

<h2 id="消费数据"><a href="#消费数据" class="headerlink" title="消费数据"></a>消费数据</h2><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">kafka-console-consumer.sh <span class="string">\</span></span><br><span class="line">--bootstrap-server bigdata3:<span class="number">9092</span>,bigdata4:<span class="number">9092</span>,bigdata5:<span class="number">9092</span> <span class="string">\</span></span><br><span class="line">--topic dl2262 <span class="string">\</span></span><br><span class="line">--<span class="keyword">from</span>-beginning </span><br></pre></td></tr></table></figure>

<p>–from.beginning :开始消费的位置</p>
<p>问题：消费乱序 ：数据产生的问题和消费顺序不一致</p>
<p>如何保证kafka消费全局有序</p>
<ul>
<li>多分区：不可能<ul>
<li>可以解决，spark ， flink 计算的结果是不对的</li>
<li>source ：mysql  id &#x3D; 1 进行的操作 ： insert delete update</li>
<li>然后把mysql里的binlog采集到kafka -》 flink&#x2F;spark -》hbase&#x2F;phonenix</li>
<li>因为消费乱序，可能会出现问题</li>
<li>思路：<ul>
<li>单分区 ：会影响spark或者flink的吞吐量 原因 ： 原来3个分区，三个并行度 ，现在一个，就慢了</li>
<li>多分区 ：可以利用单分区有序解决全局有序</li>
</ul>
</li>
</ul>
</li>
<li>单分区：可以，单分区数据是有序的</li>
</ul>
<p>消费者消费kafka的数据是以消费者组的方式进行消费的</p>
<p>消费者组 ：</p>
<ul>
<li>一个组内共享一个消费者组的id</li>
<li>组内的所有消费者协调在一起去消费指定的topic的分区数据</li>
<li>每个分区只能由一个消费者组的一个消费者消费</li>
<li>不能由一个消费者组的多个消费者进行重复消费</li>
<li>生产上<ul>
<li>一般是一个消费者，在一个消费者组里</li>
<li>就是可以消费全部分区数据</li>
<li>上述是小公司和一般情况的大公司</li>
<li>大公司 ：<ul>
<li>会用到消费者组 不同消费者处理不同分区数据</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>java api custome</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> kafkacustome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">customertestautooffset</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) throws IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">//1 新建一个consumer对象</span></span><br><span class="line">        Properties properties = <span class="keyword">new</span> <span class="type">Properties</span>();</span><br><span class="line">        properties.load(customertestautooffset.class.getClassLoader().getResourceAsStream(<span class="string">&quot;consumer1.properties&quot;</span>));</span><br><span class="line">        KafkaConsumer&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; consumer = <span class="keyword">new</span> <span class="type">KafkaConsumer</span>&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt;(properties);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2 用这个对象接收消息</span></span><br><span class="line">        <span class="comment">//发布订阅模式接收消息，先订阅</span></span><br><span class="line">        consumer.subscribe(Collections.singleton(<span class="string">&quot;dl2262&quot;</span>));</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//从订阅的话题中拉取数据</span></span><br><span class="line">            ConsumerRecords&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; poll = consumer.poll(<span class="number">2000</span>);</span><br><span class="line">            <span class="keyword">if</span>(poll.count() == <span class="number">0</span>)&#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//消费拉取到的数据</span></span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;<span class="keyword">String</span>, <span class="keyword">String</span>&gt; record : <span class="type">poll</span>) &#123;</span><br><span class="line">                System.out.println(record);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3 关闭资源</span></span><br><span class="line">        <span class="comment">//consumer.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其中“dl2262”是名为的topic的名字，其中groupid一样的就会分配到一起</p>
<p>其中 ： consumer1.properties内容是</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">key.deserializer</span>=org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line"><span class="attr">value.deserializer</span>=org.apache.kafka.common.serialization.StringDeserializer</span><br><span class="line"><span class="attr">bootstrap.servers</span>=bigdata3:<span class="number">9092</span>,bigdata4:<span class="number">9092</span>,bigdata5:<span class="number">9092</span> </span><br><span class="line"><span class="attr">enable.auto.commit</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">group.id</span>=test1</span><br><span class="line"><span class="attr">auto.offset.reset</span>=earliest</span><br></pre></td></tr></table></figure>

<p>上述是自动offset的</p>
<p>然后接下来是我们自己提交offset的</p>
<p>手动提交offset的方法有两种：分别是commitSync（同步提交）和commitAsync（异步提交）。两者的相同点是，都会将本次poll的一批数据最高的偏移量提交；不同点是，commitSync阻塞当前线程，一直到提交成功，并且会自动失败重试（由不可控因素导致，也会出现提交失败）；而commitAsync则没有失败重试机制，故有可能提交失败。</p>
<p>修改配置文件中的enable.auto.commit&#x3D;false选项并在消费拉取到的数据之后添加consumer.commitSync();语句即可。由于同步提交offset有失败重试机制，故更加可靠</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">//消费拉取到的数据</span><br><span class="line">        <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; <span class="keyword">record</span> : <span class="type">poll</span>) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="keyword">record</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        consumer.commitSync();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>同步提交offset更可靠一些，但是由于其会阻塞当前线程，直到提交成功。因此吞吐量会收到很大的影响。在更多的情况下，会选用异步提交offset的方式。</p>
<h2 id="kafka数据存储"><a href="#kafka数据存储" class="headerlink" title="kafka数据存储"></a>kafka数据存储</h2><p>partition：下面存储就是数据，一段一段相同大小的Segment文件</p>
<p>Segment ：逻辑概念</p>
<ul>
<li>它由log 和index文件组成<ul>
<li>log :实实在在的数据 ，包括元数据 默认大小 1G是由 <code>log.segment.bytes控制单位是字节在配置文件里</code></li>
<li>index：是我们的位置信息</li>
</ul>
</li>
<li>segment的命名规则<ul>
<li>offset.index和offset.log</li>
<li>offset : 偏移量 -》数据event的标号，在topic下的编号</li>
<li>比如 ： <code>00000000000000000000.index 00000000000000000000.log</code></li>
<li>然后如果达到后面最大值，则按照临界的offset来延续比如 <code>0000000000000003333333.index</code>等</li>
</ul>
</li>
</ul>
<p>借助脚本命令查看.log文件</p>
<ul>
<li>因为kafka对数据的存储是按照他自己的存储方式来的，所有我们要查看.log文件的话要用其提供的脚本文件</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">kafka-run-<span class="keyword">class</span>.sh \</span><br><span class="line">kafka.tools.DumpLogSegments \</span><br><span class="line">--files <span class="regexp">/home/</span>hadoop<span class="regexp">/data/</span>kafka<span class="regexp">/dl2262-0/</span><span class="number">00000000000000000000</span>.log \</span><br><span class="line">--<span class="keyword">print</span>-data-log \</span><br><span class="line">&gt; <span class="number">0</span>.log</span><br></pre></td></tr></table></figure>

<p>上述就是把其文件进行翻译，并存储在0.log中</p>
<p>在index文件中其中是offset：物理地址的形式</p>
<p>它是以稀疏表的方式进行维护的并不是每一条的都维护</p>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>如何查找offset为11865的数据？简述过程</p>
<p>解答 ：</p>
<ul>
<li>通过二分查找算法 ， 查找offset为11865的最大Segment的文件组</li>
<li>去临近的最大的的index文件里再再用二分查找，找到对应的offset</li>
<li>如何看见其对应的partition：就是其物理地址</li>
<li>根据物理地址去迅速定位位置，按顺序查找，一直找到它</li>
</ul>
<h2 id="交付语义"><a href="#交付语义" class="headerlink" title="交付语义"></a>交付语义</h2><p>消息交付语义 （生产者消费者都有）：</p>
<ul>
<li><p>at most once : 消息可能会丢，不会重复</p>
</li>
<li><p>at least once ：不会丢失，但是可能会重复 ，没有事务，交付和记录是分开的，如果交付完成，再记录的时候挂了，下次启动就会继续从没有记录的位置进行交付，数据会重复</p>
</li>
<li><p>exactly once ： 每个数据仅仅交付一次,增加了一个事务的情况，只有交付和记录都完成才可以继续往下</p>
</li>
<li><p>producer ：</p>
<ul>
<li>发送数据的时候也有交付语义的</li>
<li>kafka 0.11.0 之前至少一次 会导致数据重复 ：at least once</li>
<li>但是 0.11.0之后，包括0.11.0 ，会变成精准交付 : exactly once</li>
</ul>
</li>
<li><p>kafka版本，大于等于0.11.0版本</p>
</li>
<li><p>customer：</p>
<ul>
<li>问题 ：如何存储上次消费到哪一个offset<ul>
<li>取决于，你的消费者组件，看他们支持什么消费者对应的交付语义<ul>
<li>sparkStreaming ： 如上的三种<ul>
<li>at most once</li>
<li>at least once</li>
<li>exactly once</li>
<li>所以我们可以选择至少一次，精准一次，但是至少一次可能由重复问题</li>
<li>但是90%sparkingStream和struedstreaming用至少一次，因为精准一次操作起来比较复杂</li>
</ul>
</li>
<li>flink同理</li>
<li>其他再议</li>
</ul>
</li>
<li>offset信息如何维护？<ul>
<li>先了解</li>
<li>CheckPoints ：很简单，但是弊端也很多 ：生产上不能用 ，因为问题多<ul>
<li>首先会有小文件问题 ，代码变更整个spark项目就不能用了，就是之前记录的chackpoint信息就失效了</li>
</ul>
</li>
<li>kafka itself ：比较推荐 ，简单不用自己写，人家给你生成好的 ，就是最少一次的</li>
<li>use your own data store ： 自己开发 ，用外部的数据源存储offset ，redis ，mysql ，hbase，建议使用hbase是最好的，但是另外两个也可以用的，但是有要求，每分钟的请求次数，mysql可能扛不住，redis可以 ，hbase可以 ， 不推荐用 redis<ul>
<li>可以达到精准一次的语义</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>总的来说工作中用至少一次和精准一次用的很多，flink用的精准一次比较多,其他的至少一次就比较多</li>
</ul>
</li>
</ul>
<h2 id="副本和数据同步"><a href="#副本和数据同步" class="headerlink" title="副本和数据同步"></a>副本和数据同步</h2><p>例子 ：8个分区 1个副本 8节点</p>
<p>kafka ：</p>
<ul>
<li>log 数据 ：topic 三份数据副本<ul>
<li>hdfs 100多个节点 3副本ok</li>
<li>但是kafka才8个节点，3副本大概会崩坏</li>
<li>所以一般是一天或者三天</li>
<li>每个kafka集群都有leader和follower</li>
</ul>
</li>
<li>leader 和 follower<ul>
<li>leader ： 负责对外读写的节点</li>
<li>follower ： 拉取分区上对应的数据 ，进行备份的</li>
</ul>
</li>
<li>机制ack：<ul>
<li>消息发送确认机制</li>
<li>针对produce的</li>
<li>ack 的值有 all 1,0,-1</li>
<li>1<ul>
<li>只要一个分区副本成功写入通知就认为生产者推送消息成功了</li>
</ul>
</li>
<li>0<ul>
<li>完全就不管发送的结果</li>
</ul>
</li>
<li>-1<ul>
<li>其是收到所有分区副本写入成功的通知才认为成功</li>
</ul>
</li>
<li>all<ul>
<li>和-1一样</li>
</ul>
</li>
</ul>
</li>
<li>工作中的选择</li>
<li>大部分时间选择all ，-1</li>
<li>其次是1</li>
<li>最后是0</li>
<li>速度关系0是最快的，1是中间的，-1是最慢的当是多个节点的时候，如果是单个leader和follower的时候1和-1是一样的</li>
</ul>
<p>kafka监控</p>
<ul>
<li>kafka manager首选  二开kafkamanager 可以自己加上 官网 <code>https://github.com/yahoo/CMAK</code></li>
<li>kafka eagle -》 也好用 不过相对上面的那个，就是lower点 ，部署简单好用 官网 <code>https://github.com/smartloli/EFAK</code></li>
</ul>
<h2 id="kafka测试"><a href="#kafka测试" class="headerlink" title="kafka测试"></a>kafka测试</h2><p>用Kafka官方自带的脚本，对Kafka进行压测。Kafka压测时，可以查看到哪个地方出现了瓶颈（CPU，内存，网络IO）。一般都是网络IO达到瓶颈。</p>
<p>kafka-consumer-<a href="https://so.csdn.net/so/search?q=perf&spm=1001.2101.3001.7020">perf</a>-test.sh</p>
<p>kafka-producer-perf-test.sh</p>
<h3 id="Kafka-Producer压力测试"><a href="#Kafka-Producer压力测试" class="headerlink" title="Kafka Producer压力测试"></a>Kafka Producer压力测试</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">bin/kafka-producer-perf-test.sh  \</span><br><span class="line">--topic test \</span><br><span class="line">--record-size <span class="number">100</span> \</span><br><span class="line">--num-records <span class="number">100000</span> \</span><br><span class="line">--throughput -<span class="number">1</span> \</span><br><span class="line">--producer-props bootstrap.<span class="attr">servers=</span>bigdata3:<span class="number">9092</span>,bigdata4:<span class="number">9092</span>,bigdata5:<span class="number">9092</span></span><br><span class="line"></span><br><span class="line">record-size是一条信息有多大，单位是字节。</span><br><span class="line">num-records是总共发送多少条信息。</span><br><span class="line">throughput 是每秒多少条信息，设成-<span class="number">1</span>，表示不限流，可测出生产者最大吞吐量。</span><br><span class="line"></span><br><span class="line">他会打印下面的语句</span><br><span class="line"><span class="number">100000</span> records sent, <span class="number">149253.731343</span> records/sec (<span class="number">14.23</span> MB/sec), <span class="number">112.02</span> <span class="keyword">ms</span> <span class="title">avg</span> latency, <span class="number">207.00</span> <span class="keyword">ms</span> <span class="title">max</span> latency, <span class="number">97</span> <span class="keyword">ms</span> <span class="title">50th</span>, <span class="number">190</span> <span class="keyword">ms</span> <span class="title">95th</span>, <span class="number">206</span> <span class="keyword">ms</span> <span class="title">99th</span>, <span class="number">207</span> <span class="keyword">ms</span> <span class="title">99</span>.<span class="number">9</span>th.</span><br><span class="line">参数解析：本例中一共写入<span class="number">10</span>w条消息，吞吐量为<span class="number">14.23</span> MB/sec，每次写入的平均延迟为<span class="number">112.02</span>毫秒，最大的延迟为<span class="number">207</span>毫秒</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Kafka-Consumer压力测试"><a href="#Kafka-Consumer压力测试" class="headerlink" title="Kafka Consumer压力测试"></a>Kafka Consumer压力测试</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">kafka-consumer-perf-test.sh </span><br><span class="line"><span class="comment">--broker-list bigdata3:9092,bigdata4:9092,bigdata35:9092 </span></span><br><span class="line"><span class="comment">--topic test </span></span><br><span class="line"><span class="comment">--fetch-size 10000 </span></span><br><span class="line"><span class="comment">--messages 10000000 </span></span><br><span class="line"><span class="comment">--threads 1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">--zookeeper 指定zookeeper的链接信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--topic 指定topic的名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--fetch-size 指定每次fetch的数据的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--messages 总共要消费的消息个数</span></span><br><span class="line">测试结果说明：</span><br><span class="line"></span><br><span class="line"><span class="built_in">start</span>.<span class="built_in">time</span>, <span class="keyword">end</span>.<span class="built_in">time</span>, data.consumed.<span class="keyword">in</span>.MB, MB.<span class="built_in">sec</span>, data.consumed.<span class="keyword">in</span>.nMsg, nMsg.<span class="built_in">sec</span></span><br><span class="line"><span class="number">2020</span><span class="number">-03</span><span class="number">-10</span> <span class="number">03</span>:<span class="number">18</span>:<span class="number">51</span>:<span class="number">773</span>, <span class="number">2020</span><span class="number">-03</span><span class="number">-10</span> <span class="number">03</span>:<span class="number">18</span>:<span class="number">53</span>:<span class="number">815</span>, <span class="number">19.0735</span>, <span class="number">9.3406</span>, <span class="number">200000</span>, <span class="number">97943.192</span></span><br></pre></td></tr></table></figure>

<h2 id="Kafka-集群数据迁移"><a href="#Kafka-集群数据迁移" class="headerlink" title="Kafka 集群数据迁移"></a>Kafka 集群数据迁移</h2><h3 id="同集群迁移"><a href="#同集群迁移" class="headerlink" title="同集群迁移"></a>同集群迁移</h3><p>同集群之间数据迁移，比如在已有的集群中新增了一个Broker节点，此时需要将原来集群中已有的Topic的数据迁移部分到新的集群中，缓解集群压力。</p>
<p>将新的节点添加到Kafka集群很简单，只需为它们分配一个唯一的Broker ID，并在新<a href="https://cloud.tencent.com/product/cvm?from=10680">服务器</a>上启动Kafka。但是，这些新服务器节点不会自动分配任何数据分区，因此除非将分区移动到新增的节点，否则在创建新Topic之前新节点不会执行任何操作。因此，通常在将新服务器节点添加到Kafka集群时，需要将一些现有数据迁移到这些新的节点。</p>
<p>迁移数据的过程是手动启动的，执行过程是完全自动化的。在Kafka后台服务中，Kafka将添加新服务器作为其正在迁移的分区的Follower，并允许新增节点完全复制该分区中的现有数据。当新服务器节点完全复制此分区的内容并加入同步副本（ISR）时，其中一个现有副本将删除其分区的数据。</p>
<p>Kafka系统提供了一个分区重新分配工具（kafka-reassign-partitions.sh），该工具可用于在Broker之间迁移分区。理想情况下，将确保所有Broker的数据和分区均匀分配。分区重新分配工具无法自动分析Kafka群集中的数据分布并迁移分区以实现均匀的<a href="https://cloud.tencent.com/product/clb?from=10680">负载均衡</a>。因此，管理员在操作的时候，必须弄清楚应该迁移哪些Topic或分区。</p>
<p>分区重新分配工具可以在3种互斥模式下运行：</p>
<ul>
<li>–generate：在此模式下，给定Topic列表和Broker列表，该工具会生成候选重新分配，以将指定Topic的所有分区迁移到新Broker中。此选项仅提供了一种方便的方法，可在给定Topic和目标Broker列表的情况下生成分区重新分配计划。</li>
<li>–execute：在此模式下，该工具将根据用户提供的重新分配计划启动分区的重新分配。 （使用–reassignment-json-file选项）。由管理员手动制定自定义重新分配计划，也可以使用–generate选项提供。</li>
<li>–verify：在此模式下，该工具将验证最后一次–execute期间列出的所有分区的重新分配状态。状态可以有成功、失败或正在进行等状态。</li>
</ul>
<h3 id="迁移过程实现"><a href="#迁移过程实现" class="headerlink" title="迁移过程实现"></a>迁移过程实现</h3><p>分区重新分配工具可用于将一些Topic从当前的Broker节点中迁移到新添加的Broker中。这在扩展现有集群时通常很有用，因为将整个Topic移动到新的Broker变得更容易，而不是一次移动一个分区。当执行此操作时，用户需要提供已有的Broker节点的Topic列表，以及到新节点的Broker列表（源Broker到新Broker的映射关系）。然后，该工具在新的Broker中均匀分配给指定Topic列表的所有分区。在迁移过程中，Topic的复制因子保持不变。</p>
<p>现有如下实例，将Topic为ke01，ke02的所有分区从Broker1中移动到新增的Broker2和Broker3中。由于该工具接受Topic的输入列表作为JSON文件，因此需要明确迁移的Topic并创建json文件，如下所示：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&gt; cat topic-<span class="keyword">to</span>-<span class="keyword">move</span>.json</span><br><span class="line">&#123;&quot;topics&quot;: [&#123;&quot;topic&quot;: &quot;ke01&quot;&#125;,</span><br><span class="line">            &#123;&quot;topic&quot;: &quot;ke02&quot;&#125;],</span><br><span class="line">&quot;version&quot;:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>准备好JSON文件，然后使用分区重新分配工具生成候选分配，命令如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&gt; bin/kafka-<span class="keyword">reassign</span>-partitions.sh <span class="comment">--zookeeper bigdata3:2181,bigdata4:2181,bigdata5:2181/kafka  --topics-to-move-json-file topics-to-move.json --broker-list &quot;1,2&quot; --generate</span></span><br></pre></td></tr></table></figure>

<p>该工具生成一个候选分配，将所有分区从Topic ke01，ke02移动到Broker1和Broker2。需求注意的是，此时分区移动尚未开始，它只是告诉你当前的分配和建议。保存当前分配，以防你想要回滚它。新的赋值应保存在JSON文件（例如expand-cluster-reassignment.json）中，以使用–execute选项执行。JSON文件如下：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;version&quot;</span>:<span class="number">1</span>,<span class="string">&quot;partitions&quot;</span>:[&#123;<span class="string">&quot;topic&quot;</span>:<span class="string">&quot;ke02&quot;</span>,<span class="string">&quot;partition&quot;</span>:<span class="number">0</span>,<span class="string">&quot;replicas&quot;</span>:[<span class="number">2</span>]&#125;,&#123;<span class="string">&quot;topic&quot;</span>:<span class="string">&quot;ke02&quot;</span>,<span class="string">&quot;partition&quot;</span>:<span class="number">1</span>,<span class="string">&quot;replicas&quot;</span>:[<span class="number">1</span>]&#125;,&#123;<span class="string">&quot;topic&quot;</span>:<span class="string">&quot;ke02&quot;</span>,<span class="string">&quot;partition&quot;</span>:<span class="number">2</span>,<span class="string">&quot;replicas&quot;</span>:[<span class="number">2</span>]&#125;,&#123;<span class="string">&quot;topic&quot;</span>:<span class="string">&quot;ke01&quot;</span>,<span class="string">&quot;partition&quot;</span>:<span class="number">0</span>,<span class="string">&quot;replicas&quot;</span>:[<span class="number">2</span>]&#125;,&#123;<span class="string">&quot;topic&quot;</span>:<span class="string">&quot;ke01&quot;</span>,<span class="string">&quot;partition&quot;</span>:<span class="number">1</span>,<span class="string">&quot;replicas&quot;</span>:[<span class="number">1</span>]&#125;,&#123;<span class="string">&quot;topic&quot;</span>:<span class="string">&quot;ke01&quot;</span>,<span class="string">&quot;partition&quot;</span>:<span class="number">2</span>,<span class="string">&quot;replicas&quot;</span>:[<span class="number">2</span>]&#125;]&#125;</span><br></pre></td></tr></table></figure>

<p>命令</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&gt; ./kafka-<span class="keyword">reassign</span>-partitions.sh <span class="comment">--zookeeper bigdata3:2181,bigdata4:2181,bigdata5:2181/kafka --reassignment-json-file expand-cluster-reassignment.json --execute</span></span><br></pre></td></tr></table></figure>

<p>最后，–verify选项可与该工具一起使用，以检查分区重新分配的状态。需要注意的是，相同的expand-cluster-reassignment.json（与–execute选项一起使用）应与–verify选项一起使用，执行命令如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&gt; ./kafka-<span class="keyword">reassign</span>-partitions.sh <span class="comment">--zookeeper bigdata3:2181,bigdata4:2181,bigdata5:2181/kafka --reassignment-json-file expand-cluster-reassignment.json --verify</span></span><br></pre></td></tr></table></figure>

<p>同时，我们可以通过<a href="https://blog.csdn.net/m0_63722685?spm=1011.2124.3001.5343">Kafka Eagle</a>工具来查看Topic的分区情况。</p>
<h2 id="跨集群迁移"><a href="#跨集群迁移" class="headerlink" title="跨集群迁移"></a>跨集群迁移</h2><p>这里跨集群迁移，我们指的是在Kafka多个集群之间复制数据“镜像”的过程，以避免与单个集群中的节点之间发生的复制混淆。 Kafka附带了一个用于在Kafka集群之间镜像数据的工具。该工具从源集群使用并生成到目标集群。这种镜像的一个常见用例是在另一个数据中心提供副本。</p>
<p>另外，你可以运行许多此类镜像进程以提高吞吐量和容错（如果一个进程终止，其他进程将占用额外负载）。将从源集群中的Topic读取数据，并将其写入目标集群中具有相同名称的主题。事实上，“镜像”数据只不过是一个Kafka将消费者和生产者联系在了一起。</p>
<p>源集群和目标集群是完全独立的实体，它们可以具有不同数量的分区，并且偏移量将不相同。出于这个原因，镜像集群并不是真正意图作为容错机制（因为消费者的位置会有所不同）;为此，建议使用正常的集群内复制。但是，镜像进程将保留并使用消息Key进行分区，因此可以按Key保留顺序。</p>
<p>下面是一个跨集群的单Topic实例，命令如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt; ./kafka-mirror-maker<span class="selector-class">.sh</span> <span class="attr">--consumer</span><span class="selector-class">.config</span> consumer<span class="selector-class">.properties</span> <span class="attr">--producer</span><span class="selector-class">.config</span> producer<span class="selector-class">.properties</span> <span class="attr">--whitelist</span> ke03</span><br></pre></td></tr></table></figure>

<p>需要注意的是，consumer.properties文件配置源Kafka集群Broker地址，producer.properties文件配置目标Kafka集群地址。如果需要迁移多个Topic，可以使用 –whitelist ‘A|B’，如果需要迁移所有的Topic，可以使用 –whitelist ‘*’。</p>
<p>执行跨集群迁移命令后，目标集群中使用Kafka Eagle中查看Topic Size大小看是否与源集群的Topic Size大小相等，或者使用SQL语句，验证是否有数据迁移过来，</p>
<p>跨集群迁移数据的本质是，Kafka启动了消费者读取源集群数据，并将消费后的数据写入到目标集群，在迁移的过程中，可以启动多个实例，提供迁出的吞吐量。</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>datax</title>
    <url>/2022/12/18/12-18/</url>
    <content><![CDATA[<h1 id="datax"><a href="#datax" class="headerlink" title="datax"></a>datax</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://so.csdn.net/so/search?q=DataX&spm=1001.2101.3001.7020">DataX</a> 是阿里开源的一个异构数据源离线同步工具，致力于实现包括关系型数据库(MySQL、Oracle等)、HDFS、Hive、ODPS、HBase、FTP等各种异构数据源之间稳定高效的数据同步功能。</p>
<h2 id="理念"><a href="#理念" class="headerlink" title="理念"></a>理念</h2><p>DataX本身作为数据同步框架，将不同数据源的同步抽象为从源头数据源读取数据的Reader插件，以及向目标端写入数据的Writer插件，理论上DataX框架可以支持任意数据源类型的数据同步工作。同时DataX插件体系作为一套生态系统, 每接入一套新数据源该新加入的数据源即可实现和现有的数据源互通</p>
<h2 id="框架设计"><a href="#框架设计" class="headerlink" title="框架设计"></a>框架设计</h2><p>DataX本身作为离线数据同步框架，采用Framework + plugin架构构建。将数据源读取和写入抽象成为Reader&#x2F;Writer插件，纳入到整个同步框架中。</p>
<p>Reader：Reader为数据采集模块，负责采集数据源的数据，将数据发送给Framework。</p>
<p>Writer： Writer为数据写入模块，负责不断向Framework取数据，并将数据写入到目的端</p>
<p>Framework：Framework用于连接reader和writer，作为两者的数据传输通道，并处理缓冲，流控，并发，数据转换等核心技术问题。</p>
<p>DataX目前已经有了比较全面的插件体系，主流的RDBMS数据库、NOSQL、大数据计算系统都已经接入，目前支持数据如下，详情请点击：<a href="https://github.com/alibaba/DataX/wiki/DataX-all-data-channels">DataX数据源参考指南</a></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>数据源</th>
<th align="center">Reader(读)</th>
<th align="center">Writer(写)</th>
<th align="center">文档</th>
</tr>
</thead>
<tbody><tr>
<td>RDBMS 关系型数据库</td>
<td>MySQL</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/mysqlreader/doc/mysqlreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/mysqlwriter/doc/mysqlwriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>Oracle</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/oraclereader/doc/oraclereader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/oraclewriter/doc/oraclewriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>OceanBase</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://open.oceanbase.com/docs/community/oceanbase-database/V3.1.0/use-datax-to-full-migration-data-to-oceanbase">读</a> 、<a href="https://open.oceanbase.com/docs/community/oceanbase-database/V3.1.0/use-datax-to-full-migration-data-to-oceanbase">写</a></td>
</tr>
<tr>
<td></td>
<td>SQLServer</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/sqlserverreader/doc/sqlserverreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/sqlserverwriter/doc/sqlserverwriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>PostgreSQL</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/postgresqlreader/doc/postgresqlreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/postgresqlwriter/doc/postgresqlwriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>DRDS</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/drdsreader/doc/drdsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/drdswriter/doc/drdswriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>Kingbase</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/drdsreader/doc/drdsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/drdswriter/doc/drdswriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>通用RDBMS(支持所有关系型数据库)</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/rdbmsreader/doc/rdbmsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/rdbmswriter/doc/rdbmswriter.md">写</a></td>
</tr>
<tr>
<td>阿里云数仓数据存储</td>
<td>ODPS</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/odpsreader/doc/odpsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/odpswriter/doc/odpswriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>ADS</td>
<td align="center"></td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/adswriter/doc/adswriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>OSS</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/ossreader/doc/ossreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/osswriter/doc/osswriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>OCS</td>
<td align="center"></td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/ocswriter/doc/ocswriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>Hologres</td>
<td align="center"></td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hologresjdbcwriter/doc/hologresjdbcwriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>AnalyticDB For PostgreSQL</td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">写</td>
</tr>
<tr>
<td>阿里云中间件</td>
<td>datahub</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">读 、写</td>
</tr>
<tr>
<td></td>
<td>SLS</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">读 、写</td>
</tr>
<tr>
<td>阿里云图数据库</td>
<td>GDB</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/gdbreader/doc/gdbreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/gdbwriter/doc/gdbwriter.md">写</a></td>
</tr>
<tr>
<td>NoSQL数据存储</td>
<td>OTS</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/otsreader/doc/otsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/otswriter/doc/otswriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>Hbase0.94</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hbase094xreader/doc/hbase094xreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/hbase094xwriter/doc/hbase094xwriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>Hbase1.1</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hbase11xreader/doc/hbase11xreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/hbase11xwriter/doc/hbase11xwriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>Phoenix4.x</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hbase11xsqlreader/doc/hbase11xsqlreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/hbase11xsqlwriter/doc/hbase11xsqlwriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>Phoenix5.x</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hbase20xsqlreader/doc/hbase20xsqlreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/hbase20xsqlwriter/doc/hbase20xsqlwriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>MongoDB</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/mongodbreader/doc/mongodbreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/mongodbwriter/doc/mongodbwriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>Cassandra</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/cassandrareader/doc/cassandrareader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/cassandrawriter/doc/cassandrawriter.md">写</a></td>
</tr>
<tr>
<td>数仓数据存储</td>
<td>StarRocks</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">读 、<a href="https://github.com/alibaba/DataX/blob/master/starrockswriter/doc/starrockswriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>ApacheDoris</td>
<td align="center"></td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/doriswriter/doc/doriswriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>ClickHouse</td>
<td align="center"></td>
<td align="center">√</td>
<td align="center">写</td>
</tr>
<tr>
<td></td>
<td>Hive</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hdfsreader/doc/hdfsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/hdfswriter/doc/hdfswriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>kudu</td>
<td align="center"></td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hdfswriter/doc/hdfswriter.md">写</a></td>
</tr>
<tr>
<td>无结构化数据存储</td>
<td>TxtFile</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/txtfilereader/doc/txtfilereader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/txtfilewriter/doc/txtfilewriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>FTP</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/ftpreader/doc/ftpreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/ftpwriter/doc/ftpwriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>HDFS</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/hdfsreader/doc/hdfsreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/hdfswriter/doc/hdfswriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>Elasticsearch</td>
<td align="center"></td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/elasticsearchwriter/doc/elasticsearchwriter.md">写</a></td>
</tr>
<tr>
<td>时间序列数据库</td>
<td>OpenTSDB</td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/opentsdbreader/doc/opentsdbreader.md">读</a></td>
</tr>
<tr>
<td></td>
<td>TSDB</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/tsdbreader/doc/tsdbreader.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/tsdbwriter/doc/tsdbhttpwriter.md">写</a></td>
</tr>
<tr>
<td></td>
<td>TDengine</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"><a href="https://github.com/alibaba/DataX/blob/master/tdenginereader/doc/tdenginereader-CN.md">读</a> 、<a href="https://github.com/alibaba/DataX/blob/master/tdenginewriter/doc/tdenginewriter-CN.md">写</a></td>
</tr>
</tbody></table>
<h2 id="部署需求"><a href="#部署需求" class="headerlink" title="部署需求"></a>部署需求</h2><ul>
<li>Linux</li>
<li><a href="http://www.oracle.com/technetwork/cn/java/javase/downloads/index.html">JDK(1.8以上，推荐1.8)</a></li>
<li><a href="https://www.python.org/downloads/">Python(2或3都可以)</a></li>
<li><a href="https://maven.apache.org/download.cgi">Apache Maven 3.x</a> (Compile DataX)</li>
</ul>
<h2 id="部署步骤以及问题"><a href="#部署步骤以及问题" class="headerlink" title="部署步骤以及问题"></a>部署步骤以及问题</h2><p>解压datax的安装包 -》 制作软连接 -》 修改环境变量并source -》 执行自检脚本 <code>datax.py $&#123;DATAX_HOME&#125;/job/job.json</code></p>
<p>如果出现</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">DataX (DATAX-OPENSOURCE-3.0), <span class="keyword">From</span> Alibaba !</span><br><span class="line">Copyright (C) 2010-2017, Alibaba Group. All Rights Reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2022-12-18 10:01:32.806 [main] <span class="built_in">INFO</span>  VMInfo - VMInfo# operatingSystem class =&gt; sun.management.OperatingSystemImpl</span><br><span class="line">2022-12-18 10:01:32.825 [main] <span class="built_in">INFO</span>  Engine - the machine <span class="built_in">info</span>  =&gt; </span><br><span class="line"></span><br><span class="line">	osInfo:	Oracle Corporation 1.8 25.45-b02</span><br><span class="line">	jvmInfo:	Linux amd64 3.10.0-1127.el7.x86_64</span><br><span class="line">	cpu num:	2</span><br><span class="line"></span><br><span class="line">	totalPhysicalMemory:	-0.00G</span><br><span class="line">	freePhysicalMemory:	-0.00G</span><br><span class="line">	maxFileDescriptorCount:	-1</span><br><span class="line">	currentOpenFileDescriptorCount:	-1</span><br><span class="line"></span><br><span class="line">	GC Names	[PS MarkSweep, PS Scavenge]</span><br><span class="line"></span><br><span class="line">	MEMORY_NAME                    | allocation_size                | init_size                </span><br><span class="line">	PS Eden Space                  | 256.00MB                       | 256.00MB                 </span><br><span class="line">	Code Cache                     | 240.00MB                       | 2.44MB                   </span><br><span class="line">	Compressed Class Space         | 1,024.00MB                     | 0.00MB                   </span><br><span class="line">	PS Survivor Space              | 42.50MB                        | 42.50MB                  </span><br><span class="line">	PS Old Gen                     | 683.00MB                       | 683.00MB                 </span><br><span class="line">	Metaspace                      | -0.00MB                        | 0.00MB                   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2022-12-18 10:01:32.848 [main] <span class="built_in">INFO</span>  Engine - </span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;content&quot;</span>:[</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">&quot;reader&quot;</span>:&#123;</span><br><span class="line">				<span class="string">&quot;name&quot;</span>:<span class="string">&quot;streamreader&quot;</span>,</span><br><span class="line">				<span class="string">&quot;parameter&quot;</span>:&#123;</span><br><span class="line">					<span class="string">&quot;column&quot;</span>:[</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="string">&quot;type&quot;</span>:<span class="string">&quot;string&quot;</span>,</span><br><span class="line">							<span class="string">&quot;value&quot;</span>:<span class="string">&quot;DataX&quot;</span></span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="string">&quot;type&quot;</span>:<span class="string">&quot;long&quot;</span>,</span><br><span class="line">							<span class="string">&quot;value&quot;</span>:19890604</span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="string">&quot;type&quot;</span>:<span class="string">&quot;date&quot;</span>,</span><br><span class="line">							<span class="string">&quot;value&quot;</span>:<span class="string">&quot;1989-06-04 00:00:00&quot;</span></span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="string">&quot;type&quot;</span>:<span class="string">&quot;bool&quot;</span>,</span><br><span class="line">							<span class="string">&quot;value&quot;</span>:true</span><br><span class="line">						&#125;,</span><br><span class="line">						&#123;</span><br><span class="line">							<span class="string">&quot;type&quot;</span>:<span class="string">&quot;bytes&quot;</span>,</span><br><span class="line">							<span class="string">&quot;value&quot;</span>:<span class="string">&quot;test&quot;</span></span><br><span class="line">						&#125;</span><br><span class="line">					],</span><br><span class="line">					<span class="string">&quot;sliceRecordCount&quot;</span>:100000</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="string">&quot;writer&quot;</span>:&#123;</span><br><span class="line">				<span class="string">&quot;name&quot;</span>:<span class="string">&quot;streamwriter&quot;</span>,</span><br><span class="line">				<span class="string">&quot;parameter&quot;</span>:&#123;</span><br><span class="line">					<span class="string">&quot;encoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">					<span class="string">&quot;print&quot;</span>:false</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	],</span><br><span class="line">	<span class="string">&quot;setting&quot;</span>:&#123;</span><br><span class="line">		<span class="string">&quot;errorLimit&quot;</span>:&#123;</span><br><span class="line">			<span class="string">&quot;percentage&quot;</span>:0.02,</span><br><span class="line">			<span class="string">&quot;record&quot;</span>:0</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="string">&quot;speed&quot;</span>:&#123;</span><br><span class="line">			<span class="string">&quot;byte&quot;</span>:10485760</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2022-12-18 10:01:32.889 [main] WARN  Engine - prioriy <span class="built_in">set</span> <span class="keyword">to</span> 0, because NumberFormatException, the value is: <span class="literal">null</span></span><br><span class="line">2022-12-18 10:01:32.890 [main] <span class="built_in">INFO</span>  PerfTrace - PerfTrace <span class="attribute">traceId</span>=job_-1, <span class="attribute">isEnable</span>=<span class="literal">false</span>, <span class="attribute">priority</span>=0</span><br><span class="line">2022-12-18 10:01:32.890 [main] <span class="built_in">INFO</span>  JobContainer - DataX jobContainer starts job.</span><br><span class="line">2022-12-18 10:01:32.891 [main] <span class="built_in">INFO</span>  JobContainer - <span class="built_in">Set</span> jobId = 0</span><br><span class="line">2022-12-18 10:01:32.916 [job-0] <span class="built_in">INFO</span>  JobContainer - jobContainer starts <span class="keyword">to</span> <span class="keyword">do</span> prepare <span class="built_in">..</span>.</span><br><span class="line">2022-12-18 10:01:32.917 [job-0] <span class="built_in">INFO</span>  JobContainer - DataX Reader.Job [streamreader] <span class="keyword">do</span> prepare work .</span><br><span class="line">2022-12-18 10:01:32.917 [job-0] <span class="built_in">INFO</span>  JobContainer - DataX Writer.Job [streamwriter] <span class="keyword">do</span> prepare work .</span><br><span class="line">2022-12-18 10:01:32.917 [job-0] <span class="built_in">INFO</span>  JobContainer - jobContainer starts <span class="keyword">to</span> <span class="keyword">do</span> split <span class="built_in">..</span>.</span><br><span class="line">2022-12-18 10:01:32.918 [job-0] <span class="built_in">INFO</span>  JobContainer - Job <span class="built_in">set</span> Max-Byte-Speed <span class="keyword">to</span> 10485760 bytes.</span><br><span class="line">2022-12-18 10:01:32.919 [job-0] <span class="built_in">INFO</span>  JobContainer - DataX Reader.Job [streamreader] splits <span class="keyword">to</span> [1] tasks.</span><br><span class="line">2022-12-18 10:01:32.919 [job-0] <span class="built_in">INFO</span>  JobContainer - DataX Writer.Job [streamwriter] splits <span class="keyword">to</span> [1] tasks.</span><br><span class="line">2022-12-18 10:01:32.941 [job-0] <span class="built_in">INFO</span>  JobContainer - jobContainer starts <span class="keyword">to</span> <span class="keyword">do</span> schedule <span class="built_in">..</span>.</span><br><span class="line">2022-12-18 10:01:32.945 [job-0] <span class="built_in">INFO</span>  JobContainer -<span class="built_in"> Scheduler </span>starts [1] taskGroups.</span><br><span class="line">2022-12-18 10:01:32.947 [job-0] <span class="built_in">INFO</span>  JobContainer - Running by standalone Mode.</span><br><span class="line">2022-12-18 10:01:32.967 [taskGroup-0] <span class="built_in">INFO</span>  TaskGroupContainer - taskGroupId=[0] start [1] channels <span class="keyword">for</span> [1] tasks.</span><br><span class="line">2022-12-18 10:01:32.978 [taskGroup-0] <span class="built_in">INFO</span>  Channel - Channel <span class="built_in">set</span> byte_speed_limit <span class="keyword">to</span> -1, <span class="literal">No</span> bps activated.</span><br><span class="line">2022-12-18 10:01:32.978 [taskGroup-0] <span class="built_in">INFO</span>  Channel - Channel <span class="built_in">set</span> record_speed_limit <span class="keyword">to</span> -1, <span class="literal">No</span> tps activated.</span><br><span class="line">2022-12-18 10:01:32.999 [taskGroup-0] <span class="built_in">INFO</span>  TaskGroupContainer - taskGroup[0] taskId[0] attemptCount[1] is started</span><br><span class="line">2022-12-18 10:01:33.100 [taskGroup-0] <span class="built_in">INFO</span>  TaskGroupContainer - taskGroup[0] taskId[0] is successed, used[116]ms</span><br><span class="line">2022-12-18 10:01:33.101 [taskGroup-0] <span class="built_in">INFO</span>  TaskGroupContainer - taskGroup[0] completed it<span class="string">&#x27;s tasks.</span></span><br><span class="line"><span class="string">2022-12-18 10:01:43.004 [job-0] INFO  StandAloneJobContainerCommunicator - Total 100000 records, 2600000 bytes | Speed 253.91KB/s, 10000 records/s | Error 0 records, 0 bytes |  All Task WaitWriterTime 0.029s |  All Task WaitReaderTime 0.029s | Percentage 100.00%</span></span><br><span class="line"><span class="string">2022-12-18 10:01:43.005 [job-0] INFO  AbstractScheduler - Scheduler accomplished all tasks.</span></span><br><span class="line"><span class="string">2022-12-18 10:01:43.005 [job-0] INFO  JobContainer - DataX Writer.Job [streamwriter] do post work.</span></span><br><span class="line"><span class="string">2022-12-18 10:01:43.005 [job-0] INFO  JobContainer - DataX Reader.Job [streamreader] do post work.</span></span><br><span class="line"><span class="string">2022-12-18 10:01:43.005 [job-0] INFO  JobContainer - DataX jobId [0] completed successfully.</span></span><br><span class="line"><span class="string">2022-12-18 10:01:43.006 [job-0] INFO  HookInvoker - No hook invoked, because base dir not exists or is a file: /home/hadoop/app/datax/hook</span></span><br><span class="line"><span class="string">2022-12-18 10:01:43.007 [job-0] INFO  JobContainer - </span></span><br><span class="line"><span class="string">	 [total cpu info] =&gt; </span></span><br><span class="line"><span class="string">		averageCpu                     | maxDeltaCpu                    | minDeltaCpu              </span></span><br><span class="line"><span class="string">		-1.00%                         | -1.00%                         | -1.00%</span></span><br><span class="line"><span class="string">                  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	 [total gc info] =&gt; </span></span><br><span class="line"><span class="string">		 NAME                 | totalGCCount       | maxDeltaGCCount    | minDeltaGCCount    | totalGCTime        | maxDeltaGCTime     | minDeltaGCTime   </span></span><br><span class="line"><span class="string">		 PS MarkSweep         | 0                  | 0                  | 0                  | 0.000s             | 0.000s             | 0.000s       </span></span><br><span class="line"><span class="string">		 PS Scavenge          | 0                  | 0                  | 0                  | 0.000s             | 0.000s             | 0.000s       </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2022-12-18 10:01:43.007 [job-0] INFO  JobContainer - PerfTrace not enable!</span></span><br><span class="line"><span class="string">2022-12-18 10:01:43.007 [job-0] INFO  StandAloneJobContainerCommunicator - Total 100000 records, 2600000 bytes | Speed 253.91KB/s, 10000 records/s | Error 0 records, 0 bytes |  All Task WaitWriterTime 0.029s |  All Task WaitReaderTime 0.029s | Percentage 100.00%</span></span><br><span class="line"><span class="string">2022-12-18 10:01:43.011 [job-0] INFO  JobContainer - </span></span><br><span class="line"><span class="string">任务启动时刻                    : 2022-12-18 10:01:32</span></span><br><span class="line"><span class="string">任务结束时刻                    : 2022-12-18 10:01:43</span></span><br><span class="line"><span class="string">任务总计耗时                    :                 10s</span></span><br><span class="line"><span class="string">任务平均流量                    :          253.91KB/s</span></span><br><span class="line"><span class="string">记录写入速度                    :          10000rec/s</span></span><br><span class="line"><span class="string">读出记录总数                    :              100000</span></span><br><span class="line"><span class="string">读写失败总数                    :                   0</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>则部署成功</p>
<h2 id="遇见的问题"><a href="#遇见的问题" class="headerlink" title="遇见的问题"></a>遇见的问题</h2><p>自建的时候出现</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Copyright (C) <span class="number">2010</span>-<span class="number">2017</span>, Alibaba Group. All Rights Reserved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">18</span> <span class="number">09</span>:<span class="number">56</span>:<span class="number">52.120</span> <span class="selector-attr">[main]</span> WARN  ConfigParser - 插件<span class="selector-attr">[streamreader,streamwriter]</span>加载失败，<span class="number">1s</span>后重试... Exception:Code:<span class="selector-attr">[Common-00]</span>, Describe:<span class="selector-attr">[您提供的配置文件存在错误信息，请检查您的作业配置 .]</span> - 配置信息错误，您提供的配置文件<span class="selector-attr">[/home/hadoop/app/datax/plugin/reader/._drdsreader/plugin.json]</span>不存在. 请检查您的配置文件. </span><br><span class="line"><span class="number">2022</span>-<span class="number">12</span>-<span class="number">18</span> <span class="number">09</span>:<span class="number">56</span>:<span class="number">53.124</span> <span class="selector-attr">[main]</span> ERROR Engine - </span><br><span class="line"></span><br><span class="line">经DataX智能分析,该任务最可能的错误原因是:</span><br><span class="line">com<span class="selector-class">.alibaba</span><span class="selector-class">.datax</span><span class="selector-class">.common</span><span class="selector-class">.exception</span><span class="selector-class">.DataXException</span>: Code:<span class="selector-attr">[Common-00]</span>, Describe:<span class="selector-attr">[您提供的配置文件存在错误信息，请检查您的作业配置 .]</span> - 配置信息错误，您提供的配置文件<span class="selector-attr">[/home/hadoop/app/datax/plugin/reader/._drdsreader/plugin.json]</span>不存在. 请检查您的配置文件.</span><br><span class="line">	at com<span class="selector-class">.alibaba</span><span class="selector-class">.datax</span><span class="selector-class">.common</span><span class="selector-class">.exception</span><span class="selector-class">.DataXException</span><span class="selector-class">.asDataXException</span>(DataXException<span class="selector-class">.java</span>:<span class="number">26</span>)</span><br><span class="line">	at com<span class="selector-class">.alibaba</span><span class="selector-class">.datax</span><span class="selector-class">.common</span><span class="selector-class">.util</span><span class="selector-class">.Configuration</span><span class="selector-class">.from</span>(Configuration<span class="selector-class">.java</span>:<span class="number">95</span>)</span><br><span class="line">	at com<span class="selector-class">.alibaba</span><span class="selector-class">.datax</span><span class="selector-class">.core</span><span class="selector-class">.util</span><span class="selector-class">.ConfigParser</span><span class="selector-class">.parseOnePluginConfig</span>(ConfigParser<span class="selector-class">.java</span>:<span class="number">153</span>)</span><br><span class="line">	at com<span class="selector-class">.alibaba</span><span class="selector-class">.datax</span><span class="selector-class">.core</span><span class="selector-class">.util</span><span class="selector-class">.ConfigParser</span><span class="selector-class">.parsePluginConfig</span>(ConfigParser<span class="selector-class">.java</span>:<span class="number">125</span>)</span><br><span class="line">	at com<span class="selector-class">.alibaba</span><span class="selector-class">.datax</span><span class="selector-class">.core</span><span class="selector-class">.util</span><span class="selector-class">.ConfigParser</span><span class="selector-class">.parse</span>(ConfigParser<span class="selector-class">.java</span>:<span class="number">63</span>)</span><br><span class="line">	at com<span class="selector-class">.alibaba</span><span class="selector-class">.datax</span><span class="selector-class">.core</span><span class="selector-class">.Engine</span><span class="selector-class">.entry</span>(Engine<span class="selector-class">.java</span>:<span class="number">137</span>)</span><br><span class="line">	at com<span class="selector-class">.alibaba</span><span class="selector-class">.datax</span><span class="selector-class">.core</span><span class="selector-class">.Engine</span><span class="selector-class">.main</span>(Engine<span class="selector-class">.java</span>:<span class="number">204</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find <span class="variable">$&#123;DATAX_HOME&#125;</span>/plugin/reader/ -<span class="built_in">type</span> f -name <span class="string">&quot;._*er&quot;</span> | xargs <span class="built_in">rm</span> -rf</span><br><span class="line">find <span class="variable">$&#123;DATAX_HOME&#125;</span>/plugin/writer/ -<span class="built_in">type</span> f -name <span class="string">&quot;._*er&quot;</span> | xargs <span class="built_in">rm</span> -rf</span><br></pre></td></tr></table></figure>

<p>然后重新自检就成功了</p>
<h1 id="安装datax-web工具"><a href="#安装datax-web工具" class="headerlink" title="安装datax-web工具"></a>安装datax-web工具</h1><p>简介 ： DataX Web是在DataX之上开发的分布式数据同步工具，提供简单易用的操作界面。</p>
<p>相当于多了一个图形化界面</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>解压压缩包-&gt; 制作软连接 -&gt; 编辑并导入环境变量</p>
<ul>
<li>-&gt; 修改modules下的datax-admin下的conf下的bootstrap.properties</li>
<li>DB_HOST ： mysql所在的ip</li>
<li>DB_PORT ： mysql的端口</li>
<li>DB_USERNAME ： mysql的用户名</li>
<li>DB_PASSWORD ： mysql的用户名的密码</li>
<li>DB_DATABASE ： datax的配置文件所在的mysql的数据库</li>
<li>-&gt; 修改datax-executor下的bin下的env.properties的PYTOHON_PATH的配置地址，需与我们安装的datax目录一致</li>
<li>比如 ： <code>PYTHON_PATH=/home/hadoop/app/datax/bin/datax.py</code></li>
<li>-&gt; 修改&#x2F;datax-executor&#x2F;conf下的application.yml，把其中的admin下的addresses: <a href="http://ip:${datax.admin.port}">http://ip:${datax.admin.port}</a> ：ip改成自己机器的</li>
<li>然后进入到我们的最外层的bin目录下，执行 <code>start-all.sh</code>ps : 这里的start-all.sh和hadoop的启动脚本冲突，我们可以把它改名就好了</li>
<li>执行 <code>mv ./start-all.sh ./startdatax_web-all.sh停止脚本同理</code></li>
<li>然后启动脚本执行 ： <code> startdatax_web-all.sh</code></li>
<li>然后我们访问 <code>http://服务器IP:9527/index.html</code></li>
<li>初始账号密码 admin  123456</li>
</ul>
<p>使用方法和xxl非常类似</p>
<h1 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h1><p>简介 ： Prometheus(由go语言(golang)开发)是一套开源的监控&amp;报警&amp;时间序列数据库的组合。适合监控容器平台。因为kubernetes(俗称k8s)的流行带动了prometheus的发展</p>
<p>Prometheus的主要特征有:</p>
<ol>
<li>多维度数据模型</li>
<li>灵活的查询语言</li>
<li>不依赖分布式存储，单个服务器节点是自主的</li>
<li>以HTTP方式，通过pull模型拉去时间序列数据</li>
<li>也可以通过中间网关支持push模型</li>
<li>通过服务发现或者静态配置, 来发现目标服务对象</li>
<li>支持多种多样的图表和界面展示</li>
</ol>
<table>
<thead>
<tr>
<th>主机名</th>
<th>ip</th>
<th>身份</th>
</tr>
</thead>
<tbody><tr>
<td>bigdata4</td>
<td>192.168.41.133</td>
<td>prometheus服务器</td>
</tr>
<tr>
<td>bigdata3</td>
<td>192.168.41.132</td>
<td>被监控服务器</td>
</tr>
<tr>
<td>bigdata5</td>
<td>192.168.41.134</td>
<td>granfana服务器</td>
</tr>
</tbody></table>
<p>时间同步</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl restart ntpd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl <span class="built_in">enable</span> ntpd</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>关闭防火墙和seLInux</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl stop firewalld</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">systemctl <span class="built_in">enable</span> firewalld</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">setenforce 0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim /etc/selinux/config</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">iptables -F</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="部署安装"><a href="#部署安装" class="headerlink" title="部署安装"></a>部署安装</h2><p>去官网下载二进制的安装包这里要下载两个东西 ，一个是prometheus-2.41.0-rc.0.linux-amd64.tar 一个是 node_exporter-1.5.0.linux-amd64.tar.gz</p>
<p>简单来说 prometheus-2.41.0-rc.0.linux-amd64.ta是服务器 而 node_exporter-1.5.0.linux-amd64.tar.gz是监控器</p>
<p>监控器除了服务器以外的机器上都要有，服务器只要在你想部署的服务器上就好</p>
<p>解压 -》 软连接 -》 配置环境变量</p>
<ul>
<li>-》 修改prometheus文件夹下的prometheus.yml文件</li>
<li>job_name ： 代表监控器的名字</li>
<li>targets: [“localhost:9090”] 代表监控器的IP地址以及端口号</li>
<li>监控器的默认端口是9100</li>
<li>我们对其修改，增加几个</li>
</ul>
<p>然后在服务器上执行 <code>prometheus --config.file=&quot;/home/hadoop/app/prometheus/prometheus.yml&quot; &amp;</code></p>
<p>在另外两个机器上执行 <code> node_exporter</code></p>
<p>然后访问IP:9090点击Status然后点击Target就可以看见我们的三台机器以及其名字</p>
<h3 id="监控Zookeeper"><a href="#监控Zookeeper" class="headerlink" title="监控Zookeeper"></a>监控Zookeeper</h3><p>监控Zookeeper和上述监控机器一样，只不过因为github上有开源的<a href="https://github.com/jiankunking/zookeeper_exporter">zookeeper_exporter</a>然后直接上传到linux上，给他赋权限（执行权限）</p>
<p>然后执行 <code>zookeeper_exporter ip：ZK的端口：监控日志的对接端口</code>就启动了，然后我们在我们的prometheus服务器上修改配置文件，添加上即可</p>
<h3 id="监控kafka"><a href="#监控kafka" class="headerlink" title="监控kafka"></a>监控kafka</h3><p>监控kafka同上</p>
<h3 id="监控flume"><a href="#监控flume" class="headerlink" title="监控flume"></a>监控flume</h3><p>关于监控flume同上步骤，不过，flume的监控器是go语言进行编译的，所以要先安装go语言的环境</p>
<h1 id="granfana"><a href="#granfana" class="headerlink" title="granfana"></a>granfana</h1><p>其是对普罗米修斯收集的数据进行处理以及显示的一个软件</p>
<h2 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h2><p>下载rpm包 执行以下命令 <code> wget https://dl.grafana.com/enterprise/release/grafana-enterprise-9.1.5-1.x86_64.rpm</code></p>
<p>在完成之后直接执行安装命令要root用户 <code> rpm -ivh grafana-enterprise-9.1.5-1.x86_64.rpm</code></p>
<p>然后执行 <code> systemctl start grafana-server</code></p>
<p>然后用 <code>lsof -i:3000</code> 查看一下3000端口出现如下</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">COMMAND    PID    <span class="keyword">USER</span>   <span class="title">FD</span>   <span class="keyword">TYPE</span> DEVICE SIZE/OFF <span class="keyword">NODE</span> <span class="title">NAME</span></span><br><span class="line">grafana-s <span class="number">6962</span> grafana    <span class="number">8</span>u  IPv6  <span class="number">90355</span>      <span class="number">0</span>t0  TCP *:hbci (LISTEN)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后浏览器访问ip:3000就可以了</p>
<p>进去之后选择数据源，选择普罗米修斯的，然后添加上他的链接就ok了（服务器的链接以及端口）</p>
]]></content>
      <categories>
        <category>杂货技术栈</category>
      </categories>
      <tags>
        <tag>datax</tag>
      </tags>
  </entry>
  <entry>
    <title>clickHouse</title>
    <url>/2022/12/19/12-19/</url>
    <content><![CDATA[<h1 id="为什么选择CK"><a href="#为什么选择CK" class="headerlink" title="为什么选择CK"></a>为什么选择CK</h1><ol>
<li><strong>目前企业用户行为日志每天百亿量级，虽然经过数仓的分层以及数据汇总层通用维度指标的预计算，但有些个性化的分析场景还是需要直接编写程序或sql查询，这种情况下hive sql和spark sql的查询性能已无法满足用户需求，我们迫切的需要一个OLAP引擎来支持快速的即席查询。</strong></li>
<li><strong>BI存储库主要采用的是Infobright，在千万量级能很快的响应BI的查询请求，但随着时间推移和业务的发展，Infobright的并发量与查询瓶颈日益凸显，我们尝试将大数据量级的表导入TiDB、Hbase、ES等存储库，虽然对查询有一定的提速，但是也存在着相应的问题（后续章节会详细介绍），这时我们考虑到Clickhouse。</strong></li>
<li><strong>Clickhouse社区活跃度高、版本迭代非常快,几乎几天到十几天更新一个小版本，我们非常看好它以后的发展。</strong></li>
</ol>
<h1 id="ck特性"><a href="#ck特性" class="headerlink" title="ck特性"></a>ck特性</h1><p><strong>Clickhouse是俄罗斯yandex公司于2016年开源的一个列式数据库管理系统，在OLAP领域像一匹黑马一样，以其超高的性能受到业界的青睐。</strong>特性：</p>
<ul>
<li><strong>基于shard+replica实现的线性扩展和高可靠</strong></li>
<li><strong>采用列式存储，数据类型一致，压缩性能更高</strong></li>
<li><strong>硬件利用率高，连续IO，提高了磁盘驱动器的效率</strong></li>
<li><strong>向量化引擎与SIMD提高了CPU利用率，多核多节点并行化大查询</strong></li>
</ul>
<p><strong>不足：</strong></p>
<ul>
<li><strong>不支持事务、异步删除与更新</strong></li>
<li><strong>不适用高并发场景</strong></li>
</ul>
<h1 id="数据接入层"><a href="#数据接入层" class="headerlink" title="数据接入层"></a>数据接入层</h1><p><strong>提供了数据导入相关的服务及功能，按照数据的量级和特性我们抽象出三种Clickhouse导入数据的方式。</strong></p>
<ul>
<li><strong>方式一：数仓应用层小表导入</strong>这类数据量级相对较小，且分布在不同的数据源如hdfs、es、hbase等，这时我们提供基于DataX自研的TaskPlus数据流转+调度平台导入数据，单分区数据无并发写入，多分区数据小并发写入，且能和线上任务形成依赖关系，确保导入程序的可靠性。</li>
<li><strong>方式二：离线多维明细宽表导入</strong>这类数据一般是汇总层的明细数据或者是用户基于Hadoop生产的大量级数据，我们基于Spark开发了一个导入工具包，用户可以根据配置直接拉取hdfs或者hive上的数据到clickhouse，同时还能基于配置sql对数据进行ETL处理，工具包会根据配置集群的节点数以及Clickhouse集群负载情况(merges、processes)对local表进行高并发的写入，达到快速导数的目的。</li>
<li><strong>方式三：实时多维明细宽表导入</strong>实时数据接入场景比较固定，我们封装了通用的ClickhouseSink，将app、pc、m三端每日百亿级的数据通过Flink接入clickhouse，ClickhouseSink也提供了batchSize(单次导入数据量)及batchTime(单次导入时间间隔)供用户选择。</li>
</ul>
<h1 id="数据存储层"><a href="#数据存储层" class="headerlink" title="数据存储层"></a>数据存储层</h1><p><strong>数据存储层这里我们采用双副本机制来保证数据的高可靠，同时用nginx代理clickhouse集群，通过域名的方式进行读写操作，实现了数据均衡及高可靠写入，且对于域名的响应时间及流量有对应的实时监控，一旦响应速度出现波动或异常我们能在第一时间收到报警通知。</strong></p>
<ul>
<li><strong>nginx_one_replication：代理集群一半节点即一个完整副本，常用于写操作，在每次提交数据时由nginx均衡路由到对应的shard表，当某一个节点出现异常导致写入失败时，nginx会暂时剔除异常节点并报警，然后另选一台节点重新写入。</strong></li>
<li><strong>nginx_two_replication：代理集群所有节点，一般用作查询和无副本表数据写入，同时也会有对于异常节点的剔除和报警机制。</strong></li>
</ul>
<h1 id="数据服务层"><a href="#数据服务层" class="headerlink" title="数据服务层"></a>数据服务层</h1><ul>
<li><strong>对外：将集群查询统一封装为scf服务(RPC)，供外部调用。</strong></li>
<li><strong>对内：提供了客户端工具直接供分析师及开发人员使用。</strong></li>
</ul>
<h1 id="数据应用层"><a href="#数据应用层" class="headerlink" title="数据应用层"></a>数据应用层</h1><ul>
<li><strong>埋点系统：对接实时clickhouse集群，提供秒级别的OLAP查询功能。</strong></li>
<li><strong>用户分析平台：通过标签筛选的方式，从用户访问总集合中根据特定的用户行为捕获所需用户集。</strong></li>
<li><strong>BI：提供数据应用层的可视化展示，对接单分片多副本Clickhouse集群，可横向扩展。</strong></li>
</ul>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>进行集群部署clickhouse的步骤很简单，不过有很多坑</p>
<p>首先执行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo yum install yum-utils</span><br><span class="line">sudo rpm --import https:<span class="regexp">//</span>repo.clickhouse.com/CLICKHOUSE-KEY.GPG</span><br><span class="line">sudo yum-config-manager --add-repo https:<span class="regexp">//</span>repo.clickhouse.com<span class="regexp">/rpm/</span>stable/x86_64</span><br></pre></td></tr></table></figure>

<p>然后用命令安装</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">sudo yum install clickhouse-<span class="keyword">server</span> clickhouse-<span class="keyword">client</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后执行</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo <span class="regexp">/etc/i</span>nit.d/clickhouse-server start</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动服务后，可以使用命令行客户端连接到它:</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta">#默认没有密码：</span></span><br><span class="line">clickhouse-<span class="keyword">client</span></span><br><span class="line"><span class="meta">#有密码：</span></span><br><span class="line">clickhouse-<span class="keyword">client</span> -u <span class="literal">default</span> --password [-m --port 你自定义的端口]</span><br></pre></td></tr></table></figure>

<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">:) <span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">┌─<span class="number">1</span>─┐</span><br><span class="line">│ <span class="number">1</span> │</span><br><span class="line">└───┘</span><br><span class="line"> </span><br><span class="line"><span class="number">1</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="built_in">set</span>. Elapsed: <span class="number">0.003</span> sec.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>则基本完成，接下来我们修改配置文件进行集群部署</p>
<p>注意：接下来的操作要换成root用户</p>
<p>vi &#x2F;etc&#x2F;clickhouse-server&#x2F;users.xml修改我们的password</p>
<p>vi &#x2F;etc&#x2F;clickhouse-server&#x2F;config.xml 修改如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#配置3分片2副本集群</span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">remote_servers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ck_cluster</span>&gt;</span>  <span class="comment">&lt;!--集群的名字，随意起 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 集群第一个分片 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">weight</span>&gt;</span>1<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>ip1<span class="tag">&lt;/<span class="name">host</span>&gt;</span>   </span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>ip2<span class="tag">&lt;/<span class="name">host</span>&gt;</span>  </span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 集群第二个分片 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">weight</span>&gt;</span>1<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>ip3<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>ip4<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 集群第三个分片 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">shard</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">weight</span>&gt;</span>1<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">internal_replication</span>&gt;</span>true<span class="tag">&lt;/<span class="name">internal_replication</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>ip5<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">replica</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">host</span>&gt;</span>ip6<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ck_cluster</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">remote_servers</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">zookeeper</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>ip1<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>ip2<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">node</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">host</span>&gt;</span>ip3<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">zookeeper</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 定义该clickhouse实例存放什么 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">macros</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 几号分片 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">shard</span>&gt;</span>01<span class="tag">&lt;/<span class="name">shard</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 1分片的2副本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">replica</span>&gt;</span>集群名-01-2<span class="tag">&lt;/<span class="name">replica</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">macros</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还可以进行修改我们的数据文件以及日志存放的位置，不过有问题，因为clickhouse自己创建的文件默认分组和用户是clickhouse的所以要把权限赋值给我们的文件夹，chmod 777 ，可是如果直接把整个用户文件夹设置777则会造成ssh链接不上，最后选择不修改ck的数据文件夹就ok了</p>
<p>然后我们进行重新启动我们的clickhouse，通过 <code>sudo systemctl restart clickhouse-server.service</code></p>
<p>然后通过命令登录clickhouse <code>clickhouse-client -u default --password liuzihan010616</code></p>
<p>然后我们输入select * from system.clusters; 查看一下自己的集群出现如下结果就成功了</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">Query id: a8bda66b-0e9b-4e52-a2ef-bf4450796d91</span><br><span class="line"></span><br><span class="line">┌─cluster────┬─shard_num─┬─shard_weight─┬─replica_num─┬─host_name─┬─host_address───┬─port─┬─is_local─┬─user────┬─default_database─┬─errors_count─┬─slowdowns_count─┬─estimated_recovery_time─┐</span><br><span class="line">│ ck_cluster │        <span class="number"> 1 </span>│           <span class="number"> 1 </span>│          <span class="number"> 1 </span>│ bigdata5  │ 192.168.41.134 │<span class="number"> 9000 </span>│       <span class="number"> 1 </span>│ default │                  │           <span class="number"> 0 </span>│              <span class="number"> 0 </span>│                      <span class="number"> 0 </span>│</span><br><span class="line">│ ck_cluster │        <span class="number"> 2 </span>│           <span class="number"> 1 </span>│          <span class="number"> 1 </span>│ bigdata4  │ 192.168.41.133 │<span class="number"> 9000 </span>│       <span class="number"> 0 </span>│ default │                  │           <span class="number"> 0 </span>│              <span class="number"> 0 </span>│                      <span class="number"> 0 </span>│</span><br><span class="line">│ ck_cluster │        <span class="number"> 3 </span>│           <span class="number"> 1 </span>│          <span class="number"> 1 </span>│ bigdata3  │ 192.168.41.132 │<span class="number"> 9000 </span>│       <span class="number"> 0 </span>│ default │                  │           <span class="number"> 0 </span>│              <span class="number"> 0 </span>│                      <span class="number"> 0 </span>│</span><br><span class="line">└────────────┴───────────┴──────────────┴─────────────┴───────────┴────────────────┴──────┴──────────┴─────────┴──────────────────┴──────────────┴─────────────────┴─────────────────────────┘</span><br><span class="line"></span><br><span class="line">3 rows in set. Elapsed: 0.001 sec. </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果启动不成功，就输入 <code>journalctl -xe</code></p>
<p>查看系统日志，然后看报错信息解决</p>
<p>然后如果想远程ip访问</p>
<p>通过如下：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>clickhouse-server/config.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改旗下的 <code>&lt;listen_host&gt;::&lt;/listen_host&gt;  </code>打开就好</p>
<p>因为clickhouse集群之间通信的端口是9000和hadoop的主节点端口冲突</p>
<p>更改的方法：在conf文件更改 <code>&lt;tcp_port&gt;9001&lt;/tcp_port&gt;</code> 同时上面的集群的端口也要进行更改</p>
<p>创建用户的权限。在user.xml文件里对其进行更改把 <code>&lt;!-- &lt;access_management&gt;1&lt;/access_management&gt; --&gt;</code></p>
<p>解开标签就代表这个用户有创建其他用户的权限</p>
<h1 id="mongo"><a href="#mongo" class="headerlink" title="mongo"></a>mongo</h1><p>mongo是一个非关系型的数据库，进而mysql不同，他的值都是key - &gt; value的</p>
<p>非关系型数据库(nosql ),属于文档型数据库。先解释一下文档的数据库，即可以存放xml、json、bson类型系那个的数据。这些数据具备自述性，呈现分层的树状数据结构。数据结构由键值(key&#x3D;&gt;value)对组成。</p>
<p>1、存储方式：虚拟内存+持久化。</p>
<p>2、查询语句：是独特的MongoDB的查询方式。</p>
<p>3、适合场景：事件的记录，内容管理或者博客平台等等。</p>
<p>4、架构特点：可以通过副本集，以及分片来实现高可用。</p>
<p>5、数据处理：数据是存储在硬盘上的，只不过需要经常读取的数据会被加载到内存中，将数据存储在物理内存中，从而达到高速读写。</p>
<p>6、成熟度与广泛度：新兴数据库，成熟度较低，Nosql数据库中最为接近关系型数据库，比较完善的DB之一，适用人群不断在增长。</p>
<h2 id="MongoDB优势与劣势"><a href="#MongoDB优势与劣势" class="headerlink" title="MongoDB优势与劣势"></a>MongoDB优势与劣势</h2><p>优势：</p>
<p>1、在适量级的内存的MongoDB的性能是非常迅速的，它将热数据存储在物理内存中，使得热数据的读写变得十分快。</p>
<p>2、MongoDB的高可用和集群架构拥有十分高的扩展性。</p>
<p>3、在副本集中，当主库遇到问题，无法继续提供服务的时候，副本集将选举一个新的主库继续提供服务。</p>
<p>4、MongoDB的Bson和JSon格式的数据十分适合文档格式的存储与查询。</p>
<p>劣势：</p>
<p>1、 不支持事务操作。MongoDB本身没有自带事务机制，若需要在MongoDB中实现事务机制，需通过一个额外的表，从逻辑上自行实现事务。 ACID</p>
<p>2、 应用经验少，由于NoSQL兴起时间短，应用经验相比关系型数据库较少。</p>
<p>3、MongoDB占用空间过大。</p>
<p>4、无join</p>
<p>其和mysql的对比如下<br><img src="https://pic.imgdb.cn/item/63a01e84b1fccdcd3663566e.jpg"></p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>1）表结构不明确且数据不断变大</p>
<p>MongoDB是非结构化文档数据库，扩展字段很容易且不会影响原有数据。内容管理或者博客平台等，例如圈子系统，存储用户评论之类的。</p>
<p>2）更高的写入负载</p>
<p>MongoDB侧重高数据写入的性能，而非事务安全，适合业务系统中有大量“低价值”数据的场景。本身存的就是json格式数据。例如做日志系统。</p>
<p>3）数据量很大或者将来会变得很大</p>
<p>Mysql单表数据量达到5-10G时会出现明显的性能降级，需要做数据的水平和垂直拆分、库的拆分完成扩展，MongoDB内建了sharding、很多数据分片的特性，容易水平扩展，比较好的适应大数据量增长的需求。</p>
<p>4）高可用性</p>
<p>自带高可用，自动主从切换（副本集）</p>
<p>不适用的场景</p>
<p>1）MongoDB不支持事务操作，需要用到事务的应用建议不用MongoDB。</p>
<p>2）MongoDB目前不支持join操作，需要复杂查询的应用也不建议使用MongoDB。</p>
<h2 id="关系型数据库和非关系型数据库的应用场景对比、"><a href="#关系型数据库和非关系型数据库的应用场景对比、" class="headerlink" title="关系型数据库和非关系型数据库的应用场景对比、"></a>关系型数据库和非关系型数据库的应用场景对比、</h2><p>关系型数据库适合存储结构化数据，如用户的帐号、地址：</p>
<p>1）这些数据通常需要做结构化查询，比如join，这时候，关系型数据库就要胜出一筹</p>
<p>2）这些数据的规模、增长的速度通常是可以预期的</p>
<p>3）事务性、一致性</p>
<p>　　</p>
<p>NoSQL适合存储非结构化数据，如文章、评论：</p>
<p>1）这些数据通常用于模糊处理，如全文搜索、机器学习</p>
<p>2）这些数据是海量的，而且增长的速度是难以预期的，</p>
<p>3）根据数据的特点，NoSQL数据库通常具有无限（至少接近）伸缩性</p>
<p>4）按key获取数据效率很高，但是对join或其他结构化查询的支持就比较差</p>
<p>相比较MySQL，MongoDB数据库更适合那些#读作业较重的任务模型。MongoDB能充分利用机器的内存资源。如果机器的内存资源丰富的话，MongoDB的查询效率会快很多。</p>
<p>在带”_id”插入数据的时候，MongoDB的插入效率其实并不高。如果想充分利用MongoDB性能的话，推荐采取不带”_id”的插入方式，然后对相关字段作索引来查询。</p>
]]></content>
      <categories>
        <category>杂货技术栈</category>
      </categories>
      <tags>
        <tag>clickhouse</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM</title>
    <url>/2022/12/21/12-21/</url>
    <content><![CDATA[<h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><p>官网 ： spring.io</p>
<p>到今天它已经成为了一个生态圈，可以通过官网进行查看</p>
<p>先学习spring Framework  ： 底层的框架，是设计性框架</p>
<p>然后是spring boot ： 提高开发速度</p>
<p>而后是spring cloud ： 分布式开发相关技术</p>
<h1 id="spring-FrameWork"><a href="#spring-FrameWork" class="headerlink" title="spring FrameWork"></a>spring FrameWork</h1><p>2004年spring 1.0 问世</p>
<p>spring 1.0 是纯配置 2.0 引入了注解 3.0 引入了可以不写注解的 ，4.0 spring对jdk进行支持，5.0的时候要jdk8</p>
<h2 id="spring思想"><a href="#spring思想" class="headerlink" title="spring思想"></a>spring思想</h2><p>我们现在的用纯javase的时候耦合度过高，则要改一点东西的时候要重新编译，解决方案，适用对象的时候会不要在主动用new对象，从外传进来，就可以把方法当作一个工具这个思想就是ioc（控制反转）</p>
<p>spring就做到了，spring容器：ioc容器，它用这个充当了ioc的外部，ioc容器要管理创建和初始化的过程，被创建或者被管理的对象叫bean</p>
<p>如果服务的依赖也在容器里，则ioc容器会自动把他们的关系绑好，绑关系的过程叫Di，基本思想就是充分解耦</p>
<h2 id="Ioc的入门案例思路"><a href="#Ioc的入门案例思路" class="headerlink" title="Ioc的入门案例思路"></a>Ioc的入门案例思路</h2><h3 id="管理什么？"><a href="#管理什么？" class="headerlink" title="管理什么？"></a>管理什么？</h3><p>对应的bean：比如service 和 dao</p>
<h3 id="如何告知被管理的文件？"><a href="#如何告知被管理的文件？" class="headerlink" title="如何告知被管理的文件？"></a>如何告知被管理的文件？</h3><p>通过配置文件</p>
<h3 id="被管理的对象交给ioc容器，如何获取到ioc？"><a href="#被管理的对象交给ioc容器，如何获取到ioc？" class="headerlink" title="被管理的对象交给ioc容器，如何获取到ioc？"></a>被管理的对象交给ioc容器，如何获取到ioc？</h3><p>接口</p>
<h3 id="如何从容器中获取bean"><a href="#如何从容器中获取bean" class="headerlink" title="如何从容器中获取bean"></a>如何从容器中获取bean</h3><p>接口方法</p>
<h3 id="spring如何导入坐标"><a href="#spring如何导入坐标" class="headerlink" title="spring如何导入坐标"></a>spring如何导入坐标</h3><p>pom.xml</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>先导入spring-context:在pom文件里导入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在resource文件夹里创建xml中选择spring的xml。随便命名</p>
<p>接下来我们编辑这个xml文件的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hellobean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.testbean.test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中 class后面的包名里如下 ，上述的id是我们引出这个bean的依据，就是id 这个id在一个xml文件中是不可以重复的，后面的class代表我们要用这个id代表的类，也就是告诉ioc容器，是哪一个类被它管理了，其内部只是一个普通的方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package org.example.testbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printhello</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;hellospringbean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后我们在一个java类里如下实现</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.testbean.test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main( <span class="keyword">String</span>[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        ApplicationContext stx = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        test hellobean = (test) stx.getBean(<span class="string">&quot;hellobean&quot;</span>);</span><br><span class="line">        hellobean.printhello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>就可以了，上述ApplicationContext是一个接口，然后通过ClassPathXmlApplicationContext(“applicationContext.xml”)把我们的配置文件载入</p>
<h2 id="Di的入门案例"><a href="#Di的入门案例" class="headerlink" title="Di的入门案例"></a>Di的入门案例</h2><p>提供方法让其进入到对应的依赖中，以及添加配置</p>
<p>首先创建两个类 如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package org.example.testbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">test2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> test tx;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">printhellobean</span>()</span>&#123;</span><br><span class="line">        tx.printhello();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;Secondly hello &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> test <span class="title">getTx</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTx</span>(<span class="params">test tx</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.tx = tx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------</span><br><span class="line">package org.example.testbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printhello</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;hellospringbean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后再spring的配置文件中加上，先添加上两个类的bean，然后进行关联 ，其中name是那一个类里的变量，ref是那个变量指向那一个bean所指向的类，就是bean的id</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hellobean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.testbean.test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hellobean2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.testbean.test2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;tx&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;hellobean&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后再app方法，就是我们要执行的方法中加上</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.testbean.test;</span><br><span class="line"><span class="keyword">import</span> org.example.testbean.test2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main( <span class="keyword">String</span>[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        ApplicationContext stx = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        test2 hellobean = (test2) stx.getBean(<span class="string">&quot;hellobean2&quot;</span>);</span><br><span class="line">        hellobean.printhellobean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这就是DI ，其实以前就自己用纯javaee代码实现过这个思想</p>
<h3 id="bean的别名"><a href="#bean的别名" class="headerlink" title="bean的别名"></a>bean的别名</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"> &lt;bean <span class="attribute">id</span>=<span class="string">&quot;hellobean&quot;</span> <span class="attribute">name</span>=<span class="string">&quot;test1 test3&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;org.example.testbean.test&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">然后其他的地方调用它和id是一样的</span><br></pre></td></tr></table></figure>

<p>可以用， ； 空格分割</p>
<p>spring 默认创建的bean是单例，就是一个对象无论是哪一个程序使用的相同的bean的id，它都是一个对象，可以进行设置</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;hellobean&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;org.example.testbean.test&quot;</span> <span class="attribute">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">这样他就会创建多个对象</span><br><span class="line">如果想创建单个对象，可以执行默认 ，或者singleton</span><br></pre></td></tr></table></figure>

<p>为什么bean默认为单例？</p>
<ul>
<li>为了控制bean的数量，以及减轻负担</li>
</ul>
<p>spring管理对象的时候就是管理的复用的对象</p>
<p>适合其管理的对象 ：</p>
<ul>
<li>表现层对象</li>
<li>业务层对象</li>
<li>数据层对象</li>
<li>工具对象</li>
</ul>
<p>不适合的</p>
<ul>
<li>封装实体的域对象</li>
</ul>
<h2 id="bean实例化"><a href="#bean实例化" class="headerlink" title="bean实例化"></a>bean实例化</h2><h3 id="bean是如何创建的"><a href="#bean是如何创建的" class="headerlink" title="bean是如何创建的"></a>bean是如何创建的</h3><p>bean的本质是对象，创建bean是使用方法</p>
<p>spring 创建bean的是无参的，无论是public 或者是private ，都可以调用，因为它是用反射调用的构造，但是如果你没有无参的构造方法，他会报错，就是bean创建的异常</p>
<p>spring的报错信息，我们一般是从后面往前看</p>
<h3 id="工厂方法创建bean"><a href="#工厂方法创建bean" class="headerlink" title="工厂方法创建bean"></a>工厂方法创建bean</h3><p>使用静态工厂的方式创建bean</p>
<p>先创建testFactory类</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.testbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">testFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> test testfac()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">test</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后我们在配置文件中写下</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;org.example.testbean.testFactory&quot;</span> <span class="attribute">factory-method</span>=<span class="string">&quot;testfac&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>然后再app类中执行的方法和上面一样</p>
<h3 id="实例工厂初始化bean"><a href="#实例工厂初始化bean" class="headerlink" title="实例工厂初始化bean"></a>实例工厂初始化bean</h3><p>创建个工厂类</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.testbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  test testfac()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">test</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改配置如下</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;org.example.testbean.testFactory&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;test&quot;</span> <span class="attribute">factory-method</span>=<span class="string">&quot;testfac&quot;</span> <span class="attribute">factory-bean</span>=<span class="string">&quot;factory&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>然后正常调用test就ok了</p>
<h3 id="使用接口创建"><a href="#使用接口创建" class="headerlink" title="使用接口创建"></a>使用接口创建</h3><p>我们思考，因为上面两种每次改一次就要去配置文件进行修改，有点太麻烦了，我们可以创建一个类实现FactorBean的接口如下</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.testbean;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testFactory2</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">test</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">test <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> test(); <span class="comment">// 要返回的对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> test.class;<span class="comment">//new 的对象的class</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//是不是单例</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上：然后再配置文件里写入，</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;factory2&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;org.example.testbean.testFactory2&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>正常调用即可</p>
<p>经过上述，我们知道，我们实例化bean的方式大体上有三种，但是细分则是四种，因为最后一个是第三种的变种</p>
<h2 id="bean的生命周期"><a href="#bean的生命周期" class="headerlink" title="bean的生命周期"></a>bean的生命周期</h2><p>生命周期 ： 从创建到消亡的完整过程</p>
<p>bean生命周期 ： bean从创建到销毁的整体过程</p>
<p>bean生命周期的控制：再bean创建后到销毁前做的一些事情</p>
<p>代码及思路如下 ：</p>
<p>要进行生命周期的控制，我们就是控制bean创建的时候和销毁的时候做一些事情</p>
<p>我们在test中加入如下代码</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package org.example.testbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printhello</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;hellospringbean&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;destory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面定义的init以及destory就是我们定义的初始化方法和销毁方法</p>
<p>然后我们要告诉我们的容器，我们的初始化方法和销毁方法</p>
<p>在配置文件里如下写</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;hellobean&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;org.example.testbean.test&quot;</span> <span class="attribute">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attribute">destroy-method</span>=<span class="string">&quot;destory&quot;</span>&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>最后在主程序调用的时候如下写</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.testbean.test;</span><br><span class="line"><span class="keyword">import</span> org.example.testbean.test2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main( <span class="keyword">String</span>[] args )</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里不用ApplicationContext的原因是它并没有close的方法，是它的子类实现的接口有这个方法，所以就换成它的子类   </span></span><br><span class="line"><span class="comment">// ApplicationContext stx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line">        ClassPathXmlApplicationContext stx = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        test hellobean = (test) stx.getBean(<span class="string">&quot;hellobean&quot;</span>);</span><br><span class="line">        hellobean.printhello();</span><br><span class="line">        <span class="comment">// 这个是比较暴力的方法直接杀死容器</span></span><br><span class="line">        <span class="comment">//stx.close();</span></span><br><span class="line">        <span class="comment">// 这个是告诉jvm当退出的时候关闭容器</span></span><br><span class="line">        stx.registerShutdownHook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行程序结果如下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">init</span><br><span class="line">hellospringbean</span><br><span class="line">destory</span><br><span class="line"></span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>但是我觉得上述的步骤还是有点麻烦</p>
<p>我们可以让它在创建方法的时候就是直接把它标记为初始化方法以及销毁方法</p>
<p>在test2中进行如下操作</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package org.example.testbean;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.DisposableBean;</span><br><span class="line">import org.springframework.beans.factory.InitializingBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">test2</span> <span class="title">implements</span> <span class="title">InitializingBean</span> , <span class="title">DisposableBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> test tx;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">printhellobean</span>()</span>&#123;</span><br><span class="line">        tx.printhello();</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;Secondly hello &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test2</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;Constru&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> test <span class="title">getTx</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTx</span>(<span class="params">test tx</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.tx = tx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span>() throws Exception</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;destrory test2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span>() throws Exception</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;init test2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后我们在主程序中调用test2所对应的beanid</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.testbean.test;</span><br><span class="line"><span class="keyword">import</span> org.example.testbean.test2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main( <span class="keyword">String</span>[] args )</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//        ApplicationContext stx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line">        ClassPathXmlApplicationContext stx = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        test2 hellobean = (test2) stx.getBean(<span class="string">&quot;hellobean2&quot;</span>);</span><br><span class="line">        hellobean.printhellobean();</span><br><span class="line">        <span class="comment">// 这个是比较暴力的方法直接杀死容器</span></span><br><span class="line">        <span class="comment">//stx.close();</span></span><br><span class="line">        <span class="comment">// 这个是告诉jvm当退出的时候关闭容器</span></span><br><span class="line">        stx.registerShutdownHook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行结果如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">init</span></span><br><span class="line">Constru</span><br><span class="line"><span class="keyword">init</span> test2</span><br><span class="line">hellospringbean</span><br><span class="line">Secondly hello </span><br><span class="line">destrory test2</span><br><span class="line">destory</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解释：</p>
<p>第一个init是test中的初始化方法，第二个是test2的构造器方法，然后才是test2的bean方法销毁也是同理，最后销毁test容器</p>
<p>所以bean的初始化方法的执行时间是在test的构造器方法之后的</p>
<h2 id="依赖的注入方式"><a href="#依赖的注入方式" class="headerlink" title="依赖的注入方式"></a>依赖的注入方式</h2><p>有几种方式可以传递数据往类里传递</p>
<ul>
<li>普通方法 ： set</li>
<li>构造方法</li>
</ul>
<p>在bean创建对象的时候如果我们一个类里需要的并不是引用类型，就是要基本类型改怎么办？</p>
<ul>
<li>Setter 注入<ul>
<li>简单类型</li>
<li>引用类型</li>
</ul>
</li>
<li>构造器注入<ul>
<li>简单类型</li>
<li>引用类型</li>
</ul>
</li>
</ul>
<h2 id="Setter注入"><a href="#Setter注入" class="headerlink" title="Setter注入"></a>Setter注入</h2><h3 id="注入引用类型"><a href="#注入引用类型" class="headerlink" title="注入引用类型"></a>注入引用类型</h3><p>上述已经实现过了，通过在配置里写入</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;hellobean2&quot;</span> <span class="built_in">class</span>=<span class="string">&quot;org.example.testbean.test2&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;tx&quot;</span> <span class="keyword">ref</span>=<span class="string">&quot;hellobean&quot;</span>&gt;&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>就可以但是当他是多个的时候我们可以在中间再加上一样的语句，就可以就是多加几个这 <code>&lt;property name=&quot;tx&quot; ref=&quot;hellobean&quot;&gt;&lt;/property&gt;</code></p>
<h3 id="注入基本类型"><a href="#注入基本类型" class="headerlink" title="注入基本类型"></a>注入基本类型</h3><p>我们先在test中编写如下代码</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">package org.example.testbean;</span><br><span class="line"></span><br><span class="line">import java.util.stream.StreamSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String mysqlname;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> maxConnection;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMysqlname</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mysqlname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMysqlname</span>(<span class="params">String mysqlname</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.mysqlname = mysqlname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">getMaxConnection</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maxConnection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxConnection</span>(<span class="params"><span class="built_in">int</span> maxConnection</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.maxConnection = maxConnection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printhello</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;hellospringbean&quot;</span> + mysqlname + maxConnection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">init</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span>()</span>&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;destory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后我们在配置中编写</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;bean id<span class="operator">=</span><span class="string">&quot;hellobean&quot;</span> class<span class="operator">=</span><span class="string">&quot;org.example.testbean.test&quot;</span> init-method<span class="operator">=</span><span class="string">&quot;init&quot;</span> destroy-method<span class="operator">=</span><span class="string">&quot;destory&quot;</span>&gt;</span><br><span class="line">    &lt;property name<span class="operator">=</span><span class="string">&quot;mysqlname&quot;</span> value<span class="operator">=</span><span class="string">&quot;dl2262&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name<span class="operator">=</span><span class="string">&quot;maxConnection&quot;</span> value<span class="operator">=</span><span class="string">&quot;10&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里value传值是什么类型的我们不用多管因为spring会自动帮我们转换类型</p>
<p>运行主程序结果</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">init</span></span><br><span class="line">Constru</span><br><span class="line"><span class="keyword">init</span> test2</span><br><span class="line">hellospringbeandl226210</span><br><span class="line">destrory test2</span><br><span class="line">destory</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解释 ： spring关联两个容器的时候，并不是说你调用其中一个容器另外一个容器就完全没反应，它本质上还是初始化两个容器，只不过根据你调用的方法不同显示和不显示而已</p>
<p>因为在配置中</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="built_in">id</span>=<span class="string">&quot;hellobean2&quot;</span> <span class="built_in">class</span>=<span class="string">&quot;org.example.testbean.test2&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">property</span> <span class="built_in">name</span>=<span class="string">&quot;tx&quot;</span> <span class="keyword">ref</span>=<span class="string">&quot;hellobean&quot;</span>&gt;&lt;/<span class="keyword">property</span>&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>test2是和test关联在一起的，所以test2的初始化bean和销毁bean也在这里，但是它并没有执行test2的构造器方法，也就是并没有实力这个类，它只是走了容器的初始和销毁</p>
<h2 id="构造器注入"><a href="#构造器注入" class="headerlink" title="构造器注入"></a>构造器注入</h2><p>首先构造器注入分为三种</p>
<h3 id="最标准的构造器注入"><a href="#最标准的构造器注入" class="headerlink" title="最标准的构造器注入"></a>最标准的构造器注入</h3><p>首先我们在test中编写如下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package org.<span class="property">example</span>.<span class="property">testbean</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">stream</span>.<span class="property">StreamSupport</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">String</span> mysqlname;</span><br><span class="line">    <span class="keyword">private</span> int maxConnection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">test</span>(<span class="params"><span class="built_in">String</span> mysqlname, int maxConnection</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mysqlname</span> = mysqlname;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">maxConnection</span> = maxConnection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getMysqlname</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mysqlname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setMysqlname</span>(<span class="params"><span class="built_in">String</span> mysqlname</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mysqlname</span> = mysqlname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> int <span class="title function_">getMaxConnection</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> maxConnection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setMaxConnection</span>(<span class="params">int maxConnection</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">maxConnection</span> = maxConnection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">printhello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;hellospringbean&quot;</span> + mysqlname + maxConnection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span>  <span class="title function_">init</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">destory</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;destory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后再在配置文件中编写</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;bean id<span class="operator">=</span><span class="string">&quot;hellobean&quot;</span> class<span class="operator">=</span><span class="string">&quot;org.example.testbean.test&quot;</span> init-method<span class="operator">=</span><span class="string">&quot;init&quot;</span> destroy-method<span class="operator">=</span><span class="string">&quot;destory&quot;</span>&gt;</span><br><span class="line">    &lt;constructor-arg name<span class="operator">=</span><span class="string">&quot;maxConnection&quot;</span> value<span class="operator">=</span><span class="string">&quot;1000&quot;</span>&gt;</span><br><span class="line">    &lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg name<span class="operator">=</span><span class="string">&quot;mysqlname&quot;</span> value<span class="operator">=</span><span class="string">&quot;dl2262&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>执行主程序的app</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">init</span></span><br><span class="line">Constru</span><br><span class="line"><span class="keyword">init</span> test2</span><br><span class="line">hellospringbeandl22621000</span><br><span class="line">destrory test2</span><br><span class="line">destory</span><br></pre></td></tr></table></figure>

<p>然后是传入引用类型</p>
<p>先在test2中如下编写</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.testbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> , <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> test tx;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span>  <span class="title">printhellobean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        tx.printhello();</span><br><span class="line">        System.out.println(<span class="string">&quot;Secondly hello &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test2</span><span class="params">(test tx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tx = tx;</span><br><span class="line">        System.out.println(<span class="string">&quot;Constru&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function">test <span class="title">getTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setTx</span><span class="params">(test tx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tx = tx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destrory test2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init test2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在配置文件中编写</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;bean id<span class="operator">=</span><span class="string">&quot;hellobean2&quot;</span> class<span class="operator">=</span><span class="string">&quot;org.example.testbean.test2&quot;</span>&gt;</span><br><span class="line">    &lt;constructor-arg name<span class="operator">=</span><span class="string">&quot;tx&quot;</span> ref<span class="operator">=</span><span class="string">&quot;hellobean&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>执行主程序中的app</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">init</span></span><br><span class="line">Constru</span><br><span class="line"><span class="keyword">init</span> test2</span><br><span class="line">hellospringbeandl22621000</span><br><span class="line">Secondly hello </span><br><span class="line">destrory test2</span><br><span class="line">destory</span><br></pre></td></tr></table></figure>

<p>结果如上</p>
<p>上述在配置里传入的参数是形参，就是构造器方法的变量的名字，有人就说这样传参，会不会导致偶合过高，和spring的初衷不符合，事实也是如此</p>
<h3 id="第二种构造器"><a href="#第二种构造器" class="headerlink" title="第二种构造器"></a>第二种构造器</h3><p>在配置文件中如下</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;bean id<span class="operator">=</span><span class="string">&quot;hellobean&quot;</span> class<span class="operator">=</span><span class="string">&quot;org.example.testbean.test&quot;</span> init-method<span class="operator">=</span><span class="string">&quot;init&quot;</span> destroy-method<span class="operator">=</span><span class="string">&quot;destory&quot;</span>&gt;</span><br><span class="line">    &lt;constructor-arg type<span class="operator">=</span><span class="string">&quot;java.lang.Integer&quot;</span> value<span class="operator">=</span><span class="string">&quot;1000&quot;</span>&gt;</span><br><span class="line">    &lt;/constructor-arg&gt;</span><br><span class="line">    &lt;constructor-arg type<span class="operator">=</span><span class="string">&quot;java.lang.String&quot;</span> value<span class="operator">=</span><span class="string">&quot;dl2262&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>这种的确在某种程度上解决了偶合问题，不过却又引发出一种新问题，就是因为他说按照类型来给值的，如果构造器种有两个一样类型的值？如何解决</p>
<h3 id="第三种构造器"><a href="#第三种构造器" class="headerlink" title="第三种构造器"></a>第三种构造器</h3><p>配置文件如下</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;bean id<span class="operator">=</span><span class="string">&quot;hellobean2&quot;</span> class<span class="operator">=</span><span class="string">&quot;org.example.testbean.test2&quot;</span>&gt;</span><br><span class="line">    &lt;constructor-arg index<span class="operator">=</span><span class="string">&quot;0&quot;</span> ref<span class="operator">=</span><span class="string">&quot;hellobean&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>就是用下标来控制</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>构造器方法相比于setter方法是更快速，但是相对而言，如果出错也危害更大</p>
<p>自己定义的模块一般都采用setter，而官方的框架之类的一般都采用构造器的</p>
<h2 id="自动装入"><a href="#自动装入" class="headerlink" title="自动装入"></a>自动装入</h2><p>spring帮我们自动装配</p>
<p>自动装配的方式：</p>
<ul>
<li>按类型：常用</li>
<li>按名称</li>
<li>按构造方法</li>
<li>不启用自动装配</li>
</ul>
<p>我们先查看配置文件</p>
<p>如下</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;bean id<span class="operator">=</span><span class="string">&quot;hellobean2&quot;</span> class<span class="operator">=</span><span class="string">&quot;org.example.testbean.test2&quot;</span>&gt;</span><br><span class="line">    &lt;constructor-arg index<span class="operator">=</span><span class="string">&quot;0&quot;</span> ref<span class="operator">=</span><span class="string">&quot;hellobean&quot;</span>&gt;&lt;/constructor-arg&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>我们把其改成</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">    &lt;bean <span class="attribute">id</span>=<span class="string">&quot;hellobean2&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;org.example.testbean.test2&quot;</span> <span class="attribute">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">或者</span><br><span class="line">    &lt;bean <span class="attribute">id</span>=<span class="string">&quot;hellobean2&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;org.example.testbean.test2&quot;</span> <span class="attribute">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">等等</span><br></pre></td></tr></table></figure>

<p>就变成自动装配了</p>
<p>注意点：</p>
<p>关于自动装配一般不装配基本数据，而且如果自动装配是装配byname ，则要求你构造器的形参和bean的id是一样的，如果是bytype则要求不能有一样的类</p>
<h2 id="传递参数数组集合的"><a href="#传递参数数组集合的" class="headerlink" title="传递参数数组集合的"></a>传递参数数组集合的</h2><p>数组</p>
<p>List</p>
<p>Set</p>
<p>Map</p>
<p>Properties</p>
<p>在test中写下</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package org.<span class="property">example</span>.<span class="property">testbean</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">List</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">Map</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">Properties</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">Set</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">stream</span>.<span class="property">StreamSupport</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">String</span> mysqlname;</span><br><span class="line">    <span class="keyword">private</span> int maxConnection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> int[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">List</span>&lt;<span class="title class_">String</span>&gt; <span class="title class_">List</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">Set</span>&lt;<span class="title class_">String</span>&gt; <span class="title class_">Set</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">Map</span>&lt;<span class="title class_">String</span> , <span class="title class_">String</span>&gt; <span class="title class_">Map</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">Properties</span> properties;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> int[] <span class="title function_">getArray</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setArray</span>(<span class="params">int[] array</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">array</span> = array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> java.<span class="property">util</span>.<span class="property">List</span>&lt;<span class="title class_">String</span>&gt; <span class="title function_">getList</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">List</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setList</span>(<span class="params">java.util.List&lt;<span class="built_in">String</span>&gt; list</span>) &#123;</span><br><span class="line">        <span class="title class_">List</span> = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> java.<span class="property">util</span>.<span class="property">Set</span>&lt;<span class="title class_">String</span>&gt; <span class="title function_">getSet</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Set</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setSet</span>(<span class="params">java.util.<span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; set</span>) &#123;</span><br><span class="line">        <span class="title class_">Set</span> = set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> java.<span class="property">util</span>.<span class="property">Map</span>&lt;<span class="title class_">String</span>, <span class="title class_">String</span>&gt; <span class="title function_">getMap</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Map</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setMap</span>(<span class="params">java.util.<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; map</span>) &#123;</span><br><span class="line">        <span class="title class_">Map</span> = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Properties</span> <span class="title function_">getProperties</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setProperties</span>(<span class="params">Properties properties</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">properties</span> = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">test</span>(<span class="params"><span class="built_in">String</span> mysqlname, int maxConnection</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mysqlname</span> = mysqlname;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">maxConnection</span> = maxConnection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getMysqlname</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mysqlname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setMysqlname</span>(<span class="params"><span class="built_in">String</span> mysqlname</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mysqlname</span> = mysqlname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> int <span class="title function_">getMaxConnection</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> maxConnection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setMaxConnection</span>(<span class="params">int maxConnection</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">maxConnection</span> = maxConnection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">printhello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;hellospringbean&quot;</span> + mysqlname + maxConnection);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span>  <span class="title function_">init</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">destory</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;destory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后再配置文件中写下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tx&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.example.testbean.test&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>300<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdkjdsfhjk<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>daskhkash<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>dksahjdhak<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>daskhkash<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dfslkjfl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dfslkjfl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;sdakjl&quot;</span>&gt;</span>adslald<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;sdakjlw&quot;</span>&gt;</span>adslald<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dl2262&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就成功了</p>
<h2 id="数据源对象管理"><a href="#数据源对象管理" class="headerlink" title="数据源对象管理"></a>数据源对象管理</h2><p>在pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在配置文件中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://bigdata2:3306/try&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;liuzihan010616&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后主方法写入</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">ClassPathXmlApplicationContext stx <span class="operator">=</span> new ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>)<span class="comment">;</span></span><br><span class="line">        DataSource hellobean <span class="operator">=</span> (DataSource) stx.getBean(<span class="string">&quot;dataSource&quot;</span>)<span class="comment">;</span></span><br><span class="line">        System.out.println(hellobean)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>结果如下 ：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">	CreateTime:</span><span class="string">&quot;2022-12-28 08:49:29&quot;</span>,</span><br><span class="line"><span class="symbol">	ActiveCount:</span><span class="number">0</span>,</span><br><span class="line"><span class="symbol">	PoolingCount:</span><span class="number">0</span>,</span><br><span class="line"><span class="symbol">	CreateCount:</span><span class="number">0</span>,</span><br><span class="line"><span class="symbol">	DestroyCount:</span><span class="number">0</span>,</span><br><span class="line"><span class="symbol">	CloseCount:</span><span class="number">0</span>,</span><br><span class="line"><span class="symbol">	ConnectCount:</span><span class="number">0</span>,</span><br><span class="line"><span class="symbol">	Connections:</span>[</span><br><span class="line">	]</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>代表我们用druid成功</p>
<p>接下来我们换一个</p>
<p>在pom文件中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后再配置文件中写入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://bigdata2:3306/try&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;liuzihan010616&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://bigdata2:3306/try&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;liuzihan010616&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主方法没变</p>
<p>执行结果如下：</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">com</span>.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -&gt;</span> <span class="number">3</span>, <span class="function"><span class="title">acquireRetryAttempts</span> -&gt;</span> <span class="number">30</span>, <span class="function"><span class="title">acquireRetryDelay</span> -&gt;</span> <span class="number">1000</span>, <span class="function"><span class="title">autoCommitOnClose</span> -&gt;</span> <span class="function"><span class="title">false</span>, automaticTestTable -&gt;</span> <span class="function"><span class="title">null</span>, breakAfterAcquireFailure -&gt;</span> <span class="function"><span class="title">false</span>, checkoutTimeout -&gt;</span> <span class="number">0</span>, <span class="function"><span class="title">connectionCustomizerClassName</span> -&gt;</span> <span class="function"><span class="title">null</span>, connectionTesterClassName -&gt;</span> <span class="function"><span class="title">com</span>.mchange.v2.c3p0.impl.DefaultConnectionTester, dataSourceName -&gt;</span> <span class="number">1</span><span class="function"><span class="title">hge16gatnx5ejf144h6k9</span>|5a4aa2f2, debugUnreturnedConnectionStackTraces -&gt;</span> <span class="function"><span class="title">false</span>, description -&gt;</span> <span class="function"><span class="title">null</span>, driverClass -&gt;</span> <span class="function"><span class="title">com</span>.mysql.jdbc.Driver, factoryClassLocation -&gt;</span> <span class="function"><span class="title">null</span>, forceIgnoreUnresolvedTransactions -&gt;</span> <span class="function"><span class="title">false</span>, identityToken -&gt;</span> <span class="number">1</span><span class="function"><span class="title">hge16gatnx5ejf144h6k9</span>|5a4aa2f2, idleConnectionTestPeriod -&gt;</span> <span class="number">0</span>, <span class="function"><span class="title">initialPoolSize</span> -&gt;</span> <span class="number">3</span>, <span class="function"><span class="title">jdbcUrl</span> -&gt;</span> <span class="function"><span class="title">jdbc</span>:mysql://bigdata2:3306/try, maxAdministrativeTaskTime -&gt;</span> <span class="number">0</span>, <span class="function"><span class="title">maxConnectionAge</span> -&gt;</span> <span class="number">0</span>, <span class="function"><span class="title">maxIdleTime</span> -&gt;</span> <span class="number">0</span>, <span class="function"><span class="title">maxIdleTimeExcessConnections</span> -&gt;</span> <span class="number">0</span>, <span class="function"><span class="title">maxPoolSize</span> -&gt;</span> <span class="number">15</span>, <span class="function"><span class="title">maxStatements</span> -&gt;</span> <span class="number">0</span>, <span class="function"><span class="title">maxStatementsPerConnection</span> -&gt;</span> <span class="number">0</span>, <span class="function"><span class="title">minPoolSize</span> -&gt;</span> <span class="number">3</span>, <span class="function"><span class="title">numHelperThreads</span> -&gt;</span> <span class="number">3</span>, <span class="function"><span class="title">numThreadsAwaitingCheckoutDefaultUser</span> -&gt;</span> <span class="number">0</span>, <span class="function"><span class="title">preferredTestQuery</span> -&gt;</span> <span class="function"><span class="title">null</span>, properties -&gt;</span> &#123;<span class="function"><span class="title">user</span>=******, password=******&#125;, propertyCycle -&gt;</span> <span class="number">0</span>, <span class="function"><span class="title">testConnectionOnCheckin</span> -&gt;</span> <span class="function"><span class="title">false</span>, testConnectionOnCheckout -&gt;</span> <span class="function"><span class="title">false</span>, unreturnedConnectionTimeout -&gt;</span> <span class="number">0</span>, <span class="function"><span class="title">usesTraditionalReflectiveProxies</span> -&gt;</span> <span class="literal">false</span> ]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述的所有都是可以再配置文件里进行设置的</p>
<p>如下：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;bean id<span class="operator">=</span><span class="string">&quot;dataSource&quot;</span> class<span class="operator">=</span><span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span><br><span class="line">    &lt;property name<span class="operator">=</span><span class="string">&quot;driverClass&quot;</span> value<span class="operator">=</span><span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name<span class="operator">=</span><span class="string">&quot;jdbcUrl&quot;</span> value<span class="operator">=</span><span class="string">&quot;jdbc:mysql://bigdata2:3306/try&quot;</span> &gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name<span class="operator">=</span><span class="string">&quot;user&quot;</span> value<span class="operator">=</span><span class="string">&quot;root&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name<span class="operator">=</span><span class="string">&quot;password&quot;</span> value<span class="operator">=</span><span class="string">&quot;liuzihan010616&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;property name<span class="operator">=</span><span class="string">&quot;maxPoolSize&quot;</span> value<span class="operator">=</span><span class="string">&quot;1000&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>上述就是简单的通过bean使用连接池的方法</p>
<h3 id="加载properties"><a href="#加载properties" class="headerlink" title="加载properties"></a>加载properties</h3><p>通过bean加载properties</p>
<p>首先创建一个properties文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">jdbc.url</span>=dbc:mysql://bigdata2:<span class="number">3306</span>/try</span><br><span class="line"><span class="attr">jdbc.user</span>=root</span><br><span class="line"><span class="attr">jdbc.password</span>=liuzihan010616</span><br></pre></td></tr></table></figure>

<p>然后要在配置文件中新建个命名空间如下，我们新建的命名空间是context</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">       http://www.springframework.org/schema/context  </span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">       http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">------------------------------------使用命名空间</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">// 其中system-properties-mode 是设置系统变量的优先级，要不然系统变量如果和properties变量和名称重复，则会用系统变量的名</span></span><br><span class="line"><span class="language-xml">// location是设置要加载的properties的地址，这里可以用正则的,比如 *.properties</span></span><br><span class="line"><span class="language-xml">// 多个properties文件的时候用，分割</span></span><br><span class="line"><span class="language-xml">------------------------------------使用配置文件</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;jdbc.driver&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;jdbc.url&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;jdbc.user&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$</span></span></span><span class="template-variable">&#123;jdbc.password&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure>

<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>初始化容器的两种方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.testbean.test;</span><br><span class="line"><span class="keyword">import</span> org.example.testbean.test2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//加载类路径下的配置文件</span></span><br><span class="line"><span class="comment">//        ApplicationContext stx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">stx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 加载绝对路径下的配置文件</span></span><br><span class="line">        <span class="type">FileSystemXmlApplicationContext</span> <span class="variable">stx2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;F:\\bigdatajava\\src\\main\\resources\\applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//下面三种都行</span></span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">hellobean</span> <span class="operator">=</span> (DataSource) stx.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> stx.getBean(<span class="string">&quot;dataSource&quot;</span> , DataSource.class);</span><br><span class="line">  </span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource1</span> <span class="operator">=</span> stx.getBean(DataSource.class);</span><br><span class="line">	<span class="comment">//_------------------------------------------------------------------------------------------</span></span><br><span class="line">        System.out.println(hellobean);</span><br><span class="line">        <span class="comment">//hellobean.printhello();</span></span><br><span class="line">        <span class="comment">// 这个是比较暴力的方法直接杀死容器</span></span><br><span class="line">        <span class="comment">//stx.close();</span></span><br><span class="line">        <span class="comment">// 这个是告诉jvm当退出的时候关闭容器</span></span><br><span class="line">        stx.registerShutdownHook();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>BeanFactory 是ApplicationContext的最顶层接口，所以用这个也可以达到容器的效果，不过因为他有缺陷，所以后来不用了</p>
<p>通过以下方法实例容器：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Resource resource = <span class="keyword">new</span> <span class="constructor">ClassPathResource(<span class="string">&quot;applicationContext.xml&quot;</span>)</span>;</span><br><span class="line">BeanFactory bf = <span class="keyword">new</span> <span class="constructor">XmlBeanFactory(<span class="params">resource</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>BeanFactory是延迟加载 ：就是不是之间把所用的类初始化，等到用到才会加载</p>
<p>我们可以在配置文件里加上 <code>lazy-init=&quot;true&quot;</code></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;tx&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;org.example.testbean.test&quot;</span> <span class="attribute">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attribute">destroy-method</span>=<span class="string">&quot;destory&quot;</span> <span class="attribute">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>就可以了</p>
<h2 id="注解开发"><a href="#注解开发" class="headerlink" title="注解开发"></a>注解开发</h2><p>注解开发的基本定义就是通过注解减缓spring的配置文件的负担</p>
<p>比如 如下 ：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;bean <span class="attribute">id</span>=<span class="string">&quot;hellobean2&quot;</span> <span class="attribute">class</span>=<span class="string">&quot;org.example.testbean.test2&quot;</span> <span class="attribute">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>上述的配置文件中获得信息就可以通过注解代替：</p>
<ul>
<li>找到对应类</li>
<li>放上注解</li>
</ul>
<p>如下：</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.testbean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">&quot;hellobean2&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test2</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> , <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> test tx;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span>  <span class="title">printhellobean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        tx.printhello();</span><br><span class="line">        System.out.println(<span class="string">&quot;Secondly hello &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">test2</span><span class="params">(test tx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tx = tx;</span><br><span class="line">        System.out.println(<span class="string">&quot;Constru&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function">test <span class="title">getTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setTx</span><span class="params">(test tx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tx = tx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destrory test2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init test2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在配置文件里可以把上面的那句替换为</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">&lt;conetext:component-<span class="keyword">scan</span> base-<span class="keyword">package</span>=<span class="string">&quot;org.example.testbean&quot;</span>&gt;&lt;/conetext:component-<span class="keyword">scan</span>&gt;</span><br></pre></td></tr></table></figure>

<p>这句话默认是扫描org.example.testbean下的所有包并且找出带有注解的class</p>
<p>然后如果在@Component不加括号也可以加载到，只不过在主App中调用的方法有些不一样</p>
<p>加括号的：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.testbean.test;</span><br><span class="line"><span class="keyword">import</span> org.example.testbean.test2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.XmlBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main( <span class="keyword">String</span>[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//加载类路径下的配置文件</span></span><br><span class="line"><span class="comment">//        ApplicationContext stx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line">        ClassPathXmlApplicationContext stx = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 加载绝对路径下的配置文件</span></span><br><span class="line">        FileSystemXmlApplicationContext stx2 = <span class="keyword">new</span> <span class="type">FileSystemXmlApplicationContext</span>(<span class="string">&quot;F:\\bigdatajava\\src\\main\\resources\\applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Resource resource = <span class="keyword">new</span> <span class="type">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        BeanFactory bf = <span class="keyword">new</span> <span class="type">XmlBeanFactory</span>(resource);</span><br><span class="line">    </span><br><span class="line">        test2 hellobean2 = (test2) stx.getBean(<span class="string">&quot;hellobean2&quot;</span>);</span><br><span class="line">        hellobean2.printhellobean();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        DataSource hellobean = (DataSource) stx.getBean(&quot;dataSource&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        DataSource dataSource = stx.getBean(&quot;dataSource&quot; , DataSource.class);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        DataSource dataSource1 = stx.getBean(DataSource.class);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(hellobean);</span></span><br><span class="line">        <span class="comment">//hellobean.printhello();</span></span><br><span class="line">        <span class="comment">// 这个是比较暴力的方法直接杀死容器</span></span><br><span class="line">        <span class="comment">//stx.close();</span></span><br><span class="line">        <span class="comment">// 这个是告诉jvm当退出的时候关闭容器</span></span><br><span class="line">        stx.registerShutdownHook();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>不加括号的：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.testbean.test;</span><br><span class="line"><span class="keyword">import</span> org.example.testbean.test2;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.XmlBeanFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> void main( <span class="keyword">String</span>[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//加载类路径下的配置文件</span></span><br><span class="line"><span class="comment">//        ApplicationContext stx = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line">        ClassPathXmlApplicationContext stx = <span class="keyword">new</span> <span class="type">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// 加载绝对路径下的配置文件</span></span><br><span class="line">        FileSystemXmlApplicationContext stx2 = <span class="keyword">new</span> <span class="type">FileSystemXmlApplicationContext</span>(<span class="string">&quot;F:\\bigdatajava\\src\\main\\resources\\applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Resource resource = <span class="keyword">new</span> <span class="type">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        BeanFactory bf = <span class="keyword">new</span> <span class="type">XmlBeanFactory</span>(resource);</span><br><span class="line"></span><br><span class="line">        test2 hellobean2 = (test2) stx.getBean(test2.class);</span><br><span class="line">        hellobean2.printhellobean();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        DataSource hellobean = (DataSource) stx.getBean(&quot;dataSource&quot;);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        DataSource dataSource = stx.getBean(&quot;dataSource&quot; , DataSource.class);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        DataSource dataSource1 = stx.getBean(DataSource.class);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(hellobean);</span></span><br><span class="line">        <span class="comment">//hellobean.printhello();</span></span><br><span class="line">        <span class="comment">// 这个是比较暴力的方法直接杀死容器</span></span><br><span class="line">        <span class="comment">//stx.close();</span></span><br><span class="line">        <span class="comment">// 这个是告诉jvm当退出的时候关闭容器</span></span><br><span class="line">        stx.registerShutdownHook();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过上述我们发现这两种分别是通过类型，以及名称</p>
<p>关于component是一个大的注解</p>
<p>那么在这个大的注解下面我们细化分了三个小的</p>
<ul>
<li>@Controller : 表现层定义</li>
<li>@Servirce ：业务层bean定义</li>
<li>@Respository ： 数据层bean定义</li>
</ul>
<p>其他的和上述一样</p>
<h2 id="纯注解开发"><a href="#纯注解开发" class="headerlink" title="纯注解开发"></a>纯注解开发</h2><p>经过上述简单的学习，我们已经知道了注解开发，那么我们能不能用注解开发来代替配置文件？</p>
<p>当然可以：</p>
<p>我们经过上述的操作之后我们的配置文件还有一句</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">&lt;conetext:component-<span class="keyword">scan</span> base-<span class="keyword">package</span>=<span class="string">&quot;org.example.testbean&quot;</span>&gt;&lt;/conetext:component-<span class="keyword">scan</span>&gt;</span><br></pre></td></tr></table></figure>

<p>我们可以简单创建给config包以及旗下的configspring.class</p>
<p>然后添加上两个注解</p>
<ul>
<li>@Configuration</li>
<li>@ComponentScan</li>
</ul>
<p>如下 ：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(<span class="string">&quot;org.example.testbean&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">configspring</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后再更改app里的代码如下 ：注 上述 ComponentScan(“org.example.testbean”)这里的包名越详细越好 ，而且多个和包名的时候用大括号 -&gt; ComponentScan({“org.example.testbean”,”org.example.config”})</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">ApplicationContext ztx = <span class="keyword">new</span> <span class="constructor">AnnotationConfigApplicationContext(<span class="params">configspring</span>.<span class="params">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>然后就正常用就好了，相当于注解开发的时候无括号的模式</p>
<h2 id="通过注解控制生命周期"><a href="#通过注解控制生命周期" class="headerlink" title="通过注解控制生命周期"></a>通过注解控制生命周期</h2><p>通过注解控制生命周期的方法</p>
<p>如下 ：</p>
<ul>
<li>@Scope(“singleton”) ：是不是单例</li>
<li>@PostConstruct :初始化方法</li>
<li>@PreDestory ： 销毁方法</li>
<li>等</li>
</ul>
]]></content>
      <categories>
        <category>杂货技术栈</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>scala</title>
    <url>/2022/12/22/12-23/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Scala是一门多范式的编程语言，一种类似<a href="https://baike.baidu.com/item/java/85979?fromModule=lemma_inlink">java</a>的编程语言,设计初衷是实现可伸缩的语言,并集成<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B?fromModule=lemma_inlink">面向对象编程</a>和<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B?fromModule=lemma_inlink">函数式编程</a>的各种特性。</p>
<p>官网 ： <code>www.scala-lang.org</code></p>
<p>scala 是运行在jvm上的 ，所以scala是可以兼容java的</p>
<p>scala产生 ： 基于java进行开发而来的</p>
<p>scala安装前提 ： jdk</p>
<p>运行 ： 也需要生成字节码文件 如何再运行</p>
<p>开发 ： scala 的发明者 martin 编译器爱好者</p>
<p>两个语言 ： pizza 和 scala</p>
<p>java ： java 1.5 ： 加了泛型 ，增强for ，自动类型转换以及包装类 &#x3D;》 基于 pizza</p>
<p>java 1.8 ： 类型推断，以及lambel表达式 &#x3D;》 基于scala 加进去的</p>
<h1 id="为什么要学习scala"><a href="#为什么要学习scala" class="headerlink" title="为什么要学习scala"></a>为什么要学习scala</h1><p>首要原因是因为一个框架 Spark  ： 其底层就是scala开发的</p>
<p>Spark ：支持很多的语言 java ，py 等</p>
<p>flink：底层是java+scala &#x3D;》 所以它可以支持java编程，也可以用java编程 ，也支持了py &#x3D;》 现在主流用java</p>
<p>开发效率高且简单容易</p>
<p>scala 和 Java 的代码可以相互调用</p>
<p>在spark里可以，但是会比较奇怪</p>
<h1 id="scala部署"><a href="#scala部署" class="headerlink" title="scala部署"></a>scala部署</h1><h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><p>3.x</p>
<p>2.x</p>
<p>依赖于spark来决定的 ： 对于spark 3.0的时候已经移除了Scala 2.11版本</p>
<p>spark 3.x:scala 2.12&#x2F;2.13</p>
<p>spark 2.x: scala 2.11&#x2F;2.12</p>
<p>我们的spark用的是3.x版本 ，所以我们用的是scala 2.12.14</p>
<p>因为spark底层用的就是这个版本的</p>
<h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>win ： 安装 scala &#x3D;》 idea里安装 scala 插件</p>
<p>linux ： 安装 scala &#x3D;》 目的&#x3D;&gt; 调试自己开发的代码  &#x3D;》 和spark 完全无关系</p>
<p>win安装： 解压 -》 配置环境变量</p>
<p>linux ： 解压-》软连接 -》 配置环境变量</p>
<p>输入scala之后进入到交互式界面</p>
<p>结果如下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scala</span>&gt; <span class="number">1</span>+<span class="number">2</span></span><br><span class="line"><span class="attribute">res0</span>: Int = <span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>说明我们结果数据的类型在scala里是可以推断出来的 ，前面的我res0是变量的名字</p>
<p>在idea里安装scala的插件 ： 打开idea -》 file -》 setting -》 上方搜索栏目 输入 Plugin -》 点击 Marketplace 搜索 Scala 如何安装第一个插件 ，安装完成之后重启idea即可，重启之后点击file -》 Prtoject Structure -》 点击 -》 global libraries 点击上面的加号 然后点击 Brower 然后选中自己的scala的目录 -》 添加成功应用就ok了 -》 我们验证一下是不是好用-》创建一个文件夹 -》make dir as root -》 创建example 类 -》 创建 test.scala -&gt;在pom文件中添加依赖-》 进入之后，创建 如下代码</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">package example.<span class="property">test</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">object</span> scala &#123;</span><br><span class="line">  def <span class="title function_">main</span>(<span class="attr">args</span>: <span class="title class_">Array</span>[<span class="title class_">String</span>]): <span class="title class_">Unit</span> = &#123;</span><br><span class="line">    <span class="title function_">printf</span>(<span class="string">&quot;撒更何况的客户打&quot;</span>);</span><br><span class="line">    <span class="title function_">printf</span>(<span class="string">&quot;sadkakhjd&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------------pom</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.scala-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-library<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行看看成功</p>
<p>成功如下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">撒更何况的客户打sadkakhjd</span><br><span class="line">Process finished with <span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>maven地址：</p>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="值与变量"><a href="#值与变量" class="headerlink" title="值与变量"></a>值与变量</h2><p>java ：</p>
<ul>
<li>数据类型 变量名&#x3D;值</li>
<li>Int num&#x3D;值</li>
<li>final 值 ： 定义常量</li>
</ul>
<p>scala</p>
<ul>
<li>val 声明之后 不可改变 &#x3D;》 final</li>
<li>var 声明之后 可以改变</li>
</ul>
<h3 id="声明变量和值"><a href="#声明变量和值" class="headerlink" title="声明变量和值"></a>声明变量和值</h3><p>var 变量名 ：数据类型 &#x3D; 值</p>
<p>val 变量名 : 数据类型 &#x3D; 值</p>
<p>其中 <code>val lsdjllsdf= 90</code>和 <code>val lsdjllsdf:Int= 90</code></p>
<p>是一样的因为他会自己进行类型推断</p>
<p>在scala里定义了一个变量要初始化的 ： 显示初始化</p>
<p>在scala虽然不支持隐式初始化，不过可以通过占位符达到这个目的 <code>var name:String=_</code>仅仅是编译不报错，但是运行就会报错了</p>
<p>注意：占位符这种方式一定要明确是什么类型</p>
<p>一般用于定义类里的属性，不知道改怎么赋值的时候的使用的</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>scala里没有包装类</p>
<ul>
<li>String</li>
<li>Int</li>
<li>Long</li>
<li>Float</li>
<li>Double</li>
<li>Boolean</li>
<li>Char</li>
<li>Unit</li>
<li>Short</li>
<li>Byte</li>
<li>List</li>
<li>Option</li>
<li>Yourclass</li>
<li>数据类型转换与判断<ul>
<li>在scala里最顶层的是any -》 object</li>
<li>其下有Anyval 和 AnyRef<ul>
<li>Anyval<ul>
<li>Unit ： &#x3D;&gt; void 就是返回值是为空</li>
<li>其余和java都一样</li>
<li>为空则是nothing</li>
</ul>
</li>
<li>AnyRef<ul>
<li>String在引用里</li>
<li>List</li>
<li>Option</li>
<li>Yourclass</li>
<li>如果为空则为null</li>
</ul>
</li>
</ul>
</li>
<li>最底层是nothing 包括null的底层也是nothing</li>
</ul>
</li>
</ul>
<p>转换代码如下</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">val lsdjllsdf:Int= <span class="number">90</span></span><br><span class="line">val num1:Int = <span class="number">10</span></span><br><span class="line">val num2:Double = <span class="number">10.111</span></span><br><span class="line">val num3=num2<span class="selector-class">.asInstanceOf</span><span class="selector-attr">[Int]</span></span><br><span class="line">val num4=num2<span class="selector-class">.toInt</span></span><br><span class="line"><span class="function"><span class="title">println</span><span class="params">(num1)</span></span></span><br><span class="line"><span class="function"><span class="title">println</span><span class="params">(num2)</span></span></span><br><span class="line"><span class="function"><span class="title">println</span><span class="params">(num3)</span></span></span><br><span class="line"><span class="function"><span class="title">println</span><span class="params">(num4)</span></span></span><br></pre></td></tr></table></figure>

<p>注意scala里不能把字符串转换成Int（这里的字符串是非数字类型的）就是如果是11.111等数字类的还是可以的</p>
<p>比如 ：</p>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> xiangxiang<span class="operator">:</span>String <span class="operator">=</span> <span class="string">&quot;ads&quot;</span></span><br><span class="line"> <span class="keyword">val</span> num6<span class="operator">=</span>xiangxiang.toInt</span><br><span class="line"> println(num6)</span><br></pre></td></tr></table></figure>

<p>就会报错</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java<span class="selector-class">.lang</span><span class="selector-class">.NumberFormatException</span>: For <span class="selector-tag">input</span> string: <span class="string">&quot;ads&quot;</span></span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.NumberFormatException</span><span class="selector-class">.forInputString</span>(NumberFormatException<span class="selector-class">.java</span>:<span class="number">65</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.Integer</span><span class="selector-class">.parseInt</span>(Integer<span class="selector-class">.java</span>:<span class="number">580</span>)</span><br><span class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.Integer</span><span class="selector-class">.parseInt</span>(Integer<span class="selector-class">.java</span>:<span class="number">615</span>)</span><br><span class="line">	at scala<span class="selector-class">.collection</span><span class="selector-class">.immutable</span><span class="selector-class">.StringLike</span><span class="selector-class">.toInt</span>(StringLike<span class="selector-class">.scala</span>:<span class="number">304</span>)</span><br><span class="line">	at scala<span class="selector-class">.collection</span><span class="selector-class">.immutable</span><span class="selector-class">.StringLike</span>.toInt$(StringLike<span class="selector-class">.scala</span>:<span class="number">304</span>)</span><br><span class="line">	at scala<span class="selector-class">.collection</span><span class="selector-class">.immutable</span><span class="selector-class">.StringOps</span><span class="selector-class">.toInt</span>(StringOps<span class="selector-class">.scala</span>:<span class="number">33</span>)</span><br><span class="line">	at example<span class="selector-class">.test</span>.scala$<span class="selector-class">.main</span>(scala<span class="selector-class">.scala</span>:<span class="number">19</span>)</span><br><span class="line">	at example<span class="selector-class">.test</span><span class="selector-class">.scala</span><span class="selector-class">.main</span>(scala.scala)</span><br></pre></td></tr></table></figure>

<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>array</p>
<p>Range</p>
<p>List</p>
<p>大类的角度上讲：</p>
<ul>
<li>Seq</li>
<li>Set</li>
<li>Map</li>
</ul>
<p>最顶层是Iterable</p>
<ul>
<li>-》Set<ul>
<li>HashSet</li>
<li>ListSet</li>
<li>SorteSet<ul>
<li>TreeSet</li>
<li>BitSet</li>
</ul>
</li>
</ul>
</li>
<li>-》Map<ul>
<li>HashMap</li>
<li>SorteMap<ul>
<li>TreeMap</li>
</ul>
</li>
<li>ListMap</li>
</ul>
</li>
<li>-》Seq<ul>
<li>indexSeq<ul>
<li>Range</li>
<li>String</li>
<li>Array</li>
<li>NumericRange</li>
<li>Vector</li>
</ul>
</li>
<li>LinearSeq<ul>
<li>List</li>
<li>Stream</li>
<li>Queue</li>
<li>Stack</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>快速构建集合的方法：</p>
<p>range：</p>
<ul>
<li>to ： 左闭右闭</li>
<li>until ： 左闭右开的</li>
</ul>
<p>scala api 方法</p>
<p>方法调用 ： 变量打点调用或者xxx按一个空格调用</p>
<p>流程控制：scala里没三目运算符</p>
<ul>
<li>分支结构 ：<ul>
<li>if else</li>
<li>模式匹配</li>
</ul>
</li>
<li>循环<ul>
<li>for</li>
<li>while</li>
<li>算子</li>
</ul>
</li>
</ul>
<p>代码如下</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">    val Scaoe = <span class="number">111</span></span><br><span class="line">    <span class="keyword">if</span> (Scaoe &gt;= <span class="number">90</span>)&#123;</span><br><span class="line">      <span class="built_in">println</span>(<span class="string">&quot;牛皮&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Scaoe &gt;= <span class="number">60</span>)&#123;</span><br><span class="line">      <span class="built_in">println</span>(<span class="string">&quot;差点意思&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (Scaoe &lt;= <span class="number">59</span>)&#123;</span><br><span class="line">      <span class="built_in">println</span>(<span class="string">&quot;欠打了&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">----------------------------------------------------------------------循环</span><br><span class="line">    val ints:Array<span class="selector-attr">[Int]</span> = <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">89</span>)</span><br><span class="line">    val iterator = ints<span class="selector-class">.toIterator</span></span><br><span class="line">    while (iterator.hasNext)&#123;</span><br><span class="line">      val item = iterator<span class="selector-class">.next</span>()</span><br><span class="line">      <span class="built_in">println</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">for</span> (item &lt;- ints)&#123;</span><br><span class="line">        <span class="built_in">println</span>(item)</span><br><span class="line">      &#125;</span><br><span class="line">   ints<span class="selector-class">.foreach</span>(<span class="built_in">println</span>(_))</span><br></pre></td></tr></table></figure>

<h3 id="方法与函数"><a href="#方法与函数" class="headerlink" title="方法与函数"></a>方法与函数</h3><p>最简单的理解 ： def 定义方法</p>
<p>函数的本质就是特殊的方法</p>
<p>def 方法名字（参数名字：参数类型）：返回值类型&#x3D;{方法体}</p>
<p>例子如下</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(num1, num3)</span><br><span class="line">def <span class="built_in">sum</span>(a1:<span class="built_in">Int</span>,a2:<span class="built_in">Int</span>): <span class="keyword">Unit</span> =&#123;</span><br><span class="line">  val i = a1 + a2</span><br><span class="line">  println(i)</span><br><span class="line">&#125;</span><br><span class="line">tery(xiangxiang)</span><br><span class="line">def tery(fff:String): <span class="keyword">Unit</span> =&#123;</span><br><span class="line">  println(fff)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>补充 ： 方法的返回值类型也可以不写，因为它会自动推断的类型和val一样</p>
<p>后面的unit是代表方法的返回值，因为结尾是printf所以返回值是void</p>
<p>函数就是把方法的一些东西进行省略 -》 方法名+ 关键字</p>
<p><code>val ff=(a1:Int,a2:Int)=&gt;( a1 + a2)</code></p>
<p>方法里的参数</p>
<ul>
<li>默认参数 ： 常规传参&#x3D;”xxx”比如 <code> def tery(fff:String=&quot;default&quot;): Unit =&#123; println(fff) &#125;</code>如果有多个参数默认参数不可以放到中间，只能放在最后一个，不传就走默认，传了就走传的值</li>
<li>可变参数 :   * 例子 <code> def sum(num:Int*):Unit =&#123;print(num.size)&#125;</code> 可变参数一般都放在最后一个变量&#x2F;传入一个数组 <code> def sum(arr:_*):Unit =&#123;&#125;</code></li>
</ul>
<p>注意：方法是顺序的，如果没有定义过这个方法的时候调用它是会报错的</p>
<p>它可以不写返回值，因为它最后一行会默认被当成返回值</p>
<p>递归调用的时候一定要指明返回值类型，要不然会报错</p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类里有属性方法构造器</p>
<p>class：代码如下</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> example.test</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> t1 &#123;</span><br><span class="line">  def main(args: Array[String]): <span class="built_in">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> dl226 =new Dl2262</span><br><span class="line">    dl226.name=<span class="string">&quot;子航&quot;</span></span><br><span class="line">    println(dl226.age)</span><br><span class="line">    println(dl226.name)</span><br><span class="line">    dl226.listening()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">val</span> hh:<span class="built_in">Int</span>=<span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Dl2262</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> hs:<span class="built_in">Int</span>=<span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> name: String = _</span><br><span class="line">    <span class="keyword">val</span> age:<span class="built_in">Int</span>=<span class="number">20</span></span><br><span class="line">    def listening(teacher:String=<span class="string">&quot;双喜&quot;</span>) = &#123;</span><br><span class="line">      println(<span class="string">&quot;教师&quot;</span> + <span class="string">&quot;\t&quot;</span> + teacher +  <span class="string">&quot;正在上课&quot;</span> + <span class="string">&quot;\n&quot;</span> +  name + <span class="string">&quot;\t&quot;</span> +  <span class="string">&quot;正在听课&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>伴生类：class 是object的伴生类 ，object 是class的伴生对象 ：伴生类是相当于class 伴生方法是相当于静态方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span> t1 &#123;</span><br><span class="line">  <span class="function">def <span class="title">main</span>(<span class="params">args: Array[String]</span>): Unit</span> = &#123;</span><br><span class="line">    val dd = <span class="keyword">new</span> A</span><br><span class="line">    dd.f01()</span><br><span class="line">    A.f01()</span><br><span class="line">  &#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title">A</span>&#123;</span><br><span class="line">    <span class="function">def <span class="title">f01</span>()</span>=&#123;</span><br><span class="line">      println(<span class="string">&quot;class ....class A&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">object</span> A&#123;</span><br><span class="line">    <span class="function">def <span class="title">f01</span>()</span>=&#123;</span><br><span class="line">      println(<span class="string">&quot;Class ......object A&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用的操作"><a href="#常用的操作" class="headerlink" title="常用的操作"></a>常用的操作</h3><p>apply方法 ： 这里往往使用object A里的apply方法 去 new 一个class A</p>
<p>如下 ：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">object</span> t1 &#123;</span><br><span class="line">  <span class="function">def <span class="title">main</span>(<span class="params">args: Array[String]</span>): Unit</span> = &#123;</span><br><span class="line">    val dd = <span class="keyword">new</span> A</span><br><span class="line">    dd.f01()</span><br><span class="line">    A.f01()</span><br><span class="line"> val tets:A = A()</span><br><span class="line">    tets.f01()</span><br><span class="line">  &#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title">A</span>&#123;</span><br><span class="line">    <span class="function">def <span class="title">f01</span>()</span>=&#123;</span><br><span class="line">      println(<span class="string">&quot;class ....class A&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">object</span> A&#123;</span><br><span class="line">    <span class="function">def <span class="title">f01</span>()</span>=&#123;</span><br><span class="line">      println(<span class="string">&quot;Class ......object A&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">	 <span class="function">def <span class="title">apply</span>(<span class="params"> </span>): A</span> = <span class="keyword">new</span> A()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>主构造器 ： <code>class 类名（参数列表）</code></p>
<p>如下 ：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">A</span>(<span class="symbol">name:<span class="symbol">String</span></span> , <span class="symbol">age:<span class="symbol">Int</span></span>)&#123;</span><br><span class="line"></span><br><span class="line">  def f01()=&#123;</span><br><span class="line">    println(<span class="string">&quot;class ....class A&quot;</span> + name + age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有参构造器，出现的化无参构造器就失效了<br>附属构造器 ： <code>this（）</code>每个附属构造器的第一行必须调用主构造器或者其他附属构造器</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">A</span>(<span class="symbol">name:<span class="symbol">String</span></span> , <span class="symbol">age:<span class="symbol">Int</span></span>)&#123;</span><br><span class="line">  def <span class="keyword">this</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>(name,age)</span><br><span class="line">  &#125;</span><br><span class="line">  def f01()=&#123;</span><br><span class="line">    println(<span class="string">&quot;class ....class A&quot;</span> + name + age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="继承实现"><a href="#继承实现" class="headerlink" title="继承实现"></a>继承实现</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">t1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> b = <span class="keyword">new</span> <span class="type">B</span>(<span class="string">&quot;dakhsk&quot;</span>, <span class="string">&quot;asdkajsdhas&quot;</span>)</span><br><span class="line">    b.fo2(<span class="string">&quot;kdahjakhd&quot;</span>)</span><br><span class="line">    println(b.age)</span><br><span class="line">    b.foq(<span class="string">&quot;adkshk&quot;</span>)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">jicheng</span>(<span class="params">name:<span class="type">String</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">val</span> age:<span class="type">Int</span>=<span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foq</span></span>(parm:<span class="type">String</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">      println(parm+ age + name)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">name:<span class="type">String</span> , gerner:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">jicheng</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fo2</span></span>(parm:<span class="type">String</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">      println(parm+name+gerner)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>先触发父类的构造器，然后才是子类的</p>
<p>抽象类实例化，只能通过子类继承的方式实现如下</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pression</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">a</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">b</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">c</span></span></span><br><span class="line">  <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">c</span> <span class="keyword">extends</span> <span class="title">Pression</span></span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">a</span></span>: <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">b</span></span>: <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">c</span></span>: <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">var</span> name: <span class="type">String</span> = _</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>特征：接口</p>
<p>创建一个Trait 就是特征 ，然后子类去继承它 ，不一定要全部实现，继承都用extends关键字</p>
<p>但是这里不能多继承</p>
<p>scala集合包 ：scala.collection</p>
<ul>
<li>可变</li>
<li>不可变</li>
</ul>
<p>主要是针对长度</p>
<p>array ：</p>
<ul>
<li>可变：变长数组</li>
<li>不可变：定长数组<ul>
<li>array：<ul>
<li>new <code>val arr=new Array[String](3)</code><ul>
<li>添加元素 <code>arr(0)=&quot;zahngsan&quot;</code></li>
<li>查看数组长度 <code>arr.length</code></li>
</ul>
</li>
<li>不new <code>val arr2 = Array(&quot;1&quot; ,1 ,&#39;1&#39;)或者指定类型</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<p>数组的遍历</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line">  <span class="variable">val</span> <span class="variable">Arr</span> = <span class="variable">new</span> <span class="variable">Array</span>[<span class="variable">String</span>](<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable">for</span> (<span class="variable">elem</span> &lt;- <span class="variable">Arr</span>) &#123;</span><br><span class="line">    <span class="function"><span class="title">println</span>(<span class="variable">elem</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 这个by 就是设置步长，就是每次运行之后是加多少，还是减多少</span></span><br><span class="line">  <span class="variable">for</span> (<span class="variable">i</span> &lt;- <span class="number">0</span> <span class="function"><span class="title">until</span>(<span class="variable">Arr.length</span>) <span class="variable">by</span> <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="function">    <span class="title">println</span>(<span class="title">Arr</span>(<span class="variable">i</span>))</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable">Arr.<span class="keyword">foreach</span></span>(<span class="function"><span class="title">println</span>(<span class="variable">_</span>))</span></span><br></pre></td></tr></table></figure>

<p>数组api</p>
<ul>
<li>反转 ： <code>Arr.reverse</code>会新生成一个数组</li>
<li>两个数组相加 ： <code>Arr ++ arr</code></li>
<li>求和，最大最小等 <code>Arr.max/min/sum</code></li>
<li>把数组内的元素转换成字符串的方式进行输出 <code>Arr.mkString</code>会把数组的元素进行拼接并会变成String<ul>
<li>参数 ： mkString（开始的的符号 ，分隔符 ，结束的符号）</li>
</ul>
</li>
</ul>
<p>变长数组</p>
<ul>
<li>ArrayBuffer ：先导包 ：import scala.collection.mutable.ArrayBuffer<ul>
<li>添加元素 ： <code>a +=1 </code></li>
<li>添加数组 ： <code>a ++=Arr</code></li>
</ul>
</li>
<li>api<ul>
<li>插入数据 ： <code>a.insert(2,3,43,45,5,6)</code>代表从第二个位置来插入后面的数组</li>
<li>移除数据 ： <code>a.remove(0,3)</code>从下表0开始移除三个元素</li>
</ul>
</li>
</ul>
<p>高阶函数：scala里的高级的api 重要的和spark core 比较类似</p>
<p>必须学明白</p>
<p>函数 ：Function 格式 ：<code>var/val 名字 = (参数列表) =&gt; 函数体</code>如果函数体内只有一行代码，是可以省略大括号的</p>
<p>调用： <code>名字(参数)</code>关于函数的类型 是 <code>(入参类型，有几个参数就有几个)=&gt;返回值类型</code></p>
<p>函数是特殊的方法</p>
<p>scala里是可以方法套方法的</p>
<p>相互转化 ：</p>
<p>hello 方法 可以通过 hello_变成函数</p>
<p>方法里也可以嵌套函数 ： 就是高阶函数</p>
<p>例子 ：</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">val a = <span class="function"><span class="params">()</span> =&gt;</span> println(<span class="string">&quot;dl2262....&quot;</span>)</span><br><span class="line">val b = <span class="function"><span class="params">(x:Int , y:Int)</span> =&gt;</span> &#123;x+y&#125;</span><br><span class="line">def foo(<span class="name">f</span>:<span class="function"><span class="params">()</span>=&gt;</span>Unit)=&#123;</span><br><span class="line">f()</span><br><span class="line">&#125;</span><br><span class="line">foo(a)</span><br><span class="line">还可以这么传</span><br><span class="line">foo(<span class="function"><span class="params">()</span> =&gt;</span> println(<span class="string">&quot;scala厉害&quot;</span>))</span><br><span class="line"><span class="comment">-----------------------------------------高阶函数</span></span><br><span class="line"></span><br><span class="line">def test05()=&#123;</span><br><span class="line">def cal(<span class="name">a</span>:Int,<span class="name">b</span>:Int,<span class="name">op</span>:<span class="function"><span class="params">(Int,Int)</span>=&gt;</span>Int)=&#123;</span><br><span class="line">op(a,b)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">println(cal(<span class="number">10</span>,<span class="number">20</span>,<span class="function"><span class="params">(x:Int,y:Int)</span>=&gt;</span>x+y))</span><br><span class="line">println(cal(<span class="number">10</span>,<span class="number">20</span>,<span class="function"><span class="params">(x,y)</span>=&gt;</span>x+y))</span><br><span class="line">println(cal(<span class="number">10</span>,<span class="number">20</span>,_+_))</span><br></pre></td></tr></table></figure>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>map是一一映射的</p>
<p>比如 ： f:a&#x3D;&gt;b 类似 y&#x3D;f（x）</p>
<p>例子 ：数组成2</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">val arr = <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">arr.<span class="built_in">map</span>(<span class="function">(<span class="params">x:Int</span>)=&gt;</span>x*<span class="number">2</span>)</span><br><span class="line">简写 </span><br><span class="line">arr.<span class="built_in">map</span>(<span class="function">(<span class="params">x</span>)=&gt;</span>x*<span class="number">2</span>)</span><br><span class="line">arr.<span class="built_in">map</span>(<span class="function"><span class="params">x</span>=&gt;</span>x*<span class="number">2</span>) <span class="comment">//传入参数只有一个，括号可以省略</span></span><br><span class="line">arr.<span class="built_in">map</span>(_*<span class="number">2</span>) <span class="comment">// 前后只出现一次x，就是执行方法里，可以用_代替</span></span><br></pre></td></tr></table></figure>

<p>例子：</p>
<p>把数组中的 <code> var arr1 = Array(&quot;Flink&quot; , &quot;zihan&quot;)</code>变成小写</p>
<p>执行 <code>arr1.map(_.toLowerCase)</code>就ok了</p>
<p>补充数据类型 ：tuple元组 ： 定义方式 ： <code> private val tuple: (Int, Int, Int) = (1, 2, 3)</code></p>
<p>元素下标从1开始取用 <code>名称._num</code>取值</p>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>map最好不要进行打印，因为map会制造一个结果集，括号里面速度Unit的</p>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>有返回值。返回值是一个Any的集合，过滤，括号内放布尔类型的值</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">val</span> arr1 = List(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">78</span>)</span><br><span class="line"><span class="attribute">scala</span>&gt; arr1.filter(_%<span class="number">2</span>!=<span class="number">1</span>).filter(_&gt;<span class="number">3</span>)</span><br><span class="line"><span class="attribute">res9</span>: List[Int] = List(<span class="number">4</span>, <span class="number">6</span>, <span class="number">78</span>)</span><br></pre></td></tr></table></figure>

<h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>和map的区别：首先 FlatMap会打破原来的数据结构 ，map不会</p>
<p>对比结果如下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scala</span>&gt; val arr3 = Array(Array(<span class="number">1</span>,<span class="number">2</span>),Array(<span class="number">3</span>,<span class="number">4</span>),Array(<span class="number">5</span>,<span class="number">6</span>))</span><br><span class="line"><span class="attribute">arr3</span>: Array[Array[Int]] = Array(Array(<span class="number">1</span>, <span class="number">2</span>), Array(<span class="number">3</span>, <span class="number">4</span>), Array(<span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="attribute">scala</span>&gt; arr3.map(x =&gt; x.map(_*<span class="number">2</span>))</span><br><span class="line"><span class="attribute">res20</span>: Array[Array[Int]] = Array(Array(<span class="number">2</span>, <span class="number">4</span>), Array(<span class="number">6</span>, <span class="number">8</span>), Array(<span class="number">10</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="attribute">scala</span>&gt; arr3.flatMap(x=&gt;x.map(_*<span class="number">2</span>))</span><br><span class="line"><span class="attribute">res21</span>: Array[Int] = Array(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">scala</span>&gt; </span><br></pre></td></tr></table></figure>

<h3 id="flatten"><a href="#flatten" class="headerlink" title="flatten"></a>flatten</h3><p>把数组打平就是拆散，使用方法 <code>arr.flatten</code></p>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><p>规约的：把指定的业务逻辑作用两两的数据上</p>
<p>先对元素一和元素二进行操作，再把结果和元素三进行操作，以此类推</p>
<p>例子如下</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">scala&gt; val arrr = <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">89</span>,<span class="number">99</span>)</span><br><span class="line">arrr: <span class="built_in">Array</span>[Int] = <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">89</span>, <span class="number">99</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; arrr.<span class="built_in">reduce</span>(<span class="function">(<span class="params">x,y</span>)=&gt;</span>x+y)</span><br><span class="line">res24: Int = <span class="number">224</span></span><br><span class="line"></span><br><span class="line">scala&gt; arrr.<span class="built_in">reduce</span>(<span class="function">(<span class="params">x,y</span>)=&gt;</span>&#123;</span><br><span class="line">   println(x,y)</span><br><span class="line">   x+y</span><br><span class="line"> &#125;)</span><br><span class="line">     |      |      | (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">6</span>,<span class="number">4</span>)</span><br><span class="line">(<span class="number">10</span>,<span class="number">5</span>)</span><br><span class="line">(<span class="number">15</span>,<span class="number">6</span>)</span><br><span class="line">(<span class="number">21</span>,<span class="number">7</span>)</span><br><span class="line">(<span class="number">28</span>,<span class="number">8</span>)</span><br><span class="line">(<span class="number">36</span>,<span class="number">89</span>)</span><br><span class="line">(<span class="number">125</span>,<span class="number">99</span>)</span><br><span class="line">res25: Int = <span class="number">224</span></span><br><span class="line"></span><br><span class="line">scala&gt; </span><br></pre></td></tr></table></figure>

<p>reduce算子默认底层走的是reduceleft ，但是相应的也会有从右面的</p>
<p>如下</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">scala&gt; arrr.reduceRight(<span class="function"><span class="params">(x,y)</span>=&gt;</span>&#123;</span><br><span class="line">   println(x,y)</span><br><span class="line">   x+y</span><br><span class="line"> &#125;)</span><br><span class="line">     |      |      | (<span class="number">89</span>,<span class="number">99</span>)</span><br><span class="line">(<span class="number">8</span>,<span class="number">188</span>)</span><br><span class="line">(<span class="number">7</span>,<span class="number">196</span>)</span><br><span class="line">(<span class="number">6</span>,<span class="number">203</span>)</span><br><span class="line">(<span class="number">5</span>,<span class="number">209</span>)</span><br><span class="line">(<span class="number">4</span>,<span class="number">214</span>)</span><br><span class="line">(<span class="number">3</span>,<span class="number">218</span>)</span><br><span class="line">(<span class="number">2</span>,<span class="number">221</span>)</span><br><span class="line">(<span class="number">1</span>,<span class="number">223</span>)</span><br><span class="line">res26: Int = <span class="number">224</span></span><br><span class="line"></span><br><span class="line">scala&gt; </span><br></pre></td></tr></table></figure>

<h3 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h3><p>用于分组：自定义分组 ，和sql里的group by 有点类似 ，</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">scala&gt; val arr6 = <span class="built_in">Array</span>((<span class="string">&quot;a&quot;</span>,<span class="number">100</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">20</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">15</span>),(<span class="string">&quot;d&quot;</span>,<span class="number">100</span>))</span><br><span class="line">arr6: Array<span class="selector-attr">[(String, Int)]</span> = <span class="built_in">Array</span>((<span class="selector-tag">a</span>,<span class="number">100</span>), (<span class="selector-tag">b</span>,<span class="number">20</span>), (c,<span class="number">15</span>), (d,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line">scala&gt; arr6<span class="selector-class">.groupBy</span>(_._1)</span><br><span class="line">res27: scala<span class="selector-class">.collection</span><span class="selector-class">.immutable</span><span class="selector-class">.Map</span><span class="selector-attr">[String,Array[(String, Int)]</span>] = <span class="built_in">Map</span>(<span class="selector-tag">a</span> -&gt; <span class="built_in">Array</span>((<span class="selector-tag">a</span>,<span class="number">100</span>)), <span class="selector-tag">b</span> -&gt; <span class="built_in">Array</span>((<span class="selector-tag">b</span>,<span class="number">20</span>)), c -&gt; <span class="built_in">Array</span>((c,<span class="number">15</span>)), d -&gt; <span class="built_in">Array</span>((d,<span class="number">100</span>)))</span><br></pre></td></tr></table></figure>

<h3 id="MapValues"><a href="#MapValues" class="headerlink" title="MapValues"></a>MapValues</h3><p>也是一一映射 ： 但是map的作用是作用在values上的，首先数据必须是kv的，map键值对&#x2F;tuple2</p>
<p>补充map(k-&gt;v):一对一对的 <code>val a = Map(&quot;a&quot; -&gt; 24,&quot;b&quot;-&gt;33)</code></p>
<p>就是单独取出其中的values，如下</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> arr6 = <span class="constructor">Array((<span class="string">&quot;a&quot;</span>,100)</span>,(<span class="string">&quot;b&quot;</span>,<span class="number">20</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">15</span>),(<span class="string">&quot;d&quot;</span>,<span class="number">100</span>))</span><br><span class="line">arr6.group<span class="constructor">By(<span class="params">_</span>.<span class="params">_1</span>)</span>.map<span class="constructor">Values(<span class="params">_</span>.<span class="params">map</span>(<span class="params">_</span>.<span class="params">_2</span>)</span>.sum)</span><br></pre></td></tr></table></figure>

<h3 id="sortby"><a href="#sortby" class="headerlink" title="sortby"></a>sortby</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">val</span> arr7 = Array(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>)</span><br><span class="line"><span class="attribute">arr7</span>.sortBy(x =&gt; x)</span><br><span class="line"><span class="attribute">arr7</span>.sortBy(x =&gt; -x)</span><br></pre></td></tr></table></figure>

<p>自动排序，升序不加负号，加了就是降序</p>
<h3 id="实现wordcount"><a href="#实现wordcount" class="headerlink" title="实现wordcount"></a>实现wordcount</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> Test&#123;</span><br><span class="line">  def main( args:Array<span class="literal">[S<span class="identifier">tring</span>]</span>): Unit =&#123;</span><br><span class="line">    var lines = <span class="constructor">Array(<span class="string">&quot;wo men shi hao hai zi&quot;</span>,<span class="string">&quot;wo jiao liu shen&quot;</span>,<span class="string">&quot;what&#x27;s your name&quot;</span>)</span></span><br><span class="line">    var words = <span class="constructor">Array(<span class="string">&quot;Hello world&quot;</span>,<span class="string">&quot;Hello scala&quot;</span>,<span class="string">&quot;Hello bigdata&quot;</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*1.为什么这里使用空格就可以将数组lines分开？</span></span><br><span class="line"><span class="comment">    2.这里的map(_.split(&quot; &quot;))可以这么理解，_.split(&quot; &quot;)中的_可以理解成&quot;wo men shi hao hai zi&quot;,&quot;wo jiao liu shen&quot;,&quot;what&#x27;s your name&quot;中每个</span></span><br><span class="line"><span class="comment">    冒号的内容，然后将每个冒号的内容用空格分割。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    var result1 = words.map(<span class="module-access"><span class="module"><span class="identifier">_</span>.</span></span>split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.将这个result1压平，压平的意思就是将多个Array数组压成一个Array数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    var result2 = result1.flatten</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.将result2中的每个元素拿出来和1形成map元组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    var result3 = result2.map((_,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.通过每个元组的第一个值来分组</span></span><br><span class="line"><span class="comment">    2.这里的分组方法因Scala/Spark等编程语言的不同而不同</span></span><br><span class="line"><span class="comment">    3.在scala中是groupBy，但是在spark中就是reduceByKey</span></span><br><span class="line"><span class="comment">    4.这里面的result4中的每个元素  都是一个元组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    var result4 = result3.group<span class="constructor">By((<span class="params">_</span>.<span class="params">_1</span>)</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.这里的t._1中的t指的是元组中的一个元素，t._1指的是元组中第一个元素的第一部分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    var result5 = result4.map(t =&gt;(t._1,t.<span class="module-access"><span class="module"><span class="identifier">_2</span>.</span></span>length))<span class="comment">//唯一不明白的地方</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.将得到的map转换成list，然后将list按照元组的第二部分来降序排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    var result6 = result5.toList.sort<span class="constructor">By(<span class="params">_</span>.<span class="params">_2</span>)</span>.reverse</span><br><span class="line"></span><br><span class="line">    println(result6);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.flatMap()是通过切分开再压平  切分是通过.split(&quot; &quot;)方法</span></span><br><span class="line"><span class="comment">     * 2.map()方法是切分  map((_,1))是形成map序列 每个序列的value都是1</span></span><br><span class="line"><span class="comment">     * 3.groupBy()方法分组 groupBy((_._1))是通过每个元组的第一个值来分组</span></span><br><span class="line"><span class="comment">     * 4.toList()方法是转化成List序列  因为map是不支持排序的，所以使用List</span></span><br><span class="line"><span class="comment">     * 5.sortBy()方法是排序方法  sortBy(_._2)是通过元组的第二个元素来排序</span></span><br><span class="line"><span class="comment">     * 6.reverse()方法是倒转   将排序的结果降序排列</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------上面是网上的-------------------------------------------</span><br><span class="line">----------------------------------------下面是我们自己写的-------------------------------------</span><br><span class="line">worcountSource.map(<span class="module-access"><span class="module"><span class="identifier">_</span>.</span></span>split(<span class="string">&quot;,&quot;</span>)).flatten.map((_,<span class="number">1</span>)).group<span class="constructor">By(<span class="params">_</span>.<span class="params">_1</span>)</span>.map((x=&gt;(x._1,x.<span class="module-access"><span class="module"><span class="identifier">_2</span>.</span></span>length))).toArray.sort<span class="constructor">By(<span class="params">_</span>.<span class="params">_2</span>)</span> <span class="comment">// 第一版</span></span><br><span class="line">然后进行优化 ， 上述把字符串炸开的时候，.splite和.flatten =》替换成flatMap</span><br><span class="line">mapValues =》可以替换后面进行数据统计的情况</span><br><span class="line">worcountSource.flat<span class="constructor">Map(<span class="params">_</span>.<span class="params">split</span>(<span class="string">&quot;,&quot;</span>)</span>).map((_,<span class="number">1</span>)).group<span class="constructor">By(<span class="params">_</span>.<span class="params">_1</span>)</span>.map<span class="constructor">Values(<span class="params">_</span>.<span class="params">map</span>(<span class="params">_</span>.<span class="params">_2</span>)</span>.sum).toArray.sort<span class="constructor">By(<span class="params">x</span>=&gt; -<span class="params">x</span>.<span class="params">_2</span>)</span> <span class="comment">// 第二版</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串插值："><a href="#字符串插值：" class="headerlink" title="字符串插值："></a>字符串插值：</h3><p>shell ,python , scala 都有</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">scala&gt; val hello:<span class="built_in">String</span> = <span class="string">&quot;hello&quot;</span></span><br><span class="line"> val <span class="built_in">str</span>:<span class="built_in">String</span> = hello + <span class="string">&quot;scala&quot;</span></span><br><span class="line">hello: <span class="built_in">String</span> = hello</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="built_in">str</span>: <span class="built_in">String</span> = helloscala</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="built_in">print</span>(s<span class="string">&quot;xxx_$str&quot;</span>)</span><br><span class="line">xxx_helloscala</span><br><span class="line">scala&gt; </span><br></pre></td></tr></table></figure>

<h3 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h3><p><code>val mes = &quot;&quot;&quot; sdhaskdj&quot;&quot;&quot;</code></p>
<p>就是三次””,其中多行的字符串每行之间加上，就可以</p>
<h2 id="集合-1"><a href="#集合-1" class="headerlink" title="集合"></a>集合</h2><h3 id="List-：和Array类似"><a href="#List-：和Array类似" class="headerlink" title="List ：和Array类似"></a>List ：和Array类似</h3><ul>
<li>长度不可变 list</li>
<li>长度可变 listBuffer</li>
</ul>
<p>Nil 是不可变的size为0的List</p>
<p>添加元素 ：<code>::追加元素 </code>这样是新生成一个数组，并不是再原来的数组上添加的</p>
<ul>
<li><code>val a = 1::Nil</code></li>
<li><code>li ++ List(1,2,3,4)</code></li>
</ul>
<p>取值 ：根据下标来取</p>
<p>api ：</p>
<ul>
<li>head：取出List的第一个元素</li>
<li>tail：取出List的非第一个的所有元素</li>
</ul>
<p>需求 ：使用scala求和的方法</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">def <span class="built_in">sum</span>(nums:<span class="built_in">Int</span>*):<span class="built_in">Int</span>=&#123;</span><br><span class="line">  <span class="keyword">if</span> (nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    nums.head+<span class="built_in">sum</span>(nums.tail:_*)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>创建 可变的buffer：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">val <span class="keyword">a</span> = ListBuffer[Int]()<span class="comment"></span></span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line"><span class="keyword">a</span>+=<span class="number">2</span></span><br><span class="line"><span class="keyword">a</span>+=(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="keyword">a</span>++=List(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>创建 ：<code>val a = Set</code></p>
<p>无序不可重复的</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">scala</span>&gt; val hh = Set(<span class="number">111</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">545</span>)</span><br><span class="line"><span class="attribute">hh</span>: scala.collection.immutable.Set[Int] = Set(<span class="number">1</span>, <span class="number">2</span>, <span class="number">545</span>, <span class="number">3</span>, <span class="number">111</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>创建 ：<code>val a = Map (&quot;zs&quot;-&gt;123,&quot;lisi&quot;-&gt;22)</code></p>
<ul>
<li>可变 ：可以重新进行赋值</li>
<li>不可变 ：不可以重新赋值 ：默认是不可变 创建的时候用可变map <code>val a =  scala.collection.mutable.Map()</code></li>
</ul>
<p>取值 ：</p>
<ul>
<li>a(zs) :通过key来取值</li>
<li>a.get(“zs”):api取值方法，查看这个map里的key，有则取出，无则是null</li>
<li>a.getOrElse（”zs”,”默认值”）：取到就是map里的，取不到就是默认</li>
</ul>
<p>更改 ：针对可变map</p>
<ul>
<li>a(“zs”)&#x3D;18</li>
<li>a.get(“zs”)&#x3D;18</li>
<li>等等</li>
</ul>
<p>添加元素 ：和上面List和Array是一样的 <code>a += ((&quot;zss&quot; , 11))</code>或者 <code>a += (&quot;fff&quot;-&gt;111)</code>或者其他的方式，不止这些</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">scala&gt; val t1 =  scala<span class="selector-class">.collection</span><span class="selector-class">.mutable</span><span class="selector-class">.Map</span><span class="selector-attr">[String,String]</span>()</span><br><span class="line">t1: scala<span class="selector-class">.collection</span><span class="selector-class">.mutable</span><span class="selector-class">.Map</span><span class="selector-attr">[String,String]</span> = <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line">scala&gt; t1 += (<span class="string">&quot;ss&quot;</span> -&gt; <span class="string">&quot;sdlaks&quot;</span>)</span><br><span class="line">res54: t1<span class="selector-class">.type</span> = <span class="built_in">Map</span>(ss -&gt; sdlaks)</span><br><span class="line"></span><br><span class="line">scala&gt; t1</span><br><span class="line">res55: scala<span class="selector-class">.collection</span><span class="selector-class">.mutable</span><span class="selector-class">.Map</span><span class="selector-attr">[String,String]</span> = <span class="built_in">Map</span>(ss -&gt; sdlaks)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="built_in">t1</span>(<span class="string">&quot;ss&quot;</span>)</span><br><span class="line">res56: String = sdlaks</span><br><span class="line"></span><br><span class="line">scala&gt; t1<span class="selector-class">.get</span>(<span class="string">&quot;ss&quot;</span>)</span><br><span class="line">res57: Option<span class="selector-attr">[String]</span> = <span class="built_in">Some</span>(sdlaks)</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="built_in">t1</span>(<span class="string">&quot;ss&quot;</span>)=<span class="string">&quot;1111&quot;</span></span><br><span class="line"></span><br><span class="line">scala&gt; t1</span><br><span class="line">res59: scala<span class="selector-class">.collection</span><span class="selector-class">.mutable</span><span class="selector-class">.Map</span><span class="selector-attr">[String,String]</span> = <span class="built_in">Map</span>(ss -&gt; <span class="number">1111</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; t1<span class="selector-class">.getOrElse</span>(<span class="string">&quot;ss&quot;</span>,<span class="string">&quot;nihao&quot;</span>)</span><br><span class="line">res60: String = <span class="number">1111</span></span><br><span class="line"></span><br><span class="line">scala&gt; t1<span class="selector-class">.getOrElse</span>(<span class="string">&quot;ss1&quot;</span>,<span class="string">&quot;nihao&quot;</span>)</span><br><span class="line">res61: String = nihao</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="case-class"><a href="#case-class" class="headerlink" title="case class"></a>case class</h2><p>和普通的class的区别</p>
<p>以后用样例类偏多 ， case class 不用new</p>
<p>case class 默认实现了序列化 ：重要</p>
<p>case class 底层重写了，toString ，equals , hashcode</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">case</span> <span class="variable">class</span> <span class="function"><span class="title">Dog</span>(<span class="variable">name</span>:<span class="variable">String</span>)&#123;</span></span><br><span class="line"><span class="function">  <span class="variable">def</span> <span class="title">fo1</span>(<span class="variable">name</span>:<span class="variable">String</span>): <span class="variable">Unit</span> =&#123;</span></span><br><span class="line"><span class="function">    <span class="title">print</span>(<span class="variable">name</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------------------主方法----------------</span><br><span class="line">    <span class="variable">val</span> <span class="variable">dog</span> = <span class="function"><span class="title">Dog</span>(<span class="string">&quot;旺财&quot;</span>)</span></span><br><span class="line">    <span class="variable">dog.fo1</span>(<span class="string">&quot;daksjhakl&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"><span class="variable">scala</span>&gt; <span class="variable">case</span> <span class="variable">class</span> <span class="function"><span class="title">Dog</span>(<span class="variable">name</span>:<span class="variable">String</span>)&#123;</span></span><br><span class="line"><span class="function">   <span class="variable">def</span> <span class="title">fo1</span>(<span class="variable">name</span>:<span class="variable">String</span>): <span class="variable">Unit</span> =&#123;</span></span><br><span class="line"><span class="function">     <span class="title">print</span>(<span class="variable">name</span>)</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">     |      |      |      | <span class="variable">defined</span> <span class="variable">class</span> <span class="variable">Dog</span></span><br><span class="line"></span><br><span class="line"><span class="variable">scala</span>&gt; <span class="variable">import</span> <span class="variable">example.test.Dog</span></span><br><span class="line"> </span><br><span class="line"> <span class="variable">val</span> <span class="variable">dog</span> = <span class="function"><span class="title">Dog</span>(<span class="string">&quot;旺财&quot;</span>)</span></span><br><span class="line"> </span><br><span class="line"> <span class="variable">val</span> <span class="variable">dog</span> = <span class="function"><span class="title">Dog</span>(<span class="string">&quot;旺财&quot;</span>)</span></span><br><span class="line">&lt;<span class="variable">console</span>&gt;:<span class="number">11</span>: <span class="variable">error</span>: <span class="variable"><span class="class">object</span></span> <span class="variable">Dog</span> <span class="variable">is</span> <span class="variable"><span class="keyword">not</span></span> <span class="variable">a</span> <span class="variable">member</span> <span class="variable">of</span> <span class="variable">package</span> <span class="variable">example.test</span></span><br><span class="line">       <span class="variable">import</span> <span class="variable">example.test.Dog</span></span><br><span class="line">              ^</span><br><span class="line"></span><br><span class="line"><span class="variable">scala</span>&gt; </span><br><span class="line"><span class="variable">scala</span>&gt; <span class="variable">dog</span>: <span class="variable">Dog</span> = <span class="function"><span class="title">Dog</span>(����)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">scala</span>&gt; </span><br><span class="line"><span class="variable">scala</span>&gt; <span class="variable">dog</span>: <span class="variable">Dog</span> = <span class="function"><span class="title">Dog</span>(����)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">scala</span>&gt; <span class="variable">val</span> <span class="variable">dog1</span> = <span class="function"><span class="title">Dog</span>(<span class="string">&quot;旺财&quot;</span>)</span></span><br><span class="line"><span class="variable">dog1</span>: <span class="variable">Dog</span> = <span class="function"><span class="title">Dog</span>(����)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">scala</span>&gt; <span class="variable">dog</span> == <span class="variable">dog1</span></span><br><span class="line"><span class="variable">res87</span>: <span class="variable">Boolean</span> = <span class="variable"><span class="literal">true</span></span></span><br><span class="line"></span><br><span class="line"><span class="variable">scala</span>&gt; <span class="function"><span class="title">print</span>(<span class="variable">dog</span>)</span></span><br><span class="line"><span class="function"><span class="title">Dog</span>(����)</span></span><br><span class="line"><span class="variable">scala</span>&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p>类似java中的switch case</p>
<p>匹配的内容</p>
<ul>
<li>匹配内容<ul>
<li><code>xxx.match&#123;case xxx =&gt; xxxx case yyy =&gt; yyy case_ =&gt; xxxx&#125;</code>等</li>
</ul>
</li>
<li>匹配类型<ul>
<li><code>xxx.match&#123;case x:Int =&gt; xxxx case y:String =&gt;yyy case_ =&gt; zzzz&#125;</code></li>
</ul>
</li>
<li>匹配集合<ul>
<li><code>xxx.match&#123;case x::y::Nil =&gt; println(&quot;集合中只有两个元素&quot; case &quot;zihang&quot;::Nil =&gt; println(集合中只有一个元素就是子航)) case_ =&gt; println(&quot;other&quot;)&#125;</code></li>
</ul>
</li>
<li>匹配样例类<ul>
<li>源码中用的比较多 ： 如下</li>
</ul>
</li>
</ul>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title class_">Submak</span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title class_">hearetbeat</span>(int: Int)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">class</span> <span class="title class_">hhh</span>(string: <span class="built_in">String</span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line">-------main</span><br><span class="line">    val rrr = <span class="built_in">Array</span>(Submak , hearetbeat(<span class="number">111</span>) , hhh(<span class="string">&quot;sdajkd&quot;</span>))</span><br><span class="line"></span><br><span class="line">    rrr match &#123;</span><br><span class="line">      <span class="keyword">case</span> Submak() =&gt; <span class="built_in">print</span>(<span class="string">&quot;Submak&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span>  hearetbeat(int: Int) =&gt; <span class="built_in">print</span>(<span class="string">&quot;sdahjd&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span>  hhh(string: <span class="built_in">String</span>) =&gt; <span class="built_in">print</span>(<span class="string">&quot;hh&quot;</span>)</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="built_in">print</span>(<span class="string">&quot;没有&quot;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>简单例子</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">worcountSource.flatten.map(_.toString).map(<span class="function"><span class="params">(_, <span class="number">1</span>)</span>).groupBy<span class="params">(_._1)</span>.mapValues<span class="params">(_.map(_._2).sum)</span>.toArray.sortBy<span class="params">(_._2)</span>.map<span class="params">(_ match &#123; <span class="keyword">case</span> (<span class="string">&quot;n&quot;</span> , int: Int) =&gt; <span class="built_in">print</span>(<span class="string">&quot;找到&quot;</span>) <span class="keyword">case</span> _ =&gt; <span class="built_in">print</span>(<span class="string">&quot;bus&quot;</span>)&#125;)</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>

<p>代表可以和wordcount联用</p>
<h3 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h3><p>用法 ：定义一个方法，且他的返回值是偏函数</p>
<p>方法体里是一堆的case表达式</p>
<p>A是输入参数的类型，B是输出参数的类型</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">    def teacher:PartialFunction[<span class="built_in">String</span>（A）,<span class="built_in">String</span>（B）]=&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;spark&quot;</span> =&gt; <span class="string">&quot;dsadljaksld&quot;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;hive&quot;</span>=&gt; <span class="string">&quot;asdad&quot;</span></span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="string">&quot;其他&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------------------------------------调用</span><br><span class="line">teacher（<span class="string">&quot;xxx&quot;</span>）</span><br></pre></td></tr></table></figure>

<p>一般用的很少</p>
<p>柯力化 &#x3D;》 必然发生的结果 ，没有任何意义</p>
<p>例如 ：<code>def sum(x:Int,y:Int) =&gt; def sum(x:Int)(y:Int)</code></p>
<p>上述就是柯力化，可以进行隐式转换来使用 -》 调用的时候也可以用柯力化的写法</p>
<h3 id="io-x3D-》-读写文件-url"><a href="#io-x3D-》-读写文件-url" class="headerlink" title="io &#x3D;》 读写文件 url"></a>io &#x3D;》 读写文件 url</h3><p>如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">scala&gt; import scala<span class="selector-class">.io</span><span class="selector-class">.Source</span></span><br><span class="line"> </span><br><span class="line"> val source = Source<span class="selector-class">.fromFile</span>(<span class="string">&quot;F:\\bigdatajava\\src\\main\\resources\\wc.data&quot;</span>)</span><br><span class="line">import scala<span class="selector-class">.io</span><span class="selector-class">.Source</span></span><br><span class="line"></span><br><span class="line">scala&gt; </span><br><span class="line">scala&gt; source: scala<span class="selector-class">.io</span><span class="selector-class">.BufferedSource</span> = &lt;iterator&gt;</span><br><span class="line"></span><br><span class="line">scala&gt; val strings = source<span class="selector-class">.getLines</span>()</span><br><span class="line">strings: Iterator<span class="selector-attr">[String]</span> = &lt;iterator&gt;</span><br><span class="line"></span><br><span class="line">scala&gt; strings<span class="selector-class">.foreach</span>(<span class="built_in">println</span>(_))</span><br><span class="line">spark,linux</span><br><span class="line">hadoop</span><br><span class="line">linux,hive</span><br><span class="line">flume</span><br><span class="line"></span><br><span class="line">scala&gt; </span><br></pre></td></tr></table></figure>

<p>上述这么读数据的话，数据只能使用一次，不管进行什么操作，甚至是比较，数据都会消失</p>
<p>需求 ：读取文件内容，统计文件每个单词出现的次数</p>
<p>如下：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> source = <span class="module-access"><span class="module"><span class="identifier">Source</span>.</span></span>from<span class="constructor">File(<span class="string">&quot;F:\\bigdatajava\\src\\main\\resources\\wc.data&quot;</span>)</span></span><br><span class="line"><span class="keyword">val</span> strings = source.get<span class="constructor">Lines()</span></span><br><span class="line">strings.toArray.flat<span class="constructor">Map(<span class="params">_</span>.<span class="params">split</span>(<span class="string">&quot;,&quot;</span>)</span>).map((_,<span class="number">1</span>)).group<span class="constructor">By(<span class="params">_</span>.<span class="params">_1</span>)</span>.map(x =&gt; (x._1 , x.<span class="module-access"><span class="module"><span class="identifier">_2</span>.</span></span>length)).toArray.sort<span class="constructor">By(<span class="params">s</span> =&gt; -<span class="params">s</span>.<span class="params">_2</span>)</span>.foreach(println(_))</span><br></pre></td></tr></table></figure>

<h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>类似于java力的动态代理 &#x3D;》 为了增强</p>
<p>例子 ：A的一个类 -》 B类 B对A已经有的东西进行增强 -》 通过转换之后 B可以使用A已有的功能</p>
<p>场景 ：</p>
<ul>
<li>隐式参数</li>
<li>隐式类 ： 高危</li>
<li>隐式类转换 ：</li>
</ul>
<p>如下</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">package example.test</span><br><span class="line"></span><br><span class="line">object te2 &#123;</span><br><span class="line"></span><br><span class="line">  def main(args: Array[String]): <span class="keyword">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">implicit</span> def mantoSuper(man: Man):SuperMan=&#123;</span><br><span class="line">      new SuperMan(man.<span class="keyword">Name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    val zk = new Man(<span class="string">&quot;子涵 &quot;</span>)</span><br><span class="line">    zk.fly()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Man(val <span class="keyword">Name</span>:String)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> SuperMan(<span class="keyword">Name</span>:String)&#123;</span><br><span class="line">  def fly()=&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">Name</span>+<span class="string">&quot;can fly&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>隐式转换可以作用于基本类型如下</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Cal(X:<span class="built_in">Int</span>)&#123;</span><br><span class="line">  def add(a:<span class="built_in">Int</span>): <span class="keyword">Unit</span> =&#123;</span><br><span class="line">    <span class="built_in">print</span>(a+X)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------main</span><br><span class="line"> <span class="keyword">implicit</span> def INttoadd(x:<span class="built_in">Int</span>):Cal=&#123;</span><br><span class="line">      new Cal(x)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">4.</span>add(<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<p>通过隐式的方法往javaio中添加read方法</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> RichFile(<span class="keyword">file</span>:<span class="keyword">File</span>)&#123;</span><br><span class="line"></span><br><span class="line">  def read()=&#123;</span><br><span class="line">    Source.fromFile(<span class="keyword">file</span>.getPath).getLines().mkString(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------main</span><br><span class="line"> <span class="keyword">implicit</span> def ADDREAD(<span class="keyword">file</span>:<span class="keyword">File</span>):RichFile=&#123;</span><br><span class="line">      new RichFile(<span class="keyword">file</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    var q = new <span class="keyword">File</span>(<span class="string">&quot;F:\\bigdatajava\\src\\main\\resources\\wc.data&quot;</span>)</span><br><span class="line">    println(q.read())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>🐂的</p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>方法中的泛型：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MsG</span>[<span class="type">T</span>](<span class="params">content:<span class="type">T</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wechat</span>(<span class="params">conte:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">MsG</span>(<span class="params">conte</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QQChat</span>[<span class="type">Int</span>](<span class="params">cont:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">MsG</span>(<span class="params">cont</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZFBchat</span>(<span class="params">con:<span class="type">BigInt</span></span>) <span class="keyword">extends</span> <span class="title">MsG</span>[<span class="type">BigInt</span>](<span class="params">con</span>)</span></span><br></pre></td></tr></table></figure>

<p>例子 ：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">boy</span>[<span class="symbol">A,<span class="symbol">B</span>,<span class="symbol">C</span></span>](<span class="symbol">val</span> <span class="symbol">hashband:<span class="symbol">A</span>,<span class="symbol">val</span></span> <span class="symbol">heigtt:<span class="symbol">B</span>,<span class="symbol">val</span></span> <span class="symbol">chuanzhuio:<span class="symbol">C</span></span>)&#123;</span><br><span class="line">  <span class="keyword">override</span> def toString: String = hashband +<span class="string">&quot;\t&quot;</span>+ heigtt+<span class="string">&quot;\t&quot;</span>+chuanzhuio</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------枚举</span><br><span class="line">  object Facevalue extends Enumeration&#123;</span><br><span class="line">    type Face = Value</span><br><span class="line">    val A,B,C,D = Value</span><br><span class="line">  &#125;</span><br><span class="line">---------------------------main</span><br><span class="line">new boy[example.test.te2.Facevalue,Int,Double](Facevalue.A,<span class="number">181</span>,<span class="number">9</span>)</span><br></pre></td></tr></table></figure>

<p>上下界 ：</p>
<ul>
<li>上界：<code>&lt;T extends Test&gt;</code>:T是Test的子类 &#x2F; <code>&lt;? extends Test&gt;</code></li>
<li>下界：<code>&lt;T extends Test&gt;</code>:T可以说Test的父类 &#x2F; <code>&lt;? extends Test&gt;</code></li>
<li>逆变 vs 协变 &#x3D;》 + -</li>
</ul>
<h3 id="排序-："><a href="#排序-：" class="headerlink" title="排序 ："></a>排序 ：</h3><p>scala</p>
<ul>
<li>Ordering -&gt; comparator</li>
<li>Ordered -&gt; comparable</li>
</ul>
<p>重点 ：</p>
<ul>
<li>高级api</li>
<li>基本类型使用</li>
<li>模式匹配</li>
<li>隐式转换</li>
<li>类的定义</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>scala</tag>
      </tags>
  </entry>
  <entry>
    <title>hive调优</title>
    <url>/2022/12/28/12-24/</url>
    <content><![CDATA[<h1 id="hive的内置function"><a href="#hive的内置function" class="headerlink" title="hive的内置function"></a>hive的内置function</h1><p>通过 <code>show functions</code>查看，命令总数以及名称</p>
<p>通过 <code>show functions like xxx</code>代表模糊查询</p>
<p>通过 <code>desc function extended xxxx方法名字</code> 查看方法如何使用</p>
<h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><p>current_date:它打印的是当前时间</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hive</span> (default)&gt; select current_date;</span><br><span class="line"><span class="attribute">OK</span></span><br><span class="line"><span class="attribute">_c0</span></span><br><span class="line"><span class="attribute">2022</span>-<span class="number">12</span>-<span class="number">28</span></span><br><span class="line"><span class="attribute">Time</span> taken: <span class="number">5</span>.<span class="number">424</span> seconds, Fetched: <span class="number">1</span> row(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>current_timestamp:打印当前时间戳</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hive</span> (default)&gt; select current_timestamp;</span><br><span class="line"><span class="attribute">OK</span></span><br><span class="line"><span class="attribute">_c0</span></span><br><span class="line"><span class="attribute">2022</span>-<span class="number">12</span>-<span class="number">28</span> <span class="number">09</span>:<span class="number">56</span>:<span class="number">56</span>.<span class="number">204</span></span><br><span class="line"><span class="attribute">Time</span> taken: <span class="number">0</span>.<span class="number">23</span> seconds, Fetched: <span class="number">1</span> row(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>unix_timestamp:把肉眼可见的时间格式转换成秒值，1970年到指定日子的秒值</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)&gt; <span class="keyword">desc</span> <span class="keyword">function</span> extended unix_timestamp;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">unix_timestamp(<span class="type">date</span>[, pattern]) - Converts the <span class="type">time</span> <span class="keyword">to</span> a number</span><br><span class="line">Converts the specified <span class="type">time</span> <span class="keyword">to</span> number <span class="keyword">of</span> seconds since <span class="number">1970</span><span class="number">-01</span><span class="number">-01.</span> The unix_timestamp(<span class="type">void</span>) overload <span class="keyword">is</span> deprecated, use <span class="built_in">current_timestamp</span>.</span><br><span class="line"><span class="keyword">Function</span> <span class="keyword">class</span>:org.apache.hadoop.hive.ql.udf.generic.GenericUDFUnixTimeStamp</span><br><span class="line"><span class="keyword">Function</span> <span class="keyword">type</span>:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.015</span> seconds, Fetched: <span class="number">4</span> <span class="keyword">row</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------------------------------------------------使用</span></span><br><span class="line">hive (<span class="keyword">default</span>)&gt; <span class="keyword">select</span> unix_timestamp()</span><br><span class="line">              &gt; ;</span><br><span class="line">unix_timestamp(<span class="type">void</span>) <span class="keyword">is</span> deprecated. Use <span class="built_in">current_timestamp</span> <span class="keyword">instead</span>.</span><br><span class="line">unix_timestamp(<span class="type">void</span>) <span class="keyword">is</span> deprecated. Use <span class="built_in">current_timestamp</span> <span class="keyword">instead</span>.</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line"><span class="number">1672192863</span></span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.145</span> seconds, Fetched: <span class="number">1</span> <span class="keyword">row</span>(s)</span><br><span class="line"><span class="comment">------------------------------------------------------------------加参数</span></span><br><span class="line">hive (<span class="keyword">default</span>)&gt; <span class="keyword">select</span> unix_timestamp(<span class="string">&#x27;2022-12-28&#x27;</span>);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line"><span class="keyword">NULL</span></span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.146</span> seconds, Fetched: <span class="number">1</span> <span class="keyword">row</span>(s)</span><br><span class="line">hive (<span class="keyword">default</span>)&gt; <span class="keyword">select</span> unix_timestamp(<span class="string">&#x27;2022-12-28 12:00:00&#x27;</span>);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line"><span class="number">1672228800</span></span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.141</span> seconds, Fetched: <span class="number">1</span> <span class="keyword">row</span>(s)</span><br><span class="line">hive (<span class="keyword">default</span>)&gt; </span><br><span class="line">默认加参数的时候要YYYY-MM-dd HH:mm:ss 但是可以加格式 ，通过下述方法添加自定义格式</span><br><span class="line">hive (<span class="keyword">default</span>)&gt; <span class="keyword">select</span> unix_timestamp(<span class="string">&#x27;2022-12-28&#x27;</span>,<span class="string">&#x27;yyyy-MM-dd&#x27;</span>);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line"><span class="number">1672185600</span></span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.149</span> seconds, Fetched: <span class="number">1</span> <span class="keyword">row</span>(s)</span><br><span class="line">其最小的时间是<span class="number">8</span>点，并不是<span class="number">0</span>点</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>from_unixtime：把毫秒数转换成日期</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended from_unixtime;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">from_unixtime(unix_time, format) <span class="operator">-</span> <span class="keyword">returns</span> unix_time <span class="keyword">in</span> the specified format</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> from_unixtime(<span class="number">0</span>, <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="string">&#x27;1970-01-01 00:00:00&#x27;</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.UDFFromUnixTime</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.016</span> seconds, Fetched: <span class="number">6</span> <span class="type">row</span>(s)</span><br><span class="line"><span class="comment">--------------------------------------------------------使用</span></span><br><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">select</span> from_unixtime(<span class="number">1672193662</span>);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line"><span class="number">2022</span><span class="number">-12</span><span class="number">-28</span> <span class="number">02</span>:<span class="number">14</span>:<span class="number">22</span></span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.122</span> seconds, Fetched: <span class="number">1</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>to_date：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended to_date;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">to_date(expr) <span class="operator">-</span> Extracts the <span class="type">date</span> part <span class="keyword">of</span> the <span class="type">date</span> <span class="keyword">or</span> datetime expression expr</span><br><span class="line">Example:</span><br><span class="line">   <span class="operator">&gt;</span> <span class="keyword">SELECT</span> to_date(<span class="string">&#x27;2009-07-30 04:17:52&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="string">&#x27;2009-07-30&#x27;</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFDate</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.015</span> seconds, Fetched: <span class="number">6</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>year:month:day:hour:minute等等 ，是取值日期中的一部分</p>
<p>quarter ：季度 &#x3D;》 q1,q2,q3,q4 &#x3D;&gt; 第几季度</p>
<p>默认是三个月一个季度</p>
<p>month_between : 两个日期差几个月</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended months_between;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">months_between(date1, date2, roundOff) <span class="operator">-</span> <span class="keyword">returns</span> number <span class="keyword">of</span> months <span class="keyword">between</span> dates date1 <span class="keyword">and</span> date2</span><br><span class="line">If date1 <span class="keyword">is</span> later than date2, <span class="keyword">then</span> the <span class="keyword">result</span> <span class="keyword">is</span> positive. If date1 <span class="keyword">is</span> earlier than date2, <span class="keyword">then</span> the <span class="keyword">result</span> <span class="keyword">is</span> negative. If date1 <span class="keyword">and</span> date2 <span class="keyword">are</span> either the same days <span class="keyword">of</span> the <span class="keyword">month</span> <span class="keyword">or</span> <span class="keyword">both</span> <span class="keyword">last</span> days <span class="keyword">of</span> months, <span class="keyword">then</span> the <span class="keyword">result</span> <span class="keyword">is</span> always an integer. Otherwise the UDF calculates the fractional <span class="keyword">portion</span> <span class="keyword">of</span> the <span class="keyword">result</span> based <span class="keyword">on</span> a <span class="number">31</span><span class="operator">-</span><span class="keyword">day</span> <span class="keyword">month</span> <span class="keyword">and</span> considers the difference <span class="keyword">in</span> <span class="type">time</span> components date1 <span class="keyword">and</span> date2.</span><br><span class="line">date1 <span class="keyword">and</span> date2 type can be <span class="type">date</span>, <span class="type">timestamp</span> <span class="keyword">or</span> string <span class="keyword">in</span> the format <span class="string">&#x27;yyyy-MM-dd&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span>. The <span class="keyword">result</span> <span class="keyword">is</span> rounded <span class="keyword">to</span> <span class="number">8</span> <span class="type">decimal</span> places <span class="keyword">by</span> default. <span class="keyword">Set</span> roundOff<span class="operator">=</span><span class="literal">false</span> otherwise.</span><br><span class="line"> Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> months_between(<span class="string">&#x27;1997-02-28 10:30:00&#x27;</span>, <span class="string">&#x27;1996-10-30&#x27;</span>);</span><br><span class="line"> <span class="number">3.94959677</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFMonthsBetween</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.016</span> seconds, Fetched: <span class="number">8</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>add_months:当前日期往后加几个月，可以加正数，也可以加负数</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)&gt; desc <span class="keyword">function</span> extended add_months;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">add_months(start_date, num_months, output_date_format) - Returns the <span class="type">date</span> that <span class="built_in">is</span> num_months after start_date.</span><br><span class="line">start_date <span class="built_in">is</span> a <span class="type">string</span> <span class="built_in">or</span> timestamp indicating a valid <span class="type">date</span>. num_months <span class="built_in">is</span> a number. output_date_format <span class="built_in">is</span> an <span class="keyword">optional</span> <span class="type">String</span> which specifies the format <span class="keyword">for</span> output.</span><br><span class="line">The <span class="keyword">default</span> output format <span class="built_in">is</span> <span class="comment">&#x27;YYYY-MM-dd&#x27;.</span></span><br><span class="line"><span class="symbol">Example:</span></span><br><span class="line">  &gt; <span class="keyword">SELECT</span> add_months(<span class="comment">&#x27;2009-08-31&#x27;, 1) FROM src LIMIT 1;</span></span><br><span class="line"> <span class="comment">&#x27;2009-09-30&#x27;.</span></span><br><span class="line">  &gt; <span class="keyword">SELECT</span> add_months(<span class="comment">&#x27;2017-12-31 14:15:16&#x27;, 2, &#x27;YYYY-MM-dd HH:mm:ss&#x27;) LIMIT 1;</span></span><br><span class="line"><span class="comment">&#x27;2018-02-28 14:15:16&#x27;.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> <span class="keyword">class</span>:org.apache.hadoop.hive.ql.udf.generic.GenericUDFAddMonths</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line">Time taken: <span class="number">0.014</span> seconds, Fetched: <span class="number">11</span> row(s)</span><br></pre></td></tr></table></figure>

<p>datediff:两个日期相差几天：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended datediff;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">datediff(date1, date2) <span class="operator">-</span> <span class="keyword">Returns</span> the number <span class="keyword">of</span> days <span class="keyword">between</span> date1 <span class="keyword">and</span> date2</span><br><span class="line">date1 <span class="keyword">and</span> date2 <span class="keyword">are</span> strings <span class="keyword">in</span> the format <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;yyyy-MM-dd&#x27;</span>. The <span class="type">time</span> parts <span class="keyword">are</span> ignored.If date1 <span class="keyword">is</span> earlier than date2, the <span class="keyword">result</span> <span class="keyword">is</span> negative.</span><br><span class="line">Example:</span><br><span class="line">   <span class="operator">&gt;</span> <span class="keyword">SELECT</span> datediff(<span class="string">&#x27;2009-07-30&#x27;</span>, <span class="string">&#x27;2009-07-31&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="number">1</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFDateDiff</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.025</span> seconds, Fetched: <span class="number">7</span> <span class="type">row</span>(s)</span><br><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>date_add:数字可以变成-1的</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)&gt; desc <span class="keyword">function</span> extended date_add;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">date_add(start_date, num_days) - Returns the date that <span class="keyword">is</span> num_days <span class="keyword">after</span> start_date.</span><br><span class="line">start_date <span class="keyword">is</span> a <span class="built_in">string</span> <span class="keyword">in</span> the format <span class="symbol">&#x27;yyyy</span>-MM-dd HH:mm:ss&#x27; <span class="keyword">or</span> <span class="symbol">&#x27;yyyy</span>-MM-dd&#x27;. num_days <span class="keyword">is</span> a number. The <span class="built_in">time</span> part <span class="keyword">of</span> start_date <span class="keyword">is</span> ignored.</span><br><span class="line">Example:</span><br><span class="line">   &gt; <span class="keyword">SELECT</span> date_add(&#x27;<span class="number">2009</span>-<span class="number">07</span>-<span class="number">30</span>&#x27;, <span class="number">1</span>) FROM src LIMIT <span class="number">1</span>;</span><br><span class="line">  &#x27;<span class="number">2009</span>-<span class="number">07</span>-<span class="number">31</span>&#x27;</span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.<span class="keyword">generic</span>.GenericUDFDateAdd</span><br><span class="line"><span class="keyword">Function</span> <span class="keyword">type</span>:BUILTIN</span><br><span class="line"><span class="built_in">Time</span> taken: <span class="number">0.014</span> seconds, Fetched: <span class="number">7</span> row(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>last_day:有类型限制</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended last_day;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">last_day(<span class="type">date</span>) <span class="operator">-</span> <span class="keyword">Returns</span> the <span class="keyword">last</span> <span class="keyword">day</span> <span class="keyword">of</span> the <span class="keyword">month</span> which the <span class="type">date</span> belongs to.</span><br><span class="line"><span class="type">date</span> <span class="keyword">is</span> a string <span class="keyword">in</span> the format <span class="string">&#x27;yyyy-MM-dd HH:mm:ss&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;yyyy-MM-dd&#x27;</span>. The <span class="type">time</span> part <span class="keyword">of</span> <span class="type">date</span> <span class="keyword">is</span> ignored.</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> last_day(<span class="string">&#x27;2009-01-12&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line"> <span class="string">&#x27;2009-01-31&#x27;</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFLastDay</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.015</span> seconds, Fetched: <span class="number">7</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>日期格式 ： date_foermat &#x3D;&gt;重要</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)&gt; <span class="keyword">desc</span> <span class="keyword">function</span> extended date_format;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">date_format(<span class="type">date</span>/<span class="type">timestamp</span>/string, fmt) - converts a <span class="type">date</span>/<span class="type">timestamp</span>/string <span class="keyword">to</span> a <span class="keyword">value</span> <span class="keyword">of</span> string <span class="keyword">in</span> the <span class="keyword">format</span> specified <span class="keyword">by</span> the <span class="type">date</span> <span class="keyword">format</span> fmt.</span><br><span class="line">Supported formats are SimpleDateFormat formats - https://docs.oracle.com/javase/<span class="number">7</span>/docs/api/java/<span class="type">text</span>/SimpleDateFormat.html. Second argument fmt should be <span class="keyword">constant</span>.</span><br><span class="line">Example: &gt; <span class="keyword">SELECT</span> date_format(<span class="string">&#x27;2015-04-08&#x27;</span>, <span class="string">&#x27;y&#x27;</span>);</span><br><span class="line"> <span class="string">&#x27;2015&#x27;</span></span><br><span class="line"><span class="keyword">Function</span> <span class="keyword">class</span>:org.apache.hadoop.hive.ql.udf.generic.GenericUDFDateFormat</span><br><span class="line"><span class="keyword">Function</span> <span class="keyword">type</span>:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.014</span> seconds, Fetched: <span class="number">6</span> <span class="keyword">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>内置的时间函数大体over</p>
<h2 id="算数相关的函数"><a href="#算数相关的函数" class="headerlink" title="算数相关的函数"></a>算数相关的函数</h2><p>round：小数点后面几位</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)&gt; desc <span class="keyword">function</span> extended round;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">round(x[, d]) - round x <span class="keyword">to</span> d <span class="type">decimal</span> places</span><br><span class="line"><span class="symbol">Example:</span></span><br><span class="line">  &gt; <span class="keyword">SELECT</span> round(<span class="number">12.3456</span>, <span class="number">1</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="number">12.3</span><span class="comment">&#x27;</span></span><br><span class="line"><span class="keyword">Function</span> <span class="keyword">class</span>:org.apache.hadoop.hive.ql.udf.generic.GenericUDFRound</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line">Time taken: <span class="number">0.021</span> seconds, Fetched: <span class="number">6</span> row(s)</span><br></pre></td></tr></table></figure>

<p>ceil ： 取整 ，就是返回一个最小的整数，向上取整</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended ceil;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line"><span class="built_in">ceil</span>(x) <span class="operator">-</span> Find the smallest <span class="type">integer</span> <span class="keyword">not</span> smaller than x</span><br><span class="line">Synonyms: ceiling</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">ceil</span>(<span class="number">-0.1</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="number">0</span></span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">ceil</span>(<span class="number">5</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="number">5</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFCeil</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>floor：向下取整</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended floor;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line"><span class="built_in">floor</span>(x) <span class="operator">-</span> Find the largest <span class="type">integer</span> <span class="keyword">not</span> greater than x</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">floor</span>(<span class="number">-0.1</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="number">-1</span></span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">floor</span>(<span class="number">5</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="number">5</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFFloor</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.016</span> seconds, Fetched: <span class="number">8</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure>

<p>rand：随机数</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)&gt; <span class="keyword">desc</span> <span class="keyword">function</span> extended rand;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">rand([seed]) - <span class="keyword">Returns</span> a pseudorandom number <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">Function</span> <span class="keyword">class</span>:org.apache.hadoop.hive.ql.udf.UDFRand</span><br><span class="line"><span class="keyword">Function</span> <span class="keyword">type</span>:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.016</span> seconds, Fetched: <span class="number">3</span> <span class="keyword">row</span>(s)</span><br></pre></td></tr></table></figure>

<h2 id="字符串相关的"><a href="#字符串相关的" class="headerlink" title="字符串相关的"></a>字符串相关的</h2><p>upper，lower,length</p>
<p>length:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended length;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">length(str <span class="operator">|</span> <span class="type">binary</span>) <span class="operator">-</span> <span class="keyword">Returns</span> the length <span class="keyword">of</span> str <span class="keyword">or</span> number <span class="keyword">of</span> bytes <span class="keyword">in</span> <span class="type">binary</span> data</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> length(<span class="string">&#x27;Facebook&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="number">8</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFLength</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.014</span> seconds, Fetched: <span class="number">6</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>trim:去除前后空格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended trim;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line"><span class="built_in">trim</span>(str) <span class="operator">-</span> Removes the <span class="keyword">leading</span> <span class="keyword">and</span> <span class="keyword">trailing</span> space characters <span class="keyword">from</span> str </span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">trim</span>(<span class="string">&#x27;   facebook  &#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="string">&#x27;facebook&#x27;</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFTrim</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.014</span> seconds, Fetched: <span class="number">6</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>upper:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended upper;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line"><span class="built_in">upper</span>(str) <span class="operator">-</span> <span class="keyword">Returns</span> str <span class="keyword">with</span> <span class="keyword">all</span> characters changed <span class="keyword">to</span> uppercase</span><br><span class="line">Synonyms: ucase</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">upper</span>(<span class="string">&#x27;Facebook&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="string">&#x27;FACEBOOK&#x27;</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFUpper</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.018</span> seconds, Fetched: <span class="number">7</span> <span class="type">row</span>(s)</span><br></pre></td></tr></table></figure>

<p>lower:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended lower;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line"><span class="built_in">lower</span>(str) <span class="operator">-</span> <span class="keyword">Returns</span> str <span class="keyword">with</span> <span class="keyword">all</span> characters changed <span class="keyword">to</span> lowercase</span><br><span class="line">Synonyms: lcase</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> <span class="built_in">lower</span>(<span class="string">&#x27;Facebook&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="string">&#x27;facebook&#x27;</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFLower</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.013</span> seconds, Fetched: <span class="number">7</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>lpad:左边补齐</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended lpad;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">lpad(str, len, pad) <span class="operator">-</span> <span class="keyword">Returns</span> str, <span class="keyword">left</span><span class="operator">-</span>padded <span class="keyword">with</span> pad <span class="keyword">to</span> a length <span class="keyword">of</span> len</span><br><span class="line">If str <span class="keyword">is</span> longer than len, the <span class="keyword">return</span> <span class="keyword">value</span> <span class="keyword">is</span> shortened <span class="keyword">to</span> len characters.</span><br><span class="line"><span class="keyword">In</span> <span class="keyword">case</span> <span class="keyword">of</span> <span class="keyword">empty</span> pad string, the <span class="keyword">return</span> <span class="keyword">value</span> <span class="keyword">is</span> null.</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> lpad(<span class="string">&#x27;hi&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;??&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="string">&#x27;???hi&#x27;</span></span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> lpad(<span class="string">&#x27;hi&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;??&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="string">&#x27;h&#x27;</span></span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> lpad(<span class="string">&#x27;hi&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">null</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFLpad</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.012</span> seconds, Fetched: <span class="number">12</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>rpad:右边补齐</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended rpad;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">rpad(str, len, pad) <span class="operator">-</span> <span class="keyword">Returns</span> str, <span class="keyword">right</span><span class="operator">-</span>padded <span class="keyword">with</span> pad <span class="keyword">to</span> a length <span class="keyword">of</span> len</span><br><span class="line">If str <span class="keyword">is</span> longer than len, the <span class="keyword">return</span> <span class="keyword">value</span> <span class="keyword">is</span> shortened <span class="keyword">to</span> len characters.</span><br><span class="line"><span class="keyword">In</span> <span class="keyword">case</span> <span class="keyword">of</span> <span class="keyword">empty</span> pad string, the <span class="keyword">return</span> <span class="keyword">value</span> <span class="keyword">is</span> null.</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> rpad(<span class="string">&#x27;hi&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;??&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="string">&#x27;hi???&#x27;</span></span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> rpad(<span class="string">&#x27;hi&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;??&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="string">&#x27;h&#x27;</span></span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> rpad(<span class="string">&#x27;hi&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">null</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFRpad</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.013</span> seconds, Fetched: <span class="number">12</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>replace:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended replace;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">replace(str, <span class="keyword">search</span>, rep) <span class="operator">-</span> replace <span class="keyword">all</span> substrings <span class="keyword">of</span> <span class="string">&#x27;str&#x27;</span> that <span class="keyword">match</span> <span class="string">&#x27;search&#x27;</span> <span class="keyword">with</span> <span class="string">&#x27;rep&#x27;</span></span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> replace(<span class="string">&#x27;Hack and Hue&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;BL&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="string">&#x27;BLack and BLue&#x27;</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.UDFReplace</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.014</span> seconds, Fetched: <span class="number">6</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>regexp_replace:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended regexp_replace;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">regexp_replace(str, regexp, rep) <span class="operator">-</span> replace <span class="keyword">all</span> substrings <span class="keyword">of</span> str that <span class="keyword">match</span> regexp <span class="keyword">with</span> rep</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> regexp_replace(<span class="string">&#x27;100-200&#x27;</span>, <span class="string">&#x27;(\d+)&#x27;</span>, <span class="string">&#x27;num&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="string">&#x27;num-num&#x27;</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.UDFRegExpReplace</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.013</span> seconds, Fetched: <span class="number">6</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>substr:字符串截取</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)&gt; desc <span class="keyword">function</span> extended substr;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">substr(str, pos[, len]) - returns the substring <span class="keyword">of</span> str that starts at pos <span class="built_in">and</span> <span class="built_in">is</span> <span class="keyword">of</span> length len orsubstr(bin, pos[, len]) - returns the slice <span class="keyword">of</span> <span class="type">byte</span> array that starts at pos <span class="built_in">and</span> <span class="built_in">is</span> <span class="keyword">of</span> length len</span><br><span class="line"><span class="symbol">Synonyms:</span> substring</span><br><span class="line">pos <span class="built_in">is</span> a <span class="number">1</span>-based index. <span class="keyword">If</span> pos&lt;<span class="number">0</span> the starting position <span class="built_in">is</span> determined <span class="keyword">by</span> counting backwards <span class="keyword">from</span> the <span class="keyword">end</span> <span class="keyword">of</span> str.</span><br><span class="line"><span class="symbol">Example:</span></span><br><span class="line">   &gt; <span class="keyword">SELECT</span> substr(<span class="comment">&#x27;Facebook&#x27;, 5) FROM src LIMIT 1;</span></span><br><span class="line">  <span class="comment">&#x27;book&#x27;</span></span><br><span class="line">  &gt; <span class="keyword">SELECT</span> substr(<span class="comment">&#x27;Facebook&#x27;, -5) FROM src LIMIT 1;</span></span><br><span class="line">  <span class="comment">&#x27;ebook&#x27;</span></span><br><span class="line">  &gt; <span class="keyword">SELECT</span> substr(<span class="comment">&#x27;Facebook&#x27;, 5, 1) FROM src LIMIT 1;</span></span><br><span class="line">  <span class="comment">&#x27;b&#x27;</span></span><br><span class="line"><span class="keyword">Function</span> <span class="keyword">class</span>:org.apache.hadoop.hive.ql.udf.UDFSubstr</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line">Time taken: <span class="number">0.014</span> seconds, Fetched: <span class="number">12</span> row(s)</span><br></pre></td></tr></table></figure>

<p>concat：字符串拼接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended concat;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">concat(str1, str2, ... strN) <span class="operator">-</span> <span class="keyword">returns</span> the concatenation <span class="keyword">of</span> str1, str2, ... strN <span class="keyword">or</span> concat(bin1, bin2, ... binN) <span class="operator">-</span> <span class="keyword">returns</span> the concatenation <span class="keyword">of</span> bytes <span class="keyword">in</span> <span class="type">binary</span> data  bin1, bin2, ... binN</span><br><span class="line"><span class="keyword">Returns</span> <span class="keyword">NULL</span> if <span class="keyword">any</span> argument <span class="keyword">is</span> NULL.</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> concat(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;def&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="string">&#x27;abcdef&#x27;</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFConcat</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.013</span> seconds, Fetched: <span class="number">7</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>concat_ws:上个的高级版</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended concat_ws;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">concat_ws(separator, [string <span class="operator">|</span> <span class="keyword">array</span>(string)]<span class="operator">+</span>) <span class="operator">-</span> <span class="keyword">returns</span> the concatenation <span class="keyword">of</span> the strings separated <span class="keyword">by</span> the separator.</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> concat_ws(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;www&#x27;</span>, <span class="keyword">array</span>(<span class="string">&#x27;facebook&#x27;</span>, <span class="string">&#x27;com&#x27;</span>)) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="string">&#x27;www.facebook.com&#x27;</span></span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFConcatWS</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.013</span> seconds, Fetched: <span class="number">6</span> <span class="type">row</span>(s)</span><br><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>split：字符串分割</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended split;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">split(str, regex) <span class="operator">-</span> Splits str around occurances that <span class="keyword">match</span> regex</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> split(<span class="string">&#x27;oneAtwoBthreeC&#x27;</span>, <span class="string">&#x27;[ABC]&#x27;</span>) <span class="keyword">FROM</span> src LIMIT <span class="number">1</span>;</span><br><span class="line">  [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDFSplit</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.015</span> seconds, Fetched: <span class="number">6</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="json相关的数据处理"><a href="#json相关的数据处理" class="headerlink" title="json相关的数据处理"></a>json相关的数据处理</h2><p>get_json_object</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)&gt; desc <span class="keyword">function</span> extended get_json_object;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">get_json_object(json_txt, path) - Extract a json <span class="type">object</span> <span class="keyword">from</span> path </span><br><span class="line">Extract json <span class="type">object</span> <span class="keyword">from</span> a json <span class="type">string</span> based <span class="keyword">on</span> json path specified, <span class="built_in">and</span> <span class="keyword">return</span> json <span class="type">string</span> <span class="keyword">of</span> the extracted json <span class="type">object</span>. It will <span class="keyword">return</span> null <span class="keyword">if</span> the input json <span class="type">string</span> <span class="built_in">is</span> invalid.</span><br><span class="line">A limited version <span class="keyword">of</span> JSONPath supported:</span><br><span class="line">  $   : Root <span class="type">object</span></span><br><span class="line">  .   : Child <span class="keyword">operator</span></span><br><span class="line">  []  : Subscript <span class="keyword">operator</span> <span class="keyword">for</span> array</span><br><span class="line">  *   : Wildcard <span class="keyword">for</span> []</span><br><span class="line">Syntax <span class="built_in">not</span> supported that<span class="comment">&#x27;s worth noticing:</span></span><br><span class="line">  <span class="comment">&#x27;&#x27;  : Zero length string as key</span></span><br><span class="line">  ..  : Recursive descent</span><br><span class="line">  @   : Current <span class="type">object</span>/element</span><br><span class="line">  ()  : Script expression</span><br><span class="line">  ?() : Filter (script) expression.</span><br><span class="line">  [,] : Union <span class="keyword">operator</span></span><br><span class="line">  [start:<span class="keyword">end</span>:<span class="keyword">step</span>] : array slice <span class="keyword">operator</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Function</span> <span class="keyword">class</span>:org.apache.hadoop.hive.ql.udf.UDFJson</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line">Time taken: <span class="number">0.016</span> seconds, Fetched: <span class="number">18</span> row(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>json_tuple:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (<span class="keyword">default</span>)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended json_tuple;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">json_tuple(jsonStr, p1, p2, ..., pn) <span class="operator">-</span> <span class="keyword">like</span> get_json_object, but it takes multiple names <span class="keyword">and</span> <span class="keyword">return</span> a tuple. <span class="keyword">All</span> the input parameters <span class="keyword">and</span> output <span class="keyword">column</span> types <span class="keyword">are</span> string.</span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDTFJSONTuple</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.014</span> seconds, Fetched: <span class="number">3</span> <span class="type">row</span>(s)</span><br><span class="line"><span class="comment">----------------------------------------</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>例子：现在我的数据库里有如下数据：</p>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line"><span class="title function_">hive</span> (<span class="variable">bigdata_hive3</span>)<span class="operator">&gt;</span> <span class="variable">select</span> <span class="operator">*</span> <span class="variable">from</span> <span class="variable">skill</span> <span class="variable">limit</span> <span class="number">10</span>;</span><br><span class="line"><span class="variable">OK</span></span><br><span class="line"><span class="variable">skill</span>.<span class="property">json</span></span><br><span class="line">[</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    &#123; <span class="string">&quot;id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;animationId&quot;</span>: <span class="number">1</span>, <span class="string">&quot;damage&quot;</span>: &#123; <span class="string">&quot;critical&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;elementId&quot;</span>: <span class="number">-1</span>, <span class="string">&quot;formula&quot;</span>: <span class="string">&quot;a.atk * 4 - b.def * 2&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="number">1</span>, <span class="string">&quot;variance&quot;</span>: <span class="number">20</span> &#125;, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;effects&quot;</span>: [&#123; <span class="string">&quot;code&quot;</span>: <span class="number">21</span>, <span class="string">&quot;dataId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;value1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;value2&quot;</span>: <span class="number">0</span> &#125;], <span class="string">&quot;hitType&quot;</span>: <span class="number">1</span>, <span class="string">&quot;iconIndex&quot;</span>: <span class="number">880</span>, <span class="string">&quot;message1&quot;</span>: <span class="string">&quot;%1的攻击！&quot;</span>, <span class="string">&quot;message2&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;mpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;攻击&quot;</span>, <span class="string">&quot;note&quot;</span>: <span class="string">&quot;1 号技能会在选择“攻击”指令时使用。<span class="char escape_">\n</span><span class="char escape_">\n</span>&lt;setup action&gt;<span class="char escape_">\n</span>display action<span class="char escape_">\n</span>immortal: targets, true<span class="char escape_">\n</span>&lt;/setup action&gt;<span class="char escape_">\n</span><span class="char escape_">\n</span>&lt;target action&gt;<span class="char escape_">\n</span>if user.attackMotion() !== &#x27;missile&#x27;<span class="char escape_">\n</span>move user: targets, front, 20<span class="char escape_">\n</span>else<span class="char escape_">\n</span>perform start<span class="char escape_">\n</span>end<span class="char escape_">\n</span>wait for movement<span class="char escape_">\n</span>motion attack: user<span class="char escape_">\n</span><span class="char escape_">\n</span>attack animation: target<span class="char escape_">\n</span>wait for animation<span class="char escape_">\n</span>action effect<span class="char escape_">\n</span>&lt;/target action&gt;&quot;</span>, <span class="string">&quot;occasion&quot;</span>: <span class="number">1</span>, <span class="string">&quot;repeats&quot;</span>: <span class="number">1</span>, <span class="string">&quot;requiredWtypeId1&quot;</span>: <span class="number">0</span>, <span class="string">&quot;requiredWtypeId2&quot;</span>: <span class="number">0</span>, <span class="string">&quot;scope&quot;</span>: <span class="number">1</span>, <span class="string">&quot;speed&quot;</span>: <span class="number">0</span>, <span class="string">&quot;stypeId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;successRate&quot;</span>: <span class="number">100</span>, <span class="string">&quot;tpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;tpGain&quot;</span>: <span class="number">10</span>, <span class="string">&quot;messageType&quot;</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;id&quot;</span>: <span class="number">2</span>, <span class="string">&quot;animationId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;damage&quot;</span>: &#123; <span class="string">&quot;critical&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;elementId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;formula&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="number">0</span>, <span class="string">&quot;variance&quot;</span>: <span class="number">20</span> &#125;, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;effects&quot;</span>: [&#123; <span class="string">&quot;code&quot;</span>: <span class="number">21</span>, <span class="string">&quot;dataId&quot;</span>: <span class="number">2</span>, <span class="string">&quot;value1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;value2&quot;</span>: <span class="number">0</span> &#125;], <span class="string">&quot;hitType&quot;</span>: <span class="number">0</span>, <span class="string">&quot;iconIndex&quot;</span>: <span class="number">688</span>, <span class="string">&quot;message1&quot;</span>: <span class="string">&quot;%1正在保护自己。&quot;</span>, <span class="string">&quot;message2&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;mpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;防御&quot;</span>, <span class="string">&quot;note&quot;</span>: <span class="string">&quot;1 号技能会在选择“防御”指令时使用。&quot;</span>, <span class="string">&quot;occasion&quot;</span>: <span class="number">1</span>, <span class="string">&quot;repeats&quot;</span>: <span class="number">1</span>, <span class="string">&quot;requiredWtypeId1&quot;</span>: <span class="number">0</span>, <span class="string">&quot;requiredWtypeId2&quot;</span>: <span class="number">0</span>, <span class="string">&quot;scope&quot;</span>: <span class="number">11</span>, <span class="string">&quot;speed&quot;</span>: <span class="number">10</span>, <span class="string">&quot;stypeId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;successRate&quot;</span>: <span class="number">100</span>, <span class="string">&quot;tpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;tpGain&quot;</span>: <span class="number">10</span>, <span class="string">&quot;messageType&quot;</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;id&quot;</span>: <span class="number">3</span>, <span class="string">&quot;animationId&quot;</span>: <span class="number">-1</span>, <span class="string">&quot;damage&quot;</span>: &#123; <span class="string">&quot;critical&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;elementId&quot;</span>: <span class="number">-1</span>, <span class="string">&quot;formula&quot;</span>: <span class="string">&quot;a.atk * 4 - b.def * 2&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="number">1</span>, <span class="string">&quot;variance&quot;</span>: <span class="number">20</span> &#125;, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;effects&quot;</span>: [&#123; <span class="string">&quot;code&quot;</span>: <span class="number">21</span>, <span class="string">&quot;dataId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;value1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;value2&quot;</span>: <span class="number">0</span> &#125;], <span class="string">&quot;hitType&quot;</span>: <span class="number">1</span>, <span class="string">&quot;iconIndex&quot;</span>: <span class="number">880</span>, <span class="string">&quot;message1&quot;</span>: <span class="string">&quot;%1的攻击！&quot;</span>, <span class="string">&quot;message2&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;mpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;连续攻击&quot;</span>, <span class="string">&quot;note&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;occasion&quot;</span>: <span class="number">1</span>, <span class="string">&quot;repeats&quot;</span>: <span class="number">2</span>, <span class="string">&quot;requiredWtypeId1&quot;</span>: <span class="number">0</span>, <span class="string">&quot;requiredWtypeId2&quot;</span>: <span class="number">0</span>, <span class="string">&quot;scope&quot;</span>: <span class="number">1</span>, <span class="string">&quot;speed&quot;</span>: <span class="number">0</span>, <span class="string">&quot;stypeId&quot;</span>: <span class="number">2</span>, <span class="string">&quot;successRate&quot;</span>: <span class="number">100</span>, <span class="string">&quot;tpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;tpGain&quot;</span>: <span class="number">5</span>, <span class="string">&quot;messageType&quot;</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;id&quot;</span>: <span class="number">4</span>, <span class="string">&quot;animationId&quot;</span>: <span class="number">-1</span>, <span class="string">&quot;damage&quot;</span>: &#123; <span class="string">&quot;critical&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;elementId&quot;</span>: <span class="number">-1</span>, <span class="string">&quot;formula&quot;</span>: <span class="string">&quot;a.atk * 4 - b.def * 2&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="number">1</span>, <span class="string">&quot;variance&quot;</span>: <span class="number">20</span> &#125;, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;effects&quot;</span>: [&#123; <span class="string">&quot;code&quot;</span>: <span class="number">21</span>, <span class="string">&quot;dataId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;value1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;value2&quot;</span>: <span class="number">0</span> &#125;], <span class="string">&quot;hitType&quot;</span>: <span class="number">1</span>, <span class="string">&quot;iconIndex&quot;</span>: <span class="number">880</span>, <span class="string">&quot;message1&quot;</span>: <span class="string">&quot;%1的攻击！&quot;</span>, <span class="string">&quot;message2&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;mpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;两次攻击&quot;</span>, <span class="string">&quot;note&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;occasion&quot;</span>: <span class="number">1</span>, <span class="string">&quot;repeats&quot;</span>: <span class="number">1</span>, <span class="string">&quot;requiredWtypeId1&quot;</span>: <span class="number">0</span>, <span class="string">&quot;requiredWtypeId2&quot;</span>: <span class="number">0</span>, <span class="string">&quot;scope&quot;</span>: <span class="number">4</span>, <span class="string">&quot;speed&quot;</span>: <span class="number">0</span>, <span class="string">&quot;stypeId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;successRate&quot;</span>: <span class="number">100</span>, <span class="string">&quot;tpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;tpGain&quot;</span>: <span class="number">5</span>, <span class="string">&quot;messageType&quot;</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;id&quot;</span>: <span class="number">5</span>, <span class="string">&quot;animationId&quot;</span>: <span class="number">-1</span>, <span class="string">&quot;damage&quot;</span>: &#123; <span class="string">&quot;critical&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;elementId&quot;</span>: <span class="number">-1</span>, <span class="string">&quot;formula&quot;</span>: <span class="string">&quot;a.atk * 4 - b.def * 2&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="number">1</span>, <span class="string">&quot;variance&quot;</span>: <span class="number">20</span> &#125;, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;effects&quot;</span>: [&#123; <span class="string">&quot;code&quot;</span>: <span class="number">21</span>, <span class="string">&quot;dataId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;value1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;value2&quot;</span>: <span class="number">0</span> &#125;], <span class="string">&quot;hitType&quot;</span>: <span class="number">1</span>, <span class="string">&quot;iconIndex&quot;</span>: <span class="number">849</span>, <span class="string">&quot;message1&quot;</span>: <span class="string">&quot;%1的攻击！&quot;</span>, <span class="string">&quot;message2&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;mpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;三次攻击&quot;</span>, <span class="string">&quot;note&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;occasion&quot;</span>: <span class="number">1</span>, <span class="string">&quot;repeats&quot;</span>: <span class="number">1</span>, <span class="string">&quot;requiredWtypeId1&quot;</span>: <span class="number">0</span>, <span class="string">&quot;requiredWtypeId2&quot;</span>: <span class="number">0</span>, <span class="string">&quot;scope&quot;</span>: <span class="number">5</span>, <span class="string">&quot;speed&quot;</span>: <span class="number">0</span>, <span class="string">&quot;stypeId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;successRate&quot;</span>: <span class="number">100</span>, <span class="string">&quot;tpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;tpGain&quot;</span>: <span class="number">4</span>, <span class="string">&quot;messageType&quot;</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;id&quot;</span>: <span class="number">6</span>, <span class="string">&quot;animationId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;damage&quot;</span>: &#123; <span class="string">&quot;critical&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;elementId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;formula&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="number">0</span>, <span class="string">&quot;variance&quot;</span>: <span class="number">20</span> &#125;, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;effects&quot;</span>: [&#123; <span class="string">&quot;code&quot;</span>: <span class="number">41</span>, <span class="string">&quot;dataId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;value1&quot;</span>: <span class="number">0</span>, <span class="string">&quot;value2&quot;</span>: <span class="number">0</span> &#125;], <span class="string">&quot;hitType&quot;</span>: <span class="number">0</span>, <span class="string">&quot;iconIndex&quot;</span>: <span class="number">883</span>, <span class="string">&quot;message1&quot;</span>: <span class="string">&quot;%1逃跑了。&quot;</span>, <span class="string">&quot;message2&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;mpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;逃跑&quot;</span>, <span class="string">&quot;note&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;occasion&quot;</span>: <span class="number">1</span>, <span class="string">&quot;repeats&quot;</span>: <span class="number">1</span>, <span class="string">&quot;requiredWtypeId1&quot;</span>: <span class="number">0</span>, <span class="string">&quot;requiredWtypeId2&quot;</span>: <span class="number">0</span>, <span class="string">&quot;scope&quot;</span>: <span class="number">11</span>, <span class="string">&quot;speed&quot;</span>: <span class="number">0</span>, <span class="string">&quot;stypeId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;successRate&quot;</span>: <span class="number">100</span>, <span class="string">&quot;tpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;tpGain&quot;</span>: <span class="number">0</span>, <span class="string">&quot;messageType&quot;</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;id&quot;</span>: <span class="number">7</span>, <span class="string">&quot;animationId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;damage&quot;</span>: &#123; <span class="string">&quot;critical&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;elementId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;formula&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="number">0</span>, <span class="string">&quot;variance&quot;</span>: <span class="number">20</span> &#125;, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;effects&quot;</span>: [], <span class="string">&quot;hitType&quot;</span>: <span class="number">0</span>, <span class="string">&quot;iconIndex&quot;</span>: <span class="number">979</span>, <span class="string">&quot;message1&quot;</span>: <span class="string">&quot;%1正在观望。&quot;</span>, <span class="string">&quot;message2&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;mpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;观望&quot;</span>, <span class="string">&quot;note&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;occasion&quot;</span>: <span class="number">1</span>, <span class="string">&quot;repeats&quot;</span>: <span class="number">1</span>, <span class="string">&quot;requiredWtypeId1&quot;</span>: <span class="number">0</span>, <span class="string">&quot;requiredWtypeId2&quot;</span>: <span class="number">0</span>, <span class="string">&quot;scope&quot;</span>: <span class="number">0</span>, <span class="string">&quot;speed&quot;</span>: <span class="number">0</span>, <span class="string">&quot;stypeId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;successRate&quot;</span>: <span class="number">100</span>, <span class="string">&quot;tpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;tpGain&quot;</span>: <span class="number">10</span>, <span class="string">&quot;messageType&quot;</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="string">&quot;id&quot;</span>: <span class="number">8</span>, <span class="string">&quot;animationId&quot;</span>: <span class="number">41</span>, <span class="string">&quot;damage&quot;</span>: &#123; <span class="string">&quot;critical&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;elementId&quot;</span>: <span class="number">0</span>, <span class="string">&quot;formula&quot;</span>: <span class="string">&quot;200 + a.mat&quot;</span>, <span class="string">&quot;type&quot;</span>: <span class="number">3</span>, <span class="string">&quot;variance&quot;</span>: <span class="number">20</span> &#125;, <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;effects&quot;</span>: [&#123; <span class="string">&quot;code&quot;</span>: <span class="number">21</span>, <span class="string">&quot;dataId&quot;</span>: <span class="number">4</span>, <span class="string">&quot;value1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;value2&quot;</span>: <span class="number">0</span> &#125;, &#123; <span class="string">&quot;code&quot;</span>: <span class="number">21</span>, <span class="string">&quot;dataId&quot;</span>: <span class="number">7</span>, <span class="string">&quot;value1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;value2&quot;</span>: <span class="number">0</span> &#125;, &#123; <span class="string">&quot;code&quot;</span>: <span class="number">21</span>, <span class="string">&quot;dataId&quot;</span>: <span class="number">8</span>, <span class="string">&quot;value1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;value2&quot;</span>: <span class="number">0</span> &#125;, &#123; <span class="string">&quot;code&quot;</span>: <span class="number">21</span>, <span class="string">&quot;dataId&quot;</span>: <span class="number">8</span>, <span class="string">&quot;value1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;value2&quot;</span>: <span class="number">0</span> &#125;, &#123; <span class="string">&quot;code&quot;</span>: <span class="number">21</span>, <span class="string">&quot;dataId&quot;</span>: <span class="number">6</span>, <span class="string">&quot;value1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;value2&quot;</span>: <span class="number">0</span> &#125;], <span class="string">&quot;hitType&quot;</span>: <span class="number">0</span>, <span class="string">&quot;iconIndex&quot;</span>: <span class="number">72</span>, <span class="string">&quot;message1&quot;</span>: <span class="string">&quot;%1吟唱了%2！&quot;</span>, <span class="string">&quot;message2&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;mpCost&quot;</span>: <span class="number">5</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;治愈&quot;</span>, <span class="string">&quot;note&quot;</span>: <span class="string">&quot;&quot;</span>, <span class="string">&quot;occasion&quot;</span>: <span class="number">0</span>, <span class="string">&quot;repeats&quot;</span>: <span class="number">1</span>, <span class="string">&quot;requiredWtypeId1&quot;</span>: <span class="number">0</span>, <span class="string">&quot;requiredWtypeId2&quot;</span>: <span class="number">0</span>, <span class="string">&quot;scope&quot;</span>: <span class="number">1</span>, <span class="string">&quot;speed&quot;</span>: <span class="number">0</span>, <span class="string">&quot;stypeId&quot;</span>: <span class="number">1</span>, <span class="string">&quot;successRate&quot;</span>: <span class="number">100</span>, <span class="string">&quot;tpCost&quot;</span>: <span class="number">0</span>, <span class="string">&quot;tpGain&quot;</span>: <span class="number">10</span>, <span class="string">&quot;messageType&quot;</span>: <span class="number">1</span> &#125;,</span><br><span class="line"><span class="title class_">Time</span> <span class="variable">taken</span>: <span class="number">0.103</span> <span class="variable">seconds</span>, <span class="title class_">Fetched</span>: <span class="number">10</span> <span class="title function_">row</span>(<span class="variable">s</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后我们通过json_tuple来解析它</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hive (bigdata_hive3)&gt; <span class="keyword">select</span> json_tuple(<span class="type">json</span> , <span class="string">&#x27;id&#x27;</span> , <span class="string">&#x27;animationId&#x27;</span> , <span class="string">&#x27;damage&#x27;</span>,<span class="string">&#x27;description&#x27;</span>,<span class="string">&#x27;effects&#x27;</span>,<span class="string">&#x27;hitType&#x27;</span>,<span class="string">&#x27;iconIndex&#x27;</span>,<span class="string">&#x27;message1&#x27;</span>,<span class="string">&#x27;message2&#x27;</span>,<span class="string">&#x27;mpCost&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;note&#x27;</span>,<span class="string">&#x27;occasion&#x27;</span>,<span class="string">&#x27;repeats&#x27;</span>,<span class="string">&#x27;requiredWtypeId1&#x27;</span>,<span class="string">&#x27;requiredWtypeId2&#x27;</span>,<span class="string">&#x27;scope&#x27;</span>,<span class="string">&#x27;speed&#x27;</span>,<span class="string">&#x27;stypeId&#x27;</span>,<span class="string">&#x27;successRate&#x27;</span>,<span class="string">&#x27;tpCost&#x27;</span>,<span class="string">&#x27;tpGain&#x27;</span>,<span class="string">&#x27;messageType&#x27;</span>) <span class="keyword">from</span> skill <span class="keyword">limit</span> <span class="number">10</span> ;</span><br><span class="line">OK</span><br><span class="line">c0	c1	c2	c3	c4	c5	c6	c7	c8	c9	c10	c11	c12	c13	c14	c15	c16	c17	c18	c19	c20	c21	c22</span><br><span class="line"><span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span></span><br><span class="line"><span class="number">1</span>	<span class="number">1</span>	&#123;&quot;critical&quot;:<span class="keyword">true</span>,&quot;elementId&quot;:<span class="number">-1</span>,&quot;formula&quot;:&quot;a.atk * 4 - b.def * 2&quot;,&quot;type&quot;:<span class="number">1</span>,&quot;variance&quot;:<span class="number">20</span>&#125;		[&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">0</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;]	<span class="number">1</span>	<span class="number">880</span>	%<span class="number">1</span>的攻击！		<span class="number">0</span>攻击	<span class="number">1</span> 号技能会在选择“攻击”指令时使用。</span><br><span class="line"></span><br><span class="line">&lt;setup action&gt;</span><br><span class="line">display action</span><br><span class="line">immortal: targets, <span class="keyword">true</span></span><br><span class="line">&lt;/setup action&gt;</span><br><span class="line"></span><br><span class="line">&lt;target action&gt;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">user</span>.attackMotion() !== <span class="string">&#x27;missile&#x27;</span></span><br><span class="line"><span class="keyword">move</span> <span class="keyword">user</span>: targets, front, <span class="number">20</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">perform</span> <span class="keyword">start</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">wait <span class="keyword">for</span> movement</span><br><span class="line">motion attack: <span class="keyword">user</span></span><br><span class="line"></span><br><span class="line">attack animation: target</span><br><span class="line">wait <span class="keyword">for</span> animation</span><br><span class="line">action effect</span><br><span class="line">&lt;/target action&gt;	<span class="number">1</span>	<span class="number">1</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">1</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">100</span>	<span class="number">0</span>	<span class="number">10</span>	<span class="number">1</span></span><br><span class="line"><span class="number">2</span>	<span class="number">0</span>	&#123;&quot;critical&quot;:<span class="keyword">false</span>,&quot;elementId&quot;:<span class="number">0</span>,&quot;formula&quot;:&quot;0&quot;,&quot;type&quot;:<span class="number">0</span>,&quot;variance&quot;:<span class="number">20</span>&#125;		[&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">2</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;]	<span class="number">0</span>	<span class="number">688</span>	%<span class="number">1</span>正在保护自己。		<span class="number">0</span>	防御	<span class="number">1</span> 号技能会在选择“防御”指令时使用。	<span class="number">1</span>	<span class="number">1</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">11</span>	<span class="number">10</span>	<span class="number">0</span>	<span class="number">100</span>	<span class="number">0</span>	<span class="number">10</span>	<span class="number">1</span></span><br><span class="line"><span class="number">3</span>	<span class="number">-1</span>	&#123;&quot;critical&quot;:<span class="keyword">true</span>,&quot;elementId&quot;:<span class="number">-1</span>,&quot;formula&quot;:&quot;a.atk * 4 - b.def * 2&quot;,&quot;type&quot;:<span class="number">1</span>,&quot;variance&quot;:<span class="number">20</span>&#125;		[&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">0</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;]	<span class="number">1</span>	<span class="number">880</span>	%<span class="number">1</span>的攻击！		<span class="number">0</span>连续攻击		<span class="number">1</span>	<span class="number">2</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">1</span>	<span class="number">0</span>	<span class="number">2</span>	<span class="number">100</span>	<span class="number">0</span>	<span class="number">5</span>	<span class="number">1</span></span><br><span class="line"><span class="number">4</span>	<span class="number">-1</span>	&#123;&quot;critical&quot;:<span class="keyword">true</span>,&quot;elementId&quot;:<span class="number">-1</span>,&quot;formula&quot;:&quot;a.atk * 4 - b.def * 2&quot;,&quot;type&quot;:<span class="number">1</span>,&quot;variance&quot;:<span class="number">20</span>&#125;		[&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">0</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;]	<span class="number">1</span>	<span class="number">880</span>	%<span class="number">1</span>的攻击！		<span class="number">0</span>两次攻击		<span class="number">1</span>	<span class="number">1</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">4</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">100</span>	<span class="number">0</span>	<span class="number">5</span>	<span class="number">1</span></span><br><span class="line"><span class="number">5</span>	<span class="number">-1</span>	&#123;&quot;critical&quot;:<span class="keyword">true</span>,&quot;elementId&quot;:<span class="number">-1</span>,&quot;formula&quot;:&quot;a.atk * 4 - b.def * 2&quot;,&quot;type&quot;:<span class="number">1</span>,&quot;variance&quot;:<span class="number">20</span>&#125;		[&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">0</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;]	<span class="number">1</span>	<span class="number">849</span>	%<span class="number">1</span>的攻击！		<span class="number">0</span>三次攻击		<span class="number">1</span>	<span class="number">1</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">5</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">100</span>	<span class="number">0</span>	<span class="number">4</span>	<span class="number">1</span></span><br><span class="line"><span class="number">6</span>	<span class="number">0</span>	&#123;&quot;critical&quot;:<span class="keyword">false</span>,&quot;elementId&quot;:<span class="number">0</span>,&quot;formula&quot;:&quot;0&quot;,&quot;type&quot;:<span class="number">0</span>,&quot;variance&quot;:<span class="number">20</span>&#125;		[&#123;&quot;code&quot;:<span class="number">41</span>,&quot;dataId&quot;:<span class="number">0</span>,&quot;value1&quot;:<span class="number">0</span>,&quot;value2&quot;:<span class="number">0</span>&#125;]	<span class="number">0</span>	<span class="number">883</span>	%<span class="number">1</span>逃跑了。		<span class="number">0</span>	逃跑		<span class="number">11</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">100</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">1</span></span><br><span class="line"><span class="number">7</span>	<span class="number">0</span>	&#123;&quot;critical&quot;:<span class="keyword">false</span>,&quot;elementId&quot;:<span class="number">0</span>,&quot;formula&quot;:&quot;0&quot;,&quot;type&quot;:<span class="number">0</span>,&quot;variance&quot;:<span class="number">20</span>&#125;		[]	<span class="number">0</span>	<span class="number">979</span>	%<span class="number">1</span>正在观望。		<span class="number">0</span>	观望		<span class="number">1</span>	<span class="number">1</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">100</span>	<span class="number">0</span>	<span class="number">10</span>	<span class="number">1</span></span><br><span class="line"><span class="number">8</span>	<span class="number">41</span>	&#123;&quot;critical&quot;:<span class="keyword">false</span>,&quot;elementId&quot;:<span class="number">0</span>,&quot;formula&quot;:&quot;200 + a.mat&quot;,&quot;type&quot;:<span class="number">3</span>,&quot;variance&quot;:<span class="number">20</span>&#125;		[&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">4</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;,&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">7</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;,&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">8</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;,&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">8</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;,&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">6</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;]	<span class="number">0</span>	<span class="number">72</span>	%<span class="number">1</span>吟唱了%<span class="number">2</span>！		<span class="number">5</span>	治愈		<span class="number">0</span>	<span class="number">1</span>	<span class="number">100</span>	<span class="number">0</span>	<span class="number">10</span>	<span class="number">1</span></span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.129</span> seconds, Fetched: <span class="number">10</span> <span class="keyword">row</span>(s)</span><br><span class="line"><span class="comment">----------------------------------------------------------------这样是因为数据太多了，我们简单筛选出来几条数据如下</span></span><br><span class="line">hive (bigdata_hive3)&gt; <span class="keyword">select</span> json_tuple(<span class="type">json</span> , <span class="string">&#x27;id&#x27;</span> , <span class="string">&#x27;animationId&#x27;</span> , <span class="string">&#x27;damage&#x27;</span>) <span class="keyword">from</span> skill <span class="keyword">limit</span> <span class="number">10</span> ;</span><br><span class="line">OK</span><br><span class="line">c0	c1	c2</span><br><span class="line"><span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">NULL</span>	<span class="keyword">NULL</span>	<span class="keyword">NULL</span></span><br><span class="line"><span class="number">1</span>	<span class="number">1</span>	&#123;&quot;critical&quot;:<span class="keyword">true</span>,&quot;elementId&quot;:<span class="number">-1</span>,&quot;formula&quot;:&quot;a.atk * 4 - b.def * 2&quot;,&quot;type&quot;:<span class="number">1</span>,&quot;variance&quot;:<span class="number">20</span>&#125;</span><br><span class="line"><span class="number">2</span>	<span class="number">0</span>	&#123;&quot;critical&quot;:<span class="keyword">false</span>,&quot;elementId&quot;:<span class="number">0</span>,&quot;formula&quot;:&quot;0&quot;,&quot;type&quot;:<span class="number">0</span>,&quot;variance&quot;:<span class="number">20</span>&#125;</span><br><span class="line"><span class="number">3</span>	<span class="number">-1</span>	&#123;&quot;critical&quot;:<span class="keyword">true</span>,&quot;elementId&quot;:<span class="number">-1</span>,&quot;formula&quot;:&quot;a.atk * 4 - b.def * 2&quot;,&quot;type&quot;:<span class="number">1</span>,&quot;variance&quot;:<span class="number">20</span>&#125;</span><br><span class="line"><span class="number">4</span>	<span class="number">-1</span>	&#123;&quot;critical&quot;:<span class="keyword">true</span>,&quot;elementId&quot;:<span class="number">-1</span>,&quot;formula&quot;:&quot;a.atk * 4 - b.def * 2&quot;,&quot;type&quot;:<span class="number">1</span>,&quot;variance&quot;:<span class="number">20</span>&#125;</span><br><span class="line"><span class="number">5</span>	<span class="number">-1</span>	&#123;&quot;critical&quot;:<span class="keyword">true</span>,&quot;elementId&quot;:<span class="number">-1</span>,&quot;formula&quot;:&quot;a.atk * 4 - b.def * 2&quot;,&quot;type&quot;:<span class="number">1</span>,&quot;variance&quot;:<span class="number">20</span>&#125;</span><br><span class="line"><span class="number">6</span>	<span class="number">0</span>	&#123;&quot;critical&quot;:<span class="keyword">false</span>,&quot;elementId&quot;:<span class="number">0</span>,&quot;formula&quot;:&quot;0&quot;,&quot;type&quot;:<span class="number">0</span>,&quot;variance&quot;:<span class="number">20</span>&#125;</span><br><span class="line"><span class="number">7</span>	<span class="number">0</span>	&#123;&quot;critical&quot;:<span class="keyword">false</span>,&quot;elementId&quot;:<span class="number">0</span>,&quot;formula&quot;:&quot;0&quot;,&quot;type&quot;:<span class="number">0</span>,&quot;variance&quot;:<span class="number">20</span>&#125;</span><br><span class="line"><span class="number">8</span>	<span class="number">41</span>	&#123;&quot;critical&quot;:<span class="keyword">false</span>,&quot;elementId&quot;:<span class="number">0</span>,&quot;formula&quot;:&quot;200 + a.mat&quot;,&quot;type&quot;:<span class="number">3</span>,&quot;variance&quot;:<span class="number">20</span>&#125;</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.11</span> seconds, Fetched: <span class="number">10</span> <span class="keyword">row</span>(s)</span><br><span class="line"><span class="comment">----------------------------------------------------------------------对于嵌套的json，就是上面的[&#123;&quot;code&quot;:21,&quot;dataId&quot;:4,&quot;value1&quot;:1,&quot;value2&quot;:0&#125;,&#123;&quot;code&quot;:21,&quot;dataId&quot;:7,&quot;value1&quot;:1,&quot;value2&quot;:0&#125;,&#123;&quot;code&quot;:21,&quot;dataId&quot;:8,&quot;value1&quot;:1,&quot;value2&quot;:0&#125;,&#123;&quot;code&quot;:21,&quot;dataId&quot;:8,&quot;value1&quot;:1,&quot;value2&quot;:0&#125;,&#123;&quot;code&quot;:21,&quot;dataId&quot;:6,&quot;value1&quot;:1,&quot;value2&quot;:0&#125;]这种数据用下面的方法 通过get_json_object</span></span><br><span class="line"></span><br><span class="line">hive (bigdata_hive3)&gt; <span class="keyword">select</span> get_json_object(<span class="type">json</span> , <span class="string">&#x27;$.effects[0]&#x27;</span>) <span class="keyword">from</span> skill <span class="keyword">limit</span> <span class="number">10</span>;</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line"><span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">NULL</span></span><br><span class="line">&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">0</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;</span><br><span class="line">&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">2</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;</span><br><span class="line">&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">0</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;</span><br><span class="line">&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">0</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;</span><br><span class="line">&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">0</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;</span><br><span class="line">&#123;&quot;code&quot;:<span class="number">41</span>,&quot;dataId&quot;:<span class="number">0</span>,&quot;value1&quot;:<span class="number">0</span>,&quot;value2&quot;:<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">NULL</span></span><br><span class="line">&#123;&quot;code&quot;:<span class="number">21</span>,&quot;dataId&quot;:<span class="number">4</span>,&quot;value1&quot;:<span class="number">1</span>,&quot;value2&quot;:<span class="number">0</span>&#125;</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.103</span> seconds, Fetched: <span class="number">10</span> <span class="keyword">row</span>(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>parse_url_tuple:解析url可能会用到&#x3D;》这个是单纯对url解析</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">hive (bigdata_hive3)<span class="operator">&gt;</span> <span class="keyword">desc</span> <span class="keyword">function</span> extended parse_url_tuple;</span><br><span class="line">OK</span><br><span class="line">tab_name</span><br><span class="line">parse_url_tuple(url, partname1, partname2, ..., partnameN) <span class="operator">-</span> extracts N (N<span class="operator">&gt;=</span><span class="number">1</span>) parts <span class="keyword">from</span> a URL.</span><br><span class="line">It takes a URL <span class="keyword">and</span> <span class="keyword">one</span> <span class="keyword">or</span> multiple partnames, <span class="keyword">and</span> <span class="keyword">returns</span> a tuple. <span class="keyword">All</span> the input parameters <span class="keyword">and</span> output <span class="keyword">column</span> types <span class="keyword">are</span> string.</span><br><span class="line">Partname: HOST, PATH, QUERY, <span class="keyword">REF</span>, PROTOCOL, AUTHORITY, FILE, USERINFO, QUERY:<span class="operator">&lt;</span>KEY_NAME<span class="operator">&gt;</span></span><br><span class="line">Note: Partnames <span class="keyword">are</span> <span class="keyword">case</span><span class="operator">-</span><span class="keyword">sensitive</span>, <span class="keyword">and</span> should <span class="keyword">not</span> contain unnecessary white spaces.</span><br><span class="line">Example:</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> b.<span class="operator">*</span> <span class="keyword">FROM</span> src <span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> parse_url_tuple(fullurl, <span class="string">&#x27;HOST&#x27;</span>, <span class="string">&#x27;PATH&#x27;</span>, <span class="string">&#x27;QUERY&#x27;</span>, <span class="string">&#x27;QUERY:id&#x27;</span>) b <span class="keyword">as</span> host, path, query, query_id LIMIT <span class="number">1</span>;</span><br><span class="line">  <span class="operator">&gt;</span> <span class="keyword">SELECT</span> parse_url_tuple(a.fullurl, <span class="string">&#x27;HOST&#x27;</span>, <span class="string">&#x27;PATH&#x27;</span>, <span class="string">&#x27;QUERY&#x27;</span>, <span class="string">&#x27;REF&#x27;</span>, <span class="string">&#x27;PROTOCOL&#x27;</span>, <span class="string">&#x27;FILE&#x27;</span>,  <span class="string">&#x27;AUTHORITY&#x27;</span>, <span class="string">&#x27;USERINFO&#x27;</span>, <span class="string">&#x27;QUERY:k1&#x27;</span>) <span class="keyword">as</span> (ho, pa, qu, re, pr, fi, au, us, qk1) <span class="keyword">from</span> src a;</span><br><span class="line"><span class="keyword">Function</span> class:org.apache.hadoop.hive.ql.udf.generic.GenericUDTFParseUrlTuple</span><br><span class="line"><span class="keyword">Function</span> type:BUILTIN</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.017</span> seconds, Fetched: <span class="number">9</span> <span class="type">row</span>(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="判断类的"><a href="#判断类的" class="headerlink" title="判断类的"></a>判断类的</h2><p>case when &#x2F; if</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">首先随便创建表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_info(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line"><span class="type">name</span> string</span><br><span class="line">)</span><br><span class="line"><span class="keyword">row</span> formatted fields terminated <span class="keyword">by</span> <span class="string">&#x27;,&#x27;</span></span><br><span class="line"><span class="comment">------------------------------数据如下</span></span><br><span class="line"><span class="number">1</span>,zihang</span><br><span class="line"><span class="number">2</span>,zuan</span><br><span class="line"><span class="number">3</span>,zihan</span><br><span class="line"><span class="number">4</span>,shuangxi</span><br><span class="line"><span class="number">4</span>,mengke</span><br><span class="line"><span class="comment">-----------------------------数据筛选</span></span><br><span class="line"><span class="keyword">select</span> <span class="type">name</span> , sum(<span class="keyword">case</span> <span class="keyword">when</span> <span class="type">name</span>=<span class="string">&#x27;zihan&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">from</span> emp_info</span><br><span class="line"><span class="comment">----------------------------if</span></span><br><span class="line"><span class="keyword">select</span> sum(<span class="keyword">if</span>(<span class="type">name</span>=<span class="string">&#x27;sz&#x27;</span>,<span class="number">1</span> ,<span class="number">0</span>))<span class="keyword">from</span> emp_info</span><br></pre></td></tr></table></figure>

<p>udf:</p>
<p>spark ,flink…都有</p>
<p>使用场景：内置函数不可以帮助我们解决问题了</p>
<p>udf的种类：</p>
<ul>
<li><p>udf ：一进一出</p>
<ul>
<li>继承udf类&#x3D;》实现evaLuate&#x3D;》打包上传服务器&#x3D;》<ul>
<li>使用临时函数 &#x3D;&gt;<code>add jar 路径</code>&#x3D;&gt; 创建临时函数 &#x3D; &gt;<code> create function  方法名字 as  &#39; 包名&#39;</code>&#x3D;&gt; 就可以直接使用了，但是临时函数添加的只对当前的session有用，包括add jar  也是临时的</li>
<li>另外一种使用方式  &#x3D;》 把jar包上传到 hive的auxlib下，然后就不用add jar 了&#x3D;》直接创建临时函数就ok&#x3D;》因为hive在启动的时候会有脚本自动add jar</li>
<li>永久函数：一般不建议 &#x3D;》 除非业务稳定udf函数才会不懂，但是会经常改动就没必要了<ul>
<li>永久函数在元数据里是可以找到的</li>
<li><code>create temporary function 方法名字 as &#39;包名&#39; 文件类型 文件的地址（可以在uri上）</code>本地路径会出问题&#x3D;》最好在hdfs上<ul>
<li>文件类型</li>
<li>using jar</li>
<li>File</li>
<li>archive</li>
</ul>
</li>
<li>在mysql中的元数据里面，可以查看Funcs表，里面存放着我们的永久函数</li>
<li>删除 <code>drop function functionname</code>但是元数据可能会有不同步的问题</li>
</ul>
</li>
</ul>
</li>
<li>临时函数用的比较多但是最推荐&#x3D;》 <code>hive -e/f </code></li>
<li><code>hive -i xxxx.sql</code>初始化hive的时候添加的一些依赖还可以和-f联用，在spark里也是<br>例子如下</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hive (bigdata_hive3)&gt; <span class="keyword">add</span> jar /home/hadoop/data/bigdatajava<span class="number">-1.0</span>-<span class="keyword">SNAPSHOT</span>.jar;</span><br><span class="line">Added [/home/hadoop/data/bigdatajava<span class="number">-1.0</span>-<span class="keyword">SNAPSHOT</span>.jar] <span class="keyword">to</span> <span class="keyword">class</span> <span class="type">path</span></span><br><span class="line">Added resources: [/home/hadoop/data/bigdatajava<span class="number">-1.0</span>-<span class="keyword">SNAPSHOT</span>.jar] </span><br><span class="line">hive (bigdata_hive3)&gt; <span class="keyword">create</span> <span class="keyword">temporary</span> <span class="keyword">function</span> hello_udf <span class="keyword">as</span> <span class="string">&#x27;udf.udftest&#x27;</span>;</span><br><span class="line">OK</span><br><span class="line">hive (bigdata_hive3)&gt; <span class="keyword">select</span> hello_udf(<span class="string">&#x27;jjjj&#x27;</span>);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">jjjjhello</span><br><span class="line"><span class="type">Time</span> taken: <span class="number">0.108</span> seconds, Fetched: <span class="number">1</span> <span class="keyword">row</span>(s)</span><br><span class="line"><span class="comment">-----------------------------------------------------------------------------永久函数和这个差不多</span></span><br></pre></td></tr></table></figure></li>
<li><p>udaf：多进一出</p>
</li>
<li><p>udtf：一进多出</p>
</li>
</ul>
<h2 id="调优："><a href="#调优：" class="headerlink" title="调优："></a>调优：</h2><p>模式限制 ：<code>hive.mapred.mode =stricted/unstricted</code>严格模式&#x3D;》一些风险操作不被允许&#x3D;》order by 等 &#x3D;》 原因 order by 做全局排序的时候是一个reduce task的当数据量特别多的时候 可能会卡死</p>
<p>推测式执行：</p>
<ul>
<li>假设 node1 ,node2,node3</li>
<li>机器上运行我们的task</li>
<li>假设node3机器负载不较高&#x3D;》cpu利用率高&#x3D;》mem被别的作业占用</li>
</ul>
<p>思考&#x3D;》task 1 ， task2 很快运行完了&#x3D;》但是因为node3负载高比较慢 &#x3D;》木桶效应 &#x3D;》 短板效应 ：桶中能装多少水是由最短的短板决定的&#x3D;》大数据里task完成的时间是由最慢的task时间决定的</p>
<p>所以很多多大数据框架都有一个机制&#x3D;》推测式执行机制 &#x3D;&gt;解决这个问题&#x3D;&gt;比如node3节点上跑了一定时间，超过了这个一定时间，就会启动推测式执行，就是会在另外一个节点上再启动个一样的task继续执行&#x3D;》启动参数（默认打开的）</p>
<ul>
<li>mapreduce &#x3D;》<ul>
<li>map <code>mapreduce.map.speculative</code></li>
<li>reduce <code>mapreduce.reduce.speculative</code></li>
</ul>
</li>
<li>hive &#x3D;&gt;<ul>
<li><code>hive.mapred.reduce.tasks.speculative.execution</code></li>
</ul>
</li>
</ul>
<p>新的问题：</p>
<p>map端：正常</p>
<p>reduce端： reduce task key 不够分散[skew] &#x3D;&gt; 数据倾斜如何解决？</p>
<h3 id="裁剪：了解"><a href="#裁剪：了解" class="headerlink" title="裁剪：了解"></a>裁剪：了解</h3><p>参数：<code>hive.optimize.cp</code>是不是开启列裁剪默认就是开启&#x3D;》进行列式存储的时候：行式存储则没有用，因为无论如何都全部加载&#x3D;》就是选则列的时候选几列就加载几列，不会像以前一样全加载，在进行筛选自己想要的列</p>
<p>参数 ：<code>hive.optimize.ppd</code>是不是开启了谓词下压&#x3D;》和上面一样节省网络io和磁盘io&#x3D;》减少首次加载的数据量&#x3D;》如果开启，hive的底层会进行优化&#x3D;》针对列式存储的时候如果开启，然后用where会直接定位到那个数据，而行式存储则是会对sql进行优化，让其首次加载的数据量变小</p>
<ul>
<li>谓词：where等条件</li>
<li>下压：数据源头</li>
</ul>
<p>mapreduce和hive进行整合的时候可以进行设置maptask的数量以及reduce task数量</p>
<p>map task 个数 取决于 切片的个数 &#x3D;》文件个数，文件大小，blocksize ， 是不是可以被切分</p>
<p>hive参数 <code>mapreduce.input.fileinputformat.split.minsize</code>和 <code>mapreduce.input.fileinputformat.split.maxsize</code></p>
<p>map task越多越好吗？&#x3D;》并不是&#x3D;》jvm开启耗费资源&#x3D;》所以并部署越多越好</p>
<p>设置reduce task 个数 &#x3D;》 决定了最终的文件的个数 &#x3D;》</p>
<ul>
<li>用户指定 <code>set mapreduce.job.reduce=number</code></li>
<li>用户自己设置参数hive自己算 <code>set hive.exec.reducers.bytes.per.reduce</code>&#x3D;&gt;每个reduce处理的数据量 <code>set hive.exec.reduces.max</code> &#x3D;&gt;reduce task最多有多少个</li>
</ul>
<p>reduce数量设置按照作业复杂度进行判断</p>
<p>hive 小文件合并问题？<br>为什么说hdfs不适合处理&#x2F;存储小文件？</p>
<p>存储角度&#x3D;》nn压力</p>
<p>处理角度：一个小文件一个reduce task</p>
<p>如何处理小文件？</p>
<p>hdfs api 处理 &#x3D;&gt; 行式存储 &#x3D;》</p>
<p>hive 里 合并 DDL &#x3D;》rc 或者orc文件形式存储 &#x3D;》 Alter table&#x2F;Partition Concatenate &#x3D;》走mr</p>
<p>hive可以mr1-》mr2-》mr3 explain可以查看</p>
<p>hive ：sql &#x3D;》mr sql的复杂度不一样 &#x3D;》 翻译成 mr的个数以及依赖都不一样</p>
<p>执行计划：</p>
<p>查看sql计划</p>
<ul>
<li>sql的语法树：现在没了</li>
<li>sql的依赖stage</li>
<li>以及mr的数量</li>
</ul>
<p>就是在要执行的sql语句前面加上explain</p>
<p>并行执行即sql可以转换成多个mr 的job执行这些job可能是串行执行，也可能是并行执行</p>
<p>假如sql &#x3D;》 4个job</p>
<p>1，2，3无依赖关系，那么他可以并行跑（资源足够的情况下） &#x3D;》 减少时间&#x3D;》参数 ：<code>hive.exec.parallel</code>&#x3D;》<code>hive.exec.parallel.thread.number</code>允许并行的数量</p>
<p>比如 ： emp e leftjoin depton on xxx</p>
<p>就关联之前是可以并行跑的，可以减少时间</p>
<h2 id="数据倾斜"><a href="#数据倾斜" class="headerlink" title="数据倾斜"></a>数据倾斜</h2><p>wc为例：</p>
<p>map：输出（word ，1）</p>
<p>shuffle ： 按照分区规则，对map端进行数据的重新分发</p>
<p>reduce ： 对shuffle的数据进行处理</p>
<p>但是&#x3D;》当reduce的数据量严重倾斜的时候 会导致&#x3D;》</p>
<ul>
<li>能跑完，但是会特别慢</li>
<li>跑不完，会卡死</li>
</ul>
<p>由于某一个或者某几个key对应的数据量特别大，从而导致对应的task处理非常慢，或者卡死&#x3D;》导致的原因shuffle再分配导致的</p>
<p>走shuffle的</p>
<ul>
<li>join</li>
<li>group by</li>
<li>count</li>
<li>distinct</li>
</ul>
<p>解决 ： 思想-》先打散再聚合</p>
<p>group by 导致的 &#x3D;&gt; map 输出的一些key数据量过大从而导致数据倾斜</p>
<p>通过参数&#x3D;》</p>
<p><code>hive.groupby.skewindata</code>当出现数据倾斜的时候我们hive会自动对我们的group by 进行优化</p>
<p><code>hive.map.aggr</code>map端开启了一个聚合</p>
<p>不通过参数&#x3D;》udf &#x3D;》 相当于先把我们的数据打散之后，对数据进行更改，原来经过shuffle都到一个reduce上，现在，你把数据的匹配规则改一下，让原本10亿的a变成2亿的1_a,2亿的2_a等等，通过上述，把数量，或者操作做完了，然后再次执行一个mr进行去前缀，然后再输出结果上输出a…</p>
<p>&#x3D;》udf:</p>
<p>add_shuffix</p>
<p>pre_shuffix</p>
<p>例子：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">pre_suffix(n_deptno) <span class="keyword">as</span> pre_deptno,</span><br><span class="line"><span class="keyword">sum</span>(cnt) <span class="keyword">as</span> cnt_sum</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line">		<span class="keyword">select</span> </span><br><span class="line">	add_suffix(deptno) <span class="keyword">as</span> n_deptno,</span><br><span class="line">	<span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> cnt </span><br><span class="line">	<span class="keyword">from</span> emp </span><br><span class="line">	<span class="keyword">group</span> <span class="keyword">by</span>  add_suffix(deptno)</span><br><span class="line">) <span class="keyword">as</span> <span class="keyword">as</span> </span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span> pre_suffix(n_deptno);</span><br></pre></td></tr></table></figure>

<p>count（distinct）导致的数据倾斜 &#x3D;》</p>
<p>distinct&#x3D;》一个reduce task 来完成 &#x3D;》 必然会导致数据倾斜&#x3D;》设置reduce 的个数是没有用的&#x3D;》建议未来不用distinct去重&#x3D;》用group by 进行</p>
<p>join</p>
<p>shuffle join &#x2F;普通的join &#x3D;》会导致</p>
<p>map join &#x3D;》 不会导致数据倾斜</p>
<p>可以使用map join 但是有个前提 &#x3D;》 有一个表是小表 &#x3D;》 小表是条件</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">（<span class="number">1</span>）没有reducer处理，就不会产生数据倾斜；</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）没有Map -&gt; Reduce中间的shuffle操作，避免了IO</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 开启MapJoin设置</span><br><span class="line">（<span class="number">1</span>）设置自动选择MapJoin，默认是<span class="literal">true</span></span><br><span class="line">set hive.auto.<span class="built_in">convert</span>.<span class="built_in">join</span> = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">（<span class="number">2</span>）设置小表阈值，默认是25M</span><br><span class="line">set hive.mapjoin.smalltable.filesize=<span class="number">25000000</span>;</span><br><span class="line"> </span><br><span class="line"><span class="number">2</span>. 再大表<span class="built_in">join</span>小表，与小表<span class="built_in">join</span>大表，执行速率几乎相等</span><br><span class="line"></span><br><span class="line">Hive中mapjoin的原理：</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>-side <span class="built_in">join</span>：</span><br><span class="line"></span><br><span class="line">小表数据映射成一张hashtable，再上传到分布式节点的内存中；</span><br><span class="line">大表进行分片，每个节点一部分数据，大表数据文件作为<span class="built_in">map</span>端输入，对<span class="built_in">map</span>()函数每一对输入的kv都与已加载到内存中的小表数据连接，</span><br><span class="line">把连接结果按<span class="built_in">key</span>输出，有多少个<span class="built_in">map</span> task，产生多少个结果文件；</span><br><span class="line">由于<span class="built_in">join</span>操作在<span class="built_in">map</span> task中完成，所以无需启动reduce task，没有shuffle操作和reduce端，避免io和数据倾斜</span><br><span class="line"></span><br><span class="line">reduce-side <span class="built_in">join</span>：</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>端把结果按<span class="built_in">key</span>输出，并在value中标记出数据来源于table1还是table2</span><br><span class="line">因为在shuffle阶段已经按<span class="built_in">key</span>分组，reduce阶段会判断每个value来自哪张表，然后两表相同<span class="built_in">key</span>的记录连接</span><br><span class="line"><span class="built_in">join</span>操作在reduce task中完成</span><br><span class="line"></span><br><span class="line">缺点<span class="number">1</span>：在<span class="built_in">map</span>阶段没有对数据瘦身，shuffle的网络传输和排序性能很低</span><br><span class="line">缺点<span class="number">2</span>：reduce对<span class="number">2</span>个集合做城际计算，很耗内存，容易造成oom</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参数设置（上述）</p>
<p>hints写法</p>
<p>select &#x2F;* + MAPJOIN(product_info) *&#x2F;</p>
<p>a.*,</p>
<p>b.*</p>
<p>from user_click as a left join product_info as b</p>
<p>on a.product_id&#x3D;b.product_id</p>
<p>思路 &#x3D;》 美团的关于数据倾斜的解决方法</p>
<p>a表 &#x3D;》 有可能会导致数据倾斜的key 和不会导致数据倾斜的</p>
<p>b表 &#x3D;》 有可能会导致数据倾斜的key 和不会导致数据倾斜的</p>
<p>然后让他们join的时候无数据倾斜的时候，让他们正常关联，有数据倾斜的要加前缀-》关联join-》减前缀-》聚合</p>
<p>或者直接抽取skew数据 -》 一个sql专门关联skew的-》一个是无数据倾斜的key</p>
<p>分桶解决 -》 一般不太纠结这个</p>
<p>通过idea进行加前缀以及减少前缀</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">加前缀--------------------------------------------------------------</span><br><span class="line"><span class="keyword">package</span> udf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">addqianzhui</span> <span class="keyword">extends</span> <span class="title class_">UDF</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">addqianzhui</span> <span class="variable">addqianzhui</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">addqianzhui</span>();</span><br><span class="line">        System.out.println(addqianzhui.evaluate(args[<span class="number">0</span>], args[<span class="number">1</span>],args[<span class="number">2</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">evaluate</span><span class="params">(String input,String num,String biaoshifu)</span>&#123; <span class="comment">// object 类型 肯定不会出问题</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">suijinum</span> <span class="operator">=</span> random.nextInt(Integer.parseInt(num));</span><br><span class="line">        <span class="keyword">return</span> num+biaoshifu+input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------减前缀</span><br><span class="line"><span class="keyword">package</span> udf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.protocol.types.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cutqianzhui</span> <span class="keyword">extends</span> <span class="title class_">UDF</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">cutqianzhui</span> <span class="variable">cutqianzhui</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">cutqianzhui</span>();</span><br><span class="line">        System.out.println(cutqianzhui.evaluate(args[<span class="number">0</span>], args[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">evaluate</span><span class="params">(String input,String biaoshifu)</span>&#123; <span class="comment">// object 类型 肯定不会出问题</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> input.split(biaoshifu)[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>或者我们还可以对hive底层源码进行二次编译，然后打包上传进行函数的添加</p>
<p>美团文章：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">没找到</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>hbase</title>
    <url>/2001/02/19/2-19/</url>
    <content><![CDATA[<h1 id="hbase"><a href="#hbase" class="headerlink" title="hbase"></a>hbase</h1><p>在讲HBase之前先说nosql</p>
<h2 id="noql"><a href="#noql" class="headerlink" title="noql"></a>noql</h2><p>不支持sql语法进行查询数据,查询数据比较快</p>
<p>redis,hbase等</p>
<h2 id="RDBMS"><a href="#RDBMS" class="headerlink" title="RDBMS"></a>RDBMS</h2><p>把数据相当于excel表，有表头什么的</p>
<p>mysql，clickhouse等</p>
<h2 id="hbase的概述"><a href="#hbase的概述" class="headerlink" title="hbase的概述"></a>hbase的概述</h2><p>为了解决读取数据慢的场景</p>
<p>官网地址：<a href="hbase.apache.org">hbase</a></p>
<p>通过官网我们进行学习：</p>
<ul>
<li>随机的实时读写数据</li>
<li>大体量 &#x3D;&gt; 10亿多个表</li>
<li>分布式存储系统 &#x3D;&gt; 构建在hadoop之上 &#x3D;&gt; 高扩展</li>
<li>nosql数据库</li>
</ul>
<p>做实时数仓一般可以用hbase来当数仓的存储地方，用phoenix来使用</p>
<p>生产上为什么不用hbase做数仓？</p>
<ul>
<li>不支持sql</li>
<li>api和一些shell不好用</li>
<li>不支持二级索引</li>
<li>不好维护</li>
</ul>
<p>版本：</p>
<ul>
<li>cdh : 5.x &#x3D;&gt; hbase 1.x</li>
<li>cdh: 6.x &#x3D;&gt; hbase 2.x</li>
</ul>
<p>好用的版本1.2.x</p>
<h2 id="部署hbase"><a href="#部署hbase" class="headerlink" title="部署hbase"></a>部署hbase</h2><p>hbase也是个主从架构</p>
<p>老大：hmaster</p>
<p>小弟：hregionserver</p>
<p>hbase 是构建在hadoop基础之上的框架</p>
<ul>
<li>数据存储</li>
<li>数据资源</li>
</ul>
<p>环境：</p>
<ul>
<li>jdk</li>
<li>ZK</li>
<li>hadoop</li>
</ul>
<p><a href="http://archive.apache.org/dist/">下载地址</a>我们下载的是2.0.5的</p>
<p>然后解压设置软连接，设置环境变量</p>
<p>配置参数：</p>
<p>进入conf目录下</p>
<p>编辑hbase-env.sh &#x3D;&gt; 更改 <code>export HBASE_MANAGES_ZK=false 相当于用外部的zk，不用hbase自己提供的zk</code></p>
<p>然后打开hbase-site.xml其余配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://bigdata3:9000/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--hbase集群开关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.cluster.distributed<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--hbase要在本地存储的临时文件夹--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/data/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果就设置一个hmaster下面是主机ip:端口号--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--如果是HA的hmaster，则下面是直接放上端口号，因为Zk会自动帮我们选择ip--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.master<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata5:60000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置Zk的快照的存储位置，默认位置是/tmp.在重启时会清空，因为zk是独立安装的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>/home/hadoop/app/zookeeper/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.quorum<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>bigdata3,bigdata4,bigdata5<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--客户端连接Zk的端口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.clientPort<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>2181<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--zk会话超时的时候hbase把这个值传递给它，向他推荐一个最大的超时时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>zookeeper.session.timeout<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>120000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当hbase的节点挂了的时候选择重启而不是终止--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.regionserver.restart.on.zk.expire<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>而如果是HA ：则要把 conf&#x2F;backup-masters 配上hostname 如果是HA则这个名字多加几个就行</p>
<p>然后进行小弟的配置：conf&#x2F;regionservers 里ip和名称的映射</p>
<p>启动：<code>start-hbase.sh</code></p>
<p>停止：<code>stop-hbase.sh</code></p>
<p>如果启动的时候报错如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">05</span>-<span class="number">16</span> <span class="number">21</span>:<span class="number">15</span>:<span class="number">56</span>,<span class="number">450</span> WARN  <span class="selector-attr">[RS-EventLoopGroup-1-2]</span> concurrent<span class="selector-class">.DefaultPromise</span>: An exception was thrown by org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.io</span><span class="selector-class">.asyncfs</span>.FanOutOneBlockAsyncDFSOutputHelper$<span class="number">4</span><span class="selector-class">.opera</span></span><br><span class="line"><span class="function"><span class="title">tionComplete</span><span class="params">()</span></span></span><br><span class="line">java<span class="selector-class">.lang</span><span class="selector-class">.IllegalArgumentException</span>: <span class="selector-tag">object</span> is not an instance of declaring class</span><br><span class="line">        at sun<span class="selector-class">.reflect</span><span class="selector-class">.NativeMethodAccessorImpl</span><span class="selector-class">.invoke0</span>(Native Method)</span><br><span class="line">        at sun<span class="selector-class">.reflect</span><span class="selector-class">.NativeMethodAccessorImpl</span><span class="selector-class">.invoke</span>(NativeMethodAccessorImpl<span class="selector-class">.java</span>:<span class="number">62</span>)</span><br><span class="line">        at sun<span class="selector-class">.reflect</span><span class="selector-class">.DelegatingMethodAccessorImpl</span><span class="selector-class">.invoke</span>(DelegatingMethodAccessorImpl<span class="selector-class">.java</span>:<span class="number">43</span>)</span><br><span class="line">        at java<span class="selector-class">.lang</span><span class="selector-class">.reflect</span><span class="selector-class">.Method</span><span class="selector-class">.invoke</span>(Method<span class="selector-class">.java</span>:<span class="number">498</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.io</span><span class="selector-class">.asyncfs</span><span class="selector-class">.ProtobufDecoder</span>.&lt;init&gt;(ProtobufDecoder<span class="selector-class">.java</span>:<span class="number">69</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.io</span><span class="selector-class">.asyncfs</span><span class="selector-class">.FanOutOneBlockAsyncDFSOutputHelper</span><span class="selector-class">.processWriteBlockResponse</span>(FanOutOneBlockAsyncDFSOutputHelper<span class="selector-class">.java</span>:<span class="number">343</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.io</span><span class="selector-class">.asyncfs</span><span class="selector-class">.FanOutOneBlockAsyncDFSOutputHelper</span>.access$<span class="number">100</span>(FanOutOneBlockAsyncDFSOutputHelper<span class="selector-class">.java</span>:<span class="number">112</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.io</span><span class="selector-class">.asyncfs</span>.FanOutOneBlockAsyncDFSOutputHelper$<span class="number">4</span><span class="selector-class">.operationComplete</span>(FanOutOneBlockAsyncDFSOutputHelper<span class="selector-class">.java</span>:<span class="number">425</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.DefaultPromise</span><span class="selector-class">.notifyListener0</span>(DefaultPromise<span class="selector-class">.java</span>:<span class="number">578</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.DefaultPromise</span><span class="selector-class">.notifyListenersNow</span>(DefaultPromise<span class="selector-class">.java</span>:<span class="number">552</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.DefaultPromise</span><span class="selector-class">.notifyListeners</span>(DefaultPromise<span class="selector-class">.java</span>:<span class="number">491</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.DefaultPromise</span><span class="selector-class">.addListener</span>(DefaultPromise<span class="selector-class">.java</span>:<span class="number">184</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.io</span><span class="selector-class">.asyncfs</span><span class="selector-class">.FanOutOneBlockAsyncDFSOutputHelper</span><span class="selector-class">.initialize</span>(FanOutOneBlockAsyncDFSOutputHelper<span class="selector-class">.java</span>:<span class="number">419</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.io</span><span class="selector-class">.asyncfs</span><span class="selector-class">.FanOutOneBlockAsyncDFSOutputHelper</span>.access$<span class="number">300</span>(FanOutOneBlockAsyncDFSOutputHelper<span class="selector-class">.java</span>:<span class="number">112</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.io</span><span class="selector-class">.asyncfs</span>.FanOutOneBlockAsyncDFSOutputHelper$<span class="number">5</span><span class="selector-class">.operationComplete</span>(FanOutOneBlockAsyncDFSOutputHelper<span class="selector-class">.java</span>:<span class="number">477</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.io</span><span class="selector-class">.asyncfs</span>.FanOutOneBlockAsyncDFSOutputHelper$<span class="number">5</span><span class="selector-class">.operationComplete</span>(FanOutOneBlockAsyncDFSOutputHelper<span class="selector-class">.java</span>:<span class="number">472</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.DefaultPromise</span><span class="selector-class">.notifyListener0</span>(DefaultPromise<span class="selector-class">.java</span>:<span class="number">578</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.DefaultPromise</span><span class="selector-class">.notifyListeners0</span>(DefaultPromise<span class="selector-class">.java</span>:<span class="number">571</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.DefaultPromise</span><span class="selector-class">.notifyListenersNow</span>(DefaultPromise<span class="selector-class">.java</span>:<span class="number">550</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.DefaultPromise</span><span class="selector-class">.notifyListeners</span>(DefaultPromise<span class="selector-class">.java</span>:<span class="number">491</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.DefaultPromise</span><span class="selector-class">.setValue0</span>(DefaultPromise<span class="selector-class">.java</span>:<span class="number">616</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.DefaultPromise</span><span class="selector-class">.setSuccess0</span>(DefaultPromise<span class="selector-class">.java</span>:<span class="number">605</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.DefaultPromise</span><span class="selector-class">.trySuccess</span>(DefaultPromise<span class="selector-class">.java</span>:<span class="number">104</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.DefaultChannelPromise</span><span class="selector-class">.trySuccess</span>(DefaultChannelPromise<span class="selector-class">.java</span>:<span class="number">84</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.epoll</span>.AbstractEpollChannel<span class="variable">$AbstractEpollUnsafe</span><span class="selector-class">.fulfillConnectPromise</span>(AbstractEpollChannel<span class="selector-class">.java</span>:<span class="number">653</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.epoll</span>.AbstractEpollChannel<span class="variable">$AbstractEpollUnsafe</span><span class="selector-class">.finishConnect</span>(AbstractEpollChannel<span class="selector-class">.java</span>:<span class="number">691</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.epoll</span>.AbstractEpollChannel<span class="variable">$AbstractEpollUnsafe</span><span class="selector-class">.epollOutReady</span>(AbstractEpollChannel<span class="selector-class">.java</span>:<span class="number">567</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.epoll</span><span class="selector-class">.EpollEventLoop</span><span class="selector-class">.processReady</span>(EpollEventLoop<span class="selector-class">.java</span>:<span class="number">470</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.channel</span><span class="selector-class">.epoll</span><span class="selector-class">.EpollEventLoop</span><span class="selector-class">.run</span>(EpollEventLoop<span class="selector-class">.java</span>:<span class="number">378</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span>.SingleThreadEventExecutor$<span class="number">4</span><span class="selector-class">.run</span>(SingleThreadEventExecutor<span class="selector-class">.java</span>:<span class="number">989</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.internal</span>.ThreadExecutorMap$<span class="number">2</span><span class="selector-class">.run</span>(ThreadExecutorMap<span class="selector-class">.java</span>:<span class="number">74</span>)</span><br><span class="line">        at org<span class="selector-class">.apache</span><span class="selector-class">.hbase</span><span class="selector-class">.thirdparty</span><span class="selector-class">.io</span><span class="selector-class">.netty</span><span class="selector-class">.util</span><span class="selector-class">.concurrent</span><span class="selector-class">.FastThreadLocalRunnable</span><span class="selector-class">.run</span>(FastThreadLocalRunnable<span class="selector-class">.java</span>:<span class="number">30</span>)</span><br><span class="line">        at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">748</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>则是hbase的jar包和hadoop的jar包冲突了</p>
<p>执行如下操作：</p>
<ul>
<li>首先进入 <code>cd app/hbase/lib/client-facing-thirdparty/</code></li>
<li>然后执行备份：<code>mkdir before</code> <code>mv ./slf4j-* ./before/</code></li>
<li>然后把hadoop里的jar包拿过来就行了：<code>cp ~/app/hadoop/share/hadoop/common/lib/slf4j-* ./</code></li>
<li>然后再配置文件里 <code>hbase-env.sh</code>把 <code>export HBASE_DISABLE_HADOOP_CLASSPATH_LOOKUP=&quot;true&quot;打开就行</code></li>
<li>就成功解决了</li>
</ul>
<h2 id="hbase存储"><a href="#hbase存储" class="headerlink" title="hbase存储"></a>hbase存储</h2><p>rowkey：相当于mysql的主键</p>
<p>column family: 列族 简称CF &#x3D;&gt; 一个表里多个column组成一个CF，生产要求尽量不超过三个</p>
<p>column：列</p>
<p>version number： 记录数据插入的时间戳</p>
<p>Region：存储数据的最小单元，按照rowkey划分</p>
<p>如果建表的时候不指定region个数默认是一个region。但是当达到一定阈值会自动切分region。他是放在regionserver上的</p>
<h3 id="逻辑概念："><a href="#逻辑概念：" class="headerlink" title="逻辑概念："></a>逻辑概念：</h3><p>整个数据是按照rowkey进行字典排序的</p>
<p>按照rowkey的范围划分不同的region</p>
<p>region是按照不同的列族划分不同的store</p>
<p>store包含memstore和多个storefile &#x3D;&gt; hfile &#x3D;&gt; hdfs : 当内存存不下，则会存hdfs上，而且storefile最终也是落盘到hdfs上的叫hfile</p>
<h3 id="物理层面"><a href="#物理层面" class="headerlink" title="物理层面"></a>物理层面</h3><p>实际上hbase以key - value 存储数据的和redis类似</p>
<p>key是rowkey value是CF：column：TS：value</p>
<p>一个regionserver管理一个或者多个region</p>
<p>一个region管理一个或者多个CF</p>
<p>TS&#x3D;&gt; 管理相同数据的版本</p>
<p>注意：hbase中使用客户端</p>
<ul>
<li>put： 插入数据</li>
<li>delete： 删除数据</li>
</ul>
<p>其实本质上删除也是插入数据，是插入一条带有删除标记的数据</p>
<p>所以里面没有真正删除的操作，对于有删除标记的数据它不会读取</p>
<p>第一次使用put的时候会产生一个时间戳，就是代表他的版本</p>
<p>只读取最新的时间戳的数据</p>
<p>hbase设计理念&#x3D;&gt; 重写轻读</p>
<p>hbase加列特别方便，随时加列等</p>
<h2 id="hbase基本架构"><a href="#hbase基本架构" class="headerlink" title="hbase基本架构"></a>hbase基本架构</h2><p>了解</p>
<h2 id="hbase-shell"><a href="#hbase-shell" class="headerlink" title="hbase shell"></a>hbase shell</h2><p>hbase api几乎不用因为太难写</p>
<p>生产很少用</p>
<p>hbase shell 如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Usage: hbase [&lt;options&gt;] &lt;command&gt; [&lt;args&gt;]</span><br><span class="line">Options:</span><br><span class="line">  --config DIR         Configuration direction <span class="keyword">to</span> use. Default: ./conf</span><br><span class="line">  --hosts HOSTS        Override the list <span class="keyword">in</span> <span class="string">&#x27;regionservers&#x27;</span> file</span><br><span class="line">  --auth-as-server     Authenticate <span class="keyword">to</span> ZooKeeper using servers configuration</span><br><span class="line">  --internal-classpath Skip attempting <span class="keyword">to</span> use<span class="built_in"> client </span>facing jars (WARNING: unstable results between versions)</span><br><span class="line">  --help <span class="keyword">or</span> -h         <span class="built_in">Print</span> this help message</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">Some commands take arguments. Pass <span class="literal">no</span> args <span class="keyword">or</span> -h <span class="keyword">for</span> usage.</span><br><span class="line">  shell            <span class="built_in">Run</span> the HBase shell</span><br><span class="line">  hbck             <span class="built_in">Run</span> the HBase <span class="string">&#x27;fsck&#x27;</span> tool. Defaults read-only hbck1.</span><br><span class="line">                   Pass <span class="string">&#x27;-j /path/to/HBCK2.jar&#x27;</span> <span class="keyword">to</span> <span class="built_in">run</span> hbase-2.x HBCK2.</span><br><span class="line">  snapshot        <span class="built_in"> Tool </span><span class="keyword">for</span> managing snapshots</span><br><span class="line">  wal              Write-ahead-log analyzer</span><br><span class="line">  hfile            Store file analyzer</span><br><span class="line">  zkcli            <span class="built_in">Run</span> the ZooKeeper shell</span><br><span class="line">  master           <span class="built_in">Run</span> an HBase HMaster node</span><br><span class="line">  regionserver     <span class="built_in">Run</span> an HBase HRegionServer node</span><br><span class="line">  zookeeper        <span class="built_in">Run</span> a ZooKeeper<span class="built_in"> server</span></span><br><span class="line"><span class="built_in"></span>  rest             <span class="built_in">Run</span> an HBase REST<span class="built_in"> server</span></span><br><span class="line"><span class="built_in"></span>  thrift           <span class="built_in">Run</span> the HBase Thrift<span class="built_in"> server</span></span><br><span class="line"><span class="built_in"></span>  thrift2          <span class="built_in">Run</span> the HBase Thrift2<span class="built_in"> server</span></span><br><span class="line"><span class="built_in"></span>  clean            <span class="built_in">Run</span> the HBase clean up<span class="built_in"> script</span></span><br><span class="line"><span class="built_in"></span>  classpath        Dump hbase CLASSPATH</span><br><span class="line">  mapredcp         Dump CLASSPATH entries required by mapreduce</span><br><span class="line">  pe               <span class="built_in">Run</span> PerformanceEvaluation</span><br><span class="line">  ltt              <span class="built_in">Run</span> LoadTestTool</span><br><span class="line">  canary           <span class="built_in">Run</span> the Canary<span class="built_in"> tool</span></span><br><span class="line"><span class="built_in"></span>  version          <span class="built_in">Print</span> the version</span><br><span class="line">  completebulkload <span class="built_in">Run</span> BulkLoadHFiles<span class="built_in"> tool</span></span><br><span class="line"><span class="built_in"></span>  regionsplitter   <span class="built_in">Run</span> RegionSplitter<span class="built_in"> tool</span></span><br><span class="line"><span class="built_in"></span>  rowcounter       <span class="built_in">Run</span> RowCounter<span class="built_in"> tool</span></span><br><span class="line"><span class="built_in"></span>  cellcounter      <span class="built_in">Run</span> CellCounter<span class="built_in"> tool</span></span><br><span class="line"><span class="built_in"></span>  pre-upgrade      <span class="built_in">Run</span> Pre-Upgrade validator<span class="built_in"> tool</span></span><br><span class="line"><span class="built_in"></span>  hbtop            <span class="built_in">Run</span> HBTop<span class="built_in"> tool</span></span><br><span class="line"><span class="built_in"></span>  CLASSNAME        <span class="built_in">Run</span> the class named CLASSNAME</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输入 <code>hbase shell</code>就会进入shell界面</p>
<p>如下：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">[hadoop@bigdata5 ~]$ hbase shell</span><br><span class="line">2023-02-19 12:19:59,274 WARN  [main] util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">HBase Shell</span><br><span class="line">Use &quot;help&quot; to get list of supported commands.</span><br><span class="line">Use &quot;exit&quot; to quit this interactive shell.</span><br><span class="line">For Reference, please visit: http://hbase.apache.org/2.0/book.html#shell</span><br><span class="line">Version 2.4.11, r7e672a0da0586e6b7449310815182695bc6ae193, Tue Mar 15 10:<span class="number">31</span>:<span class="number">00</span> PDT <span class="number">2022</span></span><br><span class="line">Took <span class="number">0.0014</span> seconds                                                                                                                                                                                      </span><br><span class="line">hbase:<span class="number">001</span>:<span class="number">0</span>&gt; help</span><br><span class="line">HBase Shell, version <span class="number">2.4</span><span class="number">.11</span>, r7e672a0da0586e6b7449310815182695bc6ae193, Tue Mar <span class="number">15</span> <span class="number">10</span>:<span class="number">31</span>:<span class="number">00</span> PDT <span class="number">2022</span></span><br><span class="line"><span class="built_in">Type</span> <span class="string">&#x27;help &quot;COMMAND&quot;&#x27;</span>, (<span class="built_in">e</span>.g. <span class="string">&#x27;help &quot;get&quot;&#x27;</span> -- the quotes are necessary) <span class="keyword">for</span> help <span class="keyword">on</span> a specific command.</span><br><span class="line">Commands are grouped. <span class="built_in">Type</span> <span class="string">&#x27;help &quot;COMMAND_GROUP&quot;&#x27;</span>, (<span class="built_in">e</span>.g. <span class="string">&#x27;help &quot;general&quot;&#x27;</span>) <span class="keyword">for</span> help <span class="keyword">on</span> a command <span class="keyword">group</span>.</span><br><span class="line"></span><br><span class="line">COMMAND GROUPS:</span><br><span class="line">  <span class="keyword">Group</span> name: general</span><br><span class="line">  Commands: processlist, status, table_help, version, whoami</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Group</span> name: ddl</span><br><span class="line">  Commands: <span class="keyword">alter</span>, alter_async, alter_status, clone_table_schema, <span class="keyword">create</span>, <span class="keyword">describe</span>, disable, disable_all, <span class="keyword">drop</span>, drop_all, enable, enable_all, <span class="keyword">exists</span>, get_table, is_disabled, is_enabled, list, list_regions, locate_region, show_filters</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Group</span> name: <span class="keyword">namespace</span></span><br><span class="line">  Commands: alter_namespace, create_namespace, describe_namespace, drop_namespace, list_namespace, list_namespace_tables</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Group</span> name: dml</span><br><span class="line">  Commands: append, <span class="built_in">count</span>, <span class="keyword">delete</span>, deleteall, get, get_counter, get_splits, incr, put, scan, <span class="keyword">truncate</span>, truncate_preserve</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Group</span> name: tools</span><br><span class="line">  Commands: assign, balance_switch, balancer, balancer_enabled, catalogjanitor_enabled, catalogjanitor_run, catalogjanitor_switch, cleaner_chore_enabled, cleaner_chore_run, cleaner_chore_switch, clear_block_cache, clear_compaction_queues, clear_deadservers, clear_slowlog_responses, close_region, compact, compact_rs, compaction_state, compaction_switch, decommission_regionservers, flush, get_balancer_decisions, get_balancer_rejections, get_largelog_responses, get_slowlog_responses, hbck_chore_run, is_in_maintenance_mode, list_deadservers, list_decommissioned_regionservers, major_compact, merge_region, move, normalize, normalizer_enabled, normalizer_switch, recommission_regionserver, regioninfo, rit, snapshot_cleanup_enabled, snapshot_cleanup_switch, <span class="built_in">split</span>, splitormerge_enabled, splitormerge_switch, stop_master, stop_regionserver, trace, unassign, wal_roll, zk_dump</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Group</span> name: replication</span><br><span class="line">  Commands: add_peer, append_peer_exclude_namespaces, append_peer_exclude_tableCFs, append_peer_namespaces, append_peer_tableCFs, disable_peer, disable_table_replication, enable_peer, enable_table_replication, get_peer_config, list_peer_configs, list_peers, list_replicated_tables, remove_peer, remove_peer_exclude_namespaces, remove_peer_exclude_tableCFs, remove_peer_namespaces, remove_peer_tableCFs, set_peer_bandwidth, set_peer_exclude_namespaces, set_peer_exclude_tableCFs, set_peer_namespaces, set_peer_replicate_all, set_peer_serial, set_peer_tableCFs, show_peer_tableCFs, update_peer_config</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Group</span> name: snapshots</span><br><span class="line">  Commands: clone_snapshot, delete_all_snapshot, delete_snapshot, delete_table_snapshots, list_snapshots, list_table_snapshots, restore_snapshot, snapshot</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Group</span> name: configuration</span><br><span class="line">  Commands: update_all_config, update_config</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Group</span> name: quotas</span><br><span class="line">  Commands: disable_exceed_throttle_quota, disable_rpc_throttle, enable_exceed_throttle_quota, enable_rpc_throttle, list_quota_snapshots, list_quota_table_sizes, list_quotas, list_snapshot_sizes, set_quota</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Group</span> name: security</span><br><span class="line">  Commands: <span class="keyword">grant</span>, list_security_capabilities, <span class="keyword">revoke</span>, user_permission</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Group</span> name: procedures</span><br><span class="line">  Commands: list_locks, list_procedures</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Group</span> name: visibility labels</span><br><span class="line">  Commands: add_labels, clear_auths, get_auths, list_labels, set_auths, set_visibility</span><br><span class="line"></span><br><span class="line">  <span class="keyword">Group</span> name: rsgroup</span><br><span class="line">  Commands: add_rsgroup, alter_rsgroup_config, balance_rsgroup, get_namespace_rsgroup, get_rsgroup, get_server_rsgroup, get_table_rsgroup, list_rsgroups, move_namespaces_rsgroup, move_servers_namespaces_rsgroup, move_servers_rsgroup, move_servers_tables_rsgroup, move_tables_rsgroup, remove_rsgroup, remove_servers_rsgroup, rename_rsgroup, show_rsgroup_config</span><br><span class="line"></span><br><span class="line">SHELL USAGE:</span><br><span class="line">Quote <span class="keyword">all</span> names <span class="keyword">in</span> HBase Shell such <span class="keyword">as</span> table <span class="keyword">and</span> column names.  Commas delimit</span><br><span class="line">command parameters.  <span class="built_in">Type</span> &lt;<span class="keyword">RETURN</span>&gt; after entering a command <span class="keyword">to</span> run it.</span><br><span class="line">Dictionaries of configuration used <span class="keyword">in</span> the creation <span class="keyword">and</span> alteration of tables are</span><br><span class="line">Ruby Hashes. They look <span class="keyword">like</span> this:</span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&#x27;key1&#x27;</span> =&gt; <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span> =&gt; <span class="string">&#x27;value2&#x27;</span>, ...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> are opened <span class="keyword">and</span> closed <span class="keyword">with</span> curley-braces.  <span class="keyword">Key</span>/<span class="keyword">values</span> are delimited <span class="keyword">by</span> the</span><br><span class="line"><span class="string">&#x27;=&gt;&#x27;</span> character combination.  Usually <span class="keyword">keys</span> are predefined constants such <span class="keyword">as</span></span><br><span class="line">NAME, VERSIONS, COMPRESSION, etc.  Constants <span class="keyword">do</span> <span class="keyword">not</span> need <span class="keyword">to</span> be quoted.  <span class="built_in">Type</span></span><br><span class="line"><span class="string">&#x27;Object.constants&#x27;</span> <span class="keyword">to</span> see a (messy) list of <span class="keyword">all</span> constants <span class="keyword">in</span> the environment.</span><br><span class="line"></span><br><span class="line"><span class="keyword">If</span> you are <span class="keyword">using</span> <span class="keyword">binary</span> <span class="keyword">keys</span> <span class="keyword">or</span> <span class="keyword">values</span> <span class="keyword">and</span> need <span class="keyword">to</span> enter them <span class="keyword">in</span> the shell, <span class="keyword">use</span></span><br><span class="line">double-quote<span class="string">&#x27;d hexadecimal representation. For example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  hbase&gt; get &#x27;</span>t1<span class="string">&#x27;, &quot;key\x03\x3f\xcd&quot;</span></span><br><span class="line"><span class="string">  hbase&gt; get &#x27;</span>t1<span class="string">&#x27;, &quot;key\003\023\011&quot;</span></span><br><span class="line"><span class="string">  hbase&gt; put &#x27;</span>t1<span class="string">&#x27;, &quot;test\xef\xff&quot;, &#x27;</span>f1:<span class="string">&#x27;, &quot;\x01\x33\x40&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The HBase shell is the (J)Ruby IRB with the above HBase-specific commands added.</span></span><br><span class="line"><span class="string">For more on the HBase Shell, see http://hbase.apache.org/book.html</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p>ps：简单介绍：命名空间</p>
<p>对于我们的数据库，无论是hive还是hbase创建DATabase就是创建一个namespace</p>
<h3 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">create_namespace</span> <span class="string">&#x27;warehouse&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">create</span> <span class="string">&#x27;warehouse:test&#x27;</span>,<span class="string">&#x27;sku&#x27;</span>,<span class="string">&#x27;order&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">hba<span class="symbol">se:004</span><span class="symbol">:0</span>&gt; list</span><br><span class="line">TABLE                                                                                                                                                                                                    </span><br><span class="line">warehou<span class="symbol">se:te</span>st                                                                                                                                                                                           </span><br><span class="line"><span class="number">1</span> <span class="built_in">row</span>(s)</span><br><span class="line">Took <span class="number">0.0230</span> seconds                                                                                                                                                                                      </span><br><span class="line">=&gt; [<span class="string">&quot;warehouse:test&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="keyword">put</span> <span class="string">&#x27;warehouse:test&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;sku:skuname&#x27;</span>, <span class="string">&#x27;aa&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hbase</span>:<span class="number">007</span>:<span class="number">0</span>&gt; scan &#x27;warehouse:test&#x27;</span><br><span class="line"><span class="attribute">ROW</span>                                                   COLUMN+CELL                                                                                                                                        </span><br><span class="line"> <span class="attribute">1</span>                                                    column=sku:skuname, timestamp=<span class="number">2023</span>-<span class="number">02</span>-<span class="number">19</span>T12:<span class="number">34</span>:<span class="number">08</span>.<span class="number">225</span>, value=aa                                                                                    </span><br><span class="line"><span class="attribute">1</span> row(s)</span><br><span class="line"><span class="attribute">Took</span> <span class="number">0</span>.<span class="number">0529</span> seconds  </span><br></pre></td></tr></table></figure>

<h3 id="查数据（精准）"><a href="#查数据（精准）" class="headerlink" title="查数据（精准）"></a>查数据（精准）</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hbase</span>:<span class="number">011</span>:<span class="number">0</span>&gt; get &#x27;warehouse:test&#x27;,&#x27;<span class="number">1</span>&#x27;</span><br><span class="line"><span class="attribute">COLUMN</span>                                                CELL                                                                                                                                               </span><br><span class="line"> <span class="attribute">sku</span>:skuname                                          timestamp=<span class="number">2023</span>-<span class="number">02</span>-<span class="number">19</span>T12:<span class="number">34</span>:<span class="number">08</span>.<span class="number">225</span>, value=aa                                                                                                        </span><br><span class="line"><span class="attribute">1</span> row(s)</span><br><span class="line"><span class="attribute">Took</span> <span class="number">0</span>.<span class="number">0222</span> seconds </span><br></pre></td></tr></table></figure>

<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="string">&#x27;warehouse:test&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;sku:skuname&#x27;</span> <span class="regexp">//</span> 加时间戳也可以的默认是当前版本，加时间戳默认的话就是时间戳的那个版本</span><br></pre></td></tr></table></figure>

<h3 id="删除所有数据"><a href="#删除所有数据" class="headerlink" title="删除所有数据"></a>删除所有数据</h3><p>因为上面delete要删除多个列的话，太麻烦，用deleteall是直接删除rowkey对应的所有列</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deleteall</span> <span class="string">&#x27;warehouse:test&#x27;</span>,<span class="string">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>有前提：table本身是不可用的</p>
<p>就是相当于开关</p>
<p>先用describe查看表</p>
<p>然后用disable给予权限</p>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">describe <span class="symbol">&#x27;warehouse</span>:test&#x27;</span><br><span class="line">disable <span class="symbol">&#x27;warehouse</span>:test&#x27;</span><br><span class="line">drop <span class="symbol">&#x27;warehouse</span>:test&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="hbase多版本"><a href="#hbase多版本" class="headerlink" title="hbase多版本"></a>hbase多版本</h3><p>就是一个表，可以设置它显示多个版本的数据</p>
<p>通过</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">alter <span class="string">&#x27;warehouse:test&#x27;</span>,&#123;NAME=&gt;<span class="string">&#x27;列名&#x27;</span>，VERSIONS=&gt;要显示的版本数&#125;</span><br></pre></td></tr></table></figure>

<p>scan ‘table’ &#x3D;&gt; 只是查看最新的数据</p>
<p>如果要看所有的则</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">scan <span class="string">&#x27;table&#x27;</span> , &#123;RAW =&gt; <span class="keyword">true</span> , VERSIONS =&gt; 要显示的版本数&#125;</span><br></pre></td></tr></table></figure>

<p>这个查看和scan的关系不大，它走的是自己的versions，但是如果不加这个参数，则走表的</p>
<h2 id="hbase的核心架构"><a href="#hbase的核心架构" class="headerlink" title="hbase的核心架构"></a>hbase的核心架构</h2><p>hmaster:负责hbase里的表的table region管理以及regionserver里的region的负载均衡问题，负责region的分裂以及分裂后region的迁移，regionserver如果挂了，则由它进行迁移</p>
<p>regionserver：负责数据的读写，和数据持久化，部署的时候尽量和datanode再同节点</p>
<p>zk：负责hmaster和rs之间的通信，存储meta表 所在的rs节点，master可以感知小弟的状态</p>
<p>meta表： &#x3D;&gt; hive元数据 &#x3D;&gt; hbase元数据</p>
<p>可以用scan ‘ hbase:meta’来查看</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hbase</span>:<span class="number">010</span>:<span class="number">0</span>&gt; scan &#x27;hbase:meta&#x27;</span><br><span class="line"><span class="attribute">ROW</span>                                                   COLUMN+CELL                                                                                                                                        </span><br><span class="line"> <span class="attribute">hbase</span>:namespace                                      column=table:state, timestamp=<span class="number">2023</span>-<span class="number">02</span>-<span class="number">19</span>T11:<span class="number">38</span>:<span class="number">17</span>.<span class="number">073</span>, value=\x08\x00                                                                              </span><br><span class="line"> <span class="attribute">hbase</span>:namespace,,<span class="number">1676777271034</span>.ae92042c68118b0558fa2 column=info:regioninfo, timestamp=<span class="number">2023</span>-<span class="number">02</span>-<span class="number">19</span>T12:<span class="number">19</span>:<span class="number">55</span>.<span class="number">180</span>, value=&#123;ENCODED =&gt; ae92042c68118b0558fa2ffc7409a50b, NAME =&gt; &#x27;hbase:namespace,,<span class="number">1676777271034</span>.ae92</span><br><span class="line"> <span class="attribute">ffc7409a50b</span>.                                         <span class="number">042</span>c68118b0558fa2ffc7409a50b.&#x27;, STARTKEY =&gt; &#x27;&#x27;, ENDKEY =&gt; &#x27;&#x27;&#125;                                                                                      </span><br><span class="line"> <span class="attribute">hbase</span>:namespace,,<span class="number">1676777271034</span>.ae92042c68118b0558fa2 column=info:seqnumDuringOpen, timestamp=<span class="number">2023</span>-<span class="number">02</span>-<span class="number">19</span>T12:<span class="number">19</span>:<span class="number">55</span>.<span class="number">180</span>, value=\x00\x00\x00\x00\x00\x00\x00\x0A                                            </span><br><span class="line"> <span class="attribute">ffc7409a50b</span>.                                                                                                                                                                                            </span><br><span class="line"> <span class="attribute">hbase</span>:namespace,,<span class="number">1676777271034</span>.ae92042c68118b0558fa2 column=info:server, timestamp=<span class="number">2023</span>-<span class="number">02</span>-<span class="number">19</span>T12:<span class="number">19</span>:<span class="number">55</span>.<span class="number">180</span>, value=bigdata3:<span class="number">16020</span>                                                                        </span><br><span class="line"> <span class="attribute">ffc7409a50b</span>.                                                                                                                                                                                            </span><br><span class="line"> <span class="attribute">hbase</span>:namespace,,<span class="number">1676777271034</span>.ae92042c68118b0558fa2 column=info:serverstartcode, timestamp=<span class="number">2023</span>-<span class="number">02</span>-<span class="number">19</span>T12:<span class="number">19</span>:<span class="number">55</span>.<span class="number">180</span>, value=<span class="number">1676780385227</span>                                                                </span><br><span class="line"> <span class="attribute">ffc7409a50b</span>.                                                                                                                                                                                            </span><br><span class="line"> <span class="attribute">hbase</span>:namespace,,<span class="number">1676777271034</span>.ae92042c68118b0558fa2 column=info:sn, timestamp=<span class="number">2023</span>-<span class="number">02</span>-<span class="number">19</span>T12:<span class="number">19</span>:<span class="number">54</span>.<span class="number">865</span>, value=bigdata3,<span class="number">16020</span>,<span class="number">1676780385227</span>                                                              </span><br><span class="line"> <span class="attribute">ffc7409a50b</span>.                                                                                                                                                                                            </span><br><span class="line"> <span class="attribute">hbase</span>:namespace,,<span class="number">1676777271034</span>.ae92042c68118b0558fa2 column=info:state, timestamp=<span class="number">2023</span>-<span class="number">02</span>-<span class="number">19</span>T12:<span class="number">19</span>:<span class="number">55</span>.<span class="number">180</span>, value=OPEN                                                                                   </span><br><span class="line"> <span class="attribute">ffc7409a50b</span>.                                                                                                                                                                                            </span><br><span class="line"><span class="attribute">2</span> row(s)</span><br><span class="line"><span class="attribute">Took</span> <span class="number">0</span>.<span class="number">0528</span> seconds </span><br></pre></td></tr></table></figure>

<p>meta表：</p>
<ul>
<li>hbase table:<ul>
<li>regioninfo: region的范围</li>
<li>region所在的机器</li>
</ul>
</li>
</ul>
<p>Hlog：预写日志</p>
<ul>
<li>每次写数据的时候首先会先写数据到Hlog文件和mysql的binlog类似</li>
</ul>
<p>blockCache:</p>
<ul>
<li>一个rs只有一个blockcache 用来读缓存，提高读的性能</li>
</ul>
<p>region:一个或者多个store [cf]</p>
<p>store:</p>
<ul>
<li>memstore<ul>
<li>作为写缓存，读的时候不一定用</li>
<li>当超过一定阈值flush，落盘到hdfs上</li>
</ul>
</li>
<li>storefile &#x3D;&gt; hfile<ul>
<li>以hfile的形式写入到hdfs上，当hfile数量增长到一定个数之后，系统会自动进行合并<ul>
<li>大合并</li>
<li>小合并</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>hbase是没有小文件问题的</p>
<p>一个regionserver包含多个region</p>
<p>一个region根据CF列族划分成多个store</p>
<p>一个store包含一个memstore和0&#x2F;多个storefile</p>
<p>一个region只能属于一个表，在一个rs节点上</p>
<h2 id="读写流程"><a href="#读写流程" class="headerlink" title="读写流程"></a>读写流程</h2><p>写流程：</p>
<ul>
<li>client 向zk &#x2F;hbase&#x2F;meta-region-server 获取hbase:meta所在的rs节点</li>
<li>client 向rs节点获取hbase:meta表<ul>
<li>根据rowkey对比，找到对应的RS节点和region</li>
</ul>
</li>
<li>client将请求发送给节点，写数据</li>
<li>先写Hlog 然后再写region 列族对应的store里的memstore</li>
<li>当memstore达到阈值，就落盘，异步的，将内存中的数据写入文件</li>
</ul>
<p>读流程：</p>
<ul>
<li>client向zk发送请求，获取meta表</li>
<li>client 会发送请求封装成一个scan，发送给节点进行处理</li>
<li>节点会先去memstore里查如果没有，则去blockcache里查，如果还查不到，就去storefile里查</li>
<li>节点处理之后就把结果返回给client</li>
</ul>
<h2 id="写问题"><a href="#写问题" class="headerlink" title="写问题"></a>写问题</h2><p>正常来说写数据的时候是Hlog一份</p>
<p>然后就写到memstore等等</p>
<p><strong>memstore flush 的时候hbase的这个region 会暂停读写</strong></p>
<p>我们必须通过调优解决这个问题，要不然机会出现夯住的时候</p>
<p><strong>memstore flush 最小级别是region而不是memstore</strong></p>
<p>调优：</p>
<ul>
<li><p>当region任意一个memstore的size达到阈值，就会flush</p>
<ul>
<li>参数：<code>hbase.hregion.memstore.flush.size</code></li>
<li>可以再hbase的配置里更改他的大小，它默认是134217728kb &#x3D; 128M</li>
<li>一般调整的时候最好按照他的倍数来，一般是给4倍</li>
</ul>
</li>
<li><p>当region所有的memstore加和达到阈值就会触发memstore flush</p>
<ul>
<li>参数 <code>hbase.hregion.memstore.block.multiplier</code></li>
<li>默认大小是4</li>
<li>当region里的memstore达到这个参数x上面的单个最大阈值的时候</li>
<li>才会开始落盘</li>
<li>所以我们可以通过调大这个参数解决这个问题</li>
</ul>
</li>
<li><p>当regionserver里的所有memstore的和超过 低水位线 则这个regionserver 会强制 进行flush</p>
<ul>
<li>会导致多个表不能进行读写</li>
<li>先从最大的memstore最大的region开始flush，依次flush</li>
<li>如果低于水位线就不会flush</li>
<li>参数<ul>
<li><code>hbase.regionserver.global.memstore.size </code> 这个就是你给hbase的整体容量</li>
<li><code>hbase.regionserver.global.memstore.size.lower.limit</code> 这个就是我们计算低水位线的计算条件</li>
<li><code>hbase.regionserver.global.memstore.size.upper.limit </code> 这个就是我们memstore能用的内存能的多少的条件</li>
</ul>
</li>
<li>一般默认情况下upper是最大容量的40%，lower是这个40%的95%</li>
<li>要进行调整就好</li>
</ul>
</li>
<li><p>不太重要的级别</p>
</li>
<li><p>hlog也有要求 &#x3D;&gt; 当Hlog的数量达到一个阈值的时候就会落盘Hlog 参数 <code>hbase.regionserver.max.logs</code></p>
</li>
<li><p>定期级别 &#x3D;&gt; 检查系统的周期是一小时检查一次，确保memstore及时flush 参数把值给成-1就可以关闭它</p>
</li>
<li><p>手动级别 &#x3D;&gt; 用户可以提前对他进行flush 通过shell命令的flush ‘table&#x2F;region’</p>
</li>
</ul>
<p>上述对业务影响比较小的：</p>
<ul>
<li>定期级别</li>
<li>手动级别</li>
<li>hlog</li>
<li>region</li>
</ul>
<p>影响大的：</p>
<ul>
<li>regionserver：几乎是灾难性的 ，暂停时间几乎是能达到分钟级别</li>
</ul>
<h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>hfile进行合并参数名称：compaction</p>
<p>把多个小的hfile主动合并成一个大的hfile &#x3D;&gt; minor(小合并)</p>
<p>major(大合并) ：</p>
<p>除了上述的我合并文件之外，他还会把之前打上删除标记的数据删除还有TTL数据，以及超过设定的版本号的数据</p>
<p>就是我们建表的时候设定的版本号</p>
<p>大合并消耗的时间可能会比较长的，资源消耗比较多 &#x3D;&gt; 一般生产上要把这两个自动合并给关闭</p>
<p>然后我们手动合并，控制他的时间</p>
<p>minor的触发条件：</p>
<p>和hfile的个数有关系</p>
<p>参数：<code>hbase.hstore.compactionThreshold</code>他的默认值是3</p>
<p>如果超过3个小文件，则会触发这个合并操作</p>
<p>就是再memstore flush之后检查这个文件个数</p>
<p>major触发条件：</p>
<p>自动触发 &#x3D;&gt; 关闭</p>
<p>自动触发的操作：</p>
<p>周期性检查的时间的参数：<code>hbase.hregion.majorcompaction</code> 默认是7天</p>
<p>然后还有浮动值，就是这个周期的时间有浮动：</p>
<p>参数是：<code>hbase.hregion.majorcompaction.jitter</code>默认是0.5</p>
<p>所以他的时间是[7,7-7x0.5&#x2F;7+7x0.5]</p>
<p>手动触发的参数：<code>major_compact</code></p>
<p>然后一般就是通过xxl每半年，或者多久触发一次</p>
<h2 id="rowkey设计"><a href="#rowkey设计" class="headerlink" title="rowkey设计"></a>rowkey设计</h2><p>为什么要设计RK？</p>
<ul>
<li>写性能</li>
<li>读性能</li>
<li>读写数据均衡</li>
</ul>
<p>hbase本身就是key - value的</p>
<p>如果设计不好,则会导致数据写入不均衡,就容易造成数据倾斜之类的问题</p>
<p>数据写入: 是不是均匀的写入region</p>
<p>数据读取:是按照rowkey进行读取的</p>
<p>预分区:</p>
<ul>
<li>默认建表的时候就一个region,当这个region越来越大,所在机器上的压力也就越来越大</li>
<li>然后预分区,就是限定这个region的范围,他只能在一定区间</li>
<li>就相当于分出来很多个region</li>
<li><code>create &#39;lpl&#39;,&#39;user&#39;,SPLITS=&gt;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;]</code></li>
<li>相当于在default数据库下创建了一个表,叫lpl,然后有一个user列族,后面则是控制每个region的范围,</li>
<li>上述的region是均匀的分布在各个机器上的</li>
<li>但是这么指定也要注意rowkey的命名,让他均匀的在每个region,要不然如果一个region特别多就和之前一样了</li>
<li>针对于写入是如上 : 并不一定是均衡</li>
<li>针对于读取数据 : 也不一定精准(get)</li>
</ul>
<p>生产上:rk设计 + 二级索引 &#x3D;&gt; 精准get &#x3D;&gt; 这种是hbase本身不支持,要你自己来写的</p>
<p>rowkey设计原则:听听就行</p>
<ul>
<li>别太长 &#x3D;&gt; 占用存储空间</li>
<li>唯一性</li>
<li>散列原则<ul>
<li>rowkey均匀分布到节点上</li>
</ul>
</li>
<li>排序原则</li>
</ul>
<p>rowkey设计:</p>
<ul>
<li>加盐:<ul>
<li>在rowkey前面加上一个固定长度的随机数</li>
<li>缺点 : 第一个region必然是空的 ,不能精准读取(打破之前的数据排序规则)</li>
</ul>
</li>
<li>hash<ul>
<li>rk进行hash &#x3D;&gt; 作为前缀加上去,就形成一个新的rowkey &#x3D;&gt; 不会有重复数据</li>
<li>写入保证数据均衡</li>
<li>get的性能可以保证</li>
<li>scan会变低</li>
<li>但是已经算是最好的方法了</li>
<li>通过hash建表 <code>create &#39;tale&#39; , &#39;列族&#39;,&#123;NUMREGIONS =&gt; region的数量 , SPLITALGO =&gt; &#39;HexStringSplit&#39;&#125;</code></li>
<li>就会自动的按照hash进行分区</li>
</ul>
</li>
<li>反转</li>
</ul>
<h1 id="phoenix"><a href="#phoenix" class="headerlink" title="phoenix"></a>phoenix</h1><p>sql on hbase</p>
<p>支持jdbc链接</p>
<p>建表的时候默认有盐表,可以保证数据写入均衡</p>
<p>读数据的时候加索引就好了</p>
<p><a href="phoenix.apache.org">官网</a></p>
<p>他是一个OLTP的框架 : 联机事务处理</p>
<p>优点:</p>
<ul>
<li>可以用sql的方式链接hbase</li>
<li>hive 和 phoenix整合之后 很方便.表可以互通</li>
<li>spark</li>
</ul>
<p>注意它仅仅是个客户端,提交sql的和hive一样</p>
<p>部署:解压-&gt;软连接-&gt;环境变量-&gt;把phoenix-server-hbase-2.4-5.1.3.jar -&gt; cp到hbase的各个节点lib文件夹下</p>
<p>然后修改hbase配置hbase-site.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.table.sanity.checks<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.regionserver.wal.codec<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.hbase.regionserver.wal.IndexedWALEditCodec<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>phoenix.schema.isNamespaceMappingEnabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>phoenix.schema.mapSystemTablesToNamespace<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.coprocessor.abortonerror<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后还要再phoenix里的bin中的hbase-site.xml和这个同步</p>
<p>我们直接做软连接了</p>
<p>如果上述报错，则可以试试把三个都cp到hbase的lib下，以及使用命令 <code>hbase-cleanup.sh --cleanAll</code>然后重启hbase和phoenix</p>
<p><a href="https://phoenix.apache.org/language/index.html">phoenix学习使用</a></p>
<h2 id="简单的应用"><a href="#简单的应用" class="headerlink" title="简单的应用"></a>简单的应用</h2><h3 id="查看表-1"><a href="#查看表-1" class="headerlink" title="查看表"></a>查看表</h3><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">0: jdbc:phoenix:&gt; !tables</span><br><span class="line">+-----------+-------------+------------+--------------+---------+-----------+---------------------------+----------------+-------------+----------------+--------------+--------------+----------------+--------+</span><br><span class="line">|<span class="string"> TABLE_CAT </span>|<span class="string"> TABLE_SCHEM </span>|<span class="string"> TABLE_NAME </span>|<span class="string">  TABLE_TYPE  </span>|<span class="string"> REMARKS </span>|<span class="string"> TYPE_NAME </span>|<span class="string"> SELF_REFERENCING_COL_NAME </span>|<span class="string"> REF_GENERATION </span>|<span class="string"> INDEX_STATE </span>|<span class="string"> IMMUTABLE_ROWS </span>|<span class="string"> SALT_BUCKETS </span>|<span class="string"> MULTI_TENANT </span>|<span class="string"> VIEW_STATEMENT </span>|<span class="string"> VIEW_T </span>|</span><br><span class="line">+-----------+-------------+------------+--------------+---------+-----------+---------------------------+----------------+-------------+----------------+--------------+--------------+----------------+--------+</span><br><span class="line">|<span class="string">           </span>|<span class="string"> SYSTEM      </span>|<span class="string"> CATALOG    </span>|<span class="string"> SYSTEM TABLE </span>|<span class="string">         </span>|<span class="string">           </span>|<span class="string">                           </span>|<span class="string">                </span>|<span class="string">             </span>|<span class="string"> false          </span>|<span class="string"> null         </span>|<span class="string"> false        </span>|<span class="string">                </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">           </span>|<span class="string"> SYSTEM      </span>|<span class="string"> CHILD_LINK </span>|<span class="string"> SYSTEM TABLE </span>|<span class="string">         </span>|<span class="string">           </span>|<span class="string">                           </span>|<span class="string">                </span>|<span class="string">             </span>|<span class="string"> false          </span>|<span class="string"> null         </span>|<span class="string"> false        </span>|<span class="string">                </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">           </span>|<span class="string"> SYSTEM      </span>|<span class="string"> FUNCTION   </span>|<span class="string"> SYSTEM TABLE </span>|<span class="string">         </span>|<span class="string">           </span>|<span class="string">                           </span>|<span class="string">                </span>|<span class="string">             </span>|<span class="string"> false          </span>|<span class="string"> null         </span>|<span class="string"> false        </span>|<span class="string">                </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">           </span>|<span class="string"> SYSTEM      </span>|<span class="string"> LOG        </span>|<span class="string"> SYSTEM TABLE </span>|<span class="string">         </span>|<span class="string">           </span>|<span class="string">                           </span>|<span class="string">                </span>|<span class="string">             </span>|<span class="string"> true           </span>|<span class="string"> 32           </span>|<span class="string"> false        </span>|<span class="string">                </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">           </span>|<span class="string"> SYSTEM      </span>|<span class="string"> MUTEX      </span>|<span class="string"> SYSTEM TABLE </span>|<span class="string">         </span>|<span class="string">           </span>|<span class="string">                           </span>|<span class="string">                </span>|<span class="string">             </span>|<span class="string"> true           </span>|<span class="string"> null         </span>|<span class="string"> false        </span>|<span class="string">                </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">           </span>|<span class="string"> SYSTEM      </span>|<span class="string"> SEQUENCE   </span>|<span class="string"> SYSTEM TABLE </span>|<span class="string">         </span>|<span class="string">           </span>|<span class="string">                           </span>|<span class="string">                </span>|<span class="string">             </span>|<span class="string"> false          </span>|<span class="string"> null         </span>|<span class="string"> false        </span>|<span class="string">                </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">           </span>|<span class="string"> SYSTEM      </span>|<span class="string"> STATS      </span>|<span class="string"> SYSTEM TABLE </span>|<span class="string">         </span>|<span class="string">           </span>|<span class="string">                           </span>|<span class="string">                </span>|<span class="string">             </span>|<span class="string"> false          </span>|<span class="string"> null         </span>|<span class="string"> false        </span>|<span class="string">                </span>|<span class="string">        </span>|</span><br><span class="line">|<span class="string">           </span>|<span class="string"> SYSTEM      </span>|<span class="string"> TASK       </span>|<span class="string"> SYSTEM TABLE </span>|<span class="string">         </span>|<span class="string">           </span>|<span class="string">                           </span>|<span class="string">                </span>|<span class="string">             </span>|<span class="string"> false          </span>|<span class="string"> null         </span>|<span class="string"> false        </span>|<span class="string">                </span>|<span class="string">        </span>|</span><br><span class="line">+-----------+-------------+------------+--------------+---------+-----------+---------------------------+----------------+-------------+----------------+--------------+--------------+----------------+--------</span><br></pre></td></tr></table></figure>

<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>: jdbc:phoenix:&gt; <span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> test</span><br><span class="line">. . . .semicolon&gt; ;</span><br><span class="line"><span class="keyword">No</span> <span class="keyword">rows</span> affected (<span class="number">0.322</span> seconds)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="创建表-1"><a href="#创建表-1" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>: jdbc:phoenix:&gt; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test.my_test ( id <span class="type">BIGINT</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary key</span>, <span class="type">date</span> <span class="type">Date</span>);</span><br><span class="line"><span class="keyword">No</span> <span class="keyword">rows</span> affected (<span class="number">2.661</span> seconds)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后去hbase shell 查看</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">hbase:<span class="number">002</span>:<span class="number">0</span>&gt; list</span><br><span class="line"><span class="keyword">TABLE</span>                                                                                                                                                                                                      </span><br><span class="line"><span class="keyword">SYSTEM</span>:CATALOG                                                                                                                                                                                             </span><br><span class="line"><span class="keyword">SYSTEM</span>:CHILD_LINK                                                                                                                                                                                          </span><br><span class="line"><span class="keyword">SYSTEM</span>:<span class="keyword">FUNCTION</span>                                                                                                                                                                                            </span><br><span class="line"><span class="keyword">SYSTEM</span>:<span class="keyword">LOG</span>                                                                                                                                                                                                 </span><br><span class="line"><span class="keyword">SYSTEM</span>:MUTEX                                                                                                                                                                                               </span><br><span class="line"><span class="keyword">SYSTEM</span>:<span class="keyword">SEQUENCE</span>                                                                                                                                                                                            </span><br><span class="line"><span class="keyword">SYSTEM</span>:STATS                                                                                                                                                                                               </span><br><span class="line"><span class="keyword">SYSTEM</span>:TASK                                                                                                                                                                                                </span><br><span class="line">TEST:MY_TEST                                                                                                                                                                                               </span><br><span class="line"><span class="number">9</span> <span class="keyword">row</span>(s)</span><br><span class="line">Took <span class="number">0.0139</span> seconds                                                                                                                                                                                        </span><br><span class="line">=&gt; [&quot;SYSTEM:CATALOG&quot;, &quot;SYSTEM:CHILD_LINK&quot;, &quot;SYSTEM:FUNCTION&quot;, &quot;SYSTEM:LOG&quot;, &quot;SYSTEM:MUTEX&quot;, &quot;SYSTEM:SEQUENCE&quot;, &quot;SYSTEM:STATS&quot;, &quot;SYSTEM:TASK&quot;, &quot;TEST:MY_TEST&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>出现我们创建的表</p>
<p>注意在hbase里表以及数据库的名字会大写,以及表名</p>
<h3 id="插入数据-1"><a href="#插入数据-1" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>: jdbc:phoenix:&gt; UPSERT INTO MY_TEST(id,date) VALUES(<span class="number">1</span>,<span class="comment">&#x27;2020-12-01&#x27;);</span></span><br><span class="line"><span class="symbol">1 </span>row affected (<span class="number">0.498</span> seconds)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在hbase里查看数据</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line"><span class="name">hbase</span>:<span class="number">004</span>:<span class="number">0</span>&gt; scan <span class="string">&#x27;TEST:MY_TEST&#x27;</span></span><br><span class="line">ROW                                                   COLUMN+CELL                                                                                                                                          </span><br><span class="line"> \x80\x00\x00\x00\x00\x00\x00\x01                     column=<span class="number">0</span>:\x00\x00\x00\x00, timestamp=<span class="number">2023</span><span class="number">-02</span><span class="number">-20</span><span class="name">T12</span>:<span class="number">29</span>:<span class="number">36.819</span>, value=x                                                                                </span><br><span class="line"> \x80\x00\x00\x00\x00\x00\x00\x01                     column=<span class="number">0</span>:\x80\x0B, timestamp=<span class="number">2023</span><span class="number">-02</span><span class="number">-20</span><span class="name">T12</span>:<span class="number">29</span>:<span class="number">36.819</span>, value=\x80\x00\x01v\x1B\x99L\x00                                                               </span><br><span class="line"><span class="number">1</span> row(s)</span><br><span class="line">Took <span class="number">0.0540</span> seconds  </span><br></pre></td></tr></table></figure>

<p>这个upsert &#x3D;&gt; insert + update</p>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">0: jdbc:phoenix:&gt; select * from test.my_test;</span></span><br><span class="line"><span class="section">+----+------------+</span></span><br><span class="line"><span class="section">| ID |    DATE    |</span></span><br><span class="line"><span class="section">+----+------------+</span></span><br><span class="line"><span class="section">| 1  | 2020-12-01 |</span></span><br><span class="line"><span class="section">+----+------------+</span></span><br><span class="line">1 row selected (0.482 seconds)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查看字段"><a href="#查看字段" class="headerlink" title="查看字段"></a>查看字段</h3><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">!describe test.my_test;</span><br><span class="line">+-----------+-------------+------------+-------------+-----------+-----------+-------------+---------------+----------------+----------------+----------+---------+------------+---------------+----------------+</span><br><span class="line">|<span class="string"> TABLE_CAT </span>|<span class="string"> TABLE_SCHEM </span>|<span class="string"> TABLE_NAME </span>|<span class="string"> COLUMN_NAME </span>|<span class="string"> DATA_TYPE </span>|<span class="string"> TYPE_NAME </span>|<span class="string"> COLUMN_SIZE </span>|<span class="string"> BUFFER_LENGTH </span>|<span class="string"> DECIMAL_DIGITS </span>|<span class="string"> NUM_PREC_RADIX </span>|<span class="string"> NULLABLE </span>|<span class="string"> REMARKS </span>|<span class="string"> COLUMN_DEF </span>|<span class="string"> SQL_DATA_TYPE </span>|<span class="string"> SQL_DATETIME_S </span>|</span><br><span class="line">+-----------+-------------+------------+-------------+-----------+-----------+-------------+---------------+----------------+----------------+----------+---------+------------+---------------+----------------+</span><br><span class="line">|<span class="string">           </span>|<span class="string"> TEST        </span>|<span class="string"> MY_TEST    </span>|<span class="string"> ID          </span>|<span class="string"> -5        </span>|<span class="string"> BIGINT    </span>|<span class="string"> null        </span>|<span class="string"> null          </span>|<span class="string"> null           </span>|<span class="string"> null           </span>|<span class="string"> 0        </span>|<span class="string">         </span>|<span class="string">            </span>|<span class="string"> null          </span>|<span class="string"> null           </span>|</span><br><span class="line">|<span class="string">           </span>|<span class="string"> TEST        </span>|<span class="string"> MY_TEST    </span>|<span class="string"> DATE        </span>|<span class="string"> 91        </span>|<span class="string"> DATE      </span>|<span class="string"> null        </span>|<span class="string"> null          </span>|<span class="string"> null           </span>|<span class="string"> null           </span>|<span class="string"> 1        </span>|<span class="string">         </span>|<span class="string">            </span>|<span class="string"> null          </span>|<span class="string"> null           </span>|</span><br><span class="line">+-----------+-------------+------------+-------------+-----------+-----------+-------------+---------------+----------------+----------------+----------+---------+------------+---------------+----------------+</span><br><span class="line">0: jdbc:phoenix:&gt; </span><br></pre></td></tr></table></figure>

<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>数值类型</p>
<ul>
<li>整数：bigint，interger，smallint，tinyint</li>
<li>小数： double，float，decimal</li>
<li>无符号：unsigned_int，unsigned_date，unsigned_timestamp，unsigned_long等</li>
</ul>
<p>字符串</p>
<ul>
<li>varchar</li>
</ul>
<p>日期</p>
<ul>
<li>date,time,timestamp</li>
</ul>
<p>复杂类型</p>
<ul>
<li>array</li>
</ul>
<p>其他还有boolean等类型</p>
<p>具体数据类型在<a href="https://phoenix.apache.org/language/datatypes.html">官网</a>详细请在官网查看</p>
<h2 id="sql语法"><a href="#sql语法" class="headerlink" title="sql语法"></a>sql语法</h2><h3 id="ddl"><a href="#ddl" class="headerlink" title="ddl"></a>ddl</h3><p>非查询的，在phoenix里创建数据库叫创建schema</p>
<p>之前配置的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>phoenix.schema.isNamespaceMappingEnabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>phoenix.schema.mapSystemTablesToNamespace<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>就是要让phoenix和hbase里的库一一对应，他的官网给的参数不全，所以搜不到很正常，我这个是5.1.2的正常使用</p>
<p>配置完之后就相当于是你在phoenix里创建一个，同时也映射到hbase里</p>
<p>在phoenix里我们主要创建的表是盐表，</p>
<p>创建盐表 <code>create table test.test_salt(id bigint primary key,name varchar,age integer,address varchar) SALT_BUCKETS = 3;</code></p>
<p><code>SALT_BUCKETS</code>的数值设置要按照hbase有几台regionserver来进行设置，就和hive里的桶表类似</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">0: jdbc:phoenix:&gt; create table test.test_salt(id bigint primary key,name varchar,age integer,address varchar) SALT_BUCKETS = 3;</span><br><span class="line">No rows affected (3.269 seconds)</span><br><span class="line">0: jdbc:phoenix:&gt; !describe test.test_salt;</span><br><span class="line">+-----------+-------------+------------+-------------+-----------+-----------+-------------+---------------+----------------+----------------+----------+---------+------------+---------------+----------------+</span><br><span class="line">|<span class="string"> TABLE_CAT </span>|<span class="string"> TABLE_SCHEM </span>|<span class="string"> TABLE_NAME </span>|<span class="string"> COLUMN_NAME </span>|<span class="string"> DATA_TYPE </span>|<span class="string"> TYPE_NAME </span>|<span class="string"> COLUMN_SIZE </span>|<span class="string"> BUFFER_LENGTH </span>|<span class="string"> DECIMAL_DIGITS </span>|<span class="string"> NUM_PREC_RADIX </span>|<span class="string"> NULLABLE </span>|<span class="string"> REMARKS </span>|<span class="string"> COLUMN_DEF </span>|<span class="string"> SQL_DATA_TYPE </span>|<span class="string"> SQL_DATETIME_S </span>|</span><br><span class="line">+-----------+-------------+------------+-------------+-----------+-----------+-------------+---------------+----------------+----------------+----------+---------+------------+---------------+----------------+</span><br><span class="line">|<span class="string">           </span>|<span class="string"> TEST        </span>|<span class="string"> TEST_SALT  </span>|<span class="string"> ID          </span>|<span class="string"> -5        </span>|<span class="string"> BIGINT    </span>|<span class="string"> null        </span>|<span class="string"> null          </span>|<span class="string"> null           </span>|<span class="string"> null           </span>|<span class="string"> 0        </span>|<span class="string">         </span>|<span class="string">            </span>|<span class="string"> null          </span>|<span class="string"> null           </span>|</span><br><span class="line">|<span class="string">           </span>|<span class="string"> TEST        </span>|<span class="string"> TEST_SALT  </span>|<span class="string"> NAME        </span>|<span class="string"> 12        </span>|<span class="string"> VARCHAR   </span>|<span class="string"> null        </span>|<span class="string"> null          </span>|<span class="string"> null           </span>|<span class="string"> null           </span>|<span class="string"> 1        </span>|<span class="string">         </span>|<span class="string">            </span>|<span class="string"> null          </span>|<span class="string"> null           </span>|</span><br><span class="line">|<span class="string">           </span>|<span class="string"> TEST        </span>|<span class="string"> TEST_SALT  </span>|<span class="string"> AGE         </span>|<span class="string"> 4         </span>|<span class="string"> INTEGER   </span>|<span class="string"> null        </span>|<span class="string"> null          </span>|<span class="string"> null           </span>|<span class="string"> null           </span>|<span class="string"> 1        </span>|<span class="string">         </span>|<span class="string">            </span>|<span class="string"> null          </span>|<span class="string"> null           </span>|</span><br><span class="line">|<span class="string">           </span>|<span class="string"> TEST        </span>|<span class="string"> TEST_SALT  </span>|<span class="string"> ADDRESS     </span>|<span class="string"> 12        </span>|<span class="string"> VARCHAR   </span>|<span class="string"> null        </span>|<span class="string"> null          </span>|<span class="string"> null           </span>|<span class="string"> null           </span>|<span class="string"> 1        </span>|<span class="string">         </span>|<span class="string">            </span>|<span class="string"> null          </span>|<span class="string"> null           </span>|</span><br><span class="line">+-----------+-------------+------------+-------------+-----------+-----------+-------------+---------------+----------------+----------------+----------+---------+------------+---------------+----------------+</span><br><span class="line">0: jdbc:phoenix:&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在hbase的web界面查看如下：<br><img src="https://pic.imgdb.cn/item/63f354ebf144a01007a979e5.jpg"></p>
<p>上述就是phoenix创建的盐表所分的region</p>
<p>如果在hbase里用4个随机数创建的盐表，则是region是5个</p>
<p>而在phoenix里创建盐表的时候region的数量是根据 <code>SALT_BUCKETS</code>来的，就是相当于用几个随机数创建</p>
<h3 id="dml"><a href="#dml" class="headerlink" title="dml"></a>dml</h3><p>数据操作的</p>
<p>upsert：insert + updata</p>
<p>他的使用和insert是一样的和mysql里的insert也类似</p>
<p>它也可以使用hint的写法控制分区</p>
<p>插入数据 <code>upsert into test.test_salt values(1,&#39;zs&#39;,13,&#39;北京&#39;)；</code></p>
<p>我们多插入几条数据查看盐表的region写数据的情况</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">upsert</span> <span class="keyword">into</span> test.test_salt <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;zs&#x27;</span>,<span class="number">13</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"><span class="keyword">upsert</span> <span class="keyword">into</span> test.test_salt <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;zlisi&#x27;</span>,<span class="number">11</span>,<span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"><span class="keyword">upsert</span> <span class="keyword">into</span> test.test_salt <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;wanghwu&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;河南&#x27;</span>);</span><br><span class="line"><span class="keyword">upsert</span> <span class="keyword">into</span> test.test_salt <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;dam&#x27;</span>,<span class="number">15</span>,<span class="string">&#x27;黑龙江&#x27;</span>);</span><br><span class="line"><span class="keyword">upsert</span> <span class="keyword">into</span> test.test_salt <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;huamul&#x27;</span>,<span class="number">14</span>,<span class="string">&#x27;子涵&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如下图：</p>
<p><img src="https://pic.imgdb.cn/item/63f35801f144a01007ad7320.jpg"></p>
<p>上面有12的是因为我之前写入的时候主键忘记改了，导致一直更新一条数据，所以才写12次</p>
<p>通过图片可知，phoenix所造的是读写均衡的盐表</p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引的好处：</p>
<p>读的速度增加</p>
<p>在phoenix里索引的种类是比较多的<a href="https://phoenix.apache.org/secondary_indexing.html">索引的分类</a></p>
<p>当我们不加索引的时候执行查看语句，我们，查看下他的执行计划</p>
<p><code>explain select * from test.test_salt;</code></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">0: jdbc:phoenix:&gt; explain select * from test.test_salt;</span></span><br><span class="line"><span class="section">+-------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line"><span class="section">|                                  PLAN                                   | EST_BYTES_READ | EST_ROWS_READ | EST_INFO_TS |</span></span><br><span class="line"><span class="section">+-------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line"><span class="section">| CLIENT 3-CHUNK PARALLEL 3-WAY ROUND ROBIN FULL SCAN OVER TEST:TEST_SALT | null           | null          | null        |</span></span><br><span class="line"><span class="section">+-------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line">1 row selected (0.015 seconds)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>无论加不加判断条件他都是全表扫描的</p>
<h3 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h3><p>就可以让它根据索引来选择，不用全表扫描</p>
<p>加索引的时候是和报表有关的</p>
<p>索引一般是加到经常使用的维度字段的</p>
<p><code>create index test_salt_index1 on test.test_salt(name,age);</code></p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>: jdbc:phoenix:&gt; create index test_salt_index1 <span class="keyword">ON</span> test.test_salt(<span class="keyword">name</span>,age);</span><br><span class="line"><span class="symbol">5 </span>rows affected (<span class="number">6.274</span> seconds)</span><br><span class="line"><span class="number">0</span>: jdbc:phoenix:&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>但是创建索引之后，要是不使用是没有用的</p>
<p>有的sql是走索引的 有的是不走的</p>
<p>执行以下语句</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">0: jdbc:phoenix:&gt; explain select * from test.test_salt;</span></span><br><span class="line"><span class="section">+-------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line"><span class="section">|                                  PLAN                                   | EST_BYTES_READ | EST_ROWS_READ | EST_INFO_TS |</span></span><br><span class="line"><span class="section">+-------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line"><span class="section">| CLIENT 3-CHUNK PARALLEL 3-WAY ROUND ROBIN FULL SCAN OVER TEST:TEST_SALT | null           | null          | null        |</span></span><br><span class="line"><span class="section">+-------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line">1 row selected (0.021 seconds)</span><br><span class="line"><span class="section">0: jdbc:phoenix:&gt; explain select * from test.test_salt where name = &#x27;zs&#x27;;</span></span><br><span class="line"><span class="section">+-------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line"><span class="section">|                                  PLAN                                   | EST_BYTES_READ | EST_ROWS_READ | EST_INFO_TS |</span></span><br><span class="line"><span class="section">+-------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line">| CLIENT 3-CHUNK PARALLEL 3-WAY ROUND ROBIN FULL SCAN OVER TEST:TEST_SALT | null           | null          | null        |</span><br><span class="line"><span class="section">|     SERVER FILTER BY NAME = &#x27;zs&#x27;                                        | null           | null          | null        |</span></span><br><span class="line"><span class="section">+-------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line">2 rows selected (0.019 seconds)</span><br><span class="line">0: jdbc:phoenix:&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这些都是全表扫描的因为有FULL SCAN</p>
<p>正常如果带*都是不走索引的，我们要选择索引字段，才会走索引</p>
<p>如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>: jdbc:phoenix:&gt; <span class="keyword">explain</span> <span class="keyword">select</span> <span class="type">name</span> <span class="keyword">from</span> test.test_salt; </span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line">|                                      PLAN                                      | EST_BYTES_READ | EST_ROWS_READ | EST_INFO_TS |</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line">| CLIENT <span class="number">3</span>-CHUNK PARALLEL <span class="number">3</span>-WAY ROUND ROBIN <span class="keyword">FULL</span> SCAN <span class="keyword">OVER</span> TEST:TEST_SALT_INDEX1 | <span class="keyword">null</span>           | <span class="keyword">null</span>          | <span class="keyword">null</span>        |</span><br><span class="line">|     <span class="keyword">SERVER</span> <span class="keyword">FILTER</span> <span class="keyword">BY</span> FIRST KEY <span class="keyword">ONLY</span>                                            | <span class="keyword">null</span>           | <span class="keyword">null</span>          | <span class="keyword">null</span>        |</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> selected (<span class="number">0.071</span> seconds)</span><br><span class="line"><span class="number">0</span>: jdbc:phoenix:&gt; <span class="keyword">explain</span> <span class="keyword">select</span> age <span class="keyword">from</span> test.test_salt;</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line">|                                      PLAN                                      | EST_BYTES_READ | EST_ROWS_READ | EST_INFO_TS |</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line">| CLIENT <span class="number">3</span>-CHUNK PARALLEL <span class="number">3</span>-WAY ROUND ROBIN <span class="keyword">FULL</span> SCAN <span class="keyword">OVER</span> TEST:TEST_SALT_INDEX1 | <span class="keyword">null</span>           | <span class="keyword">null</span>          | <span class="keyword">null</span>        |</span><br><span class="line">|     <span class="keyword">SERVER</span> <span class="keyword">FILTER</span> <span class="keyword">BY</span> FIRST KEY <span class="keyword">ONLY</span>                                            | <span class="keyword">null</span>           | <span class="keyword">null</span>          | <span class="keyword">null</span>        |</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> selected (<span class="number">0.015</span> seconds)</span><br><span class="line"><span class="number">0</span>: jdbc:phoenix:&gt; <span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="type">name</span> <span class="keyword">from</span> test.test_salt;</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line">|                                      PLAN                                      | EST_BYTES_READ | EST_ROWS_READ | EST_INFO_TS |</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line">| CLIENT <span class="number">3</span>-CHUNK PARALLEL <span class="number">3</span>-WAY ROUND ROBIN <span class="keyword">FULL</span> SCAN <span class="keyword">OVER</span> TEST:TEST_SALT_INDEX1 | <span class="keyword">null</span>           | <span class="keyword">null</span>          | <span class="keyword">null</span>        |</span><br><span class="line">|     <span class="keyword">SERVER</span> <span class="keyword">FILTER</span> <span class="keyword">BY</span> FIRST KEY <span class="keyword">ONLY</span>                                            | <span class="keyword">null</span>           | <span class="keyword">null</span>          | <span class="keyword">null</span>        |</span><br><span class="line">+<span class="comment">--------------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> selected (<span class="number">0.022</span> seconds)</span><br><span class="line"><span class="number">0</span>: jdbc:phoenix:&gt; <span class="keyword">explain</span> <span class="keyword">select</span> age,<span class="type">name</span> <span class="keyword">from</span> test.test_salt <span class="keyword">where</span> <span class="type">name</span> = <span class="string">&#x27;zs&#x27;</span>;</span><br><span class="line">+<span class="comment">-----------------------------------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line">|                                                PLAN                                                 | EST_BYTES_READ | EST_ROWS_READ | EST_INFO_TS |</span><br><span class="line">+<span class="comment">-----------------------------------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line">| CLIENT <span class="number">3</span>-CHUNK PARALLEL <span class="number">3</span>-WAY ROUND ROBIN RANGE SCAN <span class="keyword">OVER</span> TEST:TEST_SALT_INDEX1 [<span class="number">0</span>,<span class="string">&#x27;zs&#x27;</span>] - [<span class="number">2</span>,<span class="string">&#x27;zs&#x27;</span>] | <span class="keyword">null</span>           | <span class="keyword">null</span>          | <span class="keyword">null</span>        |</span><br><span class="line">|     <span class="keyword">SERVER</span> <span class="keyword">FILTER</span> <span class="keyword">BY</span> FIRST KEY <span class="keyword">ONLY</span>                                                                 | <span class="keyword">null</span>           | <span class="keyword">null</span>          | <span class="keyword">null</span>        |</span><br><span class="line">+<span class="comment">-----------------------------------------------------------------------------------------------------+----------------+---------------+-------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> selected (<span class="number">0.016</span> seconds)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上述：</p>
<p>我们如果想使用索引，则要在判断条件里加上索引字段，要不然就不会使用索引</p>
<p>phoenix和mysql的索引是不一样的，phoenix的索引是以表存在底层的，mysql是不会存在的</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">0: jdbc:phoenix:&gt; !tables</span><br><span class="line">+-----------+-------------+------------------+--------------+---------+-----------+---------------------------+----------------+-------------+----------------+--------------+--------------+----------------+--+</span><br><span class="line">|<span class="string"> TABLE_CAT </span>|<span class="string"> TABLE_SCHEM </span>|<span class="string">    TABLE_NAME    </span>|<span class="string">  TABLE_TYPE  </span>|<span class="string"> REMARKS </span>|<span class="string"> TYPE_NAME </span>|<span class="string"> SELF_REFERENCING_COL_NAME </span>|<span class="string"> REF_GENERATION </span>|<span class="string"> INDEX_STATE </span>|<span class="string"> IMMUTABLE_ROWS </span>|<span class="string"> SALT_BUCKETS </span>|<span class="string"> MULTI_TENANT </span>|<span class="string"> VIEW_STATEMENT </span>|<span class="string">  </span>|</span><br><span class="line">+-----------+-------------+------------------+--------------+---------+-----------+---------------------------+----------------+-------------+----------------+--------------+--------------+----------------+--+</span><br><span class="line">|<span class="string">           </span>|<span class="string"> TEST        </span>|<span class="string"> TEST_SALT_INDEX1 </span>|<span class="string"> INDEX        </span>|<span class="string">         </span>|<span class="string">           </span>|<span class="string">                           </span>|<span class="string">                </span>|<span class="string"> ACTIVE      </span>|<span class="string"> false          </span>|<span class="string"> 3            </span>|<span class="string"> false        </span>|<span class="string">                </span>|<span class="string">  </span></span><br></pre></td></tr></table></figure>

<p>查看里面的内容如下</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">0: jdbc:phoenix:&gt; select * from test.TEST_SALT_INDEX1;</span></span><br><span class="line"><span class="section">+---------+-------+-----+</span></span><br><span class="line"><span class="section">| 0:NAME  | 0:AGE | :ID |</span></span><br><span class="line"><span class="section">+---------+-------+-----+</span></span><br><span class="line">| dam     | 15    | 4   |</span><br><span class="line">| huamul  | 14    | 5   |</span><br><span class="line">| zs      | 13    | 1   |</span><br><span class="line">| zlisi   | 11    | 2   |</span><br><span class="line"><span class="section">| wanghwu | 18    | 3   |</span></span><br><span class="line"><span class="section">+---------+-------+-----+</span></span><br><span class="line">5 rows selected (0.043 seconds)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上述自动把id加上了，是因为id是主键，就是hbase里的rowkey</p>
<p>加索引快的原因 &#x3D;&gt; 是把hbase里的rowkey再次进行索引，原本hbase里的rowkey就是相当于一层索引的</p>
<p>这个也就是phoenix的索引被称为二级索引的原因</p>
<p>触发索引流程：</p>
<ul>
<li>先去索引表，然后找到对应的rowkey</li>
<li>然后通过这个rowkey &#x3D;&gt; 进行精准的get操作</li>
</ul>
<p>但是当数据越来越多的时候，索引表也会越来越多，我们该如何解决？</p>
<p>我现在的想法是给这个索引表再创建索引</p>
<p>问！</p>
<h1 id="phoenix和hive打通"><a href="#phoenix和hive打通" class="headerlink" title="phoenix和hive打通"></a>phoenix和hive打通</h1><p>hbase + hive 打通</p>
<p>phoenix + hive 打通</p>
<p>我们选择下面的那种，因为hbase的数据结构到hive里可能会出问题<a href="https://phoenix.apache.org/hive_storage_handler.html">官网</a></p>
<p>他是有要求的</p>
<ul>
<li>phoenix 4.8+</li>
<li>hive 1.2+</li>
</ul>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>hbase</tag>
      </tags>
  </entry>
  <entry>
    <title>同步工具</title>
    <url>/2023/02/02/2-2/</url>
    <content><![CDATA[<h1 id="api"><a href="#api" class="headerlink" title="api"></a>api</h1><h2 id="jdbctohive"><a href="#jdbctohive" class="headerlink" title="jdbctohive"></a>jdbctohive</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package project</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="keyword">sql</span>.catalog.Catalog</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="keyword">sql</span>.&#123;DataFrame, Dataset, <span class="keyword">Row</span>, SparkSession&#125;</span><br><span class="line"><span class="keyword">import</span> tool.sqlUtils</span><br><span class="line"><span class="keyword">import</span> tool.getmysqldf</span><br><span class="line"><span class="keyword">import</span> tool.savefile</span><br><span class="line"><span class="keyword">import</span> tool.readfile</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.utils.ParameterTool</span><br><span class="line"><span class="keyword">object</span> jdbctohive&#123;</span><br><span class="line">  def apply(parameterTool: ParameterTool): jdbctohive = <span class="built_in">new</span> jdbctohive(parameterTool)</span><br><span class="line"></span><br><span class="line">  def main(args: <span class="keyword">Array</span>[String]): Unit = &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length==<span class="number">0</span>)&#123;</span><br><span class="line">      println(</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">          |欢迎使用本程序</span><br><span class="line">          |参数详情 mysql hive</span><br><span class="line">          |-------------------------mysql</span><br><span class="line">          |url 例子 ： jdbc:mysql://bigdata2:3306/try</span><br><span class="line">          |user 例子 ： root</span><br><span class="line">          |password 例子 ： liuzihan010616</span><br><span class="line">          |tablename =&gt; 支持谓词下压  例子 ： emp 或者 select * from emp 等</span><br><span class="line">          |driver =&gt; com.mysql.jdbc.Driver</span><br><span class="line">          |---------------------------hive</span><br><span class="line">          |mode模式 overwrite append 等</span><br><span class="line">          |hive中的table 例子 bigdata.emp</span><br><span class="line">          |可选参数 分区字段 自动开启的是动态分区 例子 deptno</span><br><span class="line">          |分区字段 [字段值] [标志位]：代表是不是只更新这一个分区的数据</span><br><span class="line">          |jdbc:mysql://bigdata2:3306/try root liuzihan010616 &quot;<span class="keyword">select</span> * <span class="keyword">from</span> emp &quot; com.mysql.jdbc.Driver append default.tmp deptno,sal,test,re 999,888</span><br><span class="line">          |&quot;&quot;&quot;.stripMargin)</span><br><span class="line">    &#125;</span><br><span class="line">    val tool = ParameterTool.fromArgs(args)</span><br><span class="line">    jdbctohive(tool).excute(args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> jdbctohive(parameterTool: ParameterTool) &#123;</span><br><span class="line">  <span class="keyword">System</span>.setProperty(&quot;HADOOP_USER_NAME&quot;,&quot;hadoop&quot;)</span><br><span class="line">  val spark = SparkSession.builder().appName(&quot;sqoop&quot;).master(&quot;local[4]&quot;).enableHiveSupport().getOrCreate()</span><br><span class="line">  spark.sparkContext.setCheckpointDir(&quot;/tmp/checkpoint&quot;)</span><br><span class="line"></span><br><span class="line">  val getmysqldf = <span class="built_in">new</span> readfile</span><br><span class="line">  val sqlUtils = <span class="built_in">new</span> sqlUtils</span><br><span class="line">  val saveFile = <span class="built_in">new</span> savefile</span><br><span class="line">  private val catalog: Catalog = spark.catalog</span><br><span class="line">  var changecolunm = <span class="keyword">false</span></span><br><span class="line">  <span class="keyword">import</span> spark.implicits._</span><br><span class="line">  <span class="keyword">import</span> org.apache.spark.<span class="keyword">sql</span>.<span class="keyword">functions</span>._</span><br><span class="line"></span><br><span class="line">  val url = parameterTool.getRequired(&quot;url&quot;)</span><br><span class="line">  val <span class="keyword">user</span> = parameterTool.getRequired(&quot;user&quot;)</span><br><span class="line">  val <span class="keyword">password</span> = parameterTool.getRequired(&quot;password&quot;)</span><br><span class="line">  val table = parameterTool.getRequired(&quot;table&quot;)</span><br><span class="line">  val driver = parameterTool.getRequired(&quot;driver&quot;)</span><br><span class="line">  val mode = parameterTool.getRequired(&quot;mode&quot;)</span><br><span class="line">  val hivetable = parameterTool.getRequired(&quot;hivetable&quot;)</span><br><span class="line">  val hivepartition = parameterTool.<span class="keyword">get</span>(&quot;hivepartition&quot;,<span class="keyword">null</span>)</span><br><span class="line">  val partitionValues = parameterTool.<span class="keyword">get</span>(&quot;partitionValues&quot;)</span><br><span class="line">  val insertpartition = parameterTool.<span class="keyword">get</span>(&quot;insertpartition&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  def excute(args: <span class="keyword">Array</span>[String]): Unit = &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 获取jdbc的df</span><br><span class="line">    val mysqlconnect = getmysqldf.getmysqldataframe(spark, url, <span class="keyword">user</span>, <span class="keyword">password</span>, <span class="keyword">table</span> , driver)</span><br><span class="line">    // 验证指示</span><br><span class="line">    mysqlconnect.<span class="keyword">show</span>()</span><br><span class="line">    // 生成hive参数数组</span><br><span class="line">//    var hiveconf = <span class="built_in">new</span> <span class="keyword">Array</span>[String](args.length<span class="number">-5</span>)</span><br><span class="line">//    hiveconf = util.Arrays.copyOfRange(args, <span class="number">5</span>, args.length)</span><br><span class="line">    //hiveconf.<span class="keyword">foreach</span>(println(_))</span><br><span class="line">    jdbctohive(args.length,catalog,mysqlconnect)</span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  def changecolnums(<span class="type">int</span>: <span class="type">Int</span>,resourcesql:DataFrame) =&#123;</span><br><span class="line">    var finallyresult:Dataset[<span class="keyword">Row</span>] = <span class="keyword">null</span> // 最终结果集</span><br><span class="line">    var frame:DataFrame = <span class="keyword">null</span> // 中间变量</span><br><span class="line">    val strings2 = hivepartition.split(&quot;,&quot;)</span><br><span class="line">    var hiveconclumns = spark.<span class="keyword">table</span>(hivetable).<span class="keyword">columns</span> // hive的列数</span><br><span class="line">    //hiveconclumns.<span class="keyword">foreach</span>(println((_))) // 验证hive的列数</span><br><span class="line">    var mysqlconnect:DataFrame = resourcesql // 设置数据源的resource</span><br><span class="line"></span><br><span class="line">    // 判断分区字段在不在jdbc的数据里，如果不在，则在jdbc的数据源中先添加上分区字段</span><br><span class="line">    var strings1:<span class="keyword">Array</span>[String] =<span class="keyword">null</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="type">int</span> &gt; <span class="number">8</span> &amp;&amp; partitionValues != <span class="keyword">null</span>)&#123;</span><br><span class="line">      strings1 = partitionValues.split(&quot;,&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    var flagtmp:<span class="type">Int</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (elem &lt;- strings2)&#123;</span><br><span class="line">      <span class="keyword">if</span> (!mysqlconnect.<span class="keyword">columns</span>.contains(elem))&#123;</span><br><span class="line">        println(elem)</span><br><span class="line">        println(strings1(flagtmp))</span><br><span class="line">        mysqlconnect = mysqlconnect.withColumn(elem,lit(strings1(flagtmp)))</span><br><span class="line">        flagtmp = flagtmp + <span class="number">1</span></span><br><span class="line">        mysqlconnect.<span class="keyword">show</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    val jdbcconclumns = mysqlconnect.<span class="keyword">columns</span> // jdbc的列数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    var jdbcoldsource:Dataset[<span class="keyword">Row</span>] = <span class="keyword">null</span> // 源数据库的数据 <span class="keyword">checkpoint</span>是为了破坏数据均衡，以后能编写变读取</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="type">int</span> == <span class="number">10</span>)&#123;</span><br><span class="line">      hivepartition.split(&quot;,&quot;)(<span class="number">0</span>) match &#123;</span><br><span class="line">        <span class="keyword">case</span> &quot;&quot; =&gt; &#123;</span><br><span class="line">          println(&quot;-------------------------无操作&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> _ =&gt; &#123;</span><br><span class="line">          hivepartition.split(&quot;,&quot;).length match &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">              jdbcoldsource = spark.<span class="keyword">sql</span>(</span><br><span class="line">                s&quot;&quot;&quot;</span><br><span class="line">                   |select * from $&#123;hivetable&#125; where $&#123;hivepartition&#125; != $&#123;partitionValues&#125;</span><br><span class="line">                   |&quot;&quot;&quot;.stripMargin).<span class="keyword">checkpoint</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> _ =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">              var tmpstring:String  = <span class="keyword">null</span></span><br><span class="line">              var flag:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">                 val flagvalue = partitionValues.split(&quot;,&quot;)</span><br><span class="line">                  <span class="keyword">for</span> (elem &lt;- hivepartition.split(&quot;,&quot;))&#123;</span><br><span class="line">                 <span class="keyword">if</span> (elem == hivepartition.split(&quot;,&quot;)(hivepartition.split(&quot;,&quot;).length<span class="number">-1</span>))&#123;</span><br><span class="line">                   tmpstring = tmpstring + elem + &quot;!=&quot; + flagvalue(flag)</span><br><span class="line">                 &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   tmpstring = tmpstring + elem + &quot;!=&quot; + flagvalue(flag) + &quot;and&quot;</span><br><span class="line">                 &#125;</span><br><span class="line">                    flag = flag + <span class="number">1</span></span><br><span class="line">              &#125;</span><br><span class="line">              jdbcoldsource = spark.<span class="keyword">sql</span>(</span><br><span class="line">                s&quot;&quot;&quot;</span><br><span class="line">                   |select * from $&#123;hivetable&#125; where $&#123;tmpstring&#125;</span><br><span class="line">                   |&quot;&quot;&quot;.stripMargin).<span class="keyword">checkpoint</span>()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      jdbcoldsource =  spark.<span class="keyword">sql</span>(</span><br><span class="line">        s&quot;&quot;&quot;</span><br><span class="line">           |select * from $&#123;hivetable&#125;</span><br><span class="line">           |&quot;&quot;&quot;.stripMargin).<span class="keyword">checkpoint</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var existcolunms: <span class="keyword">Array</span>[String] = <span class="keyword">null</span>  // 设置hive或者mysql的额外列</span><br><span class="line">    var resultdf: DataFrame = jdbcoldsource // 获取hive的数据原始数据</span><br><span class="line"></span><br><span class="line">    // 判断是hive的列多，还是数据源的列数多</span><br><span class="line">    <span class="keyword">if</span> (hiveconclumns.length &gt;= jdbcconclumns.length)&#123;</span><br><span class="line">      // 判断额外列的存在</span><br><span class="line">      existcolunms= hiveconclumns.<span class="keyword">filter</span>(hivecol =&gt; &#123;</span><br><span class="line">        val <span class="type">bool</span> = jdbcconclumns.map(jdbccol =&gt; &#123;</span><br><span class="line">          jdbccol == hivecol</span><br><span class="line">        &#125;).contains(<span class="keyword">true</span>)</span><br><span class="line">        !<span class="type">bool</span></span><br><span class="line">      &#125;)</span><br><span class="line">      // 判断两个列数是不是相等</span><br><span class="line">        <span class="keyword">if</span> (existcolunms.isEmpty) &#123;</span><br><span class="line">          frame = mysqlconnect.selectExpr(hiveconclumns: _*)</span><br><span class="line">          frame</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        // 列数不相等的时候让列数少的加列</span><br><span class="line">        resultdf = mysqlconnect</span><br><span class="line">        <span class="keyword">for</span> (elem &lt;- existcolunms)&#123;</span><br><span class="line">          resultdf = resultdf.withColumn(elem, lit(<span class="keyword">null</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        // 对字段进行排序 ， 让分区数据的分区字段在最后一列</span><br><span class="line">        frame = resultdf.selectExpr(hiveconclumns: _*)</span><br><span class="line">        // 验证数据</span><br><span class="line">        frame.<span class="keyword">show</span>()</span><br><span class="line">        // 整合历史数据</span><br><span class="line">        finallyresult = jdbcoldsource.<span class="keyword">union</span>(frame)</span><br><span class="line">        // 验证数据</span><br><span class="line">        finallyresult.<span class="keyword">show</span>()</span><br><span class="line">        changecolunm = <span class="keyword">true</span></span><br><span class="line">        finallyresult</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      // 数据的列多</span><br><span class="line">      existcolunms= jdbcconclumns.<span class="keyword">filter</span>(jdbccol =&gt; &#123;</span><br><span class="line">        val <span class="type">bool</span> = hiveconclumns.map(hivecol =&gt; &#123;</span><br><span class="line">          jdbccol == hivecol</span><br><span class="line">        &#125;).contains(<span class="keyword">true</span>)</span><br><span class="line">        !<span class="type">bool</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (existcolunms.isEmpty) &#123;</span><br><span class="line">        frame = mysqlconnect.selectExpr(hiveconclumns: _*)</span><br><span class="line">        frame</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (elem &lt;- existcolunms)&#123;</span><br><span class="line">          resultdf = resultdf.withColumn(elem, lit(<span class="keyword">null</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        frame = resultdf.selectExpr(jdbcconclumns: _*)</span><br><span class="line">        finallyresult = frame.<span class="keyword">union</span>(mysqlconnect)</span><br><span class="line">        changecolunm = <span class="keyword">true</span></span><br><span class="line">        finallyresult</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  def jdbctohive(<span class="type">int</span>: <span class="type">Int</span>,catalog: Catalog,mysqlconnect: DataFrame)=&#123;</span><br><span class="line">    // 分割字符串获取hive的 表和数据库</span><br><span class="line">    val hivedbandtables = hivetable.split(&quot;\\.&quot;)</span><br><span class="line">    val hivepart = hivepartition.split(&quot;,&quot;)</span><br><span class="line">    hivepart.<span class="keyword">foreach</span>(println(_))</span><br><span class="line">// catalog的方法 获取表存不存在的方法</span><br><span class="line">//    catalog.listTables(strings(<span class="number">0</span>)).<span class="keyword">show</span>()</span><br><span class="line">//    val empty = catalog.listTables(strings(<span class="number">0</span>)).<span class="keyword">filter</span>(x =&gt; &#123;</span><br><span class="line">//      x.name == strings(<span class="number">1</span>)</span><br><span class="line">//    &#125;).isEmpty</span><br><span class="line">    val empty = catalog.tableExists(hivedbandtables(<span class="number">0</span>),hivedbandtables(<span class="number">1</span>))</span><br><span class="line">//<span class="comment">-----------------------------------------------------------------------------</span></span><br><span class="line">//    <span class="keyword">sql</span>的方法</span><br><span class="line">//    val empty1 = spark.<span class="keyword">sql</span>(</span><br><span class="line">//      &quot;&quot;&quot;</span><br><span class="line">//        |show tables in hivedb</span><br><span class="line">//        |&quot;&quot;&quot;.stripMargin).<span class="keyword">filter</span>(&quot;tableName = &#x27;hivetablename&#x27;&quot;).isEmpty</span><br><span class="line">// <span class="comment">--------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 判断列数是不是相等</span><br><span class="line">    var frameresult:DataFrame = mysqlconnect</span><br><span class="line">    // 先判断表存不存在 ，因为判断列数的方法要求表存在</span><br><span class="line">      empty match &#123;</span><br><span class="line">          // 表不存在</span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">false</span> =&gt; &#123;</span><br><span class="line">        // 判断输入的变量个数执行 判断分区表还是普通表</span><br><span class="line">        <span class="keyword">if</span> (<span class="type">int</span> &gt; <span class="number">7</span>) &#123;</span><br><span class="line">          println(&quot;-----------------分区表&quot;)</span><br><span class="line">          // 判断分区的参数在不在列中 如果不在 ，则加上 ，在的话就自动往下走</span><br><span class="line">          var hivepartval:<span class="keyword">Array</span>[String] =<span class="keyword">null</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="type">int</span> &gt; <span class="number">8</span> &amp;&amp; partitionValues != <span class="keyword">null</span>)&#123;</span><br><span class="line">            hivepartval = partitionValues.split(&quot;,&quot;)</span><br><span class="line">          &#125;</span><br><span class="line">          var flagtmp:<span class="type">Int</span> = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">for</span> (elem &lt;- hivepart)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!mysqlconnect.<span class="keyword">columns</span>.contains(elem))&#123;</span><br><span class="line">              println(elem)</span><br><span class="line">              println(hivepartval(flagtmp))</span><br><span class="line">              frameresult = frameresult.withColumn(elem,lit(hivepartval(flagtmp)))</span><br><span class="line">              flagtmp = flagtmp + <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          println(&quot;-----------普通表&quot;)</span><br><span class="line">          frameresult = mysqlconnect</span><br><span class="line">          mysqlconnect.<span class="keyword">show</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">true</span> =&gt; &#123;</span><br><span class="line">        // 表存在</span><br><span class="line">        // 判断是不是分区表</span><br><span class="line">        frameresult = changecolnums(<span class="type">int</span>, mysqlconnect)</span><br><span class="line">//        <span class="keyword">if</span> (args.length &gt; <span class="number">7</span>) &#123;</span><br><span class="line">//          println(&quot;-----------------分区表&quot;)</span><br><span class="line">//          <span class="keyword">if</span> (!mysqlconnect.<span class="keyword">columns</span>.contains(args(<span class="number">7</span>)))&#123;</span><br><span class="line">//            frameresult = changecolnums(args, hiveconf, mysqlconnect)</span><br><span class="line">//          &#125;</span><br><span class="line">//        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">//          println(&quot;-----------普通表&quot;)</span><br><span class="line">//          frameresult = mysqlconnect</span><br><span class="line">//        &#125;</span><br><span class="line">        frameresult.<span class="keyword">show</span>()&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    spark.conf.<span class="keyword">set</span>(&quot;hive.exec.dynamic.partition.mode&quot;,&quot;nonstrict&quot;)</span><br><span class="line">    spark.conf.<span class="keyword">set</span>(&quot;hive.exec.dynamic.partition&quot;,&quot;true&quot;)</span><br><span class="line">    spark.conf.<span class="keyword">set</span>(&quot;spark.sql.parquet.writeLegacyFormat&quot;, &quot;true&quot;)</span><br><span class="line">    println(empty)</span><br><span class="line">    saveFile.savetohiveapi(spark,empty,frameresult,hivetable,mode,hivepartition,changecolunm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="hivetojdbc"><a href="#hivetojdbc" class="headerlink" title="hivetojdbc"></a>hivetojdbc</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> project</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.SparkSession</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.catalog.Catalog</span><br><span class="line"><span class="keyword">import</span> tool.&#123;getmysqldf, savefile, sqlUtils,readfile&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.utils.ParameterTool</span><br><span class="line">object hivetojdbc&#123;</span><br><span class="line">  def <span class="title function_">apply</span><span class="params">(parameterTool: ParameterTool)</span>: hivetojdbc = <span class="keyword">new</span> <span class="title class_">hivetojdbc</span>(parameterTool)</span><br><span class="line"></span><br><span class="line">  def <span class="title function_">main</span><span class="params">(args: Array[String])</span>: Unit = &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length==<span class="number">0</span>)&#123;</span><br><span class="line">      println(</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">          |欢迎使用本程序</span></span><br><span class="line"><span class="string">          |参数说明</span></span><br><span class="line"><span class="string">          |总体参数种类 hive mysql</span></span><br><span class="line"><span class="string">          |---------------------------hive</span></span><br><span class="line"><span class="string">          |hive中要选择的字段 例子 ： &quot;sal,big  / *  &quot;</span></span><br><span class="line"><span class="string">          |hive的table的名字 例子 ： bigdata_hive3.emp</span></span><br><span class="line"><span class="string">          |hive中的 条件可以为空 例子 ： where sal &gt; &#x27;300&#x27;</span></span><br><span class="line"><span class="string">          |---------------------------mysql</span></span><br><span class="line"><span class="string">          |savemode overwrite append 等</span></span><br><span class="line"><span class="string">          |url 例子 ： jdbc:mysql://bigdata2:3306/try</span></span><br><span class="line"><span class="string">          |user 例子 ： root</span></span><br><span class="line"><span class="string">          |password 例子 ： liuzihan010616</span></span><br><span class="line"><span class="string">          |dbtable 例子 ： emp</span></span><br><span class="line"><span class="string">          |幂等性的列 ： 例子 ： sal</span></span><br><span class="line"><span class="string">          |驱动名称 ： 例子 com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">          |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">val</span> <span class="variable">tool</span> <span class="operator">=</span> ParameterTool.fromArgs(args)</span><br><span class="line">    hivetojdbc(tool).excute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hivetojdbc</span>(parameterTool: ParameterTool) &#123;</span><br><span class="line">  <span class="type">val</span> <span class="variable">spark</span> <span class="operator">=</span> SparkSession.builder().enableHiveSupport().getOrCreate()</span><br><span class="line">  <span class="type">val</span> <span class="variable">getmysqldf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">readfile</span></span><br><span class="line">  <span class="type">val</span> <span class="variable">sqlUtils</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">sqlUtils</span></span><br><span class="line">  <span class="type">val</span> <span class="variable">saveFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">savefile</span></span><br><span class="line">  <span class="keyword">private</span> val catalog: Catalog = spark.catalog</span><br><span class="line">  <span class="type">val</span> <span class="variable">hiveconclunms</span> <span class="operator">=</span> parameterTool.getRequired(<span class="string">&quot;hiveconclumns&quot;</span>)</span><br><span class="line">  <span class="type">val</span> <span class="variable">hivetable</span> <span class="operator">=</span> parameterTool.getRequired(<span class="string">&quot;hivetable&quot;</span>)</span><br><span class="line">  <span class="type">val</span> <span class="variable">hiveoption</span> <span class="operator">=</span> parameterTool.get(<span class="string">&quot;hiveoption&quot;</span>,<span class="literal">null</span>)</span><br><span class="line">  <span class="type">val</span> <span class="variable">url</span> <span class="operator">=</span> parameterTool.get(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;jdbc:mysql://bigdata2:3306/bigdata&quot;</span>)</span><br><span class="line">  <span class="type">val</span> <span class="variable">user</span> <span class="operator">=</span> parameterTool.get(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>)</span><br><span class="line">  <span class="type">val</span> <span class="variable">pasword</span> <span class="operator">=</span> parameterTool.get(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;liuzihan010616&quot;</span>)</span><br><span class="line">  <span class="type">val</span> <span class="variable">dbtable</span> <span class="operator">=</span> parameterTool.getRequired(<span class="string">&quot;dbtable&quot;</span>)</span><br><span class="line">  <span class="type">val</span> <span class="variable">driver</span> <span class="operator">=</span> parameterTool.getRequired(<span class="string">&quot;driver&quot;</span>)</span><br><span class="line">  <span class="type">val</span> <span class="variable">midengconclumns</span> <span class="operator">=</span> parameterTool.getRequired(<span class="string">&quot;col&quot;</span>)</span><br><span class="line">  <span class="type">val</span> <span class="variable">mode</span> <span class="operator">=</span> parameterTool.getRequired(<span class="string">&quot;mode&quot;</span>)</span><br><span class="line"></span><br><span class="line">  def <span class="title function_">excute</span><span class="params">()</span>: Unit = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">val</span> <span class="variable">frame</span> <span class="operator">=</span> sqlUtils.checksql(spark, sqlUtils.hivesqlchoose(hiveconclunms,hivetable,hiveoption))</span><br><span class="line">    saveFile.savetojdbc(spark,frame,url,user,pasword,dbtable,driver,midengconclumns,mode)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="sql方式"><a href="#sql方式" class="headerlink" title="sql方式"></a>sql方式</h1><h2 id="jdbctohive-1"><a href="#jdbctohive-1" class="headerlink" title="jdbctohive"></a>jdbctohive</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package sparkfirst</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="keyword">sql</span>.SparkSession</span><br><span class="line"><span class="keyword">import</span> tool.savefile</span><br><span class="line"><span class="keyword">import</span> tool.sqlUtils</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="keyword">sql</span>.<span class="keyword">functions</span>._</span><br><span class="line"><span class="keyword">object</span> test &#123;</span><br><span class="line">  val spark = SparkSession.builder().appName(&quot;Sparksql01&quot;).master(&quot;local[4]&quot;).enableHiveSupport().getOrCreate()</span><br><span class="line">  private val savefile = <span class="built_in">new</span> savefile</span><br><span class="line">  private val utils = <span class="built_in">new</span> sqlUtils</span><br><span class="line">  def main(args: <span class="keyword">Array</span>[String]): Unit = &#123;</span><br><span class="line">    val df = spark.<span class="keyword">read</span>.format(&quot;JDBC&quot;)</span><br><span class="line">      .<span class="keyword">option</span>(&quot;url&quot;,&quot;jdbc:mysql://bigdata2:3306/try&quot;)</span><br><span class="line">      .<span class="keyword">option</span>(&quot;dbtable&quot;, &quot;emp&quot;)</span><br><span class="line">      .<span class="keyword">option</span>(&quot;user&quot;, &quot;root&quot;)</span><br><span class="line">      .<span class="keyword">option</span>(&quot;password&quot;, &quot;liuzihan010616&quot;)</span><br><span class="line">      .<span class="keyword">load</span>()</span><br><span class="line">    df.<span class="keyword">select</span>(&quot;sal&quot;).tail(<span class="number">1</span>).<span class="keyword">foreach</span>(println(_))</span><br><span class="line">    println(df.<span class="keyword">select</span>(&quot;sal&quot;).tail(<span class="number">1</span>)(<span class="number">0</span>)(<span class="number">0</span>))</span><br><span class="line">    df.<span class="keyword">show</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    var str:String = <span class="keyword">null</span></span><br><span class="line">    val <span class="type">bool</span> = spark.catalog.tableExists(&quot;default.tmp&quot;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="type">bool</span>)&#123;</span><br><span class="line">      spark.<span class="keyword">sql</span>(</span><br><span class="line">        s&quot;&quot;&quot;</span><br><span class="line">          |drop table default.tmp</span><br><span class="line">          |&quot;&quot;&quot;.stripMargin)</span><br><span class="line">      str = utils.mkcreatesql(df, &quot;default.tmp&quot;, &quot;text&quot;, &quot;&#x27;,&#x27;&quot;,&quot;deptno,hiredate&quot;)</span><br><span class="line">      utils.checksql(spark,str)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      str = utils.mkcreatesql(df, &quot;default.tmp&quot;, &quot;text&quot;, &quot;&#x27;,&#x27;&quot;,&quot;deptno,hiredate&quot;)</span><br><span class="line">      utils.checksql(spark,str)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    spark.conf.<span class="keyword">set</span>(&quot;hive.exec.dynamic.partition.mode&quot;,&quot;nonstrict&quot;)</span><br><span class="line">    spark.conf.<span class="keyword">set</span>(&quot;hive.exec.dynamic.partition&quot;,&quot;true&quot;)</span><br><span class="line">    val frame = df.withColumn(&quot;ee&quot;, lit(&quot;aaa&quot;))</span><br><span class="line">    utils.insertmake(spark,df,&quot;default.tmp&quot;,&quot;&#x27;,&#x27;&quot;,&quot;deptno,hiredate&quot;)</span><br><span class="line">    utils.changecolunms(spark,frame,&quot;default.tmp&quot;)</span><br><span class="line">    utils.insertmake(spark,frame,&quot;default.tmp&quot;,&quot;&#x27;,&#x27;&quot;,&quot;deptno,hiredate&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="hivetojdbc-1"><a href="#hivetojdbc-1" class="headerlink" title="hivetojdbc"></a>hivetojdbc</h2><p>用sqlUtils里自己定义的api来进行</p>
<h1 id="思路及实现功能"><a href="#思路及实现功能" class="headerlink" title="思路及实现功能"></a>思路及实现功能</h1><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>通过api进行对jdbc数据接收</p>
<p>通过</p>
<figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">getmysqldf.getmysqldataframe(spark, url, user, password, table , driver)</span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">  def getmysqldataframe(sparkSession: <span class="type">SparkSession</span>,<span class="built_in">string</span>: <span class="type">String</span>*) =&#123;</span><br><span class="line">    <span class="keyword">val</span> sql = <span class="built_in">string</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> frame: <span class="type">DataFrame</span> = sparkSession.read.format(<span class="string">&quot;jdbc&quot;</span>).options(<span class="type">Map</span>(<span class="string">&quot;url&quot;</span> -&gt; <span class="built_in">string</span>(<span class="number">0</span>), <span class="string">&quot;user&quot;</span> -&gt; <span class="built_in">string</span>(<span class="number">1</span>), <span class="string">&quot;password&quot;</span> -&gt; <span class="built_in">string</span>(<span class="number">2</span>), <span class="string">&quot;dbtable&quot;</span> -&gt; s<span class="string">&quot;($sql) as tmp&quot;</span>,<span class="string">&quot;driver&quot;</span>-&gt;<span class="built_in">string</span>(<span class="number">4</span>))).load<span class="literal">()</span></span><br><span class="line">    frame</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>来获取jdbc数据</p>
<p>其他的方法 ： 其中options 可以换成多个option来进行，option里是KV类型的</p>
<p>通过</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section"> val frame = sqlUtils.checksql(spark, sqlUtils.hivesqlchoose(hiveconclunms,hivetable,hiveoption))</span></span><br><span class="line"><span class="section">-----------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="code">  def checksql(spark:SparkSession, string: String)=&#123;</span></span><br><span class="line"><span class="code">    spark.sql(string)</span></span><br><span class="line"><span class="section">&#125;</span></span><br><span class="line"><span class="section">---------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="code"> def hivesqlchoose(hiveconclumns:String,hivetable:String,hiveoptions:String)=&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="code">    &quot;select&quot; + &quot; &quot; + hiveconclumns + &quot; &quot; + &quot;from&quot; + &quot; &quot; +  hiveconclumns + &quot; &quot; + hiveoptions</span></span><br><span class="line"><span class="code">  &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>前提在saprksession处打开enablesupporthive参数</p>
<h2 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h2><p>通过api对数据进行整合以及处理</p>
<p>功能 ：</p>
<ul>
<li>jdbctohive<ul>
<li>基本功能<ul>
<li>同步普通表</li>
<li>同步分区表<ul>
<li>单分区</li>
<li>多分区</li>
</ul>
</li>
</ul>
</li>
<li>追加功能api<ul>
<li>用户自定义分区字段及其值</li>
<li>用户在jdbc数据中增加列，hive中自动增加列</li>
<li>分区字段更改且不丢失源数据</li>
<li>可以实现表中自带的字段以及用户定义的字段一起分区的操作</li>
<li>实现单独对一个分区的数据追加或者重新写入</li>
<li>设置hive表的存储以及压缩格式</li>
<li>实现对所有分区的追加或者重新写入</li>
<li>通过flink的参数工具部署</li>
</ul>
</li>
<li>追加功能sql<ul>
<li>实现用户自定义分区字段以及值</li>
<li>用户在jdbc数据中增加列，hive中自动增加列</li>
<li>可以实现表中自带的字段以及用户定义的字段一起分区的操作</li>
<li>实现单独对一个分区的数据追加或者重新写入</li>
<li>实现对所有分区的追加或者重新写入</li>
<li>设置hive表的存储格式</li>
<li>实现设置存储格式text等</li>
<li>通过flink的参数工具部署</li>
</ul>
</li>
</ul>
</li>
<li>hivetojdbc<ul>
<li>基本功能<ul>
<li>同步数据</li>
</ul>
</li>
<li>追加功能<ul>
<li>幂等性操作</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>基本功能没有上面要注意的点，但是多分区的时候我是采用获取字符串然后split之后map加上数据类型然后mkstring制作的</p>
<p>sql：</p>
<p>但是分区一般分为数据里的分区字段，以及用户自定义的分区字段，针对于用户自定义的分区，我直接把他们定义为string，但是对于数据里的分区字段，我选择保留他原始的类型，通过筛选出他包含的分区字段的schema信息，然后通过他的datatype，来进行数据的备份，最后和上述用户自定义的分区字段拼接到一起，就可以了，最后前面加上partitioned by 就好了，注意点是要提取变量，以及判断最后一次的时机，以及如何判断分区列在不在字段里。</p>
<p>api：</p>
<p>对于api则更为简单，直接调用partitionbyapi然后把字符串通过split然后：_*的方式传入，就ok了，但是api的分区字段必须是在df里的，也就是说，我们要提前把分区字段加上，先判断有没有分区字段，然后进而加上分区字段</p>
<p>追加功能：</p>
<h2 id="sink"><a href="#sink" class="headerlink" title="sink"></a>sink</h2><p>通过api对数据进行输出到表</p>
<h3 id="sink到hive"><a href="#sink到hive" class="headerlink" title="sink到hive"></a>sink到hive</h3><p>api</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">    saveFile.savetohiveapi(spark,empty,frameresult,hivetable,mode,hivepartition,changecolunm,fileformated,codec)</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line">def savetohiveapi(sparkSession: SparkSession,<span class="type">boolean</span>: <span class="type">Boolean</span>,spark: DataFrame,hivetable:String,mode:String,hivepartition:String,changecolnums:<span class="type">Boolean</span>,fileformat:String,codec:String) = &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="type">boolean</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (hivepartition != <span class="keyword">null</span>)&#123;</span><br><span class="line">        spark.<span class="keyword">write</span>.partitionBy(hivepartition.split(&quot;,&quot;):_*).<span class="keyword">option</span>(&quot;fileFormat&quot;,fileformat).<span class="keyword">option</span>(&quot;compression&quot;,codec).mode(mode).format(&quot;hive&quot;).saveAsTable(hivetable)</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        println(hivetable)</span><br><span class="line">        println(hivepartition)</span><br><span class="line">        spark.<span class="keyword">write</span>.<span class="keyword">option</span>(&quot;fileFormat&quot;,fileformat).<span class="keyword">option</span>(&quot;compression&quot;,codec).mode(mode).format(&quot;hive&quot;).saveAsTable(hivetable)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      changecolnums match &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">true</span> =&gt;  &#123;</span><br><span class="line">          <span class="keyword">if</span> (hivepartition != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sparkSession.<span class="keyword">table</span>(hivetable).<span class="keyword">columns</span>.length != spark.<span class="keyword">columns</span>.length)&#123;</span><br><span class="line">             sparkSession.<span class="keyword">sql</span>(</span><br><span class="line">               s&quot;&quot;&quot;</span><br><span class="line">                 |drop table $&#123;hivetable&#125;</span><br><span class="line">                 |&quot;&quot;&quot;.stripMargin)</span><br><span class="line">            &#125;</span><br><span class="line">            spark.<span class="keyword">write</span>.partitionBy(hivepartition.split(&quot;,&quot;):_*).<span class="keyword">option</span>(&quot;fileFormat&quot;,fileformat).<span class="keyword">option</span>(&quot;compression&quot;,codec).mode(mode).format(&quot;hive&quot;).saveAsTable(hivetable)</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            spark.<span class="keyword">write</span>.<span class="keyword">option</span>(&quot;fileFormat&quot;,fileformat).<span class="keyword">option</span>(&quot;compression&quot;,codec).mode(mode).format(&quot;hive&quot;).saveAsTable(hivetable)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">false</span> =&gt; spark.<span class="keyword">write</span>.<span class="keyword">option</span>(&quot;fileFormat&quot;,fileformat).<span class="keyword">option</span>(&quot;compression&quot;,codec).mode(mode).format(&quot;hive&quot;).insertInto(hivetable)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      spark.<span class="keyword">show</span>()</span><br><span class="line">      println(spark.count())</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>sql</p>
<figure class="highlight roboconf"><table><tr><td class="code"><pre><span class="line">def insertmake(sparkSession: SparkSession,dataFrame: DataFrame,tablename:String,otheroptions:String*) =&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">var strings</span>:Array[String] = null</span><br><span class="line"></span><br><span class="line">      dataFrame<span class="variable">.selectExpr</span>(sparkSession<span class="variable">.table</span>(tablename)<span class="variable">.columns</span>:_*)<span class="variable">.createOrReplaceTempView</span>(&quot;tmp&quot;)</span><br><span class="line"></span><br><span class="line">   // val partitionstring = sparkSession<span class="variable">.table</span>(tablename)<span class="variable">.columns</span><span class="variable">.tail</span>(sparkSession<span class="variable">.table</span>(tablename)<span class="variable">.columns</span><span class="variable">.length</span> - 2)</span><br><span class="line">    otheroptions<span class="variable">.length</span> match &#123;</span><br><span class="line">      case 0 =&gt; &#123;</span><br><span class="line">        sparkSession<span class="variable">.sql</span>(</span><br><span class="line">          s&quot;&quot;&quot;</span><br><span class="line">             |insert overwrite $&#123;tablename&#125;</span><br><span class="line">             |select * from tmp</span><br><span class="line">             |&quot;&quot;&quot;<span class="variable">.stripMargin</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      case _ =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        if (otheroptions<span class="variable">.length</span> &gt; 1)&#123;</span><br><span class="line">          strings = otheroptions(1)<span class="variable">.split</span>(&quot;,&quot;)<span class="variable">.filter</span>(conclunms =&gt; &#123;</span><br><span class="line">            !dataFrame<span class="variable">.columns</span><span class="variable">.contains</span>(conclunms)</span><br><span class="line">          &#125;)</span><br><span class="line">          val fuzhiarray:Array[String] = util<span class="variable">.Arrays</span><span class="variable">.copyOfRange</span>(otheroptions<span class="variable">.toArray</span>, 2, otheroptions<span class="variable">.length</span>)</span><br><span class="line">          fuzhiarray<span class="variable">.foreach</span>(println(_))</span><br><span class="line">          strings<span class="variable">.isEmpty</span> match &#123;</span><br><span class="line">            case true =&gt; &#123;</span><br><span class="line"></span><br><span class="line">          sparkSession<span class="variable">.sql</span>(</span><br><span class="line">          s&quot;&quot;&quot;</span><br><span class="line">            |insert overwrite $&#123;tablename&#125; partition($&#123;otheroptions(1)<span class="variable">.split</span>(&quot;,&quot;)<span class="variable">.map</span>(conclunms =&gt; &#123;s&quot;$&#123;conclunms&#125;&quot;&#125;)<span class="variable">.mkString</span>(&quot;,&quot;)&#125;)</span><br><span class="line">            |select * from tmp</span><br><span class="line">            |&quot;&quot;&quot;<span class="variable">.stripMargin</span>)</span><br><span class="line">          &#125;</span><br><span class="line">            case false =&gt; &#123;</span><br><span class="line">              var tmpdf:DataFrame = dataFrame</span><br><span class="line">              for (i &lt;- 0 to strings<span class="variable">.length-</span>1)&#123;</span><br><span class="line">                tmpdf = tmpdf<span class="variable">.withColumn</span>(strings(i),lit(fuzhiarray(i)))</span><br><span class="line">              &#125;</span><br><span class="line">              tmpdf<span class="variable">.show</span>()</span><br><span class="line">              tmpdf<span class="variable">.printSchema</span>()</span><br><span class="line">              tmpdf = tmpdf<span class="variable">.selectExpr</span>(sparkSession<span class="variable">.table</span>(tablename)<span class="variable">.columns</span>: _*)</span><br><span class="line">              tmpdf<span class="variable">.show</span>()</span><br><span class="line">              tmpdf<span class="variable">.printSchema</span>()</span><br><span class="line">              val str = tmpdf<span class="variable">.columns</span><span class="variable">.mkString</span>(&quot;,\n&quot;)</span><br><span class="line">              tmpdf<span class="variable">.createOrReplaceTempView</span>(&quot;smp&quot;)</span><br><span class="line">              sparkSession<span class="variable">.sql</span>(</span><br><span class="line">                s&quot;&quot;&quot;</span><br><span class="line">                   |insert overwrite $&#123;tablename&#125; partition($&#123;otheroptions(1)<span class="variable">.split</span>(&quot;,&quot;)<span class="variable">.map</span>(conclunms =&gt; &#123;s&quot;$&#123;conclunms&#125;&quot;&#125;)<span class="variable">.mkString</span>(&quot;,&quot;)&#125;)</span><br><span class="line">                   |select $&#123;str&#125; from smp</span><br><span class="line">                   |&quot;&quot;&quot;<span class="variable">.stripMargin</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          strings = otheroptions(0)<span class="variable">.split</span>(&quot;,&quot;)<span class="variable">.filter</span>(conclunms =&gt; &#123;</span><br><span class="line">            !dataFrame<span class="variable">.columns</span><span class="variable">.contains</span>(conclunms)</span><br><span class="line">          &#125;)</span><br><span class="line">          val fuzhiarray:Array[String] = util<span class="variable">.Arrays</span><span class="variable">.copyOfRange</span>(otheroptions<span class="variable">.toArray</span>, 1, otheroptions<span class="variable">.length</span>)</span><br><span class="line"></span><br><span class="line">          strings<span class="variable">.isEmpty</span> match &#123;</span><br><span class="line">            case true =&gt; &#123;</span><br><span class="line">              sparkSession<span class="variable">.sql</span>(</span><br><span class="line">                s&quot;&quot;&quot;</span><br><span class="line">                   |insert overwrite $&#123;tablename&#125; partition($&#123;otheroptions(0)<span class="variable">.split</span>(&quot;,&quot;)<span class="variable">.map</span>(conclunms =&gt; &#123;s&quot;$&#123;conclunms&#125;&quot;&#125;)<span class="variable">.mkString</span>(&quot;,&quot;)&#125;)</span><br><span class="line">                   |select * from tmp</span><br><span class="line">                   |&quot;&quot;&quot;<span class="variable">.stripMargin</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            case false =&gt; &#123;</span><br><span class="line">              var tmpdf:DataFrame = dataFrame</span><br><span class="line"></span><br><span class="line">              for (i &lt;- 0 to strings<span class="variable">.length-</span>1)&#123;</span><br><span class="line">                tmpdf = tmpdf<span class="variable">.withColumn</span>(strings(i),lit(fuzhiarray(i)))</span><br><span class="line">              &#125;</span><br><span class="line">              tmpdf<span class="variable">.show</span>()</span><br><span class="line">              tmpdf<span class="variable">.printSchema</span>()</span><br><span class="line">              tmpdf = tmpdf<span class="variable">.selectExpr</span>(sparkSession<span class="variable">.table</span>(tablename)<span class="variable">.columns</span>: _*)</span><br><span class="line">              val str = tmpdf<span class="variable">.columns</span><span class="variable">.mkString</span>(&quot;,\n&quot;)</span><br><span class="line">              tmpdf<span class="variable">.createOrReplaceTempView</span>(&quot;smp&quot;)</span><br><span class="line">              sparkSession<span class="variable">.sql</span>(</span><br><span class="line">                s&quot;&quot;&quot;</span><br><span class="line">                   |insert overwrite $&#123;tablename&#125; partition($&#123;otheroptions(0)<span class="variable">.split</span>(&quot;,&quot;)<span class="variable">.map</span>(conclunms =&gt; &#123;s&quot;$&#123;conclunms&#125;&quot;&#125;)<span class="variable">.mkString</span>(&quot;,&quot;)&#125;)</span><br><span class="line">                   |select $&#123;str&#125; from smp</span><br><span class="line">                   |&quot;&quot;&quot;<span class="variable">.stripMargin</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="sink到jdbc"><a href="#sink到jdbc" class="headerlink" title="sink到jdbc"></a>sink到jdbc</h3><p>api</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">def savetojdbc(spark: SparkSession,df: DataFrame, url:String,<span class="keyword">user</span>:String,<span class="keyword">password</span>:String,dbtable:String,driver:String,mideng:String,mode:String)=&#123;</span><br><span class="line">    val map = Map(&quot;url&quot; -&gt; url,</span><br><span class="line">      &quot;user&quot; -&gt; <span class="keyword">user</span>,</span><br><span class="line">      &quot;password&quot; -&gt; <span class="keyword">password</span>,</span><br><span class="line">      &quot;dbtable&quot; -&gt; dbtable,</span><br><span class="line">      &quot;driver&quot;-&gt; driver)</span><br><span class="line"></span><br><span class="line">//    df.<span class="keyword">write</span>.mode(string(<span class="number">2</span>)).format(string(<span class="number">1</span>)).<span class="keyword">options</span>(map).save()</span><br><span class="line">    // <span class="comment">-------------------------------------幂等性</span></span><br><span class="line">    val <span class="keyword">connection</span> = jdbcconnect.getconncet(driver,url,<span class="keyword">user</span>,<span class="keyword">password</span>)</span><br><span class="line">    try&#123;</span><br><span class="line">      val <span class="type">bool</span> = <span class="keyword">connection</span>.createStatement().executeQuery(s&quot;show tables like &#x27;$&#123;dbtable&#125;&#x27;&quot;).next()</span><br><span class="line">      <span class="keyword">if</span> (!<span class="type">bool</span>)&#123;</span><br><span class="line">        throw <span class="built_in">new</span> NullPointerException(s&quot;写入的结果表$&#123;dbtable&#125; 尚未创建！！！&quot;)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        var flag:<span class="keyword">Any</span> = <span class="keyword">null</span></span><br><span class="line">        val flagbool = mysqldf.getmyqsldffromMap(spark, map).<span class="keyword">select</span>(mideng).isEmpty</span><br><span class="line">        <span class="keyword">if</span> (!flagbool)&#123;</span><br><span class="line">         flag = mysqldf.getmyqsldffromMap(spark, map).<span class="keyword">select</span>(mideng).tail(<span class="number">1</span>)(<span class="number">0</span>)(<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        val tmpresult = df.<span class="keyword">select</span>(mideng).<span class="keyword">filter</span>(<span class="type">line</span> =&gt; &#123;</span><br><span class="line">          <span class="type">line</span>.getString(<span class="number">0</span>) != flag</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (df.isEmpty)&#123;</span><br><span class="line">          println(&quot;数据集为空&quot;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (tmpresult.isEmpty)&#123;</span><br><span class="line">            println(&quot;你的数据已经插入过&quot;)</span><br><span class="line">            df.<span class="keyword">show</span>(<span class="keyword">false</span>)</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">//            df.<span class="keyword">show</span>()</span><br><span class="line">//            println(df.count())</span><br><span class="line">            //val insertresult = tmpresult.<span class="keyword">join</span>(df, string(<span class="number">5</span>))</span><br><span class="line">            tmpresult.<span class="keyword">show</span>()</span><br><span class="line">            println(tmpresult.count())</span><br><span class="line">//            insertresult.<span class="keyword">show</span>()</span><br><span class="line">//            println(insertresult.count())</span><br><span class="line">            tmpresult.<span class="keyword">write</span>.mode(mode).format(&quot;jdbc&quot;).<span class="keyword">options</span>(map).save()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">      <span class="keyword">connection</span>.<span class="keyword">close</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>同步工具</tag>
      </tags>
  </entry>
  <entry>
    <title>mysqlbinlog</title>
    <url>/2001/02/21/2-21/</url>
    <content><![CDATA[<h1 id="bionlog"><a href="#bionlog" class="headerlink" title="bionlog"></a>bionlog</h1><p>mysql的binlog：它记录了所有的DDL和DML语句（除了数据查询语句select）,以事件形式记录，还包含语句所执行的消耗的时间，MySQL的二进制日志是事务安全型的。</p>
<p>mysqlbinlog常见的选项有一下几个：</p>
<ul>
<li>–start-datetime：从二进制日志中读取指定等于时间戳或者晚于本地计算机的时间</li>
<li>–stop-datetime：从二进制日志中读取指定小于时间戳或者等于本地计算机的时间 取值和上述一样</li>
<li>–start-position：从二进制日志中读取指定position 事件位置作为开始。</li>
<li>–stop-position：从二进制日志中读取指定position 事件位置作为事件截至</li>
</ul>
<p>binlog日志有两个最重要的使用场景:</p>
<ul>
<li>mysql主从复制：mysql replication在master端开启binlog,master把它的二进制日志传递给slaves来达到master-slave数据一致的目的。</li>
<li>数据恢复：通过mysqlbinlog工具来恢复数据。</li>
</ul>
<p>binlog日志包括两类文件</p>
<ul>
<li>二进制日志索引文件(文件名后缀为.index)用于记录所有的二进制文件。</li>
<li>二进制日志文件(文件名后缀为.00000*)记录数据库所有的DDL和DML(除了数据查询语句select)语句事件。</li>
</ul>
<h1 id="开启binlog日志"><a href="#开启binlog日志" class="headerlink" title="开启binlog日志"></a>开启binlog日志</h1><p>打开mysql的配置文件一般是在 <code>/etc/my.cof</code></p>
<p>然后编辑，在mysqld区块加上 -&gt;</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">binlog_format</span>           = MIXED                 //binlog日志格式</span><br><span class="line"><span class="attr">log_bin</span>                     =目录/mysql-bin.log    //binlog日志名</span><br><span class="line"><span class="attr">expire_logs_days</span>     = <span class="number">7</span>                //binlog过期清理时间</span><br><span class="line"><span class="attr">max_binlog_size</span>     = <span class="number">100</span>m                    //binlog每个日志文件大小　　　　log-bin=mysql-bin(也可指定二进制日志生成的路径，如：log-bin=/opt/Data/mysql-bin)</span><br><span class="line"><span class="attr">server-id</span> = <span class="number">1</span></span><br><span class="line">　　　　<span class="attr">server-id</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">　　　　<span class="attr">binlog_format</span>=MIXED(加入此参数才能记录到insert语句)</span><br></pre></td></tr></table></figure>

<p>这里的binlog的格式有三种</p>
<ul>
<li>Statement：每一条会修改数据的sql都会记录在binlog中。</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">优点：不需要记录每一行的变化，减少了binlog日志量，节约了IO，提高性能。(相比<span class="keyword">row</span>能节约多少性能与日志量，这个取决于应用的<span class="keyword">SQL</span>情况，正常同一条记录修改或者插入<span class="keyword">row</span>格式所产生的日志量还小于<span class="keyword">Statement</span>产生的日志量，但是考虑到如果带条件的<span class="keyword">update</span>操作，以及整表删除，<span class="keyword">alter</span>表等操作，<span class="keyword">ROW</span>格式会产生大量日志，因此在考虑是否使用<span class="keyword">ROW</span>格式日志时应该跟据应用的实际情况，其所产生的日志量会增加多少，以及带来的IO性能问题。)</span><br><span class="line"></span><br><span class="line">缺点：由于记录的只是执行语句，为了这些语句能在slave上正确运行，因此还必须记录每条语句在执行的时候的一些相关信息，以保证所有语句能在slave得到和在master端执行时候相同的结果。另外mysql 的复制,像一些特定函数功能，slave可与master上要保持一致会有很多相关问题(如sleep()函数， last_insert_id()，以及<span class="keyword">user</span>-defined <span class="keyword">functions</span>(udf)会出现问题).</span><br></pre></td></tr></table></figure>

<ul>
<li>Row:不记录sql语句上下文相关信息，仅保存哪条记录被修改。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">优点： binlog中可以不记录执行的<span class="keyword">sql</span>语句的上下文相关的信息，仅需要记录那一条记录被修改成什么了。所以rowlevel的日志内容会非常清楚的记录下每一行数据修改的细节。而且不会出现某些特定情况下的存储过程，或<span class="keyword">function</span>，以及<span class="keyword">trigger</span>的调用和触发无法被正确复制的问题</span><br><span class="line"></span><br><span class="line">缺点:所有的执行的语句当记录到日志中的时候，都将以每行记录的修改来记录，这样可能会产生大量的日志内容,比如一条<span class="keyword">update</span>语句，修改多条记录，则binlog中每一条修改都会有记录，这样造成binlog日志量会很大，特别是当执行<span class="keyword">alter</span> <span class="keyword">table</span>之类的语句的时候，由于表结构修改，每条记录都发生改变，那么该表每一条记录都会记录到日志中。</span><br></pre></td></tr></table></figure>

<ul>
<li>Mixedlevel:</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">.Mixedlevel: 是以上两种<span class="keyword">level</span>的混合使用，一般的语句修改使用statment格式保存binlog，如一些函数，<span class="keyword">statement</span>无法完成主从复制的操作，则采用<span class="keyword">row</span>格式保存binlog,MySQL会根据执行的每一条具体的<span class="keyword">sql</span>语句来区分对待记录的日志形式，也就是在<span class="keyword">Statement</span>和<span class="keyword">Row</span>之间选择一种.新版本的MySQL中队<span class="keyword">row</span> <span class="keyword">level</span>模式也被做了优化，并不是所有的修改都会以<span class="keyword">row</span> <span class="keyword">level</span>来记录，像遇到表结构变更的时候就会以<span class="keyword">statement</span>模式来记录。至于<span class="keyword">update</span>或者<span class="keyword">delete</span>等修改数据的语句，还是会记录所有行的变更。</span><br></pre></td></tr></table></figure>

<h2 id="binlog日志的选择"><a href="#binlog日志的选择" class="headerlink" title="binlog日志的选择"></a>binlog日志的选择</h2><p>Mysql默认是使用Statement日志格式，推荐使用MIXED.</p>
<p>由于一些特殊使用，可以考虑使用ROWED，如自己通过binlog日志来同步数据的修改，这样会节省很多相关操作。对于binlog数据处理会变得非常轻松,相对mixed，解析也会很轻松(当然前提是增加的日志量所带来的IO开销在容忍的范围内即可)。</p>
<h2 id="续讲mysql"><a href="#续讲mysql" class="headerlink" title="续讲mysql"></a>续讲mysql</h2><p>查看binlog日志是不是开启</p>
<p><code>mysql&gt; show variables like &#39;log_%&#39;; </code></p>
<h2 id="常用的binlog日志操作命令"><a href="#常用的binlog日志操作命令" class="headerlink" title="常用的binlog日志操作命令"></a>常用的binlog日志操作命令</h2><p>查看所有binlog日志列表：<br><code>show master logs;</code></p>
<p>查看master状态，即最后（最新）一个binlog日志的编号名称，及其最后一个操作事件pos结束点(Position)值。</p>
<p><code>show master status;</code></p>
<p>flush 刷新log日志，自此刻开始产生一个新编号的binlog日志文件;</p>
<p><code>flush logs;</code></p>
<p>注意：每当mysqld服务重启时，会自动执行此命令，刷新binlog日志；在mysqlddump备份数据时加-F选项也会刷新binlog日志；</p>
<p>重置（清空）所有binlog日志</p>
<p><code>reset master;</code></p>
<h1 id="查看binlog日志"><a href="#查看binlog日志" class="headerlink" title="查看binlog日志"></a>查看binlog日志</h1><p>binlog是二进制文件，普通文件查看器cat、more、vim等都无法打开，必须使用自带的mysqlbinlog命令查看。</p>
<p>binlog日志与数据库文件在同目录中。</p>
<p>在Mysql5.5以下版本使用mysqlbinlog命令时如果报错，就加上”–no-defaults”选项</p>
<p>使用的就是上面的，命令</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>监控yarn</title>
    <url>/2023/02/03/2-3-1/</url>
    <content><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>监控yarn的资源</p>
<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>数据采集：采集yarn的指标</p>
<p>数据处理：实时处理：spark-streaming</p>
<p>数据输出：mysql(加索引)，olap（毫秒级别）</p>
<p>数据可视化：superset,dataease</p>
<p>olap:clickhouse,doris,tidb,phenix</p>
<p>oltp:支持事务的</p>
<h1 id="链路"><a href="#链路" class="headerlink" title="链路"></a>链路</h1><p>yarn -&gt; jar 采集数据 -&gt;    kafka-&gt;  sparkstreaming -&gt; ck -&gt; superset&#x2F;dataease</p>
<p>采集的数据格式：</p>
<ul>
<li>文本数据 ： 网络io占据量少，分隔符设置有要求</li>
<li>json数据 ： json要占用网络io ，解析方便</li>
</ul>
<h1 id="start"><a href="#start" class="headerlink" title="start"></a>start</h1><h2 id="采集数据"><a href="#采集数据" class="headerlink" title="采集数据"></a>采集数据</h2><h3 id="yarn的api"><a href="#yarn的api" class="headerlink" title="yarn的api"></a>yarn的api</h3><p>添加yarn的依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-yarn-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在idea里来进行开发</p>
<p>设置获取yarn数据的接口</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sparkfirst</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.yarn.api.records.YarnApplicationState</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.yarn.client.api.YarnClient</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.yarn.conf.YarnConfiguration</span><br><span class="line"></span><br><span class="line">trait <span class="title class_">YarnInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">  def getYarnInfo=&#123;</span><br><span class="line">    <span class="keyword">val</span> client = YarnClient.createYarnClient()</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    init 方法里面要求的是conf ，是yarn的配置文件</span></span><br><span class="line"><span class="comment">    先在resource里加上yarn-site.xml</span></span><br><span class="line"><span class="comment">    然后new配置文件类</span></span><br><span class="line"><span class="comment">    然后启动客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">val</span> configuration = new YarnConfiguration()</span><br><span class="line">    client.<span class="keyword">init</span>(configuration)</span><br><span class="line">    client.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> states = util.EnumSet.noneOf(classOf[YarnApplicationState])</span><br><span class="line">    states.add(YarnApplicationState.ACCEPTED)</span><br><span class="line">    states.add(YarnApplicationState.RUNNING)</span><br><span class="line">    states.add(YarnApplicationState.NEW)</span><br><span class="line">    states.add(YarnApplicationState.SUBMITTED)</span><br><span class="line">    states.add(YarnApplicationState.KILLED)</span><br><span class="line">    states.add(YarnApplicationState.NEW_SAVING)</span><br><span class="line">    states.add(YarnApplicationState.FAILED)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> reports = client.getApplications(states)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value = reports.iterator()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> builder = new StringBuilder</span><br><span class="line">    <span class="keyword">while</span> (value.hasNext)&#123;</span><br><span class="line">      <span class="keyword">val</span> report = value.next()</span><br><span class="line">      <span class="keyword">val</span> report1 = report.getApplicationResourceUsageReport</span><br><span class="line">      <span class="keyword">val</span> id = report.getApplicationId</span><br><span class="line">      <span class="keyword">val</span> host = report.getHost</span><br><span class="line">      <span class="keyword">val</span> applicationType = report.getApplicationType</span><br><span class="line">      <span class="keyword">val</span> name = report.getName</span><br><span class="line">      <span class="keyword">val</span> starttime = report.getStartTime</span><br><span class="line">      <span class="keyword">val</span> user = report.getUser</span><br><span class="line">      <span class="keyword">val</span> finishtime = report.getFinishTime</span><br><span class="line">      <span class="keyword">val</span> mem = report1.getMemorySeconds</span><br><span class="line">      <span class="keyword">val</span> vcore = report1.getVcoreSeconds</span><br><span class="line">      <span class="keyword">val</span> size = report1.getUsedResources.getMemorySize</span><br><span class="line">      <span class="keyword">val</span> cores = report1.getUsedResources.getVirtualCores</span><br><span class="line">      <span class="keyword">val</span> resources = report1.getUsedResources.getResources</span><br><span class="line">      <span class="keyword">val</span> state = report.getYarnApplicationState</span><br><span class="line">      <span class="keyword">val</span> url = report.getTrackingUrl</span><br><span class="line">      <span class="keyword">val</span> margin =</span><br><span class="line">        s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">           |report: <span class="subst">$&#123;report&#125;</span></span></span><br><span class="line"><span class="string">           |report1 : <span class="subst">$&#123;report1&#125;</span></span></span><br><span class="line"><span class="string">           |id:<span class="subst">$&#123;id&#125;</span></span></span><br><span class="line"><span class="string">           |host:<span class="subst">$&#123;host&#125;</span></span></span><br><span class="line"><span class="string">           |applicationtype : <span class="subst">$&#123;applicationType&#125;</span></span></span><br><span class="line"><span class="string">           |name : <span class="subst">$&#123;name&#125;</span></span></span><br><span class="line"><span class="string">           |starttime <span class="subst">$&#123;starttime&#125;</span></span></span><br><span class="line"><span class="string">           |finishtime : <span class="subst">$&#123;finishtime&#125;</span></span></span><br><span class="line"><span class="string">           |user:<span class="subst">$&#123;user&#125;</span></span></span><br><span class="line"><span class="string">           |memeveryscends:<span class="subst">$&#123;mem&#125;</span></span></span><br><span class="line"><span class="string">           |vcoreeveryscends:<span class="subst">$&#123;vcore&#125;</span></span></span><br><span class="line"><span class="string">           |size:<span class="subst">$&#123;size&#125;</span></span></span><br><span class="line"><span class="string">           |cores<span class="subst">$&#123;cores&#125;</span></span></span><br><span class="line"><span class="string">           |state:<span class="subst">$&#123;state&#125;</span></span></span><br><span class="line"><span class="string">           |url:<span class="subst">$&#123;url&#125;</span></span></span><br><span class="line"><span class="string">           |resources:<span class="subst">$&#123;resources.mkString(<span class="string">&quot;,&quot;</span>)&#125;</span></span></span><br><span class="line"><span class="string">           |---</span></span><br><span class="line"><span class="string">           |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">      builder.appendAll(margin)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(builder)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在主方法里继承接口并且实现方法</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sparkfirst</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.utils.<span class="type">ParameterTool</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">testyarn</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(parameterTool: <span class="type">ParameterTool</span>): testyarn = <span class="keyword">new</span> testyarn(parameterTool)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> tool = <span class="type">ParameterTool</span>.fromArgs(args)</span><br><span class="line">    testyarn(tool).excute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testyarn</span>(<span class="params">parameterTool: <span class="type">ParameterTool</span></span>) <span class="keyword">extends</span> <span class="title">YarnInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">excute</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line"></span><br><span class="line">    getYarnInfo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在机器上启动一个sparksql通过yarn模式的部署</p>
<p>获取数据如下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">report</span>: applicationId &#123; id: <span class="number">1</span> cluster_timestamp: <span class="number">1675390427337</span> &#125; user: <span class="string">&quot;hadoop&quot;</span> queue: <span class="string">&quot;default&quot;</span> name: <span class="string">&quot;SparkSQL::192.168.41.132&quot;</span> host: <span class="string">&quot;192.168.41.133&quot;</span> rpc_port: -<span class="number">1</span> yarn_application_state: RUNNING trackingUrl: <span class="string">&quot;http://bigdata4:9999/proxy/application_1675390427337_0001/&quot;</span> diagnostics: <span class="string">&quot;&quot;</span> startTime: <span class="number">1675390547814</span> finishTime: <span class="number">0</span> final_application_status: APP_UNDEFINED app_resource_Usage &#123; num_used_containers: <span class="number">3</span> num_reserved_containers: <span class="number">0</span> used_resources &#123; memory: <span class="number">5120</span> virtual_cores: <span class="number">3</span> resource_value_map &#123; key: <span class="string">&quot;memory-mb&quot;</span> value: <span class="number">5120</span> units: <span class="string">&quot;Mi&quot;</span> type: COUNTABLE &#125; resource_value_map &#123; key: <span class="string">&quot;vcores&quot;</span> value: <span class="number">3</span> units: <span class="string">&quot;&quot;</span> type: COUNTABLE &#125; &#125; reserved_resources &#123; memory: <span class="number">0</span> virtual_cores: <span class="number">0</span> resource_value_map &#123; key: <span class="string">&quot;memory-mb&quot;</span> value: <span class="number">0</span> units: <span class="string">&quot;Mi&quot;</span> type: COUNTABLE &#125; resource_value_map &#123; key: <span class="string">&quot;vcores&quot;</span> value: <span class="number">0</span> units: <span class="string">&quot;&quot;</span> type: COUNTABLE &#125; &#125; needed_resources &#123; memory: <span class="number">5120</span> virtual_cores: <span class="number">3</span> resource_value_map &#123; key: <span class="string">&quot;memory-mb&quot;</span> value: <span class="number">5120</span> units: <span class="string">&quot;Mi&quot;</span> type: COUNTABLE &#125; resource_value_map &#123; key: <span class="string">&quot;vcores&quot;</span> value: <span class="number">3</span> units: <span class="string">&quot;&quot;</span> type: COUNTABLE &#125; &#125; memory_seconds: <span class="number">3804903</span> vcore_seconds: <span class="number">2232</span> queue_usage_percentage: <span class="number">41</span>.<span class="number">666664</span> cluster_usage_percentage: <span class="number">41</span>.<span class="number">666664</span> preempted_memory_seconds: <span class="number">0</span> preempted_vcore_seconds: <span class="number">0</span> application_resource_usage_map &#123; key: <span class="string">&quot;memory-mb&quot;</span> value: <span class="number">3804903</span> &#125; application_resource_usage_map &#123; key: <span class="string">&quot;vcores&quot;</span> value: <span class="number">2232</span> &#125; application_preempted_resource_usage_map &#123; key: <span class="string">&quot;memory-mb&quot;</span> value: <span class="number">0</span> &#125; application_preempted_resource_usage_map &#123; key: <span class="string">&quot;vcores&quot;</span> value: <span class="number">0</span> &#125; &#125; originalTrackingUrl: <span class="string">&quot;http://bigdata3:4040&quot;</span> currentApplicationAttemptId &#123; application_id &#123; id: <span class="number">1</span> cluster_timestamp: <span class="number">1675390427337</span> &#125; attemptId: <span class="number">1</span> &#125; progress: <span class="number">0</span>.<span class="number">1</span> applicationType: <span class="string">&quot;SPARK&quot;</span> log_aggregation_status: LOG_NOT_START unmanaged_application: false priority &#123; priority: <span class="number">0</span> &#125; appNodeLabelExpression: <span class="string">&quot;&lt;Not set&gt;&quot;</span> amNodeLabelExpression: <span class="string">&quot;&lt;DEFAULT_PARTITION&gt;&quot;</span> appTimeouts &#123; application_timeout_type: APP_TIMEOUT_LIFETIME application_timeout &#123; application_timeout_type: APP_TIMEOUT_LIFETIME expire_time: <span class="string">&quot;UNLIMITED&quot;</span> remaining_time: -<span class="number">1</span> &#125; &#125; launchTime: <span class="number">1675390548575</span></span><br><span class="line"><span class="attribute">report1</span> : num_used_containers: <span class="number">3</span> num_reserved_containers: <span class="number">0</span> used_resources &#123; memory: <span class="number">5120</span> virtual_cores: <span class="number">3</span> resource_value_map &#123; key: <span class="string">&quot;memory-mb&quot;</span> value: <span class="number">5120</span> units: <span class="string">&quot;Mi&quot;</span> type: COUNTABLE &#125; resource_value_map &#123; key: <span class="string">&quot;vcores&quot;</span> value: <span class="number">3</span> units: <span class="string">&quot;&quot;</span> type: COUNTABLE &#125; &#125; reserved_resources &#123; memory: <span class="number">0</span> virtual_cores: <span class="number">0</span> resource_value_map &#123; key: <span class="string">&quot;memory-mb&quot;</span> value: <span class="number">0</span> units: <span class="string">&quot;Mi&quot;</span> type: COUNTABLE &#125; resource_value_map &#123; key: <span class="string">&quot;vcores&quot;</span> value: <span class="number">0</span> units: <span class="string">&quot;&quot;</span> type: COUNTABLE &#125; &#125; needed_resources &#123; memory: <span class="number">5120</span> virtual_cores: <span class="number">3</span> resource_value_map &#123; key: <span class="string">&quot;memory-mb&quot;</span> value: <span class="number">5120</span> units: <span class="string">&quot;Mi&quot;</span> type: COUNTABLE &#125; resource_value_map &#123; key: <span class="string">&quot;vcores&quot;</span> value: <span class="number">3</span> units: <span class="string">&quot;&quot;</span> type: COUNTABLE &#125; &#125; memory_seconds: <span class="number">3804903</span> vcore_seconds: <span class="number">2232</span> queue_usage_percentage: <span class="number">41</span>.<span class="number">666664</span> cluster_usage_percentage: <span class="number">41</span>.<span class="number">666664</span> preempted_memory_seconds: <span class="number">0</span> preempted_vcore_seconds: <span class="number">0</span> application_resource_usage_map &#123; key: <span class="string">&quot;memory-mb&quot;</span> value: <span class="number">3804903</span> &#125; application_resource_usage_map &#123; key: <span class="string">&quot;vcores&quot;</span> value: <span class="number">2232</span> &#125; application_preempted_resource_usage_map &#123; key: <span class="string">&quot;memory-mb&quot;</span> value: <span class="number">0</span> &#125; application_preempted_resource_usage_map &#123; key: <span class="string">&quot;vcores&quot;</span> value: <span class="number">0</span> &#125;</span><br><span class="line"><span class="attribute">id</span>:application_1675390427337_0001</span><br><span class="line"><span class="attribute">host</span>:<span class="number">192.168.41.133</span></span><br><span class="line"><span class="attribute">applicationtype</span> : SPARK</span><br><span class="line"><span class="attribute">name</span> : SparkSQL::<span class="number">192.168.41.132</span></span><br><span class="line"><span class="attribute">starttime</span> <span class="number">1675390547814</span></span><br><span class="line"><span class="attribute">finishtime</span> : <span class="number">0</span></span><br><span class="line"><span class="attribute">user</span>:hadoop</span><br><span class="line"><span class="attribute">memeveryscends</span>:<span class="number">3804903</span></span><br><span class="line"><span class="attribute">vcoreeveryscends</span>:<span class="number">2232</span></span><br><span class="line"><span class="attribute">size</span>:<span class="number">5120</span></span><br><span class="line"><span class="attribute">cores3</span></span><br><span class="line"><span class="attribute">state</span>:RUNNING</span><br><span class="line"><span class="attribute">url</span>:http://bigdata4:<span class="number">9999</span>/proxy/application_1675390427337_0001/</span><br><span class="line"><span class="attribute">resources</span>:name: memory-mb, units: Mi, type: COUNTABLE, value: <span class="number">5120</span>, minimum allocation: <span class="number">0</span>, maximum allocation: <span class="number">9223372036854775807</span>, tags:<span class="meta"> [], attributes &#123;&#125;,name: vcores, units: , type: COUNTABLE, value: 3, minimum allocation: 0, maximum allocation: 9223372036854775807, tags: [], attributes &#123;&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>yarn上的数据如下：</p>
<p><img src="https://pic.imgdb.cn/item/63dc72ba07d5ca7206288d89.jpg" alt="img">经对比数据一致</p>
<h2 id="发送数据到kafka"><a href="#发送数据到kafka" class="headerlink" title="发送数据到kafka"></a>发送数据到kafka</h2><p>如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sparkfirst</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Properties</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.<span class="type">KafkaProducer</span></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.<span class="type">Producer</span></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.<span class="type">ProducerRecord</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.utils.<span class="type">ParameterTool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.util.<span class="type">Random</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">testyarn</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(parameterTool: <span class="type">ParameterTool</span>): testyarn = <span class="keyword">new</span> testyarn(parameterTool)</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> tool = <span class="type">ParameterTool</span>.fromArgs(args)</span><br><span class="line">    testyarn(tool).excute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testyarn</span>(<span class="params">parameterTool: <span class="type">ParameterTool</span></span>) <span class="keyword">extends</span> <span class="title">YarnInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> properties = <span class="keyword">new</span> <span class="type">Properties</span></span><br><span class="line">  properties.put(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;bigdata3:9092,bigdata4:9092,bigdata5:9092 &quot;</span>)</span><br><span class="line">  properties.put(<span class="string">&quot;key.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>)</span><br><span class="line">  properties.put(<span class="string">&quot;value.serializer&quot;</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>)</span><br><span class="line">  properties.put(<span class="string">&quot;acks&quot;</span>, <span class="string">&quot;all&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">excute</span></span>() =&#123;</span><br><span class="line">    <span class="keyword">val</span> producer: <span class="type">Producer</span>[<span class="type">String</span>, <span class="type">String</span>] = <span class="keyword">new</span> <span class="type">KafkaProducer</span>[<span class="type">String</span>, <span class="type">String</span>](properties)</span><br><span class="line">  <span class="keyword">val</span> i = <span class="keyword">new</span> <span class="type">Random</span>().nextInt(<span class="number">10</span>) % <span class="number">3</span></span><br><span class="line">  <span class="keyword">val</span> strings = getYarnInfo.split(<span class="string">&quot;-------------------------------------------------------------&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span> (elem &lt;- strings) &#123;</span><br><span class="line">    println(elem)</span><br><span class="line">    producer.send(<span class="keyword">new</span> <span class="type">ProducerRecord</span>[<span class="type">String</span>, <span class="type">String</span>](<span class="string">&quot;yarninfo&quot;</span>, i, <span class="string">&quot; &quot;</span>,  elem))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    producer.close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消费数据"><a href="#消费数据" class="headerlink" title="消费数据"></a>消费数据</h2><h3 id="通过sparkstreaming消费"><a href="#通过sparkstreaming消费" class="headerlink" title="通过sparkstreaming消费"></a>通过sparkstreaming消费</h3><figure class="highlight roboconf"><table><tr><td class="code"><pre><span class="line">package project</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field</span><br><span class="line"><span class="keyword">import</span> java.util.Properties</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.utils.ParameterTool</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.formula.functions.T</span><br><span class="line"></span><br><span class="line">import scala.reflect.runtime.&#123;<span class="attribute">universe =&gt; ru&#125;</span></span><br><span class="line"><span class="attribute">import org.apache.spark.sql</span></span><br><span class="line"><span class="attribute">import org.apache.spark.sql.catalyst.plans.logical.MapPartitions</span></span><br><span class="line"><span class="attribute">import tool._</span></span><br><span class="line"><span class="attribute">object makeYArninfo &#123;</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">  def apply(parameterTool</span>: ParameterTool): makeYArninfo = new makeYArninfo(parameterTool)</span><br><span class="line"></span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    val tool = ParameterTool<span class="variable">.fromArgs</span>(args)</span><br><span class="line">      makeYArninfo(tool)<span class="variable">.excute</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class makeYArninfo(parameterTool: ParameterTool) extends Serializable &#123;</span><br><span class="line">  import org<span class="variable">.apache</span><span class="variable">.spark</span><span class="variable">.streaming</span><span class="variable">.kafka</span>010<span class="variable">._</span></span><br><span class="line">  import org<span class="variable">.apache</span><span class="variable">.spark</span><span class="variable">.sql</span><span class="variable">.SparkSession</span></span><br><span class="line">  import tool<span class="variable">._</span></span><br><span class="line">  import org<span class="variable">.apache</span><span class="variable">.kafka</span><span class="variable">.clients</span><span class="variable">.consumer</span><span class="variable">.ConsumerRecord</span></span><br><span class="line">  import org<span class="variable">.apache</span><span class="variable">.kafka</span><span class="variable">.common</span><span class="variable">.serialization</span><span class="variable">.StringDeserializer</span></span><br><span class="line">  import org<span class="variable">.apache</span><span class="variable">.spark</span><span class="variable">.streaming</span><span class="variable">.kafka</span>010<span class="variable">.LocationStrategies</span><span class="variable">.PreferConsistent</span></span><br><span class="line">  import org<span class="variable">.apache</span><span class="variable">.spark</span><span class="variable">.streaming</span><span class="variable">.kafka</span>010<span class="variable">.ConsumerStrategies</span><span class="variable">.Subscribe</span></span><br><span class="line">  import org<span class="variable">.apache</span><span class="variable">.spark</span><span class="variable">.TaskContext</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  val kafkaip = parameterTool<span class="variable">.get</span>(&quot;kafkaip&quot;,&quot;bigdata3:9092,bigdata4:9092,bigdata5:9092&quot;)</span><br><span class="line">  val groupid = parameterTool<span class="variable">.get</span>(&quot;groupid&quot;,&quot;test-3&quot;)</span><br><span class="line">  val offsetreset = parameterTool<span class="variable">.get</span>(&quot;offsetset&quot; , &quot;earliest&quot;)</span><br><span class="line">  val topicid = parameterTool<span class="variable">.get</span>(&quot;topic&quot;,&quot;yarninfo&quot;)</span><br><span class="line">  val mideng = parameterTool<span class="variable">.get</span>(&quot;mideng&quot;,&quot;timestamp&quot;)</span><br><span class="line">  val url = parameterTool<span class="variable">.get</span>(&quot;url&quot;,&quot;jdbc:clickhouse://ip:8123/bigdata&quot;)</span><br><span class="line">  val root = parameterTool<span class="variable">.get</span>(&quot;root&quot;,&quot;default&quot;)</span><br><span class="line">  val password = parameterTool<span class="variable">.get</span>(&quot;password&quot;,&quot;123456&quot;)</span><br><span class="line">  val driver = parameterTool<span class="variable">.get</span>(&quot;driver&quot;,&quot;com<span class="variable">.clickhouse</span><span class="variable">.jdbc</span><span class="variable">.ClickHouseDriver</span>&quot;)</span><br><span class="line">  val dbtable = parameterTool<span class="variable">.get</span>(&quot;dbtable&quot;,&quot;yarninfo_zihang&quot;)</span><br><span class="line">  val mode = parameterTool<span class="variable">.get</span>(&quot;mode&quot;,&quot;append&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  val kafkaParams = Map[String,Object](</span><br><span class="line">    &quot;bootstrap<span class="variable">.servers</span>&quot; -&gt; kafkaip, // kafka地址</span><br><span class="line">  &quot;key<span class="variable">.deserializer</span>&quot; -&gt; classOf[StringDeserializer], // 反序列化</span><br><span class="line">  &quot;value<span class="variable">.deserializer</span>&quot; -&gt; classOf[StringDeserializer], // 反序列化</span><br><span class="line">  &quot;group<span class="variable">.id</span>&quot; -&gt; groupid, // 指定消费者组</span><br><span class="line">  &quot;auto<span class="variable">.offset</span><span class="variable">.reset</span>&quot; -&gt; offsetreset, // 从什么地方开始消费</span><br><span class="line">  &quot;enable<span class="variable">.auto</span><span class="variable">.commit</span>&quot; -&gt; (false: java<span class="variable">.lang</span><span class="variable">.Boolean</span>) // offset的提交 是不是自动提交</span><br><span class="line">  )</span><br><span class="line">  private val streamingcontext = new streamingcontext</span><br><span class="line"></span><br><span class="line">  private val savefile = new savefile</span><br><span class="line"></span><br><span class="line">  def excute()=&#123;</span><br><span class="line"></span><br><span class="line">    val streaming = streamingcontext<span class="variable">.getstreamingnocheckpoint</span>()</span><br><span class="line">    val topic = Array(topicid)</span><br><span class="line">    val stream = KafkaUtils<span class="variable">.createDirectStream</span>(</span><br><span class="line">      streaming,</span><br><span class="line">      PreferConsistent,</span><br><span class="line">      Subscribe[String, String](topic, kafkaParams)</span><br><span class="line">    )</span><br><span class="line">    // 获取offset信息</span><br><span class="line">    stream<span class="variable">.foreachRDD</span> &#123; rdd =&gt;</span><br><span class="line">      val offsetRanges = rdd<span class="variable">.asInstanceOf</span>[HasOffsetRanges]<span class="variable">.offsetRanges</span></span><br><span class="line">      println(rdd<span class="variable">.partitions</span><span class="variable">.size</span>)</span><br><span class="line">      rdd<span class="variable">.foreachPartition</span> &#123; iter =&gt;</span><br><span class="line">        val o: OffsetRange = offsetRanges(TaskContext<span class="variable">.get</span><span class="variable">.partitionId</span>)</span><br><span class="line">        println(s&quot;$&#123;o<span class="variable">.topic</span>&#125; $&#123;o<span class="variable">.partition</span>&#125; $&#123;o<span class="variable">.fromOffset</span>&#125; $&#123;o<span class="variable">.untilOffset</span>&#125;&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">      val spark = SparkSession<span class="variable">.builder</span>()<span class="variable">.config</span>(rdd<span class="variable">.sparkContext</span><span class="variable">.getConf</span>)<span class="variable">.getOrCreate</span>()</span><br><span class="line">      import spark<span class="variable">.implicits</span><span class="variable">._</span></span><br><span class="line">      println(&quot;----------------------------------------------&quot;)</span><br><span class="line">      val wordsDataFrametmp =  rdd<span class="variable">.map</span>(_<span class="variable">.value</span>())<span class="variable">.filter</span>(_<span class="variable">.nonEmpty</span>)<span class="variable">.map</span>(line =&gt; &#123;</span><br><span class="line">        var str:String = line</span><br><span class="line">        if (line<span class="variable">.startsWith</span>(&quot;\r\n\r\n&quot;))&#123;</span><br><span class="line">          if (line<span class="variable">.startsWith</span>(&quot;\r\n\r\n&quot;))&#123;</span><br><span class="line">            str = line<span class="variable">.replace</span>(&quot;\r\n\r\n&quot;, &quot;\r\n&quot;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str<span class="variable">.split</span>(&quot;\r\n&quot;)</span><br><span class="line">      &#125;)<span class="variable">.filter</span>(_<span class="variable">.nonEmpty</span>)</span><br><span class="line"></span><br><span class="line">      var wordsDataFrame:sql<span class="variable">.DataFrame</span> = null</span><br><span class="line"></span><br><span class="line">//      def getTypeTag[T: ru<span class="variable">.TypeTag</span>](obj: T) = ru<span class="variable">.typeTag</span>[T]</span><br><span class="line">//</span><br><span class="line">//      val tpe = getTypeTag(wordsDataFrametmp)<span class="variable">.tpe</span></span><br><span class="line">//</span><br><span class="line">//      tpe<span class="variable">.dealias</span><span class="variable">.getClass</span><span class="variable">.getFields</span><span class="variable">.foreach</span>(println(_))</span><br><span class="line">//      println(&quot;---------------------------------&quot;)</span><br><span class="line">//      tpe<span class="variable">.getClass</span><span class="variable">.getDeclaredFields</span><span class="variable">.foreach</span>(println(_))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//      println(&quot;\&quot;wordsDataFrametmp的数据\&quot; &quot;)</span><br><span class="line">//      //wordsDataFrametmp<span class="variable">.collect</span>()<span class="variable">.foreach</span>(_<span class="variable">.foreach</span>(println(_)))</span><br><span class="line">//      println(&quot;wordsDataFrametmp&quot;)</span><br><span class="line">//      wordsDataFrametmp<span class="variable">.toDF</span>(&quot;total&quot;)<span class="variable">.show</span>(false)</span><br><span class="line">//      println(&quot;rdd<span class="variable">.map</span>(_<span class="variable">.value</span>())&quot;)</span><br><span class="line">//      rdd<span class="variable">.map</span>(_<span class="variable">.value</span>())<span class="variable">.toDF</span>(&quot;total&quot;)<span class="variable">.show</span>(false)</span><br><span class="line">//      println(&quot;rdd<span class="variable">.map</span>(_<span class="variable">.value</span>())<span class="variable">.map</span>(_<span class="variable">.split</span>(\&quot;\\r\\n\&quot;))&quot;)</span><br><span class="line">//      rdd<span class="variable">.map</span>(_<span class="variable">.value</span>())<span class="variable">.map</span>(line =&gt; &#123;</span><br><span class="line">//        var str:String = line</span><br><span class="line">//          if (line<span class="variable">.startsWith</span>(&quot;\r\n\r\n&quot;))&#123;</span><br><span class="line">//          str = line<span class="variable">.replace</span>(&quot;\r\n\r\n&quot;, &quot;\r\n&quot;)</span><br><span class="line">//        &#125;</span><br><span class="line">//       str<span class="variable">.split</span>(&quot;\r\n&quot;)</span><br><span class="line">//      &#125;)<span class="variable">.toDF</span>(&quot;total&quot;)<span class="variable">.show</span>(false)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      // ------------------------------------------------------------------------------------------------------</span><br><span class="line">      if(!((wordsDataFrametmp<span class="variable">.collect</span>()<span class="variable">.length</span> == 1)&amp;&amp;(wordsDataFrametmp<span class="variable">.collect</span>()<span class="variable">.length</span> == 0)))&#123;</span><br><span class="line">        wordsDataFrame= wordsDataFrametmp<span class="variable">.map</span>(strings=&gt;&#123;</span><br><span class="line">          val id = strings(1)<span class="variable">.split</span>(&quot;:&quot;)(1)</span><br><span class="line">          val host = strings(2)<span class="variable">.split</span>(&quot;:&quot;)(1)</span><br><span class="line">          val applicationtype = strings(3)<span class="variable">.split</span>(&quot;:&quot;)(1)</span><br><span class="line">          val name = strings(4)<span class="variable">.split</span>(&quot;&amp;&amp;&quot;)(1)</span><br><span class="line">          val startime = strings(5)<span class="variable">.split</span>(&quot;:&quot;)(1)</span><br><span class="line">          val endtime = strings(6)<span class="variable">.split</span>(&quot;:&quot;)(1)</span><br><span class="line">          val user = strings(7)<span class="variable">.split</span>(&quot;:&quot;)(1)</span><br><span class="line">          val memeveryscends = strings(8)<span class="variable">.split</span>(&quot;:&quot;)(1)</span><br><span class="line">          val vcoreeveryscends = strings(9)<span class="variable">.split</span>(&quot;:&quot;)(1)</span><br><span class="line">          val size = strings(10)<span class="variable">.split</span>(&quot;:&quot;)(1)<span class="variable">.toLong</span></span><br><span class="line">          val cores = strings(11)<span class="variable">.split</span>(&quot;:&quot;)(1)<span class="variable">.toLong</span></span><br><span class="line">          val state = strings(12)<span class="variable">.split</span>(&quot;:&quot;)(1)</span><br><span class="line">          val url = strings(13)<span class="variable">.split</span>(&quot;&amp;&amp;&quot;)(1)</span><br><span class="line">          val queue = strings(14)<span class="variable">.split</span>(&quot;:&quot;)(1)</span><br><span class="line">          val timestamp = strings(15)<span class="variable">.split</span>(&quot;&amp;&amp;&quot;)(1)</span><br><span class="line">          (id,host,applicationtype,name,startime,endtime,user,memeveryscends,vcoreeveryscends,size,cores,state,url,queue,timestamp)</span><br><span class="line">        &#125;)</span><br><span class="line">          <span class="variable">.toDF</span>(&quot;id&quot;,&quot;host&quot;,</span><br><span class="line">            &quot;applicationtype&quot;,&quot;name&quot;,</span><br><span class="line">            &quot;startime&quot;,&quot;endtime&quot;,</span><br><span class="line">            &quot;user&quot;,&quot;memeveryscends&quot;,</span><br><span class="line">            &quot;vcoreeveryscends&quot;,&quot;size&quot;,</span><br><span class="line">            &quot;cores&quot;,&quot;state&quot;,&quot;url&quot;,&quot;queue&quot;,&quot;timestamp&quot;)</span><br><span class="line">        if (!wordsDataFrame<span class="variable">.isEmpty</span>)&#123;</span><br><span class="line">          wordsDataFrame<span class="variable">.show</span>()</span><br><span class="line">          savefile<span class="variable">.savetojdbc</span>(spark, wordsDataFrame, url , root , password,dbtable,driver,mideng,mode)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       //存储offset和提交offset</span><br><span class="line">      stream<span class="variable">.asInstanceOf</span>[CanCommitOffsets]<span class="variable">.commitAsync</span>(offsetRanges)</span><br><span class="line">    &#125;</span><br><span class="line">    streaming<span class="variable">.start</span>()</span><br><span class="line">    streaming<span class="variable">.awaitTermination</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>在机器上部署添加依赖的时候可以使用–jars</p>
<p>如下：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">spark-submit \</span><br><span class="line">--master yarn \</span><br><span class="line">--deploy-mode client \</span><br><span class="line">--name 录入yarninfo \</span><br><span class="line">--executor-memory <span class="number">1</span>g \</span><br><span class="line">--num-executors <span class="number">1</span> \</span><br><span class="line">--executor-cores <span class="number">1</span> \</span><br><span class="line">--jars <span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/kafka/</span>spark-streaming-kafka-<span class="number">0</span>-<span class="number">10</span>_2.<span class="number">12</span>-<span class="number">3.2</span>.<span class="number">1</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/kafka/</span>spark-token-provider-kafka-<span class="number">0</span>-<span class="number">10</span>_2.<span class="number">12</span>-<span class="number">3.2</span>.<span class="number">1</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/kafka/</span>kafka-clients-<span class="number">2.2</span>.<span class="number">1</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/connect/</span>clickhouse-jdbc-<span class="number">0.3</span>.<span class="number">2</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/connect/</span>clickhouse-http-client-<span class="number">0.3</span>.<span class="number">2</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/connect/</span>clickhouse-client-<span class="number">0.3</span>.<span class="number">2</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/flink/</span>flink-clients_2.<span class="number">12</span>-<span class="number">1.13</span>.<span class="number">6</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/flink/</span>flink-core-<span class="number">1.13</span>.<span class="number">6</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/flink/</span>flink-scala_2.<span class="number">12</span>-<span class="number">1.13</span>.<span class="number">6</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/flink/</span>flink-java-<span class="number">1.13</span>.<span class="number">6</span>.jar \</span><br><span class="line">--<span class="keyword">class</span> <span class="keyword">project</span>.makeYArninfo \</span><br><span class="line"><span class="regexp">/home/</span>hadoop<span class="regexp">/project/</span>jar/bigdatajava-<span class="number">1.0</span>-SNAPSHOT.jar \</span><br><span class="line">--kafkaip namenode:<span class="number">9092</span>,resourcemanager:<span class="number">9092</span>,workers:<span class="number">9092</span> </span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">spark-submit \</span><br><span class="line">--master yarn \</span><br><span class="line">--name 采集yarn \</span><br><span class="line">--deploy-mode client \</span><br><span class="line">--executor-memory <span class="number">1</span>g \</span><br><span class="line">--num-executors <span class="number">1</span> \</span><br><span class="line">--executor-cores <span class="number">1</span> \</span><br><span class="line">--jars <span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/kafka/</span>spark-streaming-kafka-<span class="number">0</span>-<span class="number">10</span>_2.<span class="number">12</span>-<span class="number">3.2</span>.<span class="number">1</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/kafka/</span>spark-token-provider-kafka-<span class="number">0</span>-<span class="number">10</span>_2.<span class="number">12</span>-<span class="number">3.2</span>.<span class="number">1</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/kafka/</span>kafka-clients-<span class="number">2.2</span>.<span class="number">1</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/flink/</span>flink-clients_2.<span class="number">12</span>-<span class="number">1.13</span>.<span class="number">6</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/flink/</span>flink-core-<span class="number">1.13</span>.<span class="number">6</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/flink/</span>flink-scala_2.<span class="number">12</span>-<span class="number">1.13</span>.<span class="number">6</span>.jar,<span class="regexp">/home/</span>hadoop<span class="regexp">/software/</span>jar<span class="regexp">/flink/</span>flink-java-<span class="number">1.13</span>.<span class="number">6</span>.jar \</span><br><span class="line">--<span class="keyword">class</span> sparkfirst.testyarn \</span><br><span class="line">--queue zihan \</span><br><span class="line"><span class="regexp">/home/</span>hadoop<span class="regexp">/project/</span>jar/bigdatajava-<span class="number">1.0</span>-SNAPSHOT.jar \</span><br><span class="line">--kafkaip namenode:<span class="number">9092</span>,resourcemanager:<span class="number">9092</span>,workers:<span class="number">9092</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>或者使用maven的方式</p>
<p>通过参数</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">--repositories https:<span class="regexp">//</span>oss.sonatype.org<span class="regexp">/content/g</span>roups<span class="regexp">/public/</span> \</span><br><span class="line">--packages org.apache.spark:spark-streaming-kafka_2.<span class="number">10</span>:<span class="number">1.6</span>.<span class="number">0</span>,org.elasticsearch:elasticsearch-spark_2.<span class="number">10</span>:<span class="number">2.2</span>.<span class="number">0</span> \</span><br></pre></td></tr></table></figure>

<p>就可以控制，packages里加的是依赖，上面则是maven仓库的地址</p>
<p>只有第一次使用的时候会下载，之后就不会了</p>
<p>或者直接打胖包通过插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="xxl进行调度，报警等"><a href="#xxl进行调度，报警等" class="headerlink" title="xxl进行调度，报警等"></a>xxl进行调度，报警等</h2><p>然后我们把启动脚本封装到一个sh中，通过xxl进行调度</p>
<p>脚本如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pid=$(jps |  grep SparkSubmit | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> [ ! -n <span class="string">&quot;<span class="variable">$pid</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">yarninfo.sh</span><br><span class="line">ssh bigdata3 <span class="string">&quot;/home/hadoop/shell/ding.sh 梅花十三 采集yarn日志 请登录查看 192.168.41.133 15046528047&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;信息正常&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>上述只是个简单的脚本，如果要真正的实时监控请自行编写</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>监控yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2022/12/07/docker/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>这个是关于docker的简单介绍以及使用</p>
<p>本来这个我其实不打算写的因为网上关于docker的教程很多，而且都比较全，我目前所学的全部都是基于菜鸟教程的</p>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>首先我们要明白，什么是docker</p>
<p>docker就是相当于一个箱子，其里面有它自己的生态圈</p>
<p>各种环境依赖是直接现成的那样，和之前java打包成exe文件后面绑定依赖是一样的</p>
<h1 id="为什么现在docker会会很火"><a href="#为什么现在docker会会很火" class="headerlink" title="为什么现在docker会会很火"></a>为什么现在docker会会很火</h1><p>因为docker不需要我们配置复杂的环境变量，只要我们通过网络下载一个包含这个功能的linux或者unbanto镜像就行</p>
<p>特别方便，不过方便的同时也会带来隐患，比如，不知道原生安装的话，我们如何详细的知道这个组件的功能？</p>
<h2 id="docker的安装"><a href="#docker的安装" class="headerlink" title="docker的安装"></a>docker的安装</h2><p>docker支持多种操作系统的安装，以下我只简单介绍关于linux和云服务器的安装方法</p>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>使用官方命令安装</p>
<p><code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code></p>
<p>也可以用国内的daocloud安装</p>
<p><code>curl -sSL https://get.daocloud.io/docker | sh</code></p>
<p>当执行安装命令出现以下情况报错的时候</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"># Executing docker install script, commit: 4f282167c425347a931ccfd95cc91fab041d414f</span><br><span class="line">+ sh -c &#x27;yum install -y -q yum-utils&#x27;</span><br><span class="line"><span class="keyword">error: </span>rpmdb: BDB0113 Thread/process 16675/139942115395648 failed: BDB1507 Thread died in Berkeley DB library</span><br><span class="line"><span class="keyword">error: </span>db5 error(<span class="string">-30973</span>) from dbenv-&gt;failchk: BDB0087 DB_RUNRECOVERY: Fatal error, run database recovery</span><br><span class="line"><span class="keyword">error: </span>cannot open Packages index using db5 -  (<span class="string">-30973</span>)</span><br><span class="line"><span class="keyword">error: </span>cannot open Packages database in /var/lib/rpm</span><br><span class="line">CRITICAL:yum.main:</span><br><span class="line"></span><br><span class="line"><span class="keyword">Error: </span>rpmdb open failed</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>执行 <code>mv /var/lib/rpm/__db.00* /tmp/&amp;&amp;yum clean all</code></p>
<p>再执行安装命令就可以了</p>
<p>这样在有网的机器上就安装完成了，是不是很简单 ，</p>
<p>接下来我们要说手动安装的情况</p>
<p>首先要卸载旧版本</p>
<p>较旧的 Docker 版本称为 docker 或 docker-engine 。如果已安装这些程序，请卸载它们以及相关的依赖项。</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker <span class="string">\</span></span><br><span class="line">                  docker-client <span class="string">\</span></span><br><span class="line">                  docker-client-latest <span class="string">\</span></span><br><span class="line">                  docker-common <span class="string">\</span></span><br><span class="line">                  docker-latest <span class="string">\</span></span><br><span class="line">                  docker-latest-logrotate <span class="string">\</span></span><br><span class="line">                  docker-logrotate <span class="string">\</span></span><br><span class="line">                  docker-engine</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</p>
<p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-<span class="class"><span class="keyword">data</span> \</span></span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure>

<p>使用以下命令来设置稳定的仓库。</p>
<p>官方地址源</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:<span class="regexp">//</span>download.docker.com<span class="regexp">/linux/</span>centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>阿里云地址源</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/docker-ce/</span>linux<span class="regexp">/centos/</span>docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>清华大学的</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/docker-ce/</span>linux<span class="regexp">/centos/</span>docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>在国内还是建议阿里和清华大学的</p>
<p>安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本：</p>
<p><code>$ sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</code></p>
<p>如果提示您接受 GPG 密钥，请选是。</p>
<p>Docker 安装完默认未启动。并且已经创建好 docker 用户组，但该用户组下没有用户。</p>
<p><strong>要安装特定版本的 Docker Engine-Community，请在存储库中列出可用版本，然后选择并安装：</strong></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">$ yum <span class="keyword">list</span> docker-<span class="keyword">ce</span> --showduplicates | <span class="keyword">sort</span> -r</span><br><span class="line"></span><br><span class="line">docker-<span class="keyword">ce</span>.x86_64  <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">1</span>-<span class="number">3</span>.el7                     docker-<span class="keyword">ce</span>-stable</span><br><span class="line">docker-<span class="keyword">ce</span>.x86_64  <span class="number">3</span>:<span class="number">18.09</span>.<span class="number">0</span>-<span class="number">3</span>.el7                     docker-<span class="keyword">ce</span>-stable</span><br><span class="line">docker-<span class="keyword">ce</span>.x86_64  <span class="number">18.06</span>.<span class="number">1</span>.<span class="keyword">ce</span>-<span class="number">3</span>.el7                    docker-<span class="keyword">ce</span>-stable</span><br><span class="line">docker-<span class="keyword">ce</span>.x86_64  <span class="number">18.06</span>.<span class="number">0</span>.<span class="keyword">ce</span>-<span class="number">3</span>.el7                    docker-<span class="keyword">ce</span>-stable</span><br></pre></td></tr></table></figure>

<p>通过其完整的软件包名称安装特定版本，该软件包名称是软件包名称（docker-ce）加上版本字符串（第二列），从第一个冒号（:）一直到第一个连字符，并用连字符（-）分隔。例如：docker-ce-18.09.1。</p>
<p><code>$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</code></p>
<p>然后启动docker</p>
<p><code>$ sudo systemctl start docker</code></p>
<p>然后运行hello world镜像查看是不是我们成功安装了这个docker</p>
<p><code>$ sudo docker run hello-world</code></p>
<h3 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h3><p>先删除安装包</p>
<p><code>yum remove docker-ce </code></p>
<p>然后删除镜像文件等</p>
<p><code>rm -rf /var/lib/docker</code></p>
<p>云服务器和上面一样</p>
<h1 id="docker-命令"><a href="#docker-命令" class="headerlink" title="docker 命令"></a>docker 命令</h1><p>docker命令的种类不多但是其中的分支较多</p>
<p>docker run : 原本的意义是创建一个docker容器，并运行它</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">-<span class="selector-tag">a</span> stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</span><br><span class="line"></span><br><span class="line">-d: 后台运行容器，并返回容器ID；</span><br><span class="line"></span><br><span class="line">-<span class="selector-tag">i</span>: 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line"></span><br><span class="line">-P: 随机端口映射，容器内部端口随机映射到主机的端口</span><br><span class="line"></span><br><span class="line">-<span class="selector-tag">p</span>: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class="line"></span><br><span class="line">-t: 为容器重新分配一个伪输入终端，通常与 -<span class="selector-tag">i</span> 同时使用；</span><br><span class="line"></span><br><span class="line"><span class="attr">--name</span>=<span class="string">&quot;nginx-lb&quot;</span>: 为容器指定一个名称；</span><br><span class="line"></span><br><span class="line"><span class="attr">--dns</span> <span class="number">8.8</span>.<span class="number">8.8</span>: 指定容器使用的DNS服务器，默认和宿主一致；</span><br><span class="line"></span><br><span class="line"><span class="attr">--dns-search</span> example<span class="selector-class">.com</span>: 指定容器DNS搜索域名，默认和宿主一致；</span><br><span class="line"></span><br><span class="line">-h <span class="string">&quot;mars&quot;</span>: 指定容器的hostname；</span><br><span class="line"></span><br><span class="line">-e username=<span class="string">&quot;ritchie&quot;</span>: 设置环境变量；</span><br><span class="line"></span><br><span class="line"><span class="attr">--env-file</span>=<span class="selector-attr">[]</span>: 从指定文件读入环境变量；</span><br><span class="line"></span><br><span class="line"><span class="attr">--cpuset</span>=<span class="string">&quot;0-2&quot;</span> or <span class="attr">--cpuset</span>=<span class="string">&quot;0,1,2&quot;</span>: 绑定容器到指定CPU运行；</span><br><span class="line"></span><br><span class="line">-m :设置容器使用内存最大值；</span><br><span class="line"></span><br><span class="line"><span class="attr">--net</span>=<span class="string">&quot;bridge&quot;</span>: 指定容器的网络连接类型，支持 bridge/host/<span class="attribute">none</span>/container: 四种类型；</span><br><span class="line"></span><br><span class="line"><span class="attr">--link</span>=<span class="selector-attr">[]</span>: 添加链接到另一个容器；</span><br><span class="line"></span><br><span class="line"><span class="attr">--expose</span>=<span class="selector-attr">[]</span>: 开放一个端口或一组端口；</span><br><span class="line"></span><br><span class="line"><span class="attr">--volume</span> , -v: 绑定一个卷</span><br></pre></td></tr></table></figure>

<p><strong>docker start</strong> :启动一个或多个已经被停止的容器</p>
<p><strong>docker stop</strong> :停止一个运行中的容器</p>
<p><strong>docker restart</strong> :重启容器</p>
<p><strong>docker kill</strong> :杀掉一个运行中的容器。</p>
<ul>
<li><strong>-s :</strong> 向容器发送一个信号</li>
</ul>
<p><strong>docker rm ：</strong> 删除一个或多个容器。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-f :通过 SIGKILL 信号强制删除一个运行中的容器。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-l :移除容器间的网络连接，而非容器本身。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-v :删除与容器关联的卷。</span></span><br></pre></td></tr></table></figure>

<ul>
<li>命令可以嵌套使用如下 ：<ul>
<li><code>删除所有已经停止的容器：docker rm $(docker ps -a -q)</code></li>
</ul>
</li>
</ul>
<p><strong>docker pause</strong> :暂停容器中所有的进程。</p>
<p><strong>docker unpause</strong> :恢复容器中所有的进程。</p>
<p><strong>docker create ：</strong> 创建一个新的容器但不启动它 ：其语法和run一样</p>
<p><strong>docker exec ：</strong> 在运行的容器中执行命令</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-d :分离模式: 在后台运行</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-i :即使没有附加也保持STDIN 打开</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-t :分配一个伪终端</span></span><br></pre></td></tr></table></figure>

<p>docker ps : 列出容器</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-a :显示所有的容器，包括未运行的。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-f :根据条件过滤显示的内容。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--format :指定返回值的模板文件。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-l :显示最近创建的容器。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-n :列出最近创建的n个容器。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--no-trunc :不截断输出。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-q :静默模式，只显示容器编号。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-s :显示总的文件大小。</span></span><br></pre></td></tr></table></figure>

<p>输出介绍</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><span class="line"><span class="attribute">输出详情介绍：</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">CONTAINER ID</span><span class="punctuation">:</span> <span class="string">容器 ID。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">IMAGE</span><span class="punctuation">:</span> <span class="string">使用的镜像。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">COMMAND</span><span class="punctuation">:</span> <span class="string">启动容器时运行的命令。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">CREATED</span><span class="punctuation">:</span> <span class="string">容器的创建时间。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">STATUS</span><span class="punctuation">:</span> <span class="string">容器状态。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">状态有7种：</span></span><br><span class="line"><span class="attribute"></span></span><br><span class="line"><span class="attribute">created（已创建）</span></span><br><span class="line"><span class="attribute">restarting（重启中）</span></span><br><span class="line"><span class="attribute">running（运行中）</span></span><br><span class="line"><span class="attribute">removing（迁移中）</span></span><br><span class="line"><span class="attribute">paused（暂停）</span></span><br><span class="line"><span class="attribute">exited（停止）</span></span><br><span class="line"><span class="attribute">dead（死亡）</span></span><br><span class="line"><span class="attribute">PORTS</span><span class="punctuation">:</span> <span class="string">容器的端口信息和使用的连接类型（tcp\udp）。</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">NAMES</span><span class="punctuation">:</span> <span class="string">自动分配的容器名称。</span></span><br></pre></td></tr></table></figure>

<p><strong>docker inspect :</strong> 获取容器&#x2F;镜像的元数据。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-f :指定返回值的模板文件。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-s :显示总的文件大小。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--type :为指定类型返回JSON。</span></span><br></pre></td></tr></table></figure>

<p><strong>docker top :</strong> 查看容器中运行的进程信息，支持 ps 命令参数。</p>
<p><code>docker top [OPTIONS] CONTAINER [ps OPTIONS]</code></p>
<ul>
<li>查看所有运行容器的进程信息。</li>
<li><code>for i in  </code>docker ps |grep Up|awk ‘{print $1}’<code>;do echo \ &amp;&amp;docker top $i; done</code></li>
</ul>
<p><strong>docker attach :</strong> 连接到正在运行中的容器。</p>
<p>要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。</p>
<p>docker events : 从服务器获取实时事件</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">-f ：根据条件过滤事件；</span><br><span class="line"></span><br><span class="line"><span class="params">--since</span> ：从指定的时间戳后显示所有事件;</span><br><span class="line"></span><br><span class="line"><span class="params">--until</span> ：流水时间显示到指定的时间为止；</span><br><span class="line"></span><br><span class="line">如果指定的时间是到秒级的，需要将时间转成时间戳。如果时间为日期的话，可以直接使用，如<span class="params">--since=</span><span class="string">&quot;2016-07-01&quot;</span>。</span><br></pre></td></tr></table></figure>

<p>docker logs : 获取容器的日志</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">-f : 跟踪日志输出</span><br><span class="line"></span><br><span class="line"><span class="comment">--since :显示某个开始时间的所有日志</span></span><br><span class="line"></span><br><span class="line">-t : 显示时间戳</span><br><span class="line"></span><br><span class="line"><span class="comment">--tail :仅列出最新N条容器日志</span></span><br></pre></td></tr></table></figure>

<p><strong>docker wait :</strong> 阻塞运行直到容器停止，然后打印出它的退出代码</p>
<p><strong>docker export :</strong> 将文件系统作为一个tar归档文件导出到STDOUT。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-o :将输入内容写到文件。</span></span><br></pre></td></tr></table></figure>

<p>docker port 用于列出指定的容器的端口映射，或者查找将 PRIVATE_PORT NAT 到面向公众的端口。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">docker port <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span> <span class="comment">[PRIVATE_PORT<span class="comment">[/PROTO]</span>]</span></span><br></pre></td></tr></table></figure>

<p>docker stats : 显示容器资源的使用情况，包括：CPU、内存、网络 I&#x2F;O 等。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attr">--all</span> , -<span class="selector-tag">a</span> :显示所有的容器，包括未运行的。</span><br><span class="line"></span><br><span class="line"><span class="attr">--format</span> :指定返回值的模板文件。</span><br><span class="line"></span><br><span class="line"><span class="attr">--no-stream</span> :展示当前状态就直接退出了，不再实时更新。</span><br><span class="line"></span><br><span class="line"><span class="attr">--no-trunc</span> :不截断输出。</span><br></pre></td></tr></table></figure>

<p><strong>docker commit :</strong> 从容器创建一个新的镜像。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-a :提交的镜像作者；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-c :使用Dockerfile指令来创建镜像；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-m :提交时的说明文字；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-p :在commit时，将容器暂停。</span></span><br></pre></td></tr></table></figure>

<p><strong>docker cp :</strong> 用于容器与主机之间的数据拷贝。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-L :保持源目标中的链接</span><br><span class="line">docker <span class="built_in">cp</span> [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-</span><br><span class="line">docker <span class="built_in">cp</span> [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</span><br><span class="line">例子 ：</span><br><span class="line">实例</span><br><span class="line">将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> /www/runoob 96f7f14e99ab:/www/</span><br><span class="line">将主机/www/runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www。</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> /www/runoob 96f7f14e99ab:/www</span><br><span class="line">将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中。</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span>  96f7f14e99ab:/www /tmp/</span><br></pre></td></tr></table></figure>

<p>docker diff : 检查容器里文件结构的更改。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">docker diff <span class="comment">[OPTIONS]</span> <span class="keyword">CONTAINER</span></span><br></pre></td></tr></table></figure>

<p><strong>docker login :</strong> 登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p>
<p><strong>docker logout :</strong> 登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">login</span> [<span class="keyword">OPTIONS</span>] [<span class="keyword">SERVER</span>]</span><br><span class="line">docker logout [<span class="keyword">OPTIONS</span>] [<span class="keyword">SERVER</span>]</span><br><span class="line">-u :登陆的用户名</span><br><span class="line"></span><br><span class="line">-p :登陆的密码</span><br></pre></td></tr></table></figure>

<p>docker pull : 从镜像仓库中拉取或者更新指定镜像</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">-<span class="selector-tag">a</span> :拉取所有 tagged 镜像</span><br><span class="line">docker pull <span class="selector-attr">[OPTIONS]</span> NAME<span class="selector-attr">[:TAG|@DIGEST]</span></span><br><span class="line"><span class="attr">--disable-content-trust</span> :忽略镜像的校验,默认开启</span><br></pre></td></tr></table></figure>

<p>docker push : 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--disable-content-trust :忽略镜像的校验,默认开启</span></span><br><span class="line">docker push [<span class="keyword">OPTIONS</span>] <span class="type">NAME</span>[:TAG]</span><br></pre></td></tr></table></figure>

<p><strong>docker search :</strong> 从Docker Hub查找镜像</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">search</span> [<span class="keyword">OPTIONS</span>] TERM</span><br><span class="line"><span class="comment">--automated :只列出 automated build类型的镜像；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--no-trunc :显示完整的镜像描述；</span></span><br><span class="line"></span><br><span class="line">-f &lt;过滤条件&gt;:列出收藏数不小于指定值的镜像。</span><br></pre></td></tr></table></figure>

<p>docker images : 列出本地镜像。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">docker images <span class="selector-attr">[OPTIONS]</span> <span class="selector-attr">[REPOSITORY[:TAG]</span>]</span><br><span class="line">-<span class="selector-tag">a</span> :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</span><br><span class="line"></span><br><span class="line"><span class="attr">--digests</span> :显示镜像的摘要信息；</span><br><span class="line"></span><br><span class="line">-f :显示满足条件的镜像；</span><br><span class="line"></span><br><span class="line"><span class="attr">--format</span> :指定返回值的模板文件；</span><br><span class="line"></span><br><span class="line"><span class="attr">--no-trunc</span> :显示完整的镜像信息；</span><br><span class="line"></span><br><span class="line">-<span class="selector-tag">q</span> :只显示镜像ID。</span><br></pre></td></tr></table></figure>

<p>docker rmi : 删除本地一个或多个镜像。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">docker rmi <span class="selector-attr">[OPTIONS]</span> IMAGE <span class="selector-attr">[IMAGE...]</span></span><br><span class="line">-f :强制删除；</span><br><span class="line"></span><br><span class="line"><span class="attr">--no-prune</span> :不移除该镜像的过程镜像，默认移除；</span><br></pre></td></tr></table></figure>

<p>docker tag : 标记本地镜像，将其归入某一仓库。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">tag</span> <span class="title">[OPTIONS</span>] IMAGE[:<span class="keyword">TAG</span>] [REGISTRYHOST/][USERNAME/]NAME[:<span class="keyword">TAG</span>]</span><br></pre></td></tr></table></figure>

<p>docker build 命令用于使用 Dockerfile 创建镜像</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br><span class="line"><span class="deletion">--build-arg=[] :设置镜像创建时的变量；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--cpu-shares :设置 cpu 使用权重；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--cpu-period :限制 CPU CFS周期；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--cpu-quota :限制 CPU CFS配额；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--cpuset-cpus :指定使用的CPU id；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--cpuset-mems :指定使用的内存 id；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--disable-content-trust :忽略校验，默认开启；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-f :指定要使用的Dockerfile路径；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--force-rm :设置镜像过程中删除中间容器；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--isolation :使用容器隔离技术；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--label=[] :设置镜像使用的元数据；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-m :设置内存最大值；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--memory-swap :设置Swap的最大值为内存+swap，&quot;-1&quot;表示不限swap；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--no-cache :创建镜像的过程不使用缓存；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--pull :尝试去更新镜像的新版本；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--quiet, -q :安静模式，成功后只输出镜像 ID；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--rm :设置镜像成功后删除中间容器；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--shm-size :设置/dev/shm的大小，默认值是64M；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--ulimit :Ulimit配置。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--squash :将 Dockerfile 中所有的操作压缩为一层。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--network: 默认 default。在构建期间设置RUN指令的网络模式</span></span><br></pre></td></tr></table></figure>

<p>docker history : 查看指定镜像的创建历史。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">docker history [OPTIONS] IMAGE</span><br><span class="line"><span class="deletion">-H :以可读的格式打印镜像大小和日期，默认为true；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">--no-trunc :显示完整的提交记录；</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-q :仅列出提交记录ID。</span></span><br></pre></td></tr></table></figure>

<p>docker save : 将指定镜像保存成 tar 归档文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">docker save <span class="selector-attr">[OPTIONS]</span> IMAGE <span class="selector-attr">[IMAGE...]</span></span><br><span class="line">-o :输出到的文件。</span><br></pre></td></tr></table></figure>

<p>docker load : 导入使用 docker save 命令导出的镜像。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">docker load <span class="selector-attr">[OPTIONS]</span></span><br><span class="line"><span class="attr">--input</span> , -<span class="selector-tag">i</span> : 指定导入的文件，代替 STDIN。</span><br><span class="line"></span><br><span class="line"><span class="attr">--quiet</span> , -<span class="selector-tag">q</span> : 精简输出信息。</span><br></pre></td></tr></table></figure>

<p><strong>docker import :</strong> 从归档文件中创建镜像。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">import</span> [<span class="keyword">OPTIONS</span>] <span class="keyword">file</span>|URL|- [REPOSITORY[:TAG]]</span><br><span class="line">-c :应用docker 指令创建镜像；</span><br><span class="line"></span><br><span class="line">-m :提交时的说明文字；</span><br></pre></td></tr></table></figure>

<p>docker info : 显示 Docker 系统信息，包括镜像和容器数。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> <span class="literal">info</span> [OPTIONS]</span><br></pre></td></tr></table></figure>

<p>docker version :显示 Docker 版本信息。</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-f :指定返回值的模板文件。</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂货技术栈</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/11/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line">$ hexo <span class="keyword">new</span> <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>把jar包打包成exe</title>
    <url>/2022/11/19/jar%E5%88%B0exe/</url>
    <content><![CDATA[<h1 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h1><ul>
<li>我们所使用的工具是exe4j 和 inno setup</li>
</ul>
<h2 id="exe4j"><a href="#exe4j" class="headerlink" title="exe4j"></a>exe4j</h2><ul>
<li>简单来说这个就是个工具，可以把java的jar包打包成exe的</li>
<li>可以让其他由java运行环境的机器运行这个jar</li>
<li>而且还可以稍微做到保密的程度</li>
<li>exe4j 是一个帮助你集成 Java 应用程序到 Windows 操作环境的 java 可执行文件生成工具，无论这些应用是用于服务器，还是图形用户界面（GUI）或命令行的应用程序。如果你想在任务管理器中及 Windows XP 分组的用户友好任务栏里以你的进程名取代 java.exe 的出现，那么 exe4j 可以完成这个工作。exe4j 帮助你以一种安全的方式启动你的 java 应用程序，来显示本地启动画面，检测及发布合适的 JRE 和 JDK，以及进行启动时所发生的错误处理等，以至于更多。</li>
<li>关于exe4j的破解我就不多赘述了，懂的都懂</li>
<li>接下来是实际操作</li>
<li>下面是开始界面</li>
<li><img src="https://pic.imgdb.cn/item/6378540416f2c2beb192c11f.jpg" alt="开始界面"></li>
<li>然后接下来</li>
<li>选择jar到exe的模式</li>
<li><img src="https://pic.imgdb.cn/item/6378546916f2c2beb1932dfa.jpg"></li>
<li>然后接下来要选择你的输出路径</li>
<li><img src="https://pic.imgdb.cn/item/637854cd16f2c2beb193c56c.jpg"></li>
<li>接下来选择我们的启动方式，我选择的是控制台启动</li>
<li><img src="https://pic.imgdb.cn/item/6378550616f2c2beb1942a62.jpg"></li>
<li>接下来选择可以在32位和64位机器上都可以运行</li>
<li><img src="https://pic.imgdb.cn/item/6378553316f2c2beb194a3be.jpg"></li>
<li><img src="https://pic.imgdb.cn/item/6378556516f2c2beb1952fa9.jpg"></li>
<li>接下来选择我们exe要执行的主类</li>
<li>我这个项目是boot项目，所以选择的是这个</li>
<li><img src="https://pic.imgdb.cn/item/6378558416f2c2beb195719f.jpg"></li>
<li>然后设置我们的jdk版本</li>
<li><img src="https://pic.imgdb.cn/item/637855bd16f2c2beb195f1d6.jpg"></li>
<li><img src="https://pic.imgdb.cn/item/637855dc16f2c2beb1962843.jpg"></li>
<li>最后一直点击next就好了</li>
<li><img src="https://pic.imgdb.cn/item/6378564016f2c2beb196ce41.jpg"></li>
<li>这样我们就打包完成了</li>
<li>但是这样的打包只能再有jdk的环境中运行</li>
<li>接下来我们要为这个添加依赖</li>
</ul>
<h2 id="inno-setup"><a href="#inno-setup" class="headerlink" title="inno setup"></a>inno setup</h2><ul>
<li>简单来说就是个绑定依赖的程序</li>
<li>打开</li>
<li><img src="https://pic.imgdb.cn/item/6378572316f2c2beb198e2a2.jpg"></li>
<li><img src="https://pic.imgdb.cn/item/6378577616f2c2beb199aecb.jpg"></li>
<li><img src="https://pic.imgdb.cn/item/6378579d16f2c2beb19a1b5f.jpg"></li>
<li>然后配置我们的名称和版本号</li>
<li>然后选择我们，刚刚弄个出来的exe程序</li>
<li><img src="https://pic.imgdb.cn/item/637858cd16f2c2beb19b780b.jpg"></li>
<li>然后就一直傻瓜式next</li>
<li><img src="https://pic.imgdb.cn/item/6378593316f2c2beb19be141.jpg"></li>
<li>设置输出文件夹</li>
<li>图标</li>
<li>以及运行时的密码</li>
<li>然后一直next就好</li>
<li>然后会跳出两个对话框</li>
<li>全部选择是</li>
<li>最后会出现这个东西</li>
<li><img src="https://pic.imgdb.cn/item/637859e916f2c2beb19d21f9.jpg"></li>
<li>就代表导入依赖了</li>
<li>接下来我们要对他进行修改</li>
<li><img src="https://pic.imgdb.cn/item/63785a3d16f2c2beb19d8050.jpg"></li>
<li>这个是自己电脑本机的jdk路径</li>
<li>然后还有要在这里加上MYjrename</li>
<li><img src="https://pic.imgdb.cn/item/63785a8116f2c2beb19dd2fa.jpg"></li>
<li>最后运行就成功了</li>
<li>他会给你成一个setup文件，通过这个文件安装的exe</li>
<li>就会自己带环境了</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>杂货技术栈</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Sealos</title>
    <url>/2022/12/12/k8s%E7%9A%84%E9%83%A8%E7%BD%B2%E5%B7%A5%E5%85%B7Sealos/</url>
    <content><![CDATA[<h1 id="Sealos"><a href="#Sealos" class="headerlink" title="Sealos"></a>Sealos</h1><p>是部署工具 ， 用go语言开发的干净且清凉的k8s的部署工具</p>
<h1 id="Sealos的优势"><a href="#Sealos的优势" class="headerlink" title="Sealos的优势"></a>Sealos的优势</h1><p>他的证书有效时间是100年</p>
<p>不依赖ansible haproxy keepalived 是零依赖</p>
<p>离线安装</p>
<p>kubelet其默认通过ipvs实现localLB，占用资源少稳定可靠</p>
<p>更容易在集群节点上增加&#x2F;删除管理</p>
<p>上千用户使用，在阿里云oss上有，不用担心网速的问题</p>
<p>dashboard ingress prometheus 等 APP 同样支持离线打包安装</p>
<p>当不超过三个独立集群，都是免费的，超过则要订阅服务了</p>
<h1 id="rancher是目前企业中认知度最好的-：-周六周日补上"><a href="#rancher是目前企业中认知度最好的-：-周六周日补上" class="headerlink" title="rancher是目前企业中认知度最好的 ： 周六周日补上"></a>rancher是目前企业中认知度最好的 ： 周六周日补上</h1><h1 id="Sealos常用的参数"><a href="#Sealos常用的参数" class="headerlink" title="Sealos常用的参数"></a>Sealos常用的参数</h1><p>–master master的节点服务器地址</p>
<p>–node node节点服务器地址列表</p>
<p>–user 服务器 SSH 用户名</p>
<p>–password 服务器 SSH 用户的密码</p>
<p>–pkg-url 离线包所在的位置，可以是本地，也可以是http</p>
<p>–version 指定要部署的k8s的版本</p>
<p> –pk 指定 SSH 私钥所在的位置 默认是在&#x2F;root&#x2F;.ssh&#x2F;id_rsa</p>
<p>–podcidr 自定义 pod网段</p>
<p>–svccidr 参数指定clusterip网段</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>需要纯净的linux ： centos7 对于centos8 需要调试很多的</p>
<p>或者是ubantu</p>
<p>尽量用新版本的Sealos</p>
<p>注意 ： 服务器时间必须同步</p>
<p>主机名字不可以重复</p>
<p>master的cpu要2个以上</p>
<p>cni组件选择cilium 时的内核版本不低于5.4</p>
<p>k8s一般用回退两个版本</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>47.25</p>
]]></content>
      <categories>
        <category>云原生（哔哩哔哩）</category>
      </categories>
      <tags>
        <tag>云原生</tag>
      </tags>
  </entry>
  <entry>
    <title>java面试题</title>
    <url>/2022/10/15/java%E4%B8%AD%E7%9A%84%E6%98%93%E9%94%99%E7%82%B9/</url>
    <content><![CDATA[<h1 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h1><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>重载发生在同一个类里，方法名必须相同，参数类型不同，个数不同，顺序不同，方法的返回值和访问修饰符可以不同，发生在编译时</p>
<h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>发生在父类和子类中，方法名，参数列表相同，返回值范围小于等于父类，<br>抛出异常小于等于父类，访问修饰符大于等于父类，若父类的方法是private则不能重写</p>
<h1 id="List和Set的区别"><a href="#List和Set的区别" class="headerlink" title="List和Set的区别"></a>List和Set的区别</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>list是有序的，按照插入对象的顺序进行访问的，可重复，，可以有多个null元素，可以用iterator取出所有元素，在逐一遍历还可以用get（index）获取指定元素</p>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>set是无序的，不可重复，，最多有一个null对象取元素的时候只能用iterator接口取出所有元素，再逐一遍历</p>
<h1 id="谈谈Concurrent-Hash-Map的扩容机制"><a href="#谈谈Concurrent-Hash-Map的扩容机制" class="headerlink" title="谈谈Concurrent Hash Map的扩容机制"></a>谈谈Concurrent Hash Map的扩容机制</h1><h2 id="1-7jdk"><a href="#1-7jdk" class="headerlink" title="1.7jdk"></a>1.7jdk</h2><ul>
<li>1.ConcurrentHashMap是基于Segment来实现的</li>
<li>2.每个Segment相当于是一个小型的HashMap</li>
<li>3.每个Segment内部都会进行扩容，和HashMap的扩容逻辑相同</li>
<li>4.先生成一个新的数组，然后转移元素到新数组中</li>
<li>5.扩容的判断也是每个Segment单独进行判断的</li>
</ul>
<h2 id="1-8jdk"><a href="#1-8jdk" class="headerlink" title="1.8jdk"></a>1.8jdk</h2><ul>
<li>1.到了1.8 就不基于Segment了</li>
<li>2.当某个线程进行put的时，如果发现有扩容的，就会优先跟着一起进行扩容，</li>
<li>3.如果发现没有进行扩容的，就会把key-value添加到ConcurrentHashMap中然后判断超过阈值了吗超过了则进行扩容</li>
<li>4.ConcurrentHashMap是支持多线程同时扩容的</li>
<li>5.扩容之前也先生成一个新数组</li>
<li>6.转移元素之前先将元素分组，将每组分给不同的线程来进行元素的转移，每个线程负责一组或者多组的元素转移工作</li>
</ul>
<h1 id="jdk1-7到1-8HashMap发生了什么变化"><a href="#jdk1-7到1-8HashMap发生了什么变化" class="headerlink" title="jdk1.7到1.8HashMap发生了什么变化"></a>jdk1.7到1.8HashMap发生了什么变化</h1><h2 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a>1.7</h2><p>其底层是数组加链表<br>使用的是头插法<br>哈希算法比较复杂</p>
<h2 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h2><p>其底层是数组+链表和红黑树加入红黑树的目的是加快查找效率<br>其用的是尾插法，要先遍历数组的每个元素，判断数组中的元素个数<br>哈希算法进行了优化，节省cpu资源</p>
<h1 id="接口可以多继承接口"><a href="#接口可以多继承接口" class="headerlink" title="接口可以多继承接口"></a>接口可以多继承接口</h1><h1 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h1><p>浅拷贝是指只会拷贝基础类型的值<br>浅拷贝是指拷贝的地址指向同一目标</p>
<h1 id="CopyOnwriteArrayList底层"><a href="#CopyOnwriteArrayList底层" class="headerlink" title="CopyOnwriteArrayList底层"></a>CopyOnwriteArrayList底层</h1><ul>
<li>1.首先其内部也是通过数组实现的，在向其中加元素的时候时，会复制一个新数组 ， 并在新数组上进行进行写操作 ， 读操作在原数组上进行</li>
<li>2.并且写操作会加锁，防止出现写入数据丢失的问题</li>
<li>3.写操作结束之后会把原数组指向新数组</li>
<li>4.CopyOnWriteArrayList允许在写数据的同时进行读数据，大大提高了效率因此适合读多写少的场景，但其比较占内存，因此读到的数据并不是最新的，因此适用与实时性不强的地方</li>
</ul>
<h1 id="什么是字节码-字节码的好处"><a href="#什么是字节码-字节码的好处" class="headerlink" title="什么是字节码 字节码的好处"></a>什么是字节码 字节码的好处</h1><p>编译器Javac会将java源文件编译为.class可以做到一次编译到此处运行，例如，windows上编译好的.class可以在linux上运行。</p>
<h2 id="采用字节码的好处"><a href="#采用字节码的好处" class="headerlink" title="采用字节码的好处"></a>采用字节码的好处</h2><p>一方面实现了跨平台，另外一方面提高了代码的执行效率，让编译器可以在编译时进行优化</p>
<h1 id="在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常"><a href="#在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常" class="headerlink" title="在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常"></a>在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常</h1><p>异常相当于一种提示 ， 若我们抛出异常，就相当于告诉上层方法，我抛出了一个异常，我处理不了这个异常给你来处理，如果上层也处理不了，就继续往上抛，或者捕获</p>
<h1 id="java中异常体系是怎么样的"><a href="#java中异常体系是怎么样的" class="headerlink" title="java中异常体系是怎么样的"></a>java中异常体系是怎么样的</h1><p>java中所有异常都来自于顶级父类 Throwable<br>Throwable下有两个子类Exceptio 和 erro<br>error属于重大错误：包括但不限于 虚拟机，磁盘，操作系统层面的问题<br>Exception属于普通编译器报错，其还分为运行时异常和编译时异常</p>
<h1 id="包装类型传参数的时候按照基本类型算，只传值，不传地址"><a href="#包装类型传参数的时候按照基本类型算，只传值，不传地址" class="headerlink" title="包装类型传参数的时候按照基本类型算，只传值，不传地址"></a>包装类型传参数的时候按照基本类型算，只传值，不传地址</h1><h1 id="java中的类加载机制"><a href="#java中的类加载机制" class="headerlink" title="java中的类加载机制"></a>java中的类加载机制</h1><p>jdk中自带了三个类加载器：</p>
<h2 id="BootStrap-ClassLoader"><a href="#BootStrap-ClassLoader" class="headerlink" title="BootStrap ClassLoader"></a>BootStrap ClassLoader</h2><p>BootStrap是Ext的父类加载器默认负责加载%JAVA_HOME%lib下面的lib和class</p>
<h2 id="Ext-ClassLoader"><a href="#Ext-ClassLoader" class="headerlink" title="Ext ClassLoader"></a>Ext ClassLoader</h2><p>Ext ClassLoader是AppClassLoader的父类，默认加载%JAVA_HOME%&#x2F;lib&#x2F;ext文件夹下的jar包和class</p>
<h2 id="AppClassLoader"><a href="#AppClassLoader" class="headerlink" title="AppClassLoader"></a>AppClassLoader</h2><p>AppClassLoader是自定义器的加载器的父类，负责加载classpath下的</p>
<h1 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h1><p>简单来说就是当问题从最下面的类加载器进入的时候会先让最上面的类加载器加载，然后逐级往下，最后才是自己定义的类加载器</p>
<h1 id="排查JVM问题"><a href="#排查JVM问题" class="headerlink" title="排查JVM问题"></a>排查JVM问题</h1><h2 id="对于还可以正常运行的系统"><a href="#对于还可以正常运行的系统" class="headerlink" title="对于还可以正常运行的系统"></a>对于还可以正常运行的系统</h2><ul>
<li>可以使用jmap来查看各个区域的情况</li>
<li>可以通过jstack来查看线程的运行情况，比如xxx线程阻塞；是不是死锁等</li>
<li>可以通过jstat命令查看垃圾回收的情况 ， 特别是fullgc若fullgc比较多就要考虑调优了</li>
<li>通过各个命令的结果，或者jvisualvm等工具进行分析</li>
<li>猜测fullgc多的原因：如果无内存溢出，那么表示fullgc是回收了很多对象，所以这些对象最好能在younggc过程中直接回收，避免进入老年代，对于这些情况就要考虑存活区间是不是比较小，导致年轻代放不下，直接到了老年代，尝试加大年轻代的区间若改完fullgc变小，则猜想正确</li>
</ul>
<h2 id="对于已发生了OOM的系统"><a href="#对于已发生了OOM的系统" class="headerlink" title="对于已发生了OOM的系统"></a>对于已发生了OOM的系统</h2><ul>
<li>一般生产中都会设置系统发生了OOM时，生成当时的dump文件（-xx:+HeapDumpOnOutOfMemoryError -xx:HHEapDump Path &#x3D; &#x2F;user&#x2F;local&#x2F;base)</li>
<li>我们可以用jsvisualvm等工具进行分析dump</li>
<li>根据dump找到异常实例和线程（占用cpu高），定位到具体代码。</li>
<li>之后再做细致的分析</li>
</ul>
<h1 id="一个对象从加载到jvm到被Gc清楚都经历了什么"><a href="#一个对象从加载到jvm到被Gc清楚都经历了什么" class="headerlink" title="一个对象从加载到jvm到被Gc清楚都经历了什么"></a>一个对象从加载到jvm到被Gc清楚都经历了什么</h1><ul>
<li>先把字节码文件内容加载到方法区</li>
<li>然后再根据类信息在堆区域创建对象</li>
<li>对象首先会分配在堆中年轻代的Eden区经过一次Minorc之后会进入Survivor区，在后续的每次MinorGC中若一直存活，则会在Suvivor区来回拷贝，每拷贝一次每移动一次年龄加1</li>
<li>当年龄过15，若对象仍存活，会进入老年态</li>
<li>若经过fullgc，被标记为垃圾对象，那么会被gc线程清楚</li>
</ul>
<h1 id="jvm有哪些垃圾回收算法"><a href="#jvm有哪些垃圾回收算法" class="headerlink" title="jvm有哪些垃圾回收算法"></a>jvm有哪些垃圾回收算法</h1><h2 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h2><ul>
<li>标记阶段：把垃圾内存标记出来</li>
<li>清除阶段：直接把垃圾内存回收</li>
<li>问题：会产生大量的内存碎片</li>
</ul>
<h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><ul>
<li>为了解决标记清除的内存碎片的问题</li>
<li>将内存分为两份，每次只使用其中一半，垃圾回收时将当前这一块的存活对象完全拷贝到另外一半，而后当前这一半可直接清除，这种无内存碎片，但是浪费空间，且放弃和存活对象的个数相关</li>
</ul>
<h2 id="标记压缩算法"><a href="#标记压缩算法" class="headerlink" title="标记压缩算法"></a>标记压缩算法</h2><ul>
<li>为了解决复制算法的缺陷，就提出了标记压缩算法，这种算法在标记阶段跟标记清除算法是一样的，但是在完成之后不是直接清理，而是将存活的对象往一端移动，而后面将边界以外的所有内存清除</li>
</ul>
<h1 id="什么是STW"><a href="#什么是STW" class="headerlink" title="什么是STW"></a>什么是STW</h1><p>Stw-stop-the-world,是在垃圾回收算法执行过程中要将JVM内存冻结的一种状态，在STW状态下，java的所有线程都是停止执行的——GC除外，native方法可执行；但是不能与jvm交互GC各种算法的优化的重点便是减少STW,是jvm调优的重点</p>
<h1 id="jvm参数"><a href="#jvm参数" class="headerlink" title="jvm参数"></a>jvm参数</h1><ul>
<li>标注指令：开头这个是所有Hotspot都支持的参数，可以用java-help</li>
<li>非标注指令:-x开头；与特定的hotspot对立的用java-x打印</li>
<li>不稳定参数：-xx开头，与上面一样</li>
</ul>
<h1 id="对守护线程的理解"><a href="#对守护线程的理解" class="headerlink" title="对守护线程的理解"></a>对守护线程的理解</h1><p>线程分为 守护线程和用户线程</p>
<h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>是jvm的后台线程，比如垃圾回收器，守护线程会在其他线程都停止之后自动关闭，我们可以通过设置thread.setDemon（true）来把一个线程设置成守护线程</p>
<h2 id="普通线程"><a href="#普通线程" class="headerlink" title="普通线程"></a>普通线程</h2><p>普通用户的线程</p>
<h1 id="ThreadLocal的底层原理"><a href="#ThreadLocal的底层原理" class="headerlink" title="ThreadLocal的底层原理"></a>ThreadLocal的底层原理</h1><p>其是java中所提供的线程本地存储机制，可利用该机制将数据存储到一个线程内部，该线程可在任意时刻，任意的方法，获取其存储的数据</p>
<ul>
<li>其底层是通过ThreadLocalMap来实现的，Map的key为ThreadLocal对象，Map的value为需要缓存的值</li>
<li>如果在线程池中使用ThreadLocal会造成内存泄露，因为当ThreadLoccal对象用完之后应该把设置的key value 也就是Entry的对象进行回收，但是线程池的线程不会进行回收，而线程对象是通过强引用指向ThreadLocalMap而ThreadLocalMap也是通过强引用的方法指向Entry的对象，线程也就不会被回收，从而出现内存泄露。</li>
</ul>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul>
<li>在使用了ThreadLocal对象之后，手动调Thread Local的remove方法，手动清除Entry，其经典应用是用在连接管理上</li>
</ul>
<h1 id="并发-并行-穿行的区别"><a href="#并发-并行-穿行的区别" class="headerlink" title="并发,并行,穿行的区别"></a>并发,并行,穿行的区别</h1><ul>
<li>串行：一个任务执行完才可以执行下一个</li>
<li>并发：两个任务看起来是一起执行的，在底层，两个任务被拆成了很多份，从而后一个执行，但是在更高处看，两个任务是一起执行的</li>
<li>并行：两个可以一起执行</li>
</ul>
<h1 id="java死锁如何避免"><a href="#java死锁如何避免" class="headerlink" title="java死锁如何避免"></a>java死锁如何避免</h1><ul>
<li>一个资源每次只被一个线程调用</li>
<li>一个线程在阻塞资源的时候不释放已经占有的资源</li>
<li>一个线程已经获得的资源在使用之前不可被强行剥夺</li>
<li>若干个线程形成头尾相接的循环等待状</li>
</ul>
<h1 id="说一下HashMap的put方法"><a href="#说一下HashMap的put方法" class="headerlink" title="说一下HashMap的put方法"></a>说一下HashMap的put方法</h1><h2 id="大体流程"><a href="#大体流程" class="headerlink" title="大体流程"></a>大体流程</h2><ul>
<li>1.根据key通过哈希算法与与运算得出数组的下标</li>
<li>2.如果数组下标的元素为空 ， 则将key和value封装为entry对象（1.7中是Entry ， 1.8里是node对象）并放入该位置</li>
</ul>
<h2 id="如果数组下标不为空，分情况讨论"><a href="#如果数组下标不为空，分情况讨论" class="headerlink" title="如果数组下标不为空，分情况讨论"></a>如果数组下标不为空，分情况讨论</h2><h3 id="1-7jdk-1"><a href="#1-7jdk-1" class="headerlink" title="1.7jdk"></a>1.7jdk</h3><ul>
<li>要先判断是不是要扩容，如果不扩容就生成Entry对象，并且用头插法添加到当前位置的链表中</li>
</ul>
<h3 id="1-8jdk-1"><a href="#1-8jdk-1" class="headerlink" title="1.8jdk"></a>1.8jdk</h3><ul>
<li>会先判断当前位置上node的类型，看是红黑树node还是链表node</li>
<li>如果是红黑树node，则会将key和value封装为一个红黑树节点并添加到红黑树中去，这个过程中会判断是不是有当前key，如果存在则更新value</li>
<li>如果此位置是node对象是链表节点，则将key和value封装为一个链表node并通过尾插法插到链表最后去，因为是尾插法所以要遍历整个链表，在遍历链表的过程中会判断是不是存在当前的key如果存在就更新key，当遍历完链表后，将新node插入到链表中，插入链表1后会看到当前链表的节点个数，如果大于等于8就会把这个链表转化为红黑树</li>
<li>将key和value封装为node插入到链表或红黑树中再判断是不是需要扩容如果需要就扩容，不需要就结束put方法</li>
</ul>
<h1 id="线程池的底层工作原理"><a href="#线程池的底层工作原理" class="headerlink" title="线程池的底层工作原理"></a>线程池的底层工作原理</h1><ul>
<li>线程池内部是通过队列＋线程实现的，当我们用线程池执行任务的时候</li>
<li>如果此时线程池中的线程数量小于CorePoolSize，即使线程池中都处于空闲状态，也同样要创建新的线程来处理被添加的任务</li>
<li>如果此时线程池中的线程数量等于CorePoolSize, 但是缓存队列workQueue未满，且线程池中的数量小于maximumPoolsize</li>
</ul>
<h1 id="线程池为什么是先添加队列而不是先创建最大线程"><a href="#线程池为什么是先添加队列而不是先创建最大线程" class="headerlink" title="线程池为什么是先添加队列而不是先创建最大线程"></a>线程池为什么是先添加队列而不是先创建最大线程</h1><p>当线程池中的核心线程在忙时如果继续往线程池中添加任务，那么任务还会放入队列，队列满了之后，才会开始新的线程，这就相当于，一个公司本来有10个程序员，本来这10个程序员能正常处理各种需求，但是随着公司的发展，需求在慢慢增加，但是一开始这些需求只会增加在待开发列表中，然后这10个程序员加班加点的从待开发列表中获取需求并进行处理，但是某一天待开发列表满了，所以员工处理不过来了，所以就开始招募新员工了。</p>
<h1 id="ReentrantLock中的公平锁和非公平锁的底层实现"><a href="#ReentrantLock中的公平锁和非公平锁的底层实现" class="headerlink" title="ReentrantLock中的公平锁和非公平锁的底层实现"></a>ReentrantLock中的公平锁和非公平锁的底层实现</h1><p>首先不管是公平锁还是非公平锁他们的底层都是通过AQS来实现排队的，他们的区别在于：线程使用lock（）方法加锁的时候，如果是公平锁，会先检查AQS队列中是不是存在线程在排队，如果存在，则当前线程也会进行排队，如果是非公平锁，则不会去检查是不是有线程在排队，而是直接竞争锁，不管是公平锁还是非公平锁，一旦没竞争到锁，就会进行排队，当锁释放的时候都是唤醒最前面的线程，所以非公平锁只是体现在了线程加锁的阶段，而没有体现在线程被唤醒的阶段。</p>
<h1 id="ReentrantLock中tryLock-和lock（）方法的区别"><a href="#ReentrantLock中tryLock-和lock（）方法的区别" class="headerlink" title="ReentrantLock中tryLock()和lock（）方法的区别"></a>ReentrantLock中tryLock()和lock（）方法的区别</h1><ul>
<li>tryLock()表示尝试加锁，可能加到，也可能加不到，该方法不会阻止线程，如果加到锁就返回true，没有加到则返回false</li>
<li>lock（）则表示线程阻塞加锁，线程会阻塞直到加上锁，而且也没有返回值</li>
</ul>
<h1 id="CountDownLatch和Semaphore的区别和底层原理"><a href="#CountDownLatch和Semaphore的区别和底层原理" class="headerlink" title="CountDownLatch和Semaphore的区别和底层原理"></a>CountDownLatch和Semaphore的区别和底层原理</h1><ul>
<li>CountDownLatch表示计数器，可以给CountDownLatch设置一个数字，一个线程调用CountDownLatch的await（）将会被阻塞，其他线程可以调用CountDownlatch的countDown（）方法来对CountDownLacth中的数字减一，当一个数字被减为0之后则会将AQS中排队的线程依次唤醒</li>
<li>Semaphore表示信号量，可以设置许可的个数，表示同时允许最多多少个线程使用该信号量，通过acquire来获取许可，如果没有许可可用则用线程阻塞，并通过ASQ来排队，可以通过release的方法释放许可当某一个线程释放死锁之后会从ASQ的第一个线程开始依次唤醒，直到没有空闲许可</li>
</ul>
<h1 id="Sychronized"><a href="#Sychronized" class="headerlink" title="Sychronized"></a>Sychronized</h1><ul>
<li>偏向锁： 在锁对象的对象头中记录下当前获取到该锁的线程id，该线程下次如果又来获取该锁就可以直接获取到了</li>
<li>轻量级锁：由偏向锁升级而来，当一个线程获取到锁之后，此时这把锁是偏向锁，此时如果由第二个线程来竞争这个锁，偏向锁就会升级为轻量级锁，之所以叫轻量级锁是为了和重量级锁分开，轻量级锁底层是通过自旋来实现的，并不会阻塞线程。</li>
<li>如果自旋次数过多扔无法获取锁，则会升级为重量级锁，重量级锁会导致线程阻塞</li>
<li>自旋锁：自旋锁就是在线程获取锁的过程中，不回去阻塞线程，也就无所谓唤醒线程，阻塞和唤醒这两个步骤都是要操作系统中去实现的，比较耗费时间，自旋锁是线程通过CAS获取预期的一个标记，如果没有获取到，则继续循环获取去过获取到，则表式获取到了锁，这个过程线程一直在运行，相对而言没有使用太多的操作系统资源，比较轻量</li>
</ul>
<h1 id="Sychronized和ReentrantLock的区别"><a href="#Sychronized和ReentrantLock的区别" class="headerlink" title="Sychronized和ReentrantLock的区别"></a>Sychronized和ReentrantLock的区别</h1><ul>
<li>前一个是关键字，后一个是一个类</li>
<li>前一个会自动加锁和释放锁，后面一个需要手动加锁和个释放锁</li>
<li>前一个底层是jvm层面 ， 后面一个底层是api层面</li>
<li>前一个是非公平锁 ， 后面一个是可以选非公平或者公平</li>
<li>前一个锁的是对象所信息保存在对象头中，后面一个是通过代码中int型的state标识符状态</li>
<li>前一个底层有个锁升级的过程</li>
</ul>
<h1 id="谈谈你对AQS的理解，AQS如何实现可重入锁"><a href="#谈谈你对AQS的理解，AQS如何实现可重入锁" class="headerlink" title="谈谈你对AQS的理解，AQS如何实现可重入锁"></a>谈谈你对AQS的理解，AQS如何实现可重入锁</h1><ul>
<li>AQS是一个java线程同步的框架，是jdk中很多锁的工具核心框架</li>
<li>在AQS中，维护了信号量state和一个线程的双向链表队列，其中这个线程队列，就是用来给线程排队的而state就像是个红绿灯，用来控制排队</li>
<li>在不同的场景下，有不同的意义</li>
<li>在可重入锁这个场景下state用来保证加锁的次数，0表示标识无锁，每次加锁，states就加1，释放就减少1</li>
</ul>
<h1 id="谈谈你对IOC的理解"><a href="#谈谈你对IOC的理解" class="headerlink" title="谈谈你对IOC的理解"></a>谈谈你对IOC的理解</h1><ul>
<li>通常我们任务spring有两大特性IoC和AOP</li>
<li>IoC进行了对象的反转，就是对象控制权的转移</li>
</ul>
<h1 id="单例和Bean"><a href="#单例和Bean" class="headerlink" title="单例和Bean"></a>单例和Bean</h1><ul>
<li>单例表示这个类只能实例化一次</li>
<li>而bean并不表示jvm里只存在一个类的Bean</li>
</ul>
<h1 id="Spring的事务传播机制"><a href="#Spring的事务传播机制" class="headerlink" title="Spring的事务传播机制"></a>Spring的事务传播机制</h1><ul>
<li>多个事务方法互相调用的时候，事务是如何在这些方法之间传播的</li>
<li>REQUIRED（默认的传播机制）：如果没有事务，就自己创建一个新的事务，如果存在事务，就加入</li>
<li>SUPPIORTS：当前存在事务，则加入，如果不存在就按照不存在的来</li>
<li>MANDATORY：当前存在事务则加入，不存在则抛出异常</li>
<li>REQUIRES_NEW：创建一个新事务，如果存在这个事务，就挂起他</li>
<li>NOT_SUPPORTED:用非事务的方式执行，如果当前存在事务，则挂起事务</li>
<li>NEVER：不使用事务如果事务存在，则会抛出异常</li>
<li>NESTED：如果当前事务存在，则在嵌套事务中执行要不然就和REQUIRED一样</li>
</ul>
<h1 id="线程和协程的区别"><a href="#线程和协程的区别" class="headerlink" title="线程和协程的区别"></a>线程和协程的区别</h1><ul>
<li>线程与协程的区别：</li>
<li>1：包含关系：一个进程可以有多个协程，一个线程也可以有多个协程</li>
<li>2：同步：线程进程是同步，协程是异步</li>
<li>3：协程能保留上一次重入的状态，当程序重新调用时，可以直接进入上一次的调用的位置</li>
<li>4：资源占用：线程是抢占式，协程是非抢占式，也就是会所在同一时间只能有一个协程运行，相当于单线程</li>
<li>5：与线程调用关系：协程并不能代替线程，线程是分割的CPU资源，协程是执行的代码，协程并不会直接调用线程，它会调用线程的执行器</li>
</ul>
<h1 id="myysql的索引以及他们的好处和坏处"><a href="#myysql的索引以及他们的好处和坏处" class="headerlink" title="myysql的索引以及他们的好处和坏处"></a>myysql的索引以及他们的好处和坏处</h1><ul>
<li>优点： 1.大大加快数据的检索速度</li>
<li>2.通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能</li>
<li>缺点： 1.时间方面：创建索引和维护索引要耗费时间，索引需要动态的维护</li>
<li>2.空间方面：需要占物理空间</li>
</ul>
<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ul>
<li>现代操作系统中，进程是分配资源的最小单位，运行一个程序，就创建一个进程，一个进程里可以包括多个线程，线程是系统调度的基本单位， 每个线程里都拥有各自的程序计数器，堆栈，局部变量表等属性，并且共享进程里面的资源，处理器在这些线程之间高速切换，使使用者误以为这些线程是同时执行的。</li>
<li>对于最简单的输出hello world程序，就包括四个线程， main，清除reference的线程，和finalize方法有关的线程，处理jvm信号的线程，</li>
<li>之所以使用多线程是因为多线程有个好处</li>
<li>1.现代计算机是多核处理器，而一个线程同一时刻只能运行在一个处理器上，对于单线程程序，同一时刻只能使用一个处理器，显然这是一种资源浪费， 而对于多线程程序，可以把计算逻辑分配给不同的处理器，极大的提高的程序的执行效率</li>
<li>2.可以把复杂的业务逻辑种的对数据一致性要求不强的操作，比如生成订单快照分配给其他的线程去处理（也可以使用消息队列），极大的提高了程序的响应时间</li>
<li>3.java提供了一个良好的多线程模型，能是开发者专注于业务的开发</li>
</ul>
<h1 id="怎么保证线程安全"><a href="#怎么保证线程安全" class="headerlink" title="怎么保证线程安全"></a>怎么保证线程安全</h1><ul>
<li>Java保证线程安全的方式有很多,其中较为常用的有三种,按照资源占用情况由轻到重排列,这三种保证线程安全的方式分别是原子类、volatile、锁。</li>
<li>JDK从1.5开始提供了java.util.concurrent.atomic包,这个包中的原子操作类提供了一种用法简单、性能高效、线程安全地更新一个变量的方式。</li>
<li>在atomic包里一共提供了17个类,按功能可以归纳为4种类型的原子更新方式,分别是原子更新基本类型、原子更新引用类型、原子更新属性、原子更新数组。</li>
<li>无论原子更新哪种类型,都要遵循“比较和替换”规则,即比较要更新的值是否等于期望值,如果是则更新,如果不是则失败。</li>
<li>volatile是轻量级的synchronized,它在多处理器开发中保证了共享变量的“可见性”,从而可以保证单个变量读写时的线程安全。</li>
<li>可见性问题是由处理器核心的缓存导致的,每个核心均有各自的缓存,而这些缓存均要与内存进行同步。</li>
<li>volatile具有如下的内存语义：当写一个volatile变量时,该线程本地内存中的共享变量的值会被立刻刷新到主内存；当读一个volatile变量时,该线程本地内存会被置为无效,迫使线程直接从主内存中读取共享变量。</li>
<li>原子类和volatile只能保证单个共享变量的线程安全,锁则可以保证临界区内的多个共享变量的线程安全,Java中加锁的方式有两种,分别是synchronized关键字和Lock接口。</li>
<li>synchronized是比较早期的API,在设计之初没有考虑到超时机制、非阻塞形式,以及多个条件变量。</li>
<li>若想通过升级的方式让它支持这些相对复杂的功能,则需要大改它的语法结构,不利于兼容旧代码。</li>
<li>因此,JDK的开发团队在1.5新增了Lock接口,并通过Lock支持了上述的功能,即：支持响应中断、支持超时机制、支持以非阻塞的方式获取锁、支持多个条件变量（阻塞队列）。</li>
<li>加分回答 实现线程安全的方式有很多,除了上述三种方式之外,还有如下几种方式：</li>
<li><ol>
<li>无状态设计 线程安全问题是由多线程并发修改共享变量引起的,如果在并发环境中没有设计共享变量,则自然就不会出现线程安全问题了。这种代码实现可以称作“无状态实现”,所谓状态就是指共享变量。</li>
</ol>
</li>
<li><ol start="2">
<li>不可变设计 如果在并发环境中不得不设计共享变量,则应该优先考虑共享变量是否为只读的,如果是只读场景就可以将共享变量设计为不可变的,这样自然也不会出现线程安全问题了。具体来说,就是在变量前加final修饰符,使其不可被修改,如果变量是引用类型,则将其设计为不可变类型（参考String类）。</li>
</ol>
</li>
<li><ol start="3">
<li>并发工具 java.util.concurrent包提供了几个有用的并发工具类,一样可以保证线程安全：</li>
</ol>
</li>
<li>Semaphore：就是信号量,可以控制同时访问特定资源的线程数量。</li>
<li>CountDownLatch：允许一个或多个线程等待其他线程完成操作。</li>
<li>CyclicBarrier：让一组线程到达一个屏障时被阻塞,直到最后一个线程到达屏障时,屏障才会打开,所有被屏障拦截的线程才会继续运行。</li>
<li><ol start="4">
<li>本地存储 我们也可以考虑使用ThreadLocal存储变量,ThreadLocal可以很方便地为每一个线程单独存一份数据,也就是将需要并发访问的资源复制成多份。这样一来,就可以避免多线程访问共享变量了,它们访问的是自己独占的资源,它从根本上隔离了多个线程之间的数据共享。</li>
</ol>
</li>
</ul>
<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><ul>
<li><ol>
<li>死锁 两个或两个以上的进程在执行过程中,因争夺共享资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁。这些永远在互相等待的进程称为死锁进程。</li>
</ol>
</li>
<li><ol start="2">
<li>产生死锁的必要条件 虽然进程在运行过程中,可能发生死锁,但死锁的发生也必须具备一定的条件,死锁的发生必须具备以下四个必要条件：</li>
</ol>
</li>
<li><ul>
<li>互斥条件：指进程对所分配到的资源进行排它性使用,即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源,则请求者只能等待,直至占有资源的进程用毕释放；</li>
</ul>
</li>
<li><ul>
<li>请求和保持条件：指进程已经保持至少一个资源,但又提出了新的资源请求,而该资源已被其它进程占有,此时请求进程阻塞,但又对自己已获得的其它资源保持不放；</li>
</ul>
</li>
<li><ul>
<li>不剥夺条件：指进程已获得的资源,在未使用完之前,不能被剥夺,只能在使用完时由自己释放；</li>
</ul>
</li>
<li><ul>
<li>环路等待条件：指在发生死锁时,必然存在一个进程——资源的环形链,即进程集合 {P0,P1,P2,···,Pn} 中的 P0 正在等待一个 P1 占用的资源；P1 正在等待 P2 占用的资源,……,Pn 正在等待已被 P0 占用的资源。</li>
</ul>
</li>
</ul>
<h1 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h1><ul>
<li>进程间通信主要包括：管道、命名管道、信号、消息队列、共享内存、内存映射、信号量、Socket：</li>
<li><ol>
<li>管道 管道也叫无名（匿名）管道,它是是 UNIX 系统 IPC（进程间通信）的最古老形式,所有的 UNIX 系统都支持这种通信机制。管道本质其实是内核中维护的一块内存缓冲区,Linux 系统中通过 pipe() 函数创建管道,会生成两个文件描述符,分别对应管道的读端和写端。无名管道只能用于具有亲缘关系的进程间的通信。</li>
</ol>
</li>
<li><ol start="2">
<li>命名管道 匿名管道,由于没有名字,只能用于亲缘关系的进程间通信。为了克服这个缺点,提出了有名管道（FIFO）,也叫命名管道、FIFO文件。有名管道（FIFO）不同于匿名管道之处在于它提供了一个路径名与之关联,以 FIFO 的文件形式存在于文件系统中,并且其打开方式与打开一个普通文件是一样的,这样即使与 FIFO 的创建进程不存在亲缘关系的进程,只要可以访问该路径,就能够彼此通过 FIFO 相互通信,因此,通过 FIFO 不相关的进程也能交换数据。</li>
</ol>
</li>
<li><ol start="3">
<li>信号 信号是 Linux 进程间通信的最古老的方式之一,是事件发生时对进程的通知机制,有时也称之为软件中断,它是在软件层次上对中断机制的一种模拟,是一种异步通信的方式。信号可以导致一个正在运行的进程被另一个正在运行的异步进程中断,转而处理某一个突发事件。</li>
</ol>
</li>
<li><ol start="4">
<li>消息队列 消息队列就是一个消息的链表,可以把消息看作一个记录,具有特定的格式以及特定的优先级,对消息队列有写权限的进程可以向消息队列中按照一定的规则添加新消息,对消息队列有读权限的进程则可以从消息队列中读走消息,消息队列是随内核持续的。</li>
</ol>
</li>
<li><ol start="5">
<li>共享内存 共享内存允许两个或者多个进程共享物理内存的同一块区域（通常被称为段）。由于一个共享内存段会称为一个进程用户空间的一部分,因此这种 IPC 机制无需内核介入。所有需要做的就是让一个进程将数据复制进共享内存中,并且这部分数据会对其他所有共享同一个段的进程可用。与管道等要求发送进程将数据从用户空间的缓冲区复制进内核内存和接收进程将数据从内核内存复制进用户空间的缓冲区的做法相比,这种 IPC 技术的速度更快。</li>
</ol>
</li>
<li><ol start="6">
<li>内存映射 内存映射（Memory-mapped I&#x2F;O）是将磁盘文件的数据映射到内存,用户通过修改内存就能修改磁盘文件。</li>
</ol>
</li>
<li><ol start="7">
<li>信号量 信号量主要用来解决进程和线程间并发执行时的同步问题,进程同步是并发进程为了完成共同任务采用某个条件来协调它们的活动。对信号量的操作分为 P 操作和 V 操作,P 操作是将信号量的值减 1,V 操作是将信号量的值加 1。当信号量的值小于等于 0 之后,再进行 P 操作时,当前进程或线程会被阻塞,直到另一个进程或线程执行了 V 操作将信号量的值增加到大于 0 之时。</li>
</ol>
</li>
<li><ol start="8">
<li>Socket 套接字（Socket）,就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端,提供了应用层进程利用网络协议交换数据的机制。Socket 一般用于网络中不同主机上的进程之间的通信。</li>
</ol>
</li>
</ul>
<h1 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h1><ul>
<li>MVC是一种设计模式,在这种模式下软件被分为三层,即Model（模型）、View（视图）、Controller（控制器）。</li>
<li>Model代表的是数据,View代表的是用户界面,Controller代表的是数据的处理逻辑,它是Model和View这两层的桥梁。</li>
<li>将软件分层的好处是,可以将对象之间的耦合度降低,便于代码的维护。</li>
<li>Model：指从现实世界中抽象出来的对象模型,是应用逻辑的反应；它封装了数据和对数据的操作,是实际进行数据处理的地方（模型层与数据库才有交互）。</li>
<li>在MVC的三个部件中,模型拥有最多的处理任务。被模型返回的数据是中立的,模型与数据格式无关,这样一个模型能为多个视图提供数据,由于应用于模型的代码只需写一次就可以被多个视图重用,所以减少了代码的重复性。</li>
<li>View：负责进行模型的展示,一般就是我们见到的用户界面。</li>
<li>Controller：控制器负责视图和模型之间的交互,控制对用户输入的响应、响应方式和流程；它主要负责两方面的动作,一是把用户的请求分发到相应的模型,二是吧模型的改变及时地反映到视图上。</li>
<li>加分回答 为了解耦以及提升代码的可维护性,服务端开发一般会对代码进行分层,服务端代码一般会分为三层：表现层、业务层、数据访问层。在浏览器访问服务器时,请求会先到达表现层 最典型的MVC就是jsp+servlet+javabean模式。</li>
<li>以JavaBean作为模型,既可以作为数据模型来封装业务数据,又可以作为业务逻辑模型来包含应用的业务操作。 JSP作为视图层,负责提供页面为用户展示数据,提供相应的表单（Form）来用于用户的请求,并在适当的时候（点击按钮）向控制器发出请求来请求模型进行更新。</li>
<li>Serlvet作为控制器,用来接收用户提交的请求,然后获取请求中的数据,将之转换为业务模型需要的数据模型,然后调用业务模型相应的业务方法进行更新,同时根据业务执行结果来选择要返回的视图。 当然,这种方式现在已经不那么流行了,</li>
<li>Spring MVC框架已经成为了MVC模式的最主流实现。</li>
<li>Spring MVC框架是基于Java的实现了MVC框架模式的请求驱动类型的轻量级框架。前端控制器是DispatcherServlet接口实现类,映射处理器是HandlerMapping接口实现类,视图解析器是ViewResolver接口实现类,页面控制器是Controller接口实现类</li>
</ul>
<h1 id="redis的数据类型"><a href="#redis的数据类型" class="headerlink" title="redis的数据类型"></a>redis的数据类型</h1><ul>
<li>Redis主要提供了5种数据结构：字符串(string)、哈希(hash)、列表(list)、集合(set)、有序集合(zset)。Redis还提供了Bitmap、HyperLogLog、Geo类型,但这些类型都是基于上述核心数据类型实现的。</li>
<li>5.0版本中,Redis新增加了Streams数据类型,它是一个功能强大的、支持多播的、可持久化的消息队列。</li>
<li>string可以存储字符串、数字和二进制数据,除了值可以是String以外,所有的键也可以是string,string最大可以存储大小为2M的数据。</li>
<li>list保证数据线性有序且元素可重复,它支持lpush、blpush、rpop、brpop等操作,可以当作简单的消息队列使用,一个list最多可以存储2^32-1个元素 hash的值本身也是一个键值对结构,最多能存储2^32-1个元素</li>
<li>set是无序不可重复的,它支持多个set求交集、并集、差集,适合实现共同关注之类的需求,一个set最多可以存储2^32-1个元素 zset是有序不可重复的,它通过给每个元素设置一个分数来作为排序的依据,一个zset最多可以存储2^32-1个元素。</li>
<li>加分回答 每种类型支持多个编码,每一种编码采取一个特殊的结构来实现 各类数据结构内部的编码及结构：</li>
<li>string：编码分为int、raw、embstr；</li>
<li>int底层实现为long,当数据为整数型并且可以用long类型表示时可以用long存储；</li>
<li>embstr底层实现为占一块内存的SDS结构,当数据为长度不超过32字节的字符串时,选择以此结构连续存储元数据和值；</li>
<li>raw底层实现为占两块内存的SDS,用于存储长度超过32字节的字符串数据,此时会在两块内存中分别存储元数据和值。</li>
<li>list：编码分为ziplist、linkedlist和quicklist（3.2以前版本没有quicklist）。</li>
<li>ziplist底层实现为压缩列表,当元素数量小于2且所有元素长度都小于64字节时,使用这种结构来存储；</li>
<li>linkedlist底层实现为双端链表,当数据不符合ziplist条件时,使用这种结构存储；</li>
<li>3.2版本之后list一般采用quicklist的快速列表结构来代替前两种。</li>
<li>hash：编码分为ziplist、hashtable两种,</li>
<li>其中ziplist底层实现为压缩列表,当键值对数量小于2,并且所有的键值长度都小于64字节时使用这种结构进行存储；</li>
<li>hashtable底层实现为字典,当不符合压缩列表存储条件时,使用字典进行存储。</li>
<li>set：编码分为inset和hashtable,intset底层实现为整数集合,当所有元素都是整数值且数量不超过2个时使用该结构存储,否则使用字典结构存储。</li>
<li>zset：编码分为ziplist和skiplist,当元素数量小于128,并且每个元素长度都小于64字节时,使用ziplist压缩列表结构存储,否则使用skiplist的字典+跳表的结构存储。</li>
</ul>
<h1 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h1><ul>
<li>乐观锁：乐观锁总是假设最好的情况,每次去拿数据的时候都认为别人不会修改,所以不会上锁,但是在更新的时候会判断一下在此期间别人有没有去更新这个数据,可以使用版本号机制和CAS算法实现。乐观锁适用于多读的应用类型,这样可以提高吞吐量**,像数据库提供的类似于write_condition机制,其实都是提供的乐观锁。</li>
<li>悲观锁：悲观锁总是假设最坏的情况,每次去拿数据的时候都认为别人会修改,所以每次在拿数据的时候都会上锁,这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用,其它线程阻塞,用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制,比如行锁,表锁等,读锁,写锁等,都是在做操作之前先上锁。 加分回答 两种锁的使用场景 乐观锁： GIT,SVN,CVS等代码版本控制管理器,就是一个乐观锁使用很好的场景,</li>
<li>例如：A、B程序员,同时从SVN服务器上下载了code.html文件,当A完成提交后,此时B再提交,那么会报版本冲突,此时需要B进行版本处理合并后,再提交到服务器。这其实就是乐观锁的实现全过程。如果此时使用的是悲观锁,那么意味者所有程序员都必须一个一个等待操作提交完,才能访问文件,这是难以接受的。 悲观锁： 悲观锁的好处在于可以减少并发,但是当并发量非常大的时候,由于锁消耗资源、锁定时间过长等原因,很容易导致系统性能下降,资源消耗严重。因此一般我们可以在并发量不是很大,并且出现并发情况导致的异常用户和系统都很难以接受的情况下,会选择悲观锁进行。</li>
</ul>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><ul>
<li>创建型包括：单例模式、工厂方法模式、抽象工厂模式、建造者模式和原型模式；</li>
<li>结构型包括：代理模式、装饰模式、适配器模式、组合模式、桥梁模式、外观模式和享元模式；</li>
<li>行为型包括：模板方法模式、命令模式、责任链模式、策略模式、迭代器模式、中介者模式、观察者模式、备忘录模式、访问者模式、状态模式和解释器模式。 面试中不要求23种设计模式全部了解,但至少应掌握单例模式和工厂模式。 加分回答 可以说出知道的框架所用到的设计模式或底层设计模式,例如Spring中的单例模式、工厂模式,AQS的模板模式等等。</li>
</ul>
]]></content>
      <categories>
        <category>Java中的易错点</category>
      </categories>
      <tags>
        <tag>java面试</tag>
      </tags>
  </entry>
  <entry>
    <title>sql练习</title>
    <url>/2022/11/05/sql%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> bigdata;</span><br><span class="line">use bigdata;</span><br><span class="line">	</span><br><span class="line"><span class="comment">--部门表</span></span><br><span class="line">dept部门表(deptno部门编号/dname部门名称/loc地点)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept (</span><br><span class="line">    deptno <span class="type">numeric</span>(<span class="number">2</span>),</span><br><span class="line">    dname <span class="type">varchar</span>(<span class="number">14</span>),</span><br><span class="line">    loc <span class="type">varchar</span>(<span class="number">13</span>)</span><br><span class="line">);</span><br><span class="line">	</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span> (<span class="number">10</span>, <span class="string">&#x27;ACCOUNTING&#x27;</span>, <span class="string">&#x27;NEW YORK&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span> (<span class="number">20</span>, <span class="string">&#x27;RESEARCH&#x27;</span>, <span class="string">&#x27;DALLAS&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span> (<span class="number">30</span>, <span class="string">&#x27;SALES&#x27;</span>, <span class="string">&#x27;CHICAGO&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept <span class="keyword">values</span> (<span class="number">40</span>, <span class="string">&#x27;OPERATIONS&#x27;</span>, <span class="string">&#x27;BOSTON&#x27;</span>);</span><br><span class="line">	</span><br><span class="line"><span class="comment">--工资等级表</span></span><br><span class="line">salgrade工资等级表(grade 等级/losal此等级的最低/hisal此等级的最高)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> salgrade (</span><br><span class="line">    grade <span class="type">numeric</span>,</span><br><span class="line">    losal <span class="type">numeric</span>,</span><br><span class="line">    hisal <span class="type">numeric</span></span><br><span class="line">);</span><br><span class="line">	</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">1</span>, <span class="number">700</span>, <span class="number">1200</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">2</span>, <span class="number">1201</span>, <span class="number">1400</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">3</span>, <span class="number">1401</span>, <span class="number">2000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">4</span>, <span class="number">2001</span>, <span class="number">3000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">5</span>, <span class="number">3001</span>, <span class="number">9999</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="comment">--员工表</span></span><br><span class="line">emp员工表(empno员工号/ename员工姓名/job工作/mgr上级编号/hiredate受雇日期/sal薪金/comm佣金/deptno部门编号)</span><br><span class="line">工资 ＝ 薪金 ＋ 佣金</span><br><span class="line">	</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp (</span><br><span class="line">    empno <span class="type">numeric</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    ename <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">    job <span class="type">varchar</span>(<span class="number">9</span>),</span><br><span class="line">    mgr <span class="type">numeric</span>(<span class="number">4</span>),</span><br><span class="line">    hiredate datetime,</span><br><span class="line">    sal <span class="type">numeric</span>(<span class="number">7</span>, <span class="number">2</span>),</span><br><span class="line">    comm <span class="type">numeric</span>(<span class="number">7</span>, <span class="number">2</span>),</span><br><span class="line">    deptno <span class="type">numeric</span>(<span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7369</span>, <span class="string">&#x27;SMITH&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7902</span>, <span class="string">&#x27;1980-12-17&#x27;</span>, <span class="number">800</span>, <span class="keyword">null</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7499</span>, <span class="string">&#x27;ALLEN&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-02-20&#x27;</span>, <span class="number">1600</span>, <span class="number">300</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7521</span>, <span class="string">&#x27;WARD&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-02-22&#x27;</span>, <span class="number">1250</span>, <span class="number">500</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7566</span>, <span class="string">&#x27;JONES&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>, <span class="string">&#x27;1981-04-02&#x27;</span>, <span class="number">2975</span>, <span class="keyword">null</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7654</span>, <span class="string">&#x27;MARTIN&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-09-28&#x27;</span>, <span class="number">1250</span>, <span class="number">1400</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7698</span>, <span class="string">&#x27;BLAKE&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>, <span class="string">&#x27;1981-05-01&#x27;</span>, <span class="number">2850</span>, <span class="keyword">null</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7782</span>, <span class="string">&#x27;CLARK&#x27;</span>, <span class="string">&#x27;MANAGER&#x27;</span>, <span class="number">7839</span>, <span class="string">&#x27;1981-06-09&#x27;</span>, <span class="number">2450</span>, <span class="keyword">null</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7788</span>, <span class="string">&#x27;SCOTT&#x27;</span>, <span class="string">&#x27;ANALYST&#x27;</span>, <span class="number">7566</span>, <span class="string">&#x27;1982-12-09&#x27;</span>, <span class="number">3000</span>, <span class="keyword">null</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7839</span>, <span class="string">&#x27;KING&#x27;</span>, <span class="string">&#x27;PRESIDENT&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;1981-11-17&#x27;</span>, <span class="number">5000</span>, <span class="keyword">null</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7844</span>, <span class="string">&#x27;TURNER&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-09-08&#x27;</span>, <span class="number">1500</span>, <span class="number">0</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7876</span>, <span class="string">&#x27;ADAMS&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7788</span>, <span class="string">&#x27;1983-01-12&#x27;</span>, <span class="number">1100</span>, <span class="keyword">null</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7900</span>, <span class="string">&#x27;JAMES&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7698</span>, <span class="string">&#x27;1981-12-03&#x27;</span>, <span class="number">950</span>, <span class="keyword">null</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7902</span>, <span class="string">&#x27;FORD&#x27;</span>, <span class="string">&#x27;ANALYST&#x27;</span>, <span class="number">7566</span>, <span class="string">&#x27;1981-12-03&#x27;</span>, <span class="number">3000</span>, <span class="keyword">null</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp <span class="keyword">values</span> (<span class="number">7934</span>, <span class="string">&#x27;MILLER&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7782</span>, <span class="string">&#x27;1982-01-23&#x27;</span>, <span class="number">1300</span>, <span class="keyword">null</span>, <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line"><span class="number">1.</span>查询出部门编号为<span class="number">30</span>的所有员工的编号和姓名</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">table</span>： emp</span><br><span class="line">	查什么： </span><br><span class="line">		<span class="number">1.</span>维度：<span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">		<span class="number">2.</span>指标: 聚合函数</span><br><span class="line">		<span class="number">3.</span>普普通通的字段：	编号和姓名</span><br><span class="line">	怎么查：</span><br><span class="line">		<span class="keyword">where</span>：</span><br><span class="line">			部门编号为<span class="number">30</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="number">2.</span>找出部门编号为<span class="number">10</span>中所有经理，和部门编号为<span class="number">20</span>中所有销售员的详细资料。</span><br><span class="line"><span class="number">3.</span>查询所有员工详细信息，用工资降序排序，如果工资相同使用入职日期升序排序</span><br><span class="line"><span class="number">4.</span>列出薪金大于<span class="number">1500</span>的各种工作及从事此工作的员工人数。</span><br><span class="line"><span class="number">5.</span>列出在销售部工作的员工的姓名，假定不知道销售部的部门编号。</span><br><span class="line"><span class="number">6.</span>查询姓名以S开头的\以S结尾\包含S字符\第二个字母为L  __</span><br><span class="line"><span class="number">7.</span>查询每种工作的最高工资、最低工资、人数</span><br><span class="line"><span class="number">8.</span>列出薪金 高于 公司平均薪金的所有员工号，员工姓名，所在部门名称，上级领导，工资，工资等级</span><br><span class="line"><span class="number">9.</span>列出薪金  高于  在各自部门工作的员工的平均薪金的员工姓名和薪金、部门名称。</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="number">80</span>% sqlboy sqlgirl</span><br><span class="line"><span class="number">20</span>% 大数据平台</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="结题"><a href="#结题" class="headerlink" title="结题"></a>结题</h1><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><ul>
<li>查询出部门编号为30的所有员工的编号和姓名</li>
<li>确定部门编号的条件 where deptno &#x3D; 30</li>
<li>确定所要的信息 ename ， epmpno</li>
<li>从员工表里筛选</li>
<li><code> select empno ,ename from emp where deptno = 30;</code></li>
<li><code> select empno ,ename from emp where deptno in (30);</code></li>
</ul>
<h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><ul>
<li>找出部门编号为10中所有经理，和部门编号为20中所有销售员的详细资料。</li>
<li>确定条件 ：</li>
<li>职业为经理的（MANAGER） ，部门编号为 10</li>
<li>职业为销售员的（SALESMAN） ， 部门编号为 20</li>
</ul>
<h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><ul>
<li><code>select * from emp where job = &quot;MANAGER&quot; and deptno = 10;</code></li>
<li><code>select * from emp where job = &quot;SALESMAN&quot; and  deptno = 20;</code></li>
</ul>
<h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><ul>
<li><code>select * from emp where job in (&quot;MANAGER&quot;) and deptno = 10;</code></li>
<li><code>select * from emp where job in (&quot;SALESMAN&quot;) and  deptno = 20;</code></li>
</ul>
<h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><ul>
<li><code>select * from emp where job in (&quot;SALESMAN&quot;) and  deptno = 20;</code></li>
<li><code>select * from emp where job in (&quot;MANAGER&quot;) and deptno = 10;</code></li>
</ul>
<h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><ul>
<li><code>select * from emp where (job, deptno) in ((&quot;SALESMAN&quot;, 20));</code></li>
<li><code>select * from emp where (job, deptno) in ((&quot;MANAGER&quot;, 10));</code></li>
</ul>
<h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><ul>
<li><code>select * from emp where (job, deptno) in ((&quot;SALESMAN&quot;, 20)  , (&quot;MANAGER&quot;, 10));</code></li>
</ul>
<h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><ul>
<li>查询所有员工详细信息，用工资降序排序，如果工资相同使用入职日期升序排序</li>
<li>条件 ：工资和入职时间</li>
<li>工资 ＝ 薪金 ＋ 佣金</li>
<li>但是mysql里一个值和null相加会变成null</li>
<li>通过 ifnull  或者 coalesce  进行转化</li>
<li>所以要转化</li>
<li>这个题有两种解法</li>
</ul>
<h3 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h3><ul>
<li>先转化</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">(sal + yy) <span class="keyword">as</span> hh ,</span><br><span class="line">(sal + kk) <span class="keyword">as</span> ii,</span><br><span class="line">hiredate</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    hiredate,</span><br><span class="line">    sal,</span><br><span class="line">    <span class="built_in">ifnull</span>(comm , <span class="number">0</span>) <span class="keyword">as</span> yy,</span><br><span class="line">    coalesce(comm , <span class="number">0</span>) <span class="keyword">as</span> kk</span><br><span class="line">    <span class="keyword">from</span> emp</span><br><span class="line">) <span class="keyword">as</span> hyy</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hh <span class="keyword">desc</span>,hiredate <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>

<h3 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h3><ul>
<li>转化和展示一起做</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">hiredate,</span><br><span class="line"><span class="built_in">ifnull</span>((sal + comm) , sal) <span class="keyword">as</span> total,</span><br><span class="line">coalesce((sal + comm) , sal) <span class="keyword">as</span> ti</span><br><span class="line"><span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> total <span class="keyword">desc</span> , hiredate <span class="keyword">asc</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><ul>
<li>列出薪金大于1500的各种工作及从事此工作的员工人数</li>
<li>条件 ： 薪金 就是 <code>sal &gt; 1500</code> 的 <code>工作</code> 求 <code>人数</code></li>
<li>薪金的条件可以用 <code>where</code> 或者 <code>having</code></li>
<li>工作可以用 <code>group by job</code></li>
<li>人数可以用count</li>
</ul>
<h3 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h3><ul>
<li><code>select job, count(*) from emp where sal &gt; 1500 group by job;</code></li>
</ul>
<h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><ul>
<li>列出在销售部工作的员工的姓名，假定不知道销售部的部门编号</li>
<li>条件 ：  不知道部门编号 但是我们可以从表中获取</li>
</ul>
<h3 id="1-3"><a href="#1-3" class="headerlink" title="1"></a>1</h3><ul>
<li><code>select ename from emp left join dept on dept.deptno = emp.deptno where dname = &quot;SALES&quot; ;</code></li>
</ul>
<h3 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h3><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">    deptno</span><br><span class="line">    <span class="keyword">from</span> dept</span><br><span class="line">    <span class="keyword">where</span> dname = <span class="string">&quot;SALES&quot;</span> </span><br><span class="line">) = emp.deptno ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> deptno <span class="title">in</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">select</span> </span></span></span><br><span class="line"><span class="params"><span class="function">    deptno</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">from</span> dept</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">where</span> dname = <span class="string">&quot;SALES&quot;</span> </span></span></span><br><span class="line"><span class="params"><span class="function"></span>)</span> ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><ul>
<li>查询姓名以S开头的\以S结尾\包含S字符\第二个字母为L</li>
<li>两种方式 like 或者正则</li>
</ul>
<h3 id="1-4"><a href="#1-4" class="headerlink" title="1"></a>1</h3><ul>
<li><code>select ename from emp where ename like &quot;%s%&quot; or  ename like &quot;_L&quot;; </code></li>
</ul>
<h3 id="2-3"><a href="#2-3" class="headerlink" title="2"></a>2</h3><ul>
<li><code>select ename from emp where ename REGEXP &#39;*s*&#39;or ename REGEXP &#39;^.L&#39;;</code></li>
</ul>
<h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><ul>
<li>查询每种工作的最高工资、最低工资、人数</li>
<li>条件 ： <code>工资</code> ， <code>最高工资</code> ， <code>最低工资</code> ， <code>人数</code></li>
<li>这个题目前我所想到的有两种</li>
<li>第一是慢慢做 ，用嵌套的方式 ，</li>
<li>优点 ： 不用动脑</li>
<li>缺点 ： 代码量比较多</li>
<li>第二个是第一个的优化版本</li>
<li>优点 ： 代码量少很多</li>
<li>缺点 : 难理解</li>
<li></li>
</ul>
<h3 id="1-5"><a href="#1-5" class="headerlink" title="1"></a>1</h3><ul>
<li>我们先获取基本的数据源</li>
<li>获取工资的情况 ，以及各种职业所对应的工资 及其人数</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal1,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job,sal1;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>接下来是获取最高工资 和最低工资 ，以及工作的种类 ,以及总人数（最高工资，以及最低工资的）</li>
</ul>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> max(sal1),min(sal1),job,count<span class="comment">(*)</span></span><br><span class="line"><span class="comment">from(select </span></span><br><span class="line"><span class="comment">(ifnull((sal + comm) , sal)) as sal1,</span></span><br><span class="line"><span class="comment">job,</span></span><br><span class="line"><span class="comment">count(*)</span> <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job,sal1) <span class="keyword">as</span> king <span class="keyword">group</span> <span class="keyword">by</span> job<span class="punctuation">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>接下来 我们只需要连接上述的两个表</li>
<li>一个表里对应的是每个人所对应的工资以及职业</li>
<li>因为一个表里是我们的最高的工资，最低的工资以及他所对应的工作 和总人数</li>
<li>相当于第二个表当我们的筛选条件 ， 如果符合筛选条件 就从第一个表选出这条数据</li>
<li>然后获得符合条件的人数</li>
<li>根据以上分析 ， 我们采用左连接的方式 ，</li>
<li>内连接可能会丢值 ，不过在此题中不会丢值</li>
<li>如下 ：</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">sal1,</span><br><span class="line">max_sal,</span><br><span class="line">min_sal,</span><br><span class="line">tjob,</span><br><span class="line">total_people</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(sal1) <span class="keyword">as</span> max_sal,<span class="built_in">min</span>(sal1) <span class="keyword">as</span> min_sal,job <span class="keyword">as</span> tjob,<span class="built_in">count</span>(*)</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line">(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal1,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job,sal1) <span class="keyword">as</span> king <span class="keyword">group</span> <span class="keyword">by</span> job) <span class="keyword">as</span> KING  </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal1,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job,sal1) <span class="keyword">as</span> yu  </span><br><span class="line"><span class="keyword">on</span> KING.tjob = yu.job <span class="keyword">and</span> yu.sal1 = KING.max_sal <span class="keyword">or</span> yu.sal1 = KING.min_sal; </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-4"><a href="#2-4" class="headerlink" title="2"></a>2</h3><ul>
<li>第二种方法 ， 我们所采用的是union</li>
<li>而不是连接</li>
<li>我们先获取 每种工作的 最高工资 和最低工资 以及工作种类 ，以及总共人数</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">               <span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_max,</span><br><span class="line">               <span class="built_in">min</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_min,</span><br><span class="line">               job,</span><br><span class="line">               <span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line">               <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>然后我们现在要做的就是统计人数了</li>
<li>我们要先判断他的最大工资和11最小工资是不是相等</li>
<li>因为相等的话，他会默认把一个人分最大，一个人分最小</li>
<li>所以要分开</li>
<li>下面就是如果最大工资和最小工资相等的时候的做法</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">total_people <span class="keyword">as</span> max_people ,(sal_max - sal_max) <span class="keyword">as</span> min_people,job,sal_max,sal_min</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line"><span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_max,</span><br><span class="line"><span class="built_in">min</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_min,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job)  <span class="keyword">as</span> king  <span class="keyword">group</span>  <span class="keyword">by</span> job <span class="keyword">having</span> sal_max = sal_min;</span><br></pre></td></tr></table></figure>

<ul>
<li>下面是不相等的时候</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="built_in">count</span>(sal_max) <span class="keyword">as</span> max_people,<span class="built_in">count</span>(sal_min) <span class="keyword">as</span> min_people,job,sal_max,sal_min</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line"><span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_max,</span><br><span class="line"><span class="built_in">min</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_min,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job)  <span class="keyword">as</span> king  <span class="keyword">group</span>  <span class="keyword">by</span> job <span class="keyword">having</span> sal_max != sal_min</span><br></pre></td></tr></table></figure>

<ul>
<li>我这里是用的 <code>having</code> ， 因为我把条件放在 <code>group by</code>后面了 ，这两个也可用where的不过要放在 <code>group by</code>之前</li>
<li>接下来，我们用union就可以 ， 因为 我把他们的别名起的一样 ，而且列也能对的上</li>
<li>我们就可以直接用union了</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="built_in">count</span>(sal_max) <span class="keyword">as</span> max_people,<span class="built_in">count</span>(sal_min) <span class="keyword">as</span> min_people,job,sal_max,sal_min</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line"><span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_max,</span><br><span class="line"><span class="built_in">min</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_min,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job)  <span class="keyword">as</span> king <span class="keyword">where</span> sal_max != sal_min <span class="keyword">group</span>  <span class="keyword">by</span> job </span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">total_people <span class="keyword">as</span> max_people ,(sal_max - sal_max) <span class="keyword">as</span> min_people,job,sal_max,sal_min</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line"><span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_max,</span><br><span class="line"><span class="built_in">min</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal_min,</span><br><span class="line">job,</span><br><span class="line"><span class="built_in">count</span>(*) <span class="keyword">as</span> total_people</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> job)  <span class="keyword">as</span> king  <span class="keyword">group</span>  <span class="keyword">by</span> job <span class="keyword">having</span> sal_max = sal_min;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第七题的附加题"><a href="#第七题的附加题" class="headerlink" title="第七题的附加题"></a>第七题的附加题</h2><ul>
<li>找出最高的工资 最低工资 以及人数 ，职业</li>
<li>这个是我没读题的时候 ，看错题意了 ，结果做出个这么个玩意 ，姑且也当作一个题把。</li>
<li>条件 ： 所有工作中 ，<code>最高工资</code> , <code>最低工资</code> ， <code>人数</code></li>
</ul>
<h3 id="1-6"><a href="#1-6" class="headerlink" title="1"></a>1</h3><ul>
<li>对于这个问题 ， 我们要先找到数据源 ，就是说，我们现在需要最大工资 和最小工资 ，那么为我们要先搞出这样有一个表</li>
<li><code>select max(ifnull((sal + comm) , sal)) as max_sal, min(coalesce((sal + comm) , sal)) as min_sal,count(*) from emp ;</code></li>
<li>这个是统计所有工作中的最大和最小工资</li>
<li>然后我们要找出人数以及职业</li>
<li>这相当于我们现在有了最大最小的筛选条件 ，去有工资和职业，以及人数的表中筛选就好</li>
<li>接下来，我们就要创建一个表有工资和职业，以及人数</li>
<li><code>select job, (ifnull((sal + comm) , sal)) as sal1,count(sal) as total_people from emp  group by sal1 , job;</code></li>
<li>接下来我们就要进行筛选了 ， 最简单的筛选就是把两个表链接上</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">sal1,</span><br><span class="line">job,</span><br><span class="line">total_people</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> <span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> max_sal, <span class="built_in">min</span>(coalesce((sal + comm) , sal))  <span class="keyword">as</span> min_sal <span class="keyword">from</span> emp ) <span class="keyword">as</span> king </span><br><span class="line">	</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">	</span><br><span class="line">(<span class="keyword">select</span> job, (<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal1,<span class="built_in">count</span>(sal) <span class="keyword">as</span> total_people <span class="keyword">from</span> emp  <span class="keyword">group</span> <span class="keyword">by</span> sal1 , job) <span class="keyword">as</span> kk </span><br><span class="line"><span class="keyword">on</span> max_sal = sal1 <span class="keyword">or</span> min_sal =sal1 ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>但是做到这里其实还可以进行优化 ， 我们可以不用链接 ， 但是上述链接是小表驱动大表的，我们也可以反过来</li>
<li>但是用in的时候我们不能用一列去匹配两列</li>
<li>因为我们最开始的数据源，分出来的是两列</li>
<li>现在我们要通过别名，把两列变成一列</li>
<li><code>select max(ifnull((sal + comm) , sal)) as sal from emp union select min(coalesce((sal + comm) , sal))  as sal from emp;</code></li>
<li>然后我们就可以用where进行匹配了</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">sal1,</span><br><span class="line">job,</span><br><span class="line">total_people</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> job, (<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal1,<span class="built_in">count</span>(sal) <span class="keyword">as</span> total_people <span class="keyword">from</span> emp  <span class="keyword">group</span> <span class="keyword">by</span> sal1 , job) <span class="keyword">as</span> kk </span><br><span class="line"><span class="keyword">where</span> sal1 <span class="keyword">in</span> (<span class="keyword">select</span> <span class="built_in">max</span>(<span class="built_in">ifnull</span>((sal + comm) , sal)) <span class="keyword">as</span> sal <span class="keyword">from</span> emp <span class="keyword">union</span> <span class="keyword">select</span> <span class="built_in">min</span>(coalesce((sal + comm) , sal))  <span class="keyword">as</span> sal <span class="keyword">from</span> emp);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这里的in也可以用等号替代 ，只不过如果是等号，那么你后面的条件要拆开 ，而且 中间要用or</li>
</ul>
<h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><ul>
<li>列出薪金 高于 公司平均薪金的所有员工号，员工姓名，所在部门名称，上级领导，工资，工资等级</li>
<li>条件 ： <code>薪金</code>高于 <code>平均薪金</code> ， <code>工资等级</code> ，<code>部门名称</code></li>
<li>通过以上条件我们可知 ，这个是三个表都要用到的</li>
</ul>
<h3 id="1-7"><a href="#1-7" class="headerlink" title="1"></a>1</h3><ul>
<li>老样子 ： 我们要先获取基本的数据源</li>
<li><code>select avg(sal) as sal_avg from emp</code></li>
<li>上述是获取平均薪金 ，是要作为我们的判断条件的</li>
<li>然后求出薪金大于平均薪金的 进行初步筛选</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">deptno,</span><br><span class="line">sal,</span><br><span class="line">mgr</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> </span><br><span class="line"><span class="keyword">avg</span>(sal)</span><br><span class="line"><span class="keyword">from</span> emp);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>接下来我们要把初步筛选完成的表 和 部门表联合起来 ，原因是 部门表有部门编号作为连接点</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">deptno <span class="keyword">as</span> deptno1,</span><br><span class="line">sal,</span><br><span class="line">mgr</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> </span><br><span class="line"><span class="built_in">avg</span>(sal)</span><br><span class="line"><span class="keyword">from</span> emp)) <span class="keyword">as</span> Oavg_table <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> Oavg_table.deptno1=dept.deptno; </span><br></pre></td></tr></table></figure>

<ul>
<li>现在除了工资等级 ，和工资，其余的我们全都有了、</li>
<li>接下来，我们先加上工资 ，然后根据工资进行判断等级</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">(sal + commchange) <span class="keyword">as</span> earn</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line"><span class="built_in">ifnull</span>(comm , <span class="number">0</span>) <span class="keyword">as</span> commchange</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">deptno <span class="keyword">as</span> deptno1,</span><br><span class="line">sal,</span><br><span class="line">mgr</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> </span><br><span class="line"><span class="built_in">avg</span>(sal)</span><br><span class="line"><span class="keyword">from</span> emp)) <span class="keyword">as</span> Oavg_table <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> Oavg_table.deptno1=dept.deptno) <span class="keyword">as</span> setlist;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>接下来，我们要加上工资等级</li>
<li>在这里，我就偷个懒 因为平均薪金是2200多，那么你工资必不可能比这个少</li>
<li>那么工资等级也就不会是3及以下</li>
<li>一般的话是条件都要判断的 ，我这里就偷个懒</li>
<li>接下来，我们设置筛选条件 ，  因为工资等级没有能和别的表联合 ，或者union的列 ，那么我们只能一个个判断了</li>
<li>我们先判断大于3000的 并给与工资等级</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line"><span class="built_in">earn,</span></span><br><span class="line">((empno + <span class="number">5</span>) - empno) as level</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">(sal + commchange) as earn</span><br><span class="line">from(</span><br><span class="line">select</span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">ifnull(comm , <span class="number">0</span>) as commchange</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line">deptno as deptno1,</span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno) as setlist) as sal_tables where earn &gt;<span class="number">3000</span><span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>接下来是小于3000的</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line"><span class="built_in">earn,</span></span><br><span class="line">((empno + <span class="number">4</span>) - empno) as level</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">(sal + commchange) as earn</span><br><span class="line">from(</span><br><span class="line">select</span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">ifnull(comm , <span class="number">0</span>) as commchange</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line">deptno as deptno1,</span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno) as setlist) as sal_tables where earn &gt;<span class="number">2000</span> <span class="literal">and</span> earn &lt;=<span class="number">3000</span><span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>注意我这里是偷懒了，没有判断2000和更低的，原因在上面 ，如果想判断和上面两个一样</li>
<li>接下来 我们用unio  把他们链接到一起</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line"><span class="built_in">earn,</span></span><br><span class="line">((empno + <span class="number">5</span>) - empno) as level</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">(sal + commchange) as earn</span><br><span class="line">from(</span><br><span class="line">select</span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">ifnull(comm , <span class="number">0</span>) as commchange</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line">deptno as deptno1,</span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno) as setlist) as sal_tables where earn &gt;<span class="number">3000</span></span><br><span class="line">union</span><br><span class="line">select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line"><span class="built_in">earn,</span></span><br><span class="line">((empno + <span class="number">4</span>) - empno) as level</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">(sal + commchange) as earn</span><br><span class="line">from(</span><br><span class="line">select</span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line"><span class="built_in">mgr,</span></span><br><span class="line"><span class="built_in">deptno1,</span></span><br><span class="line"><span class="built_in">dname,</span></span><br><span class="line">ifnull(comm , <span class="number">0</span>) as commchange</span><br><span class="line">from(select </span><br><span class="line"><span class="built_in">comm,</span></span><br><span class="line"><span class="built_in">empno,</span></span><br><span class="line"><span class="built_in">ename,</span></span><br><span class="line">deptno as deptno1,</span><br><span class="line"><span class="built_in">sal,</span></span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno) as setlist) as sal_tables where earn &gt;<span class="number">2000</span> <span class="literal">and</span> earn &lt;=<span class="number">3000</span><span class="comment">;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>就可以了 ，上面的我做法是我没动脑子，直接一点点搞出来的</li>
</ul>
<h3 id="2-5"><a href="#2-5" class="headerlink" title="2"></a>2</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> empno,ename,dname,sal,mgr,<span class="built_in">ifnull</span>((sal + comm) , sal) <span class="keyword">as</span> earn , (sal + <span class="number">5</span>  - sal) <span class="keyword">as</span>  level <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span>  emp))  <span class="keyword">as</span> king <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> king.deptno=dept.deptno <span class="keyword">having</span> earn &gt;  <span class="number">3000</span></span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> empno,ename,dname,sal,mgr,<span class="built_in">ifnull</span>((sal + comm) , sal) <span class="keyword">as</span> earn , (sal + <span class="number">4</span>  - sal) <span class="keyword">as</span>  level <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> emp <span class="keyword">where</span> sal &gt; (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span>  emp))  <span class="keyword">as</span> king <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> king.deptno=dept.deptno <span class="keyword">having</span> earn &lt;= <span class="number">3000</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-2"><a href="#3-2" class="headerlink" title="3"></a>3</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">king.ename,</span><br><span class="line">king.empno,</span><br><span class="line">e1.ename <span class="keyword">as</span> leader,</span><br><span class="line">king.earn,</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> earn <span class="keyword">Between</span> <span class="number">700</span> <span class="keyword">and</span> <span class="number">1200</span> <span class="keyword">then</span> <span class="number">1</span></span><br><span class="line">     <span class="keyword">when</span> earn <span class="keyword">Between</span> <span class="number">1200</span> <span class="keyword">and</span> <span class="number">1400</span> <span class="keyword">then</span> <span class="number">2</span></span><br><span class="line">     <span class="keyword">when</span> earn <span class="keyword">Between</span> <span class="number">1400</span> <span class="keyword">and</span> <span class="number">2000</span> <span class="keyword">then</span> <span class="number">3</span></span><br><span class="line">     <span class="keyword">when</span> earn <span class="keyword">Between</span> <span class="number">2000</span> <span class="keyword">and</span> <span class="number">3000</span> <span class="keyword">then</span> <span class="number">4</span></span><br><span class="line">     <span class="keyword">when</span> earn <span class="keyword">Between</span> <span class="number">3000</span> <span class="keyword">and</span> <span class="number">9990</span> <span class="keyword">then</span> <span class="number">5</span></span><br><span class="line">     <span class="keyword">end</span></span><br><span class="line"><span class="keyword">as</span> sallevel</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">  <span class="keyword">select</span> ename , empno , deptno , <span class="built_in">ifnull</span>((sal + comm),sal) <span class="keyword">as</span> earn ,mgr </span><br><span class="line">  <span class="keyword">from</span> emp</span><br><span class="line">  <span class="keyword">where</span> sal &gt; (</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">avg</span>(sal)</span><br><span class="line">    <span class="keyword">from</span> emp</span><br><span class="line">  )</span><br><span class="line">) <span class="keyword">as</span> king </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> king.deptno=dept.deptno </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> emp e1 <span class="keyword">on</span> king.mgr = e1.empno;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">// 最好不用 ，因为笛卡尔积 会造成数据膨胀</span><br><span class="line">   <span class="keyword">select</span> </span><br><span class="line">   king.ename,</span><br><span class="line">   king.empno,</span><br><span class="line">   e1.ename <span class="keyword">as</span> leader,</span><br><span class="line">   king.earn,</span><br><span class="line">   s.grade</span><br><span class="line">   <span class="keyword">as</span> sallevel</span><br><span class="line">   <span class="keyword">from</span> (</span><br><span class="line">     <span class="keyword">select</span> ename , empno , deptno , <span class="built_in">ifnull</span>((sal + comm),sal) <span class="keyword">as</span> earn ,mgr </span><br><span class="line">     <span class="keyword">from</span> emp</span><br><span class="line">     <span class="keyword">where</span> sal &gt; (</span><br><span class="line">       <span class="keyword">select</span> <span class="built_in">avg</span>(sal)</span><br><span class="line">       <span class="keyword">from</span> emp</span><br><span class="line">     )</span><br><span class="line">   ) <span class="keyword">as</span> king </span><br><span class="line">   <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> king.deptno=dept.deptno </span><br><span class="line">   <span class="keyword">left</span> <span class="keyword">join</span> (</span><br><span class="line">     <span class="keyword">select</span> empno,</span><br><span class="line">     ename</span><br><span class="line">     <span class="keyword">from</span> emp</span><br><span class="line">   ) e1 <span class="keyword">on</span> king.mgr = e1.empno</span><br><span class="line">   cross <span class="keyword">join</span> salgrade <span class="keyword">as</span> s <span class="keyword">where</span> earn <span class="keyword">Between</span> losal <span class="keyword">and</span> hisal ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h3><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">king.ename,</span><br><span class="line">king.empno,</span><br><span class="line">e1.ename <span class="keyword">as</span> leader,</span><br><span class="line">king.earn,</span><br><span class="line">s.grade</span><br><span class="line"><span class="keyword">as</span> sallevel</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">  <span class="keyword">select</span> ename , empno , deptno , <span class="built_in">ifnull</span>((sal + comm),sal) <span class="keyword">as</span> earn ,mgr </span><br><span class="line">  <span class="keyword">from</span> emp</span><br><span class="line">  <span class="keyword">where</span> sal &gt; (</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">avg</span>(sal)</span><br><span class="line">    <span class="keyword">from</span> emp</span><br><span class="line">  )</span><br><span class="line">) <span class="keyword">as</span> king </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> king.deptno=dept.deptno </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (</span><br><span class="line">  <span class="keyword">select</span> empno,</span><br><span class="line">  ename</span><br><span class="line">  <span class="keyword">from</span> emp</span><br><span class="line">) e1 <span class="keyword">on</span> king.mgr = e1.empno</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> salgrade <span class="keyword">as</span> s <span class="keyword">on</span> earn &gt;= losal <span class="keyword">and</span> earn &lt;= hisal;</span><br></pre></td></tr></table></figure>

<h2 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h2><ul>
<li>列出薪金  高于  在各自部门工作的员工的平均薪金的员工姓名和薪金、部门名称</li>
<li>条件 ： 各个部门，<code>薪金</code>高于 <code>各个部门</code>的 <code>平均薪金</code></li>
</ul>
<h3 id="1-8"><a href="#1-8" class="headerlink" title="1"></a>1</h3><ul>
<li>我们可以先获取薪金，以及部门编号 ，并且按照他们进行划分</li>
<li>因为题目中主要要求的就是部门以及薪金</li>
<li><code>select  sal ,deptno from emp group by sal , deptno;</code></li>
<li>接下来我们求各个部门的平均薪金</li>
<li><code>select avg(sal) as sal_avg, deptno from (select  sal ,deptno from emp group by sal , deptno) as king group by deptno;</code></li>
<li>其实上述两部可以通过一步完成</li>
<li><code>select avg(sal) ,deptno from emp group by deptno;</code></li>
<li>就是不动脑子和动脑子的区别</li>
<li>不过一般没思路的时候把数据源写上，可能会有奇效</li>
<li>接下来找出高于平均薪金的信息</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> sal_avg, deptno <span class="keyword">from</span> (<span class="keyword">select</span>  sal ,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> sal , deptno) <span class="keyword">as</span> king <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> avg_basic <span class="keyword">left</span> <span class="keyword">join</span> emp</span><br><span class="line"><span class="keyword">on</span> emp.deptno=avg_basic.deptno  <span class="keyword">and</span> emp.sal &gt; avg_basic.sal_avg;</span><br></pre></td></tr></table></figure>

<ul>
<li>这个是用左连接来实现的</li>
<li>其实还可以要用where来实现 , 不过比较复杂 ，就不在这里写了</li>
<li>接下来我们就合并部门输出就可以了</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span>  * </span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> sal_avg, deptno <span class="keyword">as</span> deptno1 <span class="keyword">from</span> (<span class="keyword">select</span>  sal ,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> sal , deptno) <span class="keyword">as</span> king <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> avg_basic <span class="keyword">left</span> <span class="keyword">join</span> emp</span><br><span class="line"><span class="keyword">on</span> emp.deptno=avg_basic.deptno1  <span class="keyword">and</span> emp.sal &gt; avg_basic.sal_avg) <span class="keyword">as</span> basicinfo <span class="keyword">left</span>  <span class="keyword">join</span> dept <span class="keyword">on</span> basicinfo.deptno1=dept.deptno;</span><br></pre></td></tr></table></figure>

<ul>
<li>这个可以用in替代</li>
<li>代码如下</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span>  * </span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">as</span> sal_avg, deptno <span class="keyword">as</span> deptno1 <span class="keyword">from</span> (<span class="keyword">select</span>  sal ,deptno <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> sal , deptno) <span class="keyword">as</span> king <span class="keyword">group</span> <span class="keyword">by</span> deptno) <span class="keyword">as</span> avg_basic <span class="keyword">left</span> <span class="keyword">join</span> emp</span><br><span class="line"><span class="keyword">on</span> emp.deptno=avg_basic.deptno1  <span class="keyword">and</span> emp.sal &gt; avg_basic.sal_avg) <span class="keyword">as</span> basicinfo <span class="keyword">where</span> basicinfo.deptno1 <span class="keyword">in</span> (<span class="keyword">select</span> deptno <span class="keyword">from</span> dept);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>完结撒花！</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>我们做题不可以改变源头数据 ， 就是数据库里的数据</li>
<li>没有思路的时候可以写题中要的数据 ， 题是做出来的，不是看出来的</li>
<li>写了第一行 ，自然就会有后面的代码，只是看你愿不愿意开始</li>
<li>有思路自然是按照自己的思路去做</li>
<li>在有些时候 left join 可以替换成  in  但是这样的替换是在 没有大于小于判定的时候</li>
<li>如果有大于小于判定 ，则要替换要用where</li>
<li>进行in的时候如果出现一行对多行的情况 ，</li>
<li>不妨把多行化成一行 ，用union</li>
<li>或者把多余的行删除</li>
<li>对于分组 ， 我们如果没有思路可以把题中要的东西先分组，然后后面再进行分组</li>
<li>比如 ： <code>select avg(sal) as sal_avg, deptno from (select  sal ,deptno from emp group by sal , deptno) as king group by deptno;</code></li>
<li>和 <code>select avg(sal) ,deptno from emp group by deptno;</code></li>
<li>是一样的，但是对于没有思路的时候来说，还是上面一个更好一点，下面是块，可是有时候会忘，</li>
<li>对于几乎所有的sql题目</li>
<li>几乎没有题通过 以下做不出来的</li>
<li>就是简单方法和笨方法的区别  ， 笨方法虽然笨 ，可是实用性强 ，简单虽然简单 ，可是难想</li>
<li>而且笨方法的速度其实主要取决于你的打字速度</li>
<li>先筛选数据 <code>group by</code> , <code>where</code> , <code>avg ,sum ,max ,min..</code> …</li>
<li>再筛选数据 <code>group by</code> , <code>where</code> , <code>avg ,sum ,max ,min..</code> …</li>
<li>通过链接的方式链接 <code>union</code> , <code>union all</code> ,<code> join</code>..</li>
<li>判断条件 <code>in</code> , <code>where</code> ….</li>
<li>注意 ： 组函数不可以进行嵌套使用 <code>where max(sal) =1</code> 这样就是不可以的 ，相应的 在in 里也不可以<br>， 在组函数里也不可以  ，如果非要这样操作 ，那么你要 嵌套表 , 加上别名才可以</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">from</span>(<span class="function"><span class="keyword">select</span></span></span><br><span class="line"><span class="function"><span class="title">max</span>(<span class="params">sal</span>) <span class="keyword">as</span> max_sal</span></span><br><span class="line"><span class="function"><span class="keyword">from</span> emp</span></span><br><span class="line"><span class="function">) <span class="keyword">where</span> max_sal</span> =<span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>上述那样才可以</li>
<li>where 和 having是有区别的 作用域的区别，以及位置的区别 ，但是语法是基本上完全一样的 in ， like 之类的</li>
<li>where被放在group之前 ，havin 是在group之后</li>
<li>例子 ：</li>
<li><code>select sal as sal1 ,comm  as comm1 from emp where sal1 &gt; 1500; </code></li>
<li><code>select sal as sal1 ,comm  as comm1 from emp where comm1 in (300);</code></li>
<li>这样where是读取不到这个别名的 ，但是having是可以读取到的</li>
<li>原因在于，他们对数据操作的时机不同</li>
<li>having是上面都执行完了 ，才操作</li>
<li>where是和他们一起操作的</li>
<li><code>select sal as sal1 from emp having sal1 &gt;1500;</code></li>
<li><code>select sal as sal1 from emp having sal in (800);</code></li>
<li>这样就可以了</li>
</ul>
<h1 id="牛客"><a href="#牛客" class="headerlink" title="牛客"></a>牛客</h1><h2 id="现在运营想要了解复旦大学的每个用户在8月份练习的总题目数和回答正确的题目数情况，请取出相应明细数据，对于在8月份没有练习过的用户，答题数结果返回0"><a href="#现在运营想要了解复旦大学的每个用户在8月份练习的总题目数和回答正确的题目数情况，请取出相应明细数据，对于在8月份没有练习过的用户，答题数结果返回0" class="headerlink" title="现在运营想要了解复旦大学的每个用户在8月份练习的总题目数和回答正确的题目数情况，请取出相应明细数据，对于在8月份没有练习过的用户，答题数结果返回0"></a>现在运营想要了解复旦大学的每个用户在8月份练习的总题目数和回答正确的题目数情况，请取出相应明细数据，对于在8月份没有练习过的用户，答题数结果返回0</h2><ul>
<li>数据源</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> `user_profile`;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span>  <span class="keyword">exists</span> `question_practice_detail`;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span>  <span class="keyword">exists</span> `question_detail`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_profile` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `device_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gender` <span class="type">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `university` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gpa` <span class="type">float</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `active_days_within_30` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `question_cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `answer_cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `question_practice_detail` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`device_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`question_id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`result` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`<span class="type">date</span>` <span class="type">date</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `question_detail` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`question_id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`difficult_level` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line">	</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2138</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;北京大学&#x27;</span>,<span class="number">3.4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3214</span>,<span class="string">&#x27;male&#x27;</span>,<span class="keyword">null</span>,<span class="string">&#x27;复旦大学&#x27;</span>,<span class="number">4.0</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">6543</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;北京大学&#x27;</span>,<span class="number">3.2</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">2315</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">23</span>,<span class="string">&#x27;浙江大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">5432</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;山东大学&#x27;</span>,<span class="number">3.8</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">70</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">2131</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;山东大学&#x27;</span>,<span class="number">3.3</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">13</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">4321</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;复旦大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">52</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2138</span>,<span class="number">111</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-03&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-09&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-06-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">2315</span>,<span class="number">115</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">2315</span>,<span class="number">116</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">2315</span>,<span class="number">117</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-09&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">10</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">11</span>,<span class="number">2315</span>,<span class="number">115</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">12</span>,<span class="number">2315</span>,<span class="number">116</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">13</span>,<span class="number">2315</span>,<span class="number">117</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">14</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-16&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">15</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-18&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">16</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">111</span>,<span class="string">&#x27;hard&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">112</span>,<span class="string">&#x27;medium&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">113</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">115</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">116</span>,<span class="string">&#x27;medium&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">117</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="答题"><a href="#答题" class="headerlink" title="答题"></a>答题</h2><ul>
<li>因为要用大于8月的 ， 所以 直接 用month就好</li>
<li>用if判断是不是正确</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">profile.device_id,</span><br><span class="line">university,</span><br><span class="line"><span class="built_in">count</span>(question_id) <span class="keyword">as</span> total,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">if</span>(result = <span class="string">&#x27;right&#x27;</span> , <span class="number">1</span> ,<span class="number">0</span>)) <span class="keyword">as</span> right_question_cnt</span><br><span class="line"><span class="keyword">from</span> user_profile <span class="keyword">as</span> profile <span class="keyword">left</span> <span class="keyword">join</span> question_practice_detail <span class="keyword">as</span> detail <span class="keyword">on</span> profile.device_id=detail.device_id  <span class="keyword">and</span> month(detail.date)=<span class="number">8</span> <span class="keyword">where</span> university = <span class="string">&#x27;复旦大学&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> profile.device_id;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>第二种方法</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">device_id,</span><br><span class="line">university,</span><br><span class="line">sum(right_question_cnt + wrong_question_cnt) <span class="keyword">as</span> question_cnt,</span><br><span class="line">sum(right_question_cnt) <span class="keyword">as</span> right_question_cnt</span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> </span><br><span class="line">device_id,</span><br><span class="line">university,</span><br><span class="line">ifnull((right_question_cnt) , <span class="number">0</span>) <span class="keyword">as</span> right_question_cnt,</span><br><span class="line">ifnull((wrong_question_cnt) , <span class="number">0</span>) <span class="keyword">as</span> wrong_question_cnt,</span><br><span class="line">ifnull((<span class="type">date</span>) , <span class="number">0</span>) <span class="keyword">as</span> <span class="type">date</span></span><br><span class="line"><span class="keyword">from</span> user_profile <span class="keyword">left join</span> (</span><br><span class="line"><span class="keyword">select</span> device_id <span class="keyword">as</span> ID,count(*) <span class="keyword">as</span> right_question_cnt ,<span class="type">date</span> , (device_id - device_id) <span class="keyword">as</span> wrong_question_cnt <span class="keyword">from</span> question_practice_detail <span class="keyword">where</span> result  = &quot;right&quot; <span class="keyword">group</span> <span class="keyword">by</span> device_id ,<span class="type">date</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> device_id,(device_id - device_id) <span class="keyword">as</span> right_question_cnt,<span class="type">date</span> ,count(*) <span class="keyword">as</span> wrong_question_cnt  <span class="keyword">from</span> question_practice_detail <span class="keyword">where</span> result  = &quot;wrong&quot; <span class="keyword">group</span> <span class="keyword">by</span> device_id ,<span class="type">date</span>) <span class="keyword">as</span> king <span class="keyword">on</span> king.ID = user_profile.device_id <span class="keyword">where</span> university = &quot;复旦大学&quot;) <span class="keyword">as</span> king  </span><br><span class="line"><span class="keyword">where</span> <span class="type">date</span> &gt; <span class="string">&#x27;2021-08-00&#x27;</span> <span class="keyword">or</span> <span class="type">date</span> = <span class="number">0</span>  <span class="keyword">group</span> <span class="keyword">by</span> device_id , university ;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul>
<li>链接后面的on后面 ，能加上and 进行条件筛选</li>
<li>month（date） 可以直接获取这个日期的月份</li>
<li>if（xxx , sss , www） : if表达式 ： 如果前一个为真 ，则执行sss ，如果不是真 则 www</li>
<li>要看清题意</li>
</ul>
<h2 id="现在运营想要了解浙江大学的用户在不同难度题目下答题的正确率情况，请取出相应数据，并按照准确率升序输出。"><a href="#现在运营想要了解浙江大学的用户在不同难度题目下答题的正确率情况，请取出相应数据，并按照准确率升序输出。" class="headerlink" title="现在运营想要了解浙江大学的用户在不同难度题目下答题的正确率情况，请取出相应数据，并按照准确率升序输出。"></a>现在运营想要了解浙江大学的用户在不同难度题目下答题的正确率情况，请取出相应数据，并按照准确率升序输出。</h2><ul>
<li>数据源</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> `user_profile`;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span>  <span class="keyword">exists</span> `question_practice_detail`;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span>  <span class="keyword">exists</span> `question_detail`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_profile` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `device_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gender` <span class="type">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `university` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gpa` <span class="type">float</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `active_days_within_30` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `question_cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `answer_cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `question_practice_detail` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`device_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`question_id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`result` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`<span class="type">date</span>` <span class="type">date</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `question_detail` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`question_id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`difficult_level` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line">	</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2138</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;北京大学&#x27;</span>,<span class="number">3.4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3214</span>,<span class="string">&#x27;male&#x27;</span>,<span class="keyword">null</span>,<span class="string">&#x27;复旦大学&#x27;</span>,<span class="number">4.0</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">6543</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;北京大学&#x27;</span>,<span class="number">3.2</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">2315</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">23</span>,<span class="string">&#x27;浙江大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">2316</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">23</span>,<span class="string">&#x27;浙江大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">5432</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;山东大学&#x27;</span>,<span class="number">3.8</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">70</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">2131</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;山东大学&#x27;</span>,<span class="number">3.3</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">13</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">4321</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;复旦大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">52</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2138</span>,<span class="number">111</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-03&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-09&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-06-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">2315</span>,<span class="number">115</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">2315</span>,<span class="number">116</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">2315</span>,<span class="number">117</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-09&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">10</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">11</span>,<span class="number">2315</span>,<span class="number">115</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">12</span>,<span class="number">2315</span>,<span class="number">116</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">13</span>,<span class="number">2315</span>,<span class="number">117</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">14</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-16&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">15</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-18&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">16</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">111</span>,<span class="string">&#x27;hard&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">112</span>,<span class="string">&#x27;medium&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">113</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">115</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">116</span>,<span class="string">&#x27;medium&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">117</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">difficult_level,</span><br><span class="line">(<span class="built_in">sum</span>(<span class="keyword">if</span>(result = <span class="string">&#x27;right&#x27;</span> , <span class="number">1</span> ,<span class="number">0</span>))/<span class="built_in">count</span>(up.question_id)) <span class="keyword">as</span> Rate</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> question_practice_detail <span class="keyword">where</span> device_id <span class="keyword">in</span> (<span class="keyword">select</span> device_id <span class="keyword">from</span> user_profile <span class="keyword">where</span> university = <span class="string">&quot;浙江大学&quot;</span>)) <span class="keyword">as</span> up <span class="keyword">left</span> <span class="keyword">join</span> question_detail <span class="keyword">on</span> up.question_id = question_detail.question_id <span class="keyword">group</span> <span class="keyword">by</span> difficult_level <span class="keyword">order</span> <span class="keyword">by</span> Rate;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>优化方法</li>
<li>把中间筛选浙江大学的地方换成链接 ，并且在链接的时候进行筛选 ， 就会快上给 5-6ms</li>
<li>如下</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> qd.difficult_level,(</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> qpd.result=<span class="string">&#x27;right&#x27;</span> <span class="keyword">THEN</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">ELSE</span> <span class="number">0</span></span><br><span class="line">	<span class="keyword">END</span></span><br><span class="line">)/<span class="built_in">COUNT</span>(qpd.result)</span><br><span class="line">) correct_rated</span><br><span class="line"><span class="keyword">FROM</span> user_profile up,</span><br><span class="line">     question_practice_detail qpd,</span><br><span class="line">     question_detail qd</span><br><span class="line"><span class="keyword">WHERE</span>     up.university=<span class="string">&#x27;浙江大学&#x27;</span></span><br><span class="line">      <span class="keyword">AND</span> up.device_id=qpd.device_id</span><br><span class="line">      <span class="keyword">AND</span> qpd.question_id=qd.question_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  qd.difficult_level</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> correct_rated <span class="keyword">asc</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="现在运营想要查看用户在某天刷题后第二天还会再来刷题的平均概率。请你取出相应数据。"><a href="#现在运营想要查看用户在某天刷题后第二天还会再来刷题的平均概率。请你取出相应数据。" class="headerlink" title="现在运营想要查看用户在某天刷题后第二天还会再来刷题的平均概率。请你取出相应数据。"></a>现在运营想要查看用户在某天刷题后第二天还会再来刷题的平均概率。请你取出相应数据。</h2><ul>
<li>数据源</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> `user_profile`;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span>  <span class="keyword">exists</span> `question_practice_detail`;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span>  <span class="keyword">exists</span> `question_detail`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_profile` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `device_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gender` <span class="type">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `university` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gpa` <span class="type">float</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `active_days_within_30` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `question_cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `answer_cnt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">) ENGINE=InnoDB <span class="keyword">DEFAULT</span> CHARSET=utf8;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `question_practice_detail` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`device_id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`question_id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`result` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`<span class="type">date</span>` <span class="type">date</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `question_detail` (</span><br><span class="line">`id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`question_id`<span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`difficult_level` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line">	</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2138</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;北京大学&#x27;</span>,<span class="number">3.4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3214</span>,<span class="string">&#x27;male&#x27;</span>,<span class="keyword">null</span>,<span class="string">&#x27;复旦大学&#x27;</span>,<span class="number">4.0</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">25</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">6543</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;北京大学&#x27;</span>,<span class="number">3.2</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">2315</span>,<span class="string">&#x27;female&#x27;</span>,<span class="number">23</span>,<span class="string">&#x27;浙江大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">5432</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">25</span>,<span class="string">&#x27;山东大学&#x27;</span>,<span class="number">3.8</span>,<span class="number">20</span>,<span class="number">15</span>,<span class="number">70</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">2131</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;山东大学&#x27;</span>,<span class="number">3.3</span>,<span class="number">15</span>,<span class="number">7</span>,<span class="number">13</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_profile <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">4321</span>,<span class="string">&#x27;male&#x27;</span>,<span class="number">28</span>,<span class="string">&#x27;复旦大学&#x27;</span>,<span class="number">3.6</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">52</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">2138</span>,<span class="number">111</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-03&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-09&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-06-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">2315</span>,<span class="number">115</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">2315</span>,<span class="number">116</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="number">2315</span>,<span class="number">117</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-05-09&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">10</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">11</span>,<span class="number">2315</span>,<span class="number">115</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">12</span>,<span class="number">2315</span>,<span class="number">116</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-14&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">13</span>,<span class="number">2315</span>,<span class="number">117</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-15&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">14</span>,<span class="number">3214</span>,<span class="number">112</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-16&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">15</span>,<span class="number">3214</span>,<span class="number">113</span>,<span class="string">&#x27;wrong&#x27;</span>,<span class="string">&#x27;2021-08-18&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_practice_detail <span class="keyword">VALUES</span>(<span class="number">16</span>,<span class="number">6543</span>,<span class="number">111</span>,<span class="string">&#x27;right&#x27;</span>,<span class="string">&#x27;2021-08-13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="number">111</span>,<span class="string">&#x27;hard&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="number">112</span>,<span class="string">&#x27;medium&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="number">113</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="number">115</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="number">116</span>,<span class="string">&#x27;medium&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> question_detail <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="number">117</span>,<span class="string">&#x27;easy&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> avg(<span class="keyword">if</span>(datediff(date2, date1)=<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">as</span> avg_ret</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">distinct</span> device_id,</span><br><span class="line">        <span class="type">date</span> <span class="keyword">as</span> date1,</span><br><span class="line">        lead(<span class="type">date</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> device_id <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">date</span>) <span class="keyword">as</span> date2</span><br><span class="line">    <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">distinct</span> device_id, <span class="type">date</span></span><br><span class="line">        <span class="keyword">from</span> question_practice_detail</span><br><span class="line">    ) <span class="keyword">as</span> uniq_id_date</span><br><span class="line">) <span class="keyword">as</span> id_last_next_date</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>project</title>
    <url>/2023/02/01/project/</url>
    <content><![CDATA[<h1 id="jdbctohive"><a href="#jdbctohive" class="headerlink" title="jdbctohive"></a>jdbctohive</h1><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">package project</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util</span><br><span class="line"></span><br><span class="line">import org.apache.spark.sql.catalog.Catalog</span><br><span class="line">import org.apache.spark.sql.&#123;DataFrame, Dataset, Row, SparkSession&#125;</span><br><span class="line">import tool.sqlUtils</span><br><span class="line">import tool.getmysqldf</span><br><span class="line">import tool.savefile</span><br><span class="line">import tool.readfile</span><br><span class="line">object jdbctohive &#123;</span><br><span class="line">  System.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>,<span class="string">&quot;hadoop&quot;</span>)</span><br><span class="line">  val spark = SparkSession.builder().appName(<span class="string">&quot;sqoop&quot;</span>).master(<span class="string">&quot;local[4]&quot;</span>).enableHiveSupport().getOrCreate()</span><br><span class="line">  spark.sparkContext.setCheckpointDir(<span class="string">&quot;/tmp/checkpoint&quot;</span>)</span><br><span class="line"></span><br><span class="line">  val getmysqldf = new readfile</span><br><span class="line">  val sqlUtils = new sqlUtils</span><br><span class="line">  val saveFile = new savefile</span><br><span class="line">  private val catalog: Catalog = spark.catalog</span><br><span class="line">  var changecolunm = false</span><br><span class="line">  import spark.implicits._</span><br><span class="line">  import org.apache.spark.sql.functions._</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length==<span class="number">0</span>)&#123;</span><br><span class="line">      println(</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">          |欢迎使用本程序</span></span><br><span class="line"><span class="string">          |参数详情 mysql hive</span></span><br><span class="line"><span class="string">          |-------------------------mysql</span></span><br><span class="line"><span class="string">          |url 例子 ： jdbc:mysql://bigdata2:3306/try</span></span><br><span class="line"><span class="string">          |user 例子 ： root</span></span><br><span class="line"><span class="string">          |password 例子 ： liuzihan010616</span></span><br><span class="line"><span class="string">          |tablename =&gt; 支持谓词下压  例子 ： emp 或者 select * from emp 等</span></span><br><span class="line"><span class="string">          |driver =&gt; com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="string">          |---------------------------hive</span></span><br><span class="line"><span class="string">          |mode模式 overwrite append 等</span></span><br><span class="line"><span class="string">          |hive中的table 例子 bigdata.emp</span></span><br><span class="line"><span class="string">          |可选参数 分区字段 自动开启的是动态分区 例子 deptno</span></span><br><span class="line"><span class="string">          |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    val url = args(<span class="number">0</span>)</span><br><span class="line">    val user = args(<span class="number">1</span>)</span><br><span class="line">    val password = args(<span class="number">2</span>)</span><br><span class="line">    val table = args(<span class="number">3</span>)</span><br><span class="line">    val driver = args(<span class="number">4</span>)</span><br><span class="line">    <span class="regexp">//</span> 获取jdbc的df</span><br><span class="line">    val mysqlconnect = getmysqldf.getmysqldataframe(spark, url, user, password, table , driver)</span><br><span class="line">    <span class="regexp">//</span> 验证指示</span><br><span class="line">    mysqlconnect.show()</span><br><span class="line">    <span class="regexp">//</span> 生成hive参数数组</span><br><span class="line">    var hiveconf = new Array[String](args.length-<span class="number">5</span>)</span><br><span class="line">    hiveconf = util.Arrays.copyOfRange(args, <span class="number">5</span>, args.length)</span><br><span class="line">    <span class="regexp">//</span>hiveconf.foreach(println(_))</span><br><span class="line">    jdbctohive(args,catalog,mysqlconnect,hiveconf)</span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  def changecolnums(args:Array[String],hiveconf:Array[String],resourcesql:DataFrame) =&#123;</span><br><span class="line">    var finallyresult:Dataset[Row] = null <span class="regexp">//</span> 最终结果集</span><br><span class="line">    var frame:DataFrame = null <span class="regexp">//</span> 中间变量</span><br><span class="line">    var hiveconclumns = spark.table(args(<span class="number">6</span>)).columns <span class="regexp">//</span> hive的列数</span><br><span class="line">    hiveconclumns.foreach(println((_))) <span class="regexp">//</span> 验证hive的列数</span><br><span class="line">    var mysqlconnect:DataFrame = resourcesql <span class="regexp">//</span> 设置数据源的resource</span><br><span class="line"></span><br><span class="line">    <span class="regexp">//</span> 判断分区字段在不在jdbc的数据里，如果不在，则在jdbc的数据源中先添加上分区字段</span><br><span class="line">    <span class="keyword">if</span> (args.length &gt; <span class="number">7</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (!resourcesql.columns.contains(args(<span class="number">7</span>)))&#123;</span><br><span class="line">        mysqlconnect = resourcesql.withColumn(args(<span class="number">7</span>),lit(args(<span class="number">8</span>)))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    val jdbcconclumns = mysqlconnect.columns <span class="regexp">//</span> jdbc的列数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    var jdbcoldsource:Dataset[Row] = null <span class="regexp">//</span> 源数据库的数据 checkpoint是为了破坏数据均衡，以后能编写变读取</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (args.length == <span class="number">10</span>)&#123;</span><br><span class="line">      jdbcoldsource = spark.sql(</span><br><span class="line">        s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">          |select * from $&#123;hiveconf(1)&#125; where $&#123;hiveconf(2)&#125; != $&#123;hiveconf(3)&#125;</span></span><br><span class="line"><span class="string">          |&quot;&quot;&quot;</span>.stripMargin).checkpoint()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      jdbcoldsource =  spark.sql(</span><br><span class="line">        s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">           |select * from $&#123;hiveconf(1)&#125;</span></span><br><span class="line"><span class="string">           |&quot;&quot;&quot;</span>.stripMargin).checkpoint()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var existcolunms: Array[String] = null  <span class="regexp">//</span> 设置hive或者mysql的额外列</span><br><span class="line">    var resultdf: DataFrame = jdbcoldsource <span class="regexp">//</span> 获取hive的数据原始数据</span><br><span class="line"></span><br><span class="line">    <span class="regexp">//</span> 判断是hive的列多，还是数据源的列数多</span><br><span class="line">    <span class="keyword">if</span> (hiveconclumns.length &gt;= jdbcconclumns.length)&#123;</span><br><span class="line">      <span class="regexp">//</span> 判断额外列的存在</span><br><span class="line">      existcolunms= hiveconclumns.filter(hivecol =&gt; &#123;</span><br><span class="line">        val bool = jdbcconclumns.map(jdbccol =&gt; &#123;</span><br><span class="line">          jdbccol == hivecol</span><br><span class="line">        &#125;).contains(true)</span><br><span class="line">        !bool</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="regexp">//</span> 判断两个列数是不是相等</span><br><span class="line">        <span class="keyword">if</span> (existcolunms.isEmpty) &#123;</span><br><span class="line">          frame = mysqlconnect.selectExpr(hiveconclumns: _*)</span><br><span class="line">          frame</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="regexp">//</span> 列数不相等的时候让列数少的加列</span><br><span class="line">        resultdf = mysqlconnect</span><br><span class="line">        <span class="keyword">for</span> (elem &lt;- existcolunms)&#123;</span><br><span class="line">          resultdf = resultdf.withColumn(elem, lit(null))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="regexp">//</span> 对字段进行排序 ， 让分区数据的分区字段在最后一列</span><br><span class="line">        frame = resultdf.selectExpr(hiveconclumns: _*)</span><br><span class="line">        <span class="regexp">//</span> 验证数据</span><br><span class="line">        frame.show()</span><br><span class="line">        <span class="regexp">//</span> 整合历史数据</span><br><span class="line">        finallyresult = jdbcoldsource.union(frame)</span><br><span class="line">        <span class="regexp">//</span> 验证数据</span><br><span class="line">        finallyresult.show()</span><br><span class="line">        changecolunm = true</span><br><span class="line">        finallyresult</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="regexp">//</span> 数据的列多</span><br><span class="line">      existcolunms= jdbcconclumns.filter(jdbccol =&gt; &#123;</span><br><span class="line">        val bool = hiveconclumns.map(hivecol =&gt; &#123;</span><br><span class="line">          jdbccol == hivecol</span><br><span class="line">        &#125;).contains(true)</span><br><span class="line">        !bool</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (existcolunms.isEmpty) &#123;</span><br><span class="line">        frame = mysqlconnect.selectExpr(hiveconclumns: _*)</span><br><span class="line">        frame</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (elem &lt;- existcolunms)&#123;</span><br><span class="line">          resultdf = resultdf.withColumn(elem, lit(null))</span><br><span class="line">        &#125;</span><br><span class="line">        frame = resultdf.selectExpr(jdbcconclumns: _*)</span><br><span class="line">        finallyresult = resultdf.union(mysqlconnect)</span><br><span class="line">        changecolunm = true</span><br><span class="line">        finallyresult</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  def jdbctohive(args:Array[String],catalog: Catalog,mysqlconnect: DataFrame, hiveconf: Array[String])=&#123;</span><br><span class="line">    <span class="regexp">//</span> 分割字符串获取hive的 表和数据库</span><br><span class="line">    val strings = hiveconf(<span class="number">1</span>).split(<span class="string">&quot;\\.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> catalog的方法 获取表存不存在的方法</span><br><span class="line"><span class="regexp">//</span>    catalog.listTables(strings(<span class="number">0</span>)).show()</span><br><span class="line"><span class="regexp">//</span>    val empty = catalog.listTables(strings(<span class="number">0</span>)).filter(x =&gt; &#123;</span><br><span class="line"><span class="regexp">//</span>      x.name == strings(<span class="number">1</span>)</span><br><span class="line"><span class="regexp">//</span>    &#125;).isEmpty</span><br><span class="line">    val empty = catalog.tableExists(strings(<span class="number">0</span>),strings(<span class="number">1</span>))</span><br><span class="line"><span class="regexp">//</span>-----------------------------------------------------------------------------</span><br><span class="line"><span class="regexp">//</span>    sql的方法</span><br><span class="line"><span class="regexp">//</span>    val empty1 = spark.sql(</span><br><span class="line"><span class="regexp">//</span>      <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">//        |show tables in hivedb</span></span><br><span class="line"><span class="string">//        |&quot;&quot;&quot;</span>.stripMargin).filter(<span class="string">&quot;tableName = &#x27;hivetablename&#x27;&quot;</span>).isEmpty</span><br><span class="line"><span class="regexp">//</span> --------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="regexp">//</span> 判断列数是不是相等</span><br><span class="line">    var frameresult:DataFrame = null</span><br><span class="line">    <span class="regexp">//</span> 先判断表存不存在 ，因为判断列数的方法要求表存在</span><br><span class="line">      empty match &#123;</span><br><span class="line">          <span class="regexp">//</span> 表不存在</span><br><span class="line">      case false =&gt; &#123;</span><br><span class="line">        <span class="regexp">//</span> 判断输入的变量个数执行 判断分区表还是普通表</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">7</span>) &#123;</span><br><span class="line">          println(<span class="string">&quot;-----------------分区表&quot;</span>)</span><br><span class="line">          <span class="regexp">//</span> 判断分区的参数在不在列中 如果不在 ，则加上 ，在的话就自动往下走</span><br><span class="line">          <span class="keyword">if</span> (!mysqlconnect.columns.contains(args(<span class="number">7</span>)))&#123;</span><br><span class="line">            frameresult = mysqlconnect.withColumn(args(<span class="number">7</span>),lit(args(<span class="number">8</span>)))</span><br><span class="line">            frameresult.show()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          println(<span class="string">&quot;-----------普通表&quot;</span>)</span><br><span class="line">          frameresult = mysqlconnect</span><br><span class="line">          mysqlconnect.show()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      case true =&gt; &#123;</span><br><span class="line">        <span class="regexp">//</span> 表存在</span><br><span class="line">        <span class="regexp">//</span> 判断是不是分区表</span><br><span class="line">        frameresult = changecolnums(args, hiveconf, mysqlconnect)</span><br><span class="line"><span class="regexp">//</span>        <span class="keyword">if</span> (args.length &gt; <span class="number">7</span>) &#123;</span><br><span class="line"><span class="regexp">//</span>          println(<span class="string">&quot;-----------------分区表&quot;</span>)</span><br><span class="line"><span class="regexp">//</span>          <span class="keyword">if</span> (!mysqlconnect.columns.contains(args(<span class="number">7</span>)))&#123;</span><br><span class="line"><span class="regexp">//</span>            frameresult = changecolnums(args, hiveconf, mysqlconnect)</span><br><span class="line"><span class="regexp">//</span>          &#125;</span><br><span class="line"><span class="regexp">//</span>        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="regexp">//</span>          println(<span class="string">&quot;-----------普通表&quot;</span>)</span><br><span class="line"><span class="regexp">//</span>          frameresult = mysqlconnect</span><br><span class="line"><span class="regexp">//</span>        &#125;</span><br><span class="line">        frameresult.show()&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    spark.conf.set(<span class="string">&quot;hive.exec.dynamic.partition.mode&quot;</span>,<span class="string">&quot;nonstrict&quot;</span>)</span><br><span class="line">    spark.conf.set(<span class="string">&quot;hive.exec.dynamic.partition&quot;</span>,<span class="string">&quot;true&quot;</span>)</span><br><span class="line">    spark.conf.set(<span class="string">&quot;spark.sql.parquet.writeLegacyFormat&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">    println(empty)</span><br><span class="line">    hiveconf.foreach(println(_))</span><br><span class="line">    saveFile.savetohiveapi(empty,frameresult,hiveconf,changecolunm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="hivetojdbcs"><a href="#hivetojdbcs" class="headerlink" title="hivetojdbcs"></a>hivetojdbcs</h1><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">package project</span><br><span class="line"></span><br><span class="line">import java.util</span><br><span class="line"></span><br><span class="line">import org.apache.spark.sql.SparkSession</span><br><span class="line">import org.apache.spark.sql.catalog.Catalog</span><br><span class="line">import project.jdbctohive.spark</span><br><span class="line">import tool.&#123;getmysqldf, savefile, sqlUtils,<span class="built_in">readfile</span>&#125;</span><br><span class="line"></span><br><span class="line">object hivetojdbc &#123;</span><br><span class="line">  val spark = SparkSession.builder().appName(<span class="string">&quot;sqoop&quot;</span>).master(<span class="string">&quot;local[4]&quot;</span>).enableHiveSupport().getOrCreate()</span><br><span class="line">  val getmysqldf = <span class="keyword">new</span> <span class="built_in">readfile</span></span><br><span class="line">  val sqlUtils = <span class="keyword">new</span> sqlUtils</span><br><span class="line">  val saveFile = <span class="keyword">new</span> savefile</span><br><span class="line">  private val catalog: Catalog = spark.catalog</span><br><span class="line"></span><br><span class="line">  def main(<span class="keyword">args</span>: Array[String]): Unit = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">args</span>.length==<span class="number">0</span>)&#123;</span><br><span class="line">      println(</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="comment">&quot;</span></span><br><span class="line">          |欢迎使用本程序</span><br><span class="line">          |参数说明</span><br><span class="line">          |总体参数种类 hive mysql</span><br><span class="line">          |---------------------------hive</span><br><span class="line">          |hive中要选择的字段 例子 ： <span class="string">&quot;sal,big  / *  &quot;</span></span><br><span class="line">          |hive的table的名字 例子 ： bigdata_hive3.emp</span><br><span class="line">          |hive中的 条件可以为空 例子 ： where <span class="keyword">sal</span> &gt; <span class="string">&#x27;300&#x27;</span></span><br><span class="line">          |---------------------------mysql</span><br><span class="line">          |savemode overwrite <span class="keyword">append</span> 等</span><br><span class="line">          |url 例子 ： jdbc:mysql://bigdata2:<span class="number">3306</span>/<span class="keyword">try</span></span><br><span class="line">          |user 例子 ： root</span><br><span class="line">          |password 例子 ： liuzihan010616</span><br><span class="line">          |dbtable 例子 ： emp</span><br><span class="line">          |幂等性的列 ： 例子 ： <span class="keyword">sal</span></span><br><span class="line">          |驱动名称 ： 例子 <span class="keyword">com</span>.mysql.jdbc.Driver</span><br><span class="line">          |<span class="string">&quot;&quot;</span><span class="comment">&quot;.stripMargin)</span></span><br><span class="line">    &#125;</span><br><span class="line">    val frame = sqlUtils.checksql(spark, sqlUtils.hivesqlchoose(<span class="keyword">args</span>))</span><br><span class="line"></span><br><span class="line">      var mysqlconf = <span class="keyword">new</span> Array[String](<span class="keyword">args</span>.length-<span class="number">3</span>)</span><br><span class="line">      mysqlconf = util.Arrays.copyOfRange(<span class="keyword">args</span>, <span class="number">2</span>, <span class="keyword">args</span>.length)</span><br><span class="line">      saveFile.savetojdbc(spark,frame,mysqlconf)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>tool</title>
    <url>/2001/01/16/tool/</url>
    <content><![CDATA[<p>这里放的都是我自己写的各种简单的应用包</p>
<h1 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h1><h2 id="tool-readfiles"><a href="#tool-readfiles" class="headerlink" title="tool.readfiles"></a>tool.readfiles</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package tool</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="keyword">sql</span>.&#123;DataFrame, SparkSession&#125;</span><br><span class="line"><span class="keyword">import</span> com.crealytics.spark.excel._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="keyword">sql</span></span><br><span class="line"><span class="keyword">class</span> readfile &#123;</span><br><span class="line"></span><br><span class="line">  def getmysqldataframe(sparkSession: SparkSession,string: String*) =&#123;</span><br><span class="line"></span><br><span class="line">    val <span class="keyword">sql</span> = string(<span class="number">3</span>)</span><br><span class="line">    val frame: DataFrame = sparkSession.<span class="keyword">read</span>.format(&quot;jdbc&quot;).<span class="keyword">options</span>(Map(&quot;url&quot; -&gt; string(<span class="number">0</span>), &quot;user&quot; -&gt; string(<span class="number">1</span>), &quot;password&quot; -&gt; string(<span class="number">2</span>), &quot;dbtable&quot; -&gt; s&quot;($sql) as tmp&quot;,&quot;driver&quot;-&gt;string(<span class="number">4</span>))).<span class="keyword">load</span>()</span><br><span class="line">    frame</span><br><span class="line">    //    <span class="keyword">if</span> (string(<span class="number">3</span>).contains(&quot; &quot;)) &#123;</span><br><span class="line">    //      val <span class="keyword">sql</span> = string(<span class="number">3</span>)</span><br><span class="line">    //      val frame = sparkSession.<span class="keyword">read</span>.format(&quot;jdbc&quot;).<span class="keyword">options</span>(Map(&quot;url&quot; -&gt; string(<span class="number">0</span>), &quot;user&quot; -&gt; string(<span class="number">1</span>), &quot;password&quot; -&gt; string(<span class="number">2</span>), &quot;dbtable&quot; -&gt; s&quot;$sql&quot;)).<span class="keyword">load</span>()</span><br><span class="line">    //      frame</span><br><span class="line">    //    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    //      val frame = sparkSession.<span class="keyword">read</span>.format(&quot;jdbc&quot;).<span class="keyword">options</span>(Map(&quot;url&quot; -&gt; string(<span class="number">0</span>), &quot;user&quot; -&gt; string(<span class="number">1</span>), &quot;password&quot; -&gt; string(<span class="number">2</span>), &quot;dbtable&quot; -&gt; string(<span class="number">3</span>))).<span class="keyword">load</span>()</span><br><span class="line">    //      frame</span><br><span class="line">    //    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def getmyqsldffromMap(sparkSession: SparkSession,map: Map[String,String])=&#123;</span><br><span class="line">    sparkSession.<span class="keyword">read</span>.format(&quot;jdbc&quot;).<span class="keyword">options</span>(map).<span class="keyword">load</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def readexcel(sparkSession: SparkSession,string: String*)=&#123;</span><br><span class="line">    sparkSession.<span class="keyword">read</span>.excel(<span class="keyword">header</span> = string(<span class="number">0</span>).toBoolean,inferSchema = string(<span class="number">1</span>).toBoolean).<span class="keyword">load</span>(string(<span class="number">3</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def readxxxfile(sparkSession: SparkSession,string: String*) =&#123;</span><br><span class="line">    sparkSession.<span class="keyword">read</span>.format(string(<span class="number">0</span>)).<span class="keyword">load</span>(string(<span class="number">1</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="tool-savefile"><a href="#tool-savefile" class="headerlink" title="tool.savefile"></a>tool.savefile</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package tool</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="keyword">sql</span>.&#123;DataFrame, DataFrameWriter, SparkSession&#125;</span><br><span class="line"><span class="keyword">import</span> com.crealytics.spark.excel._</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.formula.<span class="keyword">functions</span>.T</span><br><span class="line"><span class="keyword">import</span> tool.readfile</span><br><span class="line"><span class="keyword">import</span> tool.getjdbcconnect</span><br><span class="line"><span class="keyword">class</span> savefile()&#123;</span><br><span class="line">  private val jdbcconnect = <span class="built_in">new</span> getjdbcconnect</span><br><span class="line"></span><br><span class="line">  private val mysqldf = <span class="built_in">new</span> getmysqldf</span><br><span class="line">  def saveexcel(spark: DataFrame, string: <span class="keyword">Array</span>[String]) = &#123;</span><br><span class="line">    spark.<span class="keyword">write</span>.mode(string(<span class="number">2</span>)).excel(<span class="keyword">header</span> = string(<span class="number">4</span>).toBoolean,string(<span class="number">5</span>),string(<span class="number">6</span>),string(<span class="number">7</span>),string(<span class="number">8</span>)).save(string(<span class="number">3</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  def savetojdbc(spark: SparkSession,df: DataFrame, url:String,<span class="keyword">user</span>:String,<span class="keyword">password</span>:String,dbtable:String,driver:String,mideng:String,mode:String)=&#123;</span><br><span class="line">    val map = Map(&quot;url&quot; -&gt; url,</span><br><span class="line">      &quot;user&quot; -&gt; <span class="keyword">user</span>,</span><br><span class="line">      &quot;password&quot; -&gt; <span class="keyword">password</span>,</span><br><span class="line">      &quot;dbtable&quot; -&gt; dbtable,</span><br><span class="line">      &quot;driver&quot;-&gt; driver)</span><br><span class="line"></span><br><span class="line">//    df.<span class="keyword">write</span>.mode(string(<span class="number">2</span>)).format(string(<span class="number">1</span>)).<span class="keyword">options</span>(map).save()</span><br><span class="line">    // <span class="comment">-------------------------------------幂等性</span></span><br><span class="line">    val <span class="keyword">connection</span> = jdbcconnect.getconncet(driver,url,<span class="keyword">user</span>,<span class="keyword">password</span>)</span><br><span class="line">    try&#123;</span><br><span class="line">      val <span class="type">bool</span> = <span class="keyword">connection</span>.createStatement().executeQuery(s&quot;show tables like &#x27;$&#123;dbtable&#125;&#x27;&quot;).next()</span><br><span class="line">      <span class="keyword">if</span> (!<span class="type">bool</span>)&#123;</span><br><span class="line">        throw <span class="built_in">new</span> NullPointerException(s&quot;写入的结果表$&#123;dbtable&#125; 尚未创建！！！&quot;)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        var flag:<span class="keyword">Any</span> = <span class="keyword">null</span></span><br><span class="line">        val flagbool = mysqldf.getmyqsldffromMap(spark, map).<span class="keyword">select</span>(mideng).isEmpty</span><br><span class="line">        <span class="keyword">if</span> (!flagbool)&#123;</span><br><span class="line">         flag = mysqldf.getmyqsldffromMap(spark, map).<span class="keyword">select</span>(mideng).tail(<span class="number">1</span>)(<span class="number">0</span>)(<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        val tmpresult = df.<span class="keyword">select</span>(mideng).<span class="keyword">filter</span>(<span class="type">line</span> =&gt; &#123;</span><br><span class="line">          <span class="type">line</span>.getString(<span class="number">0</span>) != flag</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (df.isEmpty)&#123;</span><br><span class="line">          println(&quot;数据集为空&quot;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (tmpresult.isEmpty)&#123;</span><br><span class="line">            println(&quot;你的数据已经插入过&quot;)</span><br><span class="line">            df.<span class="keyword">show</span>(<span class="keyword">false</span>)</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">//            df.<span class="keyword">show</span>()</span><br><span class="line">//            println(df.count())</span><br><span class="line">            //val insertresult = tmpresult.<span class="keyword">join</span>(df, string(<span class="number">5</span>))</span><br><span class="line">            tmpresult.<span class="keyword">show</span>()</span><br><span class="line">            println(tmpresult.count())</span><br><span class="line">//            insertresult.<span class="keyword">show</span>()</span><br><span class="line">//            println(insertresult.count())</span><br><span class="line">            tmpresult.<span class="keyword">write</span>.mode(mode).format(&quot;jdbc&quot;).<span class="keyword">options</span>(map).save()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;finally &#123;</span><br><span class="line">      <span class="keyword">connection</span>.<span class="keyword">close</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  def savetohiveapi(sparkSession: SparkSession,<span class="type">boolean</span>: <span class="type">Boolean</span>,spark: DataFrame,hivetable:String,mode:String,hivepartition:String,changecolnums:<span class="type">Boolean</span>) = &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="type">boolean</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span> (hivepartition != <span class="keyword">null</span>)&#123;</span><br><span class="line">        spark.<span class="keyword">write</span>.partitionBy(hivepartition.split(&quot;,&quot;):_*).mode(mode).format(&quot;hive&quot;).saveAsTable(hivetable)</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        println(hivetable)</span><br><span class="line">        println(hivepartition)</span><br><span class="line">        spark.<span class="keyword">write</span>.mode(mode).format(&quot;hive&quot;).saveAsTable(hivetable)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      changecolnums match &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">true</span> =&gt;  &#123;</span><br><span class="line">          <span class="keyword">if</span> (hivepartition != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sparkSession.<span class="keyword">table</span>(hivetable).<span class="keyword">columns</span>.length != spark.<span class="keyword">columns</span>.length)&#123;</span><br><span class="line">             sparkSession.<span class="keyword">sql</span>(</span><br><span class="line">               s&quot;&quot;&quot;</span><br><span class="line">                 |drop table $&#123;hivetable&#125;</span><br><span class="line">                 |&quot;&quot;&quot;.stripMargin)</span><br><span class="line">            &#125;</span><br><span class="line">            spark.<span class="keyword">write</span>.partitionBy(hivepartition.split(&quot;,&quot;):_*).mode(mode).format(&quot;hive&quot;).saveAsTable(hivetable)</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            spark.<span class="keyword">write</span>.mode(mode).format(&quot;hive&quot;).saveAsTable(hivetable)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">false</span> =&gt; spark.<span class="keyword">write</span>.mode(mode).format(&quot;hive&quot;).insertInto(hivetable)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      spark.<span class="keyword">show</span>()</span><br><span class="line">      println(spark.count())</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def savetohivelocalsource =&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  def saveastextOrcsvOrjson(spark: DataFrame, string: <span class="keyword">Array</span>[String],map: Map[String,String])= &#123;</span><br><span class="line"></span><br><span class="line">      map.isEmpty match &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">true</span> =&gt; spark.<span class="keyword">write</span>.mode(string(<span class="number">2</span>)).format(string(<span class="number">1</span>)).save(string(<span class="number">3</span>))</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">false</span> =&gt; spark.<span class="keyword">write</span>.mode(string(<span class="number">2</span>)).<span class="keyword">options</span>(map).format(string(<span class="number">1</span>)).save(string(<span class="number">3</span>))</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="tool-sqlUtils"><a href="#tool-sqlUtils" class="headerlink" title="tool.sqlUtils"></a>tool.sqlUtils</h2><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">package tool</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.System</span><br><span class="line"><span class="keyword">import</span> java.util</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types.&#123;ArrayType, BooleanType, ByteType, CharType, DataType, DateType, DecimalType, DoubleType, FloatType, IntegerType, LongType, MapType, ShortType, StringType, StructField, StructType, TimestampType&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;DataFrame, SparkSession&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.functions._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sqlUtils</span> </span>&#123;</span><br><span class="line">  def hivesqlchoose(hiveconclumns:<span class="built_in">String</span>,hivetable:<span class="built_in">String</span>,hiveoptions:<span class="built_in">String</span>)=&#123;</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;select&quot;</span> + <span class="string">&quot; &quot;</span> + hiveconclumns + <span class="string">&quot; &quot;</span> + <span class="string">&quot;from&quot;</span> + <span class="string">&quot; &quot;</span> +  hiveconclumns + <span class="string">&quot; &quot;</span> + hiveoptions</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def descfunctionsql(string: <span class="built_in">String</span>)=&#123;</span><br><span class="line">    s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">       |desc function extended <span class="subst">$string</span></span></span><br><span class="line"><span class="string">       |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def checksql(spark:SparkSession, string: <span class="built_in">String</span>)=&#123;</span><br><span class="line">    spark.sql(string)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  def mkcreatesql(source:DataFrame,tablename:<span class="built_in">String</span>,fileformat:<span class="built_in">String</span>,otheroptions:<span class="built_in">String</span>*) =&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> arraycolunmstmp:Seq[StructField]= <span class="keyword">null</span></span><br><span class="line">    <span class="keyword">var</span> arrayconcloumnspartition:Seq[StructField] = <span class="keyword">null</span></span><br><span class="line">    <span class="keyword">if</span> (otheroptions.length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">      arraycolunmstmp=  source.schema.filter(x=&gt;&#123;</span><br><span class="line">        !otheroptions(<span class="number">1</span>).split(<span class="string">&quot;,&quot;</span>).contains(x.name)</span><br><span class="line">      &#125;)</span><br><span class="line">      arrayconcloumnspartition = source.schema.filter(x=&gt;&#123;</span><br><span class="line">        otheroptions(<span class="number">1</span>).split(<span class="string">&quot;,&quot;</span>).contains(x.name)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      arraycolunmstmp = source.schema.filter(x=&gt;&#123;</span><br><span class="line">        !otheroptions(<span class="number">0</span>).split(<span class="string">&quot;,&quot;</span>).contains(x.name)</span><br><span class="line">      &#125;)</span><br><span class="line">      arrayconcloumnspartition = source.schema.filter(x=&gt;&#123;</span><br><span class="line">        otheroptions(<span class="number">0</span>).split(<span class="string">&quot;,&quot;</span>).contains(x.name)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    def schematohivedatatype(rraycolunmstmp:Seq[StructField]) =&#123;</span><br><span class="line">      rraycolunmstmp.map(total =&gt; &#123;</span><br><span class="line">        println(total.name)</span><br><span class="line">        println(total.dataType)</span><br><span class="line">        val resultString1 = total.dataType match &#123;</span><br><span class="line">          <span class="keyword">case</span> StringType =&gt; <span class="string">&quot;string&quot;</span></span><br><span class="line">          <span class="keyword">case</span> BooleanType =&gt; <span class="string">&quot;boolean&quot;</span></span><br><span class="line">          <span class="keyword">case</span> TimestampType =&gt; <span class="string">&quot;timestamp&quot;</span></span><br><span class="line">          <span class="keyword">case</span> ByteType =&gt; <span class="string">&quot;byte&quot;</span></span><br><span class="line">          <span class="keyword">case</span> DoubleType =&gt; <span class="string">&quot;Double&quot;</span></span><br><span class="line">          <span class="keyword">case</span> FloatType =&gt; <span class="string">&quot;Float&quot;</span></span><br><span class="line">          <span class="keyword">case</span> IntegerType =&gt; <span class="string">&quot;Int&quot;</span></span><br><span class="line">          <span class="keyword">case</span> LongType =&gt; <span class="string">&quot;bigint&quot;</span></span><br><span class="line">          <span class="keyword">case</span> ShortType =&gt; <span class="string">&quot;smallint&quot;</span></span><br><span class="line">          <span class="keyword">case</span> DecimalType() =&gt; <span class="string">&quot;decimal(38,2)&quot;</span></span><br><span class="line">          <span class="keyword">case</span> DateType =&gt; <span class="string">&quot;datetime&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> ArrayType(BooleanType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;array&lt;boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> ArrayType(IntegerType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;array&lt;int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> ArrayType(TimestampType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;array&lt;timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> ArrayType(DoubleType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;array&lt;double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> ArrayType(FloatType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;array&lt;float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> ArrayType(LongType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;array&lt;bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> ArrayType(ShortType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;array&lt;smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> ArrayType(ByteType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;array&lt;byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> ArrayType(StringType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;array&lt;string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> ArrayType(DateType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;array&lt;datetime&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, StringType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, IntegerType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, StringType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, BooleanType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, BooleanType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,boolean&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, BooleanType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, StringType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, IntegerType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, FloatType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, LongType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, ShortType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, TimestampType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, ByteType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, DoubleType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, DateType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,datetime&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, ArrayType(BooleanType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,array&lt;boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, ArrayType(TimestampType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,array&lt;timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, ArrayType(DoubleType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,array&lt;double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, ArrayType(FloatType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,array&lt;Float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, ArrayType(LongType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,array&lt;bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, ArrayType(ShortType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,array&lt;smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, ArrayType(ByteType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,array&lt;byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, ArrayType(StringType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,array&lt;string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, ArrayType(IntegerType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,array&lt;int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, DateType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;boolean,array&lt;datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(BooleanType, StructType(fields: Array[StructField]), <span class="keyword">true</span>) =&gt; s<span class="string">&quot;map&lt;boolean,struct&lt;<span class="subst">$&#123;fields&#125;</span>&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, BooleanType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, StringType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, IntegerType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, FloatType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, LongType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, ShortType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, TimestampType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, ByteType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, DoubleType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, DateType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, ArrayType(BooleanType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,array&lt;boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, ArrayType(TimestampType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,array&lt;timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, ArrayType(DoubleType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,array&lt;double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, ArrayType(FloatType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,array&lt;Float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, ArrayType(LongType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,array&lt;bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, ArrayType(ShortType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,array&lt;smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, ArrayType(ByteType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,array&lt;byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, ArrayType(StringType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,array&lt;string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, ArrayType(IntegerType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,array&lt;int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, ArrayType(DateType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;int,array&lt;datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(IntegerType, StructType(fields: Array[StructField]), <span class="keyword">true</span>) =&gt; s<span class="string">&quot;map&lt;int,struct&lt;<span class="subst">$&#123;fields&#125;</span>&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, BooleanType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, StringType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, IntegerType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, FloatType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, LongType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, ShortType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, TimestampType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, ByteType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, DoubleType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, DateType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, ArrayType(BooleanType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,array&lt;boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, ArrayType(TimestampType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,array&lt;timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, ArrayType(DoubleType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,array&lt;double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, ArrayType(FloatType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,array&lt;Float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, ArrayType(LongType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,array&lt;bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, ArrayType(ShortType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,array&lt;smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, ArrayType(ByteType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,array&lt;byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, ArrayType(StringType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,array&lt;string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, ArrayType(IntegerType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,array&lt;int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, ArrayType(DateType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;float,array&lt;datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(FloatType, StructType(fields: Array[StructField]), <span class="keyword">true</span>) =&gt; s<span class="string">&quot;map&lt;float,struct&lt;<span class="subst">$&#123;fields&#125;</span>&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, BooleanType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, StringType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, IntegerType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, FloatType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, LongType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, ShortType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, TimestampType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, ByteType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, DoubleType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, DateType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, ArrayType(BooleanType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,array&lt;boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, ArrayType(TimestampType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,array&lt;timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, ArrayType(DoubleType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,array&lt;double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, ArrayType(FloatType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,array&lt;Float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, ArrayType(LongType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,array&lt;bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, ArrayType(ShortType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,array&lt;smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, ArrayType(ByteType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,array&lt;byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, ArrayType(StringType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,array&lt;string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, ArrayType(IntegerType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,array&lt;int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, ArrayType(DateType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;timestamp,array&lt;datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(TimestampType, StructType(fields: Array[StructField]), <span class="keyword">true</span>) =&gt; s<span class="string">&quot;map&lt;timestamp,struct&lt;<span class="subst">$&#123;fields&#125;</span>&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, BooleanType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, StringType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, IntegerType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, FloatType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, LongType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, ShortType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, TimestampType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, ByteType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, DoubleType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, DateType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, ArrayType(BooleanType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,array&lt;boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, ArrayType(TimestampType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,array&lt;timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, ArrayType(DoubleType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,array&lt;double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, ArrayType(FloatType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,array&lt;Float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, ArrayType(LongType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,array&lt;bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, ArrayType(ShortType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,array&lt;smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, ArrayType(ByteType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,array&lt;byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, ArrayType(StringType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,array&lt;string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, ArrayType(IntegerType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,array&lt;int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, ArrayType(DateType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;string,array&lt;datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(StringType, StructType(fields: Array[StructField]), <span class="keyword">true</span>) =&gt; s<span class="string">&quot;map&lt;string,struct&lt;<span class="subst">$&#123;fields&#125;</span>&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, BooleanType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, StringType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, IntegerType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, FloatType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, LongType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, ShortType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, TimestampType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, ByteType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, DoubleType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, DateType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, ArrayType(BooleanType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,array&lt;boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, ArrayType(TimestampType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,array&lt;timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, ArrayType(DoubleType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,array&lt;double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, ArrayType(FloatType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,array&lt;Float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, ArrayType(LongType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,array&lt;bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, ArrayType(ShortType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,array&lt;smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, ArrayType(ByteType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,array&lt;byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, ArrayType(StringType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,array&lt;string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, ArrayType(IntegerType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,array&lt;int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, ArrayType(DateType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;Double,array&lt;datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(DoubleType, StructType(fields: Array[StructField]), <span class="keyword">true</span>) =&gt; s<span class="string">&quot;map&lt;Double,struct&lt;<span class="subst">$&#123;fields&#125;</span>&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, BooleanType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, StringType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, IntegerType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, FloatType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, LongType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, ShortType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, TimestampType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, ByteType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, DoubleType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, DateType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, ArrayType(BooleanType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,array&lt;boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, ArrayType(TimestampType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,array&lt;timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, ArrayType(DoubleType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,array&lt;double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, ArrayType(FloatType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,array&lt;Float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, ArrayType(LongType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,array&lt;bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, ArrayType(ShortType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,array&lt;smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, ArrayType(ByteType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,array&lt;byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, ArrayType(StringType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,array&lt;string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, ArrayType(IntegerType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,array&lt;int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, ArrayType(DateType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;bigint,array&lt;datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(LongType, StructType(fields: Array[StructField]), <span class="keyword">true</span>) =&gt; s<span class="string">&quot;map&lt;bigint,struct&lt;<span class="subst">$&#123;fields&#125;</span>&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, BooleanType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, StringType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, IntegerType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, FloatType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, LongType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, ShortType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, TimestampType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, ByteType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, DoubleType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, DateType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, ArrayType(BooleanType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,array&lt;boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, ArrayType(TimestampType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,array&lt;timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, ArrayType(DoubleType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,array&lt;double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, ArrayType(FloatType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,array&lt;Float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, ArrayType(LongType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,array&lt;bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, ArrayType(ShortType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,array&lt;smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, ArrayType(ByteType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,array&lt;byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, ArrayType(StringType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,array&lt;string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, ArrayType(IntegerType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,array&lt;int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, ArrayType(DateType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;smallint,array&lt;datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ShortType, StructType(fields: Array[StructField]), <span class="keyword">true</span>) =&gt; s<span class="string">&quot;map&lt;smallint,struct&lt;<span class="subst">$&#123;fields&#125;</span>&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, BooleanType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, StringType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, IntegerType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, FloatType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, LongType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, ShortType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, TimestampType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, ByteType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, DoubleType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, DateType, <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, ArrayType(BooleanType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,array&lt;boolean&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, ArrayType(TimestampType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,array&lt;timestamp&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, ArrayType(DoubleType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,array&lt;double&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, ArrayType(FloatType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,array&lt;Float&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, ArrayType(LongType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,array&lt;bigint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, ArrayType(ShortType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,array&lt;smallint&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, ArrayType(ByteType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,array&lt;byte&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, ArrayType(StringType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,array&lt;string&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, ArrayType(IntegerType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,array&lt;int&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, ArrayType(DateType, <span class="keyword">true</span>), <span class="keyword">true</span>) =&gt; <span class="string">&quot;map&lt;byte,array&lt;datetime&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> MapType(ByteType, StructType(fields: Array[StructField]), <span class="keyword">true</span>) =&gt; s<span class="string">&quot;map&lt;byte,struct&lt;<span class="subst">$&#123;fields&#125;</span>&gt;&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> StructType(fields: Array[StructField]) =&gt; s<span class="string">&quot;struct&lt;<span class="subst">$&#123;fields&#125;</span>&gt;&quot;</span></span><br><span class="line">          <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;未知的数据类型&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        s<span class="string">&quot;<span class="subst">$&#123;total.name&#125;</span> <span class="subst">$&#123;resultString1&#125;</span>&quot;</span></span><br><span class="line">      &#125;).toArray</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    val arraycolunms = schematohivedatatype(arraycolunmstmp)</span><br><span class="line">    val partitionconclunms = schematohivedatatype(arrayconcloumnspartition)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fileformatted:<span class="built_in">String</span> = <span class="keyword">null</span></span><br><span class="line">    <span class="keyword">var</span> partitionstring:<span class="built_in">String</span> = <span class="keyword">null</span></span><br><span class="line">    fileformat match &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;text&quot;</span> =&gt;</span><br><span class="line">        makepartitionsql(otheroptions)</span><br><span class="line">        fileformatted = s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">          |row format delimited fields terminated by <span class="subst">$&#123;otheroptions(<span class="number">0</span>)&#125;</span></span></span><br><span class="line"><span class="string">          |stored as textfile</span></span><br><span class="line"><span class="string">          |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;orc&quot;</span> =&gt;</span><br><span class="line">        makepartitionsql(otheroptions)</span><br><span class="line">        fileformatted =<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">          |stored as orc</span></span><br><span class="line"><span class="string">          |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;parquet&quot;</span> =&gt;</span><br><span class="line">        makepartitionsql(otheroptions)</span><br><span class="line">        fileformatted =<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">          |stored as Parquet</span></span><br><span class="line"><span class="string">          |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;rcfile&quot;</span> =&gt;</span><br><span class="line">        makepartitionsql(otheroptions)</span><br><span class="line">        fileformatted =<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">          |stored as rcfile</span></span><br><span class="line"><span class="string">          |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;sequencefile&quot;</span> =&gt;</span><br><span class="line">        makepartitionsql(otheroptions)</span><br><span class="line">        fileformatted =<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">          |stored as sequencefile</span></span><br><span class="line"><span class="string">          |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;错误的存储格式&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def makepartitionsql(array: Seq[<span class="built_in">String</span>]) =&#123;</span><br><span class="line"></span><br><span class="line">      array.foreach(println(_))</span><br><span class="line">      println(array.length)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (otheroptions.isEmpty)&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---------------正在创建普通表&quot;</span>)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        partitionstring = fileformatted match &#123;</span><br><span class="line">          <span class="keyword">case</span> text =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">              val strings = array(<span class="number">1</span>).split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">              <span class="keyword">var</span> <span class="built_in">bool</span>:Boolean  = <span class="keyword">false</span></span><br><span class="line">              <span class="keyword">var</span> tmppartString:<span class="built_in">String</span> = <span class="keyword">null</span></span><br><span class="line">              <span class="keyword">if</span> (!partitionconclunms.isEmpty)&#123;</span><br><span class="line">                tmppartString = partitionconclunms.mkString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> (otheroptions.length != <span class="number">2</span>)&#123;</span><br><span class="line">                  tmppartString = tmppartString + <span class="string">&quot;,&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">for</span> (elem &lt;- strings)&#123;</span><br><span class="line">                <span class="built_in">bool</span> = source.columns.contains(elem)</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">bool</span>)&#123;</span><br><span class="line">                  <span class="keyword">if</span> (elem == strings(strings.length<span class="number">-1</span>))&#123;</span><br><span class="line">                    tmppartString = tmppartString + elem +<span class="string">&quot; &quot;</span>+ <span class="string">&quot;string&quot;</span></span><br><span class="line">                  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tmppartString = tmppartString + elem +<span class="string">&quot; &quot;</span>+ <span class="string">&quot;string&quot;</span> + <span class="string">&quot;,&quot;</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                |partitioned by (<span class="subst">$&#123;tmppartString&#125;</span>)</span></span><br><span class="line"><span class="string">                |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">case</span> _ =&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            val strings = array(<span class="number">0</span>).split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">            <span class="keyword">var</span> <span class="built_in">bool</span>:Boolean  = <span class="keyword">false</span></span><br><span class="line">            <span class="keyword">var</span> tmppartString:<span class="built_in">String</span> = <span class="keyword">null</span></span><br><span class="line">            <span class="keyword">if</span> (!partitionconclunms.isEmpty)&#123;</span><br><span class="line">              tmppartString = partitionconclunms.mkString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">              <span class="keyword">if</span> (otheroptions.length != <span class="number">2</span>)&#123;</span><br><span class="line">                tmppartString = tmppartString + <span class="string">&quot;,&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (elem &lt;- strings)&#123;</span><br><span class="line">              <span class="built_in">bool</span> = source.columns.contains(elem)</span><br><span class="line">              <span class="keyword">if</span> (!<span class="built_in">bool</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (elem == strings(strings.length<span class="number">-1</span>))&#123;</span><br><span class="line">                  tmppartString = tmppartString + elem +<span class="string">&quot; &quot;</span>+ <span class="string">&quot;string&quot;</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  tmppartString = tmppartString + elem +<span class="string">&quot; &quot;</span>+ <span class="string">&quot;string&quot;</span> + <span class="string">&quot;,&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">               |partitioned by (<span class="subst">$&#123;tmppartString&#125;</span>)</span></span><br><span class="line"><span class="string">               |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    val createsql =</span><br><span class="line">      s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |create table</span></span><br><span class="line"><span class="string">        |<span class="subst">$&#123;tablename&#125;</span></span></span><br><span class="line"><span class="string">        |(<span class="subst">$&#123;arraycolunms.mkString(<span class="string">&quot;,\n&quot;</span>)&#125;</span>)<span class="subst">$&#123;partitionstring&#125;</span><span class="subst">$&#123;fileformatted&#125;</span></span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">    println(createsql)</span><br><span class="line">    createsql</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def insertmake(sparkSession: SparkSession,dataFrame: DataFrame,tablename:<span class="built_in">String</span>,otheroptions:<span class="built_in">String</span>*) =&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> strings:Array[<span class="built_in">String</span>] = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">      dataFrame.selectExpr(sparkSession.table(tablename).columns:_*).createOrReplaceTempView(<span class="string">&quot;tmp&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// val partitionstring = sparkSession.table(tablename).columns.tail(sparkSession.table(tablename).columns.length - 2)</span></span><br><span class="line">    otheroptions.length match &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span> =&gt; &#123;</span><br><span class="line">        sparkSession.sql(</span><br><span class="line">          s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">             |insert overwrite <span class="subst">$&#123;tablename&#125;</span></span></span><br><span class="line"><span class="string">             |select * from tmp</span></span><br><span class="line"><span class="string">             |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (otheroptions.length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">          strings = otheroptions(<span class="number">1</span>).split(<span class="string">&quot;,&quot;</span>).filter(conclunms =&gt; &#123;</span><br><span class="line">            !dataFrame.columns.contains(conclunms)</span><br><span class="line">          &#125;)</span><br><span class="line">          val fuzhiarray:Array[<span class="built_in">String</span>] = util.Arrays.copyOfRange(otheroptions.toArray, <span class="number">2</span>, otheroptions.length)</span><br><span class="line">          fuzhiarray.foreach(println(_))</span><br><span class="line">          strings.isEmpty match &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">true</span> =&gt; &#123;</span><br><span class="line"></span><br><span class="line">          sparkSession.sql(</span><br><span class="line">          s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            |insert overwrite <span class="subst">$&#123;tablename&#125;</span> partition(<span class="subst">$&#123;otheroptions(<span class="number">1</span>).split(<span class="string">&quot;,&quot;</span>).map(conclunms =&gt; &#123;s<span class="string">&quot;<span class="subst">$&#123;conclunms&#125;</span>&quot;</span>&#125;</span>).mkString(&quot;,&quot;)&#125;)</span></span><br><span class="line"><span class="string">            |select * from tmp</span></span><br><span class="line"><span class="string">            |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">          &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">false</span> =&gt; &#123;</span><br><span class="line">              <span class="keyword">var</span> tmpdf:DataFrame = dataFrame</span><br><span class="line">              <span class="keyword">for</span> (i &lt;- <span class="number">0</span> to strings.length<span class="number">-1</span>)&#123;</span><br><span class="line">                tmpdf = tmpdf.withColumn(strings(i),lit(fuzhiarray(i)))</span><br><span class="line">              &#125;</span><br><span class="line">              tmpdf.<span class="keyword">show</span>()</span><br><span class="line">              tmpdf.printSchema()</span><br><span class="line">              tmpdf = tmpdf.selectExpr(sparkSession.table(tablename).columns: _*)</span><br><span class="line">              tmpdf.<span class="keyword">show</span>()</span><br><span class="line">              tmpdf.printSchema()</span><br><span class="line">              val str = tmpdf.columns.mkString(<span class="string">&quot;,\n&quot;</span>)</span><br><span class="line">              tmpdf.createOrReplaceTempView(<span class="string">&quot;smp&quot;</span>)</span><br><span class="line">              sparkSession.sql(</span><br><span class="line">                s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                   |insert overwrite <span class="subst">$&#123;tablename&#125;</span> partition(<span class="subst">$&#123;otheroptions(<span class="number">1</span>).split(<span class="string">&quot;,&quot;</span>).map(conclunms =&gt; &#123;s<span class="string">&quot;<span class="subst">$&#123;conclunms&#125;</span>&quot;</span>&#125;</span>).mkString(&quot;,&quot;)&#125;)</span></span><br><span class="line"><span class="string">                   |select <span class="subst">$&#123;str&#125;</span> from smp</span></span><br><span class="line"><span class="string">                   |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          strings = otheroptions(<span class="number">0</span>).split(<span class="string">&quot;,&quot;</span>).filter(conclunms =&gt; &#123;</span><br><span class="line">            !dataFrame.columns.contains(conclunms)</span><br><span class="line">          &#125;)</span><br><span class="line">          val fuzhiarray:Array[<span class="built_in">String</span>] = util.Arrays.copyOfRange(otheroptions.toArray, <span class="number">1</span>, otheroptions.length)</span><br><span class="line"></span><br><span class="line">          strings.isEmpty match &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">true</span> =&gt; &#123;</span><br><span class="line">              sparkSession.sql(</span><br><span class="line">                s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                   |insert overwrite <span class="subst">$&#123;tablename&#125;</span> partition(<span class="subst">$&#123;otheroptions(<span class="number">0</span>).split(<span class="string">&quot;,&quot;</span>).map(conclunms =&gt; &#123;s<span class="string">&quot;<span class="subst">$&#123;conclunms&#125;</span>&quot;</span>&#125;</span>).mkString(&quot;,&quot;)&#125;)</span></span><br><span class="line"><span class="string">                   |select * from tmp</span></span><br><span class="line"><span class="string">                   |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="keyword">false</span> =&gt; &#123;</span><br><span class="line">              <span class="keyword">var</span> tmpdf:DataFrame = dataFrame</span><br><span class="line"></span><br><span class="line">              <span class="keyword">for</span> (i &lt;- <span class="number">0</span> to strings.length<span class="number">-1</span>)&#123;</span><br><span class="line">                tmpdf = tmpdf.withColumn(strings(i),lit(fuzhiarray(i)))</span><br><span class="line">              &#125;</span><br><span class="line">              tmpdf.<span class="keyword">show</span>()</span><br><span class="line">              tmpdf.printSchema()</span><br><span class="line">              tmpdf = tmpdf.selectExpr(sparkSession.table(tablename).columns: _*)</span><br><span class="line">              val str = tmpdf.columns.mkString(<span class="string">&quot;,\n&quot;</span>)</span><br><span class="line">              tmpdf.createOrReplaceTempView(<span class="string">&quot;smp&quot;</span>)</span><br><span class="line">              sparkSession.sql(</span><br><span class="line">                s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                   |insert overwrite <span class="subst">$&#123;tablename&#125;</span> partition(<span class="subst">$&#123;otheroptions(<span class="number">0</span>).split(<span class="string">&quot;,&quot;</span>).map(conclunms =&gt; &#123;s<span class="string">&quot;<span class="subst">$&#123;conclunms&#125;</span>&quot;</span>&#125;</span>).mkString(&quot;,&quot;)&#125;)</span></span><br><span class="line"><span class="string">                   |select <span class="subst">$&#123;str&#125;</span> from smp</span></span><br><span class="line"><span class="string">                   |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def maskmake(sparkSession: SparkSession,tablename:<span class="built_in">String</span>)=&#123;</span><br><span class="line">    sparkSession.sql(</span><br><span class="line">      s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |msck repair table <span class="subst">$&#123;tablename&#125;</span></span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def changecolunms(sparkSession: SparkSession , dataFrame: DataFrame,tablename:<span class="built_in">String</span>) =&#123;</span><br><span class="line"></span><br><span class="line">    val strings = dataFrame.columns.filter(!sparkSession.table(tablename).columns.contains(_))</span><br><span class="line">    println(strings)</span><br><span class="line">    strings.foreach(println(_))</span><br><span class="line"></span><br><span class="line">    val str = strings.map(x =&gt; &#123;</span><br><span class="line">      s<span class="string">&quot;<span class="subst">$&#123;x&#125;</span> string&quot;</span></span><br><span class="line">    &#125;).mkString(<span class="string">&quot;,&quot;</span>)</span><br><span class="line"></span><br><span class="line">    val changesonslunms =</span><br><span class="line">      s<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        |alter table <span class="subst">$&#123;tablename&#125;</span> add COLUMNS (<span class="subst">$&#123;str&#125;</span>)</span></span><br><span class="line"><span class="string">        |&quot;&quot;&quot;</span>.stripMargin</span><br><span class="line">    println(changesonslunms)</span><br><span class="line">    sparkSession.sql(changesonslunms)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="tool-mysqlutils"><a href="#tool-mysqlutils" class="headerlink" title="tool.mysqlutils"></a>tool.mysqlutils</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package tool</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.&#123;<span class="keyword">Connection</span>, DriverManager&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> mysqlutils &#123;</span><br><span class="line"></span><br><span class="line">  def getconnect(string: String*)=&#123;</span><br><span class="line">    var <span class="keyword">connect</span>=<span class="keyword">null</span></span><br><span class="line">    try&#123;</span><br><span class="line">      <span class="keyword">Class</span>.forName(&quot;com.mysql.jdbc.Driver&quot;)</span><br><span class="line">      try &#123;</span><br><span class="line">        DriverManager.getConnection(string(<span class="number">0</span>),string(<span class="number">1</span>),string(<span class="number">2</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  def closeconnect(<span class="keyword">connect</span>:<span class="keyword">Connection</span>) =&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">connect</span> != <span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">connect</span>.<span class="keyword">close</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="tool-getmysqldf"><a href="#tool-getmysqldf" class="headerlink" title="tool.getmysqldf"></a>tool.getmysqldf</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package tool</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="keyword">sql</span>.SparkSession</span><br><span class="line"><span class="keyword">import</span> tool._</span><br><span class="line"><span class="keyword">class</span> getmysqldf &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  def getmysqldataframe(sparkSession: SparkSession,string: String*) =&#123;</span><br><span class="line"></span><br><span class="line">      val <span class="keyword">sql</span> = string(<span class="number">3</span>)</span><br><span class="line">      val frame = sparkSession.<span class="keyword">read</span>.format(&quot;jdbc&quot;).<span class="keyword">options</span>(Map(&quot;url&quot; -&gt; string(<span class="number">0</span>), &quot;user&quot; -&gt; string(<span class="number">1</span>), &quot;password&quot; -&gt; string(<span class="number">2</span>), &quot;dbtable&quot; -&gt; s&quot;$sql&quot;,&quot;driver&quot;-&gt;string(<span class="number">4</span>))).<span class="keyword">load</span>()</span><br><span class="line">      frame</span><br><span class="line">//    <span class="keyword">if</span> (string(<span class="number">3</span>).contains(&quot; &quot;)) &#123;</span><br><span class="line">//      val <span class="keyword">sql</span> = string(<span class="number">3</span>)</span><br><span class="line">//      val frame = sparkSession.<span class="keyword">read</span>.format(&quot;jdbc&quot;).<span class="keyword">options</span>(Map(&quot;url&quot; -&gt; string(<span class="number">0</span>), &quot;user&quot; -&gt; string(<span class="number">1</span>), &quot;password&quot; -&gt; string(<span class="number">2</span>), &quot;dbtable&quot; -&gt; s&quot;$sql&quot;)).<span class="keyword">load</span>()</span><br><span class="line">//      frame</span><br><span class="line">//    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">//      val frame = sparkSession.<span class="keyword">read</span>.format(&quot;jdbc&quot;).<span class="keyword">options</span>(Map(&quot;url&quot; -&gt; string(<span class="number">0</span>), &quot;user&quot; -&gt; string(<span class="number">1</span>), &quot;password&quot; -&gt; string(<span class="number">2</span>), &quot;dbtable&quot; -&gt; string(<span class="number">3</span>))).<span class="keyword">load</span>()</span><br><span class="line">//      frame</span><br><span class="line">//    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  def getmyqsldffromMap(sparkSession: SparkSession,map: Map[String,String])=&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sparkSession.<span class="keyword">read</span>.format(&quot;jdbc&quot;).<span class="keyword">options</span>(map).<span class="keyword">load</span>()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="tool-getjdbcconnect"><a href="#tool-getjdbcconnect" class="headerlink" title="tool.getjdbcconnect"></a>tool.getjdbcconnect</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package tool</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="keyword">sql</span>.&#123;<span class="keyword">Connection</span>, DriverManager&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> getjdbcconnect &#123;</span><br><span class="line"></span><br><span class="line">  def getconncet(drivername:String,url:String,<span class="keyword">user</span>:String,<span class="keyword">password</span>:String)=&#123;</span><br><span class="line">    <span class="keyword">Class</span>.forName(drivername)</span><br><span class="line">    val <span class="keyword">connection</span> = DriverManager.getConnection(url, <span class="keyword">user</span>, <span class="keyword">password</span>)</span><br><span class="line">    <span class="keyword">connection</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="tool-streamingcontext"><a href="#tool-streamingcontext" class="headerlink" title="tool.streamingcontext"></a>tool.streamingcontext</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">package tool</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.SparkConf</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;Seconds, StreamingContext&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> streamingcontext &#123;</span><br><span class="line"></span><br><span class="line">  def getstreamcotext(mode: String=&quot;local[4]&quot;,<span class="type">name</span>:String=&quot;example&quot;,<span class="keyword">checkpoint</span>:String=&quot;file:///D:\\checkpoint&quot;)=&#123;</span><br><span class="line">    val conf = <span class="built_in">new</span> SparkConf().setMaster(mode).setAppName(<span class="type">name</span>)</span><br><span class="line">    val ssc = <span class="built_in">new</span> StreamingContext(conf, Seconds(<span class="number">5</span>))</span><br><span class="line">    ssc.<span class="keyword">checkpoint</span>(<span class="keyword">checkpoint</span>)</span><br><span class="line">    ssc</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>11-19作业</title>
    <url>/2022/11/19/%E4%BD%9C%E4%B8%9A11-19/</url>
    <content><![CDATA[<h1 id="通过mapreduce的api统计emp表里的每个工作的人数"><a href="#通过mapreduce的api统计emp表里的每个工作的人数" class="headerlink" title="通过mapreduce的api统计emp表里的每个工作的人数"></a>通过mapreduce的api统计emp表里的每个工作的人数</h1><ul>
<li>数据源</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">7369</span>,SMITH,CLERK,<span class="number">7902</span>,<span class="number">1980</span>-<span class="number">12</span>-<span class="number">17</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">800</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7499</span>,ALLEN,SALESMAN,<span class="number">7698</span>,<span class="number">1981</span>-<span class="number">02</span>-<span class="number">20</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">1600</span>.<span class="number">00</span>,<span class="number">300</span>.<span class="number">00</span>,<span class="number">30</span></span><br><span class="line"><span class="attribute">7521</span>,WARD,SALESMAN,<span class="number">7698</span>,<span class="number">1981</span>-<span class="number">02</span>-<span class="number">22</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">1250</span>.<span class="number">00</span>,<span class="number">500</span>.<span class="number">00</span>,<span class="number">30</span></span><br><span class="line"><span class="attribute">7566</span>,JONES,MANAGER,<span class="number">7839</span>,<span class="number">1981</span>-<span class="number">04</span>-<span class="number">02</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">2975</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7654</span>,MARTIN,SALESMAN,<span class="number">7698</span>,<span class="number">1981</span>-<span class="number">09</span>-<span class="number">28</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">1250</span>.<span class="number">00</span>,<span class="number">1400</span>.<span class="number">00</span>,<span class="number">30</span></span><br><span class="line"><span class="attribute">7698</span>,BLAKE,MANAGER,<span class="number">7839</span>,<span class="number">1981</span>-<span class="number">05</span>-<span class="number">01</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">2850</span>.<span class="number">00</span>,,<span class="number">30</span></span><br><span class="line"><span class="attribute">7782</span>,CLARK,MANAGER,<span class="number">7839</span>,<span class="number">1981</span>-<span class="number">06</span>-<span class="number">09</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">2450</span>.<span class="number">00</span>,,<span class="number">10</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7839</span>,KING,PRESIDENT,,<span class="number">1981</span>-<span class="number">11</span>-<span class="number">17</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">5000</span>.<span class="number">00</span>,,<span class="number">10</span></span><br><span class="line"><span class="attribute">7844</span>,TURNER,SALESMAN,<span class="number">7698</span>,<span class="number">1981</span>-<span class="number">09</span>-<span class="number">08</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">1500</span>.<span class="number">00</span>,<span class="number">0</span>.<span class="number">00</span>,<span class="number">30</span></span><br><span class="line"><span class="attribute">7876</span>,ADAMS,CLERK,<span class="number">7788</span>,<span class="number">1983</span>-<span class="number">01</span>-<span class="number">12</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">1100</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7900</span>,lebulang,CLERK,<span class="number">7698</span>,<span class="number">1981</span>-<span class="number">12</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">950</span>.<span class="number">00</span>,,<span class="number">30</span></span><br><span class="line"><span class="attribute">7902</span>,FORD,ANALYST,<span class="number">7566</span>,<span class="number">1981</span>-<span class="number">12</span>-<span class="number">03</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7934</span>,MILLER,CLERK,<span class="number">7782</span>,<span class="number">1982</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">1300</span>.<span class="number">00</span>,,<span class="number">10</span></span><br><span class="line"><span class="attribute">7839</span>,KING,PRESIDENT,,<span class="number">1981</span>-<span class="number">11</span>-<span class="number">17</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">5000</span>.<span class="number">00</span>,,<span class="number">10</span></span><br><span class="line"><span class="attribute">7654</span>,MARTIN,SALESMAN,<span class="number">7698</span>,<span class="number">1981</span>-<span class="number">09</span>-<span class="number">28</span> <span class="number">13</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3200</span>.<span class="number">00</span>,<span class="number">1400</span>.<span class="number">00</span>,<span class="number">30</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"><span class="attribute">7788</span>,SCOTT,ANALYST,<span class="number">7566</span>,<span class="number">1982</span>-<span class="number">12</span>-<span class="number">09</span> <span class="number">14</span>:<span class="number">00</span>:<span class="number">00</span>,<span class="number">3000</span>.<span class="number">00</span>,,<span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>其中第二列就是工作</li>
<li>代码如下 ：</li>
</ul>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.<span class="property">example</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">conf</span>.<span class="property">Configuration</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">fs</span>.<span class="property">Path</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">io</span>.<span class="property">IntWritable</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">io</span>.<span class="property">Text</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">mapreduce</span>.<span class="property">Job</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">mapreduce</span>.<span class="property">Mapper</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">mapreduce</span>.<span class="property">Reducer</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">mapreduce</span>.<span class="property">lib</span>.<span class="property">input</span>.<span class="property">FileInputFormat</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">apache</span>.<span class="property">hadoop</span>.<span class="property">mapreduce</span>.<span class="property">lib</span>.<span class="property">output</span>.<span class="property">FileOutputFormat</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">io</span>.<span class="property">IOException</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">StringTokenizer</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author sxwang</span></span><br><span class="line"><span class="comment"> * 11 18 14:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * driver</span></span><br><span class="line"><span class="comment">     * @param args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="built_in">String</span>[] args) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">String</span> input=<span class="string">&quot;D://emp.txt&quot;</span>;</span><br><span class="line">        <span class="built_in">String</span> output=<span class="string">&quot;out&quot;</span>;</span><br><span class="line">        Configuration conf = <span class="keyword">new </span><span class="class title_">Configuration</span>();</span><br><span class="line">        <span class="comment">//0.todo... 删除目标路径</span></span><br><span class="line">        FileUtils.<span class="property">deletePath</span>(conf,output);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.设置 作业名称</span></span><br><span class="line">        Job job = Job.<span class="property">getInstance</span>(conf, <span class="string">&quot;WCAPP&quot;</span>);</span><br><span class="line">        <span class="comment">//2.设置map reduce 执行代码的主类</span></span><br><span class="line">        job.<span class="property">setJarByClass</span>(test.<span class="property">class</span>);</span><br><span class="line">        job.<span class="property">setMapperClass</span>(MyMapper.<span class="property">class</span>);</span><br><span class="line">        job.<span class="property">setReducerClass</span>(MyReducer.<span class="property">class</span>);</span><br><span class="line">        <span class="comment">//3.指定 oupput kv类型</span></span><br><span class="line">        job.<span class="property">setOutputKeyClass</span>(Text.<span class="property">class</span>);</span><br><span class="line">        job.<span class="property">setOutputValueClass</span>(IntWritable.<span class="property">class</span>);</span><br><span class="line">        <span class="comment">//4. 设置数据源路径 数据输出路径</span></span><br><span class="line">        FileInputFormat.<span class="property">addInputPath</span>(job, <span class="keyword">new </span><span class="class title_">Path</span>(input));</span><br><span class="line">        FileOutputFormat.<span class="property">setOutputPath</span>(job, <span class="keyword">new </span><span class="class title_">Path</span>(output));</span><br><span class="line">        <span class="comment">//5. 提交mr yarn</span></span><br><span class="line">        System.<span class="property">exit</span>(job.<span class="property">waitForCompletion</span>(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyMapper</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_ inherited__">Mapper</span>&lt;<span class="built_in">Object</span>, Text, Text, IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="built_in">map</span>(<span class="built_in">Object</span> <span class="built_in">key</span>, Text value, Context context) <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 1.按照分隔符 进行拆分 每个单词 ，每个单词赋值为1</span></span><br><span class="line"><span class="comment">             * (word ,1)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">String</span>[] words = value.<span class="property">toString</span>().<span class="property">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">String</span> word : words) &#123;</span><br><span class="line">                <span class="built_in">String</span>[] <span class="built_in">split</span> = word.<span class="property">split</span>(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                context.<span class="property">write</span>(<span class="keyword">new </span><span class="class title_">Text</span>(<span class="built_in">split</span>[<span class="number">2</span>]) ,<span class="keyword">new </span><span class="class title_">IntWritable</span>(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * reducer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyReducer</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_ inherited__">Reducer</span>&lt;Text,IntWritable,Text,IntWritable&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  (word ,1)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  (word,&lt;1,1,1,1&gt;)</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  1.聚合value</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  2.写出去</span></span><br><span class="line"><span class="comment">         *  (word ,3)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">reduce</span>(Text <span class="built_in">key</span>, Iterable&lt;IntWritable&gt; values, Context context) <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">                sum +=Integer.<span class="property">parseInt</span>(value.<span class="property">toString</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            context.<span class="property">write</span>(<span class="built_in">key</span>,<span class="keyword">new </span><span class="class title_">IntWritable</span>(sum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>基本概念 ： 把数据先通过map进行etl，然后通过redurce进行数据的整合之类的</li>
<li>最后输出</li>
</ul>
]]></content>
      <categories>
        <category>作业</category>
      </categories>
      <tags>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>作业10-21</title>
    <url>/2022/10/21/%E4%BD%9C%E4%B8%9A10-21/</url>
    <content><![CDATA[<h1 id="3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称"><a href="#3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称" class="headerlink" title="3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称"></a>3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称</h1><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="keyword">File</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> 作业.<span class="keyword">file</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="keyword">file</span>过滤 &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">File</span> M = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;D:\\&quot;</span> , <span class="string">&quot;try&quot;</span>);</span><br><span class="line">		chakan(M);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> chakan(<span class="keyword">File</span> M) &#123;</span><br><span class="line">		<span class="keyword">File</span>[] k = M.listFiles();</span><br><span class="line">		System.out.<span class="keyword">println</span>(k);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k.length; i++) &#123;</span><br><span class="line">			<span class="keyword">File</span>[] t = k[i].listFiles();</span><br><span class="line">			<span class="keyword">if</span>(t == <span class="keyword">null</span>) &#123;</span><br><span class="line">				String g =  k[i].getName();</span><br><span class="line">				String d = g.substring(k[i].getName().lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">				<span class="keyword">if</span>(d.equals(<span class="string">&quot;.java&quot;</span>)) &#123;</span><br><span class="line">					System.out.<span class="keyword">println</span>(g.substring(<span class="number">0</span>, k[i].getName().lastIndexOf(<span class="string">&quot;.&quot;</span>)));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				chakan(k[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>重点字符串的相等要用equals，递归</li>
</ul>
<h1 id="判断指定路径下的所有子文件或是目录，如果是子文件则全部删除"><a href="#判断指定路径下的所有子文件或是目录，如果是子文件则全部删除" class="headerlink" title="判断指定路径下的所有子文件或是目录，如果是子文件则全部删除"></a>判断指定路径下的所有子文件或是目录，如果是子文件则全部删除</h1><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public static void SHANCHU(File k) &#123;</span><br><span class="line">File[] ds <span class="operator">=</span>	k.listFiles()<span class="comment">; </span></span><br><span class="line">for (int i <span class="operator">=</span> <span class="number">0</span><span class="comment">; i &lt; ds.length ; i++ ) &#123;</span></span><br><span class="line">	File[] h <span class="operator">=</span> ds[i].listFiles()<span class="comment">;</span></span><br><span class="line">	if(h <span class="operator">=</span><span class="operator">=</span> null) &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;这个是个文件&quot;</span>)<span class="comment">;</span></span><br><span class="line">		ds[i].delete()<span class="comment">;</span></span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		k.delete()<span class="comment">;</span></span><br><span class="line">		SHANCHU(ds[i])<span class="comment">;</span></span><br><span class="line">			&#125;</span><br><span class="line">	k.delete()<span class="comment">;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>重点：递归</li>
</ul>
<h1 id="5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D-102班级-javaSE作业）"><a href="#5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D-102班级-javaSE作业）" class="headerlink" title="5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D:\102班级\javaSE作业）"></a>5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D:\102班级\javaSE作业）</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">File G = new File(<span class="string">&quot;D:<span class="subst">\\</span><span class="subst">\\</span>102班级<span class="subst">\\</span><span class="subst">\\</span>javaSE作业&quot;</span>);</span><br><span class="line">	</span><br><span class="line">G.mkdirs();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="从磁盘读取一个文件到内存中，再打印到控制台"><a href="#从磁盘读取一个文件到内存中，再打印到控制台" class="headerlink" title="从磁盘读取一个文件到内存中，再打印到控制台"></a>从磁盘读取一个文件到内存中，再打印到控制台</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 项目实训;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lkdjfslasfj</span> &#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">	</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:/a.txt&quot;</span>);</span><br><span class="line"><span class="comment">//				while(is.available() != 0) &#123;</span></span><br><span class="line"><span class="comment">//					System.out.println((char)is.read()); // 默认一次只读一个字符</span></span><br><span class="line"><span class="comment">//				&#125;</span></span><br><span class="line">		</span><br><span class="line">			<span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>]; <span class="comment">// 通过设置缓冲区进行扩展一次可读的字符数量，如果是字符型，那这个byte要变char</span></span><br><span class="line">			<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 设置个长度</span></span><br><span class="line">			<span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>) <span class="comment">// 判断我是不是超出缓冲区的限定，如果超出，就只读取超出的部分</span></span><br><span class="line">			&#123;</span><br><span class="line">				System.out.print(<span class="keyword">new</span> <span class="title class_">String</span>(buffer , <span class="number">0</span> , len)); </span><br><span class="line">			&#125;</span><br><span class="line">			is.close();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="模拟用户登录："><a href="#模拟用户登录：" class="headerlink" title="模拟用户登录："></a>模拟用户登录：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">login</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		<span class="type">File</span> <span class="variable">basic</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://&quot;</span> , <span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(basic);</span><br><span class="line">			<span class="type">Reader</span> <span class="variable">re</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in , <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">			) &#123;</span><br><span class="line">			<span class="type">Map</span> <span class="variable">db</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">			<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(re);</span><br><span class="line">			<span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">usertotal</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">			String[] username = usertotal.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">//			System.out.println(username[0]);</span></span><br><span class="line"><span class="comment">//			System.out.println(username[1]);</span></span><br><span class="line">			db.put(username[<span class="number">0</span>],username[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//			System.out.println(db);</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="type">Scanner</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">			String usename;</span><br><span class="line">			String password;</span><br><span class="line">			<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;请输入账号：&quot;</span>);</span><br><span class="line">			 usename = name.nextLine();</span><br><span class="line">			<span class="keyword">if</span>(usename == <span class="literal">null</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;姓名不能为空&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">			<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">				 password = name.nextLine();</span><br><span class="line">					</span><br><span class="line">				<span class="keyword">if</span>(password == <span class="literal">null</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">				</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(password.equals(db.get(usename))) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;输入错误请重新输入&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> 作业;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">login</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">		<span class="type">File</span> <span class="variable">basic</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://&quot;</span> , <span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(basic);</span><br><span class="line">			<span class="type">Reader</span> <span class="variable">re</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in , <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">			) &#123;</span><br><span class="line">			<span class="type">Map</span> <span class="variable">db</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">			<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(re);</span><br><span class="line">			<span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">			<span class="type">String</span> <span class="variable">usertotal</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">			String[] username = usertotal.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">//			System.out.println(username[0]);</span></span><br><span class="line"><span class="comment">//			System.out.println(username[1]);</span></span><br><span class="line">			db.put(username[<span class="number">0</span>],username[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//			System.out.println(db);</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="type">Scanner</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">			String usename;</span><br><span class="line">			String password;</span><br><span class="line">			<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">			<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;请输入账号：&quot;</span>);</span><br><span class="line">			 usename = name.nextLine();</span><br><span class="line">			<span class="keyword">if</span>(usename == <span class="literal">null</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;姓名不能为空&quot;</span>);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">			<span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">				 password = name.nextLine();</span><br><span class="line">					</span><br><span class="line">				<span class="keyword">if</span>(password == <span class="literal">null</span>) &#123;</span><br><span class="line">					System.out.println(<span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">				</span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(password.equals(db.get(usename))) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">				System.out.println(<span class="string">&quot;输入1进行修改密码&quot;</span>);</span><br><span class="line">				<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> Integer.parseInt(name.nextLine());</span><br><span class="line">				<span class="keyword">if</span>(m == <span class="number">1</span>) &#123;</span><br><span class="line">					<span class="keyword">if</span>(db.containsKey(usename)) &#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;请输入更改之后的密码&quot;</span>);</span><br><span class="line">						<span class="type">String</span> <span class="variable">newpassword</span> <span class="operator">=</span> name.nextLine();</span><br><span class="line">						db.put(usename, newpassword);</span><br><span class="line">					&#125; </span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;输入错误请重新输入&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e1.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>作业</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透</title>
    <url>/2022/11/19/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>内网穿透简单来说就是让我们处于局域网的机器或者本地的项目，可以在外部的公网访问</li>
</ul>
<h3 id="常见的内网穿透工具"><a href="#常见的内网穿透工具" class="headerlink" title="常见的内网穿透工具"></a>常见的内网穿透工具</h3><ul>
<li>natapp网站</li>
<li>frp</li>
<li>ngrok</li>
<li>蜻蜓映射</li>
<li>ssh命令</li>
</ul>
<h3 id="natapp"><a href="#natapp" class="headerlink" title="natapp"></a>natapp</h3><ul>
<li>natapp网站 ： 注册账号之后会免费给你送一条隧道，不过临时用可以，不能长久用，</li>
<li>因为隧道名字会被强制更换</li>
<li>而vip隧道就不会强制更换</li>
</ul>
<h3 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h3><ul>
<li>frp是专业的反向代理工具</li>
<li><code>https:github.com/fatedier/frp</code></li>
<li>其中部署也非常简单 ：</li>
<li>frps在云服务器上</li>
<li>而要进行内网穿透的机器运行frpc</li>
<li>再改改配置就ok了</li>
</ul>
<h3 id="ngrok"><a href="#ngrok" class="headerlink" title="ngrok"></a>ngrok</h3><ul>
<li>属于专门做内网穿透的平台，以前是免费的不过最近好像收费了</li>
<li>注册之后我们就可以根据平台上的帮助文档进行配置，</li>
</ul>
<h3 id="蜻蜓映射"><a href="#蜻蜓映射" class="headerlink" title="蜻蜓映射"></a>蜻蜓映射</h3><ul>
<li>同上</li>
</ul>
<h3 id="ssh命令"><a href="#ssh命令" class="headerlink" title="ssh命令"></a>ssh命令</h3><ul>
<li>我们可以通过 <code>ssh -R 80:localhost:80 xxxxx@localhost.run</code></li>
<li>进行反向映射端口</li>
<li>xxxx是远程云主机</li>
<li>前面的80是云主机的端口</li>
<li>后面的是本地的端口</li>
<li>这个命令是ssh自带的</li>
</ul>
]]></content>
      <categories>
        <category>杂货技术栈</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>签到的制作（后端＋前端）</title>
    <url>/2022/10/19/%E5%88%B6%E4%BD%9C%E7%AD%BE%E5%88%B0/</url>
    <content><![CDATA[<h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><ul>
<li>Centos7.8</li>
<li>在虚拟机安装好redis，并且可以成功ping通</li>
<li>使用jdk 11</li>
<li>使用idea 2019.3</li>
<li>准备好post man</li>
<li>准备好可以观察redis的软件，比如redisDespoketManger等</li>
</ul>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ul>
<li>先打开虚拟机，并开启redis</li>
<li>然后打开idea，创建springboot项目，在插件列表选择</li>
<li>spring web</li>
<li>spring Data Redis</li>
<li>Lombok</li>
<li>然后在pom文件里添加hutool插件（我们要用到的）</li>
<li>接下来修改application文件，我习惯把他的后缀改成yml</li>
<li>然后在application文件里添加</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">       <span class="comment"># host: 192.168.1.121 #ip地址</span></span><br><span class="line">        <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.41</span><span class="number">.110</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">6379</span> <span class="comment">#端口</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">liuzihan</span> <span class="comment">#密码</span></span><br><span class="line">        <span class="attr">timeout:</span> <span class="number">3000</span> <span class="comment">#超时时间</span></span><br><span class="line">        <span class="attr">database:</span> <span class="number">0</span> <span class="comment">#第几号数据库</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">9999</span> <span class="comment">#这个是程序启动之后的端口号，也就是tomcat插件的端口号</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ip地址是虚拟机，或者局域网内真实机的ip</li>
</ul>
<h1 id="思考编写方式"><a href="#思考编写方式" class="headerlink" title="思考编写方式"></a>思考编写方式</h1><ul>
<li>我的编写思路是通过redis里的bitMap进行日期的存取</li>
<li>首先在SignDemoApplication的包内创建几个包，分别代表客户端，服务端以及自动启动还有配置文件包，</li>
<li>首先确定的是浏览器页面，原因很简单，网页有强大的动态效果，以及平台的适配能力，而且很美观，比较与传统的GUI要好不少</li>
<li>我的文件层级目录如下</li>
<li><img src="/%5B!%5Bx4XBBd.jpg%5D(https:/s1.ax1x.com/2022/10/29/x4XBBd.jpg)%5D(https:/imgse.com/i/x4XBBd)"></li>
</ul>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul>
<li>创建config包，然后在包里创建RedisTemplateConfiguration.class</li>
<li>然后写入</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.<span class="property">fasterxml</span>.<span class="property">jackson</span>.<span class="property">annotation</span>.<span class="property">JsonAutoDetect</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">fasterxml</span>.<span class="property">jackson</span>.<span class="property">annotation</span>.<span class="property">PropertyAccessor</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">fasterxml</span>.<span class="property">jackson</span>.<span class="property">databind</span>.<span class="property">ObjectMapper</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">context</span>.<span class="property">annotation</span>.<span class="property">Bean</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">context</span>.<span class="property">annotation</span>.<span class="property">Configuration</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">data</span>.<span class="property">redis</span>.<span class="property">connection</span>.<span class="property">RedisConnectionFactory</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">data</span>.<span class="property">redis</span>.<span class="property">core</span>.<span class="property">RedisTemplate</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">data</span>.<span class="property">redis</span>.<span class="property">serializer</span>.<span class="property">GenericJackson2JsonRedisSerializer</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">data</span>.<span class="property">redis</span>.<span class="property">serializer</span>.<span class="property">Jackson2JsonRedisSerializer</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">data</span>.<span class="property">redis</span>.<span class="property">serializer</span>.<span class="property">RedisSerializer</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">data</span>.<span class="property">redis</span>.<span class="property">serializer</span>.<span class="property">StringRedisSerializer</span>;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;ClassName: RedisConfigure&lt;/p &gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Description: redisTemplate自定义序列化配置，更改其默认序列化器&lt;/p &gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Date: 2021/10/23&lt;/p &gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisTemplateConfiguration</span> &#123;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">RedisTemplate</span>&lt;<span class="title class_">String</span>,<span class="title class_">Object</span>&gt; <span class="title function_">redisTemplate</span>(<span class="params">RedisConnectionFactory redisConnectionFactory</span>)&#123;</span><br><span class="line">	</span><br><span class="line">        <span class="title class_">RedisTemplate</span>&lt;<span class="title class_">String</span>,<span class="title class_">Object</span>&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 参照StringRedisTemplate内部实现指定序列化器</span></span><br><span class="line">        redisTemplate.<span class="title function_">setConnectionFactory</span>(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//使用 jackson2jasonRedisSerialize替换默认序列化</span></span><br><span class="line">        <span class="title class_">Jackson2JsonRedisSerializer</span> jackson2JsonRedisSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(<span class="title class_">Object</span>.<span class="property">class</span>);</span><br><span class="line">        <span class="title class_">ObjectMapper</span> objectMapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.<span class="title function_">setVisibility</span>(<span class="title class_">PropertyAccessor</span>.<span class="property">ALL</span> , <span class="title class_">JsonAutoDetect</span>.<span class="property">Visibility</span>.<span class="property">ANY</span>);</span><br><span class="line">        jackson2JsonRedisSerializer.<span class="title function_">setObjectMapper</span>(objectMapper);</span><br><span class="line">        <span class="comment">//为String类型 key/value 设置序列化</span></span><br><span class="line">        redisTemplate.<span class="title function_">setKeySerializer</span>(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.<span class="title function_">setValueSerializer</span>(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//为hash ；类型 key、value 设置序列化</span></span><br><span class="line">        redisTemplate.<span class="title function_">setHashKeySerializer</span>(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.<span class="title function_">setHashValueSerializer</span>(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.<span class="title function_">afterPropertiesSet</span>();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">	</span><br><span class="line">       <span class="comment">/* redisTemplate.setKeySerializer(keySerializer());</span></span><br><span class="line"><span class="comment">        redisTemplate.setHashKeySerializer(keySerializer());</span></span><br><span class="line"><span class="comment">        redisTemplate.setValueSerializer(valueSerializer());</span></span><br><span class="line"><span class="comment">        redisTemplate.setHashValueSerializer(valueSerializer());</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">        return redisTemplate;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//使用Jackson序列化器，key使用字符串</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">RedisSerializer</span>&lt;<span class="title class_">String</span>&gt; <span class="title function_">keySerializer</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//使用Jackson序列化器，value使用Object</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">RedisSerializer</span>&lt;<span class="title class_">Object</span>&gt; <span class="title function_">valueSerializer</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这个就是个简单的redis自动序列化类，网上一抓一大把</li>
</ul>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ul>
<li>客户端是我们主要想写的地方，就是实现签到，以及获取mac地址等功能的地方</li>
<li>于是我们创建Severdemo包</li>
<li>在这个包下，写入SignSeverce类写上</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line">import cn.hutool.core.date.DateUtil;</span><br><span class="line">import cn.hutool.core.date.LocalDateTimeUtil;</span><br><span class="line">import cn.hutool.core.net.NetUtil;</span><br><span class="line">import cn.hutool.core.util.StrUtil;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">import org.springframework.data.redis.connection.BitFieldSubCommands;</span><br><span class="line">import org.springframework.data.redis.core.RedisCallback;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">	</span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line">import java.util.*;</span><br><span class="line">	</span><br><span class="line">@Service</span><br><span class="line">@Mapper</span><br><span class="line">public <span class="keyword">class</span> SignService &#123;</span><br><span class="line">	</span><br><span class="line">    @Resource</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *用户签到可以补签</span></span><br><span class="line"><span class="comment">     * @param UserId</span></span><br><span class="line"><span class="comment">     * @param DataStr</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    public Map&lt;String , Object&gt; <span class="keyword">do</span><span class="constructor">Sign(String UserId , String DataStr)</span>&#123;</span><br><span class="line">	</span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inetAddress = <span class="module-access"><span class="module"><span class="identifier">InetAddress</span>.</span></span>get<span class="constructor">LocalHost()</span>;</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span></span><br><span class="line">        String localMacAddress2 = <span class="module-access"><span class="module"><span class="identifier">NetUtil</span>.</span></span>get<span class="constructor">MacAddress(<span class="params">inetAddress</span>)</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">        Map&lt;String , Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">// 判断MAc地址和redis中的是不是一样</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + UserId + <span class="string">&quot;:*&quot;</span>)</span>).equals(<span class="string">&quot;[]&quot;</span>))&#123;</span><br><span class="line">	</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String MAc = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + UserId + <span class="string">&quot;:*&quot;</span>)</span>);</span><br><span class="line">            String<span class="literal">[]</span> split = <span class="module-access"><span class="module"><span class="identifier">MAc</span>.</span></span>split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (localMacAddress2.equals(split<span class="literal">[<span class="number">2</span>]</span>))&#123;</span><br><span class="line">	</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.put(<span class="string">&quot;code&quot;</span> , <span class="number">404</span>);</span><br><span class="line">                result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;你不是在同一台电脑上进行的签到，请联系管理员进行修复&quot;</span>);</span><br><span class="line">                return  result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		 <span class="comment">// 获取日期</span></span><br><span class="line">        Date  date = get<span class="constructor">Date(DataStr)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">		<span class="comment">// 判断获取到了补签权限吗</span></span><br><span class="line">        <span class="keyword">if</span> (DataStr != null)&#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + UserId + <span class="string">&quot;:*&quot;</span>)</span>).equals(<span class="string">&quot;[]&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              String MAc = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + UserId + <span class="string">&quot;:*&quot;</span>)</span>);</span><br><span class="line">              String<span class="literal">[]</span> split = <span class="module-access"><span class="module"><span class="identifier">MAc</span>.</span></span>split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">              <span class="keyword">if</span> (<span class="string">&quot;0&quot;</span>.equals(split<span class="literal">[<span class="number">3</span>]</span>)) &#123;</span><br><span class="line">                  result.put(<span class="string">&quot;code&quot;</span>, <span class="number">407</span>);</span><br><span class="line">                  result.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;你未经过老师同意无法补签&quot;</span>);</span><br><span class="line">                  return result;</span><br><span class="line">              &#125; <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                  <span class="comment">// 获取日期</span></span><br><span class="line"></span><br><span class="line">                  <span class="comment">// 获取日期对应的天数</span></span><br><span class="line">                  <span class="built_in">int</span> day = <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>day<span class="constructor">OfMonth(<span class="params">date</span>)</span> - <span class="number">1</span>;</span><br><span class="line">                  <span class="comment">// 构建redis 的 key</span></span><br><span class="line">                  String signkey = build<span class="constructor">SignKEy1(UserId,<span class="params">date</span> , <span class="params">localMacAddress2</span>)</span>;</span><br><span class="line">                  <span class="comment">// 查看日期是不是签到</span></span><br><span class="line">                  boolean isSigned = redisTemplate.ops<span class="constructor">ForValue()</span>.get<span class="constructor">Bit(<span class="params">signkey</span> , <span class="params">day</span>)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span>(isSigned)&#123;</span><br><span class="line">                      result.put(<span class="string">&quot;code&quot;</span> , <span class="number">400</span>);</span><br><span class="line">                      result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;当前日期已完成签到，无需再签&quot;</span>);</span><br><span class="line">                      return  result;</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="comment">// 签到</span></span><br><span class="line">                  redisTemplate.ops<span class="constructor">ForValue()</span>.set<span class="constructor">Bit(<span class="params">signkey</span> , <span class="params">day</span> , <span class="params">true</span>)</span>;</span><br><span class="line">                  <span class="comment">//根据当前日期获取签到的天数</span></span><br><span class="line">                  Date today = <span class="keyword">new</span> <span class="constructor">Date()</span>;</span><br><span class="line">                  <span class="comment">//统计总次数</span></span><br><span class="line">                  long count = get<span class="constructor">SumSignCount(UserId , <span class="params">today</span>)</span>;</span><br><span class="line">                  <span class="comment">//统计连续次数</span></span><br><span class="line">                  <span class="built_in">int</span> continuous = get<span class="constructor">ContinusSignCount(UserId , <span class="params">today</span>)</span>;</span><br><span class="line"></span><br><span class="line">                  result.put(<span class="string">&quot;code&quot;</span> , <span class="number">200</span>);</span><br><span class="line">                  result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;签到成功&quot;</span>);</span><br><span class="line">                  result.put(<span class="string">&quot;continuous&quot;</span> , continuous);</span><br><span class="line">                  result.put(<span class="string">&quot;count&quot;</span> , count);</span><br><span class="line"></span><br><span class="line">                  String basicname = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> +UserId+ <span class="string">&quot;:*&quot;</span>)</span>);</span><br><span class="line">                  String changgename = basicname.substring(basicname.index<span class="constructor">Of(<span class="string">&quot;[&quot;</span>)</span>+<span class="number">1</span> , basicname.index<span class="constructor">Of(<span class="string">&quot;]&quot;</span>)</span>);</span><br><span class="line">                  String<span class="literal">[]</span> namebasic  =  changgename.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                  String newname = namebasic<span class="literal">[<span class="number">0</span>]</span> + <span class="string">&quot;:&quot;</span> + namebasic<span class="literal">[<span class="number">1</span>]</span> + <span class="string">&quot;:&quot;</span> + namebasic<span class="literal">[<span class="number">2</span>]</span> + <span class="string">&quot;:0:&quot;</span> + namebasic<span class="literal">[<span class="number">4</span>]</span>;</span><br><span class="line">                  redisTemplate.rename(changgename , newname);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  return  result;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取日期对应的天数</span></span><br><span class="line">        <span class="built_in">int</span> day = <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>day<span class="constructor">OfMonth(<span class="params">date</span>)</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 构建redis 的 key</span></span><br><span class="line">        String signkey = build<span class="constructor">SignKEy(UserId,<span class="params">date</span> , <span class="params">localMacAddress2</span>)</span>;</span><br><span class="line">        <span class="comment">// 查看日期是不是签到</span></span><br><span class="line">        boolean isSigned = redisTemplate.ops<span class="constructor">ForValue()</span>.get<span class="constructor">Bit(<span class="params">signkey</span> , <span class="params">day</span>)</span>;</span><br><span class="line">	</span><br><span class="line">		<span class="comment">// 判断今天是不是已经签到了</span></span><br><span class="line">        <span class="keyword">if</span>(isSigned)&#123;</span><br><span class="line">            result.put(<span class="string">&quot;code&quot;</span> , <span class="number">400</span>);</span><br><span class="line">            result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;当前日期已完成签到，无需再签&quot;</span>);</span><br><span class="line">            return  result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 签到</span></span><br><span class="line">        redisTemplate.ops<span class="constructor">ForValue()</span>.set<span class="constructor">Bit(<span class="params">signkey</span> , <span class="params">day</span> , <span class="params">true</span>)</span>;</span><br><span class="line">        <span class="comment">//根据当前日期获取签到的天数</span></span><br><span class="line">        Date today = <span class="keyword">new</span> <span class="constructor">Date()</span>;</span><br><span class="line">        <span class="comment">//统计总次数</span></span><br><span class="line">        long count = get<span class="constructor">SumSignCount(UserId , <span class="params">today</span>)</span>;</span><br><span class="line">        <span class="comment">//统计连续次数</span></span><br><span class="line">        <span class="built_in">int</span> continuous = get<span class="constructor">ContinusSignCount(UserId , <span class="params">today</span>)</span>;</span><br><span class="line">	</span><br><span class="line">        result.put(<span class="string">&quot;code&quot;</span> , <span class="number">200</span>);</span><br><span class="line">        result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;签到成功&quot;</span>);</span><br><span class="line">        result.put(<span class="string">&quot;continuous&quot;</span> , continuous);</span><br><span class="line">        result.put(<span class="string">&quot;count&quot;</span> , count);</span><br><span class="line">	</span><br><span class="line">		<span class="comment">// 更改补签权限</span></span><br><span class="line">        String basicname = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> +UserId+ <span class="string">&quot;:*&quot;</span>)</span>);</span><br><span class="line">        String changgename = basicname.substring(basicname.index<span class="constructor">Of(<span class="string">&quot;[&quot;</span>)</span>+<span class="number">1</span> , basicname.index<span class="constructor">Of(<span class="string">&quot;]&quot;</span>)</span>);</span><br><span class="line">        String<span class="literal">[]</span> namebasic  =  changgename.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        String newname = namebasic<span class="literal">[<span class="number">0</span>]</span> + <span class="string">&quot;:&quot;</span> + namebasic<span class="literal">[<span class="number">1</span>]</span> + <span class="string">&quot;:&quot;</span> + namebasic<span class="literal">[<span class="number">2</span>]</span> + <span class="string">&quot;:0:&quot;</span> + namebasic<span class="literal">[<span class="number">4</span>]</span>;</span><br><span class="line">        redisTemplate.rename(changgename , newname);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">        return  result;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取用户当天签到的情况</span></span><br><span class="line">    public Map&lt;String , Object&gt;get<span class="constructor">SignByDate(String UserId , String DataStr)</span>&#123;</span><br><span class="line">	</span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inetAddress = <span class="module-access"><span class="module"><span class="identifier">InetAddress</span>.</span></span>get<span class="constructor">LocalHost()</span>;</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span></span><br><span class="line">        String localMacAddress2 = <span class="module-access"><span class="module"><span class="identifier">NetUtil</span>.</span></span>get<span class="constructor">MacAddress(<span class="params">inetAddress</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;localMacAddress2 = &quot;</span> + localMacAddress2);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">        Map&lt;String , Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">        <span class="keyword">if</span> (<span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + UserId + <span class="string">&quot;:*&quot;</span>)</span>).equals(<span class="string">&quot;[]&quot;</span>))&#123;</span><br><span class="line">	</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String MAc = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + UserId + <span class="string">&quot;:*&quot;</span>)</span>);</span><br><span class="line">            String<span class="literal">[]</span> split = <span class="module-access"><span class="module"><span class="identifier">MAc</span>.</span></span>split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (localMacAddress2.equals(split<span class="literal">[<span class="number">2</span>]</span>))&#123;</span><br><span class="line">                <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(split<span class="literal">[<span class="number">2</span>]</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.put(<span class="string">&quot;code&quot;</span> , <span class="number">404</span>);</span><br><span class="line">                result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;你不是在同一台电脑上进行的签到，请联系管理员进行修复&quot;</span>);</span><br><span class="line">                return  result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	</span><br><span class="line">     </span><br><span class="line">        Date date = get<span class="constructor">Date(DataStr)</span>;</span><br><span class="line">        <span class="comment">// 获取日期对应的天数</span></span><br><span class="line">        <span class="built_in">int</span> day = <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>day<span class="constructor">OfMonth(<span class="params">date</span>)</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 构建redis 的 key</span></span><br><span class="line">        String signkey = build<span class="constructor">SignKEy(UserId, <span class="params">date</span> , <span class="params">localMacAddress2</span>)</span>;</span><br><span class="line">        <span class="comment">// 查看日期是不是签到</span></span><br><span class="line">        boolean isSigned = redisTemplate.ops<span class="constructor">ForValue()</span>.get<span class="constructor">Bit(<span class="params">signkey</span> , <span class="params">day</span>)</span>;</span><br><span class="line">	</span><br><span class="line">        <span class="comment">// 签到</span></span><br><span class="line">	</span><br><span class="line">        <span class="comment">//根据当前日期获取签到的天数</span></span><br><span class="line">        Date today = <span class="keyword">new</span> <span class="constructor">Date()</span>;</span><br><span class="line">        <span class="comment">//统计总次数</span></span><br><span class="line">        long count = get<span class="constructor">SumSignCount(UserId , <span class="params">today</span>)</span>;</span><br><span class="line">        <span class="comment">//统计连续次数</span></span><br><span class="line">        <span class="built_in">int</span> continuous = get<span class="constructor">ContinusSignCount(UserId , <span class="params">today</span>)</span>;</span><br><span class="line">        result.put(<span class="string">&quot;today&quot;</span> , isSigned);</span><br><span class="line">	</span><br><span class="line">        result.put(<span class="string">&quot;continuous&quot;</span> , continuous);</span><br><span class="line">        result.put(<span class="string">&quot;count&quot;</span> , count);</span><br><span class="line">        return  result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取签到天数的信息</span></span><br><span class="line">    public Map&lt;String , Object&gt; get<span class="constructor">SignInfo(String UserId , String DataStr)</span>&#123;</span><br><span class="line">	</span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inetAddress = <span class="module-access"><span class="module"><span class="identifier">InetAddress</span>.</span></span>get<span class="constructor">LocalHost()</span>;</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span></span><br><span class="line">        String localMacAddress2 = <span class="module-access"><span class="module"><span class="identifier">NetUtil</span>.</span></span>get<span class="constructor">MacAddress(<span class="params">inetAddress</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;localMacAddress2 = &quot;</span> + localMacAddress2);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">        Date date = get<span class="constructor">Date(DataStr)</span>;</span><br><span class="line">        String signkey = build<span class="constructor">SignKEy(UserId , <span class="params">date</span> , <span class="params">localMacAddress2</span>)</span>;</span><br><span class="line">        <span class="comment">// 构建一个归自动排序的Map</span></span><br><span class="line">        Map&lt;String , Object&gt; signInfo = <span class="keyword">new</span> TreeMap&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        <span class="comment">// 获取一个月的总天数</span></span><br><span class="line">        <span class="built_in">int</span> dayOfMouth = <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>length<span class="constructor">OfMonth(DateUtil.<span class="params">month</span>(<span class="params">date</span>)</span> + <span class="number">1</span> , <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>is<span class="constructor">LeapYear(DateUtil.<span class="params">dayOfYear</span>(<span class="params">date</span>)</span>));</span><br><span class="line">	</span><br><span class="line">        <span class="comment">// bitfiled user : sign : 5 : 2021 014 u30</span></span><br><span class="line">        BitFieldSubCommands bitFieldSubCommands = <span class="module-access"><span class="module"><span class="identifier">BitFieldSubCommands</span>.</span></span>create<span class="literal">()</span>.get(<span class="module-access"><span class="module"><span class="identifier">BitFieldSubCommands</span>.</span><span class="module"><span class="identifier">BitFieldType</span>.</span></span>unsigned(dayOfMouth)).value<span class="constructor">At(0)</span>;</span><br><span class="line">	</span><br><span class="line">        <span class="comment">// 获取用户从该当前日期到1号的状态</span></span><br><span class="line">        List&lt;Long&gt; <span class="built_in">list</span> = redisTemplate.ops<span class="constructor">ForValue()</span>.bit<span class="constructor">Field(<span class="params">signkey</span> , <span class="params">bitFieldSubCommands</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">list</span><span class="operator"> == </span>null<span class="operator"> || </span><span class="built_in">list</span>.is<span class="constructor">Empty()</span>)&#123;</span><br><span class="line">            return  signInfo;</span><br><span class="line">        &#125;</span><br><span class="line">	</span><br><span class="line">        long v = <span class="built_in">list</span>.get(<span class="number">0</span>)<span class="operator"> == </span>null ? <span class="number">0</span> :<span class="built_in">list</span>.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = dayOfMouth ; i &gt; <span class="number">0</span> ; i--)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  map的存储格式</span></span><br><span class="line"><span class="comment">             *      签到：  yyyy-mm-01</span></span><br><span class="line"><span class="comment">             *      未签到  yyyy-mm-02 不做任何处理</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">	</span><br><span class="line">            <span class="comment">// 获取日期</span></span><br><span class="line">         LocalDateTime localDateTime =  <span class="module-access"><span class="module"><span class="identifier">LocalDateTimeUtil</span>.</span></span><span class="keyword">of</span>(date).<span class="keyword">with</span><span class="constructor">DayOfMonth(<span class="params">i</span>)</span>;</span><br><span class="line">            <span class="comment">// 右移再左移</span></span><br><span class="line">            boolean flag = v &gt;&gt; <span class="number">1</span> &lt;&lt; <span class="number">1</span> !=v;</span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                signInfo.put(<span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>format(localDateTime , <span class="string">&quot;yyyy-MM-dd&quot;</span>) , <span class="string">&quot;✔&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            v &gt;&gt;= <span class="number">1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">	</span><br><span class="line">        return signInfo;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取签到天数的总和</span></span><br><span class="line">    <span class="keyword">private</span> long get<span class="constructor">SumSignCount(String <span class="params">userId</span>, Date <span class="params">today</span>)</span> &#123;</span><br><span class="line">	</span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inetAddress = <span class="module-access"><span class="module"><span class="identifier">InetAddress</span>.</span></span>get<span class="constructor">LocalHost()</span>;</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span></span><br><span class="line">        String localMacAddress2 = <span class="module-access"><span class="module"><span class="identifier">NetUtil</span>.</span></span>get<span class="constructor">MacAddress(<span class="params">inetAddress</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;localMacAddress2 = &quot;</span> + localMacAddress2);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">        String signkey = build<span class="constructor">SignKEy(<span class="params">userId</span> , <span class="params">today</span> , <span class="params">localMacAddress2</span>)</span>;</span><br><span class="line">        <span class="comment">//bitcount命令</span></span><br><span class="line">        return(long) redisTemplate.execute((RedisCallback&lt;Long&gt;)con -&gt; con.bit<span class="constructor">Count(<span class="params">signkey</span>.<span class="params">getBytes</span>()</span>));</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 获取连续签到天数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> get<span class="constructor">ContinusSignCount(String <span class="params">userId</span>, Date <span class="params">today</span>)</span> &#123;</span><br><span class="line">	</span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inetAddress = <span class="module-access"><span class="module"><span class="identifier">InetAddress</span>.</span></span>get<span class="constructor">LocalHost()</span>;</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.print<span class="constructor">StackTrace()</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span></span><br><span class="line">        String localMacAddress2 = <span class="module-access"><span class="module"><span class="identifier">NetUtil</span>.</span></span>get<span class="constructor">MacAddress(<span class="params">inetAddress</span>)</span>;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="string">&quot;localMacAddress2 = &quot;</span> + localMacAddress2);</span><br><span class="line">	</span><br><span class="line">        <span class="comment">// 获取日期对应的天数</span></span><br><span class="line">        <span class="built_in">int</span> dayofMonth = <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>day<span class="constructor">OfMonth(<span class="params">today</span>)</span>;</span><br><span class="line">        String signkey = build<span class="constructor">SignKEy(<span class="params">userId</span> , <span class="params">today</span> , <span class="params">localMacAddress2</span>)</span>;</span><br><span class="line">	</span><br><span class="line">        BitFieldSubCommands bitFieldSubCommands = <span class="module-access"><span class="module"><span class="identifier">BitFieldSubCommands</span>.</span></span>create<span class="literal">()</span>.get(<span class="module-access"><span class="module"><span class="identifier">BitFieldSubCommands</span>.</span><span class="module"><span class="identifier">BitFieldType</span>.</span></span>unsigned(dayofMonth)).value<span class="constructor">At(0)</span>;</span><br><span class="line">	</span><br><span class="line">        <span class="comment">// 获取用户从该当前日期到1号的状态</span></span><br><span class="line">        List&lt;Long&gt; <span class="built_in">list</span> = redisTemplate.ops<span class="constructor">ForValue()</span>.bit<span class="constructor">Field(<span class="params">signkey</span> , <span class="params">bitFieldSubCommands</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">list</span><span class="operator"> == </span>null<span class="operator"> || </span><span class="built_in">list</span>.is<span class="constructor">Empty()</span>)&#123;</span><br><span class="line">            return  <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">int</span> Signcount = <span class="number">0</span>;</span><br><span class="line">        long v = <span class="built_in">list</span>.get(<span class="number">0</span>)<span class="operator"> == </span>null ? <span class="number">0</span> :<span class="built_in">list</span>.get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = dayofMonth ; i &gt; <span class="number">0</span> ; i--)&#123;</span><br><span class="line">            <span class="comment">// i表示位移操作的次数</span></span><br><span class="line">            <span class="keyword">if</span>(v &gt;&gt; <span class="number">1</span> &lt;&lt; <span class="number">1</span><span class="operator"> == </span>v) &#123;</span><br><span class="line">                <span class="comment">// 用户当前可能未签到，所以要排除当天的可能性</span></span><br><span class="line">                <span class="keyword">if</span>(i != dayofMonth) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果右移后又左移和自己不相等 代表她已经签到</span></span><br><span class="line">                Signcount++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 右移一位并重新赋值，相当于丢弃已经判断的数字</span></span><br><span class="line">            v &gt;&gt;= <span class="number">1</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        return Signcount;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">// redis里存储的key方法</span></span><br><span class="line">    <span class="keyword">private</span> String build<span class="constructor">SignKEy(String <span class="params">userId</span>, Date <span class="params">date</span> , String <span class="params">localMacAddress</span>)</span> &#123;</span><br><span class="line">        return  <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>format(<span class="string">&quot;user:%s:%s:0:%s&quot;</span>,userId ,localMacAddress, <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>format(date, <span class="string">&quot;yyyyMM&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 判断是不是补签</span></span><br><span class="line">    <span class="keyword">private</span> Date get<span class="constructor">Date(String <span class="params">dataStr</span>)</span> &#123;</span><br><span class="line">        return <span class="module-access"><span class="module"><span class="identifier">StrUtil</span>.</span></span>is<span class="constructor">Blank(<span class="params">dataStr</span>)</span> ? <span class="keyword">new</span> <span class="constructor">Date()</span> : <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>parse<span class="constructor">Date(<span class="params">dataStr</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 教师查看端</span></span><br><span class="line">    public List&lt;Object&gt; teachercck(String DataStr) &#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">        Map&lt;Object , Object&gt; result = <span class="keyword">new</span> <span class="constructor">HashMap()</span>;</span><br><span class="line">        List&lt;Object&gt; <span class="keyword">end</span> = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">        String basicname = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> + <span class="string">&quot;*&quot;</span>)</span>);</span><br><span class="line">        String<span class="literal">[]</span> basic = basicname.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        Date date = get<span class="constructor">Date(DataStr)</span>;</span><br><span class="line">        <span class="built_in">int</span> day = <span class="module-access"><span class="module"><span class="identifier">DateUtil</span>.</span></span>day<span class="constructor">OfMonth(<span class="params">date</span>)</span> - <span class="number">1</span>;</span><br><span class="line"><span class="comment">//        end.put(&quot;code&quot; , 0);</span></span><br><span class="line"><span class="comment">//        end.put(&quot;msg&quot; , &quot;&quot;);</span></span><br><span class="line"><span class="comment">//        result.put(&quot;count&quot; , basic.length);</span></span><br><span class="line">        <span class="keyword">end</span>.add(basic.length);</span><br><span class="line">        <span class="keyword">for</span>( <span class="built_in">int</span> i = <span class="number">0</span> ; i &lt; basic.length ; i++ )&#123;</span><br><span class="line">                String<span class="literal">[]</span> namebasic  =  basic<span class="literal">[<span class="identifier">i</span>]</span>.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                String signkey = build<span class="constructor">SignKEy(<span class="params">namebasic</span>[1], <span class="params">date</span> , <span class="params">namebasic</span>[2])</span>;</span><br><span class="line">                boolean isSigned = redisTemplate.ops<span class="constructor">ForValue()</span>.get<span class="constructor">Bit(<span class="params">signkey</span> , <span class="params">day</span>)</span>;</span><br><span class="line"><span class="comment">//                result.put(i+1 , namebasic[1]);</span></span><br><span class="line">                <span class="keyword">end</span>.add(namebasic<span class="literal">[<span class="number">1</span>]</span>);</span><br><span class="line">                <span class="keyword">end</span>.add(namebasic<span class="literal">[<span class="number">2</span>]</span>);</span><br><span class="line"><span class="comment">//                result.put(namebasic[1], namebasic[2]);</span></span><br><span class="line">                <span class="keyword">if</span> (isSigned)&#123;</span><br><span class="line"><span class="comment">//                    result.put(namebasic[2] , &quot;今日已经签到&quot;);</span></span><br><span class="line">                    <span class="keyword">end</span>.add(<span class="string">&quot;今日已经签到&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//                    result.put(namebasic[2] , &quot;今日没有签到&quot;);</span></span><br><span class="line">                    <span class="keyword">end</span>.add(<span class="string">&quot;今日未签到&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (namebasic<span class="literal">[<span class="number">3</span>]</span>.equals(<span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">end</span>.add(<span class="string">&quot;未获得补签权限&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">end</span>.add(<span class="string">&quot;已经获得补签权限&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">	</span><br><span class="line">        return <span class="keyword">end</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 教师更改学生可以补签的权限</span></span><br><span class="line">    public Map&lt;Object , Object&gt; teacherchange(String UserId)</span><br><span class="line">    &#123;</span><br><span class="line">        Map&lt;Object , Object&gt; result = <span class="keyword">new</span> <span class="constructor">HashMap()</span>;</span><br><span class="line">        String basicname = <span class="module-access"><span class="module"><span class="identifier">String</span>.</span></span>value<span class="constructor">Of(<span class="params">redisTemplate</span>.<span class="params">keys</span>(<span class="string">&quot;user:&quot;</span> +UserId+ <span class="string">&quot;:*&quot;</span>)</span>);</span><br><span class="line">        String changgename = basicname.substring(basicname.index<span class="constructor">Of(<span class="string">&quot;[&quot;</span>)</span>+<span class="number">1</span> , basicname.index<span class="constructor">Of(<span class="string">&quot;]&quot;</span>)</span>);</span><br><span class="line">        String<span class="literal">[]</span> namebasic  =  changgename.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">	</span><br><span class="line">        String newname = namebasic<span class="literal">[<span class="number">0</span>]</span> + <span class="string">&quot;:&quot;</span> + namebasic<span class="literal">[<span class="number">1</span>]</span> + <span class="string">&quot;:&quot;</span> + namebasic<span class="literal">[<span class="number">2</span>]</span> + <span class="string">&quot;:1:&quot;</span> + namebasic<span class="literal">[<span class="number">4</span>]</span>;</span><br><span class="line">        redisTemplate.rename(changgename , newname);</span><br><span class="line">	</span><br><span class="line">        result.put(<span class="string">&quot;code&quot;</span> , <span class="number">404</span>);</span><br><span class="line">        result.put(<span class="string">&quot;message&quot;</span> , <span class="string">&quot;成功修改&quot;</span>);</span><br><span class="line">        return  result;</span><br><span class="line">	</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="控制端"><a href="#控制端" class="headerlink" title="控制端"></a>控制端</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package com.<span class="property">example</span>.<span class="property">demo</span>.<span class="property">controller</span>;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">example</span>.<span class="property">demo</span>.<span class="property">Servicedemo</span>.<span class="property">SignService</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">web</span>.<span class="property">bind</span>.<span class="property">annotation</span>.<span class="property">GetMapping</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">web</span>.<span class="property">bind</span>.<span class="property">annotation</span>.<span class="property">PostMapping</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">web</span>.<span class="property">bind</span>.<span class="property">annotation</span>.<span class="property">RequestMapping</span>;</span><br><span class="line"><span class="keyword">import</span> org.<span class="property">springframework</span>.<span class="property">web</span>.<span class="property">bind</span>.<span class="property">annotation</span>.<span class="property">RestController</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">annotation</span>.<span class="property">Resource</span>;</span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">Map</span>;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line">	</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">&quot;sign&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SignController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">SignService</span> signservice;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 用户的签到可以补签</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Map</span>&lt;<span class="title class_">String</span>  , <span class="title class_">Object</span>&gt; <span class="title function_">doSignIn</span>(<span class="params"><span class="built_in">String</span> UserId , <span class="built_in">String</span> DataStr</span>)&#123;</span><br><span class="line">	</span><br><span class="line">        <span class="keyword">return</span> signservice.<span class="title function_">doSign</span>(<span class="title class_">UserId</span> , <span class="title class_">DataStr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 获取用户当天的签到情况</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">&quot;today&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Map</span>&lt;<span class="title class_">String</span>  , <span class="title class_">Object</span>&gt; <span class="title function_">getSignByDate</span>(<span class="params"><span class="built_in">String</span> UserId , <span class="built_in">String</span> DataStr</span>)&#123;</span><br><span class="line">	</span><br><span class="line">        <span class="keyword">return</span> signservice.<span class="title function_">getSignByDate</span>(<span class="title class_">UserId</span> , <span class="title class_">DataStr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">&quot;SIGNFO&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span>  <span class="title class_">Map</span>&lt;<span class="title class_">String</span> , <span class="title class_">Object</span>&gt; <span class="title class_">GetSignInfo</span>(<span class="title class_">String</span> <span class="title class_">UserId</span> , <span class="title class_">String</span> <span class="title class_">DataStr</span>)&#123;</span><br><span class="line">	</span><br><span class="line">        <span class="keyword">return</span>  signservice.<span class="title function_">getSignInfo</span>(<span class="title class_">UserId</span> , <span class="title class_">DataStr</span>);</span><br><span class="line">	</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">&quot;/teacher&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> java.<span class="property">util</span>.<span class="property">List</span>&lt;<span class="title class_">Object</span>&gt; <span class="title class_">Getinfo</span>(<span class="title class_">String</span> <span class="title class_">DataStr</span>)&#123;</span><br><span class="line">	</span><br><span class="line">        <span class="keyword">return</span> signservice.<span class="title function_">teachercck</span>(<span class="title class_">DataStr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">&quot;/change&quot;</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Map</span>&lt;<span class="title class_">Object</span>, <span class="title class_">Object</span>&gt; <span class="title function_">chenge</span>(<span class="params"><span class="built_in">String</span> USerId</span>)&#123;</span><br><span class="line">	</span><br><span class="line">        <span class="keyword">return</span> signservice.<span class="title function_">teacherchange</span>(<span class="title class_">USerId</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="自动启动浏览器"><a href="#自动启动浏览器" class="headerlink" title="自动启动浏览器"></a>自动启动浏览器</h2><ul>
<li>先在SignDemo的同级目录下创建web启动类</li>
<li>如下</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.<span class="keyword">annotation</span>.RestController;</span><br><span class="line">	</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> String run() &#123;</span><br><span class="line">	</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;启动springboot成功!&quot;</span>;</span><br><span class="line">	</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>然后在与SignDEmo同级的包里创建一个浏览器自动启动类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.demo.AutoB;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.event.ApplicationReadyEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">	</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoBrower</span> &#123;</span><br><span class="line">    <span class="meta">@EventListener(&#123;ApplicationReadyEvent.class&#125;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">applicationReadyEvent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;应用已经准备就绪 ... 启动浏览器&quot;</span>);</span><br><span class="line">        <span class="comment">// 这里需要注url:端口号+测试类方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:9999/index.html&quot;</span>;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            runtime.exec(<span class="string">&quot;rundll32 url.dll,FileProtocolHandler &quot;</span> + url);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上面那个url是我们要自动启动的网页</li>
</ul>
<h1 id="前端浏览器页面"><a href="#前端浏览器页面" class="headerlink" title="前端浏览器页面"></a>前端浏览器页面</h1><ul>
<li>前端浏览器页面我们主要使用ajax进行浏览器的传值，</li>
<li>前端我们使用了嵌套的布局，是一个index嵌套一个welcome</li>
<li>代码如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/css/layui.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">fieldset</span> <span class="attr">class</span>=<span class="string">&quot;layui-elem-field layui-field-title&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 30px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>个人中心<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">&quot;layui-col-md3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab layui-tab-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-this&quot;</span>&gt;</span>签到<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>补签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span>记录<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-item layui-show&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-radius layui-btn-normal layui-form-label&quot;</span> <span class="attr">id</span> = <span class="string">&quot;SignBtn&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 20px&quot;</span> &gt;</span> 签 &amp;nbsp 到<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;title&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>你已签到 <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span> = <span class="string">&quot;color: red;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;count&quot;</span> &gt;</span>0 <span class="tag">&lt;/<span class="name">span</span>&gt;</span> 天<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>连续签到 <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span> = <span class="string">&quot;color: red;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;continuous&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 天<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;reissue&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择日期&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-radius layui-btn-normal&quot;</span> <span class="attr">id</span> = <span class="string">&quot;reissueBtn&quot;</span>&gt;</span> 补签<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;title&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-item&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-radius layui-btn-normal layui-form-label&quot;</span> <span class="attr">id</span> = <span class="string">&quot;recordLi&quot;</span>&gt;</span>查询记录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;title&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-inline&quot;</span> <span class="attr">id</span>=<span class="string">&quot;record&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/element-ui/2.15.10/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// $(function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     var value = jQuery(&quot;#user&quot;).val();</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     $.ajax(&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         url: &quot;/sign/today&quot;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         type: &quot;GET&quot;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         data: &#123;&quot;UserId&quot; : value&#125;, // 模拟的用户id</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         dataType: &quot;JSON&quot;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         success: function f(result) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//             layer.msg(result.message);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//             if(200 == result.code)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                 if (true == result.today) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     $(&quot;#count&quot;).text(result.count);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     // 设置连续签到次数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     $(&quot;#continuous&quot;).text(result.continuous);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     // 设置签到按钮的文本</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     $(&quot;#SignBtn&quot;).text(&quot;已经签到&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     // 禁用签到按钮</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     $(&quot;#SignBtn&quot;).addClass(&quot;layui-btn-disabled&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                     $(&quot;#SignBtn&quot;).attr(&quot;disabled&quot; , &quot;true&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//                 &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//             &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">    layui.<span class="title function_">use</span>(<span class="string">&#x27;laydate&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> laydate = layui.<span class="property">laydate</span>;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//执行一个laydate实例</span></span></span><br><span class="line"><span class="language-javascript">        laydate.<span class="title function_">render</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">elem</span>: <span class="string">&#x27;#reissue&#x27;</span> <span class="comment">//指定元素</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    layui.<span class="title function_">use</span>(<span class="string">&#x27;layer&#x27;</span> , <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 签到</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#SignBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> value = <span class="title function_">jQuery</span>(<span class="string">&quot;#user&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;/sign&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;<span class="string">&quot;UserId&quot;</span>: value&#125;, <span class="comment">// 模拟的用户id</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// for (var m in result)&#123;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//     alert(m)</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//     alert(result[m])</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">                    layer.<span class="title function_">msg</span>(result.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="number">200</span> == result.<span class="property">code</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 设置总签到次数</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#count&quot;</span>).<span class="title function_">text</span>(result.<span class="property">count</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 设置连续签到次数</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#continuous&quot;</span>).<span class="title function_">text</span>(result.<span class="property">continuous</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 设置签到按钮的文本</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#SignBtn&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;已经签到&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 禁用签到按钮</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#SignBtn&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;layui-btn-disabled&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#SignBtn&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;disabled&quot;</span>, <span class="string">&quot;true&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//补签</span></span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#reissueBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span> , <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> va = <span class="title function_">jQuery</span>(<span class="string">&quot;#user1&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;/sign&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;<span class="string">&quot;UserId&quot;</span> : va , <span class="string">&quot;DataStr&quot;</span> : $(<span class="string">&quot;#reissue&quot;</span>).<span class="title function_">val</span>()&#125;, <span class="comment">// 模拟的用户id</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    layer.<span class="title function_">msg</span>(result.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(<span class="number">200</span> == result.<span class="property">code</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 设置总签到次数</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#count&quot;</span>).<span class="title function_">text</span>(result.<span class="property">count</span>);</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 设置连续签到次数</span></span></span><br><span class="line"><span class="language-javascript">                        $(<span class="string">&quot;#continuous&quot;</span>).<span class="title function_">text</span>(result.<span class="property">continuous</span>);</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 签到记录的元素</span></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#recordLi&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span> , <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> vae = <span class="title function_">jQuery</span>(<span class="string">&quot;#user2&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        layui.<span class="title function_">use</span>(<span class="string">&#x27;layer&#x27;</span> , <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> laydate = layui.<span class="property">laydate</span>;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取签到记录</span></span></span><br><span class="line"><span class="language-javascript">            $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>: <span class="string">&quot;/sign/SIGNFO&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">data</span>: &#123;<span class="string">&quot;UserId&quot;</span>: vae&#125;, <span class="comment">// 模拟的用户id</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">success</span>: <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 清空日历元素</span></span></span><br><span class="line"><span class="language-javascript">                    $(<span class="string">&quot;#record&quot;</span>).<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">                    laydate.<span class="title function_">render</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">elem</span>: <span class="string">&#x27;#record&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                        ,<span class="attr">mark</span>: result,</span></span><br><span class="line"><span class="language-javascript">                        <span class="attr">position</span>: <span class="string">&#x27;static&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>index的</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户签到系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/css/layui.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-layout layui-layout-admin&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-logo layui-hide-xs layui-bg-black&quot;</span>&gt;</span>用户签到系统<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 头部区域（可配合layui 已有的水平导航） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav layui-layout-left&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 移动端显示 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item layui-show-xs-inline-block layui-hide-sm&quot;</span> <span class="attr">lay-header-event</span>=<span class="string">&quot;menuLeft&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;layui-icon layui-icon-spread-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item layui-hide-xs&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>签到<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-side layui-bg-black&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-side-scroll&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 左侧导航区域（可配合layui已有的垂直导航） --&gt;</span></span><br><span class="line">	</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内容主体区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;welcome.html&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 100%; &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 底部固定区域 --&gt;</span></span><br><span class="line">        底部固定区域</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>上述只是学生端的，对于教师端也和其大差不差，代码如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Layui<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;webkit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/css/layui.css&quot;</span>    <span class="attr">media</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意：如果你直接复制所有代码到本地，上述css路径需要改成你本地的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span>教师中心<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab layui-tab-card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-title&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-this&quot;</span>&gt;</span>查看签到情况<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>更改权限<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-content&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-item layui-show&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>  <span class="attr">style</span>=<span class="string">&#x27;width:300px&#x27;</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Mac地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>今日签到情况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>补签情况<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;tbody1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-tab-item&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn layui-btn-radius layui-btn-normal&quot;</span> <span class="attr">id</span> = <span class="string">&quot;reissueBtn&quot;</span>&gt;</span>更改补签权限<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">lay-verify</span>=<span class="string">&quot;title&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注意：如果你直接复制所有代码到本地，上述 JS 路径需要改成你本地的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/element-ui/2.15.10/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;/sign/teacher&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;<span class="string">&quot;DataStr&quot;</span>: <span class="literal">null</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>: <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> m = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> tableData = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">1</span>; k &lt;= result[<span class="number">0</span>]; k++) &#123;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">                    tableData += <span class="string">&quot;&lt;tr  style=&#x27;width:300px&#x27; &gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span> + m; i &lt;= <span class="number">4</span> + m; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                        tableData += <span class="string">&quot;&lt;td&gt;&quot;</span> + result[i] + <span class="string">&quot;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// tableData += &quot;&lt;td&gt;&lt;button type=&#x27;submit&#x27; onclick=&#x27;btnAction&#x27; name=&#x27;btn&#x27;&gt;更改补签权限&lt;/button&gt;&lt;/td&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    tableData += <span class="string">&quot;&lt;/tr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    m += <span class="number">4</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                $(<span class="string">&quot;#tbody1&quot;</span>).<span class="title function_">html</span>(tableData)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">     $(<span class="string">&quot;#reissueBtn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span> , <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">var</span> va = <span class="title function_">jQuery</span>(<span class="string">&quot;#user1&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(va)</span></span><br><span class="line"><span class="language-javascript">         $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">url</span>: <span class="string">&quot;/sign/change&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">data</span>: &#123;<span class="string">&quot;USerId&quot;</span> : va&#125;,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">             <span class="attr">success</span>: <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                 layer.<span class="title function_">msg</span>(result.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">             &#125;</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">         &#125;);</span></span><br><span class="line"><span class="language-javascript">     &#125;)</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript">	</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>教师的index</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>教师观察系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/css/layui.css&quot;</span> <span class="attr">media</span>=<span class="string">&quot;all&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-layout layui-layout-admin&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-logo layui-hide-xs layui-bg-black&quot;</span>&gt;</span>教师观察系统<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 头部区域（可配合layui 已有的水平导航） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav layui-layout-left&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 移动端显示 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item layui-show-xs-inline-block layui-hide-sm&quot;</span> <span class="attr">lay-header-event</span>=<span class="string">&quot;menuLeft&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;layui-icon layui-icon-spread-left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item layui-hide-xs&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>签到情况<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-side layui-bg-black&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-side-scroll&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 左侧导航区域（可配合layui已有的垂直导航） --&gt;</span></span><br><span class="line">	</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内容主体区域 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;teacher.html&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 100%; &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 底部固定区域 --&gt;</span></span><br><span class="line">        底部固定区域</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/layui/2.7.6/layui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>签到的制作</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>周六周日要补的</title>
    <url>/2022/12/16/%E5%91%A8%E5%85%AD%E6%97%A5/</url>
    <content><![CDATA[<h1 id="Prometheus框架监控zk"><a href="#Prometheus框架监控zk" class="headerlink" title="Prometheus框架监控zk"></a>Prometheus框架监控zk</h1><p>完成</p>
<h1 id="datax"><a href="#datax" class="headerlink" title="datax"></a>datax</h1><p>完成</p>
<h1 id="flume的fileSink"><a href="#flume的fileSink" class="headerlink" title="flume的fileSink"></a>flume的fileSink</h1><p>完成</p>
<h2 id="kafka-custome-api"><a href="#kafka-custome-api" class="headerlink" title="kafka custome api"></a>kafka custome api</h2><p>完成</p>
<h2 id="flume-gt-kafka-gt-消费"><a href="#flume-gt-kafka-gt-消费" class="headerlink" title="flume-&gt; kafka -&gt; 消费"></a>flume-&gt; kafka -&gt; 消费</h2><p>完成</p>
<h2 id="kafka-gt-flume-gt-hdfs-gt-logger"><a href="#kafka-gt-flume-gt-hdfs-gt-logger" class="headerlink" title="kafka -&gt; flume -&gt; hdfs -&gt;logger"></a>kafka -&gt; flume -&gt; hdfs -&gt;logger</h2><p>完成</p>
<h2 id="clickhouse-，-mongo-，-python-，-go-，-深入jvm，java-机器学习的算法"><a href="#clickhouse-，-mongo-，-python-，-go-，-深入jvm，java-机器学习的算法" class="headerlink" title="clickhouse ， mongo ， python ， go ， 深入jvm，java,机器学习的算法"></a>clickhouse ， mongo ， python ， go ， 深入jvm，java,机器学习的算法</h2>]]></content>
      <categories>
        <category>任务</category>
      </categories>
      <tags>
        <tag>目标</tag>
      </tags>
  </entry>
  <entry>
    <title>踩过的坑</title>
    <url>/2022/11/17/%E5%9D%91/</url>
    <content><![CDATA[<h1 id="修改windows下的hosts文件不生效"><a href="#修改windows下的hosts文件不生效" class="headerlink" title="修改windows下的hosts文件不生效"></a>修改windows下的hosts文件不生效</h1><ul>
<li>这个坑一直卡了我三四天</li>
<li>配置完hadoop集群，进行web访问的时候出现了这个问题</li>
<li>因为windows的主机映射不好使，所以我无法在网页端查看数据</li>
</ul>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ul>
<li>我这里解决这个的办法是通过</li>
<li>把中间空格放大的方法</li>
<li>就是一个小空格加一个tab键</li>
<li>然后进入 <code>edge://net-internals</code>或者 <code>chrome://net-internals</code></li>
<li>这取决于你的浏览器</li>
<li>然后 <code>win + x</code> 查看windows powershell（管理员）打开之后执行 <code> ipconfig /flushdns</code></li>
<li>刷新之后就可以通过映射访问了</li>
</ul>
<h1 id="有关于idea关于Hadoop的api的copyToLocalfile不生效"><a href="#有关于idea关于Hadoop的api的copyToLocalfile不生效" class="headerlink" title="有关于idea关于Hadoop的api的copyToLocalfile不生效"></a>有关于idea关于Hadoop的api的copyToLocalfile不生效</h1><ul>
<li>报错信息 <code>java.io.FileNotFoundException: HADOOP_HOME and hadoop.home.dir are unset.</code></li>
<li>这个是代表你windows里没有配置hadoop环境</li>
<li>我们可以不用他提供的api</li>
<li>通过</li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">FSDataInputStream fis = fs.<span class="keyword">open</span>(<span class="keyword">new</span> <span class="constructor">Path(<span class="string">&quot;/date&quot;</span>)</span>); <span class="comment">// hdfs上的文件</span></span><br><span class="line">OutputStream outputStream = <span class="keyword">new</span> <span class="constructor">FileOutputStream( <span class="params">new</span> File(<span class="string">&quot;D:\\ bg1.txt&quot;</span>)</span> , <span class="literal">false</span>); <span class="comment">// 本地的存储地点</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">IOUtils</span>.</span></span>copy<span class="constructor">Bytes(<span class="params">fis</span>,<span class="params">outputStream</span>,4096 , <span class="params">true</span>)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>就可以实现下载</li>
</ul>
<h1 id="关于linux里的mysql会自动识别大小写表名的事情"><a href="#关于linux里的mysql会自动识别大小写表名的事情" class="headerlink" title="关于linux里的mysql会自动识别大小写表名的事情"></a>关于linux里的mysql会自动识别大小写表名的事情</h1><p>linux里的mysql会自动对表名进行大小写区分，这可能导致一些boot项目启动的时候找不到表名</p>
<p>如何更改如下</p>
<p>首先查看自己的表名大小写权限是不是打开了</p>
<p>先在mysql里执行</p>
<p><code>show variables like &quot;%case%&quot;;</code></p>
<p>查看一下我们的权限打没打开</p>
<p>一般默认的时候会有个off的选项</p>
<p>这个是默认的情况</p>
<p>接下来我们对其进行修改</p>
<p>我们首先退出mysql</p>
<p>然后关闭mysql服务输入 ： <code>mysqladmin -uroot -p shutdown //以安全模式关闭数据库</code></p>
<p>接下来输入密码就关闭了</p>
<p>然后编辑mysql的配置文件</p>
<p>输入 ： <code>vim /etc/my.cnf</code></p>
<p>在mysqld下添加一行</p>
<p><code>lower_case_table_names=1</code></p>
<p>然后退出保存即可</p>
<p>最后要重新启动mysql输入 ： <code>systemctl resatrt mysqld</code></p>
<p>就可以了</p>
<h1 id="mysql误删了配置文件-performance-schema的恢复"><a href="#mysql误删了配置文件-performance-schema的恢复" class="headerlink" title="mysql误删了配置文件 performance_schema的恢复"></a>mysql误删了配置文件 performance_schema的恢复</h1><p>首先我们退出mysql</p>
<p>然后输入 <code>mysql_upgrade -u root -p </code></p>
<p>输入我们的密码之后</p>
<p>然后重新登录我们的mysql就会出现了</p>
<h1 id="npm怎么清除缓存"><a href="#npm怎么清除缓存" class="headerlink" title="npm怎么清除缓存"></a>npm怎么清除缓存</h1><p>首先关于npm进行清除缓存</p>
<p>先明确自己的npm的版本</p>
<p>如果npm version &lt; 7.0.0</p>
<p><code>$ npm cache clean -f</code></p>
<p>npm version ≧ 7.0.0 会报以下错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm cache cleannpm ERR! As of npm@5, the npm cache self-heals from corruption issues</span><br><span class="line">npm ERR! by treating integrity mismatches as cache misses.  As a result,</span><br><span class="line">npm ERR! data extracted from the cache is guaranteed to be valid.  If you</span><br><span class="line">npm ERR! want to make sure everything is consistent, use npm cache verify</span><br><span class="line">npm ERR! instead.  Deleting the cache can only make npm go slower, and is</span><br><span class="line">npm ERR! not likely to correct any problems you may be encountering!</span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! On the other hand, <span class="keyword">if</span> you<span class="string">&#x27;re debugging an issue with the installer,</span></span><br><span class="line"><span class="string">npm ERR! or race conditions that depend on the timing of writing to an empty</span></span><br><span class="line"><span class="string">npm ERR! cache, you can use npm install --cache /tmp/empty-cache to use a</span></span><br><span class="line"><span class="string">npm ERR! temporary cache instead of nuking the actual one.</span></span><br><span class="line"><span class="string">npm ERR!</span></span><br><span class="line"><span class="string">npm ERR! If you&#x27;</span>re sure you want to delete the entire cache, rerun this <span class="built_in">command</span></span><br><span class="line">npm ERR! with --force.npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /Users/xxxxxx/.npm/_logs/2021-02-04T06_35_38_043Z-debug.log</span><br></pre></td></tr></table></figure>

<p>如果想强制清除缓存就要用–force</p>
<h1 id="关于npm设置镜像源"><a href="#关于npm设置镜像源" class="headerlink" title="关于npm设置镜像源"></a>关于npm设置镜像源</h1><p><code>npm config set registry http://registry.npm.taobao.org</code></p>
<p>然后就把淘宝镜像源加进入了</p>
<h1 id="Git之本地分支和远程分支建立追踪关系的几种方式"><a href="#Git之本地分支和远程分支建立追踪关系的几种方式" class="headerlink" title="Git之本地分支和远程分支建立追踪关系的几种方式"></a>Git之本地分支和远程分支建立追踪关系的几种方式</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/remote_branch your_branch</span><br><span class="line">origin/remote_branch是你本地分支对应的远程分支；your_branch是你当前的本地分支。</span><br></pre></td></tr></table></figure>

<p>或者之间checkout -b 根据远程建立本地分支</p>
<h1 id="git-删除远程分支"><a href="#git-删除远程分支" class="headerlink" title="git 删除远程分支"></a>git 删除远程分支</h1><p><code> git push origin --delete [branch_name]</code></p>
<h1 id="云服务器内存不够，设置swap交换分区"><a href="#云服务器内存不够，设置swap交换分区" class="headerlink" title="云服务器内存不够，设置swap交换分区"></a>云服务器内存不够，设置swap交换分区</h1><p>闲来无事自己用云主机搭建了一台gitlab，但是由于云主机是2G2核的在刚开始布置完成之后，访问的时候时常会502</p>
<p>就是服务器的内存被占据太多了，无法响应导致的</p>
<p>然后就想办法设置交换分区解决这个问题</p>
<p>首先要在root 用户下</p>
<p>然后是创建交换分区的文件 <code>/file/swap</code></p>
<p>然后执行 <code>dd if=/dev/zero of=/file/swap bs=1024 count=4096000</code></p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/dev/</span>zero是输入，<span class="regexp">/file/</span>swap是交换文件位置，路径得存在，bs读/写的块大小，<span class="keyword">count</span>是swap大小</span><br></pre></td></tr></table></figure>

<p>然后执行 <code>mkswap /file/swap</code></p>
<p>把第一步的文件设置成swap交换区</p>
<p>启用swap交换分区</p>
<p><code>swapon /file/swap</code></p>
<p>设置成开机挂载交换区</p>
<p><code>echo &quot;/file/swap swap swap defaults 0 0&quot; &gt;&gt; /etc/fstab</code></p>
<p>设置启动的条件</p>
<p><code>vim /etc/sysctl.conf 将vm.swappiness = 0值改为50</code></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">这个值是如何使用<span class="keyword">swap</span>分区值越大越积极使用<span class="keyword">swap</span>分区，越小表示越积极使用物理内存，wappiness=<span class="number">50</span>，表示内存使用率超过<span class="number">100</span><span class="number">-50</span>=<span class="number">50</span>%时开始使用交换分区，swappiness=<span class="number">0</span>时不使用swapswappiness＝<span class="number">100</span>的时候表示积极使用<span class="keyword">swap</span>分区，并把内存上的数据及时搬运到<span class="keyword">swap</span>空间</span><br></pre></td></tr></table></figure>

<p>加载参数</p>
<p><code>sysctl -p</code></p>
<h1 id="git出现fatal-the-remote-end-hung-up-unexpectedly"><a href="#git出现fatal-the-remote-end-hung-up-unexpectedly" class="headerlink" title="git出现fatal: the remote end hung up unexpectedly"></a>git出现<strong>fatal: the remote end hung up unexpectedly</strong></h1><p>上传项目报fatal: the remote end hung up unexpectedly的错误，</p>
<p>应该是项目太大的原因， 要么是网络不行，要么墙的原因</p>
<p>解决办法：<br>修改提交缓存大小为500M，或者更大的数字<br>git config –global http.postBuffer 524288000</p>
<p>some comments below report having to double the value:</p>
<p>git config –global http.postBuffer 1048576000</p>
<p>或者是 在克隆&#x2F;创建版本库生成的 .git&#x2F;config 文件中加入:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[http]</span></span><br><span class="line"><span class="attr">postBuffer</span> = <span class="number">524288000</span></span><br></pre></td></tr></table></figure>

<h1 id="ssh配置免密登录了，无法生效"><a href="#ssh配置免密登录了，无法生效" class="headerlink" title="ssh配置免密登录了，无法生效"></a>ssh配置免密登录了，无法生效</h1><p>原因：有可能是因为组权限加了W，，减掉就好了</p>
<h1 id="hive的元数据，在mysql里命名存在却显示表不存在，导致hive启动失败"><a href="#hive的元数据，在mysql里命名存在却显示表不存在，导致hive启动失败" class="headerlink" title="hive的元数据，在mysql里命名存在却显示表不存在，导致hive启动失败"></a>hive的元数据，在mysql里命名存在却显示表不存在，导致hive启动失败</h1><p>重新初始化hive的元数据库，或者从hdfs上获取数据并进行导入</p>
<h1 id="再linux机器上简单的部署前端页面不用ngix"><a href="#再linux机器上简单的部署前端页面不用ngix" class="headerlink" title="再linux机器上简单的部署前端页面不用ngix"></a>再linux机器上简单的部署前端页面不用ngix</h1><p>把静态网页放到&#x2F;var&#x2F;www&#x2F;html上就好</p>
<p>然后就可以通过ip&#x2F;文件名就可以访问了</p>
<h1 id="在通过idea链接的hive上进行操作的时候报错"><a href="#在通过idea链接的hive上进行操作的时候报错" class="headerlink" title="在通过idea链接的hive上进行操作的时候报错"></a>在通过idea链接的hive上进行操作的时候报错</h1><p>: javax.jdo.JDODataStoreException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘OPTION SQL_SELECT_LIMIT&#x3D;DEFAULT’ at line 1</p>
<p>原因：是mysql的版本和驱动的版本不匹配导致的，我的mysql版本是5.6的，刚开始使用的驱动是mysql-connector-java-5.0.5-bin.jar，但是mysql5.6已经抛弃了这个参数，所以会报上面错误，换成驱动mysql-connector-java-5.1.31-bin.jar后解决。</p>
<h1 id="spark在yarn上部署选择集群部署的时候出现问题"><a href="#spark在yarn上部署选择集群部署的时候出现问题" class="headerlink" title="spark在yarn上部署选择集群部署的时候出现问题"></a>spark在yarn上部署选择集群部署的时候出现问题</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">java.io.EOFException: <span class="keyword">End</span> <span class="keyword">of</span> File <span class="keyword">Exception</span> <span class="keyword">between</span> <span class="keyword">local</span> host <span class="keyword">is</span>: &quot;bigdata3/192.168.41.132&quot;; destination host <span class="keyword">is</span>: &quot;bigdata3&quot;:<span class="number">9000</span>; : java.io.EOFException; <span class="keyword">For</span> more details see:  http://wiki.apache.org/hadoop/EOFException</span><br><span class="line">	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native <span class="keyword">Method</span>)</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<p>先查看配置文件是不是出问题，启动客户端模式查看代码是不是出问题</p>
<p>如果都不是</p>
<p>则查看是不是三台机器上都有spark</p>
<h1 id="spark-shell-在yarn上的时候不能用cluster模式"><a href="#spark-shell-在yarn上的时候不能用cluster模式" class="headerlink" title="spark-shell 在yarn上的时候不能用cluster模式"></a>spark-shell 在yarn上的时候不能用cluster模式</h1><p>因为spark-shell 就是在一台机器上课driver，而cluster是集群的driver，所以会出问题</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>坑</tag>
      </tags>
  </entry>
  <entry>
    <title>杂项</title>
    <url>/2022/10/27/%E6%9D%82%E9%A1%B9/</url>
    <content><![CDATA[<h1 id="查看自己电脑可支持的最大内存"><a href="#查看自己电脑可支持的最大内存" class="headerlink" title="查看自己电脑可支持的最大内存"></a>查看自己电脑可支持的最大内存</h1><ul>
<li>打开cmd</li>
<li>输入wmic memphysical get maxcapacity</li>
<li>就会获得字节数</li>
<li>除以两个1024，就会是xxxG</li>
</ul>
<h1 id="查看电脑有几个卡槽"><a href="#查看电脑有几个卡槽" class="headerlink" title="查看电脑有几个卡槽"></a>查看电脑有几个卡槽</h1><ul>
<li>打开任务管理器</li>
<li>选择性能</li>
<li>上面就有已经使用了几个卡槽</li>
</ul>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>坑</tag>
      </tags>
  </entry>
  <entry>
    <title>第一天</title>
    <url>/2022/10/27/%E7%89%9B%E5%AE%A21/</url>
    <content><![CDATA[<h1 id="实现二叉树的前序遍历"><a href="#实现二叉树的前序遍历" class="headerlink" title="实现二叉树的前序遍历"></a>实现二叉树的前序遍历</h1><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util<span class="operator">.*</span>;</span><br><span class="line">	</span><br><span class="line"><span class="operator">/*</span></span><br><span class="line"> <span class="operator">*</span> <span class="keyword">public</span> <span class="keyword">class</span> TreeNode &#123; <span class="comment">// 树形结构</span></span><br><span class="line"> <span class="operator">*</span>   int <span class="keyword">val</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> <span class="operator">*</span>   TreeNode left <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="operator">*</span>   TreeNode right <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="operator">*</span>   <span class="keyword">public</span> TreeNode(int <span class="keyword">val</span>) &#123;</span><br><span class="line"> <span class="operator">*</span>     this.<span class="keyword">val</span> <span class="operator">=</span> <span class="keyword">val</span>;</span><br><span class="line"> <span class="operator">*</span>   &#125;</span><br><span class="line"> <span class="operator">*</span> &#125;</span><br><span class="line"> <span class="operator">*/</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="operator">/**</span></span><br><span class="line">     <span class="operator">*</span> 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     <span class="operator">*</span></span><br><span class="line">     <span class="operator">*</span> </span><br><span class="line">     <span class="operator">*</span> <span class="operator">@</span>param root TreeNode类 </span><br><span class="line">     <span class="operator">*</span> <span class="operator">@</span><span class="keyword">return</span> int整型一维数组</span><br><span class="line">     <span class="operator">*/</span></span><br><span class="line">	</span><br><span class="line">    <span class="keyword">public</span> List<span class="operator">&lt;</span>Integer<span class="operator">&gt;</span> list <span class="operator">=</span> <span class="keyword">new</span> ArrayList<span class="operator">&lt;&gt;</span>();</span><br><span class="line">    <span class="keyword">public</span> int[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">	</span><br><span class="line">        list <span class="operator">=</span>  pre(root); <span class="comment">// 先设置一个函数，让他把二叉树的节点存入list中方便输出 ， 简单来说就是把二叉树转化为list形式的</span></span><br><span class="line">        int[] res <span class="operator">=</span> <span class="keyword">new</span> int[list.size()]; <span class="comment">// 设定一个输出数组 ，我们要遍历的其实是这个数组</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(int i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> list.size(); i<span class="operator">++</span>)&#123;</span><br><span class="line">           res[i] <span class="operator">=</span> list.<span class="built_in">get</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">	</span><br><span class="line">    &#125;</span><br><span class="line">    List<span class="operator">&lt;</span>Integer<span class="operator">&gt;</span>  pre(TreeNode node)&#123;</span><br><span class="line">	</span><br><span class="line">        <span class="keyword">if</span>(node <span class="operator">==</span> <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(node.<span class="keyword">val</span>);</span><br><span class="line">        pre(node.left);</span><br><span class="line">        pre(node.right);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>其时间复杂度和空间复杂度都是O（N）</li>
<li>用堆栈实现</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val = 0;</span></span><br><span class="line"><span class="comment"> *   TreeNode left = null;</span></span><br><span class="line"><span class="comment"> *   TreeNode right = null;</span></span><br><span class="line"><span class="comment"> *   public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param root TreeNode类 </span></span><br><span class="line"><span class="comment">     * @return int整型一维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        stack.<span class="keyword">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node=stack.<span class="keyword">pop</span>();</span><br><span class="line">            list.add(node.val);</span><br><span class="line">          </span><br><span class="line">            <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) stack.<span class="keyword">push</span>(node.right);</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) stack.<span class="keyword">push</span>(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res= <span class="keyword">new</span> <span class="keyword">int</span>[list.<span class="keyword">size</span>()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.<span class="keyword">size</span>();i++)&#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<ul>
<li>堆栈更简单可是更难理解，可以直接背</li>
</ul>
<h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util<span class="operator">.*</span>;</span><br><span class="line">	</span><br><span class="line"><span class="operator">/*</span></span><br><span class="line"> <span class="operator">*</span> <span class="keyword">public</span> <span class="keyword">class</span> TreeNode &#123;</span><br><span class="line"> <span class="operator">*</span>   int <span class="keyword">val</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> <span class="operator">*</span>   TreeNode left <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="operator">*</span>   TreeNode right <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> <span class="operator">*</span>   <span class="keyword">public</span> TreeNode(int <span class="keyword">val</span>) &#123;</span><br><span class="line"> <span class="operator">*</span>     this.<span class="keyword">val</span> <span class="operator">=</span> <span class="keyword">val</span>;</span><br><span class="line"> <span class="operator">*</span>   &#125;</span><br><span class="line"> <span class="operator">*</span> &#125;</span><br><span class="line"> <span class="operator">*/</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="operator">/**</span></span><br><span class="line">     <span class="operator">*</span> 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     <span class="operator">*</span></span><br><span class="line">     <span class="operator">*</span> </span><br><span class="line">     <span class="operator">*</span> <span class="operator">@</span>param root TreeNode类 </span><br><span class="line">     <span class="operator">*</span> <span class="operator">@</span><span class="keyword">return</span> int整型一维数组</span><br><span class="line">     <span class="operator">*/</span></span><br><span class="line">	</span><br><span class="line">    List<span class="operator">&lt;</span>Integer<span class="operator">&gt;</span> list <span class="operator">=</span><span class="keyword">new</span> ArrayList<span class="operator">&lt;&gt;</span>();</span><br><span class="line">    <span class="keyword">public</span> int[] inorderTraversal (TreeNode root) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        pre(root);</span><br><span class="line">        int[] res <span class="operator">=</span> <span class="keyword">new</span> int[list.size()];</span><br><span class="line">        <span class="keyword">for</span>(int i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> list.size(); i<span class="operator">++</span>)&#123;</span><br><span class="line">            res[i] <span class="operator">=</span> list.<span class="built_in">get</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    List<span class="operator">&lt;</span>Integer<span class="operator">&gt;</span> pre(TreeNode node)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node <span class="operator">==</span> <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        pre(node.left);</span><br><span class="line">        list.add(node.<span class="keyword">val</span>);</span><br><span class="line">        pre(node.right);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>用堆栈实现</li>
<li></li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val = 0;</span></span><br><span class="line"><span class="comment"> *   TreeNode left = null;</span></span><br><span class="line"><span class="comment"> *   TreeNode right = null;</span></span><br><span class="line"><span class="comment"> *   public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param root TreeNode类 </span></span><br><span class="line"><span class="comment">     * @return int整型一维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">        stack.<span class="keyword">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node=stack.<span class="keyword">pop</span>();</span><br><span class="line">			<span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) stack.<span class="keyword">push</span>(node.right);</span><br><span class="line">            list.add(node.val);</span><br><span class="line">            <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) stack.<span class="keyword">push</span>(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res= <span class="keyword">new</span> <span class="keyword">int</span>[list.<span class="keyword">size</span>()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.<span class="keyword">size</span>();i++)&#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="二叉树的后序遍历"><a href="#二叉树的后序遍历" class="headerlink" title="二叉树的后序遍历"></a>二叉树的后序遍历</h1><figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import java.util<span class="operator">.*</span>;</span><br><span class="line">	</span><br><span class="line">		<span class="operator">/*</span></span><br><span class="line">		 <span class="operator">*</span> <span class="keyword">public</span> <span class="keyword">class</span> TreeNode &#123;</span><br><span class="line">		 <span class="operator">*</span>   int <span class="keyword">val</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">		 <span class="operator">*</span>   TreeNode left <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		 <span class="operator">*</span>   TreeNode right <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">		 <span class="operator">*</span>   <span class="keyword">public</span> TreeNode(int <span class="keyword">val</span>) &#123;</span><br><span class="line">		 <span class="operator">*</span>     this.<span class="keyword">val</span> <span class="operator">=</span> <span class="keyword">val</span>;</span><br><span class="line">		 <span class="operator">*</span>   &#125;</span><br><span class="line">		 <span class="operator">*</span> &#125;</span><br><span class="line">		 <span class="operator">*/</span></span><br><span class="line">	</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">		    <span class="operator">/**</span></span><br><span class="line">		     <span class="operator">*</span> 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">		     <span class="operator">*</span></span><br><span class="line">		     <span class="operator">*</span> </span><br><span class="line">		     <span class="operator">*</span> <span class="operator">@</span>param root TreeNode类 </span><br><span class="line">		     <span class="operator">*</span> <span class="operator">@</span><span class="keyword">return</span> int整型一维数组</span><br><span class="line">		     <span class="operator">*/</span></span><br><span class="line">	</span><br><span class="line">		    List<span class="operator">&lt;</span>Integer<span class="operator">&gt;</span> list <span class="operator">=</span><span class="keyword">new</span> ArrayList<span class="operator">&lt;&gt;</span>();</span><br><span class="line">		    <span class="keyword">public</span> int[] inorderTraversal (TreeNode root) &#123;</span><br><span class="line">		        <span class="comment">// write code here</span></span><br><span class="line">		        pre(root);</span><br><span class="line">		        int[] res <span class="operator">=</span> <span class="keyword">new</span> int[list.size()];</span><br><span class="line">		        <span class="keyword">for</span>(int i <span class="operator">=</span> <span class="number">0</span>; i <span class="operator">&lt;</span> list.size(); i<span class="operator">++</span>)&#123;</span><br><span class="line">		            res[i] <span class="operator">=</span> list.<span class="built_in">get</span>(i);</span><br><span class="line">		        &#125;</span><br><span class="line">		        <span class="keyword">return</span> res;</span><br><span class="line">		    &#125;</span><br><span class="line">	</span><br><span class="line">		    List<span class="operator">&lt;</span>Integer<span class="operator">&gt;</span> pre(TreeNode node)&#123;</span><br><span class="line">		        <span class="keyword">if</span>(node <span class="operator">==</span> <span class="literal">null</span>)&#123;</span><br><span class="line">		            <span class="keyword">return</span> list;</span><br><span class="line">		        &#125;</span><br><span class="line">		        pre(node.right);</span><br><span class="line">		        list.add(node.<span class="keyword">val</span>);</span><br><span class="line">		        pre(node.left);</span><br><span class="line">		        <span class="keyword">return</span> list;</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>用堆栈实现</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val = 0;</span></span><br><span class="line"><span class="comment"> *   TreeNode left = null;</span></span><br><span class="line"><span class="comment"> *   TreeNode right = null;</span></span><br><span class="line"><span class="comment"> *   public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *   &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param root TreeNode类 </span></span><br><span class="line"><span class="comment">     * @return int整型一维数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">	</span><br><span class="line">        stack.<span class="keyword">push</span>(root);</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node=stack.<span class="keyword">pop</span>();</span><br><span class="line">				<span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) stack.<span class="keyword">push</span>(node.left);</span><br><span class="line">            list.add(node.val);</span><br><span class="line">			<span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) stack.<span class="keyword">push</span>(node.right);</span><br><span class="line">         </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res= <span class="keyword">new</span> <span class="keyword">int</span>[list.<span class="keyword">size</span>()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.<span class="keyword">size</span>();i++)&#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<h1 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h1><ul>
<li>bfs</li>
<li></li>
</ul>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> ArrayList&lt;ArrayList&lt;<span class="built_in">Integer</span>&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">    <span class="comment">//边界条件判断</span></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="built_in">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    <span class="built_in">Queue</span>&lt;TreeNode&gt; <span class="built_in">queue</span> = <span class="literal">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;ArrayList&lt;<span class="built_in">Integer</span>&gt;&gt; res = <span class="literal">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//根节点入队</span></span><br><span class="line">    <span class="built_in">queue</span>.add(root);</span><br><span class="line">    <span class="comment">//如果队列不为空就继续循环</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">queue</span>.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//BFS打印，levelNum表示的是每层的结点数</span></span><br><span class="line">        int levelNum = <span class="built_in">queue</span>.size();</span><br><span class="line">        <span class="comment">//subList存储的是每层的结点值</span></span><br><span class="line">        ArrayList&lt;<span class="built_in">Integer</span>&gt; subList = <span class="literal">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = <span class="number">0</span>; i &lt; levelNum; i++) &#123;</span><br><span class="line">            <span class="comment">//出队</span></span><br><span class="line">            TreeNode node = <span class="built_in">queue</span>.poll();</span><br><span class="line">            subList.add(node.val);</span><br><span class="line">            <span class="comment">//左右子节点如果不为空就加入到队列中</span></span><br><span class="line">            <span class="keyword">if</span> (node.left != <span class="built_in">null</span>)</span><br><span class="line">                <span class="built_in">queue</span>.add(node.left);</span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="built_in">null</span>)</span><br><span class="line">                <span class="built_in">queue</span>.add(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把每层的结点值存储在res中，</span></span><br><span class="line">        res.add(subList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>dfs</li>
<li></li>
</ul>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; level<span class="constructor">Order(TreeNode <span class="params">root</span>)</span> &#123;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>;</span><br><span class="line">    level<span class="constructor">Helper(<span class="params">res</span>, <span class="params">root</span>, 0)</span>;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void level<span class="constructor">Helper(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; <span class="params">list</span>, TreeNode <span class="params">root</span>, <span class="params">int</span> <span class="params">level</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//边界条件判断</span></span><br><span class="line">    <span class="keyword">if</span> (root<span class="operator"> == </span>null)</span><br><span class="line">        return;</span><br><span class="line">    <span class="comment">//level表示的是层数，如果level &gt;= list.size()，说明到下一层了，所以</span></span><br><span class="line">    <span class="comment">//要先把下一层的list初始化，防止下面add的时候出现空指针异常</span></span><br><span class="line">    <span class="keyword">if</span> (level &gt;= <span class="built_in">list</span>.size<span class="literal">()</span>) &#123;</span><br><span class="line">        <span class="built_in">list</span>.add(<span class="keyword">new</span> ArrayList&lt;&gt;<span class="literal">()</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//level表示的是第几层，这里访问到第几层，我们就把数据加入到第几层</span></span><br><span class="line">    <span class="built_in">list</span>.get(level).add(root.<span class="keyword">val</span>);</span><br><span class="line">    <span class="comment">//当前节点访问完之后，再使用递归的方式分别访问当前节点的左右子节点</span></span><br><span class="line">    level<span class="constructor">Helper(<span class="params">list</span>, <span class="params">root</span>.<span class="params">left</span>, <span class="params">level</span> + 1)</span>;</span><br><span class="line">    level<span class="constructor">Helper(<span class="params">list</span>, <span class="params">root</span>.<span class="params">right</span>, <span class="params">level</span> + 1)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="按照之字型打印二叉树"><a href="#按照之字型打印二叉树" class="headerlink" title="按照之字型打印二叉树"></a>按照之字型打印二叉树</h1><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="built_in">public</span> <span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="built_in">public</span> ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt; &gt; Print(TreeNode pRoot) &#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; q = <span class="built_in">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;ArrayList&lt;<span class="type">Integer</span>&gt;&gt; res = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span> rev = <span class="keyword">true</span>;</span><br><span class="line">        q.<span class="keyword">add</span>(pRoot);</span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span> size = q.size();</span><br><span class="line">            ArrayList&lt;<span class="type">Integer</span>&gt; list = <span class="built_in">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">                TreeNode node = q.poll();</span><br><span class="line">                <span class="keyword">if</span>(node == <span class="keyword">null</span>)&#123;<span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>(rev)&#123;</span><br><span class="line">                    list.<span class="keyword">add</span>(node.val);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    list.<span class="keyword">add</span>(<span class="number">0</span>, node.val);</span><br><span class="line">                &#125;</span><br><span class="line">                q.offer(node.left);</span><br><span class="line">                q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(list.size()!=<span class="number">0</span>)&#123;res.<span class="keyword">add</span>(list);&#125;</span><br><span class="line">            rev=!rev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span> <span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//空节点没有深度</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//队列维护层次后续节点</span></span><br><span class="line">        Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;(); </span><br><span class="line">        <span class="comment">//根入队</span></span><br><span class="line">        q.offer(root); </span><br><span class="line">        <span class="comment">//记录深度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line">        <span class="comment">//层次遍历</span></span><br><span class="line">        <span class="keyword">while</span>(!q.isEmpty())&#123; </span><br><span class="line">            <span class="comment">//记录当前层有多少节点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> q.size(); </span><br><span class="line">            <span class="comment">//遍历完这一层，再进入下一层</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123; </span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> q.poll();</span><br><span class="line">                <span class="comment">//添加下一层的左右节点</span></span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>) </span><br><span class="line">                    q.offer(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>)</span><br><span class="line">                    q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//深度加1</span></span><br><span class="line">            res++; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>用堆栈因该也可以，尝试想想</li>
</ul>
<h1 id="二叉树中和为某一个值的路径"><a href="#二叉树中和为某一个值的路径" class="headerlink" title="二叉树中和为某一个值的路径"></a>二叉树中和为某一个值的路径</h1><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *   int val = 0;</span></span><br><span class="line"><span class="comment"> *   TreeNode left = null;</span></span><br><span class="line"><span class="comment"> *   TreeNode right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param root TreeNode类 </span></span><br><span class="line"><span class="comment">     * @param sum int整型 </span></span><br><span class="line"><span class="comment">     * @return bool布尔型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> hasPathSum (TreeNode root, <span class="built_in">int</span> <span class="keyword">sum</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> helper(root,<span class="keyword">sum</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> helper(TreeNode node,<span class="built_in">int</span> <span class="keyword">sum</span>,<span class="built_in">int</span> preSum)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> node.val + preSum == <span class="keyword">sum</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        preSum += node.val;</span><br><span class="line">        <span class="keyword">return</span> helper(node.left,<span class="keyword">sum</span>,preSum) || helper(node.right,<span class="keyword">sum</span> ,preSum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="二叉搜索树和双向链表"><a href="#二叉搜索树和双向链表" class="headerlink" title="二叉搜索树和双向链表"></a>二叉搜索树和双向链表</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">	</span><br><span class="line">    TreeNode pre= <span class="literal">null</span>;</span><br><span class="line">    TreeNode <span class="attribute">root</span>=<span class="literal">null</span>;</span><br><span class="line">    public TreeNode Convert(TreeNode pRootOfTree) &#123;</span><br><span class="line">        <span class="keyword">if</span>(pRootOfTree ==<span class="literal">null</span>) return <span class="literal">null</span>;</span><br><span class="line">        Convert(pRootOfTree.left);</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="attribute">root</span>=pRootOfTree;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">            pRootOfTree.<span class="attribute">left</span>=pre;</span><br><span class="line">            pre.<span class="attribute">right</span>=pRootOfTree;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">pre</span>=pRootOfTree;</span><br><span class="line">        Convert(pRootOfTree.right);</span><br><span class="line">        return root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>牛客刷题</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>数仓</title>
    <url>/2001/02/13/%E6%95%B0%E4%BB%93/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>正常的数据：</p>
<ul>
<li>日志</li>
<li>业务</li>
<li>其他</li>
</ul>
<p>数仓可以做的功能：</p>
<ul>
<li>数据报表：显示数据</li>
<li>用户画像：就是按照消费能力分组</li>
<li>做推荐系统</li>
<li>机器&#x2F;深度学习 ： 预测走向</li>
<li>风控：风险控制 -&gt; 例子：薅羊毛太多进黑名单</li>
</ul>
<p>电商行业为列：</p>
<ul>
<li>展示商品都是业务数据-&gt;存放在业务数据库 mysql&#x2F;es</li>
<li>用户与页面交互的时候发送的数据，据说作用在html上的操作数据，甚至是鼠标停留时间</li>
<li>其他数据包括-&gt; 线下的一些行为，比如签单等，或者excel，hdfs，redis，mongo等</li>
</ul>
<p>数据仓库：</p>
<ul>
<li>数据采集</li>
<li>数仓建设 0-1</li>
<li>数据可视化</li>
</ul>
<p>技术选型：</p>
<ul>
<li>数据采集：flume日志，业务sqoop，datax，自己开发</li>
<li>数据存储：hdfs，hbase，mysql，clickhouse，drios</li>
<li>数据计算：hive，spark，flink，hbase-&gt; phonix</li>
<li>数据可视化：superset&#x2F;dataeases echarts quickbi datav sugar</li>
<li>任务调度：xxl dolphin airflow azkzban oozie 自己开发</li>
<li>报警系统：手写钉钉报警 微信 电话 邮箱 zabbix 普罗米修斯</li>
<li>元数据管理：任务元数据 管理 -&gt; 可做可不做 atlas datahub 自己开发 -&gt; 看airflow里或者原生的antlr4&#x2F;calicete</li>
<li>临时查询工具：ad-hoc 即席查询 -&gt; presto ,sparksql ,kylin ,impala,druid ,phonix</li>
</ul>
<p>impala + kudu &#x3D;&gt; 数仓</p>
<p>hive &#x3D;&gt;  数仓</p>
<p>hbase &#x3D;&gt; 数仓</p>
<p>数据湖 &#x3D;&gt; 数仓</p>
<p>流程 ：</p>
<p>app 产生数据 ：</p>
<ul>
<li>业务数据 ：sqoop&#x2F;datax&#x2F;自己开发的 -&gt; hive&#x2F;hdfs -&gt; 数据分层 -&gt; myqsl&#x2F;Ck -&gt; 可视化</li>
<li>日志数据 ：用户触发埋点则产生日志数据 -&gt; 存到日志落盘机 -&gt; flume -&gt; hdfs（离线）&#x2F;kafka-flume-hdfs(半实时) -&gt; 数据分层-&gt; mysql&#x2F;Ck -&gt; 可视化</li>
</ul>
<p>离线数仓：我们要做的</p>
<ul>
<li>数据采集</li>
<li>数仓搭建</li>
<li>数据质量监控</li>
</ul>
<p>离线数仓：</p>
<ul>
<li>数据分层<ul>
<li>ods operation data store &#x3D;&gt; 原数据层</li>
<li>dw 层<ul>
<li>dwd data warehouse detail： 数据明细层 etl</li>
<li>dwm data warehouse middle：去重以及确定指标需求</li>
<li>dws  data warehouse serive:   构建宽表的</li>
</ul>
</li>
<li>ads&#x2F;rpt层：application data store -&gt; 数据应用层<ul>
<li>出结果的基于dws层<ul>
<li>各个维度的结果表</li>
<li>维度聚合形成的结果表</li>
</ul>
</li>
</ul>
</li>
<li>dim 维度层<ul>
<li>业务字段不够，要补充的表的位置</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>为什么要进行数据分层：</p>
<ul>
<li>复杂问题简单化</li>
<li>增加数据复用性</li>
<li>减少代码运行时间</li>
<li>隔离原始数据 ： 个别公司访问数据有权限</li>
<li>校验数据</li>
</ul>
<p>数据仓库的分层不是越多越好，合理设计最重要</p>
]]></content>
      <categories>
        <category>日志</category>
      </categories>
      <tags>
        <tag>数仓</tag>
      </tags>
  </entry>
  <entry>
    <title>自我认为的知识点</title>
    <url>/2022/12/15/%E6%8A%80%E6%9C%AF%E7%82%B9/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>awk为什么会被称作linux三剑客之一，相比于cut如何？</p>
<p>场景 ： 通过ssh bigdata2 “jps | xxx | awk ‘{print $1}’” :结果如何 ？前提条件 ：bigdata2的密钥已经添加在当前的机器上，且jps能查到xxx的进程号</p>
<h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>场景 ： 当所有命令都提示找不到命令 ，是什么原因 ，如何解决 ？</p>
<p>场景 ： 当有命令提示找不到命令 ，是什么原因 ，如何解决 ？</p>
<h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p>众所周知 ，root用户有最高的权限 ，那么当我们在hadoop用户启动程序通过jps能查看到信息的，切换到root用户我们可以看见信息吗</p>
<h2 id="问题4"><a href="#问题4" class="headerlink" title="问题4"></a>问题4</h2><p>一台机器里有hadoop ,zihang ,root 三个用户 ，你所在的用户是root ，当你执行su - zihang 的时候什么也没出现并且你还在root用户，这个是什么原因，如何修复</p>
<h2 id="问题5"><a href="#问题5" class="headerlink" title="问题5"></a>问题5</h2><p>linux里查看内存负载，以及所用内存，以及设置swap分区的命令及步骤，</p>
<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><h2 id="问题1-1"><a href="#问题1-1" class="headerlink" title="问题1"></a>问题1</h2><p>shell里如何控制从控制台输入的参数，传进函数里的个数</p>
<h2 id="问题2-1"><a href="#问题2-1" class="headerlink" title="问题2"></a>问题2</h2><p>shell 里截取字符串以及替换字符串是如何实现的</p>
<h2 id="问题3-1"><a href="#问题3-1" class="headerlink" title="问题3"></a>问题3</h2><p>shell里的$全家桶</p>
<h2 id="问题4-1"><a href="#问题4-1" class="headerlink" title="问题4"></a>问题4</h2><p>shell里单引号，双引号，漂号的区别，以及两种括号的形式（）和{}的区别</p>
<h2 id="问题5-1"><a href="#问题5-1" class="headerlink" title="问题5"></a>问题5</h2><p>shell脚本执行不了，但是代码毫无问题，只是单纯提示最后一行结尾不对，原因有几种，解决办法是什么</p>
<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h2 id="问题1-2"><a href="#问题1-2" class="headerlink" title="问题1"></a>问题1</h2><p>mysql中where和having的区别</p>
<h2 id="问题2-2"><a href="#问题2-2" class="headerlink" title="问题2"></a>问题2</h2><p>mysql中我如果想把竖着的一列变成横着的如何操作：</p>
<table>
<thead>
<tr>
<th>人数</th>
<th>部门</th>
</tr>
</thead>
<tbody><tr>
<td>11</td>
<td>a</td>
</tr>
</tbody></table>
<p>其中5人生病，6人未生病，如何变成下面的样子:说出大概思路即可</p>
<table>
<thead>
<tr>
<th>人数</th>
<th>部门</th>
<th>生病人数</th>
<th>未生病人数</th>
</tr>
</thead>
<tbody><tr>
<td>11</td>
<td>a</td>
<td>0</td>
<td>6</td>
</tr>
<tr>
<td>11</td>
<td>a</td>
<td>5</td>
<td>0</td>
</tr>
</tbody></table>
<h2 id="问题3-2"><a href="#问题3-2" class="headerlink" title="问题3"></a>问题3</h2><p>mysql中判断空值的方法有什么，以及多路选择的方法</p>
<h2 id="问题4-2"><a href="#问题4-2" class="headerlink" title="问题4"></a>问题4</h2><p>在往mysql的表里插入数据的时候，发现带有中文的字符插入不进去，如何解决，什么原因造成的，mysql8及以后如何</p>
<h2 id="问题5-2"><a href="#问题5-2" class="headerlink" title="问题5"></a>问题5</h2><p>你认为mysql为什么到目前为止都没有被淘汰？</p>
<h1 id="hadoop"><a href="#hadoop" class="headerlink" title="hadoop"></a>hadoop</h1><h2 id="问题1-3"><a href="#问题1-3" class="headerlink" title="问题1"></a>问题1</h2><p>关于hadoop的基础架构，以及mr的流程</p>
<h2 id="问题2-3"><a href="#问题2-3" class="headerlink" title="问题2"></a>问题2</h2><p>关于客户端向hdfs上传输数据的流程，而且它是如何被分块的</p>
<h2 id="问题3-3"><a href="#问题3-3" class="headerlink" title="问题3"></a>问题3</h2><p>hadoop文件存储的放置策略，以及为什么这样放置</p>
<h2 id="问题4-3"><a href="#问题4-3" class="headerlink" title="问题4"></a>问题4</h2><p>Hadoop上的yarn的申请资源的流程，以及为什么要使用多块物理磁盘？</p>
<h2 id="问题5-3"><a href="#问题5-3" class="headerlink" title="问题5"></a>问题5</h2><p>hdfs上的压缩格式，以及优缺点，和我们常用的</p>
<h2 id="问题6"><a href="#问题6" class="headerlink" title="问题6"></a>问题6</h2><p>hadoop序列化</p>
<p>序列化就是把内存中的对象转换成字节序列(或其他数据传输协议)，以便存储于磁盘和网络传输。</p>
<p>优点 ：</p>
<p>紧凑：高效使用存储空间</p>
<p>快速：读写数据额外开销小</p>
<p>可扩展性：随着通讯协议的升级而升级</p>
<p>互操性：支持多语言的交互</p>
<h2 id="问题7"><a href="#问题7" class="headerlink" title="问题7"></a>问题7</h2><p>yarn调度器</p>
<h2 id="问题8"><a href="#问题8" class="headerlink" title="问题8"></a>问题8</h2><p>分区vs分桶</p>
<p>分区表：在逻辑上，将表中的数据按分区放在表目录的对应子目录中，在物理上，分区表和未分区表没有区别，分区表在表创建完成时，也可以通过alter table来添加或者删除，而且分区键一定不是原表中的列。<br>桶表：不同表对同一字段分桶，且当两张表桶数相同时，数据会分配到同一个节点上，join时会减少shuffle，和分区键不同，分桶键必须是原表中的列，分桶表中每个桶的文件作了排序，分桶数应为质数，每个桶文件大小应在100MB~200MB之间，事务表必须指定分桶，且分桶数是不可以被更新的。</p>
<h2 id="问题9"><a href="#问题9" class="headerlink" title="问题9"></a>问题9</h2><p>yarn原理</p>
<h1 id="hive"><a href="#hive" class="headerlink" title="hive"></a>hive</h1><h2 id="问题1-4"><a href="#问题1-4" class="headerlink" title="问题1"></a>问题1</h2><p>你所理解的hive是什么？</p>
<h2 id="问题2-4"><a href="#问题2-4" class="headerlink" title="问题2"></a>问题2</h2><p>hive在mysql中的几个关键表都是什么</p>
<h2 id="问题3-4"><a href="#问题3-4" class="headerlink" title="问题3"></a>问题3</h2><p>hive里空值如何处理，hive中mapjoin如何开启以及开启之后的原理</p>
<h2 id="问题4-4"><a href="#问题4-4" class="headerlink" title="问题4"></a>问题4</h2><p>hive里内部表和外部表的区别，以及如何转化</p>
<h2 id="问题5-4"><a href="#问题5-4" class="headerlink" title="问题5"></a>问题5</h2><p>hive里的开窗函数能用在什么函数上，开窗之后还可以分组吗</p>
<h2 id="问题6-1"><a href="#问题6-1" class="headerlink" title="问题6"></a>问题6</h2><p>hive如何把一列数据转化为数组，并且hive的适用场景是什么</p>
<h1 id="flume"><a href="#flume" class="headerlink" title="flume"></a>flume</h1><h2 id="问题1-5"><a href="#问题1-5" class="headerlink" title="问题1"></a>问题1</h2><p>flume如何设置传输到hdfs上的数据的压缩格式</p>
<h2 id="问题2-5"><a href="#问题2-5" class="headerlink" title="问题2"></a>问题2</h2><p>flume如何控制小文件的数量，以及如何监控flume的采集情况</p>
<h2 id="问题3-5"><a href="#问题3-5" class="headerlink" title="问题3"></a>问题3</h2><p>flume如何控制多个channel和Sink，以及控制形式都有什么</p>
<h2 id="问题4-5"><a href="#问题4-5" class="headerlink" title="问题4"></a>问题4</h2><p>现阶段如何解决日志数据延迟性问题</p>
<h2 id="问题5-5"><a href="#问题5-5" class="headerlink" title="问题5"></a>问题5</h2><p>flume采集的数据文件会丢失吗，为什么以及taildir所谓的断点续传是什么，由什么控制</p>
<h1 id="sqoop"><a href="#sqoop" class="headerlink" title="sqoop"></a>sqoop</h1><h2 id="问题1-6"><a href="#问题1-6" class="headerlink" title="问题1"></a>问题1</h2><p>sqoop同步mysql到hive的时候如何设置分区表</p>
<h2 id="问题2-6"><a href="#问题2-6" class="headerlink" title="问题2"></a>问题2</h2><p>sqoop是走mr程序吗？为什么sqoop运行如此的慢</p>
<h2 id="问题3-6"><a href="#问题3-6" class="headerlink" title="问题3"></a>问题3</h2><p>sqoop同步hive到mysql的时候经常因为不明原因就中断了，如何解决</p>
<h2 id="问题4-6"><a href="#问题4-6" class="headerlink" title="问题4"></a>问题4</h2><p>sqoop同步hive到mysql分区表的思路以及操作是什么</p>
<h2 id="问题5-6"><a href="#问题5-6" class="headerlink" title="问题5"></a>问题5</h2><p>sqoop导入数据的时候如何保证数据的幂等性</p>
<h1 id="zk"><a href="#zk" class="headerlink" title="zk"></a>zk</h1><h2 id="问题1-7"><a href="#问题1-7" class="headerlink" title="问题1"></a>问题1</h2><p>如何创建临时节点和永久节点</p>
<h2 id="问题2-7"><a href="#问题2-7" class="headerlink" title="问题2"></a>问题2</h2><p>四字命令是干什么的</p>
<h2 id="问题3-7"><a href="#问题3-7" class="headerlink" title="问题3"></a>问题3</h2><p>zk命令行监听和api监听的区别，通过上面命令进行监听</p>
<h2 id="问题4-7"><a href="#问题4-7" class="headerlink" title="问题4"></a>问题4</h2><p>如何创建顺序节点</p>
<h2 id="问题5-7"><a href="#问题5-7" class="headerlink" title="问题5"></a>问题5</h2><p>zk如何管理我们的namenode的上位，以及，如何监控的</p>
]]></content>
      <categories>
        <category>整理</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
