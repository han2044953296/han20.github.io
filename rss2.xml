<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>枫叶冢</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>只有努力不会辜负你</description>
    <pubDate>Thu, 27 Oct 2022 04:24:44 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>杂项</title>
      <link>http://example.com/2022/10/27/%E6%9D%82%E9%A1%B9/</link>
      <guid>http://example.com/2022/10/27/%E6%9D%82%E9%A1%B9/</guid>
      <pubDate>Thu, 27 Oct 2022 04:19:27 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;查看自己电脑可支持的最大内存&quot;&gt;&lt;a href=&quot;#查看自己电脑可支持的最大内存&quot; class=&quot;headerlink&quot; title=&quot;查看自己电脑可支持的最大内存&quot;&gt;&lt;/a&gt;查看自己电脑可支持的最大内存&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;打开cmd&lt;/li&gt;
&lt;li&gt;输</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="查看自己电脑可支持的最大内存"><a href="#查看自己电脑可支持的最大内存" class="headerlink" title="查看自己电脑可支持的最大内存"></a>查看自己电脑可支持的最大内存</h1><ul><li>打开cmd</li><li>输入wmic memphysical get maxcapacity</li><li>就会获得字节数</li><li>除以两个1024，就会是xxxG</li></ul><h1 id="查看电脑有几个卡槽"><a href="#查看电脑有几个卡槽" class="headerlink" title="查看电脑有几个卡槽"></a>查看电脑有几个卡槽</h1><ul><li>打开任务管理器</li><li>选择性能</li><li>上面就有已经使用了几个卡槽</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%9D%82%E9%A1%B9/">杂项</category>
      
      
      
      <comments>http://example.com/2022/10/27/%E6%9D%82%E9%A1%B9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>第一天</title>
      <link>http://example.com/2022/10/27/%E7%89%9B%E5%AE%A21/</link>
      <guid>http://example.com/2022/10/27/%E7%89%9B%E5%AE%A21/</guid>
      <pubDate>Thu, 27 Oct 2022 02:11:21 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;实现二叉树的前序遍历&quot;&gt;&lt;a href=&quot;#实现二叉树的前序遍历&quot; class=&quot;headerlink&quot; title=&quot;实现二叉树的前序遍历&quot;&gt;&lt;/a&gt;实现二叉树的前序遍历&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;tabl</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="实现二叉树的前序遍历"><a href="#实现二叉树的前序遍历" class="headerlink" title="实现二叉树的前序遍历"></a>实现二叉树的前序遍历</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * public class TreeNode &#123; // 树形结构</span><br><span class="line"> *   int val = 0;</span><br><span class="line"> *   TreeNode left = null;</span><br><span class="line"> *   TreeNode right = null;</span><br><span class="line"> *   public TreeNode(int val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     * </span><br><span class="line">     * @param root TreeNode类 </span><br><span class="line">     * @return int整型一维数组</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public List&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">    public int[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        // write code here</span><br><span class="line"></span><br><span class="line">        list =  pre(root); // 先设置一个函数，让他把二叉树的节点存入list中方便输出 ， 简单来说就是把二叉树转化为list形式的</span><br><span class="line">        int[] res = new int[list.size()]; // 设定一个输出数组 ，我们要遍历的其实是这个数组</span><br><span class="line"></span><br><span class="line">        for(int i = 0; i &lt; list.size(); i++)&#123;</span><br><span class="line">           res[i] = list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt;  pre(TreeNode node)&#123;</span><br><span class="line"></span><br><span class="line">        if(node == null)&#123;</span><br><span class="line">                return list;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(node.val);</span><br><span class="line">        pre(node.left);</span><br><span class="line">        pre(node.right);</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>其时间复杂度和空间复杂度都是O（N）</li><li>用堆栈实现<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *   int val = 0;</span><br><span class="line"> *   TreeNode left = null;</span><br><span class="line"> *   TreeNode right = null;</span><br><span class="line"> *   public TreeNode(int val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     * </span><br><span class="line">     * @param root TreeNode类 </span><br><span class="line">     * @return int整型一维数组</span><br><span class="line">     */</span><br><span class="line">    private List&lt;Integer&gt; list=new ArrayList&lt;&gt;();</span><br><span class="line">    public int[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        // write code here</span><br><span class="line">        if(root==null) return new int[0];</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=new Stack&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        while(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            list.add(node.val);</span><br><span class="line">            </span><br><span class="line">            if(node.right!=null) stack.push(node.right);</span><br><span class="line">            if(node.left!=null) stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        int[] res= new int[list.size()];</span><br><span class="line">        for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>堆栈更简单可是更难理解，可以直接背</li></ul><h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *   int val = 0;</span><br><span class="line"> *   TreeNode left = null;</span><br><span class="line"> *   TreeNode right = null;</span><br><span class="line"> *   public TreeNode(int val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     * </span><br><span class="line">     * @param root TreeNode类 </span><br><span class="line">     * @return int整型一维数组</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list =new ArrayList&lt;&gt;();</span><br><span class="line">    public int[] inorderTraversal (TreeNode root) &#123;</span><br><span class="line">        // write code here</span><br><span class="line">        pre(root);</span><br><span class="line">        int[] res = new int[list.size()];</span><br><span class="line">        for(int i = 0; i &lt; list.size(); i++)&#123;</span><br><span class="line">            res[i] = list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; pre(TreeNode node)&#123;</span><br><span class="line">        if(node == null)&#123;</span><br><span class="line">            return list;</span><br><span class="line">        &#125;</span><br><span class="line">        pre(node.left);</span><br><span class="line">        list.add(node.val);</span><br><span class="line">        pre(node.right);</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>用堆栈实现</li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *   int val = 0;</span><br><span class="line"> *   TreeNode left = null;</span><br><span class="line"> *   TreeNode right = null;</span><br><span class="line"> *   public TreeNode(int val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     * </span><br><span class="line">     * @param root TreeNode类 </span><br><span class="line">     * @return int整型一维数组</span><br><span class="line">     */</span><br><span class="line">    private List&lt;Integer&gt; list=new ArrayList&lt;&gt;();</span><br><span class="line">    public int[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        // write code here</span><br><span class="line">        if(root==null) return new int[0];</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=new Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        stack.push(root);</span><br><span class="line">        while(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">if(node.right!=null) stack.push(node.right);</span><br><span class="line">            list.add(node.val);</span><br><span class="line">            if(node.left!=null) stack.push(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        int[] res= new int[list.size()];</span><br><span class="line">        for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="二叉树的后序遍历"><a href="#二叉树的后序遍历" class="headerlink" title="二叉树的后序遍历"></a>二叉树的后序遍历</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *   int val = 0;</span><br><span class="line"> *   TreeNode left = null;</span><br><span class="line"> *   TreeNode right = null;</span><br><span class="line"> *   public TreeNode(int val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     * </span><br><span class="line">     * @param root TreeNode类 </span><br><span class="line">     * @return int整型一维数组</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list =new ArrayList&lt;&gt;();</span><br><span class="line">    public int[] inorderTraversal (TreeNode root) &#123;</span><br><span class="line">        // write code here</span><br><span class="line">        pre(root);</span><br><span class="line">        int[] res = new int[list.size()];</span><br><span class="line">        for(int i = 0; i &lt; list.size(); i++)&#123;</span><br><span class="line">            res[i] = list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; pre(TreeNode node)&#123;</span><br><span class="line">        if(node == null)&#123;</span><br><span class="line">            return list;</span><br><span class="line">        &#125;</span><br><span class="line">        pre(node.right);</span><br><span class="line">        list.add(node.val);</span><br><span class="line">        pre(node.left);</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>用堆栈实现<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * public class TreeNode &#123;</span><br><span class="line"> *   int val = 0;</span><br><span class="line"> *   TreeNode left = null;</span><br><span class="line"> *   TreeNode right = null;</span><br><span class="line"> *   public TreeNode(int val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *   &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class Solution &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span><br><span class="line">     *</span><br><span class="line">     * </span><br><span class="line">     * @param root TreeNode类 </span><br><span class="line">     * @return int整型一维数组</span><br><span class="line">     */</span><br><span class="line">    private List&lt;Integer&gt; list=new ArrayList&lt;&gt;();</span><br><span class="line">    public int[] preorderTraversal (TreeNode root) &#123;</span><br><span class="line">        // write code here</span><br><span class="line">        if(root==null) return new int[0];</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=new Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        stack.push(root);</span><br><span class="line">        while(!stack.isEmpty())&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">if(node.left!=null) stack.push(node.left);</span><br><span class="line">            list.add(node.val);</span><br><span class="line">if(node.right!=null) stack.push(node.right);</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        int[] res= new int[list.size()];</span><br><span class="line">        for(int i=0;i&lt;list.size();i++)&#123;</span><br><span class="line">            res[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="二叉树的层序遍历"><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h1><ul><li>bfs</li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">    //边界条件判断</span><br><span class="line">    if (root == null)</span><br><span class="line">        return new ArrayList&lt;&gt;();</span><br><span class="line">    //队列</span><br><span class="line">    Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">    //根节点入队</span><br><span class="line">    queue.add(root);</span><br><span class="line">    //如果队列不为空就继续循环</span><br><span class="line">    while (!queue.isEmpty()) &#123;</span><br><span class="line">        //BFS打印，levelNum表示的是每层的结点数</span><br><span class="line">        int levelNum = queue.size();</span><br><span class="line">        //subList存储的是每层的结点值</span><br><span class="line">        ArrayList&lt;Integer&gt; subList = new ArrayList&lt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; levelNum; i++) &#123;</span><br><span class="line">            //出队</span><br><span class="line">            TreeNode node = queue.poll();</span><br><span class="line">            subList.add(node.val);</span><br><span class="line">            //左右子节点如果不为空就加入到队列中</span><br><span class="line">            if (node.left != null)</span><br><span class="line">                queue.add(node.left);</span><br><span class="line">            if (node.right != null)</span><br><span class="line">                queue.add(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        //把每层的结点值存储在res中，</span><br><span class="line">        res.add(subList);</span><br><span class="line">    &#125;</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>dfs</li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public ArrayList&lt;ArrayList&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">    levelHelper(res, root, 0);</span><br><span class="line">    return res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void levelHelper(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list, TreeNode root, int level) &#123;</span><br><span class="line">    //边界条件判断</span><br><span class="line">    if (root == null)</span><br><span class="line">        return;</span><br><span class="line">    //level表示的是层数，如果level &gt;= list.size()，说明到下一层了，所以</span><br><span class="line">    //要先把下一层的list初始化，防止下面add的时候出现空指针异常</span><br><span class="line">    if (level &gt;= list.size()) &#123;</span><br><span class="line">        list.add(new ArrayList&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">    //level表示的是第几层，这里访问到第几层，我们就把数据加入到第几层</span><br><span class="line">    list.get(level).add(root.val);</span><br><span class="line">    //当前节点访问完之后，再使用递归的方式分别访问当前节点的左右子节点</span><br><span class="line">    levelHelper(list, root.left, level + 1);</span><br><span class="line">    levelHelper(list, root.right, level + 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="按照之字型打印二叉树"><a href="#按照之字型打印二叉树" class="headerlink" title="按照之字型打印二叉树"></a>按照之字型打印二叉树</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.LinkedList;</span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public ArrayList&lt;ArrayList&lt;Integer&gt; &gt; Print(TreeNode pRoot) &#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; q = new LinkedList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();</span><br><span class="line">        boolean rev = true;</span><br><span class="line">        q.add(pRoot);</span><br><span class="line">        while(!q.isEmpty())&#123;</span><br><span class="line">            int size = q.size();</span><br><span class="line">            ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">            for(int i=0; i&lt;size; i++)&#123;</span><br><span class="line">                TreeNode node = q.poll();</span><br><span class="line">                if(node == null)&#123;continue;&#125;</span><br><span class="line">                if(rev)&#123;</span><br><span class="line">                    list.add(node.val);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    list.add(0, node.val);</span><br><span class="line">                &#125;</span><br><span class="line">                q.offer(node.left);</span><br><span class="line">                q.offer(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            if(list.size()!=0)&#123;res.add(list);&#125;</span><br><span class="line">            rev=!rev;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98/">牛客刷题</category>
      
      
      
      <comments>http://example.com/2022/10/27/%E7%89%9B%E5%AE%A21/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Map</title>
      <link>http://example.com/2022/10/27/10-27/</link>
      <guid>http://example.com/2022/10/27/10-27/</guid>
      <pubDate>Thu, 27 Oct 2022 01:00:17 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Map&quot;&gt;&lt;a href=&quot;#Map&quot; class=&quot;headerlink&quot; title=&quot;Map&quot;&gt;&lt;/a&gt;Map&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Map和集合是无关系的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Map是个接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;旗下有</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><ul><li><p>Map和集合是无关系的</p></li><li><p>Map是个接口</p></li><li><p>旗下有hashMap和TreeMap</p></li><li><p>简单代码</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Map&lt;String , String&gt; map1 = new HashMap&lt;&gt;();</span><br><span class="line">map1.put(&quot;1&quot;, &quot;事假&quot;);</span><br><span class="line">map1.put(&quot;2&quot;, &quot;病假&quot;);</span><br><span class="line">map1.put(&quot;3&quot;, &quot;产假&quot;);</span><br><span class="line">map1.put(&quot;2&quot;, &quot;施加&quot;);</span><br><span class="line">Set&lt;String&gt; ks = map1.keySet();</span><br><span class="line">Iterator&lt;String&gt; it = ks.iterator();</span><br><span class="line">while(it.hasNext()) &#123;</span><br><span class="line">String item = it.next();</span><br><span class="line">System.out.println(&quot;key&quot; + item + &quot;@value:&quot; + map1.get(item));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>entrySet</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Set&lt;Map.Entry&lt;String, String&gt;&gt; km = map1.entrySet();</span><br><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; il = km.iterator();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while(il.hasNext()) &#123;</span><br><span class="line">Entry&lt;String , String&gt; entry = il.next();</span><br><span class="line">System.out.println(entry.getKey() + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (Entry&lt;String, String&gt; entry : km) &#123;</span><br><span class="line">System.out.println(entry.getKey() + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">km.forEach(new Consumer() &#123;</span><br><span class="line">@Override</span><br><span class="line">public void accept(Object t) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(t);</span><br><span class="line">&#125;&#125;); // Consumer里面有个抽象方法 ，accept，我们要做的事情放进这个accept里，就代表对其每个元素进行accept里的操作 ，就是lambda的表达式</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>上述是两种遍历方式，迭代器可边遍历便删除，是我们最古老的，可是也是唯一有这个功能的 ，iterator</li><li>其他的都要遍历完了才能再删除</li><li>而且entrySet比keySet是要更快点的（单纯遍历）</li><li>迭代器的算法是要比后来的算法速度快的，遍历的时候</li></ul><h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><ul><li>lambda表达式是很便捷的一种方法</li><li>要求：定义规则，定义几个变量</li><li>首先，我们要定义一个接口</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">interface Yunsuan&#123;</span><br><span class="line">public int yunsuan(int i , int j);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>然后在这个接口上增加@FunctionalInterface ，注意这个标志是让这个接口只有一个抽象方法，多个抽象方法会报错</li><li>这一步是定义我们的，几个元素</li><li>接下来我们定义一个函数 ，让这个接口当作参数 ，并且给这个接口传入两个参数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static int getresult(int a , int b, Yunsuan yunsuan) &#123;</span><br><span class="line">returnyunsuan.yunsuan(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>这样 ，我们就算是把这个规则实体化了，接下来我们只要调用这个规则的实例化，就可以对这两个数进行任意操作了</li><li>比如<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">System.out.println(getresult(3,2, (i,j)-&gt;i+j)); // 前面两个是实参 ，后面的是规则就这样写就行 ，格式固定，但是语法不固定</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>上面的foreach里嵌套的就算lambda的表达式</li></ul><h1 id="Map特殊事项"><a href="#Map特殊事项" class="headerlink" title="Map特殊事项"></a>Map特殊事项</h1><ul><li><p>如果在map里把key放入引用类型，则对比key的操作会变成对比hashcode和equals，可控性更强</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class TEstmain1 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">Map&lt;stu , Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">map.put(new stu(&quot;小明&quot;  , 1), 1);</span><br><span class="line">map.put(null , null);</span><br><span class="line">map.put(new stu(&quot;狗蛋&quot; , 1) , 2);</span><br><span class="line">System.out.println(map.size());</span><br><span class="line">map.forEach((k , v) -&gt; &#123;System.out.println(k + &quot;@&quot; +v);&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>stu类，通过自动生成hashcode和equals，（我这里只生成了num的）</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class stu implements Comparable&lt;stu&gt;&#123;</span><br><span class="line">private int num;</span><br><span class="line">private String name;</span><br><span class="line">private double score;</span><br><span class="line">public stu( String name , int num) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.num = num;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public stu( String name , int num , double m) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.num = num;</span><br><span class="line">this.score = m;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public stu() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public int getNum() &#123;</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br><span class="line">public void setNum(int num) &#123;</span><br><span class="line">this.num = num;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;stu [num=&quot; + num + &quot;, name=&quot; + name + &quot;, score=&quot; + score + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public int hashCode() &#123;</span><br><span class="line">final int prime = 31;</span><br><span class="line">int result = 1;</span><br><span class="line">result = prime * result + num;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">if (this == obj)</span><br><span class="line">return true;</span><br><span class="line">if (obj == null)</span><br><span class="line">return false;</span><br><span class="line">if (getClass() != obj.getClass())</span><br><span class="line">return false;</span><br><span class="line">stu other = (stu) obj;</span><br><span class="line">if (num != other.num)</span><br><span class="line">return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 大于0是正数，小于0是负数 ，等于0是相等 ，</span><br><span class="line">@Override</span><br><span class="line">public int compareTo(stu o) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">if(this.num == o.num) &#123;</span><br><span class="line">return this.name.length() - o.name.length();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return o.num - this.num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public double getScore() &#123;</span><br><span class="line">return score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setScore(double score) &#123;</span><br><span class="line">this.score = score;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="lambda加for循环-加上TreeMap"><a href="#lambda加for循环-加上TreeMap" class="headerlink" title="lambda加for循环 加上TreeMap"></a>lambda加for循环 加上TreeMap</h1><ul><li><p>通过treeMap实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.TreeMap;</span><br><span class="line"></span><br><span class="line">public class TEstmain1 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TreeMap&lt;stu , Object&gt; map11 = new TreeMap();</span><br><span class="line">map11.put(new stu(&quot;小明&quot;,  1), 1);</span><br><span class="line">map11.put(new stu(&quot;狗蛋&quot; ,  2) ,2);</span><br><span class="line">map11.put(new stu(&quot;linux&quot; , 3), 3);</span><br><span class="line">map11.put(new stu(&quot;狗蛋&quot; ,  2) ,99);</span><br><span class="line">map11.forEach(TEstmain1::abc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void abc(stu s , Object value) &#123;</span><br><span class="line">System.out.println(s + &quot;@&quot; +value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>上述的是针对foreach有两个参数的情况，可以定义一个函数，让他去传递参数，和lambda一样</p></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/10/27/10-27/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SetTree</title>
      <link>http://example.com/2022/10/26/10-26/</link>
      <guid>http://example.com/2022/10/26/10-26/</guid>
      <pubDate>Wed, 26 Oct 2022 01:51:27 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;TreeSet&quot;&gt;&lt;a href=&quot;#TreeSet&quot; class=&quot;headerlink&quot; title=&quot;TreeSet&quot;&gt;&lt;/a&gt;TreeSet&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;其是基于compareable的，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;进行add的</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h1><ul><li><p>其是基于compareable的，</p></li><li><p>进行add的时候放的如果是引用类型，则要实现compareable接口，因为他就是用这个接口来实现的</p></li><li><p>对于基本类型，则不用</p></li><li><p>如果这样就会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.Set;</span><br><span class="line">import java.util.TreeSet;</span><br><span class="line"></span><br><span class="line">public class copyfilethread &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; set = new TreeSet&lt;String&gt;();</span><br><span class="line">set.add(&quot;2020-10-19&quot;);</span><br><span class="line">set.add(&quot;1010-10-20&quot;);</span><br><span class="line">System.out.println(set);</span><br><span class="line">Set&lt;stu&gt; SET = new TreeSet&lt;stu&gt;();</span><br><span class="line">SET.add(new stu(&quot;小明&quot; , 1));</span><br><span class="line">SET.add(new stu(&quot;snisnh&quot; , 2));</span><br><span class="line">SET.add(new stu(&quot;狗蛋&quot;  , 1));</span><br><span class="line">SET.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>stu类</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">class stu &#123;</span><br><span class="line">private int num;</span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">public stu( String name , int num) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.num = num;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public stu() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public int getNum() &#123;</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br><span class="line">public void setNum(int num) &#123;</span><br><span class="line">this.num = num;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;stu [num=&quot; + num + &quot;, name=&quot; + name + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public int hashCode() &#123;</span><br><span class="line">final int prime = 31;</span><br><span class="line">int result = 1;</span><br><span class="line">result = prime * result + ((name == null) ? 0 : name.hashCode());</span><br><span class="line">result = prime * result + num;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">if (this == obj)</span><br><span class="line">return true;</span><br><span class="line">if (obj == null)</span><br><span class="line">return false;</span><br><span class="line">if (getClass() != obj.getClass())</span><br><span class="line">return false;</span><br><span class="line">stu other = (stu) obj;</span><br><span class="line">if (name == null) &#123;</span><br><span class="line">if (other.name != null)</span><br><span class="line">return false;</span><br><span class="line">&#125; else if (!name.equals(other.name))</span><br><span class="line">return false;</span><br><span class="line">if (num != other.num)</span><br><span class="line">return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 大于0是正数，小于0是负数 ，等于0是相等 ，</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样会报错，是类型转换的错误。</li><li>因为它实现的是compareable接口，对比引用类型的时候用的是这个接口里的方法</li><li>所以在stu类实现这个接口就可以不报错了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class stu implements Comparable&lt;stu&gt;&#123;</span><br><span class="line">private int num;</span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">public stu( String name , int num) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.num = num;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public stu() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public int getNum() &#123;</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br><span class="line">public void setNum(int num) &#123;</span><br><span class="line">this.num = num;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;stu [num=&quot; + num + &quot;, name=&quot; + name + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public int hashCode() &#123;</span><br><span class="line">final int prime = 31;</span><br><span class="line">int result = 1;</span><br><span class="line">result = prime * result + ((name == null) ? 0 : name.hashCode());</span><br><span class="line">result = prime * result + num;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">if (this == obj)</span><br><span class="line">return true;</span><br><span class="line">if (obj == null)</span><br><span class="line">return false;</span><br><span class="line">if (getClass() != obj.getClass())</span><br><span class="line">return false;</span><br><span class="line">stu other = (stu) obj;</span><br><span class="line">if (name == null) &#123;</span><br><span class="line">if (other.name != null)</span><br><span class="line">return false;</span><br><span class="line">&#125; else if (!name.equals(other.name))</span><br><span class="line">return false;</span><br><span class="line">if (num != other.num)</span><br><span class="line">return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 大于0是正数，小于0是负数 ，等于0是相等 ，</span><br><span class="line">@Override</span><br><span class="line">public int compareTo(stu o) &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是这样他只能往set里添加一个值</li><li>因为这个compare默认的时候就是这样</li><li>如果要再进行精度筛选则要，在被覆盖的compareto方法中自己定义，可以改成<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public int compareTo(stu o) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">if(this.num == o.num) &#123;</span><br><span class="line">return this.name.length() - o.name.length();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return this.num - o.num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>这样就会让如果学号相同，就会按照姓名的长度排序，小的在上面</li><li>总之就是可以在这个compareto这里设置规则</li><li>可控性强</li><li>这里只有数组的是length是属性，其他都是方法</li><li>集合的叫size</li><li>这个是用于实体类，数据类实现接口用 ， 表达的是自然的顺序，又叫自然排序</li></ul><h1 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h1><ul><li>比较器是对于list来说的</li><li>comparetor ：比较器，比上一个更自由 ，可以控制排序的方式，升序或者降序<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;stu&gt; list = new ArrayList&lt;stu&gt;();</span><br><span class="line">System.out.println(&quot;----------------------&quot;);</span><br><span class="line">list.add(new stu(&quot;下&quot; , 1 , 89.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 2 , 88.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 21 , 87.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 22 , 86.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 21 , 85.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 221 , 84.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 21 , 83.1));</span><br><span class="line">list.add(new stu(&quot;下&quot; , 21 , 82.1));</span><br><span class="line"></span><br><span class="line">Collections.sort(list , (a,b) -&gt; -((int)(b.getScore() - a.getScore() * 100 ))); // 这个里面的代表 ， 我们的比较规则， 前面代表要排序的集合，list不去重 ， a,b代表两个元素list中的，后面的就是比较的规则了，一般是升序排序，但是我们可以通过添加-的方法，让他进行降序，他底层也是tree</span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure></li><li>通过lambal表达式进行比较排序</li><li>但是其实这个sort方法也是Arrays.sort，它是将所有元素转入一个数组，对数组进行排序，然后，将排好序 的序列复制回列表 ，</li><li>sort()是根据需要排序的数组的长度进行区分的:</li><li>首先先判断需要排序的数据量是否大于60。</li><li>小于60：使用插入排序，插入排序是稳定的</li><li>大于60的数据量会根据数据类型选择排序方式：</li><li>基本类型：使用快速排序。「因为基本类型不需要考虑稳定性」</li><li>Object类型：使用归并排序「因为归并排序具有稳定性」</li><li>注意：不管是快速排序还是归并排序。在二分的时候小于60的数据量依旧会使用插入排序</li><li>Collections.reverseOrder()也可以进行降序排序 , 只不过是要基本类型</li></ul><h1 id="映射Map"><a href="#映射Map" class="headerlink" title="映射Map"></a>映射Map</h1><ul><li>是一种接口</li><li>是一种&lt;k , V&gt; 结构 ，就是一个key对应一个value，其key不会重复，而value可以重复</li><li>一个&lt;Ｋ，V&gt;叫一个ｅｎｔｒｙ</li><li>万能&lt;Ｋ，V&gt;他可以代表一个对象</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ul><li>ｃｌｅａｒ清除所有映射</li><li>ｂｏｏｌｅａｎ　ｃｏｎｔａｉｎｓＫｅｙ（Ｏｂｊｅｃｔ　ｋｅｙ）：判断一个ｋｅｙ是不是存在</li><li>ｅｎｔｒｙＳｅｔ（）获取ｅｎｔｒｙ集合，就是条目集合<br>，返回类型是一个Ｓｅｔ</li><li>ｇｅｔ（ｋｅｙ）根据ｋｅｙ获取ｖａｌｕｅ</li><li>ｋｅｙＳｅｔ（）返回ｋｅｙ的集合</li><li>ｐｕｔ（K，ｖ），往，ｍａｐ加入一条数据，但是存在相同的ｋｅｙ就覆盖</li><li>ｒｅｍｏｖｅ（ｋ）删除ｋｅｙ</li><li>ｓｉｚｅ（）条目个数</li><li>Ｃｏｌｌｅｃｔｉｏｎ＜Ｖ＞　ｖａｌｕｅｓ（）获取值组成的集合<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class Main2 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Map&lt;String , String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">map.put(&quot;akjsdhs&quot;, &quot;sdjal&quot;);</span><br><span class="line">map.put(&quot;dshd&quot; , &quot;sdjjdjd&quot;);</span><br><span class="line">System.out.println(map.get(&quot;dshd&quot;));</span><br><span class="line">System.out.println(map.containsKey(&quot;dshd&quot;));</span><br><span class="line">System.out.println(map.remove(&quot;dshd&quot;));</span><br><span class="line">System.out.println(map.size());</span><br><span class="line">System.out.println(map.entrySet());</span><br><span class="line">System.out.println(map.containsKey(&quot;dshd&quot;));</span><br><span class="line">map.clear();</span><br><span class="line">System.out.println(map.size());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/10/26/10-26/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>集合</title>
      <link>http://example.com/2022/10/25/10-25/</link>
      <guid>http://example.com/2022/10/25/10-25/</guid>
      <pubDate>Tue, 25 Oct 2022 05:45:07 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;泛型（任意引用类型）&quot;&gt;&lt;a href=&quot;#泛型（任意引用类型）&quot; class=&quot;headerlink&quot; title=&quot;泛型（任意引用类型）&quot;&gt;&lt;/a&gt;泛型（任意引用类型）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;作用:就是可以让其内的变量无类型，直到用的时候才指定类型，解决了</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="泛型（任意引用类型）"><a href="#泛型（任意引用类型）" class="headerlink" title="泛型（任意引用类型）"></a>泛型（任意引用类型）</h1><ul><li>作用:就是可以让其内的变量无类型，直到用的时候才指定类型，解决了强制转换问题</li><li>代码如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">public class gdg &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">sfdhkja&lt;String&gt; a = new sfdhkja(); // 尖括号里面的就是泛型的类型</span><br><span class="line">a.setName(&quot;小明&quot;);</span><br><span class="line">System.out.println(a.getName());</span><br><span class="line">System.out.println(a);</span><br><span class="line">sfdhkja&lt;Integer&gt; b = new sfdhkja();</span><br><span class="line">b.setName(11111);</span><br><span class="line">System.out.println(b.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class sfdhkja&lt;E&gt; &#123;</span><br><span class="line">E name;</span><br><span class="line"></span><br><span class="line">public sfdhkja() &#123;</span><br><span class="line">super();</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public E getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setName(E name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="boolean-add-E"><a href="#boolean-add-E" class="headerlink" title="boolean add(E)"></a>boolean add(E)</h3><p>把任意对象类型加进list中</p><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><p>返回集合的迭代器，用于遍历集合</p><h3 id="default修饰的"><a href="#default修饰的" class="headerlink" title="default修饰的"></a>default修饰的</h3><p>代表接口中有方法体</p><h3 id="int-size"><a href="#int-size" class="headerlink" title="int size"></a>int size</h3><h3 id="并行流和串型流"><a href="#并行流和串型流" class="headerlink" title="并行流和串型流"></a>并行流和串型流</h3><h3 id="Object-toArray"><a href="#Object-toArray" class="headerlink" title="Object toArray()"></a>Object toArray()</h3><p>可以指定泛型的</p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">public class jeiko &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">Collection&lt;String&gt; c1 =new ArrayList&lt;&gt;();</span><br><span class="line">c1.add(&quot;中国&quot;);</span><br><span class="line">c1.add(&quot;韩国哦&quot;);</span><br><span class="line">c1.add(&quot;hsakdj&quot;);</span><br><span class="line">System.out.println(c1.size());</span><br><span class="line">Iterator&lt;String&gt; ra = c1.iterator();</span><br><span class="line">while(ra.hasNext()) &#123;</span><br><span class="line">String item = ra.next();</span><br><span class="line">System.out.println(item);</span><br><span class="line">ra.remove(); // 删除元素</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;-------------------------------&quot;);</span><br><span class="line">for (String string : c1) &#123;</span><br><span class="line">System.out.println(string);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;------------------------------------&quot;);</span><br><span class="line">c1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>只有第一种才可以进行便循环边删除</li><li>其他都不可以</li><li>但是第三种最帅，代码量也最少</li></ul><h1 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h1><ul><li>Colllection继承了Iterable接口</li><li>list线性，有序集合</li><li>set无序集合</li><li>旗下是</li><li>ArrayLinst</li><li>LinkedList</li><li>Vector</li><li>下面是set的</li><li>HashSet</li><li>TreeSet</li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><ul><li>线性集合 ，有下标</li><li>add(index , E)</li><li>set(index ,E)</li><li>get(index)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Vector;</span><br><span class="line"></span><br><span class="line">public class Main1 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = new Vector&lt;String&gt;();</span><br><span class="line">list.add(&quot;1&quot;);  // 先往list里添加元素</span><br><span class="line">list.add(&quot;12&quot;); // 同上</span><br><span class="line">System.out.println(list);  // 直接打印是全部打印出来</span><br><span class="line">list.add(0,&quot;121&quot;); // 在下表为0的地方添加121</span><br><span class="line">list.set(2, &quot;dhkjsdhj&quot;); // 把下表为2的地方设置为dhkjsdhj</span><br><span class="line">System.out.println(list.size()); // 获取list的size就是大小</span><br><span class="line"></span><br><span class="line">list.forEach(System.out::println); // 超级帅气的循环语句，本身是lambal表达式</span><br><span class="line">for(int i =0; i &lt; list.size() ; i++) &#123;</span><br><span class="line">String item = list.get(i);</span><br><span class="line">System.out.println(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul><li>底层封装的数组</li><li>扩容的时候每次扩容一半</li><li>海量添加的时候是很慢的，就是修改长度很慢</li><li>查询快，因为有下标</li></ul><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><ul><li>可控增量，且线程安全</li><li>底层是数组，且有线程锁，</li><li>10，20，40 ，每次扩容一倍，但是是可以控制增量的</li><li>比ArrayList慢</li></ul><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul><li>底层封装的是节点，双向链表，每一个节点都有前一个节点和后一个节点的引用</li><li>单向链：修改快</li><li>双向链：就是双向的，前后都有元素</li><li>特点：修改快，但是查询慢</li><li>可以用作与自己定义栈<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class MyStack&lt;E&gt; &#123;</span><br><span class="line">LinkedList&lt;E&gt; data;</span><br><span class="line">public E pop()  &#123;</span><br><span class="line">returndata.pollLast();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><ul><li>无序集合</li><li>会自动去重，就是有重复的就会不添加新的元素<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();</span><br><span class="line">set.add(11);</span><br><span class="line">set.add(1111);</span><br><span class="line">set.add(898);</span><br><span class="line">set.add(11);</span><br><span class="line">set.forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul><li>因为这里的去重机制是根据hashcode和equals来的，默认的时候，可以像正常的列表一样，但是我们可以进行覆盖hashcode和equals</li><li>不覆盖<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class Sst &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();</span><br><span class="line">set.add(11);</span><br><span class="line">set.add(1111);</span><br><span class="line">set.add(898);</span><br><span class="line">set.add(11);</span><br><span class="line">set.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">Set&lt;stu&gt; s1 =new HashSet&lt;stu&gt;();</span><br><span class="line">s1.add(new stu());</span><br><span class="line">s1.add(new stu());</span><br><span class="line">s1.add(new stu());</span><br><span class="line">System.out.println(s1.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class stu&#123;</span><br><span class="line">private int num;</span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">public stu() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public int getNum() &#123;</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br><span class="line">public void setNum(int num) &#123;</span><br><span class="line">this.num = num;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;stu [num=&quot; + num + &quot;, name=&quot; + name + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>覆盖之后</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 重新开始;</span><br><span class="line"></span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class Sst &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();</span><br><span class="line">set.add(11);</span><br><span class="line">set.add(1111);</span><br><span class="line">set.add(898);</span><br><span class="line">set.add(11);</span><br><span class="line">set.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">Set&lt;stu&gt; s1 =new HashSet&lt;stu&gt;();</span><br><span class="line">s1.add(new stu());</span><br><span class="line">s1.add(new stu());</span><br><span class="line">s1.add(new stu());</span><br><span class="line">System.out.println(s1.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class stu&#123;</span><br><span class="line">private int num;</span><br><span class="line">private String name;</span><br><span class="line"></span><br><span class="line">public stu() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public int getNum() &#123;</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br><span class="line">public void setNum(int num) &#123;</span><br><span class="line">this.num = num;</span><br><span class="line">&#125;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;stu [num=&quot; + num + &quot;, name=&quot; + name + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public int hashCode() &#123;</span><br><span class="line">final int prime = 31;</span><br><span class="line">int result = 1;</span><br><span class="line">result = prime * result + ((name == null) ? 0 : name.hashCode());</span><br><span class="line">result = prime * result + num;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public boolean equals(Object obj) &#123;</span><br><span class="line">if (this == obj)</span><br><span class="line">return true;</span><br><span class="line">if (obj == null)</span><br><span class="line">return false;</span><br><span class="line">if (getClass() != obj.getClass())</span><br><span class="line">return false;</span><br><span class="line">stu other = (stu) obj;</span><br><span class="line">if (name == null) &#123;</span><br><span class="line">if (other.name != null)</span><br><span class="line">return false;</span><br><span class="line">&#125; else if (!name.equals(other.name))</span><br><span class="line">return false;</span><br><span class="line">if (num != other.num)</span><br><span class="line">return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>也可以在生成覆盖的时候少选几个变量这样这些变量就会变成唯一的筛选变量 ，相当于放宽变量范围</li><li>原理是封装了hashmap，利用key和value</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/10/25/10-25/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>线程</title>
      <link>http://example.com/2022/10/24/10-24/</link>
      <guid>http://example.com/2022/10/24/10-24/</guid>
      <pubDate>Mon, 24 Oct 2022 07:19:28 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;线程的概念以及原理&quot;&gt;&lt;a href=&quot;#线程的概念以及原理&quot; class=&quot;headerlink&quot; title=&quot;线程的概念以及原理&quot;&gt;&lt;/a&gt;线程的概念以及原理&lt;/h1&gt;&lt;h2 id=&quot;操作系统中线程和进程的概念&quot;&gt;&lt;a href=&quot;#操作系统中线程和进程的概</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="线程的概念以及原理"><a href="#线程的概念以及原理" class="headerlink" title="线程的概念以及原理"></a>线程的概念以及原理</h1><h2 id="操作系统中线程和进程的概念"><a href="#操作系统中线程和进程的概念" class="headerlink" title="操作系统中线程和进程的概念"></a>操作系统中线程和进程的概念</h2><ul><li>进程是指一个内存中运行的应用程序，每个进程都有自己的独立空间，一个进程中可以启动多个线程，比如在windows里一个运行的exe就是一个进程</li><li>线程是指进程中的一个执行流程，一个进程中可以用运行多个线程。线程总是属于某个进程的，进程中多个线程共享进程的内存</li></ul><h2 id="java中的线程"><a href="#java中的线程" class="headerlink" title="java中的线程"></a>java中的线程</h2><ul><li>在java中，线程是指两件不同的事</li><li>java.lang.Thread类的一个实例</li><li>线程的执行</li><li>使用java.lang.Thread类或者java.lang.Runnable接口编写代码来定义实例化，和启动新线程。</li><li>一个Thread类实例只是一个对象，像java和其他对象一样，有变量和方法，生死于堆上</li><li>在java里每个线程都拥有一个调用栈，即使不在程序中创建任何的新线程，线程也会在后台运行着</li><li>一个java应用总是从main方法开始，main方法运行在一个线程里，他被称为主线程</li><li>一旦创建一个线程，就会产生一个新的栈调用。</li><li>线程总体分为两类，用户线程和守护线程</li><li>当所有用户距线程执行完毕，jvm自己关闭，守护线程一般是由操作系统或者或者用户自己创建</li></ul><h1 id="创建与启动"><a href="#创建与启动" class="headerlink" title="创建与启动"></a>创建与启动</h1><ul><li><p>扩展java.lang.Thread</p></li><li><p>这个类中有个run方法，应该注意其用法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void run()</span><br></pre></td></tr></table></figure></li><li><p>如果该线程是使用独立的Runnable运行对象构造的，则调用该Runnable对象的run方法，要不然，该方法不执行任何操作并返回</p></li><li><p>Thread的子类应该重写这个方法，因为其底层也是继承的Runnable接口</p></li><li><p>run操作里是他会执行的事情</p></li></ul><h2 id="实例化线程"><a href="#实例化线程" class="headerlink" title="实例化线程"></a>实例化线程</h2><ul><li>如果是用Thread，则直接new就行</li><li>如果是实现了，java.lang.Runnable接口的类，则用Thread的构造方法:</li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Thread(Runnable target)</span><br><span class="line">Thread(Runnable target , String name)</span><br><span class="line">Thread(ThreadGroup group, Runnable target)</span><br><span class="line">Thread(ThreadGroup group, Runnable target, String name)</span><br><span class="line">Thread(ThreadGroup group, Runnable target, String name, long stackSize)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h2><ul><li>在线程的Thread对象上调用Start（）方法而不是用run或者别的</li><li>在调用start之前线程处于新状态中，新状态指有一个Thread对象，但是还没有一个真正的线程</li><li>调用了之后发生了一系列复杂的事情</li><li>尝试启动新的线程（具有新的调用栈）</li><li>该线程从新状态转移到可运行状态</li><li>当线程获得执行机会，就会调用run</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 实现Runnable接口的类</span><br><span class="line">*</span><br><span class="line">* @author leizhimin 2008-9-13 18:12:10</span><br><span class="line">*/</span><br><span class="line">publicclass DoSomethingimplements Runnable &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public DoSomething(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoid run() &#123;</span><br><span class="line">        for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">            for (long k = 0; k &lt; 100000000; k++) ;</span><br><span class="line">            System.out.println(name + &quot;: &quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 测试Runnable类实现的多线程程序</span><br><span class="line">*</span><br><span class="line">* @author leizhimin 2008-9-13 18:15:02</span><br><span class="line">*/</span><br><span class="line">publicclass TestRunnable &#123;</span><br><span class="line">    publicstaticvoid main(String[] args) &#123;</span><br><span class="line">        DoSomething ds1 = new DoSomething(&quot;阿三&quot;);</span><br><span class="line">        DoSomething ds2 = new DoSomething(&quot;李四&quot;);</span><br><span class="line"></span><br><span class="line">        Thread t1 = new Thread(ds1);</span><br><span class="line">        Thread t2 = new Thread(ds2);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩展Thread类实现多线程的例子"><a href="#扩展Thread类实现多线程的例子" class="headerlink" title="扩展Thread类实现多线程的例子"></a>扩展Thread类实现多线程的例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line">* 测试扩展Thread类实现的多线程程序</span><br><span class="line">*</span><br><span class="line">* @author leizhimin 2008-9-13 18:22:13</span><br><span class="line">*/</span><br><span class="line">publicclass TestThreadextends Thread&#123;</span><br><span class="line">    public TestThread(String name) &#123;</span><br><span class="line">        super(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicvoid run() &#123;</span><br><span class="line">        for(int i = 0;i&lt;5;i++)&#123;</span><br><span class="line">            for(long k= 0; k &lt;100000000;k++);</span><br><span class="line">            System.out.println(this.getName()+&quot; :&quot;+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publicstaticvoid main(String[] args) &#123;</span><br><span class="line">        Thread t1 = new TestThread(&quot;阿三&quot;);</span><br><span class="line">        Thread t2 = new TestThread(&quot;李四&quot;);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul><li>线程的名字，一个运行中的线程总是有名字的，名字有两个来源，第一是自己，第二是虚拟机</li><li>而且主线程的名字总是mian，非主线程的名字不确定</li><li>线程都可以设置名字，主线程的也不例外</li><li>线程的调用不一定是顺序的他们是随机的</li><li>线程一旦启动，他就不可能重新启动</li><li>线程的调度是jvm的一部分，在cpu的机器上，实际上一次只能运行一个线程，一次只有一个线程栈执行，jvm线程调度程序决定实际运行的哪个处于可运行的状态</li><li>尽管我们无法控制线程调度的程序，但是可以通过别的方式来影响线程调度的方式</li></ul><h1 id="线程的转换"><a href="#线程的转换" class="headerlink" title="线程的转换"></a>线程的转换</h1><ul><li>线程的状态转换是线程控制的基础。线程状态总的可分为五大状态：分别是生、死、可运行、运行、等待&#x2F;阻塞。</li><li>可运行状态：当线程有资格运行，但调度程序还没有把它选定为运行线程时线程所处的状态。当start()方法调用时，线程首先进入可运行状态。在线程运行之后或者从阻塞、等待或睡眠状态回来后，也返回到可运行状态。</li><li>运行状态：线程调度程序从可运行池中选择一个线程作为当前线程时线程所处的状态。这也是线程进入运行状态的唯一一种方式</li><li>等待&#x2F;阻塞&#x2F;睡眠状态：这是线程有资格运行时它所处的状态。实际上这个三状态组合为一种，其共同点是：线程仍旧是活的，但是当前没有条件运行。换句话说，它是可运行的，但是如果某件事件出现，他可能返回到可运行状态。</li><li>死亡态：当线程的run()方法完成时就认为它死去。这个线程对象也许是活的，但是，它已经不是一个单独执行的线程。线程一旦死亡，就不能复生。如果在一个死去的线程上调用start()方法，会抛出java.lang.IllegalThreadStateException异常。</li></ul><h2 id="阻止线程的执行"><a href="#阻止线程的执行" class="headerlink" title="阻止线程的执行"></a>阻止线程的执行</h2><ul><li>对于线程的阻止，考虑一下三个方面，不考虑IO阻塞的情况：</li><li>睡眠</li><li>等待</li><li>睡眠：Thread.sleep(long millis)和Thread.sleep(long millis, int nanos)静态方法强制当前正在执行的线程休眠（暂停执行），以“减慢线程”。当线程睡眠时，它入睡在某个地方，在苏醒之前不会返回到可运行状态。当睡眠时间到期，则返回到可运行状态。</li><li>线程睡眠的原因：线程执行太快，或者需要强制进入下一轮，因为Java规范不保证合理的轮换。</li><li>睡眠的实现：调用静态方法。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">          Thread.sleep(123);</span><br><span class="line">      &#125; catch (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace(); </span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li>睡眠的位置：为了让其他线程有机会执行，可以将Thread.sleep()的调用放线程run()之内。这样才能保证该线程执行过程中会睡眠。</li><li>线程睡眠是帮助所有线程获得运行机会的最好方法。</li><li>线程睡眠到期自动苏醒，并返回到可运行状态，不是运行状态。sleep()中指定的时间是线程不会运行的最短时间。因此，sleep()方法不能保证该线程睡眠到期后就开始执行。</li><li>sleep()是静态方法，只能控制当前正在运行的线程。</li></ul><h2 id="线程的优先级和线程让步yield"><a href="#线程的优先级和线程让步yield" class="headerlink" title="线程的优先级和线程让步yield()"></a>线程的优先级和线程让步yield()</h2><ul><li>线程的让步是通过Thread.yield()来实现的。yield()方法的作用是：暂停当前正在执行的线程对象，并执行其他线程。</li><li>线程总是存在优先级，优先级范围在1~10之间。JVM线程调度程序是基于优先级的抢先调度机制。在大多数情况下，当前运行的线程优先级将大于或等于线程池中任何线程的优先级。但这仅仅是大多数情况。</li><li>注意：当设计多线程应用程序的时候，一定不要依赖于线程的优先级。因为线程调度优先级操作是没有保障的，只能把线程优先级作用作为一种提高程序效率的方法，但是要保证程序不依赖这种操作。</li><li>当线程池中线程都具有相同的优先级，调度程序的JVM实现自由选择它喜欢的线程。这时候调度程序的操作有两种可能：一是选择一个线程运行，直到它阻塞或者运行完成为止。二是时间分片，为池内的每个线程提供均等的运行机会。<br>-设置线程的优先级：线程默认的优先级是创建它的执行线程的优先级。可以通过setPriority(int newPriority)更改线程的优先级。例如：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread t = new MyThread();</span><br><span class="line">       t.setPriority(8);</span><br><span class="line">       t.start();</span><br></pre></td></tr></table></figure></li><li>线程优先级为1<del>10之间的正整数，JVM从不会改变一个线程的优先级。然而，1</del>10之间的值是没有保证的。一些JVM可能不能识别10个不同的值，而将这些优先级进行每两个或多个合并，变成少于10个的优先级，则两个或多个优先级的线程可能被映射为一个优先级。</li><li>线程默认优先级是5，Thread类中有三个常量，定义线程优先级范围：</li><li>static int MAX_PRIORITY线程可以具有的最高优先级。</li><li>static int MIN_PRIORITY线程可以具有的最低优先级。</li><li>static int NORM_PRIORITY分配给线程的默认优先级。</li></ul><h2 id="Thread-yield-方法"><a href="#Thread-yield-方法" class="headerlink" title="Thread.yield()方法"></a>Thread.yield()方法</h2><ul><li>Thread.yield()方法作用是：暂停当前正在执行的线程对象，并执行其他线程。</li><li>yield()应该做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。</li><li>结论：yield()从未导致线程转到等待&#x2F;睡眠&#x2F;阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。</li></ul><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><ul><li><p>Thread的非静态方法join()让一个线程B“加入”到另外一个线程A的尾部。在A执行完毕之前，B不能工作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread t = new MyThread();</span><br><span class="line">      t.start();</span><br><span class="line">      t.join();</span><br></pre></td></tr></table></figure></li><li><p>另外，join()方法还有带超时限制的重载版本。例如t.join(5000);则让线程等待5000毫秒，如果超过这个时间，则停止等待，变为可运行状态。</p></li><li><p>线程的加入join()对线程栈导致的结果是线程栈发生了变化，当然这些变化都是瞬时的。</p></li></ul><h2 id="Object类的wait方法"><a href="#Object类的wait方法" class="headerlink" title="Object类的wait方法"></a>Object类的wait方法</h2><ul><li>让当前线程进入等待池</li><li>通过Object类的notify方法通知线程池随机让一条回归</li><li>而notifyall 是让所有回归</li></ul><h1 id="同步锁"><a href="#同步锁" class="headerlink" title="同步锁"></a>同步锁</h1><ul><li>synchronized</li><li>是一种对象锁，可重入，不可中断，实际上就是一个字节码</li><li>基于jvm的监控机制</li><li>栈帧线程独享，不用锁，堆是内存共享的需要线程考虑，方法区也是要线程共享<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">public class sdhakdh &#123;</span><br><span class="line"></span><br><span class="line">public static int flag = 0;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">new Thread(&quot;线程1&quot;) &#123;</span><br><span class="line">public void run() &#123;</span><br><span class="line">for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName().toString() + &quot;@&quot; + flag++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line">new Thread(&quot;线程2&quot;) &#123;</span><br><span class="line">public void run() &#123;</span><br><span class="line">for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName().toString() + &quot;@&quot; + flag++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>这样的会出现线程抢占的问题，容易让一个线程卡住，然后另外一个框框执行</li><li>结果就是无序的</li><li>如果加上synchronized则不会出现这个请况<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">public class sdhakdh &#123;</span><br><span class="line"></span><br><span class="line">public static int flag = 0;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">new Thread(&quot;线程1&quot;) &#123;</span><br><span class="line">public void run() &#123;</span><br><span class="line">synchronized (&quot;hello&quot;) &#123;</span><br><span class="line">for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName().toString() + &quot;@&quot; + flag++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line">new Thread(&quot;线程2&quot;) &#123;</span><br><span class="line">public void run() &#123;</span><br><span class="line">synchronized (&quot;hello&quot;) &#123;</span><br><span class="line">for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName().toString() + &quot;@&quot; + flag++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>这样就不会发生问题了</li><li>就会出现顺序的，因为线程回退的时候，下次会继续线程锁锁住的位置进行执行，同时不让同一个锁内的其他线程执行，直到被所著的线程回来</li><li>多线程不加锁不安全，可是慢，如果能解决这个问题，就厉害了</li><li>如果锁不是同一个名字则无用</li><li>下面的例子,是生产者消费者的例子</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">public class repo &#123;</span><br><span class="line"></span><br><span class="line">private int count;</span><br><span class="line"></span><br><span class="line">public synchronized void add() &#123;</span><br><span class="line">while(count &gt;= 100) &#123; // 设置上限</span><br><span class="line">try &#123;</span><br><span class="line">wait();</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">notifyAll(); // 把减少线程从等待池放出来</span><br><span class="line">count++;</span><br><span class="line">System.out.println(count);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public synchronized void substrct() &#123;</span><br><span class="line">while(count &lt;= 0) &#123; // 设置下限</span><br><span class="line">try &#123;</span><br><span class="line">wait();</span><br><span class="line">&#125; catch (InterruptedException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">notifyAll(); // 把add线程从等待池放出来</span><br><span class="line">count--;</span><br><span class="line">System.out.println(count);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">public class product &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">repo r =new repo();</span><br><span class="line">Prou P = new Prou();</span><br><span class="line">P.re = r;</span><br><span class="line">Consumer C = new Consumer();</span><br><span class="line">C.re = r;</span><br><span class="line">Thread t1 = new Thread(P , &quot;生产者&quot;);</span><br><span class="line">Thread t2 = new Thread(C , &quot;消费者&quot;);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line">Prou P1 = new Prou();</span><br><span class="line">P1.re = r;</span><br><span class="line">Consumer C1 = new Consumer();</span><br><span class="line">C1.re = r;</span><br><span class="line">Thread t11 = new Thread(P , &quot;生产者&quot;);</span><br><span class="line">Thread t21 = new Thread(C , &quot;消费者&quot;);</span><br><span class="line">t11.start();</span><br><span class="line">t21.start();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class Prou implements Runnable&#123;</span><br><span class="line"></span><br><span class="line">repo re;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">for(int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">re.add();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class Consumer implements Runnable &#123;</span><br><span class="line"></span><br><span class="line">repo re;</span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line"></span><br><span class="line">for(int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">re.substrct();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意，wait的时候是直接放开锁的</li></ul><h1 id="创建线程的第三种和第四种方式"><a href="#创建线程的第三种和第四种方式" class="headerlink" title="创建线程的第三种和第四种方式"></a>创建线程的第三种和第四种方式</h1><h2 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.util.concurrent.Callable;</span><br><span class="line">import java.util.concurrent.ExecutionException;</span><br><span class="line">import java.util.concurrent.FutureTask;</span><br><span class="line">//实现Callable接口</span><br><span class="line">public class CallableTest &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //执行Callable 方式，需要FutureTask 实现实现，用于接收运算结果</span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;Integer&gt;(new MyCallable());</span><br><span class="line">        new Thread(futureTask).start();</span><br><span class="line">        //接收线程运算后的结果</span><br><span class="line">        try &#123;</span><br><span class="line">            Integer sum = futureTask.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class MyCallable implements Callable&lt;Integer&gt; &#123;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public Integer call() throws Exception &#123;</span><br><span class="line">        int sum = 0;</span><br><span class="line">        for (int i = 0; i &lt; 100; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        return sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//结果：</span><br><span class="line">/*</span><br><span class="line">4950</span><br><span class="line">Process finished with exit code 0</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h2 id="线程池创建线程"><a href="#线程池创建线程" class="headerlink" title="线程池创建线程"></a>线程池创建线程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">//线程池实现</span><br><span class="line">public class ThreadPoolExecutorTest &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //创建线程池</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(10);</span><br><span class="line">        ThreadPool threadPool = new ThreadPool();</span><br><span class="line">        for(int i =0;i&lt;5;i++)&#123;</span><br><span class="line">            //为线程池分配任务</span><br><span class="line">            executorService.submit(threadPool);</span><br><span class="line">        &#125;</span><br><span class="line">        //关闭线程池</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class ThreadPool implements Runnable &#123;</span><br><span class="line"> </span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        for(int i = 0 ;i&lt;10;i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;:&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 打印结果（不唯一）：</span><br><span class="line">/*</span><br><span class="line">pool-1-thread-1:0</span><br><span class="line">pool-1-thread-2:0</span><br><span class="line">pool-1-thread-2:1</span><br><span class="line">pool-1-thread-3:0</span><br><span class="line">pool-1-thread-3:1</span><br><span class="line">pool-1-thread-3:2</span><br><span class="line">pool-1-thread-2:2</span><br><span class="line">pool-1-thread-2:3</span><br><span class="line">pool-1-thread-2:4</span><br><span class="line">pool-1-thread-2:5</span><br><span class="line">pool-1-thread-1:1</span><br><span class="line">pool-1-thread-5:0</span><br><span class="line">pool-1-thread-5:1</span><br><span class="line">pool-1-thread-5:2</span><br><span class="line">pool-1-thread-5:3</span><br><span class="line">pool-1-thread-2:6</span><br><span class="line">pool-1-thread-2:7</span><br><span class="line">pool-1-thread-2:8</span><br><span class="line">pool-1-thread-3:3</span><br><span class="line">pool-1-thread-2:9</span><br><span class="line">pool-1-thread-5:4</span><br><span class="line">pool-1-thread-4:0</span><br><span class="line">pool-1-thread-4:1</span><br><span class="line">pool-1-thread-1:2</span><br><span class="line">pool-1-thread-1:3</span><br><span class="line">pool-1-thread-1:4</span><br><span class="line">pool-1-thread-1:5</span><br><span class="line">pool-1-thread-1:6</span><br><span class="line">pool-1-thread-1:7</span><br><span class="line">pool-1-thread-1:8</span><br><span class="line">pool-1-thread-1:9</span><br><span class="line">pool-1-thread-4:2</span><br><span class="line">pool-1-thread-4:3</span><br><span class="line">pool-1-thread-4:4</span><br><span class="line">pool-1-thread-4:5</span><br><span class="line">pool-1-thread-5:5</span><br><span class="line">pool-1-thread-3:4</span><br><span class="line">pool-1-thread-3:5</span><br><span class="line">pool-1-thread-3:6</span><br><span class="line">pool-1-thread-3:7</span><br><span class="line">pool-1-thread-3:8</span><br><span class="line">pool-1-thread-3:9</span><br><span class="line">pool-1-thread-5:6</span><br><span class="line">pool-1-thread-4:6</span><br><span class="line">pool-1-thread-5:7</span><br><span class="line">pool-1-thread-4:7</span><br><span class="line">pool-1-thread-5:8</span><br><span class="line">pool-1-thread-4:8</span><br><span class="line">pool-1-thread-4:9</span><br><span class="line">pool-1-thread-5:9</span><br><span class="line">Process finished with exit code 0</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/10/24/10-24/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>字符流</title>
      <link>http://example.com/2022/10/21/10-21/</link>
      <guid>http://example.com/2022/10/21/10-21/</guid>
      <pubDate>Fri, 21 Oct 2022 00:42:15 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Write&quot;&gt;&lt;a href=&quot;#Write&quot; class=&quot;headerlink&quot; title=&quot;Write&quot;&gt;&lt;/a&gt;Write&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Write是抽象方法&lt;/li&gt;
&lt;li&gt;其里面定义了传输大小（在源码中）&lt;/li&gt;
&lt;li&gt;在write</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h1><ul><li>Write是抽象方法</li><li>其里面定义了传输大小（在源码中）</li><li>在write里<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static final int WRITE_BUFFER_SIZE = 1024;</span><br></pre></td></tr></table></figure></li><li>所谓的字符流只是把字节流包装起来，证据在源码里<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package 项目实训;</span><br><span class="line"></span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.Writer;</span><br><span class="line"></span><br><span class="line">public class char流 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">Writer w = new FileWriter(&quot;D:/a.txt&quot;);</span><br><span class="line">w.write(&quot;hello world&quot;);</span><br><span class="line">w.append(&quot;hello Bgido&quot;);</span><br><span class="line">w.write(&quot;hello java&quot;.toCharArray());</span><br><span class="line">w.flush();</span><br><span class="line">w.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注意这里的write是直接在文件里重写数据，而append是增加数据，因为write底层调用的是write方法</li></ul><h1 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h1><ul><li>出现的原因，是因为字节流可能存不住，所以才出现，会造成乱码</li></ul><h2 id="字符分类以及编码格式"><a href="#字符分类以及编码格式" class="headerlink" title="字符分类以及编码格式"></a>字符分类以及编码格式</h2><ul><li><p>一般在英文状态下一个字母或字符占用一个字节，一个汉字用两个字节表示。</p></li><li><p>ASCII 码中，一个英文字母(不分大小写)为一个字节，一个中文汉字为两个字节。</p></li><li><p>UTF-8 编码中，一个英文字为一个字节，一个中文为三个字节。</p></li><li><p>Unicode 编码中，一个英文为一个字节，一个中文为两个字节。</p></li><li><p>符号：英文标点为一个字节，中文标点为两个字节。例如：英文句号 . 占1个字节的大小，中文句号 。占2个字节的大小。</p></li><li><p>UTF-16 编码中，一个英文字母字符或一个汉字字符存储都需要 2 个字节(Unicode 扩展区的一些汉字存储需要 4 个字节)。</p></li><li><p>UTF-32 编码中，世界上任何字符的存储都需要 4 个字节。</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.Reader;</span><br><span class="line">public class inputchar1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">try &#123;</span><br><span class="line">Reader reader = new FileReader(&quot;D:/a.txt&quot;);</span><br><span class="line">reader.close();</span><br><span class="line">// 这个也可以读取文件</span><br><span class="line">Reader reader1 = new InputStreamReader(new FileInputStream(&quot;D:/a.txt&quot;) , &quot;UTF-8&quot;); // 古老的方式，不过可以直接改代码的编码格式</span><br><span class="line">char[] buffer = new char[10];</span><br><span class="line">int len = 0;</span><br><span class="line">while((len = reader1.read(buffer)) != -1) &#123;</span><br><span class="line">System.out.print(new String(buffer , 0 ,len));</span><br><span class="line">&#125;</span><br><span class="line">reader1.close();</span><br><span class="line">while((len = reader.read(buffer)) != -1) &#123;</span><br><span class="line">System.out.print(new String(buffer, 0, len));</span><br><span class="line">&#125;</span><br><span class="line">reader.close();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO: handle exception</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="具体的流"><a href="#具体的流" class="headerlink" title="具体的流"></a>具体的流</h1><h2 id="buffered系类"><a href="#buffered系类" class="headerlink" title="buffered系类"></a>buffered系类</h2><ul><li>代表缓冲区系类</li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line">import java.io.BufferedInputStream;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class sdahasdk &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">BufferedInputStream us = new BufferedInputStream(new FileInputStream(&quot;D:/a.txt&quot;)); // 要自己定义缓冲区</span><br><span class="line">us.skip(1);</span><br><span class="line">byte[] buffer = new byte[10];</span><br><span class="line">int len = 0;</span><br><span class="line">while((len = us.read(buffer)) != -1) &#123;</span><br><span class="line">System.out.println( new String(buffer , 0 ,len ));</span><br><span class="line">&#125;</span><br><span class="line">us.close();</span><br><span class="line"></span><br><span class="line">BufferedReader r = new BufferedReader(new FileReader(&quot;D:/a.txt&quot;)); // 里面有设置默认的缓冲区在源码里可以点进去查看</span><br><span class="line">while(r.ready()) // ready是可读性，可读就true，不可读就fasle</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(r.readLine());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>只有顶层类的方法是没有线程锁的</li><li>同样也有writer的方法<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BufferedWriter wwe = new BufferedWriter( new FileWriter(&quot;D:/a.txt&quot;));</span><br></pre></td></tr></table></figure></li><li>然后通过wwe.xxx访问方法</li></ul><h1 id="InputStreamReader-x2F-Writer"><a href="#InputStreamReader-x2F-Writer" class="headerlink" title="InputStreamReader&#x2F;Writer"></a>InputStreamReader&#x2F;Writer</h1><ul><li>比较古老</li><li>因为可以设置编码格式</li><li>在构造方法里</li><li>和上面的FileInputStream一样</li></ul><h1 id="ObjectInputStream"><a href="#ObjectInputStream" class="headerlink" title="ObjectInputStream"></a>ObjectInputStream</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">public class stu implements Serializable&#123;</span><br><span class="line">public stu() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public stu(int x , String name) &#123;</span><br><span class="line">this.age = x;</span><br><span class="line">this.name = name;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">private String name;</span><br><span class="line">private transient int age;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">public int getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public String toString() &#123;</span><br><span class="line">return &quot;stu [name=&quot; + name + &quot;, age=&quot; + age + &quot;]&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>这个是个学生类，代表我们要实例化的类，要加个可序列化的标记性接口</li><li>transient是不参与序列化的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package 项目实训;</span><br><span class="line"></span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line">public class lesson15 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">ObjectOutputStream oo = new ObjectOutputStream(new FileOutputStream(&quot;D:/student.dat&quot;));</span><br><span class="line">stu s = new stu(15 , &quot;tom&quot;);</span><br><span class="line">oo.writeObject(s);</span><br><span class="line">oo.flush();</span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">public class lesson15 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line"></span><br><span class="line">ObjectInputStream d = new ObjectInputStream(new FileInputStream(&quot;D:/student.dat&quot;));</span><br><span class="line">Object o = d.readObject();</span><br><span class="line">System.out.println(o);</span><br><span class="line">d.close();</span><br><span class="line"></span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class scanner &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">Scanner scanner = new Scanner( new FileInputStream(&quot;D:/a.txt&quot;) , &quot;UTF-8&quot;);</span><br><span class="line">while(scanner.hasNext()) &#123;</span><br><span class="line">System.out.println(scanner.nextLine());</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Channnel流"><a href="#Channnel流" class="headerlink" title="Channnel流"></a>Channnel流</h1><ul><li>其是新io包里的</li><li>是nio里的，用的是堆外内存</li><li>就是jvm内存，所以效率会比在堆里的数组缓冲区效率更高</li><li>追主要的是对接，管道分为输入管道和输出管道</li><li>当他们对接上就可以实现复制等操作了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.nio.channels.FileChannel;</span><br><span class="line">public class Channel &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">File file = new File(&quot;D:/a.txt&quot;);</span><br><span class="line">FileInputStream ii;</span><br><span class="line">try &#123;</span><br><span class="line">ii = new FileInputStream(file);</span><br><span class="line">FileChannel cha = ii.getChannel();</span><br><span class="line">FileChannel out = new FileOutputStream(&quot;D:/a1.txt&quot;).getChannel();</span><br><span class="line">cha.transferTo(0, file.length(), out); // 这个输入管道的对接口 三个参数 ，第一个是开始复制的起始下标，第二个是文件长度 ，第三个是输出管道</span><br><span class="line">out.transferFrom(cha, 0, file.length()); // 这个是输出管道的接口 三个参数 ，第一个是输入管道，第二个是起始下标 ，第三个是文件长度</span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>两种管道对接的方式造成的结果是一样的，都是复制文件，但是如果这两个代码要制作的文件存在，则进行覆盖</li></ul><h1 id="StringBuffer和StringBuilder"><a href="#StringBuffer和StringBuilder" class="headerlink" title="StringBuffer和StringBuilder"></a>StringBuffer和StringBuilder</h1><ul><li>解决字符串的加法的问题，</li><li>字符串的+是方法的重载，每次都会返回一个对象</li><li>而下面两个则是用堆运存运算省区了一个变量</li><li>而builder无线程锁，所以比buffer要快<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package 项目实训;</span><br><span class="line">public class sr &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">String s = &quot;shdghgsg&quot;;</span><br><span class="line">long start = System.currentTimeMillis();</span><br><span class="line"> // 拼接太费事</span><br><span class="line">String h = s + &quot;shak&quot;;</span><br><span class="line">long end = System.currentTimeMillis();</span><br><span class="line">StringBuffer sb =new StringBuffer();</span><br><span class="line">System.out.println(end - start);</span><br><span class="line">sb.append(&quot;world&quot;);</span><br><span class="line">long start1 = System.currentTimeMillis();</span><br><span class="line"> // 拼接太费事</span><br><span class="line">sb.append(&quot;world&quot;);</span><br><span class="line">long end1 = System.currentTimeMillis();</span><br><span class="line">System.out.println(end1 - start1);</span><br><span class="line"> // 更快的</span><br><span class="line">StringBuilder sd = new StringBuilder();</span><br><span class="line">long start2 = System.currentTimeMillis();</span><br><span class="line"> // 拼接太费事</span><br><span class="line">sd.append(&quot;world&quot;);</span><br><span class="line">long end2 = System.currentTimeMillis();</span><br><span class="line">System.out.println(end2 - start2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="比较快的排序方式"><a href="#比较快的排序方式" class="headerlink" title="比较快的排序方式"></a>比较快的排序方式</h2><ul><li>Arrays.sort(要排序的数组)默认是正序</li><li>也可以变成倒序，但是要是泛型数组就可以</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">int[] a = &#123;3,4,5,1,3,5,5&#125;;</span><br><span class="line">Arrays.sort(a);</span><br><span class="line">for (int i : a) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ul><li>进程是程序对应的资源</li><li>线程是cpu运行的最小单位</li><li>线程是随机切换，一个程序中</li></ul><h2 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line"></span><br><span class="line">public class xiancheng &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread());</span><br><span class="line"></span><br><span class="line">Task1 task1 = new Task1();</span><br><span class="line">Thread t1 = new Thread(task1);</span><br><span class="line">t1.setName(&quot;第一个线程&quot;); // 线程的名字</span><br><span class="line">t1.start(); // 线程开始</span><br><span class="line">new Thread(task1).start(); // 这种方式也可以进行线程启动</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class Task1 implements Runnable // 任务</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">for (int i = 0; i &lt;101; i++) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(Thread.currentThread() + &quot;@&quot; +i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在做一件事的时候还是单线程比较快，多线程可以一起干很多事情，所以就相当于一个人和多个人的差距</li><li>意思就是单线程不一定比多线程慢，因为多线程存在上下文切换</li><li>首先分配cpu资源的单位是进程。一个进程所获得到的cpu资源是一定的。程序在执行的过程中消耗的是cpu，比如一个单核cpu，多个线程同时执行工作时，需要不断切换执行(上下文切换)，单个线程时间耗费更多了，而单线程只是一个线程跑。</li><li>多线程的总体执行时间和单线程是一样的，但是多线程中单个线程的执行时间是单线程的多倍。<br>多线程提高的是并发数量，比如现在有一个4核cpu的服务器，同一时间可执行4个线程，这样处理线程任务的速度比较快。但是多出来的线程，5个，6个，7个，多出的线程还是要等待。</li></ul><h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。</p><p>概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换会这个任务时，可以再加载这个任务的状态。任务从保存到再加载的过程就是一次上下文切换。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以说其实多线程不一定能够比单线程快是因为上下文切换，以及线程等待的问题</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/10/21/10-21/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>作业10-21</title>
      <link>http://example.com/2022/10/21/%E4%BD%9C%E4%B8%9A10-21/</link>
      <guid>http://example.com/2022/10/21/%E4%BD%9C%E4%B8%9A10-21/</guid>
      <pubDate>Fri, 21 Oct 2022 00:42:15 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称&quot;&gt;&lt;a href=&quot;#3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称&quot; class=&quot;headerlink&quot; title=&quot;3、用文件名过滤器实现输出指定目录下的所有java文件的</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称"><a href="#3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称" class="headerlink" title="3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称"></a>3、用文件名过滤器实现输出指定目录下的所有java文件的文件名称</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">import 作业.file;</span><br><span class="line"></span><br><span class="line">public class file过滤 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">File M = new File(&quot;D:\\&quot; , &quot;try&quot;);</span><br><span class="line">chakan(M);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void chakan(File M) &#123;</span><br><span class="line">File[] k = M.listFiles();</span><br><span class="line">System.out.println(k);</span><br><span class="line">for (int i = 0; i &lt; k.length; i++) &#123;</span><br><span class="line">File[] t = k[i].listFiles();</span><br><span class="line">if(t == null) &#123;</span><br><span class="line">String g =  k[i].getName();</span><br><span class="line">String d = g.substring(k[i].getName().lastIndexOf(&quot;.&quot;));</span><br><span class="line">if(d.equals(&quot;.java&quot;)) &#123;</span><br><span class="line">System.out.println(g.substring(0, k[i].getName().lastIndexOf(&quot;.&quot;)));</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">chakan(k[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>重点字符串的相等要用equals，递归</li></ul><h1 id="判断指定路径下的所有子文件或是目录，如果是子文件则全部删除"><a href="#判断指定路径下的所有子文件或是目录，如果是子文件则全部删除" class="headerlink" title="判断指定路径下的所有子文件或是目录，如果是子文件则全部删除"></a>判断指定路径下的所有子文件或是目录，如果是子文件则全部删除</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public static void SHANCHU(File k) &#123;</span><br><span class="line">File[] ds =k.listFiles(); </span><br><span class="line">for (int i = 0; i &lt; ds.length ; i++ ) &#123;</span><br><span class="line">File[] h = ds[i].listFiles();</span><br><span class="line">if(h == null) &#123;</span><br><span class="line">System.out.println(&quot;这个是个文件&quot;);</span><br><span class="line">ds[i].delete();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">k.delete();</span><br><span class="line">SHANCHU(ds[i]);</span><br><span class="line">&#125;</span><br><span class="line">k.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重点：递归</li></ul><h1 id="5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D-102班级-javaSE作业）"><a href="#5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D-102班级-javaSE作业）" class="headerlink" title="5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D:\102班级\javaSE作业）"></a>5、查找API（File），通过程序创建指定的目录。假设在D盘下创建一个目录102班级，在102班级下又有一个子目录javaSE作业（D:\102班级\javaSE作业）</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">File G = new File(&quot;D:\\\\102班级\\\\javaSE作业&quot;);</span><br><span class="line"></span><br><span class="line">G.mkdirs();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="从磁盘读取一个文件到内存中，再打印到控制台"><a href="#从磁盘读取一个文件到内存中，再打印到控制台" class="headerlink" title="从磁盘读取一个文件到内存中，再打印到控制台"></a>从磁盘读取一个文件到内存中，再打印到控制台</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 项目实训;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line"></span><br><span class="line">public class lkdjfslasfj &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">InputStream is = new FileInputStream(&quot;D:/a.txt&quot;);</span><br><span class="line">//while(is.available() != 0) &#123;</span><br><span class="line">//System.out.println((char)is.read()); // 默认一次只读一个字符</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">byte[] buffer = new byte[10]; // 通过设置缓冲区进行扩展一次可读的字符数量，如果是字符型，那这个byte要变char</span><br><span class="line">int len = 0; // 设置个长度</span><br><span class="line">while((len = is.read(buffer)) != -1) // 判断我是不是超出缓冲区的限定，如果超出，就只读取超出的部分</span><br><span class="line">&#123;</span><br><span class="line">System.out.print(new String(buffer , 0 , len)); </span><br><span class="line">&#125;</span><br><span class="line">is.close();</span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="模拟用户登录："><a href="#模拟用户登录：" class="headerlink" title="模拟用户登录："></a>模拟用户登录：</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class login &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">File basic = new File(&quot;D://&quot; , &quot;a.txt&quot;);</span><br><span class="line">try(InputStream in = new FileInputStream(basic);</span><br><span class="line">Reader re = new InputStreamReader(in , &quot;UTF-8&quot;);</span><br><span class="line">) &#123;</span><br><span class="line">Map db = new HashMap();</span><br><span class="line">Scanner scanner = new Scanner(re);</span><br><span class="line">while(scanner.hasNext()) &#123;</span><br><span class="line">String usertotal = scanner.nextLine();</span><br><span class="line">String[] username = usertotal.split(&quot; &quot;);</span><br><span class="line">//System.out.println(username[0]);</span><br><span class="line">//System.out.println(username[1]);</span><br><span class="line">db.put(username[0],username[1]);</span><br><span class="line">//System.out.println(db);</span><br><span class="line">&#125;</span><br><span class="line">Scanner name = new Scanner(System.in);</span><br><span class="line">String usename;</span><br><span class="line">String password;</span><br><span class="line">while(true) &#123;</span><br><span class="line">while(true) &#123;</span><br><span class="line">System.out.println(&quot;请输入账号：&quot;);</span><br><span class="line"> usename = name.nextLine();</span><br><span class="line">if(usename == null) &#123;</span><br><span class="line">System.out.println(&quot;姓名不能为空&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">while(true) &#123;</span><br><span class="line">System.out.println(&quot;请输入密码&quot;);</span><br><span class="line"> password = name.nextLine();</span><br><span class="line"></span><br><span class="line">if(password == null) &#123;</span><br><span class="line">System.out.println(&quot;密码不能为空&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(password.equals(db.get(usename))) &#123;</span><br><span class="line">System.out.println(&quot;登陆成功&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">System.out.println(&quot;输入错误请重新输入&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e1) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.Reader;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class login &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">File basic = new File(&quot;D://&quot; , &quot;a.txt&quot;);</span><br><span class="line">try(InputStream in = new FileInputStream(basic);</span><br><span class="line">Reader re = new InputStreamReader(in , &quot;UTF-8&quot;);</span><br><span class="line">) &#123;</span><br><span class="line">Map db = new HashMap();</span><br><span class="line">Scanner scanner = new Scanner(re);</span><br><span class="line">while(scanner.hasNext()) &#123;</span><br><span class="line">String usertotal = scanner.nextLine();</span><br><span class="line">String[] username = usertotal.split(&quot; &quot;);</span><br><span class="line">//System.out.println(username[0]);</span><br><span class="line">//System.out.println(username[1]);</span><br><span class="line">db.put(username[0],username[1]);</span><br><span class="line">//System.out.println(db);</span><br><span class="line">&#125;</span><br><span class="line">Scanner name = new Scanner(System.in);</span><br><span class="line">String usename;</span><br><span class="line">String password;</span><br><span class="line">while(true) &#123;</span><br><span class="line">while(true) &#123;</span><br><span class="line">System.out.println(&quot;请输入账号：&quot;);</span><br><span class="line"> usename = name.nextLine();</span><br><span class="line">if(usename == null) &#123;</span><br><span class="line">System.out.println(&quot;姓名不能为空&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">while(true) &#123;</span><br><span class="line">System.out.println(&quot;请输入密码&quot;);</span><br><span class="line"> password = name.nextLine();</span><br><span class="line"></span><br><span class="line">if(password == null) &#123;</span><br><span class="line">System.out.println(&quot;密码不能为空&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(password.equals(db.get(usename))) &#123;</span><br><span class="line">System.out.println(&quot;登陆成功&quot;);</span><br><span class="line">System.out.println(&quot;输入1进行修改密码&quot;);</span><br><span class="line">int m = Integer.parseInt(name.nextLine());</span><br><span class="line">if(m == 1) &#123;</span><br><span class="line">if(db.containsKey(usename)) &#123;</span><br><span class="line">System.out.println(&quot;请输入更改之后的密码&quot;);</span><br><span class="line">String newpassword = name.nextLine();</span><br><span class="line">db.put(usename, newpassword);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">System.out.println(&quot;输入错误请重新输入&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e1) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E4%BD%9C%E4%B8%9A/">作业</category>
      
      
      
    </item>
    
    <item>
      <title>io流</title>
      <link>http://example.com/2022/10/20/10-20/</link>
      <guid>http://example.com/2022/10/20/10-20/</guid>
      <pubDate>Thu, 20 Oct 2022 02:23:03 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;字节流&quot;&gt;&lt;a href=&quot;#字节流&quot; class=&quot;headerlink&quot; title=&quot;字节流&quot;&gt;&lt;/a&gt;字节流&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;字节流的结尾一般都是InputStream ， OutputStream&lt;/li&gt;
&lt;li&gt;是个抽象类&lt;/li&gt;
&lt;li</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><ul><li>字节流的结尾一般都是InputStream ， OutputStream</li><li>是个抽象类</li><li>可以自动关闭</li><li>顶层类，上面就是Object</li><li>这个东西是要有参照物的</li></ul><h2 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package 作业;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">public class sd3333sdfse &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">OutputStream os1;</span><br><span class="line">try &#123;</span><br><span class="line">os1 = new FileOutputStream( new File(&quot;D:\\a.txt&quot;), false); // 这个false代表是覆盖源文件，如果是true就是把字符串加入</span><br><span class="line">String s = &quot;hello word&quot;;</span><br><span class="line">os1.write(s.getBytes());</span><br><span class="line">os1.flush();  // 落盘到磁盘上</span><br><span class="line">os1.close(); // 关闭文件输出流</span><br><span class="line">&#125; catch (FileNotFoundException e1) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">public class read &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">try &#123;</span><br><span class="line">InputStream is = new FileInputStream(&quot;D:/a.txt&quot;);</span><br><span class="line">//while(is.available() != 0) &#123;</span><br><span class="line">//System.out.println((char)is.read()); // 默认一次只读一个字符</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">byte[] buffer = new byte[10]; // 通过设置缓冲区进行扩展一次可读的字符数量，如果是字符型，那这个byte要变char</span><br><span class="line">int len = 0; // 设置个长度</span><br><span class="line">while((len = is.read(buffer)) != -1) // 判断我是不是超出缓冲区的限定，如果超出，就只读取超出的部分</span><br><span class="line">&#123;</span><br><span class="line">System.out.print(new String(buffer , 0 , len)); </span><br><span class="line">&#125;</span><br><span class="line">is.close();</span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>定义：File d &#x3D; new File(“XXxxx”，”name”); &#x2F;&#x2F; 这里XXxxx是文件目录 , 第二个是文件名字</li><li>文件或者目录</li></ul><h2 id="exist（）"><a href="#exist（）" class="headerlink" title="exist（）"></a>exist（）</h2><ul><li>文件是有大小的，目录是无大小</li><li>判断文件&#x2F;目录是不是存在</li></ul><h2 id="isFile"><a href="#isFile" class="headerlink" title="isFile"></a>isFile</h2><ul><li>代表判断是不是文件</li></ul><h2 id="isDirectory"><a href="#isDirectory" class="headerlink" title="isDirectory"></a>isDirectory</h2><ul><li>代表是不是文件夹</li></ul><h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><ul><li>代表查看其字节的长度，大小，但是文件有大小，目录无大小</li></ul><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><ul><li>代表删除文件，注意这里删除的文件不是送进回收站里的，如果要删除目录，要先把里面的文件清空</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class file &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">File m = new File(&quot;D:\\&quot; , &quot;a.txt&quot;);</span><br><span class="line">File k = new File(&quot;D//&quot;);</span><br><span class="line">System.out.println(m.exists());</span><br><span class="line">System.out.println(k.exists());</span><br><span class="line">System.out.println(k.isFile());</span><br><span class="line">System.out.println(m.isDirectory());</span><br><span class="line">System.out.println(k.length());</span><br><span class="line">System.out.println(k.delete());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void SHANCHU(File k) &#123;</span><br><span class="line">File[] ds =k.listFiles(); </span><br><span class="line">for (int i = 0; i &lt; ds.length ; i++ ) &#123;</span><br><span class="line">File[] h = ds[i].listFiles();</span><br><span class="line">if(h == null) &#123;</span><br><span class="line">System.out.println(&quot;这个是个文件&quot;);</span><br><span class="line">ds[i].delete();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">k.delete();</span><br><span class="line">SHANCHU(ds[i]);</span><br><span class="line">&#125;</span><br><span class="line">k.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="makedir"><a href="#makedir" class="headerlink" title="makedir"></a>makedir</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class adsgqjd &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">File file = new File(&quot;D:/a/abc.txt&quot;);</span><br><span class="line">System.out.println(file.exists());</span><br><span class="line">System.out.println(file.mkdir());</span><br><span class="line">File file2 =new File(&quot;D:/a/c/v/bv/nb&quot;);</span><br><span class="line">System.out.println(file2.mkdirs());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们通过mkdirs可以直接深度创建</li><li>但是如果没有父目录，一般的文件就无法创建</li></ul><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private static File getCopy(File f1) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">String sufString = f1.getName().substring(f1.getName().lastIndexOf(&quot;.&quot;));</span><br><span class="line">String qi = f1.getName().substring(0, f1.getName().lastIndexOf(&quot;.&quot;));</span><br><span class="line">String use = qi + &quot;-副本&quot; + sufString;</span><br><span class="line">File newf = new File(f1.getParent() , use);</span><br><span class="line">if(newf.exists()) &#123;</span><br><span class="line">returngetCopy(newf);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return newf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/10/20/10-20/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>签到的制作（后端＋前端）</title>
      <link>http://example.com/2022/10/19/%E5%88%B6%E4%BD%9C%E7%AD%BE%E5%88%B0/</link>
      <guid>http://example.com/2022/10/19/%E5%88%B6%E4%BD%9C%E7%AD%BE%E5%88%B0/</guid>
      <pubDate>Wed, 19 Oct 2022 05:22:28 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;前提准备&quot;&gt;&lt;a href=&quot;#前提准备&quot; class=&quot;headerlink&quot; title=&quot;前提准备&quot;&gt;&lt;/a&gt;前提准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Centos7.8&lt;/li&gt;
&lt;li&gt;在虚拟机安装好redis，并且可以成功ping通&lt;/li&gt;
&lt;li&gt;使用j</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><ul><li>Centos7.8</li><li>在虚拟机安装好redis，并且可以成功ping通</li><li>使用jdk 11</li><li>使用idea 2019.3</li><li>准备好post man</li><li>准备好可以观察redis的软件，比如redisDespoketManger等</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ul><li>先打开虚拟机，并开启redis</li><li>然后打开idea，创建springboot项目，在插件列表选择 </li><li>spring web</li><li>spring Data Redis</li><li>Lombok</li><li>然后在pom文件里添加hutool插件（我们要用到的）</li><li>接下来修改application文件，我习惯把他的后缀改成yml</li><li>然后在application文件里添加<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">    redis:</span><br><span class="line">       # host: 192.168.1.121 #ip地址</span><br><span class="line">        host: 192.168.41.110</span><br><span class="line">        port: 6379 #端口</span><br><span class="line">        password: liuzihan #密码</span><br><span class="line">        timeout: 3000 #超时时间</span><br><span class="line">        database: 0 #第几号数据库</span><br><span class="line">server:</span><br><span class="line">    port: 9999 #这个是程序启动之后的端口号，也就是tomcat插件的端口号</span><br></pre></td></tr></table></figure></li><li>ip地址是虚拟机，或者局域网内真实机的ip</li></ul><h1 id="思考编写方式"><a href="#思考编写方式" class="headerlink" title="思考编写方式"></a>思考编写方式</h1><ul><li>我的编写思路是通过redis里的bitMap进行日期的存取</li><li>首先在SignDemoApplication的包内创建几个包，分别代表客户端，服务端以及自动启动还有配置文件包，接下来，我们分开讲</li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li>创建config包，然后在包里创建RedisTemplateConfiguration.class</li><li>然后写入<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line">import com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line">import com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line">import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line">import org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line">import org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;p&gt;ClassName: RedisConfigure&lt;/p &gt;</span><br><span class="line"> * &lt;p&gt;Description: redisTemplate自定义序列化配置，更改其默认序列化器&lt;/p &gt;</span><br><span class="line"> * &lt;p&gt;Date: 2021/10/23&lt;/p &gt;</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">public class RedisTemplateConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RedisTemplate&lt;String,Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory)&#123;</span><br><span class="line"></span><br><span class="line">        RedisTemplate&lt;String,Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();</span><br><span class="line">        // 参照StringRedisTemplate内部实现指定序列化器</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        //使用 jackson2jasonRedisSerialize替换默认序列化</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL , JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        //为String类型 key/value 设置序列化</span><br><span class="line">        redisTemplate.setKeySerializer(new StringRedisSerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        //为hash ；类型 key、value 设置序列化</span><br><span class="line">        redisTemplate.setHashKeySerializer(new StringRedisSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        return redisTemplate;</span><br><span class="line"></span><br><span class="line">       /* redisTemplate.setKeySerializer(keySerializer());</span><br><span class="line">        redisTemplate.setHashKeySerializer(keySerializer());</span><br><span class="line">        redisTemplate.setValueSerializer(valueSerializer());</span><br><span class="line">        redisTemplate.setHashValueSerializer(valueSerializer());</span><br><span class="line"></span><br><span class="line">        return redisTemplate;*/</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //使用Jackson序列化器，key使用字符串</span><br><span class="line">    private RedisSerializer&lt;String&gt; keySerializer() &#123;</span><br><span class="line">        return new StringRedisSerializer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //使用Jackson序列化器，value使用Object</span><br><span class="line">    private RedisSerializer&lt;Object&gt; valueSerializer() &#123;</span><br><span class="line">        return new GenericJackson2JsonRedisSerializer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>这个就是个简单的redis自动序列化类，网上一抓一大把</li></ul><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ul><li>客户端是我们主要想写的地方，就是实现签到，以及获取mac地址等功能的地方</li><li>于是我们创建Severdemo包</li><li>在这个包下，写入SignSeverce类写上<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import cn.hutool.core.date.DateUtil;</span><br><span class="line">import cn.hutool.core.date.LocalDateTimeUtil;</span><br><span class="line">import cn.hutool.core.net.NetUtil;</span><br><span class="line">import cn.hutool.core.util.StrUtil;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.data.redis.connection.BitFieldSubCommands;</span><br><span class="line">import org.springframework.data.redis.core.RedisCallback;</span><br><span class="line">import org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line">import java.net.InetAddress;</span><br><span class="line">import java.net.UnknownHostException;</span><br><span class="line">import java.time.LocalDateTime;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">@Mapper</span><br><span class="line">public class SignService &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private RedisTemplate redisTemplate;</span><br><span class="line">    /*</span><br><span class="line">     *用户签到可以补签</span><br><span class="line">     * @param UserId</span><br><span class="line">     * @param DataStr</span><br><span class="line">     * */</span><br><span class="line">    public Map&lt;String , Object&gt; doSign(String UserId , String DataStr)&#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            inetAddress = InetAddress.getLocalHost();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span><br><span class="line">        String localMacAddress2 = NetUtil.getMacAddress(inetAddress);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String , Object&gt; result = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        if (String.valueOf(redisTemplate.keys(&quot;user:&quot; + UserId + &quot;:*&quot;)).equals(&quot;[]&quot;))&#123;</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            String MAc = String.valueOf(redisTemplate.keys(&quot;user:&quot; + UserId + &quot;:*&quot;));</span><br><span class="line">            String[] split = MAc.split(&quot;:&quot;);</span><br><span class="line">            if (localMacAddress2.equals(split[2]))&#123;</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                result.put(&quot;code&quot; , 404);</span><br><span class="line">                result.put(&quot;message&quot; , &quot;你不是在同一台电脑上进行的签到，请联系管理员进行修复&quot;);</span><br><span class="line">                return  result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Date  date = getDate(DataStr);</span><br><span class="line"></span><br><span class="line">        if (DataStr != null)&#123;</span><br><span class="line">            if (String.valueOf(redisTemplate.keys(&quot;user:&quot; + UserId + &quot;:*&quot;)).equals(&quot;[]&quot;)) &#123;</span><br><span class="line"></span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                String MAc = String.valueOf(redisTemplate.keys(&quot;user:&quot; + UserId + &quot;:*&quot;));</span><br><span class="line">                String[] split = MAc.split(&quot;:&quot;);</span><br><span class="line">                if (&quot;0&quot;.equals(split[3])) &#123;</span><br><span class="line">                    result.put(&quot;code&quot;, 407);</span><br><span class="line">                    result.put(&quot;message&quot;, &quot;你未经过老师同意无法补签&quot;);</span><br><span class="line">                    return result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 获取日期</span><br><span class="line"></span><br><span class="line">        // 获取日期对应的天数</span><br><span class="line">        int day = DateUtil.dayOfMonth(date) - 1;</span><br><span class="line">        // 构建redis 的 key</span><br><span class="line">        String signkey = buildSignKEy(UserId,date , localMacAddress2);</span><br><span class="line">        // 查看日期是不是签到</span><br><span class="line">        boolean isSigned = redisTemplate.opsForValue().getBit(signkey , day);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if(isSigned)&#123;</span><br><span class="line">            result.put(&quot;code&quot; , 400);</span><br><span class="line">            result.put(&quot;message&quot; , &quot;当前日期已完成签到，无需再签&quot;);</span><br><span class="line">            return  result;</span><br><span class="line">        &#125;</span><br><span class="line">        // 签到</span><br><span class="line">        redisTemplate.opsForValue().setBit(signkey , day , true);</span><br><span class="line">        //根据当前日期获取签到的天数</span><br><span class="line">        Date today = new Date();</span><br><span class="line">        //统计总次数</span><br><span class="line">        long count = getSumSignCount(UserId , today);</span><br><span class="line">        //统计连续次数</span><br><span class="line">        int continuous = getContinusSignCount(UserId , today);</span><br><span class="line"></span><br><span class="line">        result.put(&quot;code&quot; , 200);</span><br><span class="line">        result.put(&quot;message&quot; , &quot;签到成功&quot;);</span><br><span class="line">        result.put(&quot;continuous&quot; , continuous);</span><br><span class="line">        result.put(&quot;count&quot; , count);</span><br><span class="line"></span><br><span class="line">        String basicname = String.valueOf(redisTemplate.keys(&quot;user:&quot; +UserId+ &quot;:*&quot;));</span><br><span class="line">        String changgename = basicname.substring(basicname.indexOf(&quot;[&quot;)+1 , basicname.indexOf(&quot;]&quot;));</span><br><span class="line">        String[] namebasic  =  changgename.split(&quot;:&quot;);</span><br><span class="line">        String newname = namebasic[0] + &quot;:&quot; + namebasic[1] + &quot;:&quot; + namebasic[2] + &quot;:0:&quot; + namebasic[4];</span><br><span class="line">        redisTemplate.rename(changgename , newname);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return  result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Map&lt;String , Object&gt;getSignByDate(String UserId , String DataStr)&#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            inetAddress = InetAddress.getLocalHost();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span><br><span class="line">        String localMacAddress2 = NetUtil.getMacAddress(inetAddress);</span><br><span class="line">        System.out.println(&quot;localMacAddress2 = &quot; + localMacAddress2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;String , Object&gt; result = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if (String.valueOf(redisTemplate.keys(&quot;user:&quot; + UserId + &quot;:*&quot;)).equals(&quot;[]&quot;))&#123;</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            String MAc = String.valueOf(redisTemplate.keys(&quot;user:&quot; + UserId + &quot;:*&quot;));</span><br><span class="line">            String[] split = MAc.split(&quot;:&quot;);</span><br><span class="line">            if (localMacAddress2.equals(split[2]))&#123;</span><br><span class="line">                System.out.println(split[2]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                result.put(&quot;code&quot; , 404);</span><br><span class="line">                result.put(&quot;message&quot; , &quot;你不是在同一台电脑上进行的签到，请联系管理员进行修复&quot;);</span><br><span class="line">                return  result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 获取日期</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Date date = getDate(DataStr);</span><br><span class="line">        // 获取日期对应的天数</span><br><span class="line">        int day = DateUtil.dayOfMonth(date) - 1;</span><br><span class="line">        // 构建redis 的 key</span><br><span class="line">        String signkey = buildSignKEy(UserId, date , localMacAddress2);</span><br><span class="line">        // 查看日期是不是签到</span><br><span class="line">        boolean isSigned = redisTemplate.opsForValue().getBit(signkey , day);</span><br><span class="line"></span><br><span class="line">        // 签到</span><br><span class="line"></span><br><span class="line">        //根据当前日期获取签到的天数</span><br><span class="line">        Date today = new Date();</span><br><span class="line">        //统计总次数</span><br><span class="line">        long count = getSumSignCount(UserId , today);</span><br><span class="line">        //统计连续次数</span><br><span class="line">        int continuous = getContinusSignCount(UserId , today);</span><br><span class="line">        result.put(&quot;today&quot; , isSigned);</span><br><span class="line"></span><br><span class="line">        result.put(&quot;continuous&quot; , continuous);</span><br><span class="line">        result.put(&quot;count&quot; , count);</span><br><span class="line">        return  result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Map&lt;String , Object&gt; getSignInfo(String UserId , String DataStr)&#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            inetAddress = InetAddress.getLocalHost();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span><br><span class="line">        String localMacAddress2 = NetUtil.getMacAddress(inetAddress);</span><br><span class="line">        System.out.println(&quot;localMacAddress2 = &quot; + localMacAddress2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Date date = getDate(DataStr);</span><br><span class="line">        String signkey = buildSignKEy(UserId , date , localMacAddress2);</span><br><span class="line">        // 构建一个归自动排序的Map</span><br><span class="line">        Map&lt;String , Object&gt; signInfo = new TreeMap&lt;&gt;();</span><br><span class="line">        // 获取一个月的总天数</span><br><span class="line">        int dayOfMouth = DateUtil.lengthOfMonth(DateUtil.month(date) + 1 , DateUtil.isLeapYear(DateUtil.dayOfYear(date)));</span><br><span class="line"></span><br><span class="line">        // bitfiled user : sign : 5 : 2021 014 u30</span><br><span class="line">        BitFieldSubCommands bitFieldSubCommands = BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMouth)).valueAt(0);</span><br><span class="line"></span><br><span class="line">        // 获取用户从该当前日期到1号的状态</span><br><span class="line">        List&lt;Long&gt; list = redisTemplate.opsForValue().bitField(signkey , bitFieldSubCommands);</span><br><span class="line">        if (list == null || list.isEmpty())&#123;</span><br><span class="line">            return  signInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        long v = list.get(0) == null ? 0 :list.get(0);</span><br><span class="line">        for (int i = dayOfMouth ; i &gt; 0 ; i--)&#123;</span><br><span class="line">            /**</span><br><span class="line">             *  map的存储格式</span><br><span class="line">             *      签到：  yyyy-mm-01</span><br><span class="line">             *      未签到  yyyy-mm-02 不做任何处理</span><br><span class="line">             *</span><br><span class="line">             */</span><br><span class="line"></span><br><span class="line">            // 获取日期</span><br><span class="line">         LocalDateTime localDateTime =  LocalDateTimeUtil.of(date).withDayOfMonth(i);</span><br><span class="line">            // 右移再左移</span><br><span class="line">            boolean flag = v &gt;&gt; 1 &lt;&lt; 1 !=v;</span><br><span class="line">            if (flag)&#123;</span><br><span class="line">                signInfo.put(DateUtil.format(localDateTime , &quot;yyyy-MM-dd&quot;) , &quot;✔&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            v &gt;&gt;= 1 ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return signInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private long getSumSignCount(String userId, Date today) &#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            inetAddress = InetAddress.getLocalHost();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span><br><span class="line">        String localMacAddress2 = NetUtil.getMacAddress(inetAddress);</span><br><span class="line">        System.out.println(&quot;localMacAddress2 = &quot; + localMacAddress2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        String signkey = buildSignKEy(userId , today , localMacAddress2);</span><br><span class="line">        //bitcount命令</span><br><span class="line">        return(long) redisTemplate.execute((RedisCallback&lt;Long&gt;)con -&gt; con.bitCount(signkey.getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private int getContinusSignCount(String userId, Date today) &#123;</span><br><span class="line"></span><br><span class="line">        InetAddress inetAddress = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            inetAddress = InetAddress.getLocalHost();</span><br><span class="line">        &#125; catch (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        //第二种方式：利用hutool工具类中的封装方法获取本机mac地址</span><br><span class="line">        String localMacAddress2 = NetUtil.getMacAddress(inetAddress);</span><br><span class="line">        System.out.println(&quot;localMacAddress2 = &quot; + localMacAddress2);</span><br><span class="line"></span><br><span class="line">        // 获取日期对应的天数</span><br><span class="line">        int dayofMonth = DateUtil.dayOfMonth(today);</span><br><span class="line">        String signkey = buildSignKEy(userId , today , localMacAddress2);</span><br><span class="line"></span><br><span class="line">        BitFieldSubCommands bitFieldSubCommands = BitFieldSubCommands.create().get(BitFieldSubCommands.BitFieldType.unsigned(dayofMonth)).valueAt(0);</span><br><span class="line"></span><br><span class="line">        // 获取用户从该当前日期到1号的状态</span><br><span class="line">        List&lt;Long&gt; list = redisTemplate.opsForValue().bitField(signkey , bitFieldSubCommands);</span><br><span class="line">        if (list == null || list.isEmpty())&#123;</span><br><span class="line">            return  0;</span><br><span class="line">        &#125;</span><br><span class="line">        int Signcount = 0;</span><br><span class="line">        long v = list.get(0) == null ? 0 :list.get(0);</span><br><span class="line">        for (int i = dayofMonth ; i &gt; 0 ; i--)&#123;</span><br><span class="line">            // i表示位移操作的次数</span><br><span class="line">            if(v &gt;&gt; 1 &lt;&lt; 1 == v) &#123;</span><br><span class="line">                // 用户当前可能未签到，所以要排除当天的可能性</span><br><span class="line">                if(i != dayofMonth) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 如果右移后又左移和自己不相等 代表她已经签到</span><br><span class="line">                Signcount++;</span><br><span class="line">            &#125;</span><br><span class="line">            // 右移一位并重新赋值，相当于丢弃已经判断的数字</span><br><span class="line">            v &gt;&gt;= 1 ;</span><br><span class="line">        &#125;</span><br><span class="line">        return Signcount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String buildSignKEy(String userId, Date date , String localMacAddress) &#123;</span><br><span class="line">        return  String.format(&quot;user:%s:%s:0:%s&quot;,userId ,localMacAddress, DateUtil.format(date, &quot;yyyyMM&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Date getDate(String dataStr) &#123;</span><br><span class="line">        return StrUtil.isBlank(dataStr) ? new Date() : DateUtil.parseDate(dataStr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public List&lt;Object&gt; teachercck(String DataStr) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Map&lt;Object , Object&gt; result = new HashMap();</span><br><span class="line">        List&lt;Object&gt; end = new ArrayList&lt;&gt;();</span><br><span class="line">        String basicname = String.valueOf(redisTemplate.keys(&quot;user:&quot; + &quot;*&quot;));</span><br><span class="line">        String[] basic = basicname.split(&quot;,&quot;);</span><br><span class="line">        Date date = getDate(DataStr);</span><br><span class="line">        int day = DateUtil.dayOfMonth(date) - 1;</span><br><span class="line">//        end.put(&quot;code&quot; , 0);</span><br><span class="line">//        end.put(&quot;msg&quot; , &quot;&quot;);</span><br><span class="line">//        result.put(&quot;count&quot; , basic.length);</span><br><span class="line">        end.add(basic.length);</span><br><span class="line">        for( int i = 0 ; i &lt; basic.length ; i++ )&#123;</span><br><span class="line">                String[] namebasic  =  basic[i].split(&quot;:&quot;);</span><br><span class="line">                String signkey = buildSignKEy(namebasic[1], date , namebasic[2]);</span><br><span class="line">                boolean isSigned = redisTemplate.opsForValue().getBit(signkey , day);</span><br><span class="line">//                result.put(i+1 , namebasic[1]);</span><br><span class="line">                end.add(namebasic[1]);</span><br><span class="line">                end.add(namebasic[2]);</span><br><span class="line">//                result.put(namebasic[1], namebasic[2]);</span><br><span class="line">                if (isSigned)&#123;</span><br><span class="line">//                    result.put(namebasic[2] , &quot;今日已经签到&quot;);</span><br><span class="line">                    end.add(&quot;今日已经签到&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">//                    result.put(namebasic[2] , &quot;今日没有签到&quot;);</span><br><span class="line">                    end.add(&quot;今日未签到&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                if (namebasic[3].equals(&quot;0&quot;))&#123;</span><br><span class="line">                    end.add(&quot;未获得补签权限&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    end.add(&quot;已经获得补签权限&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Map&lt;Object , Object&gt; teacherchange(String UserId)</span><br><span class="line">    &#123;</span><br><span class="line">        Map&lt;Object , Object&gt; result = new HashMap();</span><br><span class="line">        String basicname = String.valueOf(redisTemplate.keys(&quot;user:&quot; +UserId+ &quot;:*&quot;));</span><br><span class="line">        String changgename = basicname.substring(basicname.indexOf(&quot;[&quot;)+1 , basicname.indexOf(&quot;]&quot;));</span><br><span class="line">        String[] namebasic  =  changgename.split(&quot;:&quot;);</span><br><span class="line"></span><br><span class="line">        String newname = namebasic[0] + &quot;:&quot; + namebasic[1] + &quot;:&quot; + namebasic[2] + &quot;:1:&quot; + namebasic[4];</span><br><span class="line">        redisTemplate.rename(changgename , newname);</span><br><span class="line"></span><br><span class="line">        result.put(&quot;code&quot; , 404);</span><br><span class="line">        result.put(&quot;message&quot; , &quot;成功修改&quot;);</span><br><span class="line">        return  result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h2 id="自动启动"><a href="#自动启动" class="headerlink" title="自动启动"></a>自动启动</h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AD%BE%E5%88%B0%E7%9A%84%E5%88%B6%E4%BD%9C/">签到的制作</category>
      
      
      
      <comments>http://example.com/2022/10/19/%E5%88%B6%E4%BD%9C%E7%AD%BE%E5%88%B0/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
