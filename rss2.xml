<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>枫叶冢</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>只有努力不会辜负你</description>
    <pubDate>Thu, 20 Oct 2022 08:30:19 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>io流</title>
      <link>http://example.com/2022/10/20/10-20/</link>
      <guid>http://example.com/2022/10/20/10-20/</guid>
      <pubDate>Thu, 20 Oct 2022 02:23:03 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;字节流&quot;&gt;&lt;a href=&quot;#字节流&quot; class=&quot;headerlink&quot; title=&quot;字节流&quot;&gt;&lt;/a&gt;字节流&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;字节流的结尾一般都是InputStream ， OutputStream&lt;/li&gt;
&lt;li&gt;是个抽象类&lt;/li&gt;
&lt;li</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h1><ul><li>字节流的结尾一般都是InputStream ， OutputStream</li><li>是个抽象类</li><li>可以自动关闭</li><li>顶层类，上面就是Object</li><li>这个东西是要有参照物的</li></ul><h2 id="OutputStream"><a href="#OutputStream" class="headerlink" title="OutputStream"></a>OutputStream</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package 作业;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">public class sd3333sdfse &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">OutputStream os1;</span><br><span class="line">try &#123;</span><br><span class="line">os1 = new FileOutputStream( new File(&quot;D:\\a.txt&quot;), false); // 这个false代表是覆盖源文件，如果是true就是把字符串加入</span><br><span class="line">String s = &quot;hello word&quot;;</span><br><span class="line">os1.write(s.getBytes());</span><br><span class="line">os1.flush();  // 落盘到磁盘上</span><br><span class="line">os1.close(); // 关闭文件输出流</span><br><span class="line">&#125; catch (FileNotFoundException e1) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="InputStream"><a href="#InputStream" class="headerlink" title="InputStream"></a>InputStream</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">public class read &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">try &#123;</span><br><span class="line">InputStream is = new FileInputStream(&quot;D:/a.txt&quot;);</span><br><span class="line">//while(is.available() != 0) &#123;</span><br><span class="line">//System.out.println((char)is.read()); // 默认一次只读一个字符</span><br><span class="line">//&#125;</span><br><span class="line"></span><br><span class="line">byte[] buffer = new byte[10]; // 通过设置缓冲区进行扩展一次可读的字符数量，如果是字符型，那这个byte要变char</span><br><span class="line">int len = 0; // 设置个长度</span><br><span class="line">while((len = is.read(buffer)) != -1) // 判断我是不是超出缓冲区的限定，如果超出，就只读取超出的部分</span><br><span class="line">&#123;</span><br><span class="line">System.out.print(new String(buffer , 0 , len)); </span><br><span class="line">&#125;</span><br><span class="line">is.close();</span><br><span class="line">&#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>定义：File d &#x3D; new File(“XXxxx”，”name”); &#x2F;&#x2F; 这里XXxxx是文件目录 , 第二个是文件名字</li><li>文件或者目录</li></ul><h2 id="exist（）"><a href="#exist（）" class="headerlink" title="exist（）"></a>exist（）</h2><ul><li>文件是有大小的，目录是无大小</li><li>判断文件&#x2F;目录是不是存在</li></ul><h2 id="isFile"><a href="#isFile" class="headerlink" title="isFile"></a>isFile</h2><ul><li>代表判断是不是文件</li></ul><h2 id="isDirectory"><a href="#isDirectory" class="headerlink" title="isDirectory"></a>isDirectory</h2><ul><li>代表是不是文件夹</li></ul><h2 id="length"><a href="#length" class="headerlink" title="length"></a>length</h2><ul><li>代表查看其字节的长度，大小，但是文件有大小，目录无大小</li></ul><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><ul><li>代表删除文件，注意这里删除的文件不是送进回收站里的，如果要删除目录，要先把里面的文件清空</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class file &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">File m = new File(&quot;D:\\&quot; , &quot;a.txt&quot;);</span><br><span class="line">File k = new File(&quot;D//&quot;);</span><br><span class="line">System.out.println(m.exists());</span><br><span class="line">System.out.println(k.exists());</span><br><span class="line">System.out.println(k.isFile());</span><br><span class="line">System.out.println(m.isDirectory());</span><br><span class="line">System.out.println(k.length());</span><br><span class="line">System.out.println(k.delete());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void SHANCHU(File k) &#123;</span><br><span class="line">File[] ds =k.listFiles(); </span><br><span class="line">for (int i = 0; i &lt; ds.length ; i++ ) &#123;</span><br><span class="line">File[] h = ds[i].listFiles();</span><br><span class="line">if(h == null) &#123;</span><br><span class="line">System.out.println(&quot;这个是个文件&quot;);</span><br><span class="line">ds[i].delete();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">k.delete();</span><br><span class="line">SHANCHU(ds[i]);</span><br><span class="line">&#125;</span><br><span class="line">k.delete();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="makedir"><a href="#makedir" class="headerlink" title="makedir"></a>makedir</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">public class adsgqjd &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">File file = new File(&quot;D:/a/abc.txt&quot;);</span><br><span class="line">System.out.println(file.exists());</span><br><span class="line">System.out.println(file.mkdir());</span><br><span class="line">File file2 =new File(&quot;D:/a/c/v/bv/nb&quot;);</span><br><span class="line">System.out.println(file2.mkdirs());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们通过mkdirs可以直接深度创建</li><li>但是如果没有父目录，一般的文件就无法创建</li></ul><h2 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private static File getCopy(File f1) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">String sufString = f1.getName().substring(f1.getName().lastIndexOf(&quot;.&quot;));</span><br><span class="line">String qi = f1.getName().substring(0, f1.getName().lastIndexOf(&quot;.&quot;));</span><br><span class="line">String use = qi + &quot;-副本&quot; + sufString;</span><br><span class="line">File newf = new File(f1.getParent() , use);</span><br><span class="line">if(newf.exists()) &#123;</span><br><span class="line">returngetCopy(newf);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return newf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/10/20/10-20/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>签到的制作（后端＋前端）</title>
      <link>http://example.com/2022/10/19/%E5%88%B6%E4%BD%9C%E7%AD%BE%E5%88%B0/</link>
      <guid>http://example.com/2022/10/19/%E5%88%B6%E4%BD%9C%E7%AD%BE%E5%88%B0/</guid>
      <pubDate>Wed, 19 Oct 2022 05:22:28 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;前提准备&quot;&gt;&lt;a href=&quot;#前提准备&quot; class=&quot;headerlink&quot; title=&quot;前提准备&quot;&gt;&lt;/a&gt;前提准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Centos7.8&lt;/li&gt;
&lt;li&gt;在虚拟机安装好redis，并且可以成功ping通&lt;/li&gt;
&lt;li&gt;使用j</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><ul><li>Centos7.8</li><li>在虚拟机安装好redis，并且可以成功ping通</li><li>使用jdk 11</li><li>使用idea 2019.3</li><li>准备好post man</li><li>准备好可以观察redis的软件，比如redisDespoketManger等</li></ul><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><ul><li>先打开虚拟机，并开启redis</li><li>然后打开idea，创建springboot项目，在插件列表选择</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E7%AD%BE%E5%88%B0%E7%9A%84%E5%88%B6%E4%BD%9C/">签到的制作</category>
      
      
      
      <comments>http://example.com/2022/10/19/%E5%88%B6%E4%BD%9C%E7%AD%BE%E5%88%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>设计模式和反射</title>
      <link>http://example.com/2022/10/19/10-19/</link>
      <guid>http://example.com/2022/10/19/10-19/</guid>
      <pubDate>Wed, 19 Oct 2022 00:30:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;一个类只有一个实例&lt;/li&gt;
&lt;li&gt;通过private ， 构造方法&lt;/li&gt;
&lt;li&gt;static方法&lt;/l</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><ul><li>一个类只有一个实例</li><li>通过private ， 构造方法</li><li>static方法</li><li>饿汉式</li></ul><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class testmain1 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">A a1 = A.getInstance();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class A &#123;</span><br><span class="line">private A() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">private static A a1 = new A();</span><br><span class="line">public static A getInstance() &#123;</span><br><span class="line">return a1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ul><li>懒汉式</li></ul><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line">public class testmain1 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">A a1 = A.getInstance();</span><br><span class="line">B a2 = B.getInstance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line">private B() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">private static B ai;</span><br><span class="line">public synchronized static B getInstance() &#123;</span><br><span class="line">if(ai == null) &#123;</span><br><span class="line">ai = new B();</span><br><span class="line">&#125;</span><br><span class="line">return ai;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>开发的时候懒汉式用的比较多，因为可控</li><li>但是一般都在懒汉式哪里添加一个线程锁，为了线程安全，就是synchronized</li></ul><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><ul><li>创建型设计模式</li><li>通过方法创建对象</li></ul><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><ul><li>静态工厂方法模式，例如单例模式，单例模式是特殊的工厂模式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Diver &#123;</span><br><span class="line">public static Car driverCar(String s) &#123;</span><br><span class="line">if(s.equalsIgnoreCase(&quot;宝马&quot;)) &#123;</span><br><span class="line">return new Car(&quot;宝马&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(s.equalsIgnoreCase(&quot;奔驰&quot;)) &#123;</span><br><span class="line">return new Car(&quot;奔驰&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(s.equalsIgnoreCase(&quot;奥迪&quot;)) &#123;</span><br><span class="line">return new Car(&quot;奥迪&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><ul><li>非静态方法，不同的工厂生成不同的产品</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package factory;</span><br><span class="line">public  class bzfactory &#123;</span><br><span class="line"></span><br><span class="line">public  Car product() &#123;</span><br><span class="line">return new Car();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class BenzCar extends bzfactory&#123;</span><br><span class="line">public Car product() &#123;</span><br><span class="line">return new bz();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class bmwfactory extends bzfactory&#123;</span><br><span class="line">public Car product() &#123;</span><br><span class="line">return new bmw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Car&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class bz extends Car&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class bmw extends Car&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class audi extends Car&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样可以不用动代码，可以直接加类，进而直接引</li><li>而第一种要把别的人已经打包好的解包进而对其代码进行操作</li><li>而这种不用，只要新加几个类就可以</li></ul><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ul><li>工厂的工厂模式</li><li>给用户提供一个接口，可以创建多个产品族中的对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">package com.icss.javasechapter.factory;</span><br><span class="line">//抽象工厂模式</span><br><span class="line">interface Car&#123;</span><br><span class="line">public void drive();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface SportsCar extends Car&#123;</span><br><span class="line">public boolean isConvertible();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface BussinessCar extends Car&#123;</span><br><span class="line">public boolean isAutoDoor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 具体产品角色</span><br><span class="line">class BenzSprotsCar implements SportsCar &#123;</span><br><span class="line">public void drive() &#123;</span><br><span class="line">System.out.println(&quot;Driving Benz S&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isConvertible() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class BenzBussinessCar implements BussinessCar &#123;</span><br><span class="line">public void drive() &#123;</span><br><span class="line">System.out.println(&quot;Driving Benz B&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isAutoDoor() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BmwSprotsCar implements SportsCar &#123;</span><br><span class="line">public void drive() &#123;</span><br><span class="line">System.out.println(&quot;Driving Bmw S &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isConvertible() &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class BmwBussinessCar implements BussinessCar &#123;</span><br><span class="line">public void drive() &#123;</span><br><span class="line">System.out.println(&quot;Driving Bmw B &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isAutoDoor() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface CarFactory&#123;</span><br><span class="line">public SportsCar getSportsCar();</span><br><span class="line">public BussinessCar getBussinessCar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BenzCarFactory implements CarFactory&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public SportsCar getSportsCar() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return new BenzSprotsCar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public BussinessCar getBussinessCar() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return new BenzBussinessCar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class BmwCarFactroy implements CarFactory&#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public SportsCar getSportsCar() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return new BmwSprotsCar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public BussinessCar getBussinessCar() &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">return new BmwBussinessCar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 抽象产品角色，具体产品角色与简单工厂模式类似，只是变得复杂了些，这里略。</span><br><span class="line">// 抽象工厂角色</span><br><span class="line">class AbstractCarFactory&#123;</span><br><span class="line"></span><br><span class="line">public static CarFactory getCarFactory(String name)&#123;</span><br><span class="line">if(&quot;Benz&quot;.equals(name))&#123;</span><br><span class="line">return new BenzCarFactory();</span><br><span class="line">&#125;else if(&quot;Bmw&quot;.equals(name))&#123;</span><br><span class="line">return new BmwCarFactroy();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">throw new RuntimeException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class MagnateAbstractFactory &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">try &#123;</span><br><span class="line">CarFactory factory = AbstractCarFactory.getCarFactory(&quot;Bmw&quot;);</span><br><span class="line">BussinessCar car = factory.getBussinessCar();</span><br><span class="line">car.drive();</span><br><span class="line">System.out.println(car.isAutoDoor());</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><ul><li>订阅与发布</li><li>java通过Observable和Observer来实现<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package 作业;</span><br><span class="line"></span><br><span class="line">public class lesson13 &#123;</span><br><span class="line"></span><br><span class="line">public int aaa =0;</span><br><span class="line">public MyObsever[] array = new MyObsever[10];</span><br><span class="line">int index = -1;</span><br><span class="line">public void addObsever(MyObsever obs) &#123;</span><br><span class="line">array[++index &gt; 9 ? index = 0 : index] =obs;</span><br><span class="line">&#125;</span><br><span class="line">public void setAaa(int newvalue) &#123;</span><br><span class="line">this.aaa = newvalue;</span><br><span class="line">for(int i =0; i &lt; array.length ; i++) &#123;</span><br><span class="line">if(array[i] == null)break;</span><br><span class="line">array[i].update(this.aaa , newvalue);</span><br><span class="line">&#125;</span><br><span class="line">this.aaa = newvalue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">MyObsever ob = new MyObsever();</span><br><span class="line">lesson13 data = new lesson13();</span><br><span class="line">data.addObsever(ob);</span><br><span class="line">data.setAaa(10000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MyObsever &#123;</span><br><span class="line">String name;</span><br><span class="line">public void update(int aaa , int newvalue) &#123;</span><br><span class="line">System.out.println(&quot;观察者&quot; + this.name + &quot;,&quot; + aaa + &quot;变成&quot; + newvalue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>简单来说就是群发消息，或者说是改变github上的代码的那种改变</li></ul><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><ul><li>代理模式给一个对象提供代理对象，比如代打，比如代刷xxx等<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package 作业;</span><br><span class="line">public class TestMain4 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">Target t = new Target();</span><br><span class="line">Proxy proxy = new Proxy();</span><br><span class="line">proxy.target = t;</span><br><span class="line">proxy.price();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Target &#123;</span><br><span class="line">public void price() &#123;</span><br><span class="line">System.out.println(&quot;---100--&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Proxy &#123;</span><br><span class="line">Target target;</span><br><span class="line">public void price() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">System.out.println(&quot;100&quot;);</span><br><span class="line">target.price();</span><br><span class="line">System.out.println(&quot;50&quot;);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO: handle exception</span><br><span class="line">System.out.println(&quot;10&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>就相当于中间商赚差价，商家会把货发送到代理这里，代理再提高价格发送出去，上面的这个叫静态代理</li></ul><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><ul><li>动态代理要用接口来实现<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package lesson13;</span><br><span class="line">import java.lang.reflect.InvocationHandler;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import java.lang.reflect.Proxy;</span><br><span class="line">import java.nio.channels.NonWritableChannelException;</span><br><span class="line">public class TestMain4 &#123;</span><br><span class="line">public static void main(String[] args) // 主方法调用代理的 </span><br><span class="line">&#123;</span><br><span class="line">DynamicTargetInf inf = DynamicProxFactory.getInstance();</span><br><span class="line">inf.price();</span><br><span class="line">int r = inf.add(1, 2);</span><br><span class="line">System.out.println(r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">interface DynamicTargetInf // 要代理的接口 </span><br><span class="line">&#123;</span><br><span class="line">void price();</span><br><span class="line">int add(int i, int j);</span><br><span class="line">&#125;</span><br><span class="line">class DynamicTarget implements DynamicTargetInf // 要代理的目标类，我们接下来要代理这里的方法</span><br><span class="line">&#123;</span><br><span class="line">public void price() &#123;</span><br><span class="line">System.out.println(&quot;--target-100--&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public int add(int i, int j) &#123;</span><br><span class="line">System.out.println(&quot;--target-i + j--&quot;);</span><br><span class="line">return i + j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// invocationHandle   invoke执行 handle句柄    welcome,xxx</span><br><span class="line">class DynamicProxFactory implements InvocationHandler // 代理控制器，就是代理对象每次要运行方法都要经过他</span><br><span class="line">&#123;</span><br><span class="line">DynamicTargetInf target = new DynamicTarget();// 一般这个地方是要传值进来的，不过这里为了方便，我们就直接赋值了</span><br><span class="line">// 代理对象每次运行方法的时候会执行</span><br><span class="line">@Override</span><br><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable // invoke方法是InvocationHandler接口的方法，这个方法是执行的意思</span><br><span class="line">&#123;</span><br><span class="line">Object result = null; // 定义一个返回值 ，Object类代表可以转化成任何类型</span><br><span class="line">try &#123;  // try catch包裹，一是为了判断是不是出错，二是为了安全性</span><br><span class="line">System.out.println(&quot;-之前-100---&quot;);</span><br><span class="line">// 反射。当前方法执行。target对象的当前方法， args方法的参数</span><br><span class="line">result = method.invoke(target, args);</span><br><span class="line">//target.price();</span><br><span class="line">System.out.println(&quot;-之后-50---&quot;);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.out.println(&quot;-异常-10---&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">public static DynamicTargetInf getInstance() // 要代理的目标的接口的实例化方法 ， 通过这个方法会把要代理对象的接口和代理工厂连接到一起</span><br><span class="line">&#123;</span><br><span class="line">Object object = java.lang.reflect.Proxy.newProxyInstance(DynamicProxFactory.class.getClassLoader(), new Class[] &#123;DynamicTargetInf.class&#125;, new DynamicProxFactory()); // 这里的三个参数其实是，第一个是类加载器 ， 第二个是目标接口的类数组 ， 第三个是代理工厂的句柄，也就是句柄</span><br><span class="line">return (DynamicTargetInf) object;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>对于静态的代理，每一个方法都要写一个代理，于是就很麻烦，可是对于动态的代理，他会自动的把那个方法里的方法都代理一边，只要在主函数里调用就行，</li><li>其实基本上思想就是，把要代理的目标变成一个接口，然后通过实例化这个接口，再通过接口的特性，让代理去实现目标的方法</li><li>私有的方法无法代理</li></ul><h1 id="反射，类的类型"><a href="#反射，类的类型" class="headerlink" title="反射，类的类型"></a>反射，类的类型</h1><p>类的类型，就是所有类都可以有的东西比如：属性，构造方法，方法。</p><ul><li>可以用这些类的类型去创建一个新类</li><li>而我们如果想获取这个类的类型，就要用到反射，</li><li>他可以获取这个类的类型，就是上面说的属性，构造方法，方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line">import java.lang.reflect.Constructor;</span><br><span class="line">public class wjw1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// 获取反射的三种方式 第一种</span><br><span class="line">Class clzz1 = student.class;</span><br><span class="line">// 第二中 </span><br><span class="line">student student = new student();</span><br><span class="line">Class a = student.getClass();</span><br><span class="line">// 第三种</span><br><span class="line">try &#123;</span><br><span class="line">Class ae = Class.forName(&quot;作业.student&quot;);</span><br><span class="line">&#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Constructor[] cons = clzz1.getConstructors(); // 查看构造器</span><br><span class="line">for (int i = 0; i &lt; cons.length; i++) &#123;</span><br><span class="line">System.out.println(cons[i]);</span><br><span class="line">&#125;</span><br><span class="line">Field[] d = a.getFields(); // 查看变量，非私有的</span><br><span class="line">for (int i = 0; i &lt; d.length; i++) &#123;</span><br><span class="line">System.out.println(d[i]);</span><br><span class="line">&#125;</span><br><span class="line">Field[] f = a.getDeclaredFields(); // 私有变量只能这样查看</span><br><span class="line">for (int i = 0; i &lt; f.length; i++) &#123;</span><br><span class="line">System.out.println(f[i]);</span><br><span class="line">&#125;</span><br><span class="line">Constructor Con; // 获取有特定参数的构造器</span><br><span class="line">try &#123;</span><br><span class="line">Con = clzz1.getConstructor(new Class[] &#123;String.class , int.class&#125;);//里面放那个类型的对应的.class</span><br><span class="line">&#125; catch (NoSuchMethodException | SecurityException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">try &#123; // 通过反射进行实例化，证明了，实例化不一定非要用new</span><br><span class="line">Object object = Con.newInstance(new Object[] &#123;343,&quot;sdajkdha&quot;&#125;);</span><br><span class="line">&#125; catch (InstantiationException | IllegalAccessException | IllegalArgumentException</span><br><span class="line">| InvocationTargetException e) &#123;</span><br><span class="line">// TODO Auto-generated catch block</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面，是我们要运行的方法里如何写</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package 作业;</span><br><span class="line">public class student &#123;</span><br><span class="line">private String name;</span><br><span class="line">private String num;</span><br><span class="line">private String sex;</span><br><span class="line">public int age;</span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line">public void setName(String name) &#123;</span><br><span class="line">this.name = name;</span><br><span class="line">&#125;</span><br><span class="line">public String getNum() &#123;</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br><span class="line">public void setNum(String num) &#123;</span><br><span class="line">this.num = num;</span><br><span class="line">&#125;</span><br><span class="line">public String getSex() &#123;</span><br><span class="line">return sex;</span><br><span class="line">&#125;</span><br><span class="line">public void setSex(String sex) &#123;</span><br><span class="line">this.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">public int getAge() &#123;</span><br><span class="line">return age;</span><br><span class="line">&#125;</span><br><span class="line">public void setAge(int age) &#123;</span><br><span class="line">this.age = age;</span><br><span class="line">&#125;</span><br><span class="line">public student() &#123;</span><br><span class="line">super();</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">public student( int x , String name) &#123;</span><br><span class="line">this.age = x;</span><br><span class="line">this.name = name;</span><br><span class="line">// TODO Auto-generated constructor stub</span><br><span class="line">&#125;</span><br><span class="line">clzz1.getMethods() // 获取里面所有可以访问的方法</span><br><span class="line">clzz1.getMethod(name, parameterTypes) // 获取特定的可以访问的方法</span><br><span class="line">clzz1.getDeclaredMethod(name, parameterTypes); // 查找特定参数的自己定义的方法</span><br><span class="line">clzz1.getDeclaredMethods(); // 查询所有自己定义的方法</span><br><span class="line">Method m = clzz1.getDeclaredMethod(name, parameterTypes);</span><br><span class="line">Object r = m.invoke(obj, args); // 执行前面一个参数里的方法m方法 ， 后面的一个是这个方法的参数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> Field f1 =clzz1.getField(&quot;name&quot;); // 获取单独的与里面字符串匹配的变量 ， 如果是私有的要用declaer方法，比如</span><br><span class="line"> Field f2 = clzz1.getDeclaredField(&quot;name&quot;); // 可以获取私有的变量</span><br><span class="line"> f1.setAccessible(true); // 修改访问权限修饰符，true代表public false代表private</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>下面只是个普通的方法</li><li>这是两个class，要注意，因为都是public，所以必须单独建立两个class，才可以</li></ul><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ul><li><p>用@interface</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package 作业;</span><br><span class="line">@Target (value = &#123;ElementType.CONSTRUCTOR,ElementType.FIELD,ElementType.METHOD,ElementType.TYPE&#125;) // target是代表要修饰的目标种类，比如方法，构造器，属性等</span><br><span class="line">@Retention(value = RetentionPolicy.SOURCE) // 代表这个存活的位置，一般我们用不到，这个是存活于源码里，编译之后就无了</span><br><span class="line">@Retention(value = RetentionPolicy.CLASS) // 这个是存活与class中</span><br><span class="line">@Retention(value = RetentionPolicy.RUNTIME) // 这个是存活在运行时</span><br><span class="line">public @interface lesson14 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上面的@Retention只能用一个，而且只能选择一个</p></li><li><p>而后再有一个类</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package 作业;</span><br><span class="line">@lesson14</span><br><span class="line">public class try1 &#123;</span><br><span class="line">@lesson14</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面是一般用法。</li><li>如果在接口上面增加@Target，就是代表让你可以修饰的东西</li><li>@Retention 代表设置其存活的地方</li></ul><h2 id="value"><a href="#value" class="headerlink" title="value"></a>value</h2><p>可以在接口内写value，如果加上了value则在引用的时候要在括号内写上内容<br>如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public @interface lesson14 &#123;</span><br><span class="line">String value()</span><br><span class="line">default &quot;默认信息&quot;; // 代表默认值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@lesson14(&quot;klsdajhal&quot;)</span><br><span class="line">或者@lesson14(value = &quot;sadajd&quot;)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/10/19/10-19/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>java里的日期和Object的一些方法</title>
      <link>http://example.com/2022/10/18/%E6%97%A5%E6%9C%9F%E5%92%8C%E5%9B%BD%E9%99%85%E5%8C%96/</link>
      <guid>http://example.com/2022/10/18/%E6%97%A5%E6%9C%9F%E5%92%8C%E5%9B%BD%E9%99%85%E5%8C%96/</guid>
      <pubDate>Tue, 18 Oct 2022 09:44:10 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Java-util-Date&quot;&gt;&lt;a href=&quot;#Java-util-Date&quot; class=&quot;headerlink&quot; title=&quot;Java.util.Date&quot;&gt;&lt;/a&gt;Java.util.Date&lt;/h1&gt;&lt;figure class=&quot;highlight </description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Java-util-Date"><a href="#Java-util-Date" class="headerlink" title="Java.util.Date"></a>Java.util.Date</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date d = new Date();</span><br><span class="line">System.out.Println(d);</span><br></pre></td></tr></table></figure><p>一般这样直接打印出，是中国国际化标准化时间<br>但是一般除了getTime别的都过时了，保不准会在什么时候就舍弃</p><h2 id="getmonth"><a href="#getmonth" class="headerlink" title="getmonth"></a>getmonth</h2><p>他是用农历算的，范围是0-11</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.getMonth();</span><br></pre></td></tr></table></figure><h2 id="getYear"><a href="#getYear" class="headerlink" title="getYear"></a>getYear</h2><p>获取从1900年到现在的年数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.getYear();</span><br></pre></td></tr></table></figure><h2 id="getDate"><a href="#getDate" class="headerlink" title="getDate"></a>getDate</h2><p>获取到现在的日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.getDate();</span><br></pre></td></tr></table></figure><h2 id="getHours"><a href="#getHours" class="headerlink" title="getHours"></a>getHours</h2><p>获取现在的小时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.getHours();</span><br></pre></td></tr></table></figure><h2 id="getMinutes"><a href="#getMinutes" class="headerlink" title="getMinutes"></a>getMinutes</h2><p>获取现在的分钟数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.getMinutes();</span><br></pre></td></tr></table></figure><h2 id="getSeconds"><a href="#getSeconds" class="headerlink" title="getSeconds"></a>getSeconds</h2><p>获取当前的秒数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.getSeconds();</span><br></pre></td></tr></table></figure><h2 id="getDays"><a href="#getDays" class="headerlink" title="getDays"></a>getDays</h2><p>获取当前日期范围是0-6，周一到周六</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.getDay();</span><br></pre></td></tr></table></figure><h2 id="getTime"><a href="#getTime" class="headerlink" title="getTime"></a>getTime</h2><p>获取从1970年到现在时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.getTime();</span><br></pre></td></tr></table></figure><h2 id="compareTo"><a href="#compareTo" class="headerlink" title="compareTo"></a>compareTo</h2><p>自动排序：正数是大于 ， 0是相等 ， -1 是小于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d.compareTo(d);</span><br></pre></td></tr></table></figure><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Deprecated</span><br><span class="line"> 代表过时的，会让方法上面画上横线</span><br></pre></td></tr></table></figure><h1 id="java-sql-Date"><a href="#java-sql-Date" class="headerlink" title="java.sql.Date"></a>java.sql.Date</h1><h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.sql.Date d = new java.sql.Date(date.getTime);</span><br><span class="line">// 获取时间,包含天月的</span><br></pre></td></tr></table></figure><h2 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.sql.Time d  = new java.sql.Time(date.getTime);</span><br><span class="line">// 获取时间</span><br></pre></td></tr></table></figure><h2 id="Timestamp"><a href="#Timestamp" class="headerlink" title="Timestamp"></a>Timestamp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java.sql.Timestamp d = new java.sql.Timestamp(date.getTime);</span><br><span class="line">// 获取精确到毫秒数的时间</span><br></pre></td></tr></table></figure><h1 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat s = new SimpleDateFormat(&quot;yyyy-MM-dd:mm:ss.SSS&quot;);</span><br></pre></td></tr></table></figure><h2 id="format日期变字符串"><a href="#format日期变字符串" class="headerlink" title="format日期变字符串"></a>format日期变字符串</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String string s.format(date);</span><br></pre></td></tr></table></figure><h2 id="字符串变日期"><a href="#字符串变日期" class="headerlink" title="字符串变日期"></a>字符串变日期</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.parse(&quot;2000-11-12 13:14:15.000&quot;);</span><br><span class="line">// 但是这个可能会有错误，所以，我们需要用try catch包住他</span><br></pre></td></tr></table></figure><h1 id="Ccalender"><a href="#Ccalender" class="headerlink" title="Ccalender"></a>Ccalender</h1><p>用静态方法实例化，new 不了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Calendar c = Calendar.getLnstance();</span><br></pre></td></tr></table></figure><h2 id="set设置"><a href="#set设置" class="headerlink" title="set设置"></a>set设置</h2><p>set和get基本相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c1.set(Calendar.MONTH ， xxx)；</span><br><span class="line">c1.set(Calendar.HOURS , xxx);等</span><br><span class="line">// 这里xxx代表一个int型的数字，会自动进位，如果xxx超过11则会自动进位，对其他的小时，秒数也同样是适用</span><br></pre></td></tr></table></figure><h2 id="get获取"><a href="#get获取" class="headerlink" title="get获取"></a>get获取</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c.get(Calendar.MONTH);</span><br><span class="line">c.get(Calendar.DATE);</span><br><span class="line">等,要通过一系列常量来控制他</span><br></pre></td></tr></table></figure><h2 id="add计算"><a href="#add计算" class="headerlink" title="add计算"></a>add计算</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.add(Calendar.MONTH , 1);</span><br><span class="line">// 单纯是加到其中前一个变量上，可以进位。还有其他的方法，比如huors等</span><br></pre></td></tr></table></figure><h2 id="getTime-1"><a href="#getTime-1" class="headerlink" title="getTime"></a>getTime</h2><p>转换成Date型，然后就可以用SimpleDateFormat了</p><h1 id="Localdate"><a href="#Localdate" class="headerlink" title="Localdate"></a>Localdate</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDate l = LocalDate.now(); // 获取当前日期</span><br></pre></td></tr></table></figure><ul><li><p>最大支持999999999-12-31</p></li><li><p>最小支持-999999999-01-01</p></li></ul><h2 id="adjiustInto"><a href="#adjiustInto" class="headerlink" title="adjiustInto"></a>adjiustInto</h2><p>调整指定的时间对象与此对象时间相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.adjustInto(l)</span><br></pre></td></tr></table></figure><h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><p>检查这个日期是不是等于另外一个日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.equals(d)</span><br></pre></td></tr></table></figure><h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><p>使用指定格式格式化日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.format(null);</span><br></pre></td></tr></table></figure><h2 id="get"><a href="#get" class="headerlink" title="get"></a>get</h2><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><h2 id="getDayofMonth"><a href="#getDayofMonth" class="headerlink" title="getDayofMonth"></a>getDayofMonth</h2><p>获取月份字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.getDayofMonth();</span><br></pre></td></tr></table></figure><h2 id="getDayofWeek"><a href="#getDayofWeek" class="headerlink" title="getDayofWeek"></a>getDayofWeek</h2><p>同上只是获取星期几，这个是个枚举</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.getDayOfWeek();</span><br></pre></td></tr></table></figure><h2 id="getDayofYear"><a href="#getDayofYear" class="headerlink" title="getDayofYear"></a>getDayofYear</h2><p>同上只是获取日期字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.getDayofYear();</span><br></pre></td></tr></table></figure><h2 id="getChronology"><a href="#getChronology" class="headerlink" title="getChronology"></a>getChronology</h2><p>获取ios的日历系统的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.getChronology();</span><br></pre></td></tr></table></figure><h2 id="hashcode"><a href="#hashcode" class="headerlink" title="hashcode"></a>hashcode</h2><p>返回这个日期的哈希码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.hashcode();</span><br></pre></td></tr></table></figure><h2 id="isAfter"><a href="#isAfter" class="headerlink" title="isAfter"></a>isAfter</h2><p>检查日期是不是在这个日期之后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.isAfter(l);</span><br></pre></td></tr></table></figure><h2 id="isBefore"><a href="#isBefore" class="headerlink" title="isBefore"></a>isBefore</h2><p>同上</p><h2 id="isEqual"><a href="#isEqual" class="headerlink" title="isEqual"></a>isEqual</h2><p>检查这个日期是不是等于指定日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.isEqual(l);</span><br></pre></td></tr></table></figure><h2 id="isLeapYear"><a href="#isLeapYear" class="headerlink" title="isLeapYear"></a>isLeapYear</h2><p>根据ios日历，检查是不是闰年</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.isLeapYear();</span><br></pre></td></tr></table></figure><h2 id="now"><a href="#now" class="headerlink" title="now"></a>now</h2><p>获取当前的时间<br>初始化方法</p><h2 id="parse"><a href="#parse" class="headerlink" title="parse"></a>parse</h2><p>同上面的parse</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.parse(null);</span><br></pre></td></tr></table></figure><h2 id="plus"><a href="#plus" class="headerlink" title="plus"></a>plus</h2><p>返回此日期的副本，并添加指定的金额。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.plus(null);</span><br></pre></td></tr></table></figure><h2 id="plusDays"><a href="#plusDays" class="headerlink" title="plusDays"></a>plusDays</h2><p>返回指定天数的副本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.plusDays(0);</span><br></pre></td></tr></table></figure><h2 id="plusMonths"><a href="#plusMonths" class="headerlink" title="plusMonths"></a>plusMonths</h2><p>返回这个LocalDate的副本，其指定的时间段以月为单位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.plusMonths(0);</span><br></pre></td></tr></table></figure><h2 id="plusweeks"><a href="#plusweeks" class="headerlink" title="plusweeks"></a>plusweeks</h2><p>返回这个LocalDate的副本并以指定周期添加周数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.plusWeeks(0);</span><br></pre></td></tr></table></figure><h2 id="plusYears"><a href="#plusYears" class="headerlink" title="plusYears"></a>plusYears</h2><p>返回这个LocalDate的副本其中指定的时间段以添加的年数访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.plusYears(0);</span><br></pre></td></tr></table></figure><h2 id="query"><a href="#query" class="headerlink" title="query"></a>query</h2><p>返回指定的查询查询日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.query(null);</span><br></pre></td></tr></table></figure><h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>返回此日期的调整的副本</p><ul><li>其和上面一样有对单独地方调整的函数，比如日期月份等<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l.with(l);</span><br><span class="line">l.withDayOfMonth(0);</span><br><span class="line">l.withDayOfYear(0);</span><br><span class="line">l.withMonth(0);</span><br><span class="line">l.withYear(0);</span><br></pre></td></tr></table></figure></li></ul><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><p>将日期转换为字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">l.toString();</span><br></pre></td></tr></table></figure><h1 id="方法的综合应用"><a href="#方法的综合应用" class="headerlink" title="方法的综合应用"></a>方法的综合应用</h1><h2 id="计算每个月的天数通过Calendar运行"><a href="#计算每个月的天数通过Calendar运行" class="headerlink" title="计算每个月的天数通过Calendar运行"></a>计算每个月的天数通过Calendar运行</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C1.add(Calendar.MONTH, 1);</span><br><span class="line">C1.add(Calendar.DAY_OF_MONTH, -(当前天数));</span><br><span class="line">System.out.println(C1.getTime());</span><br></pre></td></tr></table></figure><h2 id="LocalDateTime的实际应用"><a href="#LocalDateTime的实际应用" class="headerlink" title="LocalDateTime的实际应用"></a>LocalDateTime的实际应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalField;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain4</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//LocalTime</span></span><br><span class="line"><span class="comment">//LocalDate</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldtDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(ldtDateTime);</span><br><span class="line">System.out.println(ldtDateTime.getDayOfWeek().getValue()); <span class="comment">// 2</span></span><br><span class="line">System.out.println(ldtDateTime.getMonth()); <span class="comment">// 10不会走 国外的历法</span></span><br><span class="line">System.out.println(ldtDateTime.getMonthValue()); </span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldtDateTime2</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2022</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>);</span><br><span class="line">System.out.println(ldtDateTime2);</span><br><span class="line"></span><br><span class="line"><span class="type">DateTimeFormatter</span> <span class="variable">dFormatter</span> <span class="operator">=</span> DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> dFormatter.format(ldtDateTime);</span><br><span class="line">System.out.println(string);</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldtDateTime3</span> <span class="operator">=</span> LocalDateTime.parse(<span class="string">&quot;2022-10-18 15:21:30&quot;</span>, dFormatter);</span><br><span class="line">System.out.println(ldtDateTime3);</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">ldtDateTime4</span> <span class="operator">=</span> LocalDateTime.from(dFormatter.parse(<span class="string">&quot;2022-10-18 15:21:30&quot;</span>));</span><br><span class="line">System.out.println(ldtDateTime4);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><h2 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h2><p>获取反射</p><h2 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode"></a>hashCode</h2><p>获取hash值，约等于地址</p><h2 id="equals-1"><a href="#equals-1" class="headerlink" title="equals"></a>equals</h2><ul><li>比较对象的值</li><li>&#x3D;&#x3D;对比的是地址</li></ul><h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>暂时不让用，意义是克隆属性,但是对于引用类型直接克隆是克隆地址，就会造成改一个进而全部都改变，但是有办法，可以进行深克隆进而解决</p><ul><li>浅克隆：就是只用一次克隆</li><li>深克隆：通过多次克隆进而使每个被克隆出来的个体都有不同地址的相同引用类型</li></ul><h3 id="使用克隆的方法"><a href="#使用克隆的方法" class="headerlink" title="使用克隆的方法"></a>使用克隆的方法</h3><ul><li><p>Cloneable:  标记型接口，先实现标记性接口 。 JDK就2个标记接口Serializable和Cloneable</p><ul><li><ol><li>覆盖Object的clone方法;</li><li>实现标记Cloneable;</li></ol></li></ul></li></ul><h2 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a>finalize</h2><p>finalize代表GC回调，就是让垃圾回收不要回收他，但是一般不让用，因为会容易造成卡死，或者因为有关联关系的对象而无法进行进行回收</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line">  package lesson12;</span><br><span class="line">  </span><br><span class="line">  public class TestMain6 &#123;</span><br><span class="line">  </span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">  Student student = new Student(&quot;jerry&quot;, 2);</span><br><span class="line">  abc();</span><br><span class="line">  student = null;</span><br><span class="line">  System.out.println(111);</span><br><span class="line">  </span><br><span class="line">  // 通知jvm在适当时候进行GC</span><br><span class="line">  System.gc();</span><br><span class="line">  System.out.println(222);</span><br><span class="line">  for (;;) &#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  private static void abc() &#123;</span><br><span class="line">  // TODO Auto-generated method stub</span><br><span class="line">  Student student = new Student(&quot;tom&quot;, 1);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  Student &#123;</span><br><span class="line">  @Override</span><br><span class="line">  protected void finalize() throws Throwable &#123;</span><br><span class="line">  System.out.println(this + &quot;被回收了&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="static-代码块和非static代码块"><a href="#static-代码块和非static代码块" class="headerlink" title="static 代码块和非static代码块"></a>static 代码块和非static代码块</h1><ul><li><p>static 静态代码块。  运行时记载类，只调用一次。</p><ul><li>一次性的操作。例如： 加载资源，加载驱动。</li></ul></li><li><p>非静态代码块，       每次实例化都会调用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lesson12;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain7</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是静态代码块&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;这是非静态代码块&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">TestMain7</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestMain7</span>();</span><br><span class="line"><span class="type">TestMain7</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestMain7</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/10/18/%E6%97%A5%E6%9C%9F%E5%92%8C%E5%9B%BD%E9%99%85%E5%8C%96/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数字及big类</title>
      <link>http://example.com/2022/10/17/%E6%95%B0%E5%AD%97%E7%B1%BB%E4%BB%A5%E5%8F%8Abig%E7%B1%BB/</link>
      <guid>http://example.com/2022/10/17/%E6%95%B0%E5%AD%97%E7%B1%BB%E4%BB%A5%E5%8F%8Abig%E7%B1%BB/</guid>
      <pubDate>Mon, 17 Oct 2022 09:44:10 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;关于数学包里常用的几个类&quot;&gt;&lt;a href=&quot;#关于数学包里常用的几个类&quot; class=&quot;headerlink&quot; title=&quot;关于数学包里常用的几个类&quot;&gt;&lt;/a&gt;关于数学包里常用的几个类&lt;/h1&gt;&lt;h2 id=&quot;abs&quot;&gt;&lt;a href=&quot;#abs&quot; class</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="关于数学包里常用的几个类"><a href="#关于数学包里常用的几个类" class="headerlink" title="关于数学包里常用的几个类"></a>关于数学包里常用的几个类</h1><h2 id="abs"><a href="#abs" class="headerlink" title="abs"></a>abs</h2><p>abs是取绝对值</p><h2 id="cell"><a href="#cell" class="headerlink" title="cell"></a>cell</h2><p>向上（正方向）取整</p><h2 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h2><p>向下（负方向）取整</p><h2 id="round"><a href="#round" class="headerlink" title="round"></a>round</h2><p> 四舍五入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> // 简单的例子 ，5舍6入</span><br><span class="line">可以通过floor进行</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="BigInteger"><a href="#BigInteger" class="headerlink" title="BigInteger"></a>BigInteger</h1><p>BigInteger类型的数字范围较Integer，Long类型的数字范围要大得多，它支持任意精度的整数，也就是说在运算中 BigInteger 类型可以准确地表示任何大小的整数值而不会丢失任何信息。</p><h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//1.加</span><br><span class="line">BigInteger bigNum1 = a.add(b);//17</span><br><span class="line">//2.减</span><br><span class="line">BigInteger bigNum2 = a.subtract(b);//9</span><br><span class="line">//3.乘</span><br><span class="line">BigInteger bigNum3 = a.multiply(b);//52</span><br><span class="line">//4.除</span><br><span class="line">BigInteger bigNum4 = a.divide(b);//3</span><br><span class="line">//5.取模(需 b &gt; 0，否则出现异常：ArithmeticException(&quot;BigInteger: modulus not positive&quot;))</span><br><span class="line">BigInteger bigNum5 = a.mod(b);//1</span><br><span class="line">//6.求余</span><br><span class="line">BigInteger bigNum6 = a.remainder(b);//1</span><br><span class="line">//7.平方(需 n &gt;= 0，否则出现异常：ArithmeticException(&quot;Negative exponent&quot;))</span><br><span class="line">BigInteger bigNum7 = a.pow(n);//2197</span><br><span class="line">//8.取绝对值</span><br><span class="line">BigInteger bigNum8 = a.abs();//13</span><br><span class="line">//9.取相反数</span><br><span class="line">BigInteger bigNum9 = a.negate();//-13</span><br></pre></td></tr></table></figure><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//读入方法：nextBigInteger()</span><br><span class="line">@Test</span><br><span class="line">public void test5() &#123;</span><br><span class="line">Scanner scan = new Scanner(System.in);// 读入</span><br><span class="line">int n = scan.nextInt(); // 读入一个int;</span><br><span class="line">BigInteger m = scan.nextBigInteger();// 读入一个BigInteger;</span><br><span class="line">while(scan.hasNext())&#123;</span><br><span class="line">System.out.print(&quot;scan.hasNext()=&quot; + scan.hasNext());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中除了这个还有big浮点型，用法和上面一样</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/10/17/%E6%95%B0%E5%AD%97%E7%B1%BB%E4%BB%A5%E5%8F%8Abig%E7%B1%BB/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>java中异常的相关知识</title>
      <link>http://example.com/2022/10/15/%E5%BC%82%E5%B8%B8/</link>
      <guid>http://example.com/2022/10/15/%E5%BC%82%E5%B8%B8/</guid>
      <pubDate>Sat, 15 Oct 2022 09:44:10 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h2&gt;&lt;h3 id=&quot;因为一些原因导致开发的程序出现问题&quot;&gt;&lt;a href=&quot;#因为一些原因导致开发的程序出现问题&quot; class=&quot;headerlink</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="因为一些原因导致开发的程序出现问题"><a href="#因为一些原因导致开发的程序出现问题" class="headerlink" title="因为一些原因导致开发的程序出现问题"></a>因为一些原因导致开发的程序出现问题</h3><p>Throwable是error和Exception的父类，是Java里所有异常的父类<br>##error<br>如果出现了error，则代表计算机出现了重大的错误，比如jvm无法解决的问题等。</p><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p>如果出现了Exception，则代表计算机代码出现了问题，编译或者运行的时候出现了问题。但是Exception还分为运行时异常和编译时异常</p><h3 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h3><p>运行时异常比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayIndexOutOfBoundsException//这就是个数组越界的异常</span><br></pre></td></tr></table></figure><p>这些都是运行的时候产生的异常，编译可以通过的，其中最常见的就是数组越界，下表越剧等</p><h3 id="编译时异常"><a href="#编译时异常" class="headerlink" title="编译时异常"></a>编译时异常</h3><p>编译时异常比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The final local variable m cannot be assigned. It must be blank and not using a compound assignment //这个就是个简单的final修饰的变量不可被改变的异常</span><br></pre></td></tr></table></figure><p>这些是在程序未被运行之前就报出的错误。会被编译器会进行优先的处理。<br>最常见的就是作用域的问题，比如static变量和非static的变量等。</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><p>我们可以通过try catch的方法进行捕获异常，让异常出现的时候不至于停止程序的运行<br>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">try &#123;//放会报错的语句，这个是个简单数组越界</span><br><span class="line">a[m] = 1;</span><br><span class="line">System.out.println(&quot;输入正确&quot;);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO: handle exception</span><br><span class="line">// 在错误发生时怎么处理</span><br><span class="line">System.out.println(&quot;成功抛出异常&quot;);</span><br><span class="line">&#125; </span><br><span class="line">catch(xxxxx) &#123;</span><br><span class="line">&#125;// 这里的catch还可以继续往下写，但是要注意其中异常的类型必须是越在后面类型越大的，因为Exception还分多个子类异常，这样可以更精确的分辨是什么异常，不过直接写Exception也不算错</span><br><span class="line">finally &#123;</span><br><span class="line">// finally里放一定会执行的代码，不过不写finally也不算错</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是要注意，我们不可以捕获error异常，因为error异常已经超出了代码捕获的范围，我们一般都要进行硬件及软件的处理</p><h3 id="throws"><a href="#throws" class="headerlink" title="throws"></a>throws</h3><p>我们可以通过throws把异常向上抛出，让他们的上层去处理，可是一般上层如果不能处理，还会继续向上抛出，这种方法我简称为逃避，我们，一般使用try catch语句较多，一般是抛到main方法里进行try catch处理，<br>如果异常一直不处理，那编译器最后会报错</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/javase/">javase</category>
      
      
      
      <comments>http://example.com/2022/10/15/%E5%BC%82%E5%B8%B8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>java面试题</title>
      <link>http://example.com/2022/10/15/java%E4%B8%AD%E7%9A%84%E6%98%93%E9%94%99%E7%82%B9/</link>
      <guid>http://example.com/2022/10/15/java%E4%B8%AD%E7%9A%84%E6%98%93%E9%94%99%E7%82%B9/</guid>
      <pubDate>Sat, 15 Oct 2022 09:44:10 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;重载和重写&quot;&gt;&lt;a href=&quot;#重载和重写&quot; class=&quot;headerlink&quot; title=&quot;重载和重写&quot;&gt;&lt;/a&gt;重载和重写&lt;/h1&gt;&lt;h2 id=&quot;重载&quot;&gt;&lt;a href=&quot;#重载&quot; class=&quot;headerlink&quot; title=&quot;重载&quot;&gt;&lt;/a&gt;重</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h1><h2 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h2><p>重载发生在同一个类里，方法名必须相同，参数类型不同，个数不同，顺序不同，方法的返回值和访问修饰符可以不同，发生在编译时</p><h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2><p>发生在父类和子类中，方法名，参数列表相同，返回值范围小于等于父类，<br>抛出异常小于等于父类，访问修饰符大于等于父类，若父类的方法是private则不能重写</p><h1 id="List和Set的区别"><a href="#List和Set的区别" class="headerlink" title="List和Set的区别"></a>List和Set的区别</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>list是有序的，按照插入对象的顺序进行访问的，可重复，，可以有多个null元素，可以用iterator取出所有元素，在逐一遍历还可以用get（index）获取指定元素</p><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>set是无序的，不可重复，，最多有一个null对象取元素的时候只能用iterator接口取出所有元素，再逐一遍历</p><h1 id="谈谈Concurrent-Hash-Map的扩容机制"><a href="#谈谈Concurrent-Hash-Map的扩容机制" class="headerlink" title="谈谈Concurrent Hash Map的扩容机制"></a>谈谈Concurrent Hash Map的扩容机制</h1><h2 id="1-7jdk"><a href="#1-7jdk" class="headerlink" title="1.7jdk"></a>1.7jdk</h2><ul><li><p>1.ConcurrentHashMap是基于Segment来实现的</p></li><li><p>2.每个Segment相当于是一个小型的HashMap</p></li><li><p>3.每个Segment内部都会进行扩容，和HashMap的扩容逻辑相同</p></li><li><p>4.先生成一个新的数组，然后转移元素到新数组中</p></li><li><p>5.扩容的判断也是每个Segment单独进行判断的</p></li></ul><h2 id="1-8jdk"><a href="#1-8jdk" class="headerlink" title="1.8jdk"></a>1.8jdk</h2><ul><li><p>1.到了1.8 就不基于Segment了</p></li><li><p>2.当某个线程进行put的时，如果发现有扩容的，就会优先跟着一起进行扩容，</p></li><li><p>3.如果发现没有进行扩容的，就会把key-value添加到ConcurrentHashMap中然后判断超过阈值了吗超过了则进行扩容</p></li><li><p>4.ConcurrentHashMap是支持多线程同时扩容的</p></li><li><p>5.扩容之前也先生成一个新数组</p></li><li><p>6.转移元素之前先将元素分组，将每组分给不同的线程来进行元素的转移，每个线程负责一组或者多组的元素转移工作</p></li></ul><h1 id="jdk1-7到1-8HashMap发生了什么变化"><a href="#jdk1-7到1-8HashMap发生了什么变化" class="headerlink" title="jdk1.7到1.8HashMap发生了什么变化"></a>jdk1.7到1.8HashMap发生了什么变化</h1><h2 id="1-7"><a href="#1-7" class="headerlink" title="1.7"></a>1.7</h2><p>其底层是数组加链表<br>使用的是头插法<br>哈希算法比较复杂</p><h2 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h2><p>其底层是数组+链表和红黑树加入红黑树的目的是加快查找效率<br>其用的是尾插法，要先遍历数组的每个元素，判断数组中的元素个数<br>哈希算法进行了优化，节省cpu资源</p><h1 id="接口可以多继承接口"><a href="#接口可以多继承接口" class="headerlink" title="接口可以多继承接口"></a>接口可以多继承接口</h1><h1 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h1><p>浅拷贝是指只会拷贝基础类型的值<br>浅拷贝是指拷贝的地址指向同一目标</p><h1 id="CopyOnwriteArrayList底层"><a href="#CopyOnwriteArrayList底层" class="headerlink" title="CopyOnwriteArrayList底层"></a>CopyOnwriteArrayList底层</h1><ul><li><p>1.首先其内部也是通过数组实现的，在向其中加元素的时候时，会复制一个新数组 ， 并在新数组上进行进行写操作 ， 读操作在原数组上进行</p></li><li><p>2.并且写操作会加锁，防止出现写入数据丢失的问题</p></li><li><p>3.写操作结束之后会把原数组指向新数组</p></li><li><p>4.CopyOnWriteArrayList允许在写数据的同时进行读数据，大大提高了效率因此适合读多写少的场景，但其比较占内存，因此读到的数据并不是最新的，因此适用与实时性不强的地方</p></li></ul><h1 id="什么是字节码-字节码的好处"><a href="#什么是字节码-字节码的好处" class="headerlink" title="什么是字节码 字节码的好处"></a>什么是字节码 字节码的好处</h1><p>编译器Javac会将java源文件编译为.class可以做到一次编译到此处运行，例如，windows上编译好的.class可以在linux上运行。</p><h2 id="采用字节码的好处"><a href="#采用字节码的好处" class="headerlink" title="采用字节码的好处"></a>采用字节码的好处</h2><p>一方面实现了跨平台，另外一方面提高了代码的执行效率，让编译器可以在编译时进行优化</p><h1 id="在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常"><a href="#在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常" class="headerlink" title="在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常"></a>在java的异常处理机制中，什么时候要抛出异常，什么时候捕获异常</h1><p>异常相当于一种提示 ， 若我们抛出异常，就相当于告诉上层方法，我抛出了一个异常，我处理不了这个异常给你来处理，如果上层也处理不了，就继续往上抛，或者捕获</p><h1 id="java中异常体系是怎么样的"><a href="#java中异常体系是怎么样的" class="headerlink" title="java中异常体系是怎么样的"></a>java中异常体系是怎么样的</h1><p>java中所有异常都来自于顶级父类 Throwable<br>Throwable下有两个子类Exceptio 和 erro<br>error属于重大错误：包括但不限于 虚拟机，磁盘，操作系统层面的问题<br>Exception属于普通编译器报错，其还分为运行时异常和编译时异常</p><h1 id="包装类型传参数的时候按照基本类型算，只传值，不传地址"><a href="#包装类型传参数的时候按照基本类型算，只传值，不传地址" class="headerlink" title="包装类型传参数的时候按照基本类型算，只传值，不传地址"></a>包装类型传参数的时候按照基本类型算，只传值，不传地址</h1><h1 id="java中的类加载机制"><a href="#java中的类加载机制" class="headerlink" title="java中的类加载机制"></a>java中的类加载机制</h1><p>jdk中自带了三个类加载器：</p><h2 id="BootStrap-ClassLoader"><a href="#BootStrap-ClassLoader" class="headerlink" title="BootStrap ClassLoader"></a>BootStrap ClassLoader</h2><p>BootStrap是Ext的父类加载器默认负责加载%JAVA_HOME%lib下面的lib和class</p><h2 id="Ext-ClassLoader"><a href="#Ext-ClassLoader" class="headerlink" title="Ext ClassLoader"></a>Ext ClassLoader</h2><p>Ext ClassLoader是AppClassLoader的父类，默认加载%JAVA_HOME%&#x2F;lib&#x2F;ext文件夹下的jar包和class</p><h2 id="AppClassLoader"><a href="#AppClassLoader" class="headerlink" title="AppClassLoader"></a>AppClassLoader</h2><p>AppClassLoader是自定义器的加载器的父类，负责加载classpath下的</p><h1 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h1><p>简单来说就是当问题从最下面的类加载器进入的时候会先让最上面的类加载器加载，然后逐级往下，最后才是自己定义的类加载器</p><h1 id="排查JVM问题"><a href="#排查JVM问题" class="headerlink" title="排查JVM问题"></a>排查JVM问题</h1><h2 id="对于还可以正常运行的系统"><a href="#对于还可以正常运行的系统" class="headerlink" title="对于还可以正常运行的系统"></a>对于还可以正常运行的系统</h2><ul><li><p>可以使用jmap来查看各个区域的情况</p></li><li><p>可以通过jstack来查看线程的运行情况，比如xxx线程阻塞；是不是死锁等</p></li><li><p>可以通过jstat命令查看垃圾回收的情况 ， 特别是fullgc若fullgc比较多就要考虑调优了</p></li><li><p>通过各个命令的结果，或者jvisualvm等工具进行分析</p></li><li><p>猜测fullgc多的原因：如果无内存溢出，那么表示fullgc是回收了很多对象，所以这些对象最好能在younggc过程中直接回收，避免进入老年代，对于这些情况就要考虑存活区间是不是比较小，导致年轻代放不下，直接到了老年代，尝试加大年轻代的区间若改完fullgc变小，则猜想正确</p></li></ul><h2 id="对于已发生了OOM的系统"><a href="#对于已发生了OOM的系统" class="headerlink" title="对于已发生了OOM的系统"></a>对于已发生了OOM的系统</h2><ul><li>一般生产中都会设置系统发生了OOM时，生成当时的dump文件（-xx:+HeapDumpOnOutOfMemoryError -xx:HHEapDump Path &#x3D; &#x2F;user&#x2F;local&#x2F;base)</li><li>我们可以用jsvisualvm等工具进行分析dump</li><li>根据dump找到异常实例和线程（占用cpu高），定位到具体代码。</li><li>之后再做细致的分析</li></ul><h1 id="一个对象从加载到jvm到被Gc清楚都经历了什么"><a href="#一个对象从加载到jvm到被Gc清楚都经历了什么" class="headerlink" title="一个对象从加载到jvm到被Gc清楚都经历了什么"></a>一个对象从加载到jvm到被Gc清楚都经历了什么</h1><ul><li>先把字节码文件内容加载到方法区</li><li>然后再根据类信息在堆区域创建对象</li><li>对象首先会分配在堆中年轻代的Eden区经过一次Minorc之后会进入Survivor区，在后续的每次MinorGC中若一直存活，则会在Suvivor区来回拷贝，每拷贝一次每移动一次年龄加1</li><li>当年龄过15，若对象仍存活，会进入老年态</li><li>若经过fullgc，被标记为垃圾对象，那么会被gc线程清楚</li></ul><h1 id="jvm有哪些垃圾回收算法"><a href="#jvm有哪些垃圾回收算法" class="headerlink" title="jvm有哪些垃圾回收算法"></a>jvm有哪些垃圾回收算法</h1><h2 id="标记清除法"><a href="#标记清除法" class="headerlink" title="标记清除法"></a>标记清除法</h2><ul><li>标记阶段：把垃圾内存标记出来</li><li>清除阶段：直接把垃圾内存回收</li><li>问题：会产生大量的内存碎片</li></ul><h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><ul><li>为了解决标记清除的内存碎片的问题</li><li>将内存分为两份，每次只使用其中一半，垃圾回收时将当前这一块的存活对象完全拷贝到另外一半，而后当前这一半可直接清除，这种无内存碎片，但是浪费空间，且放弃和存活对象的个数相关</li></ul><h2 id="标记压缩算法"><a href="#标记压缩算法" class="headerlink" title="标记压缩算法"></a>标记压缩算法</h2><ul><li>为了解决复制算法的缺陷，就提出了标记压缩算法，这种算法在标记阶段跟标记清除算法是一样的，但是在完成之后不是直接清理，而是将存活的对象往一端移动，而后面将边界以外的所有内存清除</li></ul><h1 id="什么是STW"><a href="#什么是STW" class="headerlink" title="什么是STW"></a>什么是STW</h1><p>Stw-stop-the-world,是在垃圾回收算法执行过程中要将JVM内存冻结的一种状态，在STW状态下，java的所有线程都是停止执行的——GC除外，native方法可执行；但是不能与jvm交互GC各种算法的优化的重点便是减少STW,是jvm调优的重点</p><h1 id="jvm参数"><a href="#jvm参数" class="headerlink" title="jvm参数"></a>jvm参数</h1><ul><li>标注指令：开头这个是所有Hotspot都支持的参数，可以用java-help</li><li>非标注指令:-x开头；与特定的hotspot对立的用java-x打印</li><li>不稳定参数：-xx开头，与上面一样</li></ul><h1 id="对守护线程的理解"><a href="#对守护线程的理解" class="headerlink" title="对守护线程的理解"></a>对守护线程的理解</h1><p>线程分为 守护线程和用户线程</p><h2 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h2><p>是jvm的后台线程，比如垃圾回收器，守护线程会在其他线程都停止之后自动关闭，我们可以通过设置thread.setDemon（true）来把一个线程设置成守护线程</p><h2 id="普通线程"><a href="#普通线程" class="headerlink" title="普通线程"></a>普通线程</h2><p>普通用户的线程</p><h1 id="ThreadLocal的底层原理"><a href="#ThreadLocal的底层原理" class="headerlink" title="ThreadLocal的底层原理"></a>ThreadLocal的底层原理</h1><p>其是java中所提供的线程本地存储机制，可利用该机制将数据存储到一个线程内部，该线程可在任意时刻，任意的方法，获取其存储的数据</p><ul><li>其底层是通过ThreadLocalMap来实现的，Map的key为ThreadLocal对象，Map的value为需要缓存的值</li><li>如果在线程池中使用ThreadLocal会造成内存泄露，因为当ThreadLoccal对象用完之后应该把设置的key value 也就是Entry的对象进行回收，但是线程池的线程不会进行回收，而线程对象是通过强引用指向ThreadLocalMap而ThreadLocalMap也是通过强引用的方法指向Entry的对象，线程也就不会被回收，从而出现内存泄露。</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li>在使用了ThreadLocal对象之后，手动调Thread Local的remove方法，手动清除Entry，其经典应用是用在连接管理上</li></ul><h1 id="并发-并行-穿行的区别"><a href="#并发-并行-穿行的区别" class="headerlink" title="并发,并行,穿行的区别"></a>并发,并行,穿行的区别</h1><ul><li>串行：一个任务执行完才可以执行下一个</li><li>并发：两个任务看起来是一起执行的，在底层，两个任务被拆成了很多份，从而后一个执行，但是在更高处看，两个任务是一起执行的</li><li>并行：两个可以一起执行</li></ul><h1 id="java死锁如何避免"><a href="#java死锁如何避免" class="headerlink" title="java死锁如何避免"></a>java死锁如何避免</h1><ul><li>一个资源每次只被一个线程调用</li><li>一个线程在阻塞资源的时候不释放已经占有的资源</li><li>一个线程已经获得的资源在使用之前不可被强行剥夺</li><li>若干个线程形成头尾相接的循环等待状</li></ul><h1 id="说一下HashMap的put方法"><a href="#说一下HashMap的put方法" class="headerlink" title="说一下HashMap的put方法"></a>说一下HashMap的put方法</h1><h2 id="大体流程"><a href="#大体流程" class="headerlink" title="大体流程"></a>大体流程</h2><ul><li><p>1.根据key通过哈希算法与与运算得出数组的下标</p></li><li><p>2.如果数组下标的元素为空 ， 则将key和value封装为entry对象（1.7中是Entry ， 1.8里是node对象）并放入该位置</p></li></ul><h2 id="如果数组下标不为空，分情况讨论"><a href="#如果数组下标不为空，分情况讨论" class="headerlink" title="如果数组下标不为空，分情况讨论"></a>如果数组下标不为空，分情况讨论</h2><h3 id="1-7jdk-1"><a href="#1-7jdk-1" class="headerlink" title="1.7jdk"></a>1.7jdk</h3><ul><li>要先判断是不是要扩容，如果不扩容就生成Entry对象，并且用头插法添加到当前位置的链表中</li></ul><h3 id="1-8jdk-1"><a href="#1-8jdk-1" class="headerlink" title="1.8jdk"></a>1.8jdk</h3><ul><li>会先判断当前位置上node的类型，看是红黑树node还是链表node</li><li>如果是红黑树node，则会将key和value封装为一个红黑树节点并添加到红黑树中去，这个过程中会判断是不是有当前key，如果存在则更新value</li><li>如果此位置是node对象是链表节点，则将key和value封装为一个链表node并通过尾插法插到链表最后去，因为是尾插法所以要遍历整个链表，在遍历链表的过程中会判断是不是存在当前的key如果存在就更新key，当遍历完链表后，将新node插入到链表中，插入链表1后会看到当前链表的节点个数，如果大于等于8就会把这个链表转化为红黑树</li><li>将key和value封装为node插入到链表或红黑树中再判断是不是需要扩容如果需要就扩容，不需要就结束put方法</li></ul><h1 id="线程池的底层工作原理"><a href="#线程池的底层工作原理" class="headerlink" title="线程池的底层工作原理"></a>线程池的底层工作原理</h1><ul><li>线程池内部是通过队列＋线程实现的，当我们用线程池执行任务的时候</li><li>如果此时线程池中的线程数量小于CorePoolSize，即使线程池中都处于空闲状态，也同样要创建新的线程来处理被添加的任务</li><li>如果此时线程池中的线程数量等于CorePoolSize, 但是缓存队列workQueue未满，且线程池中的数量小于maximumPoolsize</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Java%E4%B8%AD%E7%9A%84%E6%98%93%E9%94%99%E7%82%B9/">Java中的易错点</category>
      
      
      
      <comments>http://example.com/2022/10/15/java%E4%B8%AD%E7%9A%84%E6%98%93%E9%94%99%E7%82%B9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2022/10/15/hello-world/</link>
      <guid>http://example.com/2022/10/15/hello-world/</guid>
      <pubDate>Fri, 14 Oct 2022 16:33:54 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2022/10/15/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
