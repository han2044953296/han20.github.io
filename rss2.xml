<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>枫叶冢</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>只有努力不会辜负你</description>
    <pubDate>Mon, 14 Nov 2022 12:27:19 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>hadoop</title>
      <link>http://example.com/2022/11/11/11-10/</link>
      <guid>http://example.com/2022/11/11/11-10/</guid>
      <pubDate>Fri, 11 Nov 2022 02:07:37 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;hadoop简介&quot;&gt;&lt;a href=&quot;#hadoop简介&quot; class=&quot;headerlink&quot; title=&quot;hadoop简介&quot;&gt;&lt;/a&gt;hadoop简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;以阿帕奇软件 ，hadoop为主的生态圈 &lt;/li&gt;
&lt;li&gt;狭义就是Hadoo</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="hadoop简介"><a href="#hadoop简介" class="headerlink" title="hadoop简介"></a>hadoop简介</h1><ul><li>以阿帕奇软件 ，hadoop为主的生态圈 </li><li>狭义就是Hadoop</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li>hdfs ： 存储海量的数据</li><li>mapreduce ： 计算分析</li><li>yarn ： 资源和作业的调度</li></ul><h3 id="观点"><a href="#观点" class="headerlink" title="观点"></a>观点</h3><ul><li>存储是第一位的</li><li>计算是第二位的</li></ul><h2 id="学习介绍"><a href="#学习介绍" class="headerlink" title="学习介绍"></a>学习介绍</h2><ul><li>官网进行学习</li><li><code>hadoop.apache.org</code></li><li>但是后面的其余框架对应的官网就是 把hadoop 改掉</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">The Apache Hadoop software library is a framework that allows for the distributed processing of large data sets across clusters of computers using simple programming models. It is designed to scale up from single servers to thousands of machines, each offering local computation and storage. Rather than rely on hardware to deliver high-availability, the library itself is designed to detect and handle failures at the application layer, so delivering a highly-available service on top of a cluster of computers, each of which may be prone to failures.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="hadoop模块的简介"><a href="#hadoop模块的简介" class="headerlink" title="hadoop模块的简介"></a>hadoop模块的简介</h3><ul><li>hdfs ：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">A distributed file system that provides high-throughput access to application data.</span><br></pre></td></tr></table></figure><ul><li>mapredurce :</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">A YARN-based system for parallel processing of large data sets</span><br></pre></td></tr></table></figure><ul><li>yarm :</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">A framework for job scheduling and cluster resource management</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="版本以及主流"><a href="#版本以及主流" class="headerlink" title="版本以及主流"></a>版本以及主流</h3><ul><li>版本 ： 1.x ， 2.x ， 3.x</li><li>主流 ： 2.x -》 3.x</li><li>公司所用 ： </li><li>apache 原生</li><li>cdh ： 5.x ， 6.x 从6.3之后开始收费</li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul><li>安装的是什么？</li><li>Hadoop有什么？</li><li>我们只用部署 yarn hdfs 因为mapredurce是java代码人员给我们的 ：都是主从架构的</li><li>hdfs ： </li><li>namenode : 老大 负责指挥数据的存储</li><li>datanode ： 主要负责数据的存储</li><li>seconderynamenode ： 负责辅助namenode的</li><li>yarn :</li><li>resourcemanager : 老大 负责资源分配</li><li>nodemanager ： 小弟负责资源分配给xxx</li></ul><h3 id="部署模式"><a href="#部署模式" class="headerlink" title="部署模式"></a>部署模式</h3><ul><li>单点模式 ：所有都在一台机器上</li><li>完全分布式模式 ：分布在多台机器上</li></ul><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul><li>部署平台 ： windows 和linux</li><li>一般linux用的多 ，而且在linux上最少2000台</li><li>jdk ： 安装java的要求</li><li>3.3-目前 ： java8 - 11</li><li>3.0-3.2 ： java8</li><li>2.7-2.10 ： java8</li><li>但是有些的java8 的版本也不行 ，详细参考官网</li><li>要下载补丁安装就好</li><li>ssh ： 默认centos是安装的，但是ubantu是没安装的</li><li>个人要求 ：创建hadoop用户 ，以后我们都用那个用户开发</li><li>而且创建 几个文件夹进行规范</li><li>app ：app</li><li>data ：数据 </li><li>log ：监控日志</li><li>project ：项目 </li><li>shell ： shell脚本</li><li>software ： 安装包</li><li>以前版本的apche 版本框架 在</li><li><code>archive.apache.org/dist</code></li><li>部署jdk</li><li>hadoop ： 无要求</li></ul><h3 id="配置开始"><a href="#配置开始" class="headerlink" title="配置开始"></a>配置开始</h3><ul><li>把文件解压</li><li>配置环境变量</li><li>个人 ： 修改 .&#x2F;bashrc </li><li>添加 exprot JAVA_HOME&#x3D; xxxx</li><li>export PATH&#x3D;${JAVA_HOME}&#x2F;bin:$PATH</li><li>export HADOOP_HOME&#x3D;mmm</li><li>export PATH&#x3D;${HADOOP_HOME}&#x2F;bin:${HADOOP_HOME}&#x2F;sbin:$PATH</li><li>上面xxxx和mmm</li><li>分别代表我们的java的和hadoop的解压目录</li><li>然后我们导入个人环境变量 ， </li><li>source ~&#x2F;.bashrc</li><li>然后验证安装 java -version 和 hadoop version</li><li>如果成功就代表安装成功了</li><li>接下来我们更改hadoop的配置文件</li><li>进入到hadoop的etc文件夹里</li><li>编辑 core-site.xml</li><li>在两个标签之间输入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">&lt;value&gt;hdfs://你的机器名:9000&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>编辑hdfs-site.xml</li><li>在两个标签之间输入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">&lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure><ul><li>接下来我们进行开放访问 ， 我们先执行</li><li><code>ssh user@hostname [com]</code> 进行登录</li><li>然后通过输入密码登陆一次</li><li>上一条的的命令如果加上com则代表登录并执行这个命令</li><li>然后我们要设置免密登录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod 0600 ~/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>然后继续上述的命令：看看能不能免密登录</li><li>成功之后，我们要更改文件格式 ： 相当于初始化操作</li><li>然后我们启动dhfs</li><li><code>start-dfs.sh</code></li><li>然后我们访问 <code>http://你的虚拟机ip:9870/</code></li><li>成功看见hadoop的web页面就好了</li><li>然后可以更简便的方法</li><li>在c盘找到 windows 然后进去system32</li><li>然后进去driver</li><li>然后进入etc文件</li><li>然后在hosts文件最后的加上我们在linux里的主机和ip映射</li><li>就可以通过 <code>http://你的虚拟机名称:9870/</code>访问我们的hadoop了</li></ul><h3 id="部署yarn"><a href="#部署yarn" class="headerlink" title="部署yarn"></a>部署yarn</h3><ul><li>对于部署单点的yarn</li><li>我们可以通过配置yarn的配置文件</li><li><code>mapred-site.xml</code> 和<code>yarn-site.xml</code></li></ul><h4 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><ul><li>对于这个文件我们这样更改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.application.classpath&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><ul><li>对于这个文件我们进行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">#设置web访问的端口</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;你的主机名称:9999&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">#设置运行在那个虚拟机上</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;你的主机名&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#下面两个要基本配置</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.env-whitelist&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_HOME,PATH,LANG,TZ,HADOOP_MAPRED_HOME&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>配置完成之后我们要进行<code>start-yarn.sh</code></li><li>然后开启这个服务 ： 我们可以通过访问浏览器的 <code>xxx你的ip:9999</code> ,访问这个服务</li><li>这样我们的单点就算配置完成了</li></ul><h2 id="关于分布式的配置"><a href="#关于分布式的配置" class="headerlink" title="关于分布式的配置"></a>关于分布式的配置</h2><ul><li>分布式的配置就是把单点的配置分到多台机器上</li><li>比如 ： 把hdfs的namenode 和 datanode 和secondnamenode分到三台机器上</li><li>把yarn的部署也分到三台机器上</li></ul><h3 id="开始分布式"><a href="#开始分布式" class="headerlink" title="开始分布式"></a>开始分布式</h3><ul><li>首先我们要明确一点 ： namenode是老大 ，只能有一个</li><li>datanode是小弟 ：  可以有多个</li><li>secondnamenode ：是秘书只能有一个</li><li>对于yarn ： resourcemanager只能有一个</li><li>而 ：nodemanagers ：可有多个</li></ul><h4 id="开始之前的配置"><a href="#开始之前的配置" class="headerlink" title="开始之前的配置"></a>开始之前的配置</h4><ul><li>关于hdfs和上面部署的一样</li><li>只不过在配置免密登录的时候不同</li><li>因为我们现在要做三台机器互相免密</li><li>所以我们要用</li><li><code>ssh-keygen -t rsa</code> 然后三次回车生成公钥和私钥</li><li>然后三台机器都要用一遍</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ssh-copy-id 第一台机器名</span><br><span class="line">ssh-copy-id 第二台机器名</span><br><span class="line">ssh-copy-id 第三胎机器名</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>然后分别对三台机器用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ssh hadoop@第一台机器名</span><br><span class="line">ssh hadoop@第二台机器名</span><br><span class="line">ssh hadoop@第三台机器名</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>最后分别ssh一下然后如果能成功就代表成功了</li></ul><h4 id="hdfs"><a href="#hdfs" class="headerlink" title="hdfs"></a>hdfs</h4><ul><li><code>core-site.xml</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">#设置存储位置</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;/home/hadoop/data/hadoopdate&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line">#设置namenode在哪一台机器上运行</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;hdfs://主机器的名称:9000&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-<code>workers</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">第一台机器的名称</span><br><span class="line">第二台机器的名称</span><br><span class="line">第三台机器的名称</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>hdfs-site.xml</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"> #下面的values代表是几台机器，我这个是三台机器</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;3&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  #设置secondarynamenode的端口和在哪一台机器上</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;bigdata4:9868&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">#同上一个</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">        &lt;name&gt;dfs.namenode.secondary.https-address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;bigdata4:9869&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>然后三台机器都要配置相同的环境变量</li></ul><h4 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h4><ul><li><code>mapred-site.xml</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.application.classpath&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>yarn-site.xml</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">#设置resourcemanager其所占用的端口</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;bigdata5:9999&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">#设置resourcemanager其所在的机器</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;bigdata5&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">#下面两个是正常yarn的配置文件</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;yarn.nodemanager.env-whitelist&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_HOME,PATH,LANG,TZ,HADOOP_MAPRED_HOME&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><ul><li>同样三台机器也要配置相同的文件</li><li>然后我们要在我们的namenode机器上</li><li>开始初始化： <code>hdfs namenode -format</code></li><li>然后我们在namenode上开始运行<code>start-dfs.sh</code></li><li>然后我们在resourcemanager上开始运行<code>start-yarn.sh</code></li><li>然后我们可以用jps查看每个机器的进程</li><li>查看是不是符合我们的想法</li></ul><h3 id="关于datanode缺失"><a href="#关于datanode缺失" class="headerlink" title="关于datanode缺失"></a>关于datanode缺失</h3><ul><li>因为默认hadoop有一个id文件是在<code>/tmp/hadoop-hadoop/dfs</code>下的</li><li>我们默认启动的时候可能有多个原因 ，造成生成的id不一致</li><li>比如 ； 我们忘记关闭hadoop服务之类的，或者卸载的时候忘记删掉他了</li><li>这些都会造成id不一致的问题</li><li>解决方法： </li><li>如果dfs文件夹中没有重要的数据，那么删除dfs文件夹，再重新运行下列指令（格式化指令）</li><li>如果dfs文件中有重要的数据，那么在dfs&#x2F;name目录下找到一个current&#x2F;VERSION文件，记录clusterID并复制。然后dfs&#x2F;data目录下找到一个current&#x2F;VERSION文件，将其中clustreID的值替换成刚刚复制的clusterID的值即可</li></ul><h2 id="hdfs的命令"><a href="#hdfs的命令" class="headerlink" title="hdfs的命令"></a>hdfs的命令</h2><ul><li>创建文件夹 <code>hdfs dfs -mkdir xxx</code> : 创建xxx文件夹，可以多层创建文件夹</li><li>创建文件<code>hdfs dfs -touchz path</code></li><li>复制文件<code>hdfs dfs -cp 源目录 目标路径</code> ：这个是把整个文件夹结构都cp过去：属于hdfs的内部操作不是上传下载</li><li>移动文件<code>hdfs dfs -mv 源目录 目标目录</code></li><li>赋予权限<code>hdfs dfs -chmod 权限参数 </code></li><li>上传文件<code>hdfs dfs -put 源文件夹路径 目标文件夹路径</code></li><li>上传文件<code>hdfs dfs -copyFromLocal 源文件夹 目标文件夹</code></li><li>上传文件且删除本地文件<code>hdfs dfs -moveFromLocal 源文件 目标文件</code></li><li>下载文件<code>hdfs dfs -get 源文件夹路径 目标文件夹路径</code></li><li>查看文件内容 <code>hdfs dfs -cat path</code>从头看这个文件</li><li>查看文件内容 <code>hdfs dfs -tail path</code>查看这个文件的最后1k</li><li>删除文件<code>hdfs dfs -rm 文件路径</code></li><li>删除文件夹<code>hdfs dfs -rm -R 文件夹</code></li></ul><h2 id="mapreduce"><a href="#mapreduce" class="headerlink" title="mapreduce"></a>mapreduce</h2><ul><li>简介 ： 其设计理念是计算向数据靠拢，采用分而治之的策略，将庞大的数据分为很多个很多个小切片，并且为每个小切片单独的启动一个map任务</li><li>适合mapredurce处理的数据集要满足一个前提：待处理的数据集可以分解成许多更小的数据集，且每一个更小的数据集都可以并行的处理</li><li>其采用的是主从架构（master&#x2F;Slave），就是一个主服务器多个从服务器（salve），master上运行jobTracker，slaver运行TaskTracker</li></ul><h3 id="mapreduce体系架构"><a href="#mapreduce体系架构" class="headerlink" title="mapreduce体系架构"></a>mapreduce体系架构</h3><ul><li>其主要是由四个部分组成 ： 分别是Client , JobTracker,TaskTracker以及Task</li><li>Client ： 用户编写的Mapredurce程序通过Client提交到jobTracker</li><li>jobTracker(运行在主服务器上) : 负责监控和资源调度</li><li>监控所有的TaskTracker与job的健康情况，一旦发现失败，就把相应的任务转移到其他的节点</li><li>其会跟踪任务的执行调度，资源使用量，并将这些信息告诉任务调度器（TaskScheduler），而调度器会在资源调度器出现空闲时，选择合适的任务去使用这些资源</li><li>jobTracker（运行在服务器） </li><li>TaskTracker会周期性的通过心跳将本节点上资源的使用情况和任务运行进度汇报给jobTracker，同时接受jobTracker发送过来的命令并执行相应的操作（如 ： 启动新任务 ，杀死任务等）</li><li>TaskTracker使用“slot”等量划分本节点上的资源量（CPU ，内存）。一个Task获取到一个slot后才有机会运行，而hadoop调度器的作用就是将各个TaskTracker上的空闲slot分配给Task使用。slot分为Map slot和Reduce slot两种，分别提供Map Task和Redurce Task使用</li><li>Task</li><li>Map Task和Redurce Task 均由TaskTracker</li></ul><h3 id="mapreduce的工作流程"><a href="#mapreduce的工作流程" class="headerlink" title="mapreduce的工作流程"></a>mapreduce的工作流程</h3><ul><li>一个大的mapredurce任务，首先会被分为为若干个Map任务在多台机器上执行运行（map任务通常运行在存储节点上），每一个map任务会输出一个&lt;key , value&gt;形式的中间结果，一个map任务只有全部执行完成之后才会进行reduce任务，map的输出结果&lt;key, value&gt;（存储在本地磁盘） ， 具有相同的key会被发送到同一个reduce任务</li><li>注意 ：不同的map之间不会有通信</li><li>不同的reduce之间也不会</li><li>用户不能显式的从一台机器向另外一台机器发送消息，所有的信息交换都是通过Mapredurce框架自身去实现</li><li>map的输入文件，redurce任务的输出结果都是保存在hdfs分布式文件系统中，map的输出结果保存在本地磁盘文件中</li><li>当一个map任务处理全部结束之后，reduce任务才能开始去取相应的数据</li><li>只有map任务需要考虑数据局限性，实现计算向数据靠拢，reduce无需考虑数据局限性</li></ul><h4 id="各阶段执行内容"><a href="#各阶段执行内容" class="headerlink" title="各阶段执行内容"></a>各阶段执行内容</h4><ul><li>分为 ：5个阶段 预处理，map，shuffle，reduce，输出</li><li>预处理 ： 由inputFormat 进行格式验证以及逻辑上的分区inputSplit ， inputSplit经过redodrdreader</li><li>根据inputSplit的信息来处理inputSplit中的具体记录，转换为键值对 ，输入给map</li><li>map ： 接受来自RR键值对，进行分区，排序，合并，归并，得到&lt;key , value-list&gt;形式的中间结果，输入给reduce，此处包括map端的shuffle和reduce端的shuffle</li><li>reduce ： 接受shuffle输出的&lt;key , value&gt;,执行用户子自定义，输出给outputFromat</li><li>输出 ： outputFromat，模块会验证输出目录是不是已经存在以及输出结果是不是符合配置文件中的配置类型，如果满足，就输出reduce的结果到分布式文件系统</li></ul><h4 id="map的shuffle"><a href="#map的shuffle" class="headerlink" title="map的shuffle"></a>map的shuffle</h4><ul><li>过程有四部</li><li>输入数据并执行map任务</li><li>map任务结果输出，写入缓存</li><li>溢写 ： 如果输出结果超过了一定的比例，每一次溢写会在磁盘上生成一个磁盘文件，写入之前进行会分区，，排序，如果指定了commbiner还可以进行合并，这样经过溢写的磁盘文件就包含了多个分区，且分区内部都是经过排序的</li><li>merge ： 随着map任务的进行，当有多个溢写文件时（就是大于等于2的适合），就会发现merge，生成一个更大的磁盘文件，这个大的溢写文件也是经过排序和分区的，默认情况下每10个溢写会变成一个大文件，通常在merge过程中，如果文件数量大于3则进行combine操作，从而减少磁盘的数据量，如果只有一两个溢写，合并操作得不偿失</li></ul><h4 id="reduce的shuttle"><a href="#reduce的shuttle" class="headerlink" title="reduce的shuttle"></a>reduce的shuttle</h4><ul><li>领取数据 ： 经过map的suffle后，map的输出结果保存在磁盘，此时，需要将磁盘数据取回到reduce机器，此时如果线程被占满，同样会和map端一样开启溢写操作，reduce通过RPC询问JobTracker是不是还拥有未完成的map任务，如果有，将数据提取到reduce机器上，此时实际上是多个reduce机器，同时多线程从map机器领回数据</li><li>merge ： 一个map的shuffle结果因为拥有多个分区，所以会有不同的reduce机器取回自己的数据，而每一个reduce也从不同的map机器取回数据，如果每个reduce机器内存达到阈值，就进行溢写操作，溢写的时候一般有很多键值对可以进行merge，如果定义了combiner还可以进行合并，进行溢写操作的过程中还可以进行combine。并非是一个reduce程序从map机器上取回数据就生成一个溢写文件，而是缓存不够用，则发生溢写，如果缓存够用，则是直接在内存里进行操作</li><li>把数据输出给map任务（对一个reduce而言）：执行用户自定义的逻辑，最终输出</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/11/11/11-10/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>git</title>
      <link>http://example.com/2022/11/08/11-8/</link>
      <guid>http://example.com/2022/11/08/11-8/</guid>
      <pubDate>Tue, 08 Nov 2022 02:13:43 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;/li&gt;
&lt;li&gt;Git是一个开源的分布式版</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>Git是一款免费、开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</li><li>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</li><li>记录文件变化的 ，之后可以指定版本恢复</li></ul><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><ul><li>本地 ： 常用 ：简单 ， 缺点 ： 容易出错 ， 集成效率低下</li><li>集中 ： svn ： 缺点 ： 中央服务器出现故障就全完了</li><li>分布（目前的主流）： 解决单点故障的问题 ： git</li><li>git 可以分支 ，，且支持文件备份 ， 多个工作流</li><li></li></ul><h1 id="Git工作流程"><a href="#Git工作流程" class="headerlink" title="Git工作流程"></a>Git工作流程</h1><ul><li>从远程仓库中克隆 Git 资源作为本地仓库</li><li>从本地仓库中checkout代码然后进行代码修改</li><li>在提交本地仓库前先将代码提交到暂存区</li><li>提交修改，提交到本地仓库；本地仓库中保存修改的各个历史版本</li><li>在需要和团队成员共享代码时，可以将修改代码push到远程仓库</li><li>git 的核心概念 ： 工作区、暂存区、版本库、远程仓库</li><li>Workspace： 工作区，就是你平时存放项目代码的地方</li><li>Index &#x2F; Stage： 暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li><li>Repository： 仓库区（或版本库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li><li>Remote： 远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li></ul><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><ul><li>每次的提交Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里这个分支叫主分支，即master分支。HEAD指针严格来说不是指向提交，而是指向master，master才是指向提交的。</li></ul><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><ul><li>远程仓库分为公有远程仓库和私有远程仓库。</li></ul><h1 id="公有远程仓库"><a href="#公有远程仓库" class="headerlink" title="公有远程仓库"></a>公有远程仓库</h1><ul><li>本质和本地仓库无异，只是这个仓库①不在本地②大家可能都知道③需要将代码共享到远程仓库④可以被其他人克隆同步代码等。</li><li>一般情况下在企业中会有一个搭建在公司的远程仓库，可以让本公司内部的开发人员同步开发。而业界最富盛名的远程仓库则为github；它上面存放了非常多的开源组织、个人、企业等的开放源码库，任何都可以从上面获取源码。</li></ul><h1 id="私有远程仓库"><a href="#私有远程仓库" class="headerlink" title="私有远程仓库"></a>私有远程仓库</h1><ul><li>远程仓库实际上和本地仓库一样，纯粹为了7x24小时开机并交换大家的修改。GitHub就是一个免费托管开源代码的远程仓库。但是对于某些视源代码如生命的商业公司来说，既不想公开源代码，又舍不得给GitHub交保护费，那就只能自己搭建一台Git服务器作为私有仓库使用。</li><li>在本地创建了一个Git仓库，又想让其他人来协作开发，此时就可以把本地仓库同步到远程仓库，同时还增加了本地仓库的一个备份。</li><li>常用的远程仓库就是github：<a href="https://github.com/">https://github.com/</a></li><li>Github支持两种同步方式“https”和“ssh”。如果使用https很简单基本不需要配置就可以使用，但是每次提交代码和下载代码时都需要输入用户名和密码。而且如果是公司配置的私有git服务器一般不提供https方式访问。</li></ul><h1 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h1><ul><li>在工程中，并不是所有文件都需要保存到版本库中的，例如“target”目录及目录下的文件就可以忽略。Git忽略文件详解可参考Git忽略文件.gitignore详解</li></ul><h1 id="常用Git命令"><a href="#常用Git命令" class="headerlink" title="常用Git命令"></a>常用Git命令</h1><ul><li>经常使用 Git ，但是很多命令还是记不住。但要熟练掌握，恐怕要记住40~60个命令，所以整理了一份常用Git命令清单。可以参考常用Git命令</li></ul><h2 id="常用的git"><a href="#常用的git" class="headerlink" title="常用的git"></a>常用的git</h2><h3 id="配置用户名和邮箱"><a href="#配置用户名和邮箱" class="headerlink" title="配置用户名和邮箱"></a>配置用户名和邮箱</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">$ git --version   # 查看git的版本信息</span><br><span class="line">$ git config --global user.name   # 获取当前登录的用户</span><br><span class="line">$ git config --global user.email  # 获取当前登录用户的邮箱</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="登录git"><a href="#登录git" class="headerlink" title="登录git"></a>登录git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 如果刚没有获取到用户配置，则只能拉取代码，不能修改  要是使用git，你要告诉git是谁在使用</span><br><span class="line">$ git config --global user.name &#x27;userName&#x27;    # 设置git账户，userName为你的git账号，</span><br><span class="line">$ git config --global user.email &#x27;email&#x27;</span><br><span class="line"># 获取Git配置信息，执行以下命令：</span><br><span class="line">$ git config –list</span><br></pre></td></tr></table></figure><h3 id="配置https和ssh推送时保存用户名和密码"><a href="#配置https和ssh推送时保存用户名和密码" class="headerlink" title="配置https和ssh推送时保存用户名和密码"></a>配置https和ssh推送时保存用户名和密码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># https提交保存用户名和密码</span><br><span class="line">$ git config --global credential.helper store</span><br><span class="line"># 生成公钥私钥，将公钥配置到GitHub，ssh提交就可以免输入用户名密码</span><br><span class="line"># 三次回车即可生成 ssh key</span><br><span class="line">$ ssh-keygen -t rsa</span><br><span class="line"># 查看已生成的公钥</span><br><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="推送到远程仓库正确流程"><a href="#推送到远程仓库正确流程" class="headerlink" title="推送到远程仓库正确流程"></a>推送到远程仓库正确流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git init # 初始化仓库</span><br><span class="line">git add .(文件name) # 添加文件到暂存区</span><br><span class="line">git commit -m &quot;first commit&quot; # 添加文件到本地仓库并提交描述信息</span><br><span class="line">git remote add origin 远程仓库地址 # 链接远程仓库，创建主分支</span><br><span class="line">git pull origin master --allow-unrelated-histories # 把本地仓库的变化连接到远程仓库主分支</span><br><span class="line">git push -u origin master # 把本地仓库的文件推送到远程仓库</span><br></pre></td></tr></table></figure><h3 id="新建本地仓库"><a href="#新建本地仓库" class="headerlink" title="新建本地仓库"></a>新建本地仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 创建一个文件夹</span><br><span class="line">$ mkdir GitRepositories    # 创建文件夹GitRepositories</span><br><span class="line">$ cd GitRepositories       # 切换到GitRepositories目录下</span><br><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置-全局和项目"><a href="#配置-全局和项目" class="headerlink" title="配置(全局和项目)"></a>配置(全局和项目)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</span><br><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="增加-x2F-删除文件"><a href="#增加-x2F-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1][file2] ...</span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h3 id="分支-1"><a href="#分支-1" class="headerlink" title="分支"></a>分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br><span class="line">#强制删除分支</span><br><span class="line">$ git branch -D [branch-name]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 查看目录</span><br><span class="line">$ ls -al或者$ ll</span><br><span class="line"># 查看仓库状态，显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty=format:%s</span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br><span class="line"># 以图形化界面展示 分支的commit 历史</span><br><span class="line">$ git log --oneline --gragh</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line">$ git fetch 也同上</span><br><span class="line">$ git pull 相当 fetch ＋ merge</span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br><span class="line">$ push推的是分支不是代码</span><br><span class="line"># 可以选择那个远程仓库那个分支</span><br><span class="line">$ git push [&lt;repository&gt; [&lt;分支的名字&gt;]]</span><br><span class="line">$ git fetch</span><br><span class="line">$ git fetch --all</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"># 从工作区撤回文件</span><br><span class="line">$ git restore --staged xxxx xxx xxx... </span><br><span class="line">#从暂存区到工作区撤回</span><br><span class="line">$ git restore xxx xxx xxx..</span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 从当前目录的所有文件中查找文本内容：</span><br><span class="line">$ git grep &quot;Hello&quot;</span><br><span class="line"># 在某一版本中搜索文本：</span><br><span class="line">$ git grep &quot;Hello&quot; v2.5</span><br><span class="line"># 生成一个可供发布的压缩包</span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>当工作区和暂存区都有的时候</li><li>直接更改工作区的文件 通过</li><li>commit -am “xx”</li><li>可以直接把修改了的文件传到本地仓库</li><li>merge : 经过merge的文件 ， 相当于把其他地方的分支给回收回来 ，</li></ul><h3 id="git文件夹的目录介绍"><a href="#git文件夹的目录介绍" class="headerlink" title=".git文件夹的目录介绍"></a>.git文件夹的目录介绍</h3><ul><li>HEAD ： 当前项目正在工作的分支</li><li>config ： 我们当前项目的一些配置信息（我们本地的配置信息）</li><li>可以通过 <code>git config --local user.name &quot;xxx&quot;</code> 来进行设置</li><li>或者直接在这个文件按照格式改也一样</li><li>同样 ， 有set就有get</li><li>refs ： 指向的是那个分支的指向</li><li>commit 的hash值对应的是什么内容的</li><li>object : git真正的存储对象 </li><li><code>git cat-file</code> </li><li><code>-t</code> : 文件类型</li><li><code>-p</code> : 文件内容</li><li><code>tree</code> ： 代表是文件夹</li><li><code>blob</code> ： 代表文件内容</li><li>git 存储文件高效的原因 ： 不同的文件只要有相同的地方就是一个blob</li></ul><h3 id="查看git文件存储的方法"><a href="#查看git文件存储的方法" class="headerlink" title="查看git文件存储的方法"></a>查看git文件存储的方法</h3><ul><li>我们先进入到.git的object文件夹里 ，因为object文件夹是git存储的首要位置</li><li>接下来 ，我们找到refs的文件 ，然后进入到heads里</li><li>找到文件 ，里面有我们的commit的哈希值</li><li>通过哈希值的前两个字母</li><li>我们在object文件夹下 ，找到这两个字符的文件夹</li><li>点进去查看文件名字</li><li>然后我们在命令行</li><li>输入<code>git cat-file -p</code></li><li>和<code>git cat-file -t</code></li><li>就可以查看到文件的类型和文件的内容</li><li>对于文件的内容，我们可以对于上次-p出来的文件再次进行 -p操作 哈希值 ，</li><li>就可以看见了</li><li>修改之前的某个commit的message</li><li>可以用 <code>git rebase</code></li><li>git rebase -i &lt;after - this - commit&gt;: 交互式 : 基于前一个commit 进行修改当前的commit ，这样修改了之后所有的hash值会改变，因为变头了 ，但是如果先进行了 ， <code>git cherry-pick</code>操作,则会把吗，master和以前的分支都改变（hash），但是一般是不带master等其他分支的</li><li>常用的操作</li><li>-p ： </li><li>-r ： 重写一个commit的message</li><li>-e ： </li><li>-s ： 合并多个commit的message</li><li>输入上面的那个命令之后我们要进入到一个界面</li><li>把要修改的前面改成 r</li><li>然后保存退出</li><li>然后就会跳转到另外可以编辑这个要编辑的conmmit的地方</li><li>就改掉message就好</li><li>合并本地message 要在本地合并 ，不能在远程合并</li><li>把多个commit合并成一个commit的操作和上面一样 ，只不过是把r改成s了</li><li>但是这样合并之后，你相当于把这些信息合并到一起 ，就把最上面的那个看成是一个集合</li><li>这样之后一般会放到 .git文件之下的 ， rebase</li></ul><h2 id="忽略文件-1"><a href="#忽略文件-1" class="headerlink" title="忽略文件"></a>忽略文件</h2><ul><li><code>.gitignore</code>文件就是忽略文件</li></ul><h2 id="仓库备份"><a href="#仓库备份" class="headerlink" title="仓库备份"></a>仓库备份</h2><ul><li>git clone ： 就是克隆&#x2F;备份</li><li>克隆一个仓库到一个新的文件夹</li><li>git clone &lt;仓库&gt; &lt;名字&gt;</li><li>这个仓库是本地或者远程仓库</li><li>仓库 ： 可以接url，或者本地的.git文件</li><li>克隆到名字的文件夹里 ，如果么没有则创建</li><li>本地备份本地不常用</li><li>一般都是备份远程仓库</li><li>对于远程仓库的地址 ，则是为我们通过查看远程仓库的地址进行</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/11/08/11-8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>jdbc</title>
      <link>http://example.com/2022/11/07/11-7/</link>
      <guid>http://example.com/2022/11/07/11-7/</guid>
      <pubDate>Mon, 07 Nov 2022 13:58:43 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具。</li><li>注意是工具</li></ul><h2 id="Maven的配置以及idea使用"><a href="#Maven的配置以及idea使用" class="headerlink" title="Maven的配置以及idea使用"></a>Maven的配置以及idea使用</h2><h3 id="下载及解压"><a href="#下载及解压" class="headerlink" title="下载及解压"></a>下载及解压</h3><ul><li>首先在Maven的官网下载Maven</li><li><a href="http://maven.apache.org/download.cgi" title="Maven官网">Maven官网</a></li><li>我们windows一般下载 ： Binary zip archive的</li><li>我这里下载的是 apache-maven-3.8.6-bin.zip</li><li>下载完之后 ， 解压到一个文件目录下 </li><li>我是新建了个文件目录 命名为 maven</li><li>如何解压到文件目录下</li></ul><h3 id="配置相关文件"><a href="#配置相关文件" class="headerlink" title="配置相关文件"></a>配置相关文件</h3><ul><li>解压成功之后 ，我们会获得几个文件夹</li><li>bin</li><li>boot</li><li>conf</li><li>lib</li><li>这个里conf是maven的配置文件</li><li>我们在这个目录下新建maven_repossitory文件夹</li><li>这个文件夹可以作为，我们的本地仓库</li><li>接下来，我们要修改 conf 文件夹下</li><li>settings.xml文件</li><li>我们先找到</li><li><code>&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</code></li><li>这条语句的位置</li><li>把它更改成</li><li><code>&lt;localRepository&gt;你的maven_repossitory路径&lt;/localRepository&gt;</code></li><li>这样我们就自己创建了个</li><li>因为一般maven的默认仓库是</li><li><code>C:\Users\Administrator\.m2\repository</code></li><li>接下来 ， 我们进行设置国内镜像源</li><li>找到 mirrors 标签</li><li>在mirrors里</li><li>加上：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">&lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">&lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">&lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>这个是阿里云的镜像 ， 如果不好使 可以以换成腾讯云 和网易的</li><li>添加方法和上面一样</li><li>接下来我们可以为maven配置全局的jdk，这样我们在创建maven项目时就会自动使用该jdk版本，我配置的是jdk1.8</li><li>找到标签 <profiles></profiles></li><li>然后在标签里加入<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- java版本 --&gt; </span><br><span class="line">&lt;profile&gt;</span><br><span class="line">  &lt;id&gt;jdk-1.8&lt;/id&gt;</span><br><span class="line">  &lt;activation&gt;</span><br><span class="line">&lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">&lt;jdk&gt;1.8&lt;/jdk&gt;</span><br><span class="line">  &lt;/activation&gt;</span><br><span class="line"></span><br><span class="line">  &lt;properties&gt;</span><br><span class="line">&lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;</span><br><span class="line">&lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;</span><br><span class="line">&lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">&lt;/profile&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="更改idea的maven"><a href="#更改idea的maven" class="headerlink" title="更改idea的maven"></a>更改idea的maven</h3><ul><li>file 文件里的 setting</li><li>在上面搜索 maven</li><li>点进去之后</li><li>把Maven home directory</li><li>配置成自己的解压的文件夹</li><li>然后设置user setting file</li><li>把他设置成解压的文件的setting.xml</li><li>然后把 local repository</li><li>设置成之前自己配置的本地仓库</li><li>关于idea的配置就完成了</li></ul><h2 id="简单的链接mysql"><a href="#简单的链接mysql" class="headerlink" title="简单的链接mysql"></a>简单的链接mysql</h2><ul><li>首先创建maven项目</li><li>然后在pom.xml中加上</li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.1.28&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>在<dependencies>标签中加上</li><li>然后import change</li><li>然后在主程序的java项目包里</li><li>写上：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Hello world!</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class App </span><br><span class="line">&#123;</span><br><span class="line">    public static void main( String[] args )</span><br><span class="line">    &#123;</span><br><span class="line">        String url = &quot;jdbc:mysql://192.168.41.131:3306/try&quot;;</span><br><span class="line">        String user = &quot;root&quot;;</span><br><span class="line">        String passwd = &quot;liuzihan010616&quot;;</span><br><span class="line"></span><br><span class="line">        Connection conect = dbutils.getConnection(url , user , passwd);</span><br><span class="line"></span><br><span class="line">        System.out.println(conect);</span><br><span class="line">        dbutils.closeConnection(conect);</span><br><span class="line"></span><br><span class="line">        System.out.println( &quot;Hello World!&quot; );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-然后创建一个dbutils</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">package org.example;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author sxwang</span><br><span class="line"> * 11 07 15:02</span><br><span class="line"> */</span><br><span class="line">public class dbutils &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取mysql 连接</span><br><span class="line">     * @param url</span><br><span class="line">     * @param user</span><br><span class="line">     * @param passwd</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Connection getConnection(String url, String user, String passwd)&#123;</span><br><span class="line"></span><br><span class="line">        Connection connection=null;</span><br><span class="line">        try &#123;</span><br><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">            try &#123;</span><br><span class="line">                connection = DriverManager.getConnection(url, user, passwd);</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return connection;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 关闭连接</span><br><span class="line">     * @param conn</span><br><span class="line">     */</span><br><span class="line">    public static void closeConnection(Connection conn)&#123;</span><br><span class="line"></span><br><span class="line">        if(conn !=null)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; catch (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Mysql对表的操作"><a href="#Mysql对表的操作" class="headerlink" title="Mysql对表的操作"></a>Mysql对表的操作</h2><ul><li>alter table 旧表名 rename to 新表名 ： 更改表名字</li><li>alter table 表名 modify 列名 数据类型 ： 修改数据类型</li><li>alter table 表名 change 旧表名 新列名 数据类型 ： 修改列名</li><li>alter table 表名 drop 列名 ： 删除列</li><li>alter table 表名 add 新列名 数据类型</li><li>alter table 表名 modify 列名1 数据类型 after 列名2；</li><li>alter table 表明 modify 列名1 数据类型 first</li><li>清空表 </li><li>建议</li><li>truncate table xxx<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">insert into xxx</span><br><span class="line">select xxx from xxx</span><br></pre></td></tr></table></figure></li><li>create</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">create table ...like xxxx</span><br><span class="line">create table xxx like mmm</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>基于xxx表创建新表</li><li>但是，是空表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">create table ..[as]select xxxx from kkk</span><br><span class="line">create table emp_dev01 as select ename,job</span><br><span class="line">from emp</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>基于其select的表给生成一个表</li><li>叫ctas</li><li>可以用别名该表头</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/11/07/11-7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>sql练习</title>
      <link>http://example.com/2022/11/05/sql%E7%BB%83%E4%B9%A0/</link>
      <guid>http://example.com/2022/11/05/sql%E7%BB%83%E4%B9%A0/</guid>
      <pubDate>Fri, 04 Nov 2022 17:05:34 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">create database bigdata;</span><br><span class="line">use bigdata;</span><br><span class="line"></span><br><span class="line">--部门表</span><br><span class="line">dept部门表(deptno部门编号/dname部门名称/loc地点)</span><br><span class="line">create table dept (</span><br><span class="line">    deptno numeric(2),</span><br><span class="line">    dname varchar(14),</span><br><span class="line">    loc varchar(13)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into dept values (10, &#x27;ACCOUNTING&#x27;, &#x27;NEW YORK&#x27;);</span><br><span class="line">insert into dept values (20, &#x27;RESEARCH&#x27;, &#x27;DALLAS&#x27;);</span><br><span class="line">insert into dept values (30, &#x27;SALES&#x27;, &#x27;CHICAGO&#x27;);</span><br><span class="line">insert into dept values (40, &#x27;OPERATIONS&#x27;, &#x27;BOSTON&#x27;);</span><br><span class="line"></span><br><span class="line">--工资等级表</span><br><span class="line">salgrade工资等级表(grade 等级/losal此等级的最低/hisal此等级的最高)</span><br><span class="line">create table salgrade (</span><br><span class="line">    grade numeric,</span><br><span class="line">    losal numeric,</span><br><span class="line">    hisal numeric</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into salgrade values (1, 700, 1200);</span><br><span class="line">insert into salgrade values (2, 1201, 1400);</span><br><span class="line">insert into salgrade values (3, 1401, 2000);</span><br><span class="line">insert into salgrade values (4, 2001, 3000);</span><br><span class="line">insert into salgrade values (5, 3001, 9999);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--员工表</span><br><span class="line">emp员工表(empno员工号/ename员工姓名/job工作/mgr上级编号/hiredate受雇日期/sal薪金/comm佣金/deptno部门编号)</span><br><span class="line">工资 ＝ 薪金 ＋ 佣金</span><br><span class="line"></span><br><span class="line">create table emp (</span><br><span class="line">    empno numeric(4) not null,</span><br><span class="line">    ename varchar(10),</span><br><span class="line">    job varchar(9),</span><br><span class="line">    mgr numeric(4),</span><br><span class="line">    hiredate datetime,</span><br><span class="line">    sal numeric(7, 2),</span><br><span class="line">    comm numeric(7, 2),</span><br><span class="line">    deptno numeric(2)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert into emp values (7369, &#x27;SMITH&#x27;, &#x27;CLERK&#x27;, 7902, &#x27;1980-12-17&#x27;, 800, null, 20);</span><br><span class="line">insert into emp values (7499, &#x27;ALLEN&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-02-20&#x27;, 1600, 300, 30);</span><br><span class="line">insert into emp values (7521, &#x27;WARD&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-02-22&#x27;, 1250, 500, 30);</span><br><span class="line">insert into emp values (7566, &#x27;JONES&#x27;, &#x27;MANAGER&#x27;, 7839, &#x27;1981-04-02&#x27;, 2975, null, 20);</span><br><span class="line">insert into emp values (7654, &#x27;MARTIN&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-09-28&#x27;, 1250, 1400, 30);</span><br><span class="line">insert into emp values (7698, &#x27;BLAKE&#x27;, &#x27;MANAGER&#x27;, 7839, &#x27;1981-05-01&#x27;, 2850, null, 30);</span><br><span class="line">insert into emp values (7782, &#x27;CLARK&#x27;, &#x27;MANAGER&#x27;, 7839, &#x27;1981-06-09&#x27;, 2450, null, 10);</span><br><span class="line">insert into emp values (7788, &#x27;SCOTT&#x27;, &#x27;ANALYST&#x27;, 7566, &#x27;1982-12-09&#x27;, 3000, null, 20);</span><br><span class="line">insert into emp values (7839, &#x27;KING&#x27;, &#x27;PRESIDENT&#x27;, null, &#x27;1981-11-17&#x27;, 5000, null, 10);</span><br><span class="line">insert into emp values (7844, &#x27;TURNER&#x27;, &#x27;SALESMAN&#x27;, 7698, &#x27;1981-09-08&#x27;, 1500, 0, 30);</span><br><span class="line">insert into emp values (7876, &#x27;ADAMS&#x27;, &#x27;CLERK&#x27;, 7788, &#x27;1983-01-12&#x27;, 1100, null, 20);</span><br><span class="line">insert into emp values (7900, &#x27;JAMES&#x27;, &#x27;CLERK&#x27;, 7698, &#x27;1981-12-03&#x27;, 950, null, 30);</span><br><span class="line">insert into emp values (7902, &#x27;FORD&#x27;, &#x27;ANALYST&#x27;, 7566, &#x27;1981-12-03&#x27;, 3000, null, 20);</span><br><span class="line">insert into emp values (7934, &#x27;MILLER&#x27;, &#x27;CLERK&#x27;, 7782, &#x27;1982-01-23&#x27;, 1300, null, 10);</span><br><span class="line"></span><br><span class="line">1.查询出部门编号为30的所有员工的编号和姓名</span><br><span class="line"></span><br><span class="line">table： emp</span><br><span class="line">查什么： </span><br><span class="line">1.维度：group by</span><br><span class="line">2.指标: 聚合函数</span><br><span class="line">3.普普通通的字段：编号和姓名</span><br><span class="line">怎么查：</span><br><span class="line">where：</span><br><span class="line">部门编号为30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.找出部门编号为10中所有经理，和部门编号为20中所有销售员的详细资料。</span><br><span class="line">3.查询所有员工详细信息，用工资降序排序，如果工资相同使用入职日期升序排序</span><br><span class="line">4.列出薪金大于1500的各种工作及从事此工作的员工人数。</span><br><span class="line">5.列出在销售部工作的员工的姓名，假定不知道销售部的部门编号。</span><br><span class="line">6.查询姓名以S开头的\以S结尾\包含S字符\第二个字母为L  __</span><br><span class="line">7.查询每种工作的最高工资、最低工资、人数</span><br><span class="line">8.列出薪金 高于 公司平均薪金的所有员工号，员工姓名，所在部门名称，上级领导，工资，工资等级</span><br><span class="line">9.列出薪金  高于  在各自部门工作的员工的平均薪金的员工姓名和薪金、部门名称。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">80% sqlboy sqlgirl</span><br><span class="line">20% 大数据平台</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="结题"><a href="#结题" class="headerlink" title="结题"></a>结题</h1><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><ul><li>查询出部门编号为30的所有员工的编号和姓名</li><li>确定部门编号的条件 where deptno &#x3D; 30</li><li>确定所要的信息 ename ， epmpno</li><li>从员工表里筛选</li><li><code> select empno ,ename from emp where deptno = 30;</code></li><li><code> select empno ,ename from emp where deptno in (30);</code></li></ul><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><ul><li>找出部门编号为10中所有经理，和部门编号为20中所有销售员的详细资料。</li><li>确定条件 ： </li><li>职业为经理的（MANAGER） ，部门编号为 10</li><li>职业为销售员的（SALESMAN） ， 部门编号为 20</li></ul><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><ul><li><code>select * from emp where job = &quot;MANAGER&quot; and deptno = 10;</code></li><li><code>select * from emp where job = &quot;SALESMAN&quot; and  deptno = 20;</code></li></ul><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><ul><li><code>select * from emp where job in (&quot;MANAGER&quot;) and deptno = 10;</code></li><li><code>select * from emp where job in (&quot;SALESMAN&quot;) and  deptno = 20;</code></li></ul><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><ul><li><code>select * from emp where job in (&quot;SALESMAN&quot;) and  deptno = 20;</code></li><li><code>select * from emp where job in (&quot;MANAGER&quot;) and deptno = 10;</code></li></ul><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><ul><li><code>select * from emp where (job, deptno) in ((&quot;SALESMAN&quot;, 20));</code></li><li><code>select * from emp where (job, deptno) in ((&quot;MANAGER&quot;, 10));</code></li></ul><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><ul><li><code>select * from emp where (job, deptno) in ((&quot;SALESMAN&quot;, 20)  , (&quot;MANAGER&quot;, 10));</code></li></ul><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><ul><li>查询所有员工详细信息，用工资降序排序，如果工资相同使用入职日期升序排序</li><li>条件 ：工资和入职时间</li><li>工资 ＝ 薪金 ＋ 佣金</li><li>但是mysql里一个值和null相加会变成null</li><li>通过 ifnull  或者 coalesce  进行转化</li><li>所以要转化 </li><li>这个题有两种解法</li></ul><h3 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h3><ul><li>先转化</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line">(sal + yy) as hh ,</span><br><span class="line">(sal + kk) as ii,</span><br><span class="line">hiredate</span><br><span class="line">from (</span><br><span class="line">    select</span><br><span class="line">    hiredate,</span><br><span class="line">    sal,</span><br><span class="line">    ifnull(comm , 0) as yy,</span><br><span class="line">    coalesce(comm , 0) as kk</span><br><span class="line">    from emp</span><br><span class="line">) as hyy</span><br><span class="line">order by hh desc,hiredate asc;</span><br></pre></td></tr></table></figure><h3 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h3><ul><li>转化和展示一起做</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line">hiredate,</span><br><span class="line">ifnull((sal + comm) , sal) as total,</span><br><span class="line">coalesce((sal + comm) , sal) as ti</span><br><span class="line">from emp</span><br><span class="line">order by total desc , hiredate asc;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h2><ul><li>列出薪金大于1500的各种工作及从事此工作的员工人数</li><li>条件 ： 薪金 就是<code>sal &gt; 1500</code> 的<code>工作</code> 求<code>人数</code></li><li>薪金的条件可以用<code>where</code> 或者<code>having</code></li><li>工作可以用<code>group by job</code></li><li>人数可以用count</li></ul><h3 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h3><ul><li><code>select job, count(*) from emp where sal &gt; 1500 group by job;</code></li></ul><h2 id="第五题"><a href="#第五题" class="headerlink" title="第五题"></a>第五题</h2><ul><li>列出在销售部工作的员工的姓名，假定不知道销售部的部门编号</li><li>条件 ：  不知道部门编号 但是我们可以从表中获取</li></ul><h3 id="1-3"><a href="#1-3" class="headerlink" title="1"></a>1</h3><ul><li><code>select ename from emp left join dept on dept.deptno = emp.deptno where dname = &quot;SALES&quot; ;</code></li></ul><h3 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select ename from emp where (</span><br><span class="line">    select </span><br><span class="line">    deptno</span><br><span class="line">    from dept</span><br><span class="line">    where dname = &quot;SALES&quot; </span><br><span class="line">) = emp.deptno ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-1"><a href="#3-1" class="headerlink" title="3"></a>3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select ename from emp where deptno in (</span><br><span class="line">    select </span><br><span class="line">    deptno</span><br><span class="line">    from dept</span><br><span class="line">    where dname = &quot;SALES&quot; </span><br><span class="line">) ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第六题"><a href="#第六题" class="headerlink" title="第六题"></a>第六题</h2><ul><li>查询姓名以S开头的\以S结尾\包含S字符\第二个字母为L</li><li>两种方式 like 或者正则</li></ul><h3 id="1-4"><a href="#1-4" class="headerlink" title="1"></a>1</h3><ul><li><code>select ename from emp where ename like &quot;%s%&quot; or  ename like &quot;_L&quot;; </code></li></ul><h3 id="2-3"><a href="#2-3" class="headerlink" title="2"></a>2</h3><ul><li><code>select ename from emp where ename REGEXP &#39;*s*&#39;or ename REGEXP &#39;^.L&#39;;</code></li></ul><h2 id="第七题"><a href="#第七题" class="headerlink" title="第七题"></a>第七题</h2><ul><li>查询每种工作的最高工资、最低工资、人数</li><li>条件 ： <code>工资</code> ， <code>最高工资</code> ， <code>最低工资</code> ， <code>人数</code></li><li>这个题目前我所想到的有两种</li><li>第一是慢慢做 ，用嵌套的方式 ，</li><li>优点 ： 不用动脑</li><li>缺点 ： 代码量比较多</li><li>第二个是第一个的优化版本 </li><li>优点 ： 代码量少很多</li><li>缺点 : 难理解</li><li></li></ul><h3 id="1-5"><a href="#1-5" class="headerlink" title="1"></a>1</h3><ul><li>我们先获取基本的数据源  </li><li>获取工资的情况 ，以及各种职业所对应的工资 及其人数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">select </span><br><span class="line">(ifnull((sal + comm) , sal)) as sal1,</span><br><span class="line">job,</span><br><span class="line">count(*) as total_people</span><br><span class="line">from emp group by job,sal1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>接下来是获取最高工资 和最低工资 ，以及工作的种类 ,以及总人数（最高工资，以及最低工资的）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select max(sal1),min(sal1),job,count(*)</span><br><span class="line">from(select </span><br><span class="line">(ifnull((sal + comm) , sal)) as sal1,</span><br><span class="line">job,</span><br><span class="line">count(*) as total_people</span><br><span class="line">from emp group by job,sal1) as king group by job;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>接下来 我们只需要连接上述的两个表 </li><li>一个表里对应的是每个人所对应的工资以及职业</li><li>因为一个表里是我们的最高的工资，最低的工资以及他所对应的工作 和总人数</li><li>相当于第二个表当我们的筛选条件 ， 如果符合筛选条件 就从第一个表选出这条数据</li><li>然后获得符合条件的人数</li><li>根据以上分析 ， 我们采用左连接的方式 ，</li><li>内连接可能会丢值 ，不过在此题中不会丢值</li><li>如下 ：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">select </span><br><span class="line">sal1,</span><br><span class="line">max_sal,</span><br><span class="line">min_sal,</span><br><span class="line">tjob,</span><br><span class="line">total_people</span><br><span class="line">from(</span><br><span class="line">select max(sal1) as max_sal,min(sal1) as min_sal,job as tjob,count(*)</span><br><span class="line">from(select </span><br><span class="line">(ifnull((sal + comm) , sal)) as sal1,</span><br><span class="line">job,</span><br><span class="line">count(*) as total_people</span><br><span class="line">from emp group by job,sal1) as king group by job) as KING  </span><br><span class="line">left join </span><br><span class="line">(</span><br><span class="line">select </span><br><span class="line">(ifnull((sal + comm) , sal)) as sal1,</span><br><span class="line">job,</span><br><span class="line">count(*) as total_people</span><br><span class="line">from emp group by job,sal1) as yu  </span><br><span class="line">on KING.tjob = yu.job and yu.sal1 = KING.max_sal or yu.sal1 = KING.min_sal; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4"><a href="#2-4" class="headerlink" title="2"></a>2</h3><ul><li>第二种方法 ， 我们所采用的是union</li><li>而不是连接</li><li>我们先获取 每种工作的 最高工资 和最低工资 以及工作种类 ，以及总共人数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line">               max(ifnull((sal + comm) , sal)) as sal_max,</span><br><span class="line">               min(ifnull((sal + comm) , sal)) as sal_min,</span><br><span class="line">               job,</span><br><span class="line">               count(*) as total_people</span><br><span class="line">               from emp group by job;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>然后我们现在要做的就是统计人数了</li><li>我们要先判断他的最大工资和11最小工资是不是相等</li><li>因为相等的话，他会默认把一个人分最大，一个人分最小</li><li>所以要分开</li><li>下面就是如果最大工资和最小工资相等的时候的做法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line">total_people as max_people ,(sal_max - sal_max) as min_people,job,sal_max,sal_min</span><br><span class="line">from(select </span><br><span class="line">max(ifnull((sal + comm) , sal)) as sal_max,</span><br><span class="line">min(ifnull((sal + comm) , sal)) as sal_min,</span><br><span class="line">job,</span><br><span class="line">count(*) as total_people</span><br><span class="line">from emp group by job)  as king  group  by job having sal_max = sal_min;</span><br></pre></td></tr></table></figure><ul><li>下面是不相等的时候</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line">count(sal_max) as max_people,count(sal_min) as min_people,job,sal_max,sal_min</span><br><span class="line">from(select </span><br><span class="line">max(ifnull((sal + comm) , sal)) as sal_max,</span><br><span class="line">min(ifnull((sal + comm) , sal)) as sal_min,</span><br><span class="line">job,</span><br><span class="line">count(*) as total_people</span><br><span class="line">from emp group by job)  as king  group  by job having sal_max != sal_min</span><br></pre></td></tr></table></figure><ul><li>我这里是用的<code>having</code> ， 因为我把条件放在<code>group by</code>后面了 ，这两个也可用where的不过要放在<code>group by</code>之前</li><li>接下来，我们用union就可以 ， 因为 我把他们的别名起的一样 ，而且列也能对的上</li><li>我们就可以直接用union了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line">count(sal_max) as max_people,count(sal_min) as min_people,job,sal_max,sal_min</span><br><span class="line">from(select </span><br><span class="line">max(ifnull((sal + comm) , sal)) as sal_max,</span><br><span class="line">min(ifnull((sal + comm) , sal)) as sal_min,</span><br><span class="line">job,</span><br><span class="line">count(*) as total_people</span><br><span class="line">from emp group by job)  as king where sal_max != sal_min group  by job </span><br><span class="line">union</span><br><span class="line">select </span><br><span class="line">total_people as max_people ,(sal_max - sal_max) as min_people,job,sal_max,sal_min</span><br><span class="line">from(select </span><br><span class="line">max(ifnull((sal + comm) , sal)) as sal_max,</span><br><span class="line">min(ifnull((sal + comm) , sal)) as sal_min,</span><br><span class="line">job,</span><br><span class="line">count(*) as total_people</span><br><span class="line">from emp group by job)  as king  group  by job having sal_max = sal_min;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第七题的附加题"><a href="#第七题的附加题" class="headerlink" title="第七题的附加题"></a>第七题的附加题</h2><ul><li>找出最高的工资 最低工资 以及人数 ，职业</li><li>这个是我没读题的时候 ，看错题意了 ，结果做出个这么个玩意 ，姑且也当作一个题把。</li><li>条件 ： 所有工作中 ，<code>最高工资</code> , <code>最低工资</code> ， <code>人数</code></li></ul><h3 id="1-6"><a href="#1-6" class="headerlink" title="1"></a>1</h3><ul><li>对于这个问题 ， 我们要先找到数据源 ，就是说，我们现在需要最大工资 和最小工资 ，那么为我们要先搞出这样有一个表</li><li><code>select max(ifnull((sal + comm) , sal)) as max_sal, min(coalesce((sal + comm) , sal)) as min_sal,count(*) from emp ;</code></li><li>这个是统计所有工作中的最大和最小工资</li><li>然后我们要找出人数以及职业</li><li>这相当于我们现在有了最大最小的筛选条件 ，去有工资和职业，以及人数的表中筛选就好</li><li>接下来，我们就要创建一个表有工资和职业，以及人数</li><li><code>select job, (ifnull((sal + comm) , sal)) as sal1,count(sal) as total_people from emp  group by sal1 , job;</code></li><li>接下来我们就要进行筛选了 ， 最简单的筛选就是把两个表链接上</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line">sal1,</span><br><span class="line">job,</span><br><span class="line">total_people</span><br><span class="line">from(select max(ifnull((sal + comm) , sal)) as max_sal, min(coalesce((sal + comm) , sal))  as min_sal from emp ) as king </span><br><span class="line"></span><br><span class="line">left join </span><br><span class="line"></span><br><span class="line">(select job, (ifnull((sal + comm) , sal)) as sal1,count(sal) as total_people from emp  group by sal1 , job) as kk </span><br><span class="line">on max_sal = sal1 or min_sal =sal1 ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>但是做到这里其实还可以进行优化 ， 我们可以不用链接 ， 但是上述链接是小表驱动大表的，我们也可以反过来</li><li>但是用in的时候我们不能用一列去匹配两列</li><li>因为我们最开始的数据源，分出来的是两列</li><li>现在我们要通过别名，把两列变成一列</li><li><code>select max(ifnull((sal + comm) , sal)) as sal from emp union select min(coalesce((sal + comm) , sal))  as sal from emp;</code></li><li>然后我们就可以用where进行匹配了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line">sal1,</span><br><span class="line">job,</span><br><span class="line">total_people</span><br><span class="line">from(select job, (ifnull((sal + comm) , sal)) as sal1,count(sal) as total_people from emp  group by sal1 , job) as kk </span><br><span class="line">where sal1 in (select max(ifnull((sal + comm) , sal)) as sal from emp union select min(coalesce((sal + comm) , sal))  as sal from emp);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>这里的in也可以用等号替代 ，只不过如果是等号，那么你后面的条件要拆开 ，而且 中间要用or</li></ul><h2 id="第八题"><a href="#第八题" class="headerlink" title="第八题"></a>第八题</h2><ul><li>列出薪金 高于 公司平均薪金的所有员工号，员工姓名，所在部门名称，上级领导，工资，工资等级</li><li>条件 ： <code>薪金</code>高于 <code>平均薪金</code> ， <code>工资等级</code> ，<code>部门名称</code> </li><li>通过以上条件我们可知 ，这个是三个表都要用到的</li></ul><h3 id="1-7"><a href="#1-7" class="headerlink" title="1"></a>1</h3><ul><li>老样子 ： 我们要先获取基本的数据源</li><li><code>select avg(sal) as sal_avg from emp</code></li><li>上述是获取平均薪金 ，是要作为我们的判断条件的</li><li>然后求出薪金大于平均薪金的 进行初步筛选</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">deptno,</span><br><span class="line">sal,</span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>接下来我们要把初步筛选完成的表 和 部门表联合起来 ，原因是 部门表有部门编号作为连接点</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select</span><br><span class="line">*</span><br><span class="line">from(select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">deptno as deptno1,</span><br><span class="line">sal,</span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno; </span><br></pre></td></tr></table></figure><ul><li>现在除了工资等级 ，和工资，其余的我们全都有了、</li><li>接下来，我们先加上工资 ，然后根据工资进行判断等级</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">(sal + commchange) as earn</span><br><span class="line">from(</span><br><span class="line">select</span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">ifnull(comm , 0) as commchange</span><br><span class="line">from(select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">deptno as deptno1,</span><br><span class="line">sal,</span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno) as setlist;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>接下来，我们要加上工资等级</li><li>在这里，我就偷个懒 因为平均薪金是2200多，那么你工资必不可能比这个少</li><li>那么工资等级也就不会是3及以下</li><li>一般的话是条件都要判断的 ，我这里就偷个懒</li><li>接下来，我们设置筛选条件 ，  因为工资等级没有能和别的表联合 ，或者union的列 ，那么我们只能一个个判断了</li><li>我们先判断大于3000的 并给与工资等级</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">earn,</span><br><span class="line">((empno + 5) - empno) as level</span><br><span class="line">from(select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">(sal + commchange) as earn</span><br><span class="line">from(</span><br><span class="line">select</span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">ifnull(comm , 0) as commchange</span><br><span class="line">from(select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">deptno as deptno1,</span><br><span class="line">sal,</span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno) as setlist) as sal_tables where earn &gt;3000;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>接下来是小于3000的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">earn,</span><br><span class="line">((empno + 4) - empno) as level</span><br><span class="line">from(select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">(sal + commchange) as earn</span><br><span class="line">from(</span><br><span class="line">select</span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">ifnull(comm , 0) as commchange</span><br><span class="line">from(select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">deptno as deptno1,</span><br><span class="line">sal,</span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno) as setlist) as sal_tables where earn &gt;2000 and earn &lt;=3000;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注意我这里是偷懒了，没有判断2000和更低的，原因在上面 ，如果想判断和上面两个一样</li><li>接下来 我们用unio  把他们链接到一起</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">earn,</span><br><span class="line">((empno + 5) - empno) as level</span><br><span class="line">from(select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">(sal + commchange) as earn</span><br><span class="line">from(</span><br><span class="line">select</span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">ifnull(comm , 0) as commchange</span><br><span class="line">from(select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">deptno as deptno1,</span><br><span class="line">sal,</span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno) as setlist) as sal_tables where earn &gt;3000</span><br><span class="line">union</span><br><span class="line">select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">earn,</span><br><span class="line">((empno + 4) - empno) as level</span><br><span class="line">from(select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">(sal + commchange) as earn</span><br><span class="line">from(</span><br><span class="line">select</span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">sal,</span><br><span class="line">mgr,</span><br><span class="line">deptno1,</span><br><span class="line">dname,</span><br><span class="line">ifnull(comm , 0) as commchange</span><br><span class="line">from(select </span><br><span class="line">comm,</span><br><span class="line">empno,</span><br><span class="line">ename,</span><br><span class="line">deptno as deptno1,</span><br><span class="line">sal,</span><br><span class="line">mgr</span><br><span class="line">from emp where sal &gt; (select </span><br><span class="line">avg(sal)</span><br><span class="line">from emp)) as Oavg_table left join dept on Oavg_table.deptno1=dept.deptno) as setlist) as sal_tables where earn &gt;2000 and earn &lt;=3000;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>就可以了 ，上面的我做法是我没动脑子，直接一点点搞出来的</li></ul><h3 id="2-5"><a href="#2-5" class="headerlink" title="2"></a>2</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">select empno,ename,dname,sal,mgr,ifnull((sal + comm) , sal) as earn , (sal + 5  - sal) as  level from (select * from emp where sal &gt; (select avg(sal) from  emp))  as king left join dept on king.deptno=dept.deptno having earn &gt;  3000</span><br><span class="line">union </span><br><span class="line">select empno,ename,dname,sal,mgr,ifnull((sal + comm) , sal) as earn , (sal + 4  - sal) as  level from (select * from emp where sal &gt; (select avg(sal) from  emp))  as king left join dept on king.deptno=dept.deptno having earn &lt;= 3000;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2"><a href="#3-2" class="headerlink" title="3"></a>3</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">king.ename,</span><br><span class="line">king.empno,</span><br><span class="line">e1.ename as leader,</span><br><span class="line">king.earn,</span><br><span class="line">case when earn Between 700 and 1200 then 1</span><br><span class="line">     when earn Between 1200 and 1400 then 2</span><br><span class="line">     when earn Between 1400 and 2000 then 3</span><br><span class="line">     when earn Between 2000 and 3000 then 4</span><br><span class="line">     when earn Between 3000 and 9990 then 5</span><br><span class="line">     end</span><br><span class="line">as sallevel</span><br><span class="line">from (</span><br><span class="line">  select ename , empno , deptno , ifnull((sal + comm),sal) as earn ,mgr </span><br><span class="line">  from emp</span><br><span class="line">  where sal &gt; (</span><br><span class="line">    select avg(sal)</span><br><span class="line">    from emp</span><br><span class="line">  )</span><br><span class="line">) as king </span><br><span class="line">left join dept on king.deptno=dept.deptno </span><br><span class="line">left join emp e1 on king.mgr = e1.empno;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-1"><a href="#4-1" class="headerlink" title="4"></a>4</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">// 最好不用 ，因为笛卡尔积 会造成数据膨胀</span><br><span class="line">   select </span><br><span class="line">   king.ename,</span><br><span class="line">   king.empno,</span><br><span class="line">   e1.ename as leader,</span><br><span class="line">   king.earn,</span><br><span class="line">   s.grade</span><br><span class="line">   as sallevel</span><br><span class="line">   from (</span><br><span class="line">     select ename , empno , deptno , ifnull((sal + comm),sal) as earn ,mgr </span><br><span class="line">     from emp</span><br><span class="line">     where sal &gt; (</span><br><span class="line">       select avg(sal)</span><br><span class="line">       from emp</span><br><span class="line">     )</span><br><span class="line">   ) as king </span><br><span class="line">   left join dept on king.deptno=dept.deptno </span><br><span class="line">   left join (</span><br><span class="line">     select empno,</span><br><span class="line">     ename</span><br><span class="line">     from emp</span><br><span class="line">   ) e1 on king.mgr = e1.empno</span><br><span class="line">   cross join salgrade as s where earn Between losal and hisal ;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-1"><a href="#5-1" class="headerlink" title="5"></a>5</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">select </span><br><span class="line">king.ename,</span><br><span class="line">king.empno,</span><br><span class="line">e1.ename as leader,</span><br><span class="line">king.earn,</span><br><span class="line">s.grade</span><br><span class="line">as sallevel</span><br><span class="line">from (</span><br><span class="line">  select ename , empno , deptno , ifnull((sal + comm),sal) as earn ,mgr </span><br><span class="line">  from emp</span><br><span class="line">  where sal &gt; (</span><br><span class="line">    select avg(sal)</span><br><span class="line">    from emp</span><br><span class="line">  )</span><br><span class="line">) as king </span><br><span class="line">left join dept on king.deptno=dept.deptno </span><br><span class="line">left join (</span><br><span class="line">  select empno,</span><br><span class="line">  ename</span><br><span class="line">  from emp</span><br><span class="line">) e1 on king.mgr = e1.empno</span><br><span class="line">left join salgrade as s on earn &gt;= losal and earn &lt;= hisal;</span><br></pre></td></tr></table></figure><h2 id="第九题"><a href="#第九题" class="headerlink" title="第九题"></a>第九题</h2><ul><li>列出薪金  高于  在各自部门工作的员工的平均薪金的员工姓名和薪金、部门名称</li><li>条件 ： 各个部门，<code>薪金</code>高于<code>各个部门</code>的<code>平均薪金</code></li></ul><h3 id="1-8"><a href="#1-8" class="headerlink" title="1"></a>1</h3><ul><li><p>我们可以先获取薪金，以及部门编号 ，并且按照他们进行划分</p></li><li><p>因为题目中主要要求的就是部门以及薪金</p></li><li><p><code>select  sal ,deptno from emp group by sal , deptno;</code></p></li><li><p>接下来我们求各个部门的平均薪金</p></li><li><p><code>select avg(sal) as sal_avg, deptno from (select  sal ,deptno from emp group by sal , deptno) as king group by deptno;</code></p></li><li><p>其实上述两部可以通过一步完成</p></li><li><p><code>select avg(sal) ,deptno from emp group by deptno;</code></p></li><li><p>就是不动脑子和动脑子的区别</p></li><li><p>不过一般没思路的时候把数据源写上，可能会有奇效</p></li><li><p>接下来找出高于平均薪金的信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select</span><br><span class="line">*</span><br><span class="line">from (select avg(sal) as sal_avg, deptno from (select  sal ,deptno from emp group by sal , deptno) as king group by deptno) as avg_basic left join emp</span><br><span class="line">on emp.deptno=avg_basic.deptno  and emp.sal &gt; avg_basic.sal_avg;</span><br></pre></td></tr></table></figure></li><li><p>这个是用左连接来实现的</p></li><li><p>其实还可以要用where来实现 , 不过比较复杂 ，就不在这里写了</p></li><li><p>接下来我们就合并部门输出就可以了</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select  * </span><br><span class="line">from  </span><br><span class="line">(select</span><br><span class="line">*</span><br><span class="line">from (select avg(sal) as sal_avg, deptno as deptno1 from (select  sal ,deptno from emp group by sal , deptno) as king group by deptno) as avg_basic left join emp</span><br><span class="line">on emp.deptno=avg_basic.deptno1  and emp.sal &gt; avg_basic.sal_avg) as basicinfo left  join dept on basicinfo.deptno1=dept.deptno;</span><br></pre></td></tr></table></figure><ul><li>这个可以用in替代</li><li>代码如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select  * </span><br><span class="line">from  </span><br><span class="line">(select</span><br><span class="line">*</span><br><span class="line">from (select avg(sal) as sal_avg, deptno as deptno1 from (select  sal ,deptno from emp group by sal , deptno) as king group by deptno) as avg_basic left join emp</span><br><span class="line">on emp.deptno=avg_basic.deptno1  and emp.sal &gt; avg_basic.sal_avg) as basicinfo where basicinfo.deptno1 in (select deptno from dept);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>完结撒花！</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>我们做题不可以改变源头数据 ， 就是数据库里的数据</li><li>没有思路的时候可以写题中要的数据 ， 题是做出来的，不是看出来的</li><li>写了第一行 ，自然就会有后面的代码，只是看你愿不愿意开始</li><li>有思路自然是按照自己的思路去做</li><li>在有些时候 left join 可以替换成  in  但是这样的替换是在 没有大于小于判定的时候</li><li>如果有大于小于判定 ，则要替换要用where</li><li>进行in的时候如果出现一行对多行的情况 ，</li><li>不妨把多行化成一行 ，用union</li><li>或者把多余的行删除</li><li>对于分组 ， 我们如果没有思路可以把题中要的东西先分组，然后后面再进行分组</li><li>比如 ： <code>select avg(sal) as sal_avg, deptno from (select  sal ,deptno from emp group by sal , deptno) as king group by deptno;</code></li><li>和 <code>select avg(sal) ,deptno from emp group by deptno;</code></li><li>是一样的，但是对于没有思路的时候来说，还是上面一个更好一点，下面是块，可是有时候会忘，</li><li>对于几乎所有的sql题目</li><li>几乎没有题通过 以下做不出来的 </li><li>就是简单方法和笨方法的区别  ， 笨方法虽然笨 ，可是实用性强 ，简单虽然简单 ，可是难想</li><li>而且笨方法的速度其实主要取决于你的打字速度</li><li>先筛选数据 <code>group by</code> , <code>where</code> , <code>avg ,sum ,max ,min..</code> …</li><li>再筛选数据 <code>group by</code> , <code>where</code> , <code>avg ,sum ,max ,min..</code> …</li><li>通过链接的方式链接 <code>union</code> , <code>union all</code> ,<code> join</code>..</li><li>判断条件 <code>in</code> , <code>where</code> ….</li><li>注意 ： 组函数不可以进行嵌套使用 <code>where max(sal) =1</code> 这样就是不可以的 ，相应的 在in 里也不可以<br> ， 在组函数里也不可以  ，如果非要这样操作 ，那么你要 嵌套表 , 加上别名才可以</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select</span><br><span class="line">*</span><br><span class="line">from(select</span><br><span class="line">max(sal) as max_sal</span><br><span class="line">from emp</span><br><span class="line">) where max_sal =1;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>上述那样才可以</li><li>where 和 having是有区别的 作用域的区别，以及位置的区别 ，但是语法是基本上完全一样的 in ， like 之类的 </li><li>where被放在group之前 ，havin 是在group之后</li><li>例子 ：  </li><li><code>select sal as sal1 ,comm  as comm1 from emp where sal1 &gt; 1500; </code></li><li><code>select sal as sal1 ,comm  as comm1 from emp where comm1 in (300);</code></li><li>这样where是读取不到这个别名的 ，但是having是可以读取到的</li><li>原因在于，他们对数据操作的时机不同</li><li>having是上面都执行完了 ，才操作</li><li>where是和他们一起操作的</li><li><code>select sal as sal1 from emp having sal1 &gt;1500;</code></li><li><code>select sal as sal1 from emp having sal in (800);</code></li><li>这样就可以了</li></ul><h1 id="牛客"><a href="#牛客" class="headerlink" title="牛客"></a>牛客</h1><h2 id="现在运营想要了解复旦大学的每个用户在8月份练习的总题目数和回答正确的题目数情况，请取出相应明细数据，对于在8月份没有练习过的用户，答题数结果返回0"><a href="#现在运营想要了解复旦大学的每个用户在8月份练习的总题目数和回答正确的题目数情况，请取出相应明细数据，对于在8月份没有练习过的用户，答题数结果返回0" class="headerlink" title="现在运营想要了解复旦大学的每个用户在8月份练习的总题目数和回答正确的题目数情况，请取出相应明细数据，对于在8月份没有练习过的用户，答题数结果返回0"></a>现在运营想要了解复旦大学的每个用户在8月份练习的总题目数和回答正确的题目数情况，请取出相应明细数据，对于在8月份没有练习过的用户，答题数结果返回0</h2><ul><li>数据源</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">drop table if exists `user_profile`;</span><br><span class="line">drop table if  exists `question_practice_detail`;</span><br><span class="line">drop table if  exists `question_detail`;</span><br><span class="line">CREATE TABLE `user_profile` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `device_id` int(11) NOT NULL,</span><br><span class="line">  `gender` varchar(14) NOT NULL,</span><br><span class="line">  `age` int(11) DEFAULT NULL,</span><br><span class="line">  `university` varchar(32) NOT NULL,</span><br><span class="line">  `gpa` float DEFAULT NULL,</span><br><span class="line">  `active_days_within_30` int(11) DEFAULT NULL,</span><br><span class="line">  `question_cnt` int(11) DEFAULT NULL,</span><br><span class="line">  `answer_cnt` int(11) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">CREATE TABLE `question_practice_detail` (</span><br><span class="line">`id` int NOT NULL,</span><br><span class="line">`device_id` int NOT NULL,</span><br><span class="line">`question_id`int NOT NULL,</span><br><span class="line">`result` varchar(32) NOT NULL,</span><br><span class="line">`date` date NOT NULL</span><br><span class="line">);</span><br><span class="line">CREATE TABLE `question_detail` (</span><br><span class="line">`id` int NOT NULL,</span><br><span class="line">`question_id`int NOT NULL,</span><br><span class="line">`difficult_level` varchar(32) NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO user_profile VALUES(1,2138,&#x27;male&#x27;,21,&#x27;北京大学&#x27;,3.4,7,2,12);</span><br><span class="line">INSERT INTO user_profile VALUES(2,3214,&#x27;male&#x27;,null,&#x27;复旦大学&#x27;,4.0,15,5,25);</span><br><span class="line">INSERT INTO user_profile VALUES(3,6543,&#x27;female&#x27;,20,&#x27;北京大学&#x27;,3.2,12,3,30);</span><br><span class="line">INSERT INTO user_profile VALUES(4,2315,&#x27;female&#x27;,23,&#x27;浙江大学&#x27;,3.6,5,1,2);</span><br><span class="line">INSERT INTO user_profile VALUES(5,5432,&#x27;male&#x27;,25,&#x27;山东大学&#x27;,3.8,20,15,70);</span><br><span class="line">INSERT INTO user_profile VALUES(6,2131,&#x27;male&#x27;,28,&#x27;山东大学&#x27;,3.3,15,7,13);</span><br><span class="line">INSERT INTO user_profile VALUES(7,4321,&#x27;male&#x27;,28,&#x27;复旦大学&#x27;,3.6,9,6,52);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(1,2138,111,&#x27;wrong&#x27;,&#x27;2021-05-03&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(2,3214,112,&#x27;wrong&#x27;,&#x27;2021-05-09&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(3,3214,113,&#x27;wrong&#x27;,&#x27;2021-06-15&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(4,6543,111,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(5,2315,115,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(6,2315,116,&#x27;right&#x27;,&#x27;2021-08-14&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(7,2315,117,&#x27;wrong&#x27;,&#x27;2021-08-15&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(8,3214,112,&#x27;wrong&#x27;,&#x27;2021-05-09&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(9,3214,113,&#x27;wrong&#x27;,&#x27;2021-08-15&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(10,6543,111,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(11,2315,115,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(12,2315,116,&#x27;right&#x27;,&#x27;2021-08-14&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(13,2315,117,&#x27;wrong&#x27;,&#x27;2021-08-15&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(14,3214,112,&#x27;wrong&#x27;,&#x27;2021-08-16&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(15,3214,113,&#x27;wrong&#x27;,&#x27;2021-08-18&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(16,6543,111,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(1,111,&#x27;hard&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(2,112,&#x27;medium&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(3,113,&#x27;easy&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(4,115,&#x27;easy&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(5,116,&#x27;medium&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(6,117,&#x27;easy&#x27;);</span><br></pre></td></tr></table></figure><h2 id="答题"><a href="#答题" class="headerlink" title="答题"></a>答题</h2><ul><li>因为要用大于8月的 ， 所以 直接 用month就好</li><li>用if判断是不是正确</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">select </span><br><span class="line">profile.device_id,</span><br><span class="line">university,</span><br><span class="line">count(question_id) as total,</span><br><span class="line">sum(if(result = &#x27;right&#x27; , 1 ,0)) as right_question_cnt</span><br><span class="line">from user_profile as profile left join question_practice_detail as detail on profile.device_id=detail.device_id  and month(detail.date)=8 where university = &#x27;复旦大学&#x27; group by profile.device_id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>第二种方法</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select </span><br><span class="line">device_id,</span><br><span class="line">university,</span><br><span class="line">sum(right_question_cnt + wrong_question_cnt) as question_cnt,</span><br><span class="line">sum(right_question_cnt) as right_question_cnt</span><br><span class="line">from(select </span><br><span class="line">device_id,</span><br><span class="line">university,</span><br><span class="line">ifnull((right_question_cnt) , 0) as right_question_cnt,</span><br><span class="line">ifnull((wrong_question_cnt) , 0) as wrong_question_cnt,</span><br><span class="line">ifnull((date) , 0) as date</span><br><span class="line">from user_profile left join (</span><br><span class="line">select device_id as ID,count(*) as right_question_cnt ,date , (device_id - device_id) as wrong_question_cnt from question_practice_detail where result  = &quot;right&quot; group by device_id ,date</span><br><span class="line">union</span><br><span class="line">select device_id,(device_id - device_id) as right_question_cnt,date ,count(*) as wrong_question_cnt  from question_practice_detail where result  = &quot;wrong&quot; group by device_id ,date) as king on king.ID = user_profile.device_id where university = &quot;复旦大学&quot;) as king    </span><br><span class="line">where date &gt; &#x27;2021-08-00&#x27; or date = 0  group by device_id , university ;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><ul><li>链接后面的on后面 ，能加上and 进行条件筛选</li><li>month（date） 可以直接获取这个日期的月份</li><li>if（xxx , sss , www） : if表达式 ： 如果前一个为真 ，则执行sss ，如果不是真 则 www</li><li>要看清题意</li></ul><h2 id="现在运营想要了解浙江大学的用户在不同难度题目下答题的正确率情况，请取出相应数据，并按照准确率升序输出。"><a href="#现在运营想要了解浙江大学的用户在不同难度题目下答题的正确率情况，请取出相应数据，并按照准确率升序输出。" class="headerlink" title="现在运营想要了解浙江大学的用户在不同难度题目下答题的正确率情况，请取出相应数据，并按照准确率升序输出。"></a>现在运营想要了解浙江大学的用户在不同难度题目下答题的正确率情况，请取出相应数据，并按照准确率升序输出。</h2><ul><li>数据源<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">drop table if exists `user_profile`;</span><br><span class="line">drop table if  exists `question_practice_detail`;</span><br><span class="line">drop table if  exists `question_detail`;</span><br><span class="line">CREATE TABLE `user_profile` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `device_id` int(11) NOT NULL,</span><br><span class="line">  `gender` varchar(14) NOT NULL,</span><br><span class="line">  `age` int(11) DEFAULT NULL,</span><br><span class="line">  `university` varchar(32) NOT NULL,</span><br><span class="line">  `gpa` float DEFAULT NULL,</span><br><span class="line">  `active_days_within_30` int(11) DEFAULT NULL,</span><br><span class="line">  `question_cnt` int(11) DEFAULT NULL,</span><br><span class="line">  `answer_cnt` int(11) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">CREATE TABLE `question_practice_detail` (</span><br><span class="line">`id` int NOT NULL,</span><br><span class="line">`device_id` int NOT NULL,</span><br><span class="line">`question_id`int NOT NULL,</span><br><span class="line">`result` varchar(32) NOT NULL,</span><br><span class="line">`date` date NOT NULL</span><br><span class="line">);</span><br><span class="line">CREATE TABLE `question_detail` (</span><br><span class="line">`id` int NOT NULL,</span><br><span class="line">`question_id`int NOT NULL,</span><br><span class="line">`difficult_level` varchar(32) NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO user_profile VALUES(1,2138,&#x27;male&#x27;,21,&#x27;北京大学&#x27;,3.4,7,2,12);</span><br><span class="line">INSERT INTO user_profile VALUES(2,3214,&#x27;male&#x27;,null,&#x27;复旦大学&#x27;,4.0,15,5,25);</span><br><span class="line">INSERT INTO user_profile VALUES(3,6543,&#x27;female&#x27;,20,&#x27;北京大学&#x27;,3.2,12,3,30);</span><br><span class="line">INSERT INTO user_profile VALUES(4,2315,&#x27;female&#x27;,23,&#x27;浙江大学&#x27;,3.6,5,1,2);</span><br><span class="line">INSERT INTO user_profile VALUES(4,2316,&#x27;female&#x27;,23,&#x27;浙江大学&#x27;,3.6,5,1,2);</span><br><span class="line">INSERT INTO user_profile VALUES(5,5432,&#x27;male&#x27;,25,&#x27;山东大学&#x27;,3.8,20,15,70);</span><br><span class="line">INSERT INTO user_profile VALUES(6,2131,&#x27;male&#x27;,28,&#x27;山东大学&#x27;,3.3,15,7,13);</span><br><span class="line">INSERT INTO user_profile VALUES(7,4321,&#x27;male&#x27;,28,&#x27;复旦大学&#x27;,3.6,9,6,52);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(1,2138,111,&#x27;wrong&#x27;,&#x27;2021-05-03&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(2,3214,112,&#x27;wrong&#x27;,&#x27;2021-05-09&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(3,3214,113,&#x27;wrong&#x27;,&#x27;2021-06-15&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(4,6543,111,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(5,2315,115,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(6,2315,116,&#x27;right&#x27;,&#x27;2021-08-14&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(7,2315,117,&#x27;wrong&#x27;,&#x27;2021-08-15&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(8,3214,112,&#x27;wrong&#x27;,&#x27;2021-05-09&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(9,3214,113,&#x27;wrong&#x27;,&#x27;2021-08-15&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(10,6543,111,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(11,2315,115,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(12,2315,116,&#x27;right&#x27;,&#x27;2021-08-14&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(13,2315,117,&#x27;wrong&#x27;,&#x27;2021-08-15&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(14,3214,112,&#x27;wrong&#x27;,&#x27;2021-08-16&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(15,3214,113,&#x27;wrong&#x27;,&#x27;2021-08-18&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(16,6543,111,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(1,111,&#x27;hard&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(2,112,&#x27;medium&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(3,113,&#x27;easy&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(4,115,&#x27;easy&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(5,116,&#x27;medium&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(6,117,&#x27;easy&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select</span><br><span class="line">difficult_level,</span><br><span class="line">(sum(if(result = &#x27;right&#x27; , 1 ,0))/count(up.question_id)) as Rate</span><br><span class="line">from</span><br><span class="line">(select * from question_practice_detail where device_id in (select device_id from user_profile where university = &quot;浙江大学&quot;)) as up left join question_detail on up.question_id = question_detail.question_id group by difficult_level order by Rate;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>优化方法</li><li>把中间筛选浙江大学的地方换成链接 ，并且在链接的时候进行筛选 ， 就会快上给 5-6ms</li><li>如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SELECT qd.difficult_level,(</span><br><span class="line">SUM(CASE WHEN qpd.result=&#x27;right&#x27; THEN 1</span><br><span class="line">ELSE 0</span><br><span class="line">END</span><br><span class="line">)/COUNT(qpd.result)</span><br><span class="line">) correct_rated</span><br><span class="line">FROM user_profile up,</span><br><span class="line">     question_practice_detail qpd,</span><br><span class="line">     question_detail qd</span><br><span class="line">WHERE     up.university=&#x27;浙江大学&#x27;</span><br><span class="line">      AND up.device_id=qpd.device_id</span><br><span class="line">      AND qpd.question_id=qd.question_id</span><br><span class="line">GROUP BY  qd.difficult_level</span><br><span class="line">order by correct_rated asc</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="现在运营想要查看用户在某天刷题后第二天还会再来刷题的平均概率。请你取出相应数据。"><a href="#现在运营想要查看用户在某天刷题后第二天还会再来刷题的平均概率。请你取出相应数据。" class="headerlink" title="现在运营想要查看用户在某天刷题后第二天还会再来刷题的平均概率。请你取出相应数据。"></a>现在运营想要查看用户在某天刷题后第二天还会再来刷题的平均概率。请你取出相应数据。</h2><ul><li>数据源<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">drop table if exists `user_profile`;</span><br><span class="line">drop table if  exists `question_practice_detail`;</span><br><span class="line">drop table if  exists `question_detail`;</span><br><span class="line">CREATE TABLE `user_profile` (</span><br><span class="line">  `id` int(11) NOT NULL,</span><br><span class="line">  `device_id` int(11) NOT NULL,</span><br><span class="line">  `gender` varchar(14) NOT NULL,</span><br><span class="line">  `age` int(11) DEFAULT NULL,</span><br><span class="line">  `university` varchar(32) NOT NULL,</span><br><span class="line">  `gpa` float DEFAULT NULL,</span><br><span class="line">  `active_days_within_30` int(11) DEFAULT NULL,</span><br><span class="line">  `question_cnt` int(11) DEFAULT NULL,</span><br><span class="line">  `answer_cnt` int(11) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">CREATE TABLE `question_practice_detail` (</span><br><span class="line">`id` int NOT NULL,</span><br><span class="line">`device_id` int NOT NULL,</span><br><span class="line">`question_id`int NOT NULL,</span><br><span class="line">`result` varchar(32) NOT NULL,</span><br><span class="line">`date` date NOT NULL</span><br><span class="line">);</span><br><span class="line">CREATE TABLE `question_detail` (</span><br><span class="line">`id` int NOT NULL,</span><br><span class="line">`question_id`int NOT NULL,</span><br><span class="line">`difficult_level` varchar(32) NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO user_profile VALUES(1,2138,&#x27;male&#x27;,21,&#x27;北京大学&#x27;,3.4,7,2,12);</span><br><span class="line">INSERT INTO user_profile VALUES(2,3214,&#x27;male&#x27;,null,&#x27;复旦大学&#x27;,4.0,15,5,25);</span><br><span class="line">INSERT INTO user_profile VALUES(3,6543,&#x27;female&#x27;,20,&#x27;北京大学&#x27;,3.2,12,3,30);</span><br><span class="line">INSERT INTO user_profile VALUES(4,2315,&#x27;female&#x27;,23,&#x27;浙江大学&#x27;,3.6,5,1,2);</span><br><span class="line">INSERT INTO user_profile VALUES(5,5432,&#x27;male&#x27;,25,&#x27;山东大学&#x27;,3.8,20,15,70);</span><br><span class="line">INSERT INTO user_profile VALUES(6,2131,&#x27;male&#x27;,28,&#x27;山东大学&#x27;,3.3,15,7,13);</span><br><span class="line">INSERT INTO user_profile VALUES(7,4321,&#x27;male&#x27;,28,&#x27;复旦大学&#x27;,3.6,9,6,52);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(1,2138,111,&#x27;wrong&#x27;,&#x27;2021-05-03&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(2,3214,112,&#x27;wrong&#x27;,&#x27;2021-05-09&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(3,3214,113,&#x27;wrong&#x27;,&#x27;2021-06-15&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(4,6543,111,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(5,2315,115,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(6,2315,116,&#x27;right&#x27;,&#x27;2021-08-14&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(7,2315,117,&#x27;wrong&#x27;,&#x27;2021-08-15&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(8,3214,112,&#x27;wrong&#x27;,&#x27;2021-05-09&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(9,3214,113,&#x27;wrong&#x27;,&#x27;2021-08-15&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(10,6543,111,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(11,2315,115,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(12,2315,116,&#x27;right&#x27;,&#x27;2021-08-14&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(13,2315,117,&#x27;wrong&#x27;,&#x27;2021-08-15&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(14,3214,112,&#x27;wrong&#x27;,&#x27;2021-08-16&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(15,3214,113,&#x27;wrong&#x27;,&#x27;2021-08-18&#x27;);</span><br><span class="line">INSERT INTO question_practice_detail VALUES(16,6543,111,&#x27;right&#x27;,&#x27;2021-08-13&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(1,111,&#x27;hard&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(2,112,&#x27;medium&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(3,113,&#x27;easy&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(4,115,&#x27;easy&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(5,116,&#x27;medium&#x27;);</span><br><span class="line">INSERT INTO question_detail VALUES(6,117,&#x27;easy&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">select avg(if(datediff(date2, date1)=1, 1, 0)) as avg_ret</span><br><span class="line">from (</span><br><span class="line">    select</span><br><span class="line">        distinct device_id,</span><br><span class="line">        date as date1,</span><br><span class="line">        lead(date) over (partition by device_id order by date) as date2</span><br><span class="line">    from (</span><br><span class="line">        select distinct device_id, date</span><br><span class="line">        from question_practice_detail</span><br><span class="line">    ) as uniq_id_date</span><br><span class="line">) as id_last_next_date</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E4%BD%9C%E4%B8%9A/">作业</category>
      
      
      
      <comments>http://example.com/2022/11/05/sql%E7%BB%83%E4%B9%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://example.com/2022/11/03/hello-world/</link>
      <guid>http://example.com/2022/11/03/hello-world/</guid>
      <pubDate>Thu, 03 Nov 2022 05:38:31 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</description>
        
      
      
      
      <content:encoded><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">$ hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://example.com/2022/11/03/hello-world/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mysql</title>
      <link>http://example.com/2022/11/03/11-3/</link>
      <guid>http://example.com/2022/11/03/11-3/</guid>
      <pubDate>Thu, 03 Nov 2022 01:11:14 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;关系型数据库&lt;/li&gt;
&lt;li&gt;非关系型数据库 ： nosql&lt;/li&gt;
&lt;li&gt;存储方式 ， 类似excel&lt;/li&gt;
&lt;li</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>关系型数据库</li><li>非关系型数据库 ： nosql</li><li>存储方式 ， 类似excel</li><li>学习 ： 基于官网</li><li>版本 ：</li><li>5.7 ：主流</li><li>5.6 ：也有</li><li>8.x ：不是主流 ： java团队</li><li>极限是在几tb级别 秒级别 毫秒级别 添加索引还可以更快</li></ul><h1 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h1><ul><li>5.7</li><li>安装包种类</li><li>rpm ： 不可以完成二次开发，只能用mysql官网的</li><li>tar ： 相当于自己魔改的有很多官方没有的功能</li><li>rpm ； 要注意el7的 是centos7的</li><li>用lazz</li><li>上传 ：rz</li><li>下载 ：sz</li></ul><h2 id="mysql的卸载"><a href="#mysql的卸载" class="headerlink" title="mysql的卸载"></a>mysql的卸载</h2><ul><li>在windows下 ， mysql 是先在控制面板里卸载，</li><li>然后把安装目录卸载掉</li><li>在c盘的 ProgramData 里也有文件残留，不过是隐藏文件要自己打开的</li><li>然后删除注册表上的</li><li>linux</li><li>先停掉mysql</li><li>然后通过&#96;rpm - qa | grep mysql | xargs -n1 rpm -e –nodeps</li><li>然后找到mysql生成的文件</li><li>find &#x2F; -name <code>&quot;*mysql*&quot;</code></li><li>把该删的文件全部删掉</li><li>然后重新安装</li></ul><h2 id="mysql的安装linux版本"><a href="#mysql的安装linux版本" class="headerlink" title="mysql的安装linux版本"></a>mysql的安装linux版本</h2><ul><li>这里安装的是mysql的tar包</li><li>首先要解压  :  通过<code>tar -vxf xxxxxxxxxx</code></li><li>一般安装mysql的软件的时候要卸载一个东西 ，就是<code>mariadb-libs-5.5.56-2.el7.x86_64</code></li><li>通过<code>rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64</code></li><li>就卸载了</li><li>然后再进行安装</li><li>我是创建了一个sh脚本<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">rpm -ivh mysql-community-common-5.7.28-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.28-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-compat-5.7.28-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.28-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-5.7.28-1.el7.x86_64.rpm</span><br><span class="line"></span><br></pre></td></tr></table></figure>然后运行脚本</li><li>安装成功了之后，我们初始化mysql</li><li>mysqld initialize user&#x3D;mysql</li><li>然后启动mysql</li><li>systemctl start mysql</li><li>然后查看&#x2F;var&#x2F;log&#x2F;mysql.log</li><li>就可以查看到我们的初始密码</li><li>然后通过</li><li>mysql -uroot -pxxx</li><li>就可以进行登录</li><li>而如果有敏感字符，则要用转义字符的方式比如 / : 代表一个 &#x2F;</li><li>然后再进行设置密码</li><li>&#96;set password &#x3D; password(“xxxxxxxx”)</li><li>再通过flash privileges 进行更改</li></ul><h1 id="mysql的操作"><a href="#mysql的操作" class="headerlink" title="mysql的操作"></a>mysql的操作</h1><ul><li>show databases;</li><li>展示数据库</li><li>展示的数据库的软件 ： </li><li>navcat</li><li>sqlyog</li><li>dbvear</li><li>但是当他是<code>root@localhost</code>的时候，我们只能通过本机访问</li><li>但是可以改成 ：<code> root@%: xxxx(密码)</code></li><li>就可以通过任意机器访问</li><li>通过use xxx更改到xxx数据库</li><li>通过show tables 查看表</li><li>选择字段 ： select xxx form xxx表 比如 ： <code>select host,user from user;</code></li><li>修改表中数据 ： update 比如 ： <code>update mysql.user set host=&quot;%&quot; where user=&quot;root&quot;;</code> </li><li>而后通过 ： <code>flash privileges</code> 进行权限修改</li><li>然后再自己的wins上通过远程访问的软件访问他</li><li>语法 ：</li><li>sql语法 ：</li><li>ddl ： 数据定义语言</li><li>dml ： 数据操作语言</li><li>dcl ： 数据控制语言</li><li>都不区分大小写</li><li>‘null’ ： 字符串字段</li><li>‘’ ： 同上</li><li>NULL ： 空</li><li>上述三个是不一样的意义</li><li>字符集 ： 5.7 默认的字符集是拉丁的</li><li>我们可以在创建表的时候更改字符集</li><li><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">CREATE TABLE `name` (</span><br><span class="line">  `id` int(3) DEFAULT NULL,</span><br><span class="line">  `age` int(3) DEFAULT NULL,</span><br><span class="line">  `name` varchar(3) DEFAULT NULL</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=UTF-8 // 字符集</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>它支持嵌套<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">select name ,age_max ,age_avg </span><br><span class="line">from(</span><br><span class="line">select </span><br><span class="line">name,</span><br><span class="line">max(age) as age_max,</span><br><span class="line">min(age) as age_min,</span><br><span class="line">count(age) as age_count,</span><br><span class="line">avg(age) as age_avg</span><br><span class="line">from xxx</span><br><span class="line">group by name) as res </span><br><span class="line">where age_avg &gt;18;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><ul><li>过滤条件</li><li><code>&gt;</code></li><li><code>&lt;</code></li><li><code>=</code></li><li><code>&gt;=</code></li><li><code>&lt;=</code></li><li><code>&lt;&gt;</code> (也可以是<code>!=</code>)</li><li><code>and</code> <code>or</code> <code>in</code> <code>notin</code></li><li>根据本意就好 下面的一行代表复合查询</li><li><code>select * from xx where name in (&#39;要查询的东西&#39; ， &#39;要查询的东西&#39; ，..);</code></li><li><code>not in</code> 同上</li><li><code>between and</code> : 代表在。。。之间的</li><li></li></ul><h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><ul><li>like rlike regexp ： 模糊匹配</li><li><code> select * from where name like &quot;z%&quot;</code> : 代表查找第一个是z的</li><li>占位符 ： _ : 占位一个</li><li><code> select * from where name like &quot;_s%&quot;</code> :第二个是s的</li></ul><h3 id="合并表"><a href="#合并表" class="headerlink" title="合并表"></a>合并表</h3><ul><li>合并成一个纵向的表</li><li><code>union</code> ： 去重</li><li><code>union all</code> ： 不去重</li></ul><h3 id="查询限制"><a href="#查询限制" class="headerlink" title="查询限制"></a>查询限制</h3><ul><li>limit</li><li><code>select * from xxx limit 2</code></li><li>代表只显示两条</li><li>但是底层已经查完了</li><li>只是只显示两条</li></ul><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><ul><li>清除有无用的数据</li><li>就是null的</li><li>工作中一般不会删除数据 ，就是单纯的过滤数据 ，也不让更改数据</li><li>一般用 is null 或者 is not null</li><li>要把null输出0，并显示</li><li>处理空值的函数 </li><li>ifnull(xxx,xxx,…)</li><li>coalesce(xxx ,xxx ,xxxx…)</li><li>他们都是如果里面的值是空那么就会验证下一个数值，如果不为空就输出 ，为空 就继续往下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">name</span><br><span class="line">id</span><br><span class="line">clalesce(age, 0) as age_alias</span><br><span class="line">...</span><br><span class="line">from xxx</span><br></pre></td></tr></table></figure></li></ul><h2 id="ddl"><a href="#ddl" class="headerlink" title="ddl"></a>ddl</h2><ul><li>creat drop alter show（？）</li><li></li><li>创建数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">creat &#123;DATABASE | SCHEMA&#125; [IF NOT ExISTS] db_name</span><br><span class="line">[creat_option]</span><br><span class="line">creat_option : &#123;CHARACT&#125;</span><br><span class="line">create table name (create_definition)</span><br><span class="line">例子 ：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create table try (</span><br><span class="line">id int(3) not null auto_increment,</span><br><span class="line">name varchar(3) comment &#x27;名字注释&#x27;,</span><br><span class="line">age int(3),</span><br><span class="line">create_user varchar(5),</span><br><span class="line">create_time timestamp not null default  current_timestamp,</span><br><span class="line">update_time timestamp not null default current_timestamp on update current_timestamp,--更新显示时间</span><br><span class="line">primary key(id)--主键</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>表名字 一定是英文 ， 不要写中文 ，可以汉语拼音</li><li>一般公司有建表风格</li><li>可以加注释 ： comment</li><li>空格不宜过多，最好全部贴着最前面</li><li>注意括号不能是中文版的</li></ul><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ul><li>把多行数据聚合成一行 ： </li><li>sum </li><li>max</li><li>min</li><li>avg</li><li>count<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">sum(age) as age,</span><br><span class="line">max(age) as age,</span><br><span class="line">min(age) as age,</span><br><span class="line">count(age) as age,</span><br><span class="line">avg(age) as age </span><br><span class="line">from xxx </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><ul><li>group by colum</li><li><code>select * from xxx group by age;</code></li><li><code>select * from xxx where id &gt; 1 having group by age;</code></li><li>如果group by 两个 则他的维度就变了</li><li>就会变得更细</li><li>而且针对于分组之后的结果进行过滤 ，要用having</li><li><code>select * from xxx group by age having id &gt; 1;</code></li><li>group by 之后你不可以用where</li></ul><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><ul><li>多表联查</li><li>join</li><li>内连接 ： 他们的公共的部分 <code> select * from a （inner） join b on a.id=b.id</code></li><li>外连接 ： </li><li>左连接 ：以左表为主 ，右表来匹配 匹配的上 就是可以 匹配不上就是null<code> select * from a left join b on a.id=b.id</code></li><li>右连接 ：以右表为主 ， 同上 ： <code>select * from a right join b on a.id=b.id</code></li><li>全连接 ： 左右表数据都是全的 ： <code>select * from a Full join b on a.id=b.id</code> 无重复的 （mysql里不支持全连接）</li></ul><h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">show &#123;databases | schemas&#125;</span><br><span class="line">[LIKE &#x27;pattern&#x27; | WHERE expr]</span><br><span class="line"></span><br><span class="line">show [FULL] tables : 不一定是要切换到这个数据库下才可以</span><br><span class="line">[&#123;FROM | IN&#125; db_name]</span><br><span class="line">[&#123;LIKE &#x27;pattern&#x27; | WHERE expr&#125;]</span><br></pre></td></tr></table></figure><h3 id="use"><a href="#use" class="headerlink" title="use"></a>use</h3><ul><li>use xxx数据库</li></ul><h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><ul><li>drop tablename</li></ul><h2 id="dml"><a href="#dml" class="headerlink" title="dml"></a>dml</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">insert select update delete</span><br><span class="line">insert[LOW_PRIORITY | DELAYED | HIGH_PRORITY] [IGNORE]</span><br><span class="line">[INTO]</span><br><span class="line">[(col_name[,col_name]...)]</span><br><span class="line">&#123;VALUES | VALUE&#125; (value_list) [, (value_list)] ...</span><br><span class="line">[ON DUPLICATE KEY UPDATE assignment_list]</span><br><span class="line">比如 ：INSERT into user_table (name,age)VALUES (&#x27;zs&#x27;,10) , (&#x27;ad&#x27; ,19);</span><br><span class="line">* 表示所有字段</span><br><span class="line">select *</span><br><span class="line">from user_table;</span><br><span class="line">select name,age from user_table;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="desc"><a href="#desc" class="headerlink" title="desc"></a>desc</h3><ul><li>描述这个表的字段（列）</li></ul><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><ul><li>update [low_priority] [ignore] table_reference</li><li>set assignment_list</li><li>[where where_condition]</li><li>[order by ..]</li><li>[limit row_count]</li><li><code>update user_info set age=30; // 这个是对整个表进行更改</code></li><li><code>update user_info set age=30 where id=1; // 这个是对id=1的一列进行更改</code></li></ul><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><ul><li>删除数据</li><li>delete [low_priority] [quick] [ignore] from tablename</li><li>[partition(partition_name [, partition_name …])]</li><li>[where where_condition]</li><li>[order by ..]</li><li>[limit row_count]</li><li><code>delete from user_info where id=1; // 删除id=1的那个行 </code></li><li><code>delete from user_info ; // 删除整个表</code></li></ul><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><ul><li>我们通过order by xxx 让输出的顺序是按照某一个列进行排序的</li><li>默认是升序 asc</li><li>可以降序 desc</li><li><code> select * from try where name in (&#39;zi&#39;,&#39;hi&#39;) order by age desc;</code></li><li><code> select * from try where name in (&#39;zi&#39;,&#39;hi&#39;) order by age asc;</code></li><li>还可以进行嵌套使用</li><li><code>select * from try where name in (&#39;zi&#39;,&#39;hi&#39;) order by age desc , name desc;</code></li><li>代表如果age一样，则按照name的降序来</li></ul><h2 id="dcl"><a href="#dcl" class="headerlink" title="dcl"></a>dcl</h2><p>- </p><h2 id="常用字符类型"><a href="#常用字符类型" class="headerlink" title="常用字符类型"></a>常用字符类型</h2><ul><li><p>数值类型 ： int整形 long长整型 float单精度小数 double双精度 decimal小数，可以自己指定精度的</p></li><li><p>字符串 ： char字符（长度0-255 不足会自动补齐 补空格） varchar字符串（长度 0-65535 不会自己补空格）</p></li><li><p>日期 ：</p></li><li><pre><code>    date 日期 ： YYYY-MM-DD</code></pre></li><li><pre><code>  time 时间 ： HH:mm:ss</code></pre></li><li><pre><code>  datetime : 年月日时分秒  YYYY-MM-DD  HH:mm:ss</code></pre></li><li><pre><code>  timesatmp ：和java里一样</code></pre></li></ul><h1 id="mysql的优化"><a href="#mysql的优化" class="headerlink" title="mysql的优化"></a>mysql的优化</h1><ul><li>避免使用select * 因为这会造成过多的资源浪费 ，  可以应用 where id &#x3D; xx 筛选出要有需要的行</li><li>用union all 代替 union</li><li>用小表驱动大表 ： 简单来说 就是 判断条件用小表 ， 搜索用大表 ： 比如  ：in左大右小 ， exists左小右大</li><li>做增量操作 ： 比如 ：insert into 是可以一条语句插入多个数据的 但是最好不要超过500条</li><li>多用limit ：</li><li>in中的值太多用limit限制</li><li>增量查询</li><li>高效的分页</li><li>用连接查询代替子查询</li><li>join的加入不宜过多 ， 根据电脑来的 ，但是 一般是不超过3个</li><li>控制索引的数量 : 一般小于5个</li><li>选择合理的字段</li><li>提升gropu by 的效率</li><li>大数据一般用 hive 和 hbase</li><li>不要求 速度</li><li>但是可以presto等工具桥接</li><li></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/11/03/11-3/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>shell</title>
      <link>http://example.com/2022/11/02/11-2/</link>
      <guid>http://example.com/2022/11/02/11-2/</guid>
      <pubDate>Wed, 02 Nov 2022 04:08:22 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;shell&quot;&gt;&lt;a href=&quot;#shell&quot; class=&quot;headerlink&quot; title=&quot;shell&quot;&gt;&lt;/a&gt;shell&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;文件命名 ： 结尾一般以.sh结尾&lt;/li&gt;
&lt;li&gt;不要编译 &lt;/li&gt;
&lt;li&gt;文件第一行 ，一般写</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><ul><li>文件命名 ： 结尾一般以.sh结尾</li><li>不要编译 </li><li>文件第一行 ，一般写一个编辑器 ，就比如：#！bin&#x2F;bash</li><li>编写脚本</li><li>添加权限</li><li>chmod添加权限</li></ul><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li>sh .&#x2F;xxx.sh（脚本名字）</li><li>如果给予了执行权限就可以直接执行</li><li>debug</li><li>在 #！bin&#x2F;bash 后面加一个 -x</li><li>就可以看见程序运行的过程</li><li>还可以用 sh -x xxx脚本名字</li></ul><h1 id="在shell里定义变量以及引用"><a href="#在shell里定义变量以及引用" class="headerlink" title="在shell里定义变量以及引用"></a>在shell里定义变量以及引用</h1><ul><li>用read xx xx xx ：代表要从键盘输入3次，以空格分割 ， 如果要在自变量里面定义空格可以用 “xxx xxx” 这样就可以当成一个变量输入了</li><li>key&#x3D;value ： 定义变量</li><li>等号前后不能有空格</li><li>引用变量则用$xxx（变量的名字）</li><li>但是其中有单引号和双引号和反引号的区别</li><li>如果是单引号和双引号都是默认定义成字符串</li><li>如果是反引号&#96;&#96; 里面的会被解释成系统命令，并且执行</li><li>引用变量一般是要通过${} 而不是$</li><li>因为如果要拼接字符串的时候 ，我们就可以${name}xxxx（要拼接的内容）</li></ul><h2 id="特殊的命令"><a href="#特殊的命令" class="headerlink" title="特殊的命令"></a>特殊的命令</h2><ul><li>如果要在里面定义参数 ， 则$1代表脚本的第一个需要输入的参数 ， $2 ,$3…要第二个第三个。。。</li><li>而$0 :获取当前的文件名字</li><li>$? : 返回执行之后的状态 ： 0是正常执行 ， 非0是错误</li><li>$*代表所有传入的内容</li><li>$#代表传入的数量</li><li>$$代表是当前进程的进程号</li><li>$@把传入的参数作为一个字符串输出，但是里面仍然认为由多个字符串而$*则是认为他只有一个字符串</li><li>转义字符 ： 和c一样</li><li>定义数组 ： arr&#x3D;（zs lis ww zl wrm）</li><li>获取数组里的元素 ： ${arr[*]} :这个是获取所有的 。 </li><li>但是这个里面不能由；</li><li>如果要查看单个和java里一样，把【】中的换成从0开始的数字</li><li>代表查看数组里的元素个数 ： <code>$&#123;井号arr[*]&#125;</code></li><li>两种括号的形式</li><li>由子shell执行 ，不会影响到这个shell <code>（）</code></li><li>由当前shell执行 ，会影响到这个shell <code>&#123;&#125;</code></li><li>权限判断：</li><li><code>-r</code> ：读权限</li><li><code>-w</code> ：写权限</li><li><code>-x</code> ：执行权限</li><li><code>-e</code> ：文件是不是存在</li><li><code>-d</code> ：是不是目录</li><li><code>-f</code> ：是不是文件</li><li><code>-c</code> ：是不是字符设备</li><li><code>-b</code> ：是不是块设备</li><li><code>-s</code> ：文件是不是非空</li><li><code>-l</code> ：符号连接</li></ul><h2 id="对变量以及字符串的操作"><a href="#对变量以及字符串的操作" class="headerlink" title="对变量以及字符串的操作"></a>对变量以及字符串的操作</h2><ul><li><code>$&#123;num:-val&#125;</code> : 若num存在则是num , 要不然就是val</li><li><code>$&#123;num!=val&#125;</code> : 如果num存在，则是num 要不然就是val 且将num赋值为val</li></ul><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><ul><li><code>if else</code></li><li><code>if condition(条件判断);then</code></li><li><code>command</code></li><li><code>else</code></li><li><code>command</code></li><li><code>fi</code> </li><li><code>condition</code> ： [] 比如：[ 1 &#x3D;&#x3D; 2 ] 变量以及判断符号前后有空格</li><li>值判断 ：</li><li>常规的都可以用</li><li><code>=</code> 等于</li><li><code>==</code>等于</li><li><code>-ne</code> 数值不等</li><li><code>-eq</code> 数值相等</li><li><code>-gt</code> 大于</li><li><code>-ge</code> 大于等于</li><li><code>-le</code> 小于等于</li><li><code>-lt</code> 小于</li><li><code>if con; then</code></li><li><code>command</code></li><li><code>elif con; then</code></li><li><code>com</code></li><li><code>....</code></li><li>后面<code>elif</code>可以无限加</li><li>同时也有<code>break</code>和<code>countinue</code></li></ul><h2 id="与或非"><a href="#与或非" class="headerlink" title="与或非"></a>与或非</h2><ul><li>与 <code>||</code></li><li>或 <code>&amp;&amp;</code></li></ul><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul><li><code>for var in con1 con2 con3</code></li><li><code>do</code></li><li><code>程序段</code></li><li><code>done</code></li><li><code>for((i=0;i&lt;10;i++))</code></li><li><code>do</code></li><li><code>程序段</code></li><li><code>done</code></li></ul><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><ul><li><code>while【con】</code></li><li><code>do</code></li><li><code>程序段</code></li><li><code>done</code></li></ul><h2 id="until"><a href="#until" class="headerlink" title="until"></a>until</h2><ul><li><code>until【con】</code></li><li><code>do</code></li><li><code>程序段</code></li><li><code>done</code></li><li>这个和<code>while</code>相反 ，条件为错，一直执行</li><li>上述的程序段中可以用let i++等</li><li>这个<code>con</code>可以应用（（））或者中括号都行</li></ul><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><ul><li><code>case $变量名 in</code></li><li><code>&quot;值 1&quot;）</code></li><li><code>如果变量的值等于1 ，则执行程序1</code></li><li><code>；；</code></li><li><code>&quot;值 2&quot;）</code></li><li><code>如果变量的值等于2 ，则执行程序2</code></li><li><code>；；</code></li><li><code>。。。还可以衔接很多的</code></li><li><code>*)</code></li></ul><h2 id="对字符串的操作"><a href="#对字符串的操作" class="headerlink" title="对字符串的操作"></a>对字符串的操作</h2><ul><li>字符串的长度 ： <code>$&#123;井号xxx&#125;</code></li><li>从下标n处开始进行提取 ： <code>$&#123;xxx:n&#125;</code></li><li>从下表为n处提取m个 ： <code>$&#123;xxx:n:m&#125;</code></li><li>用new替换xxx中出现的第一个mm ： <code>$&#123;xxx/mm/new&#125;</code></li><li>用new替换xxx中出现的所有mm ： <code>$&#123;xxx//mm/new&#125;</code></li><li>IFS变量进行字符串分割</li><li></li></ul><h1 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h1><ul><li>函数名（）{}</li><li>fnction 函数名（）{}</li><li>函数的返回值可以应用return来进行结束</li></ul><h1 id="shell分析工具"><a href="#shell分析工具" class="headerlink" title="shell分析工具"></a>shell分析工具</h1><ul><li>cut ：剪</li><li>cut[选项参数] filename</li><li><code>-f</code> 列号，第几列</li><li><code>-f 2 </code>：代表第二列</li><li><code>-f 2-</code> ：代表第二列之后的所有</li><li><code>-d</code> 分隔符，按照指定的分隔符分割列，默认是\t</li><li><code>-c</code> 按照字符切割 后面夹n表示第几列 如-c1</li><li><code>awk</code> : 文本分析工具 或者叫 gawk</li><li><code>awk[选项参数] &#39;/pattern1&#123;action1&#125; /pattern2/&#123;action2&#125;...&#39; (filename)</code></li><li>选项参数</li><li><code>-F</code> ：指定输入文件分隔符</li><li><code>-v</code> ：赋值一个用户自己定义的变量</li><li>打印第一和第二列 ： <code>awk &#39;&#123;print $1，$2&#125;&#39; （filename）</code></li><li>awk一般和cat联用 ： <code>cat xxx | awk &#39;&#123;print $1，$2&#125;&#39;</code></li><li>也可以这样 ： <code>cat xxx | awk &#39;&#123;print $1&quot;,&quot;$2&#125;&#39;</code> : 这样代表会让其中两列用，分割的形式表示出来</li><li>还可以加上 ：<code>cat xxx | awk &#39;BEGINH&#123;print xxx&#125;&#123;print $1&quot;,&quot;$2&#125;END&#123;print mmm&#125;&#39;</code> ：就会在开始及结束的时候分别加上xxx和mmm</li><li><code>-f</code> 则是执行脚本</li><li>还可以 <code>cat xxx | awk -v i=1 -F &quot;:&quot; &#39;&#123;print $3 +i&#125;&#39;</code> :代表xxx文件的由：分割的第3列都加一在输出</li><li>内置变量</li><li><code>FILENAME</code> ：文件名</li><li><code>NR</code> ： 已读的记录数（行号）</li><li><code>NF</code> ： 浏览记录的域的个数（切割后的列的个数）</li><li>获取第一行 <code>cat xxx | awk &#39;NR==1&#123;print&#125;&#39;</code></li><li>里面的条件&#x3D;&#x3D;可以换成  &gt; &lt; &gt;&#x3D; &lt;&#x3D;</li><li></li><li><code>sed</code> : 文本替换(回去自己查)</li><li>把文本中 d 替换成 m ,每行第一次遇见a才会替换</li><li><code>sed -i &#39;s/d/m/&#39;</code> xxx文件名</li><li>全文替换</li><li><code>sed -i &#39;s/d/m/g&#39;</code> xxx文件名</li><li>把值路径替换成&#x2F;root</li><li><code>sed -i &#39;s//fata/spark//root</code> xxx文件’</li><li>不过会爆错</li><li>不过加上\就对了</li><li><code>sed -i &#39;s\/fata\/spark\/root&#39;</code> xxx文件’</li><li><code>sed -i &#39;s#/root#/data/spark#g&#39;</code> xxx文件</li></ul><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul><li>模糊式的匹配搜索</li><li>pattern</li><li>最简单的正则 ： 直接给一个关键字 就是grep的时候</li><li>特殊字符</li><li>^作为一行的开头 ：比如^a 代表以a开头</li><li>$作为一行的结束 ：比如n$ 代表以n结尾</li><li>正则可以多种一起应用</li><li>比如 ^$代表空行</li><li>grep -n显示行号</li><li>通配符 ： . 代表匹配一个任意的字符</li><li>比如 ： r..t :代表r和t中间有两个字符的</li><li>特殊字符 ： * ：代表一个字符出现任意次数</li><li>比如 o* 代表o出现任意次数</li><li>.*则表示任意一个字符出现任意次数 ，甚至可以匹配空字符串</li><li>于是可以和上面的联用 ： ^a.*b$</li><li>代表以a开头 b结尾 中间任意字符的</li><li>字符区间：</li><li>[]表示匹配其中范围内的字符</li><li>比如[0-9]* ：任意长度的数字</li><li>[0,7] : 0或7</li><li>还可以这样写 ： [a-c , b-f]</li><li>[ab]* ：代表任意以ab组成的 比如 ：aab<br> abb 等</li><li>转义字符 \</li><li>当我们要搜索$等关键字的时候</li><li>要’反斜杠$’ :表示转义 ，才可以用做搜索</li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ul><li>匹配手机号</li><li><code>^1[345678][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]$</code></li><li><code>^1[345678][0-9]&#123;9&#125;$</code></li><li>但是下面的花括号是扩展</li><li>要用<code>grep -E ^1[345678][0-9]&#123;9&#125;$ </code>才可以</li><li>但是上面的最开始的是都可以支持的</li><li></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/11/02/11-2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux命令（运维）</title>
      <link>http://example.com/2022/11/01/11-1/</link>
      <guid>http://example.com/2022/11/01/11-1/</guid>
      <pubDate>Tue, 01 Nov 2022 01:10:45 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;用户常用命令&quot;&gt;&lt;a href=&quot;#用户常用命令&quot; class=&quot;headerlink&quot; title=&quot;用户常用命令&quot;&gt;&lt;/a&gt;用户常用命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;ll &amp;#x2F;usr&amp;#x2F;sbin&amp;#x2F;user* 查看用户命令&lt;/li&gt;
&lt;l</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="用户常用命令"><a href="#用户常用命令" class="headerlink" title="用户常用命令"></a>用户常用命令</h1><ul><li>ll &#x2F;usr&#x2F;sbin&#x2F;user* 查看用户命令</li><li>ll &#x2F;usr&#x2F;sbin&#x2F;group* 查看组命令</li><li>查看用户信息 &#x2F;etc&#x2F;passwd</li><li>查看组信息 &#x2F;etc&#x2F;group</li><li>查看用户 id xxx名称</li><li>userdel xxx ： 代表删除xx用户</li><li>useradd xxx ： 代表添加xx用户</li><li>usermod xxx ： 代表对一个用户进行操作</li></ul><h2 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h2><ul><li>su xxx</li><li>su -xxx </li><li>切换用户 ，如果用下面的那种，会获得该用户的环境变量并且执行</li><li>用上面的那种目录不会跑到所切换的用户的home</li><li>而下面的会跑到切换用户的home</li><li>用exit退回</li><li>如果删除了一个已经存在的user ， 再次添加相同名称的用户的时候，会有警告，说明此用户的目录已经存在</li><li>在skel文件夹下有隐藏文件</li><li>如果把这个里的东西删掉，就会出现环境变量丢失的情况</li><li>我们可以从别的地方的给他cp过来</li><li>就会恢复了</li></ul><h1 id="组常见命令"><a href="#组常见命令" class="headerlink" title="组常见命令"></a>组常见命令</h1><ul><li>groupadd xxx</li><li>把一个用户添加到一个组上</li><li>usermod -a -G xxx组 xxx用户</li><li>usermod -g ： 更改用户主组 ，但是这样会让追加组丢失</li></ul><h1 id="设置用户密码"><a href="#设置用户密码" class="headerlink" title="设置用户密码"></a>设置用户密码</h1><ul><li>passwd</li><li>默认修改当前用户的密码</li></ul><h2 id="修改其他用户的密码"><a href="#修改其他用户的密码" class="headerlink" title="修改其他用户的密码"></a>修改其他用户的密码</h2><ul><li>只有root有权限修改其他的密码</li><li>passwd xxx名字</li></ul><h3 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3><ul><li>是一个普通用户临时具有最大权限</li><li>修改 etc&#x2F;sudoers</li><li>xxx用户 ALL&#x3D;(root) NOPASSWD:ALL</li><li>然后就可以用 sudo xxx 命令这就代表这条指令具有了最高的权限</li><li>su 和 sudo 联用</li><li>sudo su xx人员</li><li>代表通过root权限切换</li></ul><h3 id="etc-x2F-paswd"><a href="#etc-x2F-paswd" class="headerlink" title="etc&#x2F;paswd"></a>etc&#x2F;paswd</h3><ul><li>这个文件是密码文件</li><li>在这个文件里 有解释器 如果后面变成nologin代表不让登录</li><li>如果最后变成false 则你无论如何都登陆不成功 </li><li>CDH平台 可能会用到</li><li>把上面两中改成 bin&#x2F;bash 就可以成功了</li></ul><h1 id="权限相关命令"><a href="#权限相关命令" class="headerlink" title="权限相关命令"></a>权限相关命令</h1><ul><li>第一个字母 </li><li>d :文件夹</li><li>-(横杠) ： 文件</li><li>l ： 链接</li><li>后面9个字母 ，每三个一组</li><li>r表示read  代表数字 4</li><li>w表示write 代表数字 2</li><li>x表示执行权限 代表数字 1</li><li>-表示无权限 代表数字 0</li><li>例子 ：-rw-r- -r- -. 1 root root 2047 10月 31 09:48 initial-setup-ks.cfg</li><li>第一组 ： rw- 4+2+0&#x3D;6 代表文件或者文件夹的所属用户拥有的权限</li><li>第二组 ： r- - 4+0+0&#x3D;4 代表文件或者文件夹的组的成员的权限</li><li>第三组 ： r- - 4+0+0&#x3D;4 代表文件或者文件夹的其他组的权限</li><li>字母顺序只能按照rwxr这个顺序</li></ul><h2 id="权限修改命令"><a href="#权限修改命令" class="headerlink" title="权限修改命令"></a>权限修改命令</h2><ul><li>chmod 修改文件或者文件夹权限</li><li>chown 修改文件或者文件夹的组 ， 或者用户</li><li>例子 ： chmod xxx（数字）xxx名字</li><li>如果要该文件夹 则要 chmod -R xxx数字 xxx名字</li><li>例子 ： chown xxx用户：xxx用户 文件名</li><li>同样也可以用-R ，来修改文件夹</li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>如果要访问问文件夹里的文件，要先看上面的文件夹的权限是啥样的</li></ul><h2 id="大小"><a href="#大小" class="headerlink" title="大小"></a>大小</h2><ul><li>ll -h ，du -sh</li><li>而对于文件夹 du -sh也可以查看 ，ll -h 就不行</li><li>du -sh ： 最小是4k ， 但是他无法查看权限</li></ul><h2 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h2><ul><li>find</li><li>locate（没有网，不建议用）</li><li>例子 ： find 【path】 【表达式】 </li><li>表达式 ： -name “xxx” : 按照名字查找</li><li>比如 ： find &#x2F; -name “1.log”</li></ul><h2 id="vi-x2F-vim"><a href="#vi-x2F-vim" class="headerlink" title="vi&#x2F;vim"></a>vi&#x2F;vim</h2><ul><li>编辑文件</li><li>尾行模式 ： wq 退出保存</li><li>如果编辑文件的时候突然不小心把编辑的时候中断了，就是ctrl + c 或者 ctrl + z</li><li>解决方法 ： 删除Swap文件是隐藏文件 ，.开头的</li><li>行号 ： 首先进入尾行模式</li><li>set nu 就会有行号</li><li>set nonu就可以取消行号</li></ul><h2 id="常用快捷方式"><a href="#常用快捷方式" class="headerlink" title="常用快捷方式"></a>常用快捷方式</h2><ul><li>dd ： 删除当前行</li><li>dG ： 删除当前行 以及以下所有行</li><li>ndd ： 删除这个行 以及下面n行</li><li>u ：　撤回</li><li>ｇｇ　：　跳转到第一行的第一个字母</li><li>Ｇ　：　跳转到最后一行的第一个字母</li><li>ｓｈｉｆｔ　＋ $  ： 就是跳转到行尾</li><li>ｓｈｉｆｔ　＋ ^  : 跳转到行头</li><li>i ： 是当前行编辑</li><li>o ： 是跳转到下一行编辑</li></ul><h3 id="清空文件内容"><a href="#清空文件内容" class="headerlink" title="清空文件内容"></a>清空文件内容</h3><ul><li>gg -&gt; dG</li><li>linux 有一个空的文件</li><li>然后 cat &#x2F;dev&#x2F;null  &gt; xxx文件名字</li></ul><h2 id="系统相关命令"><a href="#系统相关命令" class="headerlink" title="系统相关命令"></a>系统相关命令</h2><ul><li>内存 ： free</li><li>磁盘 ： df</li><li>可能会添加磁盘</li><li>可通过这个来判断</li><li>后来挂载的一般是vdb的</li><li>负载 ： top</li><li>load average ： xxx xxx xxx</li><li>第一个是5分钟之内的负载</li><li>第二个是10分钟</li><li>第三个是15分钟</li><li>如果任意一个超过十 ，说明当前公司的服务器 比较卡</li><li>pid是进程号</li><li>user是那个用户</li><li>重启的目的 ： </li><li>检查是不是硬件有无问题</li></ul><h2 id="yum-x2F-rpm"><a href="#yum-x2F-rpm" class="headerlink" title="yum&#x2F;rpm"></a>yum&#x2F;rpm</h2><ul><li>安装linux软件的方式 联网</li><li>yum search xxx</li><li>下载下来的一个安装包以rpm存储</li><li>yum install xxx</li></ul><h2 id="通讯命令"><a href="#通讯命令" class="headerlink" title="通讯命令"></a>通讯命令</h2><ul><li>ping + ip</li><li>telnet ip 端口 :检查对面的端口是不是开放</li><li>端口 ： 1-65535</li><li>两个机器要在一个网段</li><li>ping通就代表是网络ok</li></ul><h2 id="补充命令"><a href="#补充命令" class="headerlink" title="补充命令"></a>补充命令</h2><ul><li>which + 命令</li><li>whereis + 命令</li><li>查看linux或者某个软件的shell脚本是不是存在</li><li>which ： 是查看自己环境变量的命令存在吗</li><li>whereis ： 是查看全局变量的名利给的存在吗</li></ul><h2 id="修改机器名字"><a href="#修改机器名字" class="headerlink" title="修改机器名字"></a>修改机器名字</h2><ul><li>hostnamectl ： xxxx</li></ul><h2 id="解压缩命令"><a href="#解压缩命令" class="headerlink" title="解压缩命令"></a>解压缩命令</h2><ul><li>linux 对zip和gz可以解压</li><li>zip xxx.zip （-r） xxx文件（这里压缩可以多个）如果是文件夹则要加上-r</li><li>代表压缩到xxx.zip里</li><li>解压</li><li>unzip xxx.zip （-d xxx文件夹）</li><li>tar ：</li><li>例子 ： tar -cf xxx.tar xxx文件（可以多个）</li><li>解压：</li><li>例子 ： tar -xf xxx.tar -C xxx文件夹</li><li>可以不加-C就是默认解压当前文件目录</li><li>压缩：</li><li>用z命令</li><li>tar -zcf xxx.tar xxx文件（可以多个）</li><li>解压：</li><li>tar -zxf xxx.tar -C xxx文件夹</li><li>我们可以再加上v让他们显示详细得处理文件的过程</li><li>zxvf：同上</li><li>zxcf：同上</li></ul><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><ul><li>当用yum安装成功之后 ，可以直接用系统命令启动</li><li>比如 ： service name start|status|restart|stop  : centos6</li><li>syystemctl start|status|restart|stop name : centos7</li><li>查看进程</li><li>ps -ef</li><li>可以进行筛选</li><li>ps -ef|grep xxx名字</li><li>杀死进程 </li><li>kill -9 + 进程号</li><li>查端口：</li><li>netstat -nlp | grep xxxname</li><li>通过</li><li>:::80</li><li>ip:80</li><li>0.0.0.0:80</li><li>我们可以通过外部机器访问这个端口进入服务界面</li><li>kill -9 $(pgrep -f xxx名字)</li><li>下面的会强制把他们全杀掉 ， 包括子进程</li><li></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/11/01/11-1/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Linux命令</title>
      <link>http://example.com/2022/10/31/10-31/</link>
      <guid>http://example.com/2022/10/31/10-31/</guid>
      <pubDate>Mon, 31 Oct 2022 03:03:51 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;linux的目录形式&quot;&gt;&lt;a href=&quot;#linux的目录形式&quot; class=&quot;headerlink&quot; title=&quot;linux的目录形式&quot;&gt;&lt;/a&gt;linux的目录形式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;层级式&lt;/li&gt;
&lt;li&gt;当用了Xshell登录了管理员之后会显</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="linux的目录形式"><a href="#linux的目录形式" class="headerlink" title="linux的目录形式"></a>linux的目录形式</h1><ul><li>层级式</li><li>当用了Xshell登录了管理员之后会显示</li><li>root@bigdata1 liuzihan</li><li>前面表示root用户</li><li>@后面的是机器名字</li><li>在后面的是普通用户的名字</li><li>~表示当前用户的家目录</li><li>有命令帮助 应用 xx–help ， 这个xx代表是命令</li><li>例如： 用法：ls [选项]… [文件]…</li><li>上面代表ls后面可以加多个辅助命令 ， 还可以加多个文件</li><li>中断命令 ： ctrl + c 或者 ctrl + z</li><li>用键盘自动补全 ，</li><li>按一次 ： 匹配当前据有唯一标识的补全</li><li>按两次 ： 把所有匹配的项目都展示出来</li></ul><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><ul><li>pwd : 查看当前所在的目录</li><li>ls ： 查看所在的目录下有文件或者文件夹</li><li>mkdir ： 创建文件夹 ， 后面加文件夹的名字</li><li>cd ： 切换路径 ， 就算现在所在的目录 ， 只能切换文件夹</li><li>ls -l ： 表示看这个文件夹的额外的详细信息 ， 权限 ，用户 ， 用户组 ， 大小 ， 创建时间。 </li><li>ls -l -a ：显示以.开头的文件或者文件夹 ， 就是隐藏文件</li><li>ls -l -h ：查看文件的大小 ， 文件夹是不可以的</li><li>上面的 ls -l &#x3D;&#x3D; ll 但是在一些操作系统里是不行的在centos里是可以的但是ubanto上是不行的</li><li>其实现是通过别名</li><li>ll -r -t ： 可以看见按照时间顺序降序的排序文件 ，就算最下面的就是最近更改的</li><li>上述还可以改成 ll -rt &#x3D;&#x3D;ll -r -t</li></ul><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹##"></a>创建文件夹##</h2><h3 id="并级创建"><a href="#并级创建" class="headerlink" title="并级创建"></a>并级创建</h3><ul><li>mkdir 1 2 3</li></ul><h3 id="串级创建"><a href="#串级创建" class="headerlink" title="串级创建"></a>串级创建</h3><ul><li>mkdir 1&#x2F;2&#x2F;3</li><li>但是这样要求必须有上级目录</li><li>不过可以用</li><li>mkdir -p 1&#x2F;2&#x2F;3</li><li>就可以了</li></ul><h2 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h2><ul><li>cd</li><li>不过有绝对路径和相对路径的区别</li><li>绝对路径 ： 从根目录</li><li>相对路径 ： 从当前目录</li><li>cd的可以是绝对，也可以是相对</li><li>cd..&#x2F; : 返回上级目录</li><li>cd.&#x2F; : 表示当前目录</li><li>可以这样用 ： cd .&#x2F;1</li></ul><h3 id="快速回到家目录"><a href="#快速回到家目录" class="headerlink" title="快速回到家目录"></a>快速回到家目录</h3><ul><li>1 , cd &#x2F;xx</li><li>2 , cd + 回车 &#x3D;&#x3D;&gt;推荐</li><li>3 , cd + ~</li><li>cd - 回到上次操作的目录</li></ul><h2 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h2><ul><li>touch 1.log</li><li>vi&#x2F;vim 1.log</li><li>echo “bigdata” &gt; 3.log</li><li><blockquote><p>: 表示创建或者覆盖一个文件</p></blockquote></li><li>cat ： 查看文件内容</li><li>比如 ： cat 3.log</li><li><blockquote><blockquote><p>: 追加 ，上述一个 &gt; 是覆盖 ，这个是追加</p></blockquote></blockquote></li></ul><h2 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h2><ul><li>命令行模式</li><li>编辑模式</li><li>尾行模式</li><li>vi&#x2F;vim xxx</li><li>然后用insert</li><li>编辑完了</li><li>用esc ， 之后有几种选项</li><li>:q ：代表退出并且不保存</li><li>:w ：代表写入，但是不退出</li><li>:wq ：代表保存且退出</li><li>：！ ：强制</li><li>还可以以应用nano</li><li>就nano Xxx</li><li>然后下面就会有提示</li><li>如果没有这个文件，就会创建文件</li></ul><h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><ul><li>cat ： 查看文件所有内容</li><li>more ： 查看文件内容，按空格是往下翻，按q退出</li><li>less ： 查看大文件，也是一页一页的 ， q是退出，按小键盘的上下键，是翻页</li><li>一般小文件，用 cat 大文件more或者less</li><li>实时查看文件产生的内容</li><li>tail ： </li><li>-f</li><li>-F &#x3D;&#x3D; -f + retry</li><li>意义：-F ， 如果我们查看一个文件的时候，文件被删了，然后又重新生成了给一样文件名的文件 ， 则f就不会动态显示了</li><li>但是F会重显示新的那个文件</li><li>用法 tail -f xxx</li><li>用法 tail -F xxx</li></ul><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><ul><li>查找特定日志里的xx字段</li><li>通过 vi&#x2F;vim 进入 然后进行搜索</li><li>在尾行模式 ，输入要查找的字符 例如 &#x2F;error</li><li>然后键盘 n 查找下一个词 N 查找上一个词</li><li>通过cat </li><li>cat xxxx文件 | grep error 通过后面的grep 过滤文件</li><li>查看进程也可以用这种方式筛选</li><li>可以和其他命令联用 比如 把所有error的信息收集起来</li><li>cat xxx文件 | grep error &gt; xxx文件</li><li>grep的常用的参数</li><li>grep -A xx行： 查看某一个词的后xx行</li><li>grep -B xx行： 查看某一个词的前xx行</li><li>grep -C xx行： 查看某一个词的前后xx行</li><li>与上面的了连用为</li><li>cat xxx文件 | grep -A xx行 error &gt; xxx文件</li><li>nano方式</li><li>管道符| ：代表让上一个语句的输出代表 代表下一个语句的输入</li></ul><h2 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h2><ul><li>上传 ： win 到 linux</li><li>下载 ： linux 到 win</li></ul><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><ul><li>工具 ： Xshell 通过Xshell的Xftp进行下载和上传</li><li>linux命令 ： yum install lzxx ，通过他进行下载上传</li></ul><h2 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h2><ul><li>clear : 清屏</li><li>ctrl + l ： 清屏</li></ul><h2 id="查看操作命令历史"><a href="#查看操作命令历史" class="headerlink" title="查看操作命令历史"></a>查看操作命令历史</h2><ul><li>history </li><li>或者键盘上的上下箭头号</li><li>按键盘的！ + 命令行数</li></ul><h2 id="移动与复制"><a href="#移动与复制" class="headerlink" title="移动与复制"></a>移动与复制</h2><ul><li>mv[选项]..源文件..目录</li><li>例如： mv dir1 bigdata</li><li>cp[选项]..源文件..目录</li><li>例如： cp -r dir2 bigdata</li><li>但是 cp还可以复制的时候改文件名字</li><li>例如 cp 源文件 目标文件</li><li>就会把源文件中的内容给目标文件，命名就是这里的目标文件</li><li>也可以和上一个复制到文件夹联用</li><li>例如 ： cp xx xxx目录&#x2F;xx文件</li><li>mv始终是一份</li><li>而cp则是两份</li><li>所以mv比cp快</li></ul><h2 id="删除文件或者文件夹"><a href="#删除文件或者文件夹" class="headerlink" title="删除文件或者文件夹"></a>删除文件或者文件夹</h2><ul><li>rm[选项]..文件..</li><li>有删除提示 ： rm reeor.log</li><li>删除文件夹 ： rm -r xxxx文件夹</li><li>无删除提示 ： rm -f</li><li>用法和上面一样</li><li>且 rm-r -f xxx &#x3D; rm-rf xxx</li><li>比如 我们可以 rm -rf&#x2F; &#x3D;&gt; 把整个全删除了</li></ul><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><ul><li>alias </li><li>创建别名：</li><li>alias aa &#x3D;”cd&#x2F;tmp” &#x3D;&gt;仅仅当前会话生效 ， 让aa代表cd&#x2F;tmp</li><li>但是在其他会话里就不会生效，因为这个没有在环境变量里设置</li></ul><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>就像java的jdk环境一样 我们也有环境变量</li><li>全局环境变量 &#x2F;etc&#x2F;profile</li><li>个人变量 ： 只能当前用户使用 其他用户不能使用</li><li>~&#x2F;.bashrcc</li><li>~&#x2F;.bash_profile</li><li>生效环境变量</li><li>source &#x2F;etc&#x2F;profile</li><li>重新打开一个会话</li><li>然后这个别名就会好用了</li><li>但是这个不能跨用户访问，比如root的不能在普通用户这么用，相反也是</li><li></li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/10/31/10-31/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>细节</title>
      <link>http://example.com/2022/10/28/10-28/</link>
      <guid>http://example.com/2022/10/28/10-28/</guid>
      <pubDate>Fri, 28 Oct 2022 01:26:29 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;关于Map的遍历&quot;&gt;&lt;a href=&quot;#关于Map的遍历&quot; class=&quot;headerlink&quot; title=&quot;关于Map的遍历&quot;&gt;&lt;/a&gt;关于Map的遍历&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;我们可以用Set来遍历&lt;/li&gt;
&lt;li&gt;代码如下:&lt;/li&gt;
&lt;/ul&gt;
&lt;f</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="关于Map的遍历"><a href="#关于Map的遍历" class="headerlink" title="关于Map的遍历"></a>关于Map的遍历</h1><ul><li>我们可以用Set来遍历</li><li>代码如下:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">map2.put(&quot;Tom&quot;, &quot;Corejava&quot;);</span><br><span class="line">map2.put(&quot;Jerry&quot;, &quot;Jsp&quot;);</span><br><span class="line">map2.put(&quot;KJSHHKJ&quot; , &quot;Oracle&quot;);</span><br><span class="line">Set m = map2.entrySet();</span><br><span class="line">m.forEach(System.out::println);</span><br></pre></td></tr></table></figure><ul><li>我们还可以用，把map转换成流再进行</li><li>代码如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">map2.entrySet().stream().filter((item) -&gt; &quot;Oracle&quot;.equals(item.getValue())).forEach((item) -&gt; System.out.println(item.getKey()));</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>特别帅气，</li><li>而且foreach的本质就是流</li><li>先通过entryset转换成集合</li><li>然后集合有Stream方法，可以转化成流</li><li>然后对于流我们加上filter（过滤器）</li><li>筛选我们想要的结构，这个过滤器里面只能放返回值是布尔的</li><li>然后筛选完了，我们可以对他进行lambda的表达输出语句</li></ul>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/%E6%97%A5%E5%BF%97/">日志</category>
      
      
      
      <comments>http://example.com/2022/10/28/10-28/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
